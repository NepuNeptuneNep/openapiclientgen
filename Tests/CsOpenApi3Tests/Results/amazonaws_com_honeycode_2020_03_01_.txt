//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateTableRowsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workbookCursor")]
		public int WorkbookCursor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdRows")]
		public CreatedRowsMap CreatedRows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedBatchItems")]
		public FailedBatchItem[] FailedBatchItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatedRowsMap
	{
	}
	
	/// <summary>
	///  A single item in a batch that failed to perform the intended action because of an error preventing it from succeeding. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailedBatchItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	///  Data needed to create a single row in a table as part of the BatchCreateTableRows request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRowData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batchItemId")]
		public string BatchItemId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cellsToCreate")]
		public RowDataInput CellsToCreate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RowDataInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestTimeoutException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteTableRowsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workbookCursor")]
		public int WorkbookCursor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedBatchItems")]
		public FailedBatchItem[] FailedBatchItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateTableRowsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workbookCursor")]
		public int WorkbookCursor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedBatchItems")]
		public FailedBatchItem[] FailedBatchItems { get; set; }
	}
	
	/// <summary>
	///  Data needed to create a single row in a table as part of the BatchCreateTableRows request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRowData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rowId")]
		public string RowId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cellsToUpdate")]
		public RowDataInput CellsToUpdate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpsertTableRowsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public UpsertRowsResultMap Rows { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workbookCursor")]
		public int WorkbookCursor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedBatchItems")]
		public FailedBatchItem[] FailedBatchItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpsertRowsResultMap
	{
	}
	
	/// <summary>
	///  Data needed to upsert rows in a table as part of a single item in the BatchUpsertTableRows request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpsertRowData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batchItemId")]
		public string BatchItemId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public Filter Filter { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cellsToUpdate")]
		public RowDataInput CellsToUpdate { get; set; }
	}
	
	/// <summary>
	///  An object that represents a filter formula along with the id of the context row under which the filter function needs to evaluate. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Filter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formula")]
		public string Formula { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contextRowId")]
		public string ContextRowId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTableDataImportJobResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobStatus")]
		public TableDataImportJobStatus JobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobMetadata")]
		public TableDataImportJobMetadata JobMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public ErrorCode ErrorCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TableDataImportJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// The metadata associated with the table data import job that was submitted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableDataImportJobMetadata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submitter")]
		public ImportJobSubmitter Submitter { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submitTime")]
		public System.DateTimeOffset SubmitTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="importOptions")]
		public ImportOptions ImportOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public ImportDataSource DataSource { get; set; }
	}
	
	/// <summary>
	/// An object that contains the attributes of the submitter of the import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportJobSubmitter
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userArn")]
		public string UserArn { get; set; }
	}
	
	/// <summary>
	/// An object that contains the options specified by the sumitter of the import request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="destinationOptions")]
		public DestinationOptions DestinationOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="delimitedTextOptions")]
		public DelimitedTextImportOptions DelimitedTextOptions { get; set; }
	}
	
	/// <summary>
	/// An object that contains the options relating to the destination of the import request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DestinationOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="columnMap")]
		public ImportColumnMap ColumnMap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportColumnMap
	{
	}
	
	/// <summary>
	///  An object that contains the options relating to parsing delimited text as part of an import request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DelimitedTextImportOptions
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="delimiter")]
		public string Delimiter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasHeaderRow")]
		public System.Nullable<System.Boolean> HasHeaderRow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignoreEmptyRows")]
		public System.Nullable<System.Boolean> IgnoreEmptyRows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataCharacterEncoding")]
		public ImportDataCharacterEncoding DataCharacterEncoding { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImportDataCharacterEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTF-8")]
		UTFMinus8 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="US-ASCII")]
		USMinusASCII = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ISO-8859-1")]
		ISOMinus8859Minus1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTF-16BE")]
		UTFMinus16BE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTF-16LE")]
		UTFMinus16LE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTF-16")]
		UTFMinus16 = 5,
	}
	
	/// <summary>
	/// An object that has details about the source of the data that was submitted for import.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportDataSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSourceConfig")]
		public ImportDataSourceConfig DataSourceConfig { get; set; }
	}
	
	/// <summary>
	///  An object that contains the configuration parameters for the data source of an import request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportDataSourceConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataSourceUrl")]
		public string DataSourceUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_DENIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_URL_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_IMPORT_OPTIONS_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_TABLE_ID_ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_TABLE_COLUMN_ID_ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLE_NOT_FOUND_ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE_EMPTY_ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_FILE_TYPE_ERROR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE_PARSING_ERROR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE_SIZE_LIMIT_ERROR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE_NOT_FOUND_ERROR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_ERROR = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_NOT_FOUND_ERROR = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_LIMIT_ERROR = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetScreenDataResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ResultSetMap Results { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workbookCursor")]
		public int WorkbookCursor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResultSetMap
	{
	}
	
	/// <summary>
	/// The input variables to the app to be used by the InvokeScreenAutomation action request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VariableValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rawValue")]
		public string RawValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvokeScreenAutomationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workbookCursor")]
		public int WorkbookCursor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutomationExecutionException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutomationExecutionTimeoutException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTableColumnsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableColumns")]
		public TableColumn[] TableColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workbookCursor")]
		public System.Nullable<System.Int32> WorkbookCursor { get; set; }
	}
	
	/// <summary>
	/// An object that contains attributes about a single column in a table
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableColumn
	{
		
		[System.Runtime.Serialization.DataMember(Name="tableColumnId")]
		public string TableColumnId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableColumnName")]
		public string TableColumnName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public Format Format { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRENCY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_TIME = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENTAGE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNTING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROWLINK = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROWSET = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTableRowsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="columnIds")]
		public string[] ColumnIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public TableRow[] Rows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowIdsNotFound")]
		public string[] RowIdsNotFound { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workbookCursor")]
		public int WorkbookCursor { get; set; }
	}
	
	/// <summary>
	/// An object that contains attributes about a single row in a table
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableRow
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rowId")]
		public string RowId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cells")]
		public Cell[] Cells { get; set; }
	}
	
	/// <summary>
	/// An object that represents a single cell in a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cell
	{
		
		[System.Runtime.Serialization.DataMember(Name="formula")]
		public string Formula { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public Format Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawValue")]
		public string RawValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formattedValue")]
		public string FormattedValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formattedValues")]
		public string[] FormattedValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTablesResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tables")]
		public Table[] Tables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workbookCursor")]
		public System.Nullable<System.Int32> WorkbookCursor { get; set; }
	}
	
	/// <summary>
	/// An object representing the properties of a table in a workbook.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Table
	{
		
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// A string to string map representing tags
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagsMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryTableRowsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="columnIds")]
		public string[] ColumnIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public TableRow[] Rows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workbookCursor")]
		public int WorkbookCursor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartTableDataImportJobResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobStatus")]
		public TableDataImportJobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateTableRowsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rowsToCreate")]
		public CreateRowData[] RowsToCreate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteTableRowsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rowIds")]
		public string[] RowIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateTableRowsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rowsToUpdate")]
		public UpdateRowData[] RowsToUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpsertTableRowsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rowsToUpsert")]
		public UpsertRowData[] RowsToUpsert { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	/// <summary>
	/// <p> CellInput object contains the data needed to create or update cells in a table. </p> <note> <p> CellInput object has only a facts field or a fact field, but not both. A 400 bad request will be thrown if both fact and facts field are present. </p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CellInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="fact")]
		public string Fact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="facts")]
		public string[] Facts { get; set; }
	}
	
	/// <summary>
	/// Metadata for column in the table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ColumnMetadata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public Format Format { get; set; }
	}
	
	/// <summary>
	/// The data in a particular data cell defined on the screen.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="overrideFormat")]
		public Format OverrideFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawValue")]
		public string RawValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formattedValue")]
		public string FormattedValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTableDataImportJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VariableValueMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetScreenDataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workbookId")]
		public string WorkbookId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="screenId")]
		public string ScreenId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public VariableValueMap Variables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object that contains the properties for importing data to a specific column in a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceDataColumnProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="columnIndex")]
		public System.Nullable<System.Int32> ColumnIndex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImportSourceDataFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIMITED_TEXT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvokeScreenAutomationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public VariableValueMap Variables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowId")]
		public string RowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTableColumnsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTableRowsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="rowIds")]
		public string[] RowIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTablesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryTableRowsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filterFormula")]
		public Filter FilterFormula { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A single row in the ResultSet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResultRow
	{
		
		[System.Runtime.Serialization.DataMember(Name="rowId")]
		public string RowId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataItems")]
		public DataItem[] DataItems { get; set; }
	}
	
	/// <summary>
	///  ResultSet contains the results of the request for a single block or list defined on the screen. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResultSet
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public ColumnMetadata[] Headers { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public ResultRow[] Rows { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartTableDataImportJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public ImportDataSource DataSource { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataFormat")]
		public ImportSourceDataFormat DataFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="importOptions")]
		public ImportOptions ImportOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpsertAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPENDED = 1,
	}
	
	/// <summary>
	///  An object that represents the result of a single upsert row request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpsertRowsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rowIds")]
		public string[] RowIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upsertAction")]
		public UpsertAction UpsertAction { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p> The BatchCreateTableRows API allows you to create one or more rows at the end of a table in a workbook. The API allows you to specify the values to set in some or all of the columns in the new rows. </p> <p> If a column is not explicitly set in a specific row, then the column level formula specified in the table will be applied to the new row. If there is no column level formula but the last row of the table has a formula, then that formula will be copied down to the new row. If there is no column level formula and no formula in the last row of the table, then that column will be left blank for the new rows. </p>
		/// BatchCreateTableRows workbooks/{workbookId}/tables/{tableId}/rows/batchcreate
		/// </summary>
		/// <param name="workbookId"><p>The ID of the workbook where the new rows are being added.</p> <p> If a workbook with the specified ID could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="tableId"><p>The ID of the table where the new rows are being added.</p> <p> If a table with the specified ID could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchCreateTableRowsResult> BatchCreateTableRowsAsync(string workbookId, string tableId, BatchCreateTableRowsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workbooks/"+ (workbookId==null? "" : System.Uri.EscapeDataString(workbookId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"/rows/batchcreate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchCreateTableRowsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The BatchDeleteTableRows API allows you to delete one or more rows from a table in a workbook. You need to specify the ids of the rows that you want to delete from the table.
		/// BatchDeleteTableRows workbooks/{workbookId}/tables/{tableId}/rows/batchdelete
		/// </summary>
		/// <param name="workbookId"><p>The ID of the workbook where the rows are being deleted.</p> <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="tableId"><p>The ID of the table where the rows are being deleted.</p> <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchDeleteTableRowsResult> BatchDeleteTableRowsAsync(string workbookId, string tableId, BatchDeleteTableRowsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workbooks/"+ (workbookId==null? "" : System.Uri.EscapeDataString(workbookId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"/rows/batchdelete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDeleteTableRowsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> The BatchUpdateTableRows API allows you to update one or more rows in a table in a workbook. </p> <p> You can specify the values to set in some or all of the columns in the table for the specified rows. If a column is not explicitly specified in a particular row, then that column will not be updated for that row. To clear out the data in a specific cell, you need to set the value as an empty string (""). </p>
		/// BatchUpdateTableRows workbooks/{workbookId}/tables/{tableId}/rows/batchupdate
		/// </summary>
		/// <param name="workbookId"><p>The ID of the workbook where the rows are being updated.</p> <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="tableId"><p>The ID of the table where the rows are being updated.</p> <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchUpdateTableRowsResult> BatchUpdateTableRowsAsync(string workbookId, string tableId, BatchUpdateTableRowsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workbooks/"+ (workbookId==null? "" : System.Uri.EscapeDataString(workbookId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"/rows/batchupdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchUpdateTableRowsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> The BatchUpsertTableRows API allows you to upsert one or more rows in a table. The upsert operation takes a filter expression as input and evaluates it to find matching rows on the destination table. If matching rows are found, it will update the cells in the matching rows to new values specified in the request. If no matching rows are found, a new row is added at the end of the table and the cells in that row are set to the new values specified in the request. </p> <p> You can specify the values to set in some or all of the columns in the table for the matching or newly appended rows. If a column is not explicitly specified for a particular row, then that column will not be updated for that row. To clear out the data in a specific cell, you need to set the value as an empty string (""). </p>
		/// BatchUpsertTableRows workbooks/{workbookId}/tables/{tableId}/rows/batchupsert
		/// </summary>
		/// <param name="workbookId"><p>The ID of the workbook where the rows are being upserted.</p> <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="tableId"><p>The ID of the table where the rows are being upserted.</p> <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchUpsertTableRowsResult> BatchUpsertTableRowsAsync(string workbookId, string tableId, BatchUpsertTableRowsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workbooks/"+ (workbookId==null? "" : System.Uri.EscapeDataString(workbookId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"/rows/batchupsert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchUpsertTableRowsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The DescribeTableDataImportJob API allows you to retrieve the status and details of a table data import job.
		/// DescribeTableDataImportJob workbooks/{workbookId}/tables/{tableId}/import/{jobId}
		/// </summary>
		/// <param name="workbookId"><p>The ID of the workbook into which data was imported.</p> <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="tableId"><p>The ID of the table into which data was imported.</p> <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="jobId"><p>The ID of the job that was returned by the StartTableDataImportJob request.</p> <p> If a job with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeTableDataImportJobResult> DescribeTableDataImportJobAsync(string workbookId, string tableId, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workbooks/"+ (workbookId==null? "" : System.Uri.EscapeDataString(workbookId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"/import/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeTableDataImportJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The GetScreenData API allows retrieval of data from a screen in a Honeycode app. The API allows setting local variables in the screen to filter, sort or otherwise affect what will be displayed on the screen.
		/// GetScreenData screendata
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetScreenDataResult> GetScreenDataAsync(GetScreenDataPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "screendata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetScreenDataResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The InvokeScreenAutomation API allows invoking an action defined in a screen in a Honeycode app. The API allows setting local variables, which can then be used in the automation being invoked. This allows automating the Honeycode app interactions to write, update or delete data in the workbook.
		/// InvokeScreenAutomation workbooks/{workbookId}/apps/{appId}/screens/{screenId}/automations/{automationId}
		/// </summary>
		/// <param name="workbookId">The ID of the workbook that contains the screen automation.
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="appId">The ID of the app that contains the screen automation.
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="screenId">The ID of the screen that contains the screen automation.
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="automationId">The ID of the automation action to be performed.
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<InvokeScreenAutomationResult> InvokeScreenAutomationAsync(string workbookId, string appId, string screenId, string automationId, InvokeScreenAutomationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workbooks/"+ (workbookId==null? "" : System.Uri.EscapeDataString(workbookId))+"/apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/screens/"+ (screenId==null? "" : System.Uri.EscapeDataString(screenId))+"/automations/"+ (automationId==null? "" : System.Uri.EscapeDataString(automationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvokeScreenAutomationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The ListTableColumns API allows you to retrieve a list of all the columns in a table in a workbook.
		/// ListTableColumns workbooks/{workbookId}/tables/{tableId}/columns
		/// </summary>
		/// <param name="workbookId"><p>The ID of the workbook that contains the table whose columns are being retrieved.</p> <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="tableId"><p>The ID of the table whose columns are being retrieved.</p> <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="nextToken"><p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p> <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTableColumnsResult> ListTableColumnsAsync(string workbookId, string tableId, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workbooks/"+ (workbookId==null? "" : System.Uri.EscapeDataString(workbookId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"/columns&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTableColumnsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The ListTableRows API allows you to retrieve a list of all the rows in a table in a workbook.
		/// ListTableRows workbooks/{workbookId}/tables/{tableId}/rows/list
		/// </summary>
		/// <param name="workbookId"><p>The ID of the workbook that contains the table whose rows are being retrieved.</p> <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="tableId"><p>The ID of the table whose rows are being retrieved.</p> <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTableRowsResult> ListTableRowsAsync(string workbookId, string tableId, string maxResults, string nextToken, ListTableRowsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workbooks/"+ (workbookId==null? "" : System.Uri.EscapeDataString(workbookId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"/rows/list&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTableRowsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The ListTables API allows you to retrieve a list of all the tables in a workbook.
		/// ListTables workbooks/{workbookId}/tables
		/// </summary>
		/// <param name="workbookId"><p>The ID of the workbook whose tables are being retrieved.</p> <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="maxResults">The maximum number of tables to return in each page of the results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken"><p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p> <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTablesResult> ListTablesAsync(string workbookId, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workbooks/"+ (workbookId==null? "" : System.Uri.EscapeDataString(workbookId))+"/tables&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTablesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The ListTagsForResource API allows you to return a resource's tags.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The resource's Amazon Resource Name (ARN).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResult> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The TagResource API allows you to add tags to an ARN-able resource. Resource includes workbook, table, screen and screen-automation.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The resource's Amazon Resource Name (ARN).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResult> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The QueryTableRows API allows you to use a filter formula to query for specific rows in a table.
		/// QueryTableRows workbooks/{workbookId}/tables/{tableId}/rows/query
		/// </summary>
		/// <param name="workbookId"><p>The ID of the workbook whose table rows are being queried.</p> <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="tableId"><p>The ID of the table whose rows are being queried.</p> <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<QueryTableRowsResult> QueryTableRowsAsync(string workbookId, string tableId, string maxResults, string nextToken, QueryTableRowsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workbooks/"+ (workbookId==null? "" : System.Uri.EscapeDataString(workbookId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"/rows/query&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryTableRowsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The StartTableDataImportJob API allows you to start an import job on a table. This API will only return the id of the job that was started. To find out the status of the import request, you need to call the DescribeTableDataImportJob API.
		/// StartTableDataImportJob workbooks/{workbookId}/tables/{tableId}/import
		/// </summary>
		/// <param name="workbookId"><p>The ID of the workbook where the rows are being imported.</p> <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <param name="tableId"><p>The ID of the table where the rows are being imported.</p> <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>
		/// Min length: 36
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<StartTableDataImportJobResult> StartTableDataImportJobAsync(string workbookId, string tableId, StartTableDataImportJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workbooks/"+ (workbookId==null? "" : System.Uri.EscapeDataString(workbookId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"/import";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartTableDataImportJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The UntagResource API allows you to removes tags from an ARN-able resource. Resource includes workbook, table, screen and screen-automation.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The resource's Amazon Resource Name (ARN).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="tagKeys">A list of tag keys to remove from the resource.
		/// Maximum items: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResult> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class BatchCreateTableRowsPostBody
	{
		
		/// <summary>
		/// <p> The list of rows to create at the end of the table. Each item in this list needs to have a batch item id to uniquely identify the element in the request and the cells to create for that row. You need to specify at least one item in this list. </p> <p> Note that if one of the column ids in any of the rows in the request does not exist in the table, then the request fails and no updates are made to the table. </p>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rowsToCreate")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CreateRowData[] RowsToCreate { get; set; }
		
		/// <summary>
		/// <p> The request token for performing the batch create operation. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the operation again. </p> <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>
		/// Min length: 32
		/// Max length: 64
		/// Pattern: ^(?!\s*$).+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!\s*$).+")]
		public string ClientRequestToken { get; set; }
	}
	
	public class BatchDeleteTableRowsPostBody
	{
		
		/// <summary>
		/// <p> The list of row ids to delete from the table. You need to specify at least one row id in this list. </p> <p> Note that if one of the row ids provided in the request does not exist in the table, then the request fails and no rows are deleted from the table. </p>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rowIds")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] RowIds { get; set; }
		
		/// <summary>
		/// <p> The request token for performing the delete action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. </p> <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>
		/// Min length: 32
		/// Max length: 64
		/// Pattern: ^(?!\s*$).+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!\s*$).+")]
		public string ClientRequestToken { get; set; }
	}
	
	public class BatchUpdateTableRowsPostBody
	{
		
		/// <summary>
		/// <p> The list of rows to update in the table. Each item in this list needs to contain the row id to update along with the map of column id to cell values for each column in that row that needs to be updated. You need to specify at least one row in this list, and for each row, you need to specify at least one column to update. </p> <p> Note that if one of the row or column ids in the request does not exist in the table, then the request fails and no updates are made to the table. </p>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rowsToUpdate")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public UpdateRowData[] RowsToUpdate { get; set; }
		
		/// <summary>
		/// <p> The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. </p> <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>
		/// Min length: 32
		/// Max length: 64
		/// Pattern: ^(?!\s*$).+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!\s*$).+")]
		public string ClientRequestToken { get; set; }
	}
	
	public class BatchUpsertTableRowsPostBody
	{
		
		/// <summary>
		/// <p> The list of rows to upsert in the table. Each item in this list needs to have a batch item id to uniquely identify the element in the request, a filter expression to find the rows to update for that element and the cell values to set for each column in the upserted rows. You need to specify at least one item in this list. </p> <p> Note that if one of the filter formulas in the request fails to evaluate because of an error or one of the column ids in any of the rows does not exist in the table, then the request fails and no updates are made to the table. </p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rowsToUpsert")]
		public UpsertRowData[] RowsToUpsert { get; set; }
		
		/// <summary>
		/// <p> The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. </p> <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>
		/// Min length: 32
		/// Max length: 64
		/// Pattern: ^(?!\s*$).+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!\s*$).+")]
		public string ClientRequestToken { get; set; }
	}
	
	public class GetScreenDataPostBody
	{
		
		/// <summary>
		/// The ID of the workbook that contains the screen.
		/// Required
		/// Min length: 36
		/// Max length: 36
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workbookId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}")]
		public string WorkbookId { get; set; }
		
		/// <summary>
		/// The ID of the app that contains the screen.
		/// Required
		/// Min length: 36
		/// Max length: 36
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}")]
		public string AppId { get; set; }
		
		/// <summary>
		/// The ID of the screen.
		/// Required
		/// Min length: 36
		/// Max length: 36
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="screenId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}")]
		public string ScreenId { get; set; }
		
		/// <summary>
		///  Variables are optional and are needed only if the screen requires them to render correctly. Variables are specified as a map where the key is the name of the variable as defined on the screen. The value is an object which currently has only one property, rawValue, which holds the value of the variable to be passed to the screen. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public System.Collections.Generic.Dictionary<string, VariableValue> Variables { get; set; }
		
		/// <summary>
		/// <p> The number of results to be returned on a single page. Specify a number between 1 and 100. The maximum value is 100. </p> <p> This parameter is optional. If you don't specify this parameter, the default page size is 100. </p>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p> <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
		/// Min length: 1
		/// Max length: 1024
		/// Pattern: ^(?!\s*$).+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!\s*$).+")]
		public string NextToken { get; set; }
	}
	
	public class InvokeScreenAutomationPostBody
	{
		
		/// <summary>
		///  Variables are specified as a map where the key is the name of the variable as defined on the screen. The value is an object which currently has only one property, rawValue, which holds the value of the variable to be passed to the screen. Any variables defined in a screen are required to be passed in the call. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public System.Collections.Generic.Dictionary<string, VariableValue> Variables { get; set; }
		
		/// <summary>
		///  The row ID for the automation if the automation is defined inside a block with source or list. 
		/// Min length: 77
		/// Max length: 77
		/// Pattern: row:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowId")]
		[System.ComponentModel.DataAnnotations.MinLength(77)]
		[System.ComponentModel.DataAnnotations.MaxLength(77)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"row:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}")]
		public string RowId { get; set; }
		
		/// <summary>
		/// <p> The request token for performing the automation action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will return the response of the previous call rather than performing the action again. </p> <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>
		/// Min length: 32
		/// Max length: 64
		/// Pattern: ^(?!\s*$).+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!\s*$).+")]
		public string ClientRequestToken { get; set; }
	}
	
	public class ListTableRowsPostBody
	{
		
		/// <summary>
		///  This parameter is optional. If one or more row ids are specified in this list, then only the specified row ids are returned in the result. If no row ids are specified here, then all the rows in the table are returned. 
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowIds")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] RowIds { get; set; }
		
		/// <summary>
		/// The maximum number of rows to return in each page of the results.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p> <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
		/// Min length: 1
		/// Max length: 1024
		/// Pattern: ^(?!\s*$).+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!\s*$).+")]
		public string NextToken { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// A string to string map representing tags
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class QueryTableRowsPostBody
	{
		
		/// <summary>
		///  An object that represents a filter formula along with the id of the context row under which the filter function needs to evaluate. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filterFormula")]
		public QueryTableRowsPostBodyFilterFormula FilterFormula { get; set; }
		
		/// <summary>
		/// The maximum number of rows to return in each page of the results.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p> This parameter is optional. If a nextToken is not specified, the API returns the first page of data. </p> <p> Pagination tokens expire after 1 hour. If you use a token that was returned more than an hour back, the API will throw ValidationException. </p>
		/// Min length: 1
		/// Max length: 1024
		/// Pattern: ^(?!\s*$).+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!\s*$).+")]
		public string NextToken { get; set; }
	}
	
	public class QueryTableRowsPostBodyFilterFormula
	{
		
		[System.Runtime.Serialization.DataMember(Name="formula")]
		public string Formula { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contextRowId")]
		public string ContextRowId { get; set; }
	}
	
	public class StartTableDataImportJobPostBody
	{
		
		/// <summary>
		/// An object that has details about the source of the data that was submitted for import.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public StartTableDataImportJobPostBodyDataSource DataSource { get; set; }
		
		/// <summary>
		///  The format of the data that is being imported. Currently the only option supported is "DELIMITED_TEXT". 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataFormat")]
		public ImportSourceDataFormat DataFormat { get; set; }
		
		/// <summary>
		/// An object that contains the options specified by the sumitter of the import request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="importOptions")]
		public StartTableDataImportJobPostBodyImportOptions ImportOptions { get; set; }
		
		/// <summary>
		/// <p> The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. </p> <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>
		/// Required
		/// Min length: 32
		/// Max length: 64
		/// Pattern: ^(?!\s*$).+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!\s*$).+")]
		public string ClientRequestToken { get; set; }
	}
	
	public class StartTableDataImportJobPostBodyDataSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataSourceConfig")]
		public ImportDataSourceConfig DataSourceConfig { get; set; }
	}
	
	public class StartTableDataImportJobPostBodyImportOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="destinationOptions")]
		public DestinationOptions DestinationOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="delimitedTextOptions")]
		public DelimitedTextImportOptions DelimitedTextOptions { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
