//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMeshOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="mesh")]
		public MeshData Mesh { get; set; }
	}
	
	/// <summary>
	/// An object representing a service mesh returned by a describe operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MeshData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meshName")]
		public string MeshName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ResourceMetadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MeshStatus Status { get; set; }
	}
	
	/// <summary>
	/// An object representing metadata for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// An object representing the status of a service mesh.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MeshStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MeshStatusCode Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MeshStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForbiddenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerErrorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyRequestsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRouteOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="route")]
		public RouteData Route { get; set; }
	}
	
	/// <summary>
	/// An object representing a route returned by a describe operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meshName")]
		public string MeshName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ResourceMetadata Metadata { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routeName")]
		public string RouteName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public RouteSpec Spec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public RouteStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="virtualRouterName")]
		public string VirtualRouterName { get; set; }
	}
	
	/// <summary>
	/// An object representing the specification of a route.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteSpec
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpRoute")]
		public HttpRoute HttpRoute { get; set; }
	}
	
	/// <summary>
	/// An object representing the HTTP routing specification for a route.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpRoute
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public HttpRouteAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="match")]
		public HttpRouteMatch Match { get; set; }
	}
	
	/// <summary>
	/// An object representing the traffic distribution requirements for matched HTTP
	///         requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpRouteAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="weightedTargets")]
		public WeightedTarget[] WeightedTargets { get; set; }
	}
	
	/// <summary>
	/// An object representing a target and its relative weight. Traffic is distributed across
	///         targets according to their relative weight. For example, a weighted target with a relative
	///         weight of 50 receives five times as much traffic as one with a relative weight of
	///         10.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WeightedTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="virtualNode")]
		public string VirtualNode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	/// <summary>
	/// An object representing the requirements for a route to match HTTP requests for a virtual
	///         router.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpRouteMatch
	{
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
	
	/// <summary>
	/// An object representing the current status of a route.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MeshStatusCode Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVirtualNodeOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="virtualNode")]
		public VirtualNodeData VirtualNode { get; set; }
	}
	
	/// <summary>
	/// An object representing a virtual node returned by a describe operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VirtualNodeData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meshName")]
		public string MeshName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ResourceMetadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public VirtualNodeSpec Spec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public VirtualNodeStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="virtualNodeName")]
		public string VirtualNodeName { get; set; }
	}
	
	/// <summary>
	/// An object representing the specification of a virtual node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VirtualNodeSpec
	{
		
		[System.Runtime.Serialization.DataMember(Name="backends")]
		public string[] Backends { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listeners")]
		public Listener[] Listeners { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceDiscovery")]
		public ServiceDiscovery ServiceDiscovery { get; set; }
	}
	
	/// <summary>
	/// An object representing a listener for a virtual node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Listener
	{
		
		[System.Runtime.Serialization.DataMember(Name="healthCheck")]
		public HealthCheckPolicy HealthCheck { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portMapping")]
		public PortMapping PortMapping { get; set; }
	}
	
	/// <summary>
	/// An object representing the health check policy for a virtual node's listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HealthCheckPolicy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="healthyThreshold")]
		public int HealthyThreshold { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intervalMillis")]
		public int IntervalMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public PortProtocol Protocol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeoutMillis")]
		public int TimeoutMillis { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unhealthyThreshold")]
		public int UnhealthyThreshold { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PortProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="http")]
		http = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tcp")]
		tcp = 1,
	}
	
	/// <summary>
	/// An object representing a virtual node listener port mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortMapping
	{
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public PortProtocol Protocol { get; set; }
	}
	
	/// <summary>
	/// An object representing the service discovery information for a virtual node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceDiscovery
	{
		
		[System.Runtime.Serialization.DataMember(Name="dns")]
		public DnsServiceDiscovery Dns { get; set; }
	}
	
	/// <summary>
	/// The DNS service discovery information for your virtual node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DnsServiceDiscovery
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	/// <summary>
	/// An object representing the current status of the virtual node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VirtualNodeStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MeshStatusCode Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVirtualRouterOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="virtualRouter")]
		public VirtualRouterData VirtualRouter { get; set; }
	}
	
	/// <summary>
	/// An object representing a virtual router returned by a describe operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VirtualRouterData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meshName")]
		public string MeshName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ResourceMetadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public VirtualRouterSpec Spec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public VirtualRouterStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="virtualRouterName")]
		public string VirtualRouterName { get; set; }
	}
	
	/// <summary>
	/// An object representing the specification of a virtual router.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VirtualRouterSpec
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceNames")]
		public string[] ServiceNames { get; set; }
	}
	
	/// <summary>
	/// An object representing the status of a virtual router. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VirtualRouterStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MeshStatusCode Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMeshOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="mesh")]
		public MeshData Mesh { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceInUseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRouteOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="route")]
		public RouteData Route { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVirtualNodeOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="virtualNode")]
		public VirtualNodeData VirtualNode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVirtualRouterOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="virtualRouter")]
		public VirtualRouterData VirtualRouter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeMeshOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="mesh")]
		public MeshData Mesh { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRouteOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="route")]
		public RouteData Route { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeVirtualNodeOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="virtualNode")]
		public VirtualNodeData VirtualNode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeVirtualRouterOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="virtualRouter")]
		public VirtualRouterData VirtualRouter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMeshesOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meshes")]
		public MeshRef[] Meshes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object representing a service mesh returned by a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MeshRef
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meshName")]
		public string MeshName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRoutesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public RouteRef[] Routes { get; set; }
	}
	
	/// <summary>
	/// An object representing a route returned by a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteRef
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meshName")]
		public string MeshName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routeName")]
		public string RouteName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="virtualRouterName")]
		public string VirtualRouterName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVirtualNodesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="virtualNodes")]
		public VirtualNodeRef[] VirtualNodes { get; set; }
	}
	
	/// <summary>
	/// An object representing a virtual node returned by a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VirtualNodeRef
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meshName")]
		public string MeshName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="virtualNodeName")]
		public string VirtualNodeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVirtualRoutersOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="virtualRouters")]
		public VirtualRouterRef[] VirtualRouters { get; set; }
	}
	
	/// <summary>
	/// An object representing a virtual router returned by a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VirtualRouterRef
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meshName")]
		public string MeshName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="virtualRouterName")]
		public string VirtualRouterName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRouteOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="route")]
		public RouteData Route { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVirtualNodeOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="virtualNode")]
		public VirtualNodeData VirtualNode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVirtualRouterOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="virtualRouter")]
		public VirtualRouterData VirtualRouter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVirtualNodeInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeVirtualRouterInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVirtualRouterInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public VirtualRouterSpec Spec { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="virtualRouterName")]
		public string VirtualRouterName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RouteStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMeshesInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VirtualRouterStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVirtualNodeInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public VirtualNodeSpec Spec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRouteInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRoutesInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeVirtualNodeInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVirtualRouterInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public VirtualRouterSpec Spec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRouteInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMeshInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meshName")]
		public string MeshName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VirtualNodeStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVirtualRouterInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRouteInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public RouteSpec Spec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeMeshInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVirtualRoutersInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVirtualNodeInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public VirtualNodeSpec Spec { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="virtualNodeName")]
		public string VirtualNodeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMeshInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRouteInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routeName")]
		public string RouteName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public RouteSpec Spec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVirtualNodesInput
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Creates a new service mesh. A service mesh is a logical boundary for network traffic
		/// between the services that reside within it.</p>
		/// <p>After you create your service mesh, you can create virtual nodes, virtual routers, and
		/// routes to distribute traffic between the applications in your mesh.</p>
		/// CreateMesh meshes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateMeshOutput> CreateMeshAsync(CreateMeshPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateMeshOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of existing service meshes.
		/// ListMeshes meshes
		/// </summary>
		/// <param name="limit">The maximum number of mesh results returned by <code>ListMeshes</code> in paginated
		///         output. When this parameter is used, <code>ListMeshes</code> only returns
		///            <code>limit</code> results in a single page along with a <code>nextToken</code> response
		///         element. The remaining results of the initial request can be seen by sending another
		///            <code>ListMeshes</code> request with the returned <code>nextToken</code> value. This
		///         value can be between 1 and 100. If this parameter is not
		///         used, then <code>ListMeshes</code> returns up to 100 results and a
		///            <code>nextToken</code> value if applicable.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken"><p>The <code>nextToken</code> value returned from a previous paginated
		///         <code>ListMeshes</code> request where <code>limit</code> was used and the
		///         results exceeded the value of that parameter. Pagination continues from the end of the
		///         previous results that returned the <code>nextToken</code> value.</p>
		///         <note>
		///            <p>This token should be treated as an opaque identifier that is only used to
		///                retrieve the next items in a list and not for other programmatic purposes.</p>
		///        </note></param>
		/// <returns>Success</returns>
		public async Task<ListMeshesOutput> ListMeshesAsync(int limit, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes?limit="+limit+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMeshesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new route that is associated with a virtual router.</p>
		/// <p>You can use the <code>prefix</code> parameter in your route specification for path-based
		/// routing of requests. For example, if your virtual router service name is
		/// <code>my-service.local</code>, and you want the route to match requests to
		/// <code>my-service.local/metrics</code>, then your prefix should be
		/// <code>/metrics</code>.</p>
		/// <p>If your route matches a request, you can distribute traffic to one or more target
		/// virtual nodes with relative weighting.</p>
		/// CreateRoute meshes/{meshName}/virtualRouter/{virtualRouterName}/routes
		/// </summary>
		/// <param name="meshName">The name of the service mesh in which to create the route.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="virtualRouterName">The name of the virtual router in which to create the route.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateRouteOutput> CreateRouteAsync(string meshName, string virtualRouterName, CreateRoutePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualRouter/"+ (virtualRouterName==null? "" : System.Uri.EscapeDataString(virtualRouterName))+"/routes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateRouteOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of existing routes in a service mesh.
		/// ListRoutes meshes/{meshName}/virtualRouter/{virtualRouterName}/routes
		/// </summary>
		/// <param name="limit">The maximum number of mesh results returned by <code>ListRoutes</code> in paginated
		///         output. When this parameter is used, <code>ListRoutes</code> only returns
		///            <code>limit</code> results in a single page along with a <code>nextToken</code> response
		///         element. The remaining results of the initial request can be seen by sending another
		///            <code>ListRoutes</code> request with the returned <code>nextToken</code> value. This
		///         value can be between 1 and 100. If this parameter is not
		///         used, then <code>ListRoutes</code> returns up to 100 results and a
		///            <code>nextToken</code> value if applicable.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="meshName">The name of the service mesh in which to list routes.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="nextToken">The <code>nextToken</code> value returned from a previous paginated
		///         <code>ListRoutes</code> request where <code>limit</code> was used and the
		///         results exceeded the value of that parameter. Pagination continues from the end of the
		///         previous results that returned the <code>nextToken</code> value.</param>
		/// <param name="virtualRouterName">The name of the virtual router in which to list routes.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<ListRoutesOutput> ListRoutesAsync(int limit, string meshName, string nextToken, string virtualRouterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualRouter/"+ (virtualRouterName==null? "" : System.Uri.EscapeDataString(virtualRouterName))+"/routes?limit="+limit+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRoutesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new virtual node within a service mesh.</p>
		/// <p>A virtual node acts as logical pointer to a particular task group, such as an Amazon ECS
		/// service or a Kubernetes deployment. When you create a virtual node, you must specify the
		/// DNS service discovery name for your task group.</p>
		/// <p>Any inbound traffic that your virtual node expects should be specified as a
		/// <code>listener</code>. Any outbound traffic that your virtual node expects to reach
		/// should be specified as a <code>backend</code>.</p>
		/// <p>The response metadata for your new virtual node contains the <code>arn</code> that is
		/// associated with the virtual node. Set this value (either the full ARN or the truncated
		/// resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>, as the
		/// <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's Envoy
		/// proxy container in your task definition or pod spec. This is then mapped to the
		/// <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
		/// <note>
		/// <p>If you require your Envoy stats or tracing to use a different name, you can override
		/// the <code>node.cluster</code> value that is set by
		/// <code>APPMESH_VIRTUAL_NODE_NAME</code> with the
		/// <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>
		/// </note>
		/// CreateVirtualNode meshes/{meshName}/virtualNodes
		/// </summary>
		/// <param name="meshName">The name of the service mesh in which to create the virtual node.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateVirtualNodeOutput> CreateVirtualNodeAsync(string meshName, CreateVirtualNodePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualNodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateVirtualNodeOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of existing virtual nodes.
		/// ListVirtualNodes meshes/{meshName}/virtualNodes
		/// </summary>
		/// <param name="limit">The maximum number of mesh results returned by <code>ListVirtualNodes</code> in
		///         paginated output. When this parameter is used, <code>ListVirtualNodes</code> only returns
		///         <code>limit</code> results in a single page along with a <code>nextToken</code>
		///         response element. The remaining results of the initial request can be seen by sending
		///         another <code>ListVirtualNodes</code> request with the returned <code>nextToken</code>
		///         value. This value can be between 1 and 100. If this
		///         parameter is not used, then <code>ListVirtualNodes</code> returns up to
		///         100 results and a <code>nextToken</code> value if applicable.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="meshName">The name of the service mesh in which to list virtual nodes.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="nextToken">The <code>nextToken</code> value returned from a previous paginated
		///         <code>ListVirtualNodes</code> request where <code>limit</code> was used and the
		///         results exceeded the value of that parameter. Pagination continues from the end of the
		///         previous results that returned the <code>nextToken</code> value.</param>
		/// <returns>Success</returns>
		public async Task<ListVirtualNodesOutput> ListVirtualNodesAsync(int limit, string meshName, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualNodes?limit="+limit+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVirtualNodesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new virtual router within a service mesh.</p>
		/// <p>Virtual routers handle traffic for one or more service names within your mesh. After you
		/// create your virtual router, create and associate routes for your virtual router that direct
		/// incoming requests to different virtual nodes.</p>
		/// CreateVirtualRouter meshes/{meshName}/virtualRouters
		/// </summary>
		/// <param name="meshName">The name of the service mesh in which to create the virtual router.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateVirtualRouterOutput> CreateVirtualRouterAsync(string meshName, CreateVirtualRouterPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualRouters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateVirtualRouterOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of existing virtual routers in a service mesh.
		/// ListVirtualRouters meshes/{meshName}/virtualRouters
		/// </summary>
		/// <param name="limit">The maximum number of mesh results returned by <code>ListVirtualRouters</code> in
		///         paginated output. When this parameter is used, <code>ListVirtualRouters</code> only returns
		///         <code>limit</code> results in a single page along with a <code>nextToken</code>
		///         response element. The remaining results of the initial request can be seen by sending
		///         another <code>ListVirtualRouters</code> request with the returned <code>nextToken</code>
		///         value. This value can be between 1 and 100. If this
		///         parameter is not used, then <code>ListVirtualRouters</code> returns up to
		///         100 results and a <code>nextToken</code> value if applicable.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="meshName">The name of the service mesh in which to list virtual routers.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="nextToken">The <code>nextToken</code> value returned from a previous paginated
		///         <code>ListVirtualRouters</code> request where <code>limit</code> was used and the
		///         results exceeded the value of that parameter. Pagination continues from the end of the
		///         previous results that returned the <code>nextToken</code> value.</param>
		/// <returns>Success</returns>
		public async Task<ListVirtualRoutersOutput> ListVirtualRoutersAsync(int limit, string meshName, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualRouters?limit="+limit+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVirtualRoutersOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing service mesh.</p>
		/// <p>You must delete all resources (routes, virtual routers, virtual nodes) in the service
		/// mesh before you can delete the mesh itself.</p>
		/// DeleteMesh meshes/{meshName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh to delete.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteMeshOutput> DeleteMeshAsync(string meshName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteMeshOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an existing service mesh.
		/// DescribeMesh meshes/{meshName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh to describe.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeMeshOutput> DescribeMeshAsync(string meshName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeMeshOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing route.
		/// DeleteRoute meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh in which to delete the route.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="routeName">The name of the route to delete.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="virtualRouterName">The name of the virtual router in which to delete the route.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteRouteOutput> DeleteRouteAsync(string meshName, string routeName, string virtualRouterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualRouter/"+ (virtualRouterName==null? "" : System.Uri.EscapeDataString(virtualRouterName))+"/routes/"+ (routeName==null? "" : System.Uri.EscapeDataString(routeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteRouteOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an existing route.
		/// DescribeRoute meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh in which the route resides.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="routeName">The name of the route to describe.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="virtualRouterName">The name of the virtual router with which the route is associated.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeRouteOutput> DescribeRouteAsync(string meshName, string routeName, string virtualRouterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualRouter/"+ (virtualRouterName==null? "" : System.Uri.EscapeDataString(virtualRouterName))+"/routes/"+ (routeName==null? "" : System.Uri.EscapeDataString(routeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeRouteOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing route for a specified service mesh and virtual router.
		/// UpdateRoute meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh in which the route resides.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="routeName">The name of the route to update.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="virtualRouterName">The name of the virtual router with which the route is associated.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateRouteOutput> UpdateRouteAsync(string meshName, string routeName, string virtualRouterName, UpdateRoutePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualRouter/"+ (virtualRouterName==null? "" : System.Uri.EscapeDataString(virtualRouterName))+"/routes/"+ (routeName==null? "" : System.Uri.EscapeDataString(routeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateRouteOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing virtual node.
		/// DeleteVirtualNode meshes/{meshName}/virtualNodes/{virtualNodeName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh in which to delete the virtual node.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="virtualNodeName">The name of the virtual node to delete.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteVirtualNodeOutput> DeleteVirtualNodeAsync(string meshName, string virtualNodeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualNodes/"+ (virtualNodeName==null? "" : System.Uri.EscapeDataString(virtualNodeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteVirtualNodeOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an existing virtual node.
		/// DescribeVirtualNode meshes/{meshName}/virtualNodes/{virtualNodeName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh in which the virtual node resides.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="virtualNodeName">The name of the virtual node to describe.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeVirtualNodeOutput> DescribeVirtualNodeAsync(string meshName, string virtualNodeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualNodes/"+ (virtualNodeName==null? "" : System.Uri.EscapeDataString(virtualNodeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeVirtualNodeOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing virtual node in a specified service mesh.
		/// UpdateVirtualNode meshes/{meshName}/virtualNodes/{virtualNodeName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh in which the virtual node resides.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="virtualNodeName">The name of the virtual node to update.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateVirtualNodeOutput> UpdateVirtualNodeAsync(string meshName, string virtualNodeName, UpdateVirtualNodePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualNodes/"+ (virtualNodeName==null? "" : System.Uri.EscapeDataString(virtualNodeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateVirtualNodeOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing virtual router.</p>
		/// <p>You must delete any routes associated with the virtual router before you can delete the
		/// router itself.</p>
		/// DeleteVirtualRouter meshes/{meshName}/virtualRouters/{virtualRouterName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh in which to delete the virtual router.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="virtualRouterName">The name of the virtual router to delete.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteVirtualRouterOutput> DeleteVirtualRouterAsync(string meshName, string virtualRouterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualRouters/"+ (virtualRouterName==null? "" : System.Uri.EscapeDataString(virtualRouterName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteVirtualRouterOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an existing virtual router.
		/// DescribeVirtualRouter meshes/{meshName}/virtualRouters/{virtualRouterName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh in which the virtual router resides.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="virtualRouterName">The name of the virtual router to describe.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeVirtualRouterOutput> DescribeVirtualRouterAsync(string meshName, string virtualRouterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualRouters/"+ (virtualRouterName==null? "" : System.Uri.EscapeDataString(virtualRouterName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeVirtualRouterOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing virtual router in a specified service mesh.
		/// UpdateVirtualRouter meshes/{meshName}/virtualRouters/{virtualRouterName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh in which the virtual router resides.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="virtualRouterName">The name of the virtual router to update.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateVirtualRouterOutput> UpdateVirtualRouterAsync(string meshName, string virtualRouterName, UpdateVirtualRouterPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "meshes/"+ (meshName==null? "" : System.Uri.EscapeDataString(meshName))+"/virtualRouters/"+ (virtualRouterName==null? "" : System.Uri.EscapeDataString(virtualRouterName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateVirtualRouterOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CreateMeshPutBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The name to use for the service mesh.
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meshName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MeshName { get; set; }
	}
	
	public class CreateRoutePutBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The name to use for the route.
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routeName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RouteName { get; set; }
		
		/// <summary>
		/// An object representing the specification of a route.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public CreateRoutePutBodySpec Spec { get; set; }
	}
	
	public class CreateRoutePutBodySpec
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpRoute")]
		public HttpRoute HttpRoute { get; set; }
	}
	
	public class CreateVirtualNodePutBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object representing the specification of a virtual node.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public CreateVirtualNodePutBodySpec Spec { get; set; }
		
		/// <summary>
		/// The name to use for the virtual node.
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="virtualNodeName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VirtualNodeName { get; set; }
	}
	
	public class CreateVirtualNodePutBodySpec
	{
		
		[System.Runtime.Serialization.DataMember(Name="backends")]
		public string[] Backends { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listeners")]
		public Listener[] Listeners { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceDiscovery")]
		public ServiceDiscovery ServiceDiscovery { get; set; }
	}
	
	public class CreateVirtualRouterPutBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object representing the specification of a virtual router.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public CreateVirtualRouterPutBodySpec Spec { get; set; }
		
		/// <summary>
		/// The name to use for the virtual router.
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="virtualRouterName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string VirtualRouterName { get; set; }
	}
	
	public class CreateVirtualRouterPutBodySpec
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceNames")]
		public string[] ServiceNames { get; set; }
	}
	
	public class UpdateRoutePutBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object representing the specification of a route.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public UpdateRoutePutBodySpec Spec { get; set; }
	}
	
	public class UpdateRoutePutBodySpec
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpRoute")]
		public HttpRoute HttpRoute { get; set; }
	}
	
	public class UpdateVirtualNodePutBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object representing the specification of a virtual node.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public UpdateVirtualNodePutBodySpec Spec { get; set; }
	}
	
	public class UpdateVirtualNodePutBodySpec
	{
		
		[System.Runtime.Serialization.DataMember(Name="backends")]
		public string[] Backends { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listeners")]
		public Listener[] Listeners { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceDiscovery")]
		public ServiceDiscovery ServiceDiscovery { get; set; }
	}
	
	public class UpdateVirtualRouterPutBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object representing the specification of a virtual router.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public UpdateVirtualRouterPutBodySpec Spec { get; set; }
	}
	
	public class UpdateVirtualRouterPutBodySpec
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceNames")]
		public string[] ServiceNames { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
