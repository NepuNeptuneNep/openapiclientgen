//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Doc
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abstract")]
		public string Abstract { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blog")]
		public string[] Blog { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byline")]
		public DocByline Byline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document_type")]
		public string Document_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headline")]
		public DocHeadline Headline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public DocKeywords Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lead_paragraph")]
		public string Lead_paragraph { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multimedia")]
		public DocMultimedia[] DocMultimedia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="news_desk")]
		public string News_desk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="print_page")]
		public string Print_page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pub_date")]
		public string Pub_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="section_name")]
		public string Section_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slideshow_credits")]
		public string Slideshow_credits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public string Snippet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subsection_name")]
		public string Subsection_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type_of_material")]
		public string Type_of_material { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="web_url")]
		public string Web_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word_count")]
		public string Word_count { get; set; }
	}
	
	public class DocByline
	{
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="original")]
		public string Original { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="person")]
		public string[] Person { get; set; }
	}
	
	public class DocHeadline
	{
		
		[System.Runtime.Serialization.DataMember(Name="kicker")]
		public string Kicker { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="main")]
		public string Main { get; set; }
	}
	
	public class DocKeywords
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public string Rank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class DocMultimedia
	{
		
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string Copyright { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtype")]
		public string Subtype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Archive API
		/// The Archive API provides lists of NYT articles by month going back to 1851.  Simply pass in the year and month you want and it returns a JSON object with all articles for that month.
		/// 
		/// ArchiveGetByYearAndMonth {year}/{month}.json
		/// </summary>
		/// <param name="year">The year (e.g. 2016).
		/// Minimum: 1851
		/// Maximum: 2030
		// </param>
		/// <param name="month">The month number (e.g. 1 for January).
		/// Minimum: 1
		/// Maximum: 12
		// </param>
		/// <returns>The docs requested.</returns>
		public async Task<ArchiveGetByYearAndMonthReturn> ArchiveGetByYearAndMonthAsync(int year, int month, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+year+"/"+month+".json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArchiveGetByYearAndMonthReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class ArchiveGetByYearAndMonthReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public ArchiveGetByYearAndMonthReturnResponse Response { get; set; }
	}
	
	public class ArchiveGetByYearAndMonthReturnResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="docs")]
		public Doc[] Docs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ArchiveGetByYearAndMonthReturnResponseMeta Meta { get; set; }
	}
	
	public class ArchiveGetByYearAndMonthReturnResponseMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="hits")]
		public System.Nullable<System.Int32> Hits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int32> Time { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
