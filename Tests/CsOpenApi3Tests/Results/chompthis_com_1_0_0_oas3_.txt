//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Please read the description of each field in this API response object example. By default, the value of each field is **null**. This indicates an unknown state or that no data exists.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BrandedFoodObject
	{
		
		/// <summary>
		/// An array containing an object for each individual item returned by your API call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public BrandedFoodObjectItems[] BrandedFoodObjectItems { get; set; }
	}
	
	public class BrandedFoodObjectItems
	{
		
		/// <summary>
		/// An array of ingredients in this item that may cause allergic reactions in people
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allergens")]
		public string[] Allergens { get; set; }
		
		/// <summary>
		/// EAN/UPC barcode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="barcode")]
		public string Barcode { get; set; }
		
		/// <summary>
		/// The brand name that owns this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// An array of brands we have associated with this item. Some items are sold by more than 1 brand.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand_list")]
		public string[] Brand_list { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// An array of countries where this item is sold
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public string[] Countries { get; set; }
		
		/// <summary>
		/// An object containing additional information on the countries where this item is found
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_details")]
		public BrandedFoodObjectItemsCountry_details Country_details { get; set; }
		
		/// <summary>
		/// A description of this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// An array of ingredient objects that were flagged while grading this item for compatibility with each diet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diet_flags")]
		public BrandedFoodObjectItemsDiet_flags[] BrandedFoodObjectItemsDiet_flags { get; set; }
		
		/// <summary>
		/// An object containing this item's compatibility grades for each supported diet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diet_labels")]
		public BrandedFoodObjectItemsDiet_labels Diet_labels { get; set; }
		
		/// <summary>
		/// A boolean indicating if we have English ingredients for this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_english_ingredients")]
		public System.Nullable<System.Boolean> Has_english_ingredients { get; set; }
		
		/// <summary>
		/// An array of this item's ingredients
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingredient_list")]
		public string[] Ingredient_list { get; set; }
		
		/// <summary>
		/// This food item's ingredients from greatest quantity to least
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingredients")]
		public string Ingredients { get; set; }
		
		/// <summary>
		/// An array of keywords that can be used to describe this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// An array of minerals that this item contains
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minerals")]
		public string[] Minerals { get; set; }
		
		/// <summary>
		/// Item name as provided by brand owner or as shown on packaging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An array containing nutrient informatio objects for this food item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nutrients")]
		public BrandedFoodObjectItemsNutrients[] BrandedFoodObjectItemsNutrients { get; set; }
		
		/// <summary>
		/// An object containing basic packaging information about this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="package")]
		public BrandedFoodObjectItemsPackage Package { get; set; }
		
		/// <summary>
		/// A object containing a collection of photos of this item's packaging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packaging_photos")]
		public BrandedFoodObjectItemsPackaging_photos Packaging_photos { get; set; }
		
		/// <summary>
		/// An array of ingredients made from palm oil
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="palm_oil_ingredients")]
		public string[] Palm_oil_ingredients { get; set; }
		
		/// <summary>
		/// An object containing serving information for this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serving")]
		public BrandedFoodObjectItemsServing Serving { get; set; }
		
		/// <summary>
		/// An array of trace ingredients that may be found in this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traces")]
		public string[] Traces { get; set; }
		
		/// <summary>
		/// An array of vitamins that are found in this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vitamins")]
		public string[] Vitamins { get; set; }
	}
	
	public class BrandedFoodObjectItemsCountry_details
	{
		
		/// <summary>
		/// The number of countries where English is the country's primary language
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="english_speaking")]
		public System.Nullable<System.Int32> English_speaking { get; set; }
		
		/// <summary>
		/// The number of countries where English is not the country's primary language
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="non_english_speaking")]
		public System.Nullable<System.Int32> Non_english_speaking { get; set; }
	}
	
	public class BrandedFoodObjectItemsDiet_flags
	{
		
		/// <summary>
		/// A description of how we graded this ingredient for compatibility with the diet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibility_description")]
		public string Compatibility_description { get; set; }
		
		/// <summary>
		/// A numeric representation of if we believe this ingredient is compatible with the diet. Higher values indicate more compatibility
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibility_level")]
		public System.Nullable<System.Int32> Compatibility_level { get; set; }
		
		/// <summary>
		/// Name of the diet with which this ingredient may not be compatible
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diet_label")]
		public string Diet_label { get; set; }
		
		/// <summary>
		/// Ingredient name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingredient")]
		public string Ingredient { get; set; }
		
		/// <summary>
		/// Description of the ingredient
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingredient_description")]
		public string Ingredient_description { get; set; }
		
		/// <summary>
		/// Boolean representing if the ingredient is a known allergen
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_allergen")]
		public System.Nullable<System.Boolean> Is_allergen { get; set; }
		
		/// <summary>
		/// A description of if we believe this ingredient is compatible with the diet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_compatible")]
		public string Is_compatible { get; set; }
	}
	
	public class BrandedFoodObjectItemsDiet_labels
	{
		
		/// <summary>
		/// An object containing information on this item's compatibility with Gluten Free diets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gluten_free")]
		public BrandedFoodObjectItemsDiet_labelsGluten_free Gluten_free { get; set; }
		
		/// <summary>
		/// An object containing information on this item's compatibility with the Vegan diets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vegan")]
		public BrandedFoodObjectItemsDiet_labelsVegan Vegan { get; set; }
		
		/// <summary>
		/// An object containing information on this item's compatibility with Vegetarian diets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vegetarian")]
		public BrandedFoodObjectItemsDiet_labelsVegetarian Vegetarian { get; set; }
	}
	
	public class BrandedFoodObjectItemsDiet_labelsGluten_free
	{
		
		/// <summary>
		/// Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibility_level")]
		public System.Nullable<System.Int32> Compatibility_level { get; set; }
		
		/// <summary>
		/// Boolean that indicates if we are confident in how this item is graded for this diet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Int32> Confidence { get; set; }
		
		/// <summary>
		/// Description of our confidence that this item was graded correctly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence_description")]
		public string Confidence_description { get; set; }
		
		/// <summary>
		/// Boolean describing if this item is compatible with this diet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_compatible")]
		public System.Nullable<System.Boolean> Is_compatible { get; set; }
		
		/// <summary>
		/// Diet name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class BrandedFoodObjectItemsDiet_labelsVegan
	{
		
		/// <summary>
		/// Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibility_level")]
		public System.Nullable<System.Int32> Compatibility_level { get; set; }
		
		/// <summary>
		/// Boolean that indicates if we are confident in how this item is graded for this diet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Int32> Confidence { get; set; }
		
		/// <summary>
		/// Description of our confidence that this item was graded correctly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence_description")]
		public string Confidence_description { get; set; }
		
		/// <summary>
		/// Boolean describing if this item is compatible with this diet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_compatible")]
		public System.Nullable<System.Boolean> Is_compatible { get; set; }
		
		/// <summary>
		/// Diet name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class BrandedFoodObjectItemsDiet_labelsVegetarian
	{
		
		/// <summary>
		/// Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibility_level")]
		public System.Nullable<System.Int32> Compatibility_level { get; set; }
		
		/// <summary>
		/// Boolean that indicates if we are confident in how this item is graded for this diet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Int32> Confidence { get; set; }
		
		/// <summary>
		/// Description of our confidence that this item was graded correctly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence_description")]
		public string Confidence_description { get; set; }
		
		/// <summary>
		/// Boolean describing if this item is compatible with this diet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_compatible")]
		public System.Nullable<System.Boolean> Is_compatible { get; set; }
		
		/// <summary>
		/// Diet name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class BrandedFoodObjectItemsNutrients
	{
		
		/// <summary>
		/// Number of observations on which the value is based
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data_points")]
		public System.Nullable<System.Int32> Data_points { get; set; }
		
		/// <summary>
		/// Description of the nutrient source
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The unit used for the measure of this nutrient
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurement_unit")]
		public string Measurement_unit { get; set; }
		
		/// <summary>
		/// Nutrient name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Amount of the nutrient per 100g of food
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_100g")]
		public System.Nullable<System.Double> Per_100g { get; set; }
		
		/// <summary>
		/// Nutrient rank
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
	}
	
	public class BrandedFoodObjectItemsPackage
	{
		
		/// <summary>
		/// Package quantity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Package size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
	}
	
	public class BrandedFoodObjectItemsPackaging_photos
	{
		
		/// <summary>
		/// An object containing photos of the front of this item's packaging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="front")]
		public BrandedFoodObjectItemsPackaging_photosFront Front { get; set; }
		
		/// <summary>
		/// An object containing photos of the ingredients on this item's packaging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingredients")]
		public BrandedFoodObjectItemsPackaging_photosIngredients Ingredients { get; set; }
		
		/// <summary>
		/// An object containing photos of this item's nutrition label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nutrition")]
		public BrandedFoodObjectItemsPackaging_photosNutrition Nutrition { get; set; }
	}
	
	public class BrandedFoodObjectItemsPackaging_photosFront
	{
		
		/// <summary>
		/// Full-sized photo of the front of this item's packaging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public string Display { get; set; }
		
		/// <summary>
		/// Small photo of the front of this item's packaging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
		
		/// <summary>
		/// Thumbnail photo of the front of this item's packaging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumb")]
		public string Thumb { get; set; }
	}
	
	public class BrandedFoodObjectItemsPackaging_photosIngredients
	{
		
		/// <summary>
		/// Full-sized photo of the ingredients on this item's packaging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public string Display { get; set; }
		
		/// <summary>
		/// Small photo of the ingredients on this item's packaging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
		
		/// <summary>
		/// Thumbnail photo of the ingredients on this item's packaging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumb")]
		public string Thumb { get; set; }
	}
	
	public class BrandedFoodObjectItemsPackaging_photosNutrition
	{
		
		/// <summary>
		/// Full-sized photo of this item's nutrition label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public string Display { get; set; }
		
		/// <summary>
		/// Small photo of this item's nutrition label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="small")]
		public string Small { get; set; }
		
		/// <summary>
		/// Thumbnail photo of this item's nutrition label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumb")]
		public string Thumb { get; set; }
	}
	
	public class BrandedFoodObjectItemsServing
	{
		
		/// <summary>
		/// Measurement unit for each serving (e.g. if measure is 3 tsp, the unit is tsp)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurement_unit")]
		public string Measurement_unit { get; set; }
		
		/// <summary>
		/// Serving size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Serving size description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size_fulltext")]
		public string Size_fulltext { get; set; }
	}
	
	/// <summary>
	/// Please read the description of each field in this API response object example. By default, the value of each field is **null**. This indicates an unknown state or that no data exists.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IngredientObject
	{
		
		/// <summary>
		/// An array containing an object for each individual item returned by your API call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public IngredientObjectItems[] IngredientObjectItems { get; set; }
	}
	
	public class IngredientObjectItems
	{
		
		/// <summary>
		/// An object containing the multiplication factors to be used when calculating energy from macronutrients for a specific food.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calorie_conversion_factor")]
		public IngredientObjectItemsCalorie_conversion_factor Calorie_conversion_factor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// Common name associated with this item. These generally clarify what the item is (e.g. when the brand name is "BRAND's Spicy Enchilada" the common name may be "Chicken enchilada")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common_name")]
		public string Common_name { get; set; }
		
		/// <summary>
		/// An array of objects containing the constituent parts of a food (e.g. bone is a component of meat)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="components")]
		public IngredientObjectItemsComponents[] IngredientObjectItemsComponents { get; set; }
		
		/// <summary>
		/// Comments on any unusual aspects of this item. Examples might include unusual aspects of the food overall
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footnote")]
		public string Footnote { get; set; }
		
		/// <summary>
		/// Item name as provided by brand owner or as shown on packaging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An array containing nutrient informatio objects for this food item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nutrients")]
		public IngredientObjectItemsNutrients[] IngredientObjectItemsNutrients { get; set; }
		
		/// <summary>
		/// An array of objects containing information on discrete amounts of a food found in this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="portions")]
		public IngredientObjectItemsPortions[] IngredientObjectItemsPortions { get; set; }
		
		/// <summary>
		/// The multiplication factor used to calculate protein from nitrogen
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protein_conversion_factor")]
		public System.Nullable<System.Double> Protein_conversion_factor { get; set; }
		
		/// <summary>
		/// A value that represents how similar the name of this food item is to the original search term. The lower the value the closer this item's name is to the original search term.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public string Score { get; set; }
		
		/// <summary>
		/// The original search term that found this food item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_term")]
		public string Search_term { get; set; }
	}
	
	public class IngredientObjectItemsCalorie_conversion_factor
	{
		
		/// <summary>
		/// The multiplication factor for carbohydrates
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carbohydrate_value")]
		public System.Nullable<System.Double> Carbohydrate_value { get; set; }
		
		/// <summary>
		/// The multiplication factor for fat
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fat_value")]
		public System.Nullable<System.Double> Fat_value { get; set; }
		
		/// <summary>
		/// The multiplication factor for protein
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protein_value")]
		public System.Nullable<System.Double> Protein_value { get; set; }
	}
	
	public class IngredientObjectItemsComponents
	{
		
		/// <summary>
		/// The number of obersvations on which the measure is based
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data_points")]
		public System.Nullable<System.Int32> Data_points { get; set; }
		
		/// <summary>
		/// The weight of the component in grams
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gram_weight")]
		public System.Nullable<System.Double> Gram_weight { get; set; }
		
		/// <summary>
		/// Whether the component is refuse, i.e. not edible
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_refuse")]
		public System.Nullable<System.Boolean> Is_refuse { get; set; }
		
		/// <summary>
		/// The kind of component, e.g. bone
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The weight of the component as a percentage of the total weight of the food
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pct_weight")]
		public System.Nullable<System.Double> Pct_weight { get; set; }
	}
	
	public class IngredientObjectItemsNutrients
	{
		
		/// <summary>
		/// Number of observations on which the value is based
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data_points")]
		public System.Nullable<System.Int32> Data_points { get; set; }
		
		/// <summary>
		/// Description of the nutrient source
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Comments on any unusual aspect of the food nutrient. Examples might include why a nutrient value is different than typically expected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footnote")]
		public string Footnote { get; set; }
		
		/// <summary>
		/// Maximum nutrient value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Double> Max { get; set; }
		
		/// <summary>
		/// The unit used for the measure of this nutrient
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurement_unit")]
		public string Measurement_unit { get; set; }
		
		/// <summary>
		/// Median nutrient value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="median")]
		public System.Nullable<System.Double> Median { get; set; }
		
		/// <summary>
		/// Minimum nutrient value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Double> Min { get; set; }
		
		/// <summary>
		/// Nutrient name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Amount of the nutrient per 100g of food
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_100g")]
		public System.Nullable<System.Double> Per_100g { get; set; }
		
		/// <summary>
		/// Nutrient rank
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
	}
	
	public class IngredientObjectItemsPortions
	{
		
		/// <summary>
		/// The number of observations on which the measure is based
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data_points")]
		public System.Nullable<System.Int32> Data_points { get; set; }
		
		/// <summary>
		/// Comments that provide more specificity on the measure. For example, for a pizza measure the dissemination text might be 1 slice is 1/8th of a 14 inch pizza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Comments on any unusual aspects of the measure. Examples might includes caveats on the usage of a measure, or reasons why a measure gram weight is an unexpected value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footnote")]
		public string Footnote { get; set; }
		
		/// <summary>
		/// The weight of the measure in grams
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gram_weight")]
		public System.Nullable<System.Double> Gram_weight { get; set; }
		
		/// <summary>
		/// The unit used for measure (e.g. if mesure is 3 tsp, the unit is tsp)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurement_unit")]
		public string Measurement_unit { get; set; }
		
		/// <summary>
		/// Qualifier of the measure (e.g. related to food shape or form) (e.g. melted, crushed, diced)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier")]
		public string Modifier { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get a branded food item using a barcode
		/// ## Get data for a branded food using the food's UPC/EAN barcode.
		/// 
		/// **Example**
		/// > ```https://chompthis.com/api/v2/food/branded/barcode.php?api_key=API_KEY&code=CODE```
		/// 
		/// **Tips**
		/// * Read our **[Knowledge Base article](https://desk.zoho.com/portal/chompthis/kb/articles/im-having-trouble-getting-matches-for-barcodes-what-can-id-do)** for helpful tips and tricks.
		/// 
		/// FoodBrandedBarcode_phpGetByCode food/branded/barcode.php
		/// </summary>
		/// <param name="code">#### UPC/EAN barcode
		///
		///**Example**
		///> ```&code=0842234000988```
		///</param>
		/// <returns>**Valid** - Will return an object containing any matching foods. 
		///</returns>
		public async Task<BrandedFoodObject> FoodBrandedBarcode_phpGetByCodeAsync(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "food/branded/barcode.php?code=" + (code==null? "" : System.Uri.EscapeDataString(code));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BrandedFoodObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a branded food item by name
		/// ## Search for branded food items by name.
		/// 
		/// **Example**
		/// > ```https://chompthis.com/api/v2/food/branded/name.php?api_key=API_KEY&name=NAME```
		/// 
		/// **Tips**
		/// * Get started by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.
		/// 
		/// > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription.
		/// 
		/// FoodBrandedName_phpGetByNameAndLimitAndPage food/branded/name.php
		/// </summary>
		/// <param name="name">#### Search for branded food items using a general food name keyword. This does not have to exactly match the "official" name for the food.
		///
		///**Example**
		///> ```&name=Starburst```
		///</param>
		/// <param name="limit">#### Set maximum number of records you want the API to return. The default value is "**10**."
		///
		///**Example**
		///> ```&limit=10```
		///</param>
		/// <param name="page">#### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is "**1**."
		///
		///**Example**
		///> ```&page=1```
		///</param>
		/// <returns>**Valid** - Will return an object containing any matching foods. 
		///</returns>
		public async Task<BrandedFoodObject> FoodBrandedName_phpGetByNameAndLimitAndPageAsync(string name, FoodBrandedName_phpGetByNameAndLimitAndPageLimit limit, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "food/branded/name.php?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&limit="+limit+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BrandedFoodObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get data for branded food items using various search parameters
		/// ## Search for branded food items using various parameters.
		/// 
		/// **Example**
		/// > ```https://chompthis.com/api/v2/food/branded/search.php?api_key=API_KEY&brand=BRAND&country=COUNTRY&page=1```
		/// 
		/// **Tips**
		/// * Get started by using the **[Query Builder](https://chompthis.com/api/build.php)**.
		/// 
		/// > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription.
		/// 
		/// FoodBrandedSearch_phpGetByAllergenAndBrandAndCategoryAndCountryAndDietAndIngredientAndKeywordAndMineralAndNutrientAndPalm_oilAndTraceAndVitaminAndLimitAndPage food/branded/search.php
		/// </summary>
		/// <param name="allergen">#### Filter the search to only include branded foods that contain a specific allergen.
		///
		///**Example**
		///> ```&allergen=Peanuts```
		///
		///**Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
		///</param>
		/// <param name="brand">#### Filter the search to only include branded foods that are owned by a specific brand.
		///
		///**Example**
		///> ```&brand=Starbucks```
		///</param>
		/// <param name="category">#### Filter the search to only include branded foods from a specific category.
		///
		///**Example**
		///> ```&category=Plant Based Foods```
		///</param>
		/// <param name="country">#### Filter the search to only include branded foods that are sold in a specific country.
		///
		///**Example**
		///> ```&country=United States```
		///
		///**Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
		///</param>
		/// <param name="diet">#### Filter the search to only include branded foods that are considered compatible with a specific diet.
		///
		///**Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
		///</param>
		/// <param name="ingredient">#### Filter the search to only include branded foods that contain a specific ingredient.
		///
		///**Example**
		///> ```&ingredient=Salt```
		///</param>
		/// <param name="keyword">#### Filter the search to only include branded foods that are associated with a specific keyword.
		///
		///**Example**
		///> ```&keyword=Organic```
		///
		///**Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
		///</param>
		/// <param name="mineral">#### Filter the search to only include branded foods that contain a specific mineral.
		///
		///**Example**
		///> ```&mineral=Potassium```
		///</param>
		/// <param name="nutrient">#### Filter the search to only include branded foods that contain a specific nutrient.
		///
		///**Example**
		///> ```&nutrient=Caffeine```
		///
		///**Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
		///</param>
		/// <param name="palm_oil">#### Filter the search to only include branded foods that contain a specific ingredient made using palm oil.
		///
		///**Example**
		///> ```&palm_oil=E160a Beta Carotene```
		///</param>
		/// <param name="trace">### Filter the search to only include branded foods that contain a specific trace ingredient.
		///
		///**Example**
		///> ```&trace=Tree Nuts```
		///
		///**Important Note**: This parameter cannot be used alone. It must be paired with at least 1 additional parameter.
		///</param>
		/// <param name="vitamin">#### Filter the search to only include branded foods that contain a specific vitamin.
		///
		///**Example**
		///> ```&vitamin=Biotin```
		///</param>
		/// <param name="limit">#### Set maximum number of records you want the API to return. The default value is "**10**."
		///
		///**Example**
		///> ```&limit=10```
		///</param>
		/// <param name="page">#### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is "**1**."
		///
		///**Example**
		///> ```&page=1```
		///</param>
		/// <returns>**Valid** - Will return an object containing any matching foods. 
		///</returns>
		public async Task<BrandedFoodObject> FoodBrandedSearch_phpGetByAllergenAndBrandAndCategoryAndCountryAndDietAndIngredientAndKeywordAndMineralAndNutrientAndPalm_oilAndTraceAndVitaminAndLimitAndPageAsync(string allergen, string brand, string category, string country, FoodBrandedSearch_phpGetByAllergenAndBrandAndCategoryAndCountryAndDietAndIngredientAndKeywordAndMineralAndNutrientAndPalm_oilAndTraceAndVitaminAndLimitAndPageDiet diet, string ingredient, string keyword, string mineral, string nutrient, string palm_oil, string trace, string vitamin, FoodBrandedSearch_phpGetByAllergenAndBrandAndCategoryAndCountryAndDietAndIngredientAndKeywordAndMineralAndNutrientAndPalm_oilAndTraceAndVitaminAndLimitAndPageLimit limit, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "food/branded/search.php?allergen=" + (allergen==null? "" : System.Uri.EscapeDataString(allergen))+"&brand=" + (brand==null? "" : System.Uri.EscapeDataString(brand))+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&diet=" + diet+"&ingredient=" + (ingredient==null? "" : System.Uri.EscapeDataString(ingredient))+"&keyword=" + (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"&mineral=" + (mineral==null? "" : System.Uri.EscapeDataString(mineral))+"&nutrient=" + (nutrient==null? "" : System.Uri.EscapeDataString(nutrient))+"&palm_oil=" + (palm_oil==null? "" : System.Uri.EscapeDataString(palm_oil))+"&trace=" + (trace==null? "" : System.Uri.EscapeDataString(trace))+"&vitamin=" + (vitamin==null? "" : System.Uri.EscapeDataString(vitamin))+"&limit="+limit+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BrandedFoodObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get raw/generic food ingredient item(s)
		/// ## Get data for a specific ingredient or a specific set of ingredients.
		/// 
		/// **Example #1: Single Ingredient**
		/// > ```https://chompthis.com/api/v2/ingredient/search.php?api_key=API_KEY&find=raw broccoli```
		/// 
		/// **Example #2: Set of Ingredients**
		/// > ```https://chompthis.com/api/v2/ingredient/search.php?api_key=API_KEY&find=raw broccoli,mashed potatoes,chicken drumstick```
		/// 
		/// **Tips**
		/// * Expose ingredient endpoints by using our **[food lookup tool](https://chompthis.com/api/lookup.php)**.
		/// 
		/// > This API endpoint is only available to Standard and Premium API subscribers. Please consider upgrading your subscription if you are subscribed to the Limited plan. **[Read this](https://desk.zoho.com/portal/chompthis/kb/articles/can-i-upgrade-downgrade-my-subscription)** if you aren't sure how to upgrade your subscription.
		/// 
		/// FoodIngredientSearch_phpGetByFindAndLimit food/ingredient/search.php
		/// </summary>
		/// <param name="find">Search our database for a single ingredient or a specific set of ingredients.
		///
		///**Example #1: Single Ingredient**
		///> ```&find=raw broccoli```
		///
		///**Example #2: Set of Ingredients**
		///> ```&find=raw broccoli,buttermilk waffle,mashed potatoes```
		///
		///**Important Notes** 
		///  * Comma-separated lists cannot contain more than **10 ingredients**. You must perform additional API calls if you are looking up more than 10 ingredients.
		///</param>
		/// <param name="limit">#### Set maximum number of records you want the API to return, per search term. The default value is "**1**."
		///
		///**Example**
		///> ```&limit=3```
		///</param>
		/// <returns>**Valid** - Will return an object containing any matching ingredient foods. 
		///</returns>
		public async Task<IngredientObject> FoodIngredientSearch_phpGetByFindAndLimitAsync(string find, FoodIngredientSearch_phpGetByFindAndLimitLimit limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "food/ingredient/search.php?find=" + (find==null? "" : System.Uri.EscapeDataString(find))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IngredientObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum FoodBrandedName_phpGetByNameAndLimitAndPageLimit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
	}
	
	public enum FoodBrandedSearch_phpGetByAllergenAndBrandAndCategoryAndCountryAndDietAndIngredientAndKeywordAndMineralAndNutrientAndPalm_oilAndTraceAndVitaminAndLimitAndPageDiet
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vegan = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vegetarian = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gluten Free")]
		Gluten_Free = 2,
	}
	
	public enum FoodBrandedSearch_phpGetByAllergenAndBrandAndCategoryAndCountryAndDietAndIngredientAndKeywordAndMineralAndNutrientAndPalm_oilAndTraceAndVitaminAndLimitAndPageLimit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
	}
	
	public enum FoodIngredientSearch_phpGetByFindAndLimitLimit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
