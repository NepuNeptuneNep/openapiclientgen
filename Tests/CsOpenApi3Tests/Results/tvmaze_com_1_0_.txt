//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BulkResponseElement
	{
		
		/// <summary>
		/// The HTTP code that corresponds to this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of validation errors for this item (in case of error)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public string Errors { get; set; }
		
		/// <summary>
		/// The request data that belonged to this response (in case of error)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// A human-readable error message (in case of error)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The resulting created/updated object (in case of success)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Episode
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EpisodeVote
	{
		
		[System.Runtime.Serialization.DataMember(Name="episode_id")]
		public System.Nullable<System.Int32> Episode_id { get; set; }
		
		/// <summary>
		/// The vote number
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vote")]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> Vote { get; set; }
		
		/// <summary>
		/// Epoch timestamp for when the user voted for the episode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voted_at")]
		public System.Nullable<System.Int32> Voted_at { get; set; }
	}
	
	/// <summary>
	/// 0 for watched, 1 for acquired, 2 for skipped
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarkType
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarkedEpisode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MarkedEpisode_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="episode_id")]
		public System.Nullable<System.Int32> Episode_id { get; set; }
		
		/// <summary>
		/// Epoch timestamp for when the user watched the episode, or 0 for unknown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marked_at")]
		public System.Nullable<System.Int32> Marked_at { get; set; }
		
		/// <summary>
		/// 0 for watched, 1 for acquired, 2 for skipped
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public MarkType Type { get; set; }
	}
	
	public class MarkedEpisode_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="episode")]
		public Episode Episode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Network
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkFollow
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFollow_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="network_id")]
		public System.Nullable<System.Int32> Network_id { get; set; }
	}
	
	public class NetworkFollow_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Network Network { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Person
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonFollow
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PersonFollow_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="person_id")]
		public System.Nullable<System.Int32> Person_id { get; set; }
	}
	
	public class PersonFollow_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="person")]
		public Person Person { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Show
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShowFollow
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ShowFollow_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="show_id")]
		public System.Nullable<System.Int32> Show_id { get; set; }
	}
	
	public class ShowFollow_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="show")]
		public Show Show { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShowVote
	{
		
		[System.Runtime.Serialization.DataMember(Name="show_id")]
		public System.Nullable<System.Int32> Show_id { get; set; }
		
		/// <summary>
		/// The vote number
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vote")]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> Vote { get; set; }
		
		/// <summary>
		/// Epoch timestamp for when the user voted for the episode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voted_at")]
		public System.Nullable<System.Int32> Voted_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagInstance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagInstance_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="show_id")]
		public System.Nullable<System.Int32> Show_id { get; set; }
	}
	
	public class TagInstance_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="show")]
		public Show Show { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Webchannel
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebchannelFollow
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WebchannelFollow_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webchannel_id")]
		public System.Nullable<System.Int32> Webchannel_id { get; set; }
	}
	
	public class WebchannelFollow_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="webchannel")]
		public Webchannel Webchannel { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Poll whether an authentication request was confirmed
		/// Using the token acquired in the `start` endpoint, you can start polling this endpoint once every 10 seconds.
		/// 
		/// When the user has confirmed the authentication request on their end, this endpoint will return the user's API key that you can use in subsequent authenticated endpoints. Note that it'll do so only once, subsequent requests after the initial 200 response will return a 404.
		/// 
		/// For as long as the user did not yet confirm their authentication request, this endpoint will return a 403.
		/// 
		/// AuthPollPost auth/poll
		/// </summary>
		/// <returns>The user confirmed the authentication request</returns>
		public async Task<AuthPollPostReturn> AuthPollPostAsync(AuthPollPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/poll";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthPollPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Start an authentication request
		/// If you want to access the TVmaze API on behalf of a user without querying them for their password, use this endpoint.
		/// 
		/// To get started, send a POST request containing the user's email address. The response will contain a `token`, which you can use as input to the `poll` endpoint. The user will receive an email prompting them to confirm the authentication request.
		/// 
		/// Alternatively, if you expect the user to be logged in to TVmaze on the device they are currently interacting with, you can set `email_confirmation` to false and redirect them to the `confirm_url` URL. If they are logged in to TVmaze, they will be able to confirm the authentication request instantly.
		/// 
		/// AuthStartPost auth/start
		/// </summary>
		/// <returns>The authentication request was succesfully started</returns>
		public async Task<AuthStartPostReturn> AuthStartPostAsync(AuthStartPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthStartPostReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Validate your authentication credentials
		/// If the credentials supplied as HTTP basic are valid, the user's level of premium - if any - is returned.
		/// AuthValidateGet auth/validate
		/// </summary>
		/// <returns>The supplied credentials are valid</returns>
		public async Task<AuthValidateGetReturn> AuthValidateGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/validate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthValidateGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Mark episodes as acquired or watched based on their IDs
		/// This endpoint can be used by all users, even without premium
		/// ScrobbleEpisodesPost scrobble/episodes
		/// </summary>
		/// <returns>All episodes were succesfully marked</returns>
		public async Task<ScrobbleEpisodesPostReturn[]> ScrobbleEpisodesPostAsync(ScrobbleEpisodesPostPostBody[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrobble/episodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScrobbleEpisodesPostReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Mark an episode as acquired or watched based on its ID
		/// This endpoint can be used by all users, even without premium
		/// ScrobbleEpisodes_episode_idPut scrobble/episodes/{episode_id}
		/// </summary>
		/// <returns>this episode is now marked</returns>
		public async Task<MarkedEpisode> ScrobbleEpisodes_episode_idPutAsync(MarkedEpisode requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrobble/episodes/{episode_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MarkedEpisode>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Mark episodes within a show as acquired or watched based on their attributes
		/// To specify a show, supply either `tvmaze_id`, `thetvdb_id` or `imdb_id`. To specify an episode, supply either both `season` and `episode`, or `airdate`.
		/// 
		/// This endpoint can be used by all users, even without premium.
		/// 
		/// ScrobbleShowsPostByTvmaze_idAndThetvdb_idAndImdb_id scrobble/shows
		/// </summary>
		/// <param name="tvmaze_id">The show's TVmaze ID</param>
		/// <param name="thetvdb_id">The show's TheTVDB ID</param>
		/// <param name="imdb_id">The show's IMDB ID</param>
		/// <returns>All episodes were succesfully marked</returns>
		public async Task<ScrobbleShowsPostByTvmaze_idAndThetvdb_idAndImdb_idReturn[]> ScrobbleShowsPostByTvmaze_idAndThetvdb_idAndImdb_idAsync(int tvmaze_id, int thetvdb_id, int imdb_id, ScrobbleShowsPostByTvmaze_idAndThetvdb_idAndImdb_idPostBody[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrobble/shows?tvmaze_id="+tvmaze_id+"&thetvdb_id="+thetvdb_id+"&imdb_id="+imdb_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScrobbleShowsPostByTvmaze_idAndThetvdb_idAndImdb_idReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List watched and acquired episodes for a show
		/// This endpoint can be used by all users, even without premium
		/// ScrobbleShows_show_idGet scrobble/shows/{show_id}
		/// </summary>
		/// <returns>An array of marked episodes</returns>
		public async Task<MarkedEpisode[]> ScrobbleShows_show_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrobble/shows/{show_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MarkedEpisode[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the marked episodes
		/// UserEpisodesGetByShow_id user/episodes
		/// </summary>
		/// <param name="show_id">Only return episodes from this specific show</param>
		/// <returns>An array of marked episodes</returns>
		public async Task<MarkedEpisode[]> UserEpisodesGetByShow_idAsync(int show_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/episodes?show_id="+show_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MarkedEpisode[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unmark an episode
		/// UserEpisodes_episode_idDelete user/episodes/{episode_id}
		/// </summary>
		/// <returns>the episode is now unmarked</returns>
		public async Task UserEpisodes_episode_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/episodes/{episode_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if an episode is marked
		/// UserEpisodes_episode_idGet user/episodes/{episode_id}
		/// </summary>
		/// <returns>The marked episode</returns>
		public async Task<MarkedEpisode> UserEpisodes_episode_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/episodes/{episode_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MarkedEpisode>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Mark an episode
		/// Set `marked_at` to `NULL` or leave it out to use the current time.
		/// UserEpisodes_episode_idPut user/episodes/{episode_id}
		/// </summary>
		/// <returns>this episode is now marked</returns>
		public async Task<MarkedEpisode> UserEpisodes_episode_idPutAsync(MarkedEpisode requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/episodes/{episode_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MarkedEpisode>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the followed networks
		/// UserFollowsNetworksGetByEmbed user/follows/networks
		/// </summary>
		/// <param name="embed">Embed full network info</param>
		/// <returns>An array of followed networks</returns>
		public async Task<NetworkFollow[]> UserFollowsNetworksGetByEmbedAsync(UserFollowsNetworksGetByEmbedEmbed embed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/networks?embed=" + embed;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NetworkFollow[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unfollow a network
		/// UserFollowsNetworks_network_idDelete user/follows/networks/{network_id}
		/// </summary>
		/// <returns>the network is now unfollowed</returns>
		public async Task UserFollowsNetworks_network_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/networks/{network_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a network is followed
		/// UserFollowsNetworks_network_idGet user/follows/networks/{network_id}
		/// </summary>
		/// <returns>The followed network</returns>
		public async Task<NetworkFollow> UserFollowsNetworks_network_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/networks/{network_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NetworkFollow>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Follow a network
		/// UserFollowsNetworks_network_idPut user/follows/networks/{network_id}
		/// </summary>
		/// <returns>this network is now followed</returns>
		public async Task<NetworkFollow> UserFollowsNetworks_network_idPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/networks/{network_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NetworkFollow>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the followed people
		/// UserFollowsPeopleGetByEmbed user/follows/people
		/// </summary>
		/// <param name="embed">Embed full person info</param>
		/// <returns>An array of followed people</returns>
		public async Task<PersonFollow[]> UserFollowsPeopleGetByEmbedAsync(UserFollowsPeopleGetByEmbedEmbed embed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/people?embed=" + embed;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonFollow[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unfollow a person
		/// UserFollowsPeople_person_idDelete user/follows/people/{person_id}
		/// </summary>
		/// <returns>the person is now unfollowed</returns>
		public async Task UserFollowsPeople_person_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/people/{person_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a person is followed
		/// UserFollowsPeople_person_idGet user/follows/people/{person_id}
		/// </summary>
		/// <returns>The followed person</returns>
		public async Task<PersonFollow> UserFollowsPeople_person_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/people/{person_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonFollow>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Follow a person
		/// UserFollowsPeople_person_idPut user/follows/people/{person_id}
		/// </summary>
		/// <returns>this person is now followed</returns>
		public async Task<PersonFollow> UserFollowsPeople_person_idPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/people/{person_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PersonFollow>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the followed shows
		/// UserFollowsShowsGetByEmbed user/follows/shows
		/// </summary>
		/// <param name="embed">Embed full show info</param>
		/// <returns>An array of followed shows</returns>
		public async Task<ShowFollow[]> UserFollowsShowsGetByEmbedAsync(UserFollowsShowsGetByEmbedEmbed embed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/shows?embed=" + embed;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ShowFollow[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unfollow a show
		/// UserFollowsShows_show_idDelete user/follows/shows/{show_id}
		/// </summary>
		/// <returns>The show is now unfollowed</returns>
		public async Task UserFollowsShows_show_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/shows/{show_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a show is followed
		/// UserFollowsShows_show_idGet user/follows/shows/{show_id}
		/// </summary>
		/// <returns>The followed show</returns>
		public async Task<ShowFollow> UserFollowsShows_show_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/shows/{show_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ShowFollow>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Follow a show
		/// UserFollowsShows_show_idPut user/follows/shows/{show_id}
		/// </summary>
		/// <returns>This show is now followed</returns>
		public async Task<ShowFollow> UserFollowsShows_show_idPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/shows/{show_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ShowFollow>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the followed webchannels
		/// UserFollowsWebchannelsGetByEmbed user/follows/webchannels
		/// </summary>
		/// <param name="embed">Embed full webchannel info</param>
		/// <returns>An array of followed webchannels</returns>
		public async Task<WebchannelFollow[]> UserFollowsWebchannelsGetByEmbedAsync(UserFollowsWebchannelsGetByEmbedEmbed embed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/webchannels?embed=" + embed;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebchannelFollow[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unfollow a webchannel
		/// UserFollowsWebchannels_webchannel_idDelete user/follows/webchannels/{webchannel_id}
		/// </summary>
		/// <returns>the webchannel is now unfollowed</returns>
		public async Task UserFollowsWebchannels_webchannel_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/webchannels/{webchannel_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a webchannel is followed
		/// UserFollowsWebchannels_webchannel_idGet user/follows/webchannels/{webchannel_id}
		/// </summary>
		/// <returns>The followed webchannel</returns>
		public async Task<WebchannelFollow> UserFollowsWebchannels_webchannel_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/webchannels/{webchannel_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebchannelFollow>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Follow a webchannel
		/// UserFollowsWebchannels_webchannel_idPut user/follows/webchannels/{webchannel_id}
		/// </summary>
		/// <returns>this webchannel is now followed</returns>
		public async Task<WebchannelFollow> UserFollowsWebchannels_webchannel_idPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/follows/webchannels/{webchannel_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebchannelFollow>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all tags
		/// UserTagsGet user/tags
		/// </summary>
		/// <returns>An array of tags</returns>
		public async Task<Tag[]> UserTagsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Tag[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new tag
		/// UserTagsPost user/tags
		/// </summary>
		/// <returns>The newly created tag</returns>
		public async Task<Tag> UserTagsPostAsync(Tag requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Tag>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a specific tag
		/// UserTags_tag_idDelete user/tags/{tag_id}
		/// </summary>
		/// <returns>The tag was deleted</returns>
		public async Task UserTags_tag_idDeleteAsync(int tag_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/tags/"+tag_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a specific tag
		/// UserTags_tag_idPatch user/tags/{tag_id}
		/// </summary>
		/// <returns>The tag was updated</returns>
		public async Task<Tag> UserTags_tag_idPatchAsync(int tag_id, Tag requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/tags/"+tag_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Tag>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all shows under this tag
		/// UserTags_tag_idShowsGetByEmbed user/tags/{tag_id}/shows
		/// </summary>
		/// <param name="embed">Embed full show info</param>
		/// <returns>A list of tagged shows</returns>
		public async Task<TagInstance[]> UserTags_tag_idShowsGetByEmbedAsync(int tag_id, UserFollowsShowsGetByEmbedEmbed embed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/tags/"+tag_id+"/shows?embed=" + embed;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagInstance[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Untag a show
		/// UserTags_tag_idShows_show_idDelete user/tags/{tag_id}/shows/{show_id}
		/// </summary>
		/// <returns>The show was untagged</returns>
		public async Task UserTags_tag_idShows_show_idDeleteAsync(int tag_id, int show_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/tags/"+tag_id+"/shows/"+show_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tag a show
		/// UserTags_tag_idShows_show_idPut user/tags/{tag_id}/shows/{show_id}
		/// </summary>
		/// <returns>The show was tagged</returns>
		public async Task<TagInstance> UserTags_tag_idShows_show_idPutAsync(int tag_id, int show_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/tags/"+tag_id+"/shows/"+show_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagInstance>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the episodes voted for
		/// UserVotesEpisodesGet user/votes/episodes
		/// </summary>
		/// <returns>An array of episode votes</returns>
		public async Task<EpisodeVote[]> UserVotesEpisodesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/votes/episodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EpisodeVote[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove an episode vote
		/// UserVotesEpisodes_episode_idDelete user/votes/episodes/{episode_id}
		/// </summary>
		/// <returns>The episode vote is now removed</returns>
		public async Task UserVotesEpisodes_episode_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/votes/episodes/{episode_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if an episode is voted for
		/// UserVotesEpisodes_episode_idGet user/votes/episodes/{episode_id}
		/// </summary>
		/// <returns>The episode vote</returns>
		public async Task<EpisodeVote> UserVotesEpisodes_episode_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/votes/episodes/{episode_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EpisodeVote>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Vote for an episode
		/// UserVotesEpisodes_episode_idPut user/votes/episodes/{episode_id}
		/// </summary>
		/// <returns>This episode is now voted for</returns>
		public async Task<EpisodeVote> UserVotesEpisodes_episode_idPutAsync(EpisodeVote requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/votes/episodes/{episode_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EpisodeVote>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the shows voted for
		/// UserVotesShowsGetByEmbed user/votes/shows
		/// </summary>
		/// <param name="embed">Embed full show info</param>
		/// <returns>An array of show votes</returns>
		public async Task<ShowVote[]> UserVotesShowsGetByEmbedAsync(UserFollowsShowsGetByEmbedEmbed embed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/votes/shows?embed=" + embed;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ShowVote[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a show vote
		/// UserVotesShows_show_idDelete user/votes/shows/{show_id}
		/// </summary>
		/// <returns>The show vote is now removed</returns>
		public async Task UserVotesShows_show_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/votes/shows/{show_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a show is voted for
		/// UserVotesShows_show_idGet user/votes/shows/{show_id}
		/// </summary>
		/// <returns>The show vote</returns>
		public async Task<ShowVote> UserVotesShows_show_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/votes/shows/{show_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ShowVote>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Vote for a show
		/// Set `voted_at` to `NULL` or leave it out to use the current time.
		/// UserVotesShows_show_idPut user/votes/shows/{show_id}
		/// </summary>
		/// <returns>This show is now voted for</returns>
		public async Task<ShowVote> UserVotesShows_show_idPutAsync(ShowVote requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/votes/shows/{show_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ShowVote>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class AuthPollPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	public class AuthPollPostReturn
	{
		
		/// <summary>
		/// The user's API key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apikey")]
		public string Apikey { get; set; }
		
		/// <summary>
		/// The user's username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class AuthStartPostPostBody
	{
		
		/// <summary>
		/// The user's email address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Whether to email the user a confirmation link
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_confirmation")]
		public System.Nullable<System.Boolean> Email_confirmation { get; set; }
	}
	
	public class AuthStartPostReturn
	{
		
		/// <summary>
		/// URL where the user can confirm the authentication request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirm_url")]
		public string Confirm_url { get; set; }
		
		/// <summary>
		/// Authentication token to use in the `poll` endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	public class AuthValidateGetReturn
	{
		
		/// <summary>
		/// The user's premium level; 1 for Bronze, 2 for Silver, 3 for Gold; or 0 for none
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="premium")]
		public System.Nullable<System.Int32> Premium { get; set; }
	}
	
	public class ScrobbleEpisodesPostPostBody
	{
		
		/// <summary>
		/// The TVmaze episode ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="episode_id")]
		public System.Nullable<System.Int32> Episode_id { get; set; }
		
		/// <summary>
		/// Epoch timestamp for when the user watched the episode, or 0 for unknown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marked_at")]
		public System.Nullable<System.Int32> Marked_at { get; set; }
		
		/// <summary>
		/// 0 for watched, 1 for acquired, 2 for skipped
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public MarkType Type { get; set; }
	}
	
	public class ScrobbleEpisodesPostReturn
	{
		
		/// <summary>
		/// The HTTP code that corresponds to this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of validation errors for this item (in case of error)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public string Errors { get; set; }
		
		/// <summary>
		/// The request data that belonged to this response (in case of error)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// A human-readable error message (in case of error)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The resulting created/updated object (in case of success)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	public class ScrobbleShowsPostByTvmaze_idAndThetvdb_idAndImdb_idPostBody
	{
		
		/// <summary>
		/// The episode airdate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airdate")]
		public System.Nullable<System.DateOnly> Airdate { get; set; }
		
		/// <summary>
		/// The episode number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="episode")]
		public System.Nullable<System.Int32> Episode { get; set; }
		
		/// <summary>
		/// Epoch timestamp for when the user watched the episode, or 0 for unknown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marked_at")]
		public System.Nullable<System.Int32> Marked_at { get; set; }
		
		/// <summary>
		/// The season number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="season")]
		public System.Nullable<System.Int32> Season { get; set; }
		
		/// <summary>
		/// 0 for watched, 1 for acquired, 2 for skipped
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public MarkType Type { get; set; }
	}
	
	public class ScrobbleShowsPostByTvmaze_idAndThetvdb_idAndImdb_idReturn
	{
		
		/// <summary>
		/// The HTTP code that corresponds to this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of validation errors for this item (in case of error)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public string Errors { get; set; }
		
		/// <summary>
		/// The request data that belonged to this response (in case of error)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// A human-readable error message (in case of error)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The resulting created/updated object (in case of success)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	public enum UserFollowsNetworksGetByEmbedEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="network")]
		network = 0,
	}
	
	public enum UserFollowsPeopleGetByEmbedEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="person")]
		person = 0,
	}
	
	public enum UserFollowsShowsGetByEmbedEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="show")]
		show = 0,
	}
	
	public enum UserFollowsWebchannelsGetByEmbedEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webchannel")]
		webchannel = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
