//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnsweringBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="department")]
		public GovernmentDepartment Department { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shortName")]
		public string ShortName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GovernmentDepartment
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BiographyExperience
	{
		
		[System.Runtime.Serialization.DataMember(Name="endMonth")]
		public System.Nullable<System.Int32> EndMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endYear")]
		public System.Nullable<System.Int32> EndYear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organisation")]
		public string Organisation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startMonth")]
		public System.Nullable<System.Int32> StartMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startYear")]
		public System.Nullable<System.Int32> StartYear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BiographyExperienceListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public BiographyExperience[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Link
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BiographyItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalInfoLink")]
		public string AdditionalInfoLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public House House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum House
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Constituency
	{
		
		[System.Runtime.Serialization.DataMember(Name="currentRepresentation")]
		public ConstituencyRepresentation CurrentRepresentation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConstituencyRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public MemberItem Member { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="representation")]
		public HouseMembership Representation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Member Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Member
	{
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestHouseMembership")]
		public HouseMembership LatestHouseMembership { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestParty")]
		public Party LatestParty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nameAddressAs")]
		public string NameAddressAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nameDisplayAs")]
		public string NameDisplayAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nameFullTitle")]
		public string NameFullTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nameListAs")]
		public string NameListAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HouseMembership
	{
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public House House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipEndDate")]
		public System.Nullable<System.DateTimeOffset> MembershipEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipEndReason")]
		public string MembershipEndReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipEndReasonId")]
		public System.Nullable<System.Int32> MembershipEndReasonId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipEndReasonNotes")]
		public string MembershipEndReasonNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipFrom")]
		public string MembershipFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipFromId")]
		public System.Nullable<System.Int32> MembershipFromId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipStartDate")]
		public System.Nullable<System.DateTimeOffset> MembershipStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipStatus")]
		public HouseMembershipStatus MembershipStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HouseMembershipStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MemberStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusDescription")]
		public string StatusDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusId")]
		public System.Nullable<System.Int32> StatusId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusIsActive")]
		public System.Nullable<System.Boolean> StatusIsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusNotes")]
		public string StatusNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusStartDate")]
		public System.Nullable<System.DateTimeOffset> StatusStartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MemberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Party
	{
		
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backgroundColour")]
		public string BackgroundColour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foregroundColour")]
		public string ForegroundColour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="governmentType")]
		public GovernmentType GovernmentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isIndependentParty")]
		public System.Nullable<System.Boolean> IsIndependentParty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLordsMainParty")]
		public System.Nullable<System.Boolean> IsLordsMainParty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLordsSpiritualParty")]
		public System.Nullable<System.Boolean> IsLordsSpiritualParty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GovernmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConstituencyItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Constituency Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConstituencyMembersServiceSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ConstituencyItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultContext")]
		public string ResultContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skip")]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="take")]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConstituencyRepresentationListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ConstituencyRepresentation[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPreferred")]
		public System.Nullable<System.Boolean> IsPreferred { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isWebAddress")]
		public System.Nullable<System.Boolean> IsWebAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line3")]
		public string Line3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line4")]
		public string Line4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line5")]
		public string Line5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postcode")]
		public string Postcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeDescription")]
		public string TypeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactInformationListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ContactInformation[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DebateContribution
	{
		
		[System.Runtime.Serialization.DataMember(Name="answerCount")]
		public System.Nullable<System.Int32> AnswerCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debateId")]
		public System.Nullable<System.Int32> DebateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debateTitle")]
		public string DebateTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debateWebsiteId")]
		public string DebateWebsiteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstTimecode")]
		public System.Nullable<System.DateTimeOffset> FirstTimecode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public string House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interventionCount")]
		public System.Nullable<System.Int32> InterventionCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pointsOfOrderCount")]
		public System.Nullable<System.Int32> PointsOfOrderCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="questionCount")]
		public System.Nullable<System.Int32> QuestionCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="section")]
		public string Section { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sittingDate")]
		public System.Nullable<System.DateTimeOffset> SittingDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speechCount")]
		public System.Nullable<System.Int32> SpeechCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statementsCount")]
		public System.Nullable<System.Int32> StatementsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplementaryQuestionCount")]
		public System.Nullable<System.Int32> SupplementaryQuestionCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalContributions")]
		public System.Nullable<System.Int32> TotalContributions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DebateContributionItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DebateContribution Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DebateContributionMembersServiceSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DebateContributionItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultContext")]
		public string ResultContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skip")]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="take")]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EarlyDayMotion
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateTabled")]
		public System.Nullable<System.DateTimeOffset> DateTabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAmendment")]
		public System.Nullable<System.Boolean> IsAmendment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPrayer")]
		public System.Nullable<System.Boolean> IsPrayer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sponsorsCount")]
		public System.Nullable<System.Int32> SponsorsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EarlyDayMotionItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public EarlyDayMotion Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EarlyDayMotionMembersServiceSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public EarlyDayMotionItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultContext")]
		public string ResultContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skip")]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="take")]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectionCandidate
	{
		
		[System.Runtime.Serialization.DataMember(Name="memberId")]
		public System.Nullable<System.Int32> MemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party")]
		public Party Party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rankOrder")]
		public System.Nullable<System.Int32> RankOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultChange")]
		public string ResultChange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voteShare")]
		public System.Nullable<System.Double> VoteShare { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="votes")]
		public System.Nullable<System.Int32> Votes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="candidates")]
		public ElectionCandidate[] Candidates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="constituencyName")]
		public string ConstituencyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="electionDate")]
		public System.Nullable<System.DateTimeOffset> ElectionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="electionId")]
		public System.Nullable<System.Int32> ElectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="electionTitle")]
		public string ElectionTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="electorate")]
		public System.Nullable<System.Int32> Electorate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isGeneralElection")]
		public System.Nullable<System.Boolean> IsGeneralElection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isNotional")]
		public System.Nullable<System.Boolean> IsNotional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="majority")]
		public System.Nullable<System.Int32> Majority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="turnout")]
		public System.Nullable<System.Int32> Turnout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="winningParty")]
		public Party WinningParty { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectionResultItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ElectionResult Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectionResultListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ElectionResult[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenericReferenceData
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GovernmentOppositionPost
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdWhen")]
		public System.Nullable<System.DateTimeOffset> CreatedWhen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="governmentDepartments")]
		public GovernmentDepartment[] GovernmentDepartments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hansardName")]
		public string HansardName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postHolders")]
		public GovernmentOppositionPostHolder[] PostHolders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PostType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GovernmentOppositionPostHolder
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPaid")]
		public System.Nullable<System.Boolean> IsPaid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layingMinisterName")]
		public string LayingMinisterName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public MemberItem Member { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PostType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GovernmentOppositionPostItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GovernmentOppositionPost Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupedQuestion
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateTabled")]
		public System.Nullable<System.DateTimeOffset> DateTabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="questionUin")]
		public string QuestionUin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		[System.Runtime.Serialization.DataMember(Name="childContexts")]
		public LocationContext[] ChildContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="context")]
		public LocationContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentContext")]
		public LocationContext ParentContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateOfTheParties")]
		public PartySeatCount[] StateOfTheParties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationContext
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public LocationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeName")]
		public string TypeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartySeatCount
	{
		
		[System.Runtime.Serialization.DataMember(Name="female")]
		public System.Nullable<System.Int32> Female { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="male")]
		public System.Nullable<System.Int32> Male { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonBinary")]
		public System.Nullable<System.Int32> NonBinary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party")]
		public Party Party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Location Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LordsByType
	{
		
		[System.Runtime.Serialization.DataMember(Name="bishop")]
		public System.Nullable<System.Int32> Bishop { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hereditary")]
		public System.Nullable<System.Int32> Hereditary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="life")]
		public System.Nullable<System.Int32> Life { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party")]
		public Party Party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LordsByTypeItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public LordsByType Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LordsByTypeMembersServiceSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public LordsByTypeItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultContext")]
		public string ResultContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skip")]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="take")]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberBiography
	{
		
		[System.Runtime.Serialization.DataMember(Name="committeeMemberships")]
		public BiographyItem[] CommitteeMemberships { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="electionsContested")]
		public BiographyItem[] ElectionsContested { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="governmentPosts")]
		public BiographyItem[] GovernmentPosts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="houseMemberships")]
		public BiographyItem[] HouseMemberships { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oppositionPosts")]
		public BiographyItem[] OppositionPosts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otherPosts")]
		public BiographyItem[] OtherPosts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partyAffiliations")]
		public BiographyItem[] PartyAffiliations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="representations")]
		public BiographyItem[] Representations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberBiographyItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MemberBiography Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberFocus
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="focus")]
		public string[] Focus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberFocusListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MemberFocus[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberHistory
	{
		
		[System.Runtime.Serialization.DataMember(Name="houseMembershipHistory")]
		public HouseMembership[] HouseMembershipHistory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nameHistory")]
		public MemberName[] NameHistory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partyHistory")]
		public MemberParty[] PartyHistory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberName
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nameAddressAs")]
		public string NameAddressAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nameDisplayAs")]
		public string NameDisplayAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nameFullTitle")]
		public string NameFullTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nameListAs")]
		public string NameListAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberParty
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party")]
		public Party Party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberHistoryItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MemberHistory Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberMembersServiceSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public MemberItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultContext")]
		public string ResultContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skip")]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="take")]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembersInterests
	{
		
		[System.Runtime.Serialization.DataMember(Name="interestCategories")]
		public RegisteredInterestCategory[] InterestCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public Member Member { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisteredInterestCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interests")]
		public RegisteredInterest[] Interests { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisteredInterest
	{
		
		[System.Runtime.Serialization.DataMember(Name="childInterests")]
		public RegisteredInterest[] ChildInterests { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdWhen")]
		public System.Nullable<System.DateTimeOffset> CreatedWhen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedWhen")]
		public System.Nullable<System.DateTimeOffset> DeletedWhen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interest")]
		public string Interest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCorrection")]
		public System.Nullable<System.Boolean> IsCorrection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastAmendedWhen")]
		public System.Nullable<System.DateTimeOffset> LastAmendedWhen { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembersInterestsItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MembersInterests Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembersInterestsMembersServiceSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public MembersInterestsItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultContext")]
		public string ResultContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skip")]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="take")]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembersStaff
	{
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public Member Member { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="staff")]
		public Staff[] Staff { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Staff
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forename")]
		public string Forename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="surname")]
		public string Surname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembersStaffItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MembersStaff Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembersStaffMembersServiceSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public MembersStaffItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultContext")]
		public string ResultContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skip")]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="take")]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartyItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Party Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartyMembersServiceSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PartyItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultContext")]
		public string ResultContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skip")]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="take")]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartySeatCountItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PartySeatCount Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartySeatCountMembersServiceSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PartySeatCountItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultContext")]
		public string ResultContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skip")]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="take")]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PortraitCropEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisteredInterestCategoryListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RegisteredInterestCategory[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StaffListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Staff[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StringItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Vote
	{
		
		[System.Runtime.Serialization.DataMember(Name="actedAsTeller")]
		public System.Nullable<System.Boolean> ActedAsTeller { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="divisionNumber")]
		public System.Nullable<System.Int32> DivisionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public House House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inAffirmativeLobby")]
		public System.Nullable<System.Boolean> InAffirmativeLobby { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberAgainst")]
		public System.Nullable<System.Int32> NumberAgainst { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberInFavour")]
		public System.Nullable<System.Int32> NumberInFavour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoteItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Vote Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoteMembersServiceSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public VoteItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultContext")]
		public string ResultContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skip")]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="take")]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WrittenQuestion
	{
		
		[System.Runtime.Serialization.DataMember(Name="answerIsCorrection")]
		public System.Nullable<System.Boolean> AnswerIsCorrection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answerIsHolding")]
		public System.Nullable<System.Boolean> AnswerIsHolding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answerText")]
		public string AnswerText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answeringBody")]
		public AnsweringBody AnsweringBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answeringBodyId")]
		public System.Nullable<System.Int32> AnsweringBodyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answeringMember")]
		public Member AnsweringMember { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answeringMemberId")]
		public System.Nullable<System.Int32> AnsweringMemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="askingMemberId")]
		public System.Nullable<System.Int32> AskingMemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachmentCount")]
		public System.Nullable<System.Int32> AttachmentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="correctingMember")]
		public Member CorrectingMember { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="correctingMemberId")]
		public System.Nullable<System.Int32> CorrectingMemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateAnswered")]
		public System.Nullable<System.DateTimeOffset> DateAnswered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateForAnswer")]
		public System.Nullable<System.DateTimeOffset> DateForAnswer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateTabled")]
		public System.Nullable<System.DateTimeOffset> DateTabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupedQuestions")]
		public string[] GroupedQuestions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupedQuestionsDates")]
		public GroupedQuestion[] GroupedQuestionsDates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="heading")]
		public string Heading { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public House House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isNamedDay")]
		public System.Nullable<System.Boolean> IsNamedDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isWithdrawn")]
		public System.Nullable<System.Boolean> IsWithdrawn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberHasInterest")]
		public System.Nullable<System.Boolean> MemberHasInterest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="questionText")]
		public string QuestionText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uin")]
		public string Uin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WrittenQuestionItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WrittenQuestion Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WrittenQuestionMembersServiceSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public WrittenQuestionItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultContext")]
		public string ResultContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skip")]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="take")]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of locations, both parent and child
		/// ApiLocationBrowse_locationType_locationNameGet api/Location/Browse/{locationType}/{locationName}
		/// </summary>
		/// <param name="locationType">Location by type of location</param>
		/// <param name="locationName">Location by name specified</param>
		/// <returns>Success</returns>
		public async Task<LocationItem> ApiLocationBrowse_locationType_locationNameGetAsync(LocationType locationType, string locationName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Location/Browse/"+locationType+"/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of constituencies
		/// ApiLocationConstituencySearchGetBySearchTextAndSkipAndTake api/Location/Constituency/Search
		/// </summary>
		/// <param name="searchText">Constituencies containing serach term in their name</param>
		/// <param name="skip">The number of records to skip from the first, default is 0</param>
		/// <param name="take">The number of records to return, default is 20. Maximum is 20</param>
		/// <returns>Success</returns>
		public async Task<ConstituencyMembersServiceSearchResult> ApiLocationConstituencySearchGetBySearchTextAndSkipAndTakeAsync(string searchText, int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Location/Constituency/Search?searchText=" + (searchText==null? "" : System.Uri.EscapeDataString(searchText))+"&skip="+skip+"&take="+take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConstituencyMembersServiceSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a constituency by ID
		/// ApiLocationConstituency_idGet api/Location/Constituency/{id}
		/// </summary>
		/// <param name="id">Constituency by ID</param>
		/// <returns>Success</returns>
		public async Task<ConstituencyItem> ApiLocationConstituency_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Location/Constituency/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConstituencyItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns latest election result by constituency id
		/// ApiLocationConstituency_idElectionResultLatestGet api/Location/Constituency/{id}/ElectionResult/Latest
		/// </summary>
		/// <param name="id">Latest election result by constituency id</param>
		/// <returns>Success</returns>
		public async Task<ElectionResultItem> ApiLocationConstituency_idElectionResultLatestGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Location/Constituency/"+id+"/ElectionResult/Latest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ElectionResultItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an election result by constituency and election id
		/// ApiLocationConstituency_idElectionResult_electionIdGet api/Location/Constituency/{id}/ElectionResult/{electionId}
		/// </summary>
		/// <param name="id">Election result by constituency id</param>
		/// <param name="electionId">Election result by election id</param>
		/// <returns>Success</returns>
		public async Task<ElectionResultItem> ApiLocationConstituency_idElectionResult_electionIdGetAsync(int id, int electionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Location/Constituency/"+id+"/ElectionResult/"+electionId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ElectionResultItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of election results by constituency ID
		/// ApiLocationConstituency_idElectionResultsGet api/Location/Constituency/{id}/ElectionResults
		/// </summary>
		/// <param name="id">Elections results by constituency ID</param>
		/// <returns>Success</returns>
		public async Task<ElectionResultListItem> ApiLocationConstituency_idElectionResultsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Location/Constituency/"+id+"/ElectionResults";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ElectionResultListItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns geometry by constituency ID
		/// ApiLocationConstituency_idGeometryGet api/Location/Constituency/{id}/Geometry
		/// </summary>
		/// <param name="id">Geometry by constituency ID</param>
		/// <returns>Success</returns>
		public async Task<StringItem> ApiLocationConstituency_idGeometryGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Location/Constituency/"+id+"/Geometry";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StringItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of representations by constituency ID
		/// ApiLocationConstituency_idRepresentationsGet api/Location/Constituency/{id}/Representations
		/// </summary>
		/// <param name="id">Representations by constituency ID</param>
		/// <returns>Success</returns>
		public async Task<ConstituencyRepresentationListItem> ApiLocationConstituency_idRepresentationsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Location/Constituency/"+id+"/Representations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConstituencyRepresentationListItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a synopsis by constituency ID
		/// ApiLocationConstituency_idSynopsisGet api/Location/Constituency/{id}/Synopsis
		/// </summary>
		/// <param name="id">Synopsis by constituency ID</param>
		/// <returns>Success</returns>
		public async Task<StringItem> ApiLocationConstituency_idSynopsisGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Location/Constituency/"+id+"/Synopsis";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StringItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of registered interests
		/// ApiLordsInterestsRegisterGetBySearchTermAndPageAndIncludeDeleted api/LordsInterests/Register
		/// </summary>
		/// <param name="searchTerm">Registered interests containing search term</param>
		/// <param name="page">Page of results to return, default 0. Results per page 20.</param>
		/// <param name="includeDeleted">Registered interests that have been deleted</param>
		/// <returns>Success</returns>
		public async Task<MembersInterestsMembersServiceSearchResult> ApiLordsInterestsRegisterGetBySearchTermAndPageAndIncludeDeletedAsync(string searchTerm, int page, bool includeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/LordsInterests/Register?searchTerm=" + (searchTerm==null? "" : System.Uri.EscapeDataString(searchTerm))+"&page="+page+"&includeDeleted="+includeDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MembersInterestsMembersServiceSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of staff
		/// ApiLordsInterestsStaffGetBySearchTermAndPage api/LordsInterests/Staff
		/// </summary>
		/// <param name="searchTerm">Staff containing search term</param>
		/// <param name="page">Page of results to return, default 0. Results per page 20.</param>
		/// <returns>Success</returns>
		public async Task<MembersStaffMembersServiceSearchResult> ApiLordsInterestsStaffGetBySearchTermAndPageAsync(string searchTerm, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/LordsInterests/Staff?searchTerm=" + (searchTerm==null? "" : System.Uri.EscapeDataString(searchTerm))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MembersStaffMembersServiceSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return members by ID with list of their historical names, parties and memberships
		/// ApiMembersHistoryGetByIds api/Members/History
		/// </summary>
		/// <param name="ids">List of MemberIds to find</param>
		/// <returns>Success</returns>
		public async Task<MemberHistoryItem[]> ApiMembersHistoryGetByIdsAsync(int[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/History?"+string.Join("&", ids.Select(z => $"ids={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MemberHistoryItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of current members of the Commons or Lords
		/// ApiMembersSearchGetByNameAndLocationAndPostTitleAndPartyIdAndHouseAndConstituencyIdAndNameStartsWithAndGenderAndMembershipStartedSinceAndMembershipEnded_MembershipEndedSinceAndMembershipEnded_MembershipEndReasonIdsAndMembershipInDateRange_WasMemberOnOrAfterAndMembershipInDateRange_WasMemberOnOrBeforeAndMembershipInDateRange_WasMemberOfHouseAndIsEligibleAndIsCurrentMemberAndPolicyInterestIdAndExperienceAndSkipAndTake api/Members/Search
		/// </summary>
		/// <param name="Name">Members where name contains term specified</param>
		/// <param name="Location">Members where postcode or geographical location matches the term specified</param>
		/// <param name="PostTitle">Members which have held the post specified</param>
		/// <param name="PartyId">Members which are currently affiliated with party with party ID</param>
		/// <param name="House">Members where their most recent house is the house specified</param>
		/// <param name="ConstituencyId">Members which currently hold the constituency with constituency id</param>
		/// <param name="NameStartsWith">Members with surname begining with letter(s) specified</param>
		/// <param name="Gender">Members with the gender specified</param>
		/// <param name="MembershipStartedSince">Members who started on or after the date given</param>
		/// <param name="MembershipEnded_MembershipEndedSince">Members who left the House on or after the date given</param>
		/// <param name="MembershipInDateRange_WasMemberOnOrAfter">Members who were active on or after the date specified</param>
		/// <param name="MembershipInDateRange_WasMemberOnOrBefore">Members who were active on or before the date specified</param>
		/// <param name="MembershipInDateRange_WasMemberOfHouse">Members who were active in the house specifid</param>
		/// <param name="IsEligible">Members currently Eligible to sit in their House</param>
		/// <param name="IsCurrentMember">Members who are current or former members</param>
		/// <param name="PolicyInterestId">Members with specified policy interest</param>
		/// <param name="Experience">Members with specified experience</param>
		/// <param name="skip">The number of records to skip from the first, default is 0</param>
		/// <param name="take">The number of records to return, default is 20. Maximum is 20</param>
		/// <returns>Success</returns>
		public async Task<MemberMembersServiceSearchResult> ApiMembersSearchGetByNameAndLocationAndPostTitleAndPartyIdAndHouseAndConstituencyIdAndNameStartsWithAndGenderAndMembershipStartedSinceAndMembershipEnded_MembershipEndedSinceAndMembershipEnded_MembershipEndReasonIdsAndMembershipInDateRange_WasMemberOnOrAfterAndMembershipInDateRange_WasMemberOnOrBeforeAndMembershipInDateRange_WasMemberOfHouseAndIsEligibleAndIsCurrentMemberAndPolicyInterestIdAndExperienceAndSkipAndTakeAsync(
					string Name, 
					string Location, 
					string PostTitle, 
					int PartyId, 
					House House, 
					int ConstituencyId, 
					string NameStartsWith, 
					string Gender, 
					System.DateTimeOffset MembershipStartedSince, 
					System.DateTimeOffset MembershipEnded_MembershipEndedSince, 
					int[] MembershipEnded_MembershipEndReasonIds, 
					System.DateTimeOffset MembershipInDateRange_WasMemberOnOrAfter, 
					System.DateTimeOffset MembershipInDateRange_WasMemberOnOrBefore, 
					House MembershipInDateRange_WasMemberOfHouse, 
					bool IsEligible, 
					bool IsCurrentMember, 
					int PolicyInterestId, 
					string Experience, 
					int skip, 
					int take, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/Search?Name=" + (Name==null? "" : System.Uri.EscapeDataString(Name))+"&Location=" + (Location==null? "" : System.Uri.EscapeDataString(Location))+"&PostTitle=" + (PostTitle==null? "" : System.Uri.EscapeDataString(PostTitle))+"&PartyId="+PartyId+"&House="+House+"&ConstituencyId="+ConstituencyId+"&NameStartsWith=" + (NameStartsWith==null? "" : System.Uri.EscapeDataString(NameStartsWith))+"&Gender=" + (Gender==null? "" : System.Uri.EscapeDataString(Gender))+"&MembershipStartedSince=" + MembershipStartedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&MembershipEnded.MembershipEndedSince=" + MembershipEnded_MembershipEndedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", MembershipEnded_MembershipEndReasonIds.Select(z => $"MembershipEnded.MembershipEndReasonIds={z}"))+"&MembershipInDateRange.WasMemberOnOrAfter=" + MembershipInDateRange_WasMemberOnOrAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&MembershipInDateRange.WasMemberOnOrBefore=" + MembershipInDateRange_WasMemberOnOrBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&MembershipInDateRange.WasMemberOfHouse="+MembershipInDateRange_WasMemberOfHouse+"&IsEligible="+IsEligible+"&IsCurrentMember="+IsCurrentMember+"&PolicyInterestId="+PolicyInterestId+"&Experience=" + (Experience==null? "" : System.Uri.EscapeDataString(Experience))+"&skip="+skip+"&take="+take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MemberMembersServiceSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of members of the Commons or Lords
		/// ApiMembersSearchHistoricalGetByNameAndDateToSearchForAndSkipAndTake api/Members/SearchHistorical
		/// </summary>
		/// <param name="name">Members with names containing the term specified</param>
		/// <param name="dateToSearchFor">Members that were an active member of the Commons or Lords on the date specified</param>
		/// <param name="skip">The number of records to skip from the first, default is 0</param>
		/// <param name="take">The number of records to return, default is 20. Maximum is 20</param>
		/// <returns>Success</returns>
		public async Task<MemberMembersServiceSearchResult> ApiMembersSearchHistoricalGetByNameAndDateToSearchForAndSkipAndTakeAsync(string name, System.DateTimeOffset dateToSearchFor, int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/SearchHistorical?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&dateToSearchFor=" + dateToSearchFor.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&skip="+skip+"&take="+take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MemberMembersServiceSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return member by ID
		/// ApiMembers_idGetByDetailsForDate api/Members/{id}
		/// </summary>
		/// <param name="id">Member by ID specified</param>
		/// <param name="detailsForDate">Member object will be populated with details from the date specified</param>
		/// <returns>Success</returns>
		public async Task<MemberItem> ApiMembers_idGetByDetailsForDateAsync(int id, System.DateTimeOffset detailsForDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"?detailsForDate=" + detailsForDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MemberItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return biography of member by ID
		/// ApiMembers_idBiographyGet api/Members/{id}/Biography
		/// </summary>
		/// <param name="id">Biography of Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task<MemberBiographyItem> ApiMembers_idBiographyGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/Biography";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MemberBiographyItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return list of contact details of member by ID
		/// ApiMembers_idContactGet api/Members/{id}/Contact
		/// </summary>
		/// <param name="id">Contact details of Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task<ContactInformationListItem> ApiMembers_idContactGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/Contact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactInformationListItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return contribution summary of member by ID
		/// ApiMembers_idContributionSummaryGetByPage api/Members/{id}/ContributionSummary
		/// </summary>
		/// <param name="id">Contribution summary of Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task<DebateContributionMembersServiceSearchResult> ApiMembers_idContributionSummaryGetByPageAsync(int id, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/ContributionSummary?page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DebateContributionMembersServiceSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return list of early day motions of member by ID
		/// ApiMembers_idEdmsGetByPage api/Members/{id}/Edms
		/// </summary>
		/// <param name="id">Early day motions of Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task<EarlyDayMotionMembersServiceSearchResult> ApiMembers_idEdmsGetByPageAsync(int id, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/Edms?page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EarlyDayMotionMembersServiceSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return experience of member by ID
		/// ApiMembers_idExperienceGet api/Members/{id}/Experience
		/// </summary>
		/// <param name="id">Experience of Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task<BiographyExperienceListItem> ApiMembers_idExperienceGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/Experience";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BiographyExperienceListItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return list of areas of focus of member by ID
		/// ApiMembers_idFocusGet api/Members/{id}/Focus
		/// </summary>
		/// <param name="id">Areas of focus of Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task<MemberFocusListItem> ApiMembers_idFocusGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/Focus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MemberFocusListItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return latest election result of member by ID
		/// ApiMembers_idLatestElectionResultGet api/Members/{id}/LatestElectionResult
		/// </summary>
		/// <param name="id">Latest election result of Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task<ElectionResultItem> ApiMembers_idLatestElectionResultGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/LatestElectionResult";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ElectionResultItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return portrait of member by ID
		/// ApiMembers_idPortraitGetByCropTypeAndWebVersion api/Members/{id}/Portrait
		/// </summary>
		/// <param name="id">Portrait of Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task ApiMembers_idPortraitGetByCropTypeAndWebVersionAsync(int id, PortraitCropEnum cropType, bool webVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/Portrait?cropType="+cropType+"&webVersion="+webVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return portrait url of member by ID
		/// ApiMembers_idPortraitUrlGet api/Members/{id}/PortraitUrl
		/// </summary>
		/// <param name="id">Portrait url of Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task<StringItem> ApiMembers_idPortraitUrlGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/PortraitUrl";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StringItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return list of registered interests of member by ID
		/// ApiMembers_idRegisteredInterestsGetByHouse api/Members/{id}/RegisteredInterests
		/// </summary>
		/// <param name="id">Registered interests of Member by ID specified</param>
		/// <param name="house">Registered interests of Member by House specified</param>
		/// <returns>Success</returns>
		public async Task<RegisteredInterestCategoryListItem> ApiMembers_idRegisteredInterestsGetByHouseAsync(int id, House house, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/RegisteredInterests?house="+house;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisteredInterestCategoryListItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return list of staff of member by ID
		/// ApiMembers_idStaffGet api/Members/{id}/Staff
		/// </summary>
		/// <param name="id">Staff of Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task<StaffListItem> ApiMembers_idStaffGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/Staff";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StaffListItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return synopsis of member by ID
		/// ApiMembers_idSynopsisGet api/Members/{id}/Synopsis
		/// </summary>
		/// <param name="id">Synopsis of Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task<StringItem> ApiMembers_idSynopsisGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/Synopsis";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StringItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return thumbnail of member by ID
		/// ApiMembers_idThumbnailGet api/Members/{id}/Thumbnail
		/// </summary>
		/// <param name="id">Thumbnail of Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task ApiMembers_idThumbnailGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/Thumbnail";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return thumbnail url of member by ID
		/// ApiMembers_idThumbnailUrlGet api/Members/{id}/ThumbnailUrl
		/// </summary>
		/// <param name="id">Thumbnail url of Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task<StringItem> ApiMembers_idThumbnailUrlGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/ThumbnailUrl";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StringItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return list of votes by member by ID
		/// ApiMembers_idVotingGetByHouseAndPage api/Members/{id}/Voting
		/// </summary>
		/// <param name="id">Votes by Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task<VoteMembersServiceSearchResult> ApiMembers_idVotingGetByHouseAndPageAsync(int id, House house, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/Voting?house="+house+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VoteMembersServiceSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return list of written questions by member by ID
		/// ApiMembers_idWrittenQuestionsGetByPage api/Members/{id}/WrittenQuestions
		/// </summary>
		/// <param name="id">Written questions by Member by ID specified</param>
		/// <returns>Success</returns>
		public async Task<WrittenQuestionMembersServiceSearchResult> ApiMembers_idWrittenQuestionsGetByPageAsync(int id, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Members/"+id+"/WrittenQuestions?page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WrittenQuestionMembersServiceSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of current parties with at least one active member.
		/// ApiPartiesGetActive_houseGet api/Parties/GetActive/{house}
		/// </summary>
		/// <param name="house">Current parties by house</param>
		/// <returns>Success</returns>
		public async Task<PartyMembersServiceSearchResult> ApiPartiesGetActive_houseGetAsync(House house, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Parties/GetActive/"+house;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PartyMembersServiceSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the composition of the House of Lords by peerage type.
		/// ApiPartiesLordsByType_forDateGet api/Parties/LordsByType/{forDate}
		/// </summary>
		/// <param name="forDate">Composition of the Lords for date specified.</param>
		/// <returns>Success</returns>
		public async Task<LordsByTypeMembersServiceSearchResult> ApiPartiesLordsByType_forDateGetAsync(System.DateTimeOffset forDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Parties/LordsByType/"+forDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LordsByTypeMembersServiceSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns current state of parties
		/// ApiPartiesStateOfTheParties_house_forDateGet api/Parties/StateOfTheParties/{house}/{forDate}
		/// </summary>
		/// <param name="house">State of parties in Commons or Lords.</param>
		/// <param name="forDate">State of parties for the date specified</param>
		/// <returns>Success</returns>
		public async Task<PartySeatCountMembersServiceSearchResult> ApiPartiesStateOfTheParties_house_forDateGetAsync(House house, System.DateTimeOffset forDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Parties/StateOfTheParties/"+house+"/"+forDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PartySeatCountMembersServiceSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of departments.
		/// ApiPostsDepartments_typeGet api/Posts/Departments/{type}
		/// </summary>
		/// <param name="type">Departments by type</param>
		/// <returns>Success</returns>
		public async Task<GovernmentDepartment[]> ApiPostsDepartments_typeGetAsync(PostType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Posts/Departments/"+type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GovernmentDepartment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of government posts.
		/// ApiPostsGovernmentPostsGetByDepartmentId api/Posts/GovernmentPosts
		/// </summary>
		/// <param name="departmentId">Government posts by department ID</param>
		/// <returns>Success</returns>
		public async Task<GovernmentOppositionPostItem[]> ApiPostsGovernmentPostsGetByDepartmentIdAsync(int departmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Posts/GovernmentPosts?departmentId="+departmentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GovernmentOppositionPostItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of opposition posts.
		/// ApiPostsOppositionPostsGetByDepartmentId api/Posts/OppositionPosts
		/// </summary>
		/// <param name="departmentId">Opposition posts by department ID</param>
		/// <returns>Success</returns>
		public async Task<GovernmentOppositionPostItem[]> ApiPostsOppositionPostsGetByDepartmentIdAsync(int departmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Posts/OppositionPosts?departmentId="+departmentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GovernmentOppositionPostItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list containing the speaker and deputy speakers.
		/// ApiPostsSpeakerAndDeputies_forDateGet api/Posts/SpeakerAndDeputies/{forDate}
		/// </summary>
		/// <param name="forDate">Speaker and deputy speakers for date specified</param>
		/// <returns>Success</returns>
		public async Task<MemberItem[]> ApiPostsSpeakerAndDeputies_forDateGetAsync(System.DateTimeOffset forDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Posts/SpeakerAndDeputies/"+forDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MemberItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of spokespersons.
		/// ApiPostsSpokespersonsGetByPartyId api/Posts/Spokespersons
		/// </summary>
		/// <param name="partyId">Spokespersons by party ID</param>
		/// <returns>Success</returns>
		public async Task<GovernmentOppositionPostItem[]> ApiPostsSpokespersonsGetByPartyIdAsync(int partyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Posts/Spokespersons?partyId="+partyId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GovernmentOppositionPostItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of answering bodies.
		/// ApiReferenceAnsweringBodiesGetByIdAndNameContains api/Reference/AnsweringBodies
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AnsweringBody[]> ApiReferenceAnsweringBodiesGetByIdAndNameContainsAsync(int id, string nameContains, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Reference/AnsweringBodies?id="+id+"&nameContains=" + (nameContains==null? "" : System.Uri.EscapeDataString(nameContains));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnsweringBody[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of departments.
		/// ApiReferenceDepartmentsGetByIdAndNameContains api/Reference/Departments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GovernmentDepartment[]> ApiReferenceDepartmentsGetByIdAndNameContainsAsync(int id, string nameContains, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Reference/Departments?id="+id+"&nameContains=" + (nameContains==null? "" : System.Uri.EscapeDataString(nameContains));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GovernmentDepartment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns department logo.
		/// ApiReferenceDepartments_idLogoGet api/Reference/Departments/{id}/Logo
		/// </summary>
		/// <param name="id">Logo by department ID</param>
		/// <returns>Success</returns>
		public async Task ApiReferenceDepartments_idLogoGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Reference/Departments/"+id+"/Logo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of policy interest.
		/// ApiReferencePolicyInterestsGet api/Reference/PolicyInterests
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GenericReferenceData[]> ApiReferencePolicyInterestsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Reference/PolicyInterests";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericReferenceData[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
