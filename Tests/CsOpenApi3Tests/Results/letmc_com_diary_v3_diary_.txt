//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Defines a single branch of a client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdvertisingBranchModel
	{
		
		/// <summary>
		/// Branch address line 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		/// <summary>
		/// Branch address line 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		/// <summary>
		/// Branch address line 3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		/// <summary>
		/// Branch address line 4.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		/// <summary>
		/// The relevant company name, if not the one specified on the branch then the one on company.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// County
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string County { get; set; }
		
		/// <summary>
		/// Branch email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EMailAddress { get; set; }
		
		/// <summary>
		/// A unique identifier defining the object and change revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		/// <summary>
		/// Branch fax phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FaxPhone { get; set; }
		
		/// <summary>
		/// Branch land phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LandPhone { get; set; }
		
		/// <summary>
		/// The branch name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique Object ID (OID).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
		
		/// <summary>
		/// Branch address postcode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Postcode { get; set; }
		
		/// <summary>
		/// Branch web address.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WebAddress { get; set; }
	}
	
	/// <summary>
	/// Holds results from a paged query returning BranchModel values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdvertisingBranchModelResults
	{
		
		/// <summary>
		/// The total number of results available for all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// The resulting data returned from the paged query range
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AdvertisingBranchModel[] Data { get; set; }
	}
	
	/// <summary>
	/// Hypermedia Link Class
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BaseHypermediaLink
	{
		
		/// <summary>
		/// The hypermedia href
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		/// <summary>
		/// The http method type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Method { get; set; }
		
		/// <summary>
		/// The hypermedia link relationship to current result object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Relationship { get; set; }
	}
	
	/// <summary>
	/// Submission Model - Structure to submit the appointment details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiaryAppointmentDetails
	{
		
		/// <summary>
		/// Represents a viewing booking slot
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DiaryBookingModel AllocationDetails { get; set; }
		
		/// <summary>
		/// The Appointment Type ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AppointmentType { get; set; }
		
		/// <summary>
		/// Additional appointment comments
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExtraComments { get; set; }
		
		/// <summary>
		/// A collection of guests linked to the appointment. If none leave empty
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DiaryGuestDetails[] Guests { get; set; }
		
		/// <summary>
		/// The subject of the appointment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
	}
	
	/// <summary>
	/// Represents a viewing booking slot
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiaryBookingModel
	{
		
		/// <summary>
		/// The end time of the booking
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		/// <summary>
		/// The unique ID of the staff member this booking is with
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StaffID { get; set; }
		
		/// <summary>
		/// The name of the staff member this booking is with
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StaffName { get; set; }
		
		/// <summary>
		/// The start time of the booking
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
	}
	
	/// <summary>
	/// Submission Model - Structure to submit appointment guest details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiaryGuestDetails
	{
		
		/// <summary>
		/// Marketing Correspondence Preferences
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowMarketingCorrespondence { get; set; }
		
		/// <summary>
		/// Email address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Forename
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Forename { get; set; }
		
		/// <summary>
		/// Mobile phone
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MobilePhone { get; set; }
		
		/// <summary>
		/// The unique identifier of a user, only submit this is known
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
		
		/// <summary>
		/// Surname
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Surname { get; set; }
	}
	
	/// <summary>
	/// Represents a single diary appointment for a staff member.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiaryAppointmentModel
	{
		
		/// <summary>
		/// The diary appointment type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AppointmentType { get; set; }
		
		/// <summary>
		/// Whether the appointment has been cancelled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Cancelled { get; set; }
		
		/// <summary>
		/// The appointment comments text.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Comment { get; set; }
		
		/// <summary>
		/// The date/time this appointment was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// The staff member that created this appointment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		/// <summary>
		/// A unique identifier defining the object and change revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		/// <summary>
		/// The end date/time of this appointment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		/// <summary>
		/// Linked Guest Model:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LinkedGuestModel[] LinkedGuest { get; set; }
		
		/// <summary>
		/// A collection of properties linked to the appointment:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LinkedPropertiesModel[] LinkedProperties { get; set; }
		
		/// <summary>
		/// Date appointment next repeats:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NextRecurringDate { get; set; }
		
		/// <summary>
		/// The unique Object ID (OID).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
		
		/// <summary>
		/// The reccurrence interval for the appointment:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Recurrence { get; set; }
		
		/// <summary>
		/// The type of recurrence:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RecurrenceType { get; set; }
		
		/// <summary>
		/// The date/time to remind the staff member of this appointment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RemindAt { get; set; }
		
		/// <summary>
		/// The number of minutes before the appointment start date/time to remind the staff member. -1 means don't remind.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<DiaryAppointmentModelRemindBefore> RemindBefore { get; set; }
		
		/// <summary>
		/// The staff member holding this appointment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Staff { get; set; }
		
		/// <summary>
		/// The start date/time of this appointment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
		
		/// <summary>
		/// The appointment subject text.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
	}
	
	/// <summary>
	/// Holds information on guests
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkedGuestModel
	{
		
		/// <summary>
		/// Guest Created At:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Guest Email:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// Guest Global Reference:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReference { get; set; }
		
		/// <summary>
		/// Guest Mobile:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Mobile { get; set; }
		
		/// <summary>
		/// Guest Name:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Guest OID:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
	}
	
	/// <summary>
	/// Holds information on linked properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkedPropertiesModel
	{
		
		/// <summary>
		/// Address 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		/// <summary>
		/// Address2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		/// <summary>
		/// Address 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		/// <summary>
		/// Address 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		/// <summary>
		/// Address Flat Room Number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AddressFlatRoomNumber { get; set; }
		
		/// <summary>
		/// Address Number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AddressNumber { get; set; }
		
		/// <summary>
		/// ETag
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		/// <summary>
		/// Holds information on the most recent tenancy linked to the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LatestTenancyModel LatestTenancy { get; set; }
		
		/// <summary>
		/// Holds information on landlords
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LinkedLandlordModel MainLandlord { get; set; }
		
		/// <summary>
		/// OID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
		
		/// <summary>
		/// Postcode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Postcode { get; set; }
	}
	
	/// <summary>
	/// Holds information on the most recent tenancy linked to the property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LatestTenancyModel
	{
		
		/// <summary>
		/// Access Arrangements
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccessArrangements { get; set; }
		
		/// <summary>
		/// Arrange access Mobile 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccessMobile1 { get; set; }
		
		/// <summary>
		/// Arrange access Mobile 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccessMobile2 { get; set; }
		
		/// <summary>
		/// Arrange access Mobile 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccessMobile3 { get; set; }
		
		/// <summary>
		/// Arrange access contact name 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccessName1 { get; set; }
		
		/// <summary>
		/// Arrange access contact name 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccessName2 { get; set; }
		
		/// <summary>
		/// Arrange access contact name 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccessName3 { get; set; }
		
		/// <summary>
		/// ETag
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		/// <summary>
		/// The end date of the Tenancy
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// The fixed date of the Tenancy
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FixedDate { get; set; }
		
		/// <summary>
		/// The unique global reference of the Tenancy
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReference { get; set; }
		
		/// <summary>
		/// Has the Tenancy ended?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTenancyEnded { get; set; }
		
		/// <summary>
		/// Is the tenancy Proposed?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTenancyProposed { get; set; }
		
		/// <summary>
		/// Is the tenancy signed?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTenancySigned { get; set; }
		
		/// <summary>
		/// A collection of tenants linked to the tenancy:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LinkedTenantModel[] LinkedTenants { get; set; }
		
		/// <summary>
		/// OID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
		
		/// <summary>
		/// The start date of the Tenancy
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
	}
	
	/// <summary>
	/// Holds information on tenants
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkedTenantModel
	{
		
		/// <summary>
		/// ETag
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		/// <summary>
		/// Tenant's email address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// Forename
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Forename { get; set; }
		
		/// <summary>
		/// OID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
		
		/// <summary>
		/// Tenant's phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Surname
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Surname { get; set; }
		
		/// <summary>
		/// Title
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Holds information on landlords
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkedLandlordModel
	{
		
		/// <summary>
		/// ETag
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		/// <summary>
		/// Landlord's email address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// Forename
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Forename { get; set; }
		
		/// <summary>
		/// OID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
		
		/// <summary>
		/// Landlord's phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Surname
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Surname { get; set; }
		
		/// <summary>
		/// Title
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DiaryAppointmentModelRemindBefore
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Min")]
		Min = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Min2")]
		Min2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Min5")]
		Min5 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Min10")]
		Min10 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Min15")]
		Min15 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Min30")]
		Min30 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Min45")]
		Min45 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hour")]
		Hour = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hour2")]
		Hour2 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hour3")]
		Hour3 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hour6")]
		Hour6 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hour12")]
		Hour12 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Day")]
		Day = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Day2")]
		Day2 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Day3")]
		Day3 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Week")]
		Week = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NoReminder")]
		NoReminder = 16,
	}
	
	/// <summary>
	/// Holds results from a paged query returning DiaryAppointmentModel values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiaryAppointmentModelResults
	{
		
		/// <summary>
		/// The total number of results available for all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// The resulting data returned from the paged query range
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DiaryAppointmentModel[] Data { get; set; }
	}
	
	/// <summary>
	/// Represents a diary appointment type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiaryAppointmentTypeModel
	{
		
		/// <summary>
		/// A unique identifier defining the object and change revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		/// <summary>
		/// The appointment type name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique Object ID (OID).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
		
		/// <summary>
		/// The appointment system type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<DiaryAppointmentTypeModelSystemType> SystemType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DiaryAppointmentTypeModelSystemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Viewing")]
		Viewing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ViewAndValue")]
		ViewAndValue = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OpeningInspection")]
		OpeningInspection = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InterimInspection")]
		InterimInspection = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ClosingInspection")]
		ClosingInspection = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SalesAppraisal")]
		SalesAppraisal = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Custom")]
		Custom = 6,
	}
	
	/// <summary>
	/// Holds results from a paged query returning DiaryAppointmentTypeModel values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiaryAppointmentTypeModelResults
	{
		
		/// <summary>
		/// The total number of results available for all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// The resulting data returned from the paged query range
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DiaryAppointmentTypeModel[] Data { get; set; }
	}
	
	/// <summary>
	/// Feedback Submission Model:-
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FeedbackSubmissionModel
	{
		
		/// <summary>
		/// Appointment to submit feedback to:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AppointmentID { get; set; }
		
		/// <summary>
		/// Feedback to submit:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Feedback { get; set; }
		
		/// <summary>
		/// Property to submit feedback to:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PropertyID { get; set; }
	}
	
	/// <summary>
	/// Guest Diary Parameters Model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GuestDiaryParametersModel
	{
		
		/// <summary>
		/// Guest Mobile Phone
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContactMobile { get; set; }
		
		/// <summary>
		/// Guest Email Address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Guest Forename
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Forename { get; set; }
		
		/// <summary>
		/// Guest OID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
		
		/// <summary>
		/// Guest Surname
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Surname { get; set; }
	}
	
	/// <summary>
	/// Contacts Person Model Results:-
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GuestDiaryParametersResultsModel
	{
		
		/// <summary>
		/// Results count:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Results data:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GuestDiaryParametersModel[] Data { get; set; }
		
		/// <summary>
		/// Results links:-
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BaseHypermediaLink[] Links { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get a list of all available allocations for a date + 7 days for a specified appointment type
		/// DiaryController_GetAllocations v3/diary/{shortName}/allocations
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="preferredDate">The date to search from</param>
		/// <param name="appointmentType">The unique appointment type identifier</param>
		/// <param name="lettings">Sales or Lettings property?</param>
		/// <param name="propertyIdentifier">The unique property identifier (Sales or Lettings) determines branch and property type</param>
		/// <param name="branchID">Branch ID to check appointments (required if no property submitted)</param>
		/// <returns>OK</returns>
		public async Task<DiaryBookingModel[]> DiaryController_GetAllocationsAsync(string shortName, System.DateTimeOffset preferredDate, string appointmentType, bool lettings, string propertyIdentifier, string branchID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/diary/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/allocations&preferredDate=" + preferredDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&appointmentType=" + (appointmentType==null? "" : System.Uri.EscapeDataString(appointmentType))+"&lettings="+lettings+"&propertyIdentifier=" + (propertyIdentifier==null? "" : System.Uri.EscapeDataString(propertyIdentifier))+"&branchID=" + (branchID==null? "" : System.Uri.EscapeDataString(branchID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DiaryBookingModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an existing appointment using its unique identifier
		/// DiaryController_DeleteAppointment v3/diary/{shortName}/appointment
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="appointmentID">The unique appointment id</param>
		/// <returns>OK</returns>
		public async Task<string> DiaryController_DeleteAppointmentAsync(string shortName, string appointmentID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/diary/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/appointment&appointmentID=" + (appointmentID==null? "" : System.Uri.EscapeDataString(appointmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an appointment by ID
		/// DiaryController_GetAppointment v3/diary/{shortName}/appointment
		/// </summary>
		/// <param name="shortName">Company short name</param>
		/// <param name="appointmentID">Appointment ID</param>
		/// <returns>OK</returns>
		public async Task<DiaryAppointmentModel> DiaryController_GetAppointmentAsync(string shortName, string appointmentID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/diary/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/appointment&appointmentID=" + (appointmentID==null? "" : System.Uri.EscapeDataString(appointmentID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DiaryAppointmentModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post an appointment into a valid diary allocation
		/// DiaryController_PostAppointment v3/diary/{shortName}/appointment
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="propertyIdentifier">The unique property identifier (Sales or Lettings)</param>
		/// <param name="lettings">Sales or Lettings property?</param>
		/// <param name="requestBody">The appointment details model</param>
		/// <returns>OK</returns>
		public async Task<string> DiaryController_PostAppointmentAsync(string shortName, string[] propertyIdentifier, bool lettings, DiaryAppointmentDetails requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/diary/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/appointment&"+string.Join("&", propertyIdentifier.Select(z => $"propertyIdentifier={System.Uri.EscapeDataString(z.ToString())}"))+"&lettings="+lettings;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update an existing appointment using its unique identifier
		/// DiaryController_PutAppointment v3/diary/{shortName}/appointment
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="appointmentID">The unique appointment id</param>
		/// <param name="lettings">Sales or Lettings property?</param>
		/// <param name="AllowMarketingCorrespondence">Sales or Lettings property?</param>
		/// <param name="requestBody">The appointment details model</param>
		/// <returns>OK</returns>
		public async Task<string> DiaryController_PutAppointmentAsync(string shortName, string appointmentID, bool lettings, bool AllowMarketingCorrespondence, DiaryAppointmentDetails requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/diary/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/appointment&appointmentID=" + (appointmentID==null? "" : System.Uri.EscapeDataString(appointmentID))+"&lettings="+lettings+"&AllowMarketingCorrespondence="+AllowMarketingCorrespondence;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Submit appointment feedback
		/// DiaryController_AddFeedback v3/diary/{shortName}/appointment/feedback
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="requestBody">Feedback submission model</param>
		/// <returns>OK</returns>
		public async Task<string> DiaryController_AddFeedbackAsync(string shortName, FeedbackSubmissionModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/diary/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/appointment/feedback";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancel an existing appointment using its unique identifier
		/// DiaryController_CancelAppointment v3/diary/{shortName}/appointment/{appointmentID}/cancel
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="appointmentID">The unique appointment id</param>
		/// <returns>OK</returns>
		public async Task<string> DiaryController_CancelAppointmentAsync(string shortName, string appointmentID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/diary/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/appointment/"+ (appointmentID==null? "" : System.Uri.EscapeDataString(appointmentID))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// A collection of diary appointments linked to a company filtered between specific dates and by appointment type
		/// DiaryController_GetAppointmentsBetweenDates v3/diary/{shortName}/appointmentsbetweendates
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="branchID">The unique ID of the Branch</param>
		/// <param name="startDate">The search from date</param>
		/// <param name="endDate">The search to date</param>
		/// <param name="appointmentTypesToSearch">The appointment IDs to search for</param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="count">The maximum number of items to return (up to 1000 per request)</param>
		/// <returns>OK</returns>
		public async Task<DiaryAppointmentModelResults> DiaryController_GetAppointmentsBetweenDatesAsync(string shortName, string branchID, System.DateTimeOffset startDate, System.DateTimeOffset endDate, string[] appointmentTypesToSearch, int offset, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/diary/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/appointmentsbetweendates&branchID=" + (branchID==null? "" : System.Uri.EscapeDataString(branchID))+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", appointmentTypesToSearch.Select(z => $"appointmentTypesToSearch={System.Uri.EscapeDataString(z.ToString())}"))+"&offset="+offset+"&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DiaryAppointmentModelResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// A collection of all diary appointment types
		/// DiaryController_GetAppointmentTypes v3/diary/{shortName}/appointmenttypes
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="count">The maximum number of items to return (up to 1000 per request)</param>
		/// <returns>OK</returns>
		public async Task<DiaryAppointmentTypeModelResults> DiaryController_GetAppointmentTypesAsync(string shortName, int offset, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/diary/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/appointmenttypes&offset="+offset+"&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DiaryAppointmentTypeModelResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All branches defined for a company
		/// CompanyController_GetBranches v3/diary/{shortName}/company/branches
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="count">The maximum number of items to return (up to 1000 per request)</param>
		/// <returns>OK</returns>
		public async Task<AdvertisingBranchModelResults> CompanyController_GetBranchesAsync(string shortName, int offset, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/diary/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/company/branches&offset="+offset+"&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AdvertisingBranchModelResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific branch given its unique Object ID (OID)
		/// CompanyControllerGetByShortNameAndBranchID v3/diary/{shortName}/company/branches/{branchID}
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="branchID">The unique ID of the Branch</param>
		/// <returns>OK</returns>
		public async Task<AdvertisingBranchModel> CompanyControllerGetByShortNameAndBranchIDAsync(string shortName, string branchID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/diary/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/company/branches/"+ (branchID==null? "" : System.Uri.EscapeDataString(branchID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AdvertisingBranchModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves all recurring appointments:-
		/// DiaryController_GetRecurringAppointments v3/diary/{shortName}/recurringappointment
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="branchID">The unique ID of the Branch</param>
		/// <param name="appointmentTypesToSearch">The appointment IDs to search for</param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="count">The maximum number of items to return (up to 1000 per request)</param>
		/// <returns>OK</returns>
		public async Task<DiaryAppointmentModelResults> DiaryController_GetRecurringAppointmentsAsync(string shortName, string branchID, string[] appointmentTypesToSearch, int offset, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/diary/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/recurringappointment&branchID=" + (branchID==null? "" : System.Uri.EscapeDataString(branchID))+"&"+string.Join("&", appointmentTypesToSearch.Select(z => $"appointmentTypesToSearch={System.Uri.EscapeDataString(z.ToString())}"))+"&offset="+offset+"&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DiaryAppointmentModelResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Match Guest Parameters with existing applicants
		/// DiaryController_SearchGuest v3/diary/{shortname}/{branchID}/guest/search
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GuestDiaryParametersResultsModel> DiaryController_SearchGuestAsync(string shortname, string branchID, string forename, string emailaddress, string surname, int offset, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/diary/"+ (shortname==null? "" : System.Uri.EscapeDataString(shortname))+"/"+ (branchID==null? "" : System.Uri.EscapeDataString(branchID))+"/guest/search&forename=" + (forename==null? "" : System.Uri.EscapeDataString(forename))+"&emailaddress=" + (emailaddress==null? "" : System.Uri.EscapeDataString(emailaddress))+"&surname=" + (surname==null? "" : System.Uri.EscapeDataString(surname))+"&offset="+offset+"&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GuestDiaryParametersResultsModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
