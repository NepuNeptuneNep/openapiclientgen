//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents an audio recording.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Audio
	{
		
		/// <summary>
		/// Audio container types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="container")]
		public AudioContainer Container { get; set; }
		
		/// <summary>
		/// The base64 encoded audio data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Audio encoding formats.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public AudioEncoding Encoding { get; set; }
	}
	
	/// <summary>
	/// Audio container types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AudioContainer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
	}
	
	/// <summary>
	/// Audio encoding formats.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AudioEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_7 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatteryPowerSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	/// <summary>
	/// The company information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Company
	{
		
		/// <summary>
		/// The login ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// The company name
		///            
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="battery")]
		public PowerInfo Battery { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PowerInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batteryLevel")]
		public double BatteryLevel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="powerSource")]
		public BatteryPowerSource PowerSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventLocationData
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Minimum: -6371000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altitude")]
		[System.ComponentModel.DataAnnotations.Range(-6371000, System.Double.MaxValue)]
		public System.Nullable<System.Double> Altitude { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public System.DateTimeOffset Date { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device")]
		public DeviceInfo Device { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 360
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heading")]
		[System.ComponentModel.DataAnnotations.Range(0, 360)]
		public System.Nullable<System.Double> Heading { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizontalAccuracy")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public System.Nullable<System.Double> HorizontalAccuracy { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: -90
		/// Maximum: 90
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		[System.ComponentModel.DataAnnotations.Range(-90, 90)]
		public double Latitude { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: -180
		/// Maximum: 180
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		[System.ComponentModel.DataAnnotations.Range(-180, 180)]
		public double Longitude { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speed")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public System.Nullable<System.Double> Speed { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verticalAccuracy")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public System.Nullable<System.Double> VerticalAccuracy { get; set; }
	}
	
	/// <summary>
	/// The group information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Group
	{
		
		/// <summary>
		/// The group name
		///            
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Language
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	/// <summary>
	/// Location
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// Accuracy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accuracy")]
		public System.Nullable<System.Double> Accuracy { get; set; }
		
		/// <summary>
		/// Address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Altitude
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altitude")]
		public System.Nullable<System.Double> Altitude { get; set; }
		
		/// <summary>
		/// Altitude accuracy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altitudeAccuracy")]
		public System.Nullable<System.Double> AltitudeAccuracy { get; set; }
		
		/// <summary>
		/// Battery level
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="battery")]
		public System.Nullable<System.Double> Battery { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device")]
		public DeviceType Device { get; set; }
		
		/// <summary>
		/// Device name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// Heading
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heading")]
		public System.Nullable<System.Double> Heading { get; set; }
		
		/// <summary>
		/// Latitude
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public double Latitude { get; set; }
		
		/// <summary>
		/// Longitude
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public double Longitude { get; set; }
		
		/// <summary>
		/// Speed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speed")]
		public System.Nullable<System.Double> Speed { get; set; }
		
		/// <summary>
		/// Location time stamp
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	/// <summary>
	/// Actions to perform
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitorAction
	{
		
		/// <summary>
		/// The instructions for the action
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instructions")]
		public string Instructions { get; set; }
		
		/// <summary>
		/// The order of the action
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public int Order { get; set; }
	}
	
	/// <summary>
	/// Contacts
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneBookEntry
	{
		
		/// <summary>
		/// The address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// The cell phone number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cell")]
		public string Cell { get; set; }
		
		/// <summary>
		/// Comments
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// The email address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The first name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Flag to denote if the contact is private
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isPrivate")]
		public bool IsPrivate { get; set; }
		
		/// <summary>
		/// The last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// The order of the contact
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public int Order { get; set; }
		
		/// <summary>
		/// The phone number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
	}
	
	/// <summary>
	/// Phone notification
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneNotification
	{
		
		/// <summary>
		/// The order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public int Order { get; set; }
		
		/// <summary>
		/// The phone number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Privilege
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProblemDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="extensions")]
		public System.Collections.Generic.Dictionary<string, object> Extensions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// User information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// Address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Cell phone number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cell")]
		public string Cell { get; set; }
		
		/// <summary>
		/// Comments
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// The company information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="company")]
		public Company Company { get; set; }
		
		/// <summary>
		/// First name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Full name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		/// <summary>
		/// The group information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public Group Group { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="language")]
		public Language Language { get; set; }
		
		/// <summary>
		/// Last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Notification emails
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notificationEmails")]
		public string[] NotificationEmails { get; set; }
		
		/// <summary>
		/// Notification phone numbers
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notificationPhones")]
		public PhoneNotification[] NotificationPhones { get; set; }
		
		/// <summary>
		/// Phone number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Privileges
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priveleges")]
		public Privilege[] Priveleges { get; set; }
		
		/// <summary>
		/// Satellite device ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="satelliteDeviceId")]
		public string SatelliteDeviceId { get; set; }
		
		/// <summary>
		/// Unique identifier for the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uniqueUserId")]
		public string UniqueUserId { get; set; }
		
		/// <summary>
		/// Vehicle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vehicle")]
		public Vehicle Vehicle { get; set; }
		
		/// <summary>
		/// Information specific to workers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerInformation")]
		public WorkerInfo WorkerInformation { get; set; }
	}
	
	/// <summary>
	/// Vehicle
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Vehicle
	{
		
		/// <summary>
		/// The color
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// The license plate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plate")]
		public string Plate { get; set; }
		
		/// <summary>
		/// The type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Information specific to workers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkerInfo
	{
		
		/// <summary>
		/// Actions to follow for the worker
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public MonitorAction[] Actions { get; set; }
		
		/// <summary>
		/// The worker's itinerary
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="itinerary")]
		public string Itinerary { get; set; }
		
		/// <summary>
		/// Location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLocation")]
		public Location LastLocation { get; set; }
		
		/// <summary>
		/// The worker's maximum report interval
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maximumReportInterval")]
		public string MaximumReportInterval { get; set; }
		
		/// <summary>
		/// The worker's phone book
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneBook")]
		public PhoneBookEntry[] PhoneBook { get; set; }
		
		/// <summary>
		/// The worker's default report interval 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportInterval")]
		public int ReportInterval { get; set; }
		
		/// <summary>
		/// Worker Status information DTO
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public WorkerStatus Status { get; set; }
	}
	
	/// <summary>
	/// Worker Status information DTO
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkerStatus
	{
		
		/// <summary>
		/// The time that the system started monitoring the worker in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beginMonitoringUTC")]
		public System.Nullable<System.DateTimeOffset> BeginMonitoringUTC { get; set; }
		
		/// <summary>
		/// The time that the system stopped monitoring the worker in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endMonitoringUTC")]
		public System.Nullable<System.DateTimeOffset> EndMonitoringUTC { get; set; }
		
		/// <summary>
		/// A flag indicating whether the emergency for the worker has been acknowledged
		///            
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isAcknowledged")]
		public bool IsAcknowledged { get; set; }
		
		/// <summary>
		/// The time the worker last reported OK in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastReportUTC")]
		public System.Nullable<System.DateTimeOffset> LastReportUTC { get; set; }
		
		/// <summary>
		/// The time when the worker's next report is due in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextReportUTC")]
		public System.Nullable<System.DateTimeOffset> NextReportUTC { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public UserState State { get; set; }
		
		/// <summary>
		/// The time of the worker's last state change in UTC
		///            
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateChangedUTC")]
		public System.DateTimeOffset StateChangedUTC { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get the authenticated user
		/// This operation gets the authenticated user's profile.
		/// Api_GetUser api/v2.1/companies/{companyId}/me
		/// </summary>
		/// <returns>The User</returns>
		public async Task<User> Api_GetUserAsync(string companyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the users
		/// This operation gets all the users' profiles.
		/// Api_GetUsers api/v2.1/companies/{companyId}/users
		/// </summary>
		/// <returns>The requested Users</returns>
		public async Task<User[]> Api_GetUsersAsync(string companyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the user's profile
		/// This operation gets the specified user's profile.
		/// Api_GetUser2 api/v2.1/companies/{companyId}/users/{uniqueUserId}
		/// </summary>
		/// <param name="uniqueUserId">The unique user id</param>
		/// <returns>The User</returns>
		public async Task<User> Api_GetUser2Async(string uniqueUserId, string companyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/users/"+ (uniqueUserId==null? "" : System.Uri.EscapeDataString(uniqueUserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check in
		/// This operation checks the worker in for a default time or a custom time if the optional interval is provided.
		/// Api_CheckIn api/v2.1/companies/{companyId}/users/{uniqueUserId}/checkin
		/// </summary>
		/// <param name="uniqueUserId">The unique user id</param>
		/// <param name="interval">The optional check-in interval in minutes</param>
		/// <param name="deviceType">Optional, the device type performing the command.</param>
		/// <returns>The updated User</returns>
		public async Task<User> Api_CheckInAsync(string uniqueUserId, int interval, Api_CheckInDeviceType deviceType, string companyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/users/"+ (uniqueUserId==null? "" : System.Uri.EscapeDataString(uniqueUserId))+"/checkin&interval="+interval+"&deviceType="+deviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check in with an audio recording
		/// This operation checks the worker in for a default time or a custom time if the optional interval is provided, and includes an audio attachment.
		/// Api_CheckInWithAudio api/v2.1/companies/{companyId}/users/{uniqueUserId}/checkin-audio
		/// </summary>
		/// <param name="interval">The optional check-in interval in minutes</param>
		/// <param name="deviceType">Optional, the device type performing the command.</param>
		/// <param name="requestBody">The base 64 encoded audio</param>
		/// <returns>The updated User</returns>
		public async Task<User> Api_CheckInWithAudioAsync(string uniqueUserId, int interval, Api_CheckInWithAudioDeviceType deviceType, string companyId, Audio requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/users/"+ (uniqueUserId==null? "" : System.Uri.EscapeDataString(uniqueUserId))+"/checkin-audio&interval="+interval+"&deviceType="+deviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Check in with a text report
		/// This operation checks the worker in for a default time or a custom time if the optional interval is provided.
		/// Api_CheckInWithText api/v2.1/companies/{companyId}/users/{uniqueUserId}/checkin-text
		/// </summary>
		/// <param name="uniqueUserId">The unique user id</param>
		/// <param name="interval">The optional check-in interval in minutes</param>
		/// <param name="deviceType">Optional, the device type performing the command.</param>
		/// <param name="requestBody">The text report</param>
		/// <returns>The updated User</returns>
		public async Task<User> Api_CheckInWithTextAsync(string uniqueUserId, int interval, Api_CheckInWithTextDeviceType deviceType, string companyId, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/users/"+ (uniqueUserId==null? "" : System.Uri.EscapeDataString(uniqueUserId))+"/checkin-text&interval="+interval+"&deviceType="+deviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Declare an emergency
		/// This operation declares an emergency.
		/// Api_Emergency api/v2.1/companies/{companyId}/users/{uniqueUserId}/emergency
		/// </summary>
		/// <param name="uniqueUserId">The unique user id</param>
		/// <param name="deviceType">Optional, the device type performing the command.</param>
		/// <returns>The updated User</returns>
		public async Task<User> Api_EmergencyAsync(string uniqueUserId, Api_EmergencyDeviceType deviceType, string companyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/users/"+ (uniqueUserId==null? "" : System.Uri.EscapeDataString(uniqueUserId))+"/emergency&deviceType="+deviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Declare an emergency with an audio recording
		/// This operation declares an emergency, and includes an audio attachment.
		/// Api_EmergencyWithAudio api/v2.1/companies/{companyId}/users/{uniqueUserId}/emergency-audio
		/// </summary>
		/// <param name="uniqueUserId">The unique user id</param>
		/// <param name="deviceType">Optional, the device type performing the command.</param>
		/// <param name="requestBody">The base 64 encoded audio</param>
		/// <returns>The updated User</returns>
		public async Task<User> Api_EmergencyWithAudioAsync(string uniqueUserId, Api_EmergencyWithAudioDeviceType deviceType, string companyId, Audio requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/users/"+ (uniqueUserId==null? "" : System.Uri.EscapeDataString(uniqueUserId))+"/emergency-audio&deviceType="+deviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Declare an emergency with a text report
		/// This operation declares an emergency.
		/// Api_EmergencyWithText api/v2.1/companies/{companyId}/users/{uniqueUserId}/emergency-text
		/// </summary>
		/// <param name="uniqueUserId">The unique user id</param>
		/// <param name="deviceType">Optional, the device type performing the command.</param>
		/// <param name="requestBody">The text report</param>
		/// <returns>The updated User</returns>
		public async Task<User> Api_EmergencyWithTextAsync(string uniqueUserId, Api_EmergencyWithTextDeviceType deviceType, string companyId, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/users/"+ (uniqueUserId==null? "" : System.Uri.EscapeDataString(uniqueUserId))+"/emergency-text&deviceType="+deviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// End monitoring
		/// This operation ends monitoring.
		/// Api_End api/v2.1/companies/{companyId}/users/{uniqueUserId}/end
		/// </summary>
		/// <param name="uniqueUserId">The unique user id</param>
		/// <param name="deviceType">Optional, the device type performing the command.</param>
		/// <returns>The updated User</returns>
		public async Task<User> Api_EndAsync(string uniqueUserId, Api_EndDeviceType deviceType, string companyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/users/"+ (uniqueUserId==null? "" : System.Uri.EscapeDataString(uniqueUserId))+"/end&deviceType="+deviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// End monitoring with an audio recording
		/// This operation ends monitoring, and includes an audio attachment.
		/// Api_EndWithAudio api/v2.1/companies/{companyId}/users/{uniqueUserId}/end-audio
		/// </summary>
		/// <param name="uniqueUserId">The unique user id</param>
		/// <param name="deviceType">Optional, the device type performing the command.</param>
		/// <param name="requestBody">The base 64 encoded audio</param>
		/// <returns>The updatedUser</returns>
		public async Task<User> Api_EndWithAudioAsync(string uniqueUserId, Api_EndWithAudioDeviceType deviceType, string companyId, Audio requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/users/"+ (uniqueUserId==null? "" : System.Uri.EscapeDataString(uniqueUserId))+"/end-audio&deviceType="+deviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// End monitoring with a text report
		/// This operation ends monitoring.
		/// Api_EndWithText api/v2.1/companies/{companyId}/users/{uniqueUserId}/end-text
		/// </summary>
		/// <param name="uniqueUserId">The unique user id</param>
		/// <param name="deviceType">Optional, the device type performing the command.</param>
		/// <param name="requestBody">The text report</param>
		/// <returns>The updated User</returns>
		public async Task<User> Api_EndWithTextAsync(string uniqueUserId, Api_EndWithTextDeviceType deviceType, string companyId, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/users/"+ (uniqueUserId==null? "" : System.Uri.EscapeDataString(uniqueUserId))+"/end-text&deviceType="+deviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the itinerary
		/// This operation updates the worker's itinerary.
		/// Api_UpdateItinerary api/v2.1/companies/{companyId}/users/{uniqueUserId}/itinerary
		/// </summary>
		/// <param name="uniqueUserId">The unique user id</param>
		/// <param name="requestBody">The itinerary text</param>
		/// <returns>The updated User</returns>
		public async Task<User> Api_UpdateItineraryAsync(string uniqueUserId, string companyId, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/users/"+ (uniqueUserId==null? "" : System.Uri.EscapeDataString(uniqueUserId))+"/itinerary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Report a location
		/// This operation adds a location to the worker's event history.
		/// Api_ReportLocation api/v2.1/companies/{companyId}/users/{uniqueUserId}/location
		/// </summary>
		/// <param name="uniqueUserId">The unique user id</param>
		/// <param name="deviceType">Optional, the device type performing the command.</param>
		/// <param name="requestBody">The EventLocationData</param>
		/// <returns>The updated User</returns>
		public async Task<User> Api_ReportLocationAsync(string uniqueUserId, Api_ReportLocationDeviceType deviceType, string companyId, EventLocationData requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/users/"+ (uniqueUserId==null? "" : System.Uri.EscapeDataString(uniqueUserId))+"/location&deviceType="+deviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Send a text message
		/// The operation adds a text message to the worker's event history.
		/// Api_ReportText api/v2.1/companies/{companyId}/users/{uniqueUserId}/text
		/// </summary>
		/// <param name="uniqueUserId">The unique user id</param>
		/// <param name="deviceType">Optional, the device type performing the command.</param>
		/// <param name="requestBody">The text to report</param>
		/// <returns>200 for success</returns>
		public async Task Api_ReportTextAsync(string uniqueUserId, Api_ReportTextDeviceType deviceType, string companyId, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2.1/companies/"+ (companyId==null? "" : System.Uri.EscapeDataString(companyId))+"/users/"+ (uniqueUserId==null? "" : System.Uri.EscapeDataString(uniqueUserId))+"/text&deviceType="+deviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Api_CheckInDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
	}
	
	public enum Api_CheckInWithAudioDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
	}
	
	public enum Api_CheckInWithTextDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
	}
	
	public enum Api_EmergencyDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
	}
	
	public enum Api_EmergencyWithAudioDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
	}
	
	public enum Api_EmergencyWithTextDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
	}
	
	public enum Api_EndDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
	}
	
	public enum Api_EndWithAudioDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
	}
	
	public enum Api_EndWithTextDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
	}
	
	public enum Api_ReportLocationDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
	}
	
	public enum Api_ReportTextDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
