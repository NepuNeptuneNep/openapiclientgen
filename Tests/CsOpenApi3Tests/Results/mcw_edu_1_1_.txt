//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnnotatedGeneRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accId")]
		public string AccId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidenceCodes")]
		public string[] EvidenceCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speciesTypeKeys")]
		public int[] SpeciesTypeKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Annotation
	{
		
		[System.Runtime.Serialization.DataMember(Name="annotatedObjectRgdId")]
		public System.Nullable<System.Int32> AnnotatedObjectRgdId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="annotationExtension")]
		public string AnnotationExtension { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aspect")]
		public string Aspect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public System.Nullable<System.Int32> CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataSrc")]
		public string DataSrc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public string Evidence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geneProductFormId")]
		public string GeneProductFormId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public System.Nullable<System.Int32> Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedBy")]
		public System.Nullable<System.Int32> LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectName")]
		public string ObjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectSymbol")]
		public string ObjectSymbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalCreatedDate")]
		public System.Nullable<System.DateTimeOffset> OriginalCreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="qualifier")]
		public string Qualifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refRgdId")]
		public System.Nullable<System.Int32> RefRgdId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relativeTo")]
		public string RelativeTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rgdObjectKey")]
		public System.Nullable<System.Int32> RgdObjectKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speciesTypeKey")]
		public System.Nullable<System.Int32> SpeciesTypeKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="termAcc")]
		public string TermAcc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="withInfo")]
		public string WithInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xrefSource")]
		public string XrefSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnnotationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="evidenceCodes")]
		public string[] EvidenceCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speciesTypeKeys")]
		public int[] SpeciesTypeKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="termAcc")]
		public string TermAcc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Chromosome
	{
		
		[System.Runtime.Serialization.DataMember(Name="chromosome")]
		public string Chromosome1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contigCount")]
		public System.Nullable<System.Int32> ContigCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gapCount")]
		public System.Nullable<System.Int32> GapCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gapLength")]
		public System.Nullable<System.Int32> GapLength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genbankId")]
		public string GenbankId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapKey")]
		public System.Nullable<System.Int32> MapKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ordinalNumber")]
		public System.Nullable<System.Int32> OrdinalNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refseqId")]
		public string RefseqId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seqLength")]
		public System.Nullable<System.Int32> SeqLength { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnrichmentGeneRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accId")]
		public string AccId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geneSymbols")]
		public string[] GeneSymbols { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="species")]
		public string Species { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnrichmentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="aspect")]
		public string Aspect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genes")]
		public string[] Genes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="species")]
		public string Species { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Gene
	{
		
		[System.Runtime.Serialization.DataMember(Name="agrDescription")]
		public string AgrDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ensemblFullName")]
		public string EnsemblFullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ensemblGeneSymbol")]
		public string EnsemblGeneSymbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ensemblGeneType")]
		public string EnsemblGeneType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geneSource")]
		public string GeneSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public System.Nullable<System.Int32> Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergedDescription")]
		public string MergedDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ncbiAnnotStatus")]
		public string NcbiAnnotStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nomenReviewDate")]
		public System.Nullable<System.DateTimeOffset> NomenReviewDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nomenSource")]
		public string NomenSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refSeqStatus")]
		public string RefSeqStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rgdId")]
		public System.Nullable<System.Int32> RgdId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="soAccId")]
		public string SoAccId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speciesTypeKey")]
		public System.Nullable<System.Int32> SpeciesTypeKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variant")]
		public System.Nullable<System.Boolean> Variant { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Map
	{
		
		[System.Runtime.Serialization.DataMember(Name="dbsnpVersion")]
		public string DbsnpVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public System.Nullable<System.Int32> Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="methodKey")]
		public System.Nullable<System.Int32> MethodKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primaryRefAssembly")]
		public System.Nullable<System.Boolean> PrimaryRefAssembly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refSeqAssemblyAcc")]
		public string RefSeqAssemblyAcc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refSeqAssemblyName")]
		public string RefSeqAssemblyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rgdId")]
		public System.Nullable<System.Int32> RgdId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speciesTypeKey")]
		public System.Nullable<System.Int32> SpeciesTypeKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ucscAssemblyId")]
		public string UcscAssemblyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MapPair
	{
		
		[System.Runtime.Serialization.DataMember(Name="keyValue")]
		public string KeyValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MappedGene
	{
		
		[System.Runtime.Serialization.DataMember(Name="chromosome")]
		public string Chromosome { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gene")]
		public Gene Gene { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapKey")]
		public System.Nullable<System.Int32> MapKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int64> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop")]
		public System.Nullable<System.Int64> Stop { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strand")]
		public string Strand { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MappedGenePosition
	{
		
		[System.Runtime.Serialization.DataMember(Name="chromosome")]
		public string Chromosome { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapKey")]
		public System.Nullable<System.Int32> MapKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rgdId")]
		public System.Nullable<System.Int32> RgdId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int64> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop")]
		public System.Nullable<System.Int64> Stop { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strand")]
		public string Strand { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MappedQTL
	{
		
		[System.Runtime.Serialization.DataMember(Name="chromosome")]
		public string Chromosome { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapKey")]
		public System.Nullable<System.Int32> MapKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="qtl")]
		public QTL Qtl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int64> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop")]
		public System.Nullable<System.Int64> Stop { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strand")]
		public string Strand { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QTL
	{
		
		[System.Runtime.Serialization.DataMember(Name="chromosome")]
		public string Chromosome { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flank1RgdId")]
		public System.Nullable<System.Int32> Flank1RgdId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flank2RgdId")]
		public System.Nullable<System.Int32> Flank2RgdId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inheritanceType")]
		public string InheritanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public System.Nullable<System.Int32> Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkageImage")]
		public string LinkageImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lod")]
		public System.Nullable<System.Double> Lod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lodImage")]
		public string LodImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mostSignificantCmoTerm")]
		public string MostSignificantCmoTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="peakOffset")]
		public System.Nullable<System.Int32> PeakOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="peakRgdId")]
		public System.Nullable<System.Int32> PeakRgdId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvalue")]
		public System.Nullable<System.Double> Pvalue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rgdId")]
		public System.Nullable<System.Int32> RgdId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceUrl")]
		public string SourceUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speciesTypeKey")]
		public System.Nullable<System.Int32> SpeciesTypeKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variance")]
		public System.Nullable<System.Double> Variance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MappedSSLP
	{
		
		[System.Runtime.Serialization.DataMember(Name="chromosome")]
		public string Chromosome { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapKey")]
		public System.Nullable<System.Int32> MapKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sslp")]
		public SSLP Sslp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int64> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop")]
		public System.Nullable<System.Int64> Stop { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strand")]
		public string Strand { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SSLP
	{
		
		[System.Runtime.Serialization.DataMember(Name="expectedSize")]
		public System.Nullable<System.Int32> ExpectedSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forwardSeq")]
		public string ForwardSeq { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public System.Nullable<System.Int32> Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reverseSeq")]
		public string ReverseSeq { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rgdId")]
		public System.Nullable<System.Int32> RgdId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speciesTypeKey")]
		public System.Nullable<System.Int32> SpeciesTypeKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sslpType")]
		public string SslpType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateSeq")]
		public string TemplateSeq { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrthologRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="rgdIds")]
		public int[] RgdIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speciesTypeKeys")]
		public int[] SpeciesTypeKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pathway
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasAlteredPath")]
		public string HasAlteredPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectList")]
		public PathwayObject[] ObjectList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pathwayCategories")]
		public string[] PathwayCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referenceList")]
		public Reference[] ReferenceList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathwayObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="accId")]
		public string AccId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objDesc")]
		public string ObjDesc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objName")]
		public string ObjName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeName")]
		public string TypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xdb_key")]
		public System.Nullable<System.Int32> Xdb_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Reference
	{
		
		[System.Runtime.Serialization.DataMember(Name="citation")]
		public string Citation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="doi")]
		public string Doi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editors")]
		public string Editors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issue")]
		public string Issue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public System.Nullable<System.Int32> Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public string Pages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pubDate")]
		public System.Nullable<System.DateTimeOffset> PubDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pubStatus")]
		public string PubStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publication")]
		public string Publication { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publisherCity")]
		public string PublisherCity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refAbstract")]
		public string RefAbstract { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referenceType")]
		public string ReferenceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rgdId")]
		public System.Nullable<System.Int32> RgdId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speciesTypeKey")]
		public System.Nullable<System.Int32> SpeciesTypeKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlWebReference")]
		public string UrlWebReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volume")]
		public string Volume { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RGDIDListRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="rgdIds")]
		public int[] RgdIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		[System.Runtime.Serialization.DataMember(Name="cryopreservedEmbryo")]
		public System.Nullable<System.Boolean> CryopreservedEmbryo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cryopreservedSperm")]
		public System.Nullable<System.Boolean> CryopreservedSperm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cryorecovery")]
		public System.Nullable<System.Boolean> Cryorecovery { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public System.Nullable<System.Int32> Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="liveAnimals")]
		public System.Nullable<System.Boolean> LiveAnimals { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusDate")]
		public System.Nullable<System.DateTimeOffset> StatusDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strainRgdId")]
		public System.Nullable<System.Int32> StrainRgdId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Strain
	{
		
		[System.Runtime.Serialization.DataMember(Name="backgroundStrainRgdId")]
		public System.Nullable<System.Int32> BackgroundStrainRgdId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chrAltered")]
		public string ChrAltered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geneticStatus")]
		public string GeneticStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genetics")]
		public string Genetics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inbredGen")]
		public string InbredGen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public System.Nullable<System.Int32> Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStatus")]
		public string LastStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStatusObject")]
		public Status LastStatusObject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modificationMethod")]
		public string ModificationMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="researchUse")]
		public string ResearchUse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rgdId")]
		public System.Nullable<System.Int32> RgdId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speciesTypeKey")]
		public System.Nullable<System.Int32> SpeciesTypeKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusLog")]
		public Status[] StatusLog { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strain")]
		public string Strain1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strainTypeName")]
		public string StrainTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="substrain")]
		public string Substrain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Term
	{
		
		[System.Runtime.Serialization.DataMember(Name="accId")]
		public string AccId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public string Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modificationDate")]
		public System.Nullable<System.DateTimeOffset> ModificationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="obsolete")]
		public System.Nullable<System.Int32> Obsolete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ontologyId")]
		public string OntologyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xrefs")]
		public TermXRef[] Xrefs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TermXRef
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public System.Nullable<System.Int32> Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="termAcc")]
		public string TermAcc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xrefDescription")]
		public string XrefDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xrefValue")]
		public string XrefValue { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get affected genomic models (rat strains with gene alleles) submitted by RGD to AGR by taxonId
		/// GetAffectedGenomicModelsUsingGET agr/affectedGenomicModels/{taxonId}
		/// </summary>
		/// <param name="taxonId">The taxon ID for species</param>
		/// <returns>OK</returns>
		public async Task GetAffectedGenomicModelsUsingGETAsync(string taxonId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "agr/affectedGenomicModels/"+ (taxonId==null? "" : System.Uri.EscapeDataString(taxonId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get gene allele records submitted by RGD to AGR by taxonId
		/// GetAllelesForTaxonUsingGET agr/alleles/{taxonId}
		/// </summary>
		/// <param name="taxonId">The taxon ID for species</param>
		/// <returns>OK</returns>
		public async Task GetAllelesForTaxonUsingGETAsync(string taxonId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "agr/alleles/"+ (taxonId==null? "" : System.Uri.EscapeDataString(taxonId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get expression annotations submitted by RGD to AGR by taxonId
		/// GetExpressionForTaxonUsingGET agr/expression/{taxonId}
		/// </summary>
		/// <param name="taxonId">The taxon ID for species</param>
		/// <returns>OK</returns>
		public async Task GetExpressionForTaxonUsingGETAsync(string taxonId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "agr/expression/"+ (taxonId==null? "" : System.Uri.EscapeDataString(taxonId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get phenotype annotations submitted by RGD to AGR by taxonId
		/// GetPhenotypesForTaxonUsingGET agr/phenotypes/{taxonId}
		/// </summary>
		/// <param name="taxonId">The taxon ID for species</param>
		/// <returns>OK</returns>
		public async Task GetPhenotypesForTaxonUsingGETAsync(string taxonId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "agr/phenotypes/"+ (taxonId==null? "" : System.Uri.EscapeDataString(taxonId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get basic variant records submitted by RGD to AGR by taxonId
		/// GetVariantsForTaxonUsingGET agr/variants/{taxonId}
		/// </summary>
		/// <param name="taxonId">The taxon ID for species</param>
		/// <returns>OK</returns>
		public async Task GetVariantsForTaxonUsingGETAsync(string taxonId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "agr/variants/"+ (taxonId==null? "" : System.Uri.EscapeDataString(taxonId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get gene records submitted by RGD to AGR by taxonId
		/// GetGenesForLatestAssemblyUsingGET agr/{taxonId}
		/// </summary>
		/// <param name="taxonId">The taxon ID for species</param>
		/// <returns>OK</returns>
		public async Task GetGenesForLatestAssemblyUsingGETAsync(string taxonId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "agr/"+ (taxonId==null? "" : System.Uri.EscapeDataString(taxonId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of genes annotated to an ontology term
		/// GetAnnotationsUsingPOST annotations/
		/// </summary>
		/// <param name="requestBody">data</param>
		/// <returns>OK</returns>
		public async Task GetAnnotationsUsingPOSTAsync(AnnotationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotations/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list ontology term accession IDs annotated to an rgd object
		/// GetTermAccIdsUsingGET annotations/accId/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetTermAccIdsUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotations/accId/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns annotation count for ontology accession ID
		/// GetAnnotationCountByAccIdUsingGET annotations/count/{accId}/{includeChildren}
		/// </summary>
		/// <param name="accId">Ontology term accession ID</param>
		/// <param name="includeChildren">true: return annotations for the term and children, false: return annotations for the term only </param>
		/// <returns>OK</returns>
		public async Task GetAnnotationCountByAccIdUsingGETAsync(string accId, bool includeChildren, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotations/count/"+ (accId==null? "" : System.Uri.EscapeDataString(accId))+"/"+includeChildren;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns annotation count for ontology accession ID and speicies
		/// GetAnnotationCountByAccIdAndSpeciesUsingGET annotations/count/{accId}/{speciesTypeKey}/{includeChildren}
		/// </summary>
		/// <param name="accId">Ontology term accession ID</param>
		/// <param name="speciesTypeKey">A list of species type keys can be found using the lookup service</param>
		/// <param name="includeChildren">true: return annotations for the term and children, false: return annotations for the term only </param>
		/// <returns>OK</returns>
		public async Task GetAnnotationCountByAccIdAndSpeciesUsingGETAsync(string accId, int speciesTypeKey, bool includeChildren, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotations/count/"+ (accId==null? "" : System.Uri.EscapeDataString(accId))+"/"+speciesTypeKey+"/"+includeChildren;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns annotation count for ontology accession ID and object type
		/// GetAnnotationCountByAccIdAndObjectTypeUsingGET annotations/count/{accId}/{speciesTypeKey}/{includeChildren}/{objectType}
		/// </summary>
		/// <param name="accId">Ontology term accession ID</param>
		/// <param name="speciesTypeKey">A list of species type keys can be found using the lookup service</param>
		/// <param name="includeChildren">true: return annotations for the term and children, false: return annotations for the term only </param>
		/// <param name="objectType">A list of object types can be found using the lookup service</param>
		/// <returns>OK</returns>
		public async Task GetAnnotationCountByAccIdAndObjectTypeUsingGETAsync(string accId, int speciesTypeKey, bool includeChildren, int objectType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotations/count/"+ (accId==null? "" : System.Uri.EscapeDataString(accId))+"/"+speciesTypeKey+"/"+includeChildren+"/"+objectType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of annotations for a reference
		/// GetAnnotsByRefrerenceUsingGET annotations/reference/{refRgdId}
		/// </summary>
		/// <param name="refRgdId">Reference RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetAnnotsByRefrerenceUsingGETAsync(int refRgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotations/reference/"+refRgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of annotations by RGD ID
		/// GetAnnotationsByRgdIdUsingGET annotations/rgdId/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetAnnotationsByRgdIdUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotations/rgdId/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of annotations by RGD ID and ontology prefix
		/// GetAnnotationsByRgdIdAndOntologyUsingGET annotations/rgdId/{rgdId}/{ontologyPrefix}
		/// </summary>
		/// <param name="rgdId">RGD ID</param>
		/// <param name="ontologyPrefix">Ontology Prefix.  The prefix can be found left of the semicolon in an ontology term accession ID.  As an example, term accession PW:0000034 has the ontology prefix PW</param>
		/// <returns>OK</returns>
		public async Task GetAnnotationsByRgdIdAndOntologyUsingGETAsync(int rgdId, string ontologyPrefix, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotations/rgdId/"+rgdId+"/"+ (ontologyPrefix==null? "" : System.Uri.EscapeDataString(ontologyPrefix));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of annotations by RGD ID and ontology term accession ID
		/// GetAnnotationsByAccIdAndRgdIdUsingGET annotations/{accId}/{rgdId}
		/// </summary>
		/// <param name="accId">Ontology Term Accession ID</param>
		/// <param name="rgdId">RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetAnnotationsByAccIdAndRgdIdUsingGETAsync(string accId, int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotations/"+ (accId==null? "" : System.Uri.EscapeDataString(accId))+"/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list annotations for an ontology term or a term and it's children
		/// GetAnnotationsUsingGET annotations/{accId}/{speciesTypeKey}/{includeChildren}
		/// </summary>
		/// <param name="accId">Ontology term accession ID</param>
		/// <param name="speciesTypeKey">A list of species type keys can be found using the lookup service</param>
		/// <param name="includeChildren">true: return annotations for the term and children, false: return annotations for the term only </param>
		/// <returns>OK</returns>
		public async Task GetAnnotationsUsingGETAsync(string accId, int speciesTypeKey, bool includeChildren, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotations/"+ (accId==null? "" : System.Uri.EscapeDataString(accId))+"/"+speciesTypeKey+"/"+includeChildren;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of genes annotated to the term.Genes are rgdids separated by comma.Species type is an integer value.term is the ontology
		/// GetEnrichmentDataUsingPOST enrichment/annotatedGenes
		/// </summary>
		/// <param name="requestBody">geneRequest</param>
		/// <returns>OK</returns>
		public async Task GetEnrichmentDataUsingPOSTAsync(EnrichmentGeneRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enrichment/annotatedGenes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Return a chart of ontology terms annotated to the genes.Genes are rgdids separated by comma.Species type is an integer value.Aspect is the Ontology group
		/// GetEnrichmentDataUsingPOST_1 enrichment/data
		/// </summary>
		/// <param name="requestBody">enrichmentRequest</param>
		/// <returns>OK</returns>
		public async Task GetEnrichmentDataUsingPOST_1Async(EnrichmentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enrichment/data";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Return a list of genes for an affymetrix ID
		/// GetGenesByAffyIdUsingGET genes/affyId/{affyId}/{speciesTypeKey}
		/// </summary>
		/// <param name="affyId">Affymetrix ID</param>
		/// <param name="speciesTypeKey">A list of RGD species type keys can be found in the lookup service</param>
		/// <returns>OK</returns>
		public async Task GetGenesByAffyIdUsingGETAsync(string affyId, int speciesTypeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/affyId/"+ (affyId==null? "" : System.Uri.EscapeDataString(affyId))+"/"+speciesTypeKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of genes for an alias and species
		/// GetGenesByAliasSymbolUsingGET genes/alias/{aliasSymbol}/{speciesTypeKey}
		/// </summary>
		/// <param name="aliasSymbol">Gene alias symbol</param>
		/// <param name="speciesTypeKey">A list of RGD species type keys can be found in the lookup service</param>
		/// <returns>OK</returns>
		public async Task GetGenesByAliasSymbolUsingGETAsync(string aliasSymbol, int speciesTypeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/alias/"+ (aliasSymbol==null? "" : System.Uri.EscapeDataString(aliasSymbol))+"/"+speciesTypeKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of gene alleles
		/// GetGeneAllelesUsingGET genes/allele/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID of gene</param>
		/// <returns>OK</returns>
		public async Task GetGeneAllelesUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/allele/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of genes annotated to an ontology term
		/// GetAnnotatedGenesUsingPOST genes/annotation
		/// </summary>
		/// <param name="requestBody">data</param>
		/// <returns>OK</returns>
		public async Task GetAnnotatedGenesUsingPOSTAsync(AnnotatedGeneRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/annotation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Return a list of genes annotated to an ontology term
		/// GetAllAnnotatedGenesUsingGET genes/annotation/{accId}
		/// </summary>
		/// <param name="accId">Accesstion ID</param>
		/// <returns>OK</returns>
		public async Task GetAllAnnotatedGenesUsingGETAsync(string accId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/annotation/"+ (accId==null? "" : System.Uri.EscapeDataString(accId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of genes annotated to an ontology term
		/// GetGenesAnnotatedUsingGET genes/annotation/{accId}/{speciesTypeKey}
		/// </summary>
		/// <param name="accId">Ontology term accession ID</param>
		/// <param name="speciesTypeKey">Species type key.  A list of species type keys can be found in the lookup service</param>
		/// <returns>OK</returns>
		public async Task GetGenesAnnotatedUsingGETAsync(string accId, int speciesTypeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/annotation/"+ (accId==null? "" : System.Uri.EscapeDataString(accId))+"/"+speciesTypeKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of genes by keyword and species type key
		/// GetGenesByKeywordUsingGET genes/keyword/{keyword}/{speciesTypeKey}
		/// </summary>
		/// <param name="keyword">Search keyword</param>
		/// <param name="speciesTypeKey">Species type key.  A list of species type keys can be found in the lookup service</param>
		/// <returns>OK</returns>
		public async Task GetGenesByKeywordUsingGETAsync(string keyword, int speciesTypeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/keyword/"+ (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"/"+speciesTypeKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of all genes with position information for an assembly
		/// GetGeneByMapKeyUsingGET genes/map/{mapKey}
		/// </summary>
		/// <param name="mapKey">A list of RGD assembly map keys can be found in the lookup service</param>
		/// <returns>OK</returns>
		public async Task GetGeneByMapKeyUsingGETAsync(int mapKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/map/"+mapKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of genes position and map key
		/// GetMappedGenesByPositionUsingGET genes/mapped/{chr}/{start}/{stop}/{mapKey}
		/// </summary>
		/// <param name="chr">Chromosome</param>
		/// <param name="start">Start Position</param>
		/// <param name="stop">Stop Position</param>
		/// <param name="mapKey">A list of RGD assembly map keys can be found in the lookup service</param>
		/// <returns>OK</returns>
		public async Task GetMappedGenesByPositionUsingGETAsync(string chr, long start, long stop, int mapKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/mapped/"+ (chr==null? "" : System.Uri.EscapeDataString(chr))+"/"+start+"/"+stop+"/"+mapKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of gene orthologs
		/// GetOrthologsByListUsingPOST genes/orthologs
		/// </summary>
		/// <param name="requestBody">orthologRequest</param>
		/// <returns>OK</returns>
		public async Task GetOrthologsByListUsingPOSTAsync(OrthologRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/orthologs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Return a list of gene orthologs
		/// GetGeneOrthologsUsingGET genes/orthologs/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID of a gene</param>
		/// <returns>OK</returns>
		public async Task GetGeneOrthologsUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/orthologs/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of genes in region
		/// GetGenesInRegionUsingGET genes/region/{chr}/{start}/{stop}/{mapKey}
		/// </summary>
		/// <param name="chr">Chromosome</param>
		/// <param name="start">Start Position</param>
		/// <param name="stop">Stop Position</param>
		/// <param name="mapKey">A list of RGD assembly map keys can be found in the lookup service</param>
		/// <returns>OK</returns>
		public async Task GetGenesInRegionUsingGETAsync(string chr, long start, long stop, int mapKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/region/"+ (chr==null? "" : System.Uri.EscapeDataString(chr))+"/"+start+"/"+stop+"/"+mapKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of all genes for a species in RGD
		/// GetGenesBySpeciesUsingGET genes/species/{speciesTypeKey}
		/// </summary>
		/// <param name="speciesTypeKey">A list of RGD species type keys can be found in the lookup service</param>
		/// <returns>OK</returns>
		public async Task GetGenesBySpeciesUsingGETAsync(int speciesTypeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/species/"+speciesTypeKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of genes position and map key
		/// GetGenesByPositionUsingGET genes/{chr}/{start}/{stop}/{mapKey}
		/// </summary>
		/// <param name="chr">Chromosome</param>
		/// <param name="start">Start Position</param>
		/// <param name="stop">Stop Position</param>
		/// <param name="mapKey">A list of RGD assembly map keys can be found in the lookup service</param>
		/// <returns>OK</returns>
		public async Task GetGenesByPositionUsingGETAsync(string chr, long start, long stop, int mapKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/"+ (chr==null? "" : System.Uri.EscapeDataString(chr))+"/"+start+"/"+stop+"/"+mapKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a gene record by RGD ID
		/// GetGeneByRgdIdUsingGET genes/{rgdId}
		/// </summary>
		/// <param name="rgdId">The RGD ID of a Gene in RGD</param>
		/// <returns>OK</returns>
		public async Task GetGeneByRgdIdUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a gene record by symbol and species type key
		/// GetGeneBySymbolUsingGET genes/{symbol}/{speciesTypeKey}
		/// </summary>
		/// <param name="symbol">Gene Symbol</param>
		/// <param name="speciesTypeKey">Species type key.  A list of species type keys can be found in the lookup service</param>
		/// <returns>OK</returns>
		public async Task GetGeneBySymbolUsingGETAsync(string symbol, int speciesTypeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "genes/"+ (symbol==null? "" : System.Uri.EscapeDataString(symbol))+"/"+speciesTypeKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of gene types avialable in RGD
		/// GetGeneTypesUsingGET lookup/geneTypes
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetGeneTypesUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/geneTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Translate RGD IDs to Ensembl Gene IDs
		/// GetEnsemblGeneMappingUsingPOST lookup/id/map/EnsemblGene
		/// </summary>
		/// <param name="requestBody">data</param>
		/// <returns>OK</returns>
		public async Task GetEnsemblGeneMappingUsingPOSTAsync(RGDIDListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/EnsemblGene";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Translate an RGD ID to an Ensembl Gene  ID
		/// GetEnsemblGeneMappingUsingGET lookup/id/map/EnsemblGene/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetEnsemblGeneMappingUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/EnsemblGene/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Translate RGD IDs to Ensembl Protein IDs
		/// GetEnsemblProteinMappingUsingPOST lookup/id/map/EnsemblProtein
		/// </summary>
		/// <param name="requestBody">data</param>
		/// <returns>OK</returns>
		public async Task GetEnsemblProteinMappingUsingPOSTAsync(RGDIDListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/EnsemblProtein";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Translate an RGD ID to an Ensembl Protein ID
		/// GetEnsemblProteinMappingUsingGET lookup/id/map/EnsemblProtein/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetEnsemblProteinMappingUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/EnsemblProtein/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Translate RGD IDs to Ensembl Transcript IDs
		/// GetEnsemblTranscriptMappingUsingPOST lookup/id/map/EnsemblTranscript
		/// </summary>
		/// <param name="requestBody">data</param>
		/// <returns>OK</returns>
		public async Task GetEnsemblTranscriptMappingUsingPOSTAsync(RGDIDListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/EnsemblTranscript";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Translate an RGD ID to an Ensembl Transcript ID
		/// GetEnsemblTranscriptMappingUsingGET lookup/id/map/EnsemblTranscript/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetEnsemblTranscriptMappingUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/EnsemblTranscript/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Translate RGD IDs to GTEx IDs
		/// GetGTEXMappingUsingPOST lookup/id/map/GTEx
		/// </summary>
		/// <param name="requestBody">data</param>
		/// <returns>OK</returns>
		public async Task GetGTEXMappingUsingPOSTAsync(RGDIDListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/GTEx";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Translate an RGD ID to an GTEx ID
		/// GetGTEXMappingUsingGET lookup/id/map/GTEx/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetGTEXMappingUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/GTEx/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Translate RGD IDs to GenBank Nucleotide IDs
		/// GetGenBankNucleotideMappingUsingPOST lookup/id/map/GenBankNucleotide
		/// </summary>
		/// <param name="requestBody">data</param>
		/// <returns>OK</returns>
		public async Task GetGenBankNucleotideMappingUsingPOSTAsync(RGDIDListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/GenBankNucleotide";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Translate an RGD ID to a GenBank Nucleotide ID
		/// GetGenBankNucleotideMappingUsingGET lookup/id/map/GenBankNucleotide/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetGenBankNucleotideMappingUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/GenBankNucleotide/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Translate RGD IDs to GenBank Protein IDs
		/// GetGenBankProteinMappingUsingPOST lookup/id/map/GenBankProtein
		/// </summary>
		/// <param name="requestBody">data</param>
		/// <returns>OK</returns>
		public async Task GetGenBankProteinMappingUsingPOSTAsync(RGDIDListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/GenBankProtein";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Translate an RGD ID to a GenBank Protein ID
		/// GetGenBankProteinMappingUsingGET lookup/id/map/GenBankProtein/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetGenBankProteinMappingUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/GenBankProtein/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Translate RGD IDs to HGNC IDs
		/// GetHGNCMappingUsingPOST lookup/id/map/HGNC
		/// </summary>
		/// <param name="requestBody">data</param>
		/// <returns>OK</returns>
		public async Task GetHGNCMappingUsingPOSTAsync(RGDIDListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/HGNC";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Translate an RGD ID to an HGNC ID
		/// GetHGNCMappingUsingGET lookup/id/map/HGNC/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetHGNCMappingUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/HGNC/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Translate RGD IDs to MGI IDs
		/// GetMGIMappingUsingPOST lookup/id/map/MGI
		/// </summary>
		/// <param name="requestBody">data</param>
		/// <returns>OK</returns>
		public async Task GetMGIMappingUsingPOSTAsync(RGDIDListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/MGI";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Translate an RGD ID to an MGI ID
		/// GetMGIMappingUsingGET lookup/id/map/MGI/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetMGIMappingUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/MGI/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Translate RGD IDs to NCBI Gene IDs
		/// GetNCBIGeneMappingUsingPOST lookup/id/map/NCBIGene
		/// </summary>
		/// <param name="requestBody">data</param>
		/// <returns>OK</returns>
		public async Task GetNCBIGeneMappingUsingPOSTAsync(RGDIDListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/NCBIGene";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Translate an RGD ID to an NCBI Gene ID
		/// GetNCBIGeneMappingUsingGET lookup/id/map/NCBIGene/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetNCBIGeneMappingUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/NCBIGene/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Translate RGD IDs to UniProt IDs
		/// GetUniProtMappingUsingPOST lookup/id/map/UniProt
		/// </summary>
		/// <param name="requestBody">data</param>
		/// <returns>OK</returns>
		public async Task GetUniProtMappingUsingPOSTAsync(RGDIDListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/UniProt";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Translate an RGD ID to a UniProt ID
		/// GetUniProtMappingUsingGET lookup/id/map/UniProt/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetUniProtMappingUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/id/map/UniProt/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list assembly maps for a species
		/// GetMapsUsingGET lookup/maps/{speciesTypeKey}
		/// </summary>
		/// <param name="speciesTypeKey">RGD species type key. A full list of keys is available throught the lookup service.  1=human, 2=mouse, 3=rat,ect</param>
		/// <returns>OK</returns>
		public async Task GetMapsUsingGETAsync(int speciesTypeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/maps/"+speciesTypeKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a Map of species type keys available in RGD
		/// GetSpeciesTypesUsingGET lookup/speciesTypeKeys
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetSpeciesTypesUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/speciesTypeKeys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a standardUnit for an ontology if it exists
		/// GetMapsUsingGET_1 lookup/standardUnit/{accId}
		/// </summary>
		/// <param name="accId">RGD term acc</param>
		/// <returns>OK</returns>
		public async Task GetMapsUsingGET_1Async(string accId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lookup/standardUnit/"+ (accId==null? "" : System.Uri.EscapeDataString(accId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of chromosomes
		/// GetChromosomeByAssemblyUsingGET maps/chr/{chromosome}/{mapKey}
		/// </summary>
		/// <param name="chromosome">chromosome</param>
		/// <param name="mapKey">mapKey</param>
		/// <returns>OK</returns>
		public async Task GetChromosomeByAssemblyUsingGETAsync(string chromosome, int mapKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/chr/"+ (chromosome==null? "" : System.Uri.EscapeDataString(chromosome))+"/"+mapKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of chromosomes
		/// GetChromosomesByAssemblyUsingGET maps/chr/{mapKey}
		/// </summary>
		/// <param name="mapKey">mapKey</param>
		/// <returns>OK</returns>
		public async Task GetChromosomesByAssemblyUsingGETAsync(int mapKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/chr/"+mapKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of assemblies
		/// GetMapsBySpeciesUsingGET maps/{speciesTypeKey}
		/// </summary>
		/// <param name="speciesTypeKey">species Key</param>
		/// <returns>OK</returns>
		public async Task GetMapsBySpeciesUsingGETAsync(int speciesTypeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maps/"+speciesTypeKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns child and parent terms for Accession ID
		/// GetOntDagsUsingGET ontology/ont/{accId}
		/// </summary>
		/// <param name="accId">Accession ID</param>
		/// <returns>OK</returns>
		public async Task GetOntDagsUsingGETAsync(string accId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ontology/ont/"+ (accId==null? "" : System.Uri.EscapeDataString(accId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns true or false for terms
		/// IsDescendantOfUsingGET ontology/term/{accId1}/{accId2}
		/// </summary>
		/// <param name="accId1">Child Term Accession ID</param>
		/// <param name="accId2">Parent Term Accession ID</param>
		/// <returns>OK</returns>
		public async Task IsDescendantOfUsingGETAsync(string accId1, string accId2, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ontology/term/"+ (accId1==null? "" : System.Uri.EscapeDataString(accId1))+"/"+ (accId2==null? "" : System.Uri.EscapeDataString(accId2));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns term for Accession ID
		/// GetTermUsingGET ontology/term/{accId}
		/// </summary>
		/// <param name="accId">Term Accession ID</param>
		/// <returns>OK</returns>
		public async Task GetTermUsingGETAsync(string accId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ontology/term/"+ (accId==null? "" : System.Uri.EscapeDataString(accId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of pathways based on search term
		/// SearchPathwaysUsingGET pathways/diagrams/search/{searchString}
		/// </summary>
		/// <param name="searchString">Free text search string</param>
		/// <returns>OK</returns>
		public async Task SearchPathwaysUsingGETAsync(string searchString, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pathways/diagrams/search/"+ (searchString==null? "" : System.Uri.EscapeDataString(searchString));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of pathways based on category provided
		/// GetPathwaysWithDiagramsForCategoryUsingGET pathways/diagramsForCategory/{category}
		/// </summary>
		/// <param name="category">Pathway Category</param>
		/// <returns>OK</returns>
		public async Task GetPathwaysWithDiagramsForCategoryUsingGETAsync(string category, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pathways/diagramsForCategory/"+ (category==null? "" : System.Uri.EscapeDataString(category));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of quantitative phenotypes values based on a combination of Clinical Measurement, Experimental Condition, Rat Strain, and/or Measurement Method ontology terms.  Results will be all records that match all terms submitted.  Ontology ids should be submitted as a comma delimited list (ex. RS:0000029,CMO:0000155,CMO:0000139).  Species type is an integer value (3=rat, 4=chinchilla).  Reference RGD ID for a study works like a filter.
		/// GetChartInfoUsingGET phenotype/phenominer/chart/{speciesTypeKey}/{refRgdId}/{termString}
		/// </summary>
		/// <param name="speciesTypeKey">Species Type Key - 3=rat 4=chinchilla </param>
		/// <param name="refRgdId">Reference RGD ID for a study</param>
		/// <param name="termString">List of term accession IDs</param>
		/// <returns>OK</returns>
		public async Task GetChartInfoUsingGETAsync(int speciesTypeKey, int refRgdId, string termString, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "phenotype/phenominer/chart/"+speciesTypeKey+"/"+refRgdId+"/"+ (termString==null? "" : System.Uri.EscapeDataString(termString));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of quantitative phenotypes values based on a combination of Clinical Measurement, Experimental Condition, Rat Strain, and/or Measurement Method ontology terms.  Results will be all records that match all terms submitted.  Ontology ids should be submitted as a comma delimited list (ex. RS:0000029,CMO:0000155,CMO:0000139).  Species type is an integer value (3=rat, 4=chinchilla)
		/// GetChartInfoUsingGET_1 phenotype/phenominer/chart/{speciesTypeKey}/{termString}
		/// </summary>
		/// <param name="speciesTypeKey">Species Type Key - 3=rat 4=chinchilla </param>
		/// <param name="termString">List of term accession IDs</param>
		/// <returns>OK</returns>
		public async Task GetChartInfoUsingGET_1Async(int speciesTypeKey, string termString, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "phenotype/phenominer/chart/"+speciesTypeKey+"/"+ (termString==null? "" : System.Uri.EscapeDataString(termString));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list QTL for given position and assembly map
		/// GetMappedQTLByPositionUsingGET qtls/mapped/{chr}/{start}/{stop}/{mapKey}
		/// </summary>
		/// <param name="chr">Chromosome</param>
		/// <param name="start">Start Position</param>
		/// <param name="stop">Stop Position</param>
		/// <param name="mapKey">A list of assembly map keys can be found using the lookup service</param>
		/// <returns>OK</returns>
		public async Task GetMappedQTLByPositionUsingGETAsync(string chr, long start, long stop, int mapKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qtls/mapped/"+ (chr==null? "" : System.Uri.EscapeDataString(chr))+"/"+start+"/"+stop+"/"+mapKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list QTL for given position and assembly map
		/// GetQtlListByPositionUsingGET qtls/{chr}/{start}/{stop}/{mapKey}
		/// </summary>
		/// <param name="chr">Chromosome</param>
		/// <param name="start">Start Position</param>
		/// <param name="stop">Stop Position</param>
		/// <param name="mapKey">A list of assembly map keys can be found using the lookup service</param>
		/// <returns>OK</returns>
		public async Task GetQtlListByPositionUsingGETAsync(string chr, long start, long stop, int mapKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qtls/"+ (chr==null? "" : System.Uri.EscapeDataString(chr))+"/"+start+"/"+stop+"/"+mapKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a QTL for provided RGD ID
		/// GetQTLByRgdIdUsingGET qtls/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID</param>
		/// <returns>OK</returns>
		public async Task GetQTLByRgdIdUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qtls/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list SSLP for given position and assembly map
		/// GetMappedSSLPByPositionUsingGET sslps/mapped/{chr}/{start}/{stop}/{mapKey}
		/// </summary>
		/// <param name="chr">Chromosome</param>
		/// <param name="start">Start Position</param>
		/// <param name="stop">Stop Position</param>
		/// <param name="mapKey">A list of assembly map keys can be found using the lookup service</param>
		/// <returns>OK</returns>
		public async Task GetMappedSSLPByPositionUsingGETAsync(string chr, long start, long stop, int mapKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sslps/mapped/"+ (chr==null? "" : System.Uri.EscapeDataString(chr))+"/"+start+"/"+stop+"/"+mapKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count of active objects by type, for specified species and date
		/// GetActiveObjectCountUsingGET stats/count/activeObject/{speciesTypeKey}/{dateYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateYYYYMMDD">dateYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetActiveObjectCountUsingGETAsync(int speciesTypeKey, string dateYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/count/activeObject/"+speciesTypeKey+"/"+ (dateYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count of gene types, for specified species and date
		/// GetGeneTypeCountUsingGET stats/count/geneType/{speciesTypeKey}/{dateYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateYYYYMMDD">dateYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetGeneTypeCountUsingGETAsync(int speciesTypeKey, string dateYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/count/geneType/"+speciesTypeKey+"/"+ (dateYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count of objects with given status, for specified species and date
		/// GetObjectStatusCountUsingGET stats/count/objectStatus/{speciesTypeKey}/{dateYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateYYYYMMDD">dateYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetObjectStatusCountUsingGETAsync(int speciesTypeKey, string dateYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/count/objectStatus/"+speciesTypeKey+"/"+ (dateYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count of objects with reference sequence(s), by object type, for specified species and date
		/// GetObjectsWithRefSeqCountUsingGET stats/count/objectWithRefSeq/{speciesTypeKey}/{dateYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateYYYYMMDD">dateYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetObjectsWithRefSeqCountUsingGETAsync(int speciesTypeKey, string dateYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/count/objectWithRefSeq/"+speciesTypeKey+"/"+ (dateYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count of objects with reference, by object type, for specified species and date
		/// GetObjectsWithReferenceCountUsingGET stats/count/objectWithReference/{speciesTypeKey}/{dateYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateYYYYMMDD">dateYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetObjectsWithReferenceCountUsingGETAsync(int speciesTypeKey, string dateYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/count/objectWithReference/"+speciesTypeKey+"/"+ (dateYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count of objects with external database ids, by database id, for specified species, object type and date
		/// GetObjectsWithXDBsCountUsingGET stats/count/objectWithXdb/{speciesTypeKey}/{objectKey}/{dateYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="objectKey">objectKey</param>
		/// <param name="dateYYYYMMDD">dateYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetObjectsWithXDBsCountUsingGETAsync(int speciesTypeKey, int objectKey, string dateYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/count/objectWithXdb/"+speciesTypeKey+"/"+objectKey+"/"+ (dateYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count of protein interactions, for specified species and date
		/// GetProteinInteractionCountUsingGET stats/count/proteinInteraction/{speciesTypeKey}/{dateYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateYYYYMMDD">dateYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetProteinInteractionCountUsingGETAsync(int speciesTypeKey, string dateYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/count/proteinInteraction/"+speciesTypeKey+"/"+ (dateYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count of strains, by qtl inheritance type, for specified species and date
		/// GetQtlInheritanceTypeCountUsingGET stats/count/qtlInheritanceType/{speciesTypeKey}/{dateYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateYYYYMMDD">dateYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetQtlInheritanceTypeCountUsingGETAsync(int speciesTypeKey, string dateYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/count/qtlInheritanceType/"+speciesTypeKey+"/"+ (dateYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count of retired objects by type, for specified species and date
		/// GetRetiredObjectCountUsingGET stats/count/retiredObject/{speciesTypeKey}/{dateYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateYYYYMMDD">dateYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetRetiredObjectCountUsingGETAsync(int speciesTypeKey, string dateYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/count/retiredObject/"+speciesTypeKey+"/"+ (dateYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count of strain types, for specified species and date
		/// GetStrainTypeCountUsingGET stats/count/strainType/{speciesTypeKey}/{dateYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateYYYYMMDD">dateYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetStrainTypeCountUsingGETAsync(int speciesTypeKey, string dateYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/count/strainType/"+speciesTypeKey+"/"+ (dateYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count of withdrawn objects by type, for specified species and date
		/// GetWithdrawnObjectCountUsingGET stats/count/withdrawnObject/{speciesTypeKey}/{dateYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateYYYYMMDD">dateYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetWithdrawnObjectCountUsingGETAsync(int speciesTypeKey, string dateYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/count/withdrawnObject/"+speciesTypeKey+"/"+ (dateYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count of external database ids, for specied species and date
		/// GetXdbsCountUsingGET stats/count/xdb/{speciesTypeKey}/{dateYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateYYYYMMDD">dateYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetXdbsCountUsingGETAsync(int speciesTypeKey, string dateYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/count/xdb/"+speciesTypeKey+"/"+ (dateYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count difference of active objects, by type, for specified species and date range
		/// GetActiveObjectDiffUsingGET stats/diff/activeObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateFromYYYYMMDD">dateFromYYYYMMDD</param>
		/// <param name="dateToYYYYMMDD">dateToYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetActiveObjectDiffUsingGETAsync(int speciesTypeKey, string dateFromYYYYMMDD, string dateToYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/diff/activeObject/"+speciesTypeKey+"/"+ (dateFromYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateFromYYYYMMDD))+"/"+ (dateToYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateToYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count difference of gene types, for specified species and date range
		/// GetGeneTypeDiffUsingGET stats/diff/geneType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateFromYYYYMMDD">dateFromYYYYMMDD</param>
		/// <param name="dateToYYYYMMDD">dateToYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetGeneTypeDiffUsingGETAsync(int speciesTypeKey, string dateFromYYYYMMDD, string dateToYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/diff/geneType/"+speciesTypeKey+"/"+ (dateFromYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateFromYYYYMMDD))+"/"+ (dateToYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateToYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count difference of objects with given status, for specified species and date range
		/// GetObjectStatusDiffUsingGET stats/diff/objectStatus/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateFromYYYYMMDD">dateFromYYYYMMDD</param>
		/// <param name="dateToYYYYMMDD">dateToYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetObjectStatusDiffUsingGETAsync(int speciesTypeKey, string dateFromYYYYMMDD, string dateToYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/diff/objectStatus/"+speciesTypeKey+"/"+ (dateFromYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateFromYYYYMMDD))+"/"+ (dateToYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateToYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count difference of objects with reference sequence(s), by object type, for specified species and date range
		/// GetObjectsWithRefSeqDiffUsingGET stats/diff/objectWithRefSeq/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateFromYYYYMMDD">dateFromYYYYMMDD</param>
		/// <param name="dateToYYYYMMDD">dateToYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetObjectsWithRefSeqDiffUsingGETAsync(int speciesTypeKey, string dateFromYYYYMMDD, string dateToYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/diff/objectWithRefSeq/"+speciesTypeKey+"/"+ (dateFromYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateFromYYYYMMDD))+"/"+ (dateToYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateToYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count difference of objects with reference, by object type, for specified species and date range
		/// GetObjectsWithReferenceDiffUsingGET stats/diff/objectWithReference/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateFromYYYYMMDD">dateFromYYYYMMDD</param>
		/// <param name="dateToYYYYMMDD">dateToYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetObjectsWithReferenceDiffUsingGETAsync(int speciesTypeKey, string dateFromYYYYMMDD, string dateToYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/diff/objectWithReference/"+speciesTypeKey+"/"+ (dateFromYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateFromYYYYMMDD))+"/"+ (dateToYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateToYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count difference of objects with external database ids, by database id, for specified species, object type and date range
		/// GetObjectsWithXDBsDiffUsingGET stats/diff/objectWithXdb/{speciesTypeKey}/{objectKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="objectKey">objectKey</param>
		/// <param name="dateFromYYYYMMDD">dateFromYYYYMMDD</param>
		/// <param name="dateToYYYYMMDD">dateToYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetObjectsWithXDBsDiffUsingGETAsync(int speciesTypeKey, int objectKey, string dateFromYYYYMMDD, string dateToYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/diff/objectWithXdb/"+speciesTypeKey+"/"+objectKey+"/"+ (dateFromYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateFromYYYYMMDD))+"/"+ (dateToYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateToYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count difference of protein interactions, for specified species and date range
		/// GetProteinInteractionDiffUsingGET stats/diff/proteinInteraction/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateFromYYYYMMDD">dateFromYYYYMMDD</param>
		/// <param name="dateToYYYYMMDD">dateToYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetProteinInteractionDiffUsingGETAsync(int speciesTypeKey, string dateFromYYYYMMDD, string dateToYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/diff/proteinInteraction/"+speciesTypeKey+"/"+ (dateFromYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateFromYYYYMMDD))+"/"+ (dateToYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateToYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count difference of strains, by qtl inheritance type, for specified species and date range
		/// GetQtlInheritanceTypeDiffUsingGET stats/diff/qtlInheritanceType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateFromYYYYMMDD">dateFromYYYYMMDD</param>
		/// <param name="dateToYYYYMMDD">dateToYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetQtlInheritanceTypeDiffUsingGETAsync(int speciesTypeKey, string dateFromYYYYMMDD, string dateToYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/diff/qtlInheritanceType/"+speciesTypeKey+"/"+ (dateFromYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateFromYYYYMMDD))+"/"+ (dateToYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateToYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count difference of retired objects, by type, for specified species and date range
		/// GetRetiredObjectDiffUsingGET stats/diff/retiredObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateFromYYYYMMDD">dateFromYYYYMMDD</param>
		/// <param name="dateToYYYYMMDD">dateToYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetRetiredObjectDiffUsingGETAsync(int speciesTypeKey, string dateFromYYYYMMDD, string dateToYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/diff/retiredObject/"+speciesTypeKey+"/"+ (dateFromYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateFromYYYYMMDD))+"/"+ (dateToYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateToYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count difference of strain types, for specified species and date range
		/// GetStrainTypeDiffUsingGET stats/diff/strainType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateFromYYYYMMDD">dateFromYYYYMMDD</param>
		/// <param name="dateToYYYYMMDD">dateToYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetStrainTypeDiffUsingGETAsync(int speciesTypeKey, string dateFromYYYYMMDD, string dateToYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/diff/strainType/"+speciesTypeKey+"/"+ (dateFromYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateFromYYYYMMDD))+"/"+ (dateToYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateToYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count difference of withdrawn objects, by type, for specified species and date range
		/// GetWithdrawnObjectDiffUsingGET stats/diff/withdrawnObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateFromYYYYMMDD">dateFromYYYYMMDD</param>
		/// <param name="dateToYYYYMMDD">dateToYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetWithdrawnObjectDiffUsingGETAsync(int speciesTypeKey, string dateFromYYYYMMDD, string dateToYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/diff/withdrawnObject/"+speciesTypeKey+"/"+ (dateFromYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateFromYYYYMMDD))+"/"+ (dateToYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateToYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count difference of external database ids, for specified species and date range
		/// GetXdbsDiffUsingGET stats/diff/xdb/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}
		/// </summary>
		/// <param name="speciesTypeKey">speciesTypeKey</param>
		/// <param name="dateFromYYYYMMDD">dateFromYYYYMMDD</param>
		/// <param name="dateToYYYYMMDD">dateToYYYYMMDD</param>
		/// <returns>OK</returns>
		public async Task GetXdbsDiffUsingGETAsync(int speciesTypeKey, string dateFromYYYYMMDD, string dateToYYYYMMDD, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/diff/xdb/"+speciesTypeKey+"/"+ (dateFromYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateFromYYYYMMDD))+"/"+ (dateToYYYYMMDD==null? "" : System.Uri.EscapeDataString(dateToYYYYMMDD));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// getTermStats
		/// GetTermStatsUsingGET stats/term/{accId}/{filterAccId}
		/// </summary>
		/// <param name="accId">accId</param>
		/// <param name="filterAccId">filterAccId</param>
		/// <returns>OK</returns>
		public async Task GetTermStatsUsingGETAsync(string accId, string filterAccId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/term/"+ (accId==null? "" : System.Uri.EscapeDataString(accId))+"/"+ (filterAccId==null? "" : System.Uri.EscapeDataString(filterAccId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return all active strains in RGD
		/// GetAllStrainsUsingGET strains/all
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetAllStrainsUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "strains/all";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return all active strains by position
		/// GetStrainsByPositionUsingGET strains/{chr}/{start}/{stop}/{mapKey}
		/// </summary>
		/// <param name="chr">Chromosome</param>
		/// <param name="start">Start Position</param>
		/// <param name="stop">Stop Position</param>
		/// <param name="mapKey">RGD Map Key (available through lookup service)</param>
		/// <returns>OK</returns>
		public async Task GetStrainsByPositionUsingGETAsync(string chr, long start, long stop, int mapKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "strains/"+ (chr==null? "" : System.Uri.EscapeDataString(chr))+"/"+start+"/"+stop+"/"+mapKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a strain by RGD ID
		/// GetStrainByRgdIdUsingGET strains/{rgdId}
		/// </summary>
		/// <param name="rgdId">RGD ID of the strain</param>
		/// <returns>OK</returns>
		public async Task GetStrainByRgdIdUsingGETAsync(int rgdId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "strains/"+rgdId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
