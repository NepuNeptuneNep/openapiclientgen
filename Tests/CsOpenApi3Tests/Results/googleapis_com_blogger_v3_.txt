//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Blog
	{
		
		/// <summary>
		/// The JSON custom meta-data for the Blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customMetaData")]
		public string CustomMetaData { get; set; }
		
		/// <summary>
		/// The description of this blog. This is displayed underneath the title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The identifier for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of this entry. Always blogger#blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The locale this Blog is set to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public BlogLocale Locale { get; set; }
		
		/// <summary>
		/// The name of this blog. This is displayed as the title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The container of pages in this blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public BlogPages Pages { get; set; }
		
		/// <summary>
		/// The container of posts in this blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public BlogPosts Posts { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this blog was published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public string Published { get; set; }
		
		/// <summary>
		/// The API REST URL to fetch this resource from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The status of the blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<BlogStatus> Status { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this blog was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public string Updated { get; set; }
		
		/// <summary>
		/// The URL where this blog is published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class BlogLocale
	{
		
		/// <summary>
		/// The country this blog's locale is set to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The language this blog is authored in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The language variant this blog is authored in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variant")]
		public string Variant { get; set; }
	}
	
	public class BlogPages
	{
		
		/// <summary>
		/// The URL of the container for pages in this blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The count of pages in this blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public System.Nullable<System.Int32> TotalItems { get; set; }
	}
	
	public class BlogPosts
	{
		
		/// <summary>
		/// The List of Posts for this Blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Post[] Items { get; set; }
		
		/// <summary>
		/// The URL of the container for posts in this blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The count of posts in this blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public System.Nullable<System.Int32> TotalItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Post
	{
		
		/// <summary>
		/// The author of this Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public PostAuthor Author { get; set; }
		
		/// <summary>
		/// Data about the blog containing this Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blog")]
		public PostBlog Blog { get; set; }
		
		/// <summary>
		/// The content of the Post. May contain HTML markup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The JSON meta-data for the Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customMetaData")]
		public string CustomMetaData { get; set; }
		
		/// <summary>
		/// Etag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The identifier of this Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Display image for the Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public PostImages[] PostImages { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The list of labels this Post was tagged with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// The location for geotagged posts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public PostLocation Location { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this Post was published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public string Published { get; set; }
		
		/// <summary>
		/// Comment control and display setting for readers of this post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readerComments")]
		public System.Nullable<PostReaderComments> ReaderComments { get; set; }
		
		/// <summary>
		/// The container of comments on this Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replies")]
		public PostReplies Replies { get; set; }
		
		/// <summary>
		/// The API REST URL to fetch this resource from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Status of the post. Only set for admin-level requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PostStatus> Status { get; set; }
		
		/// <summary>
		/// The title of the Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The title link URL, similar to atom's related link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="titleLink")]
		public string TitleLink { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this Post was last trashed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trashed")]
		public string Trashed { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this Post was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public string Updated { get; set; }
		
		/// <summary>
		/// The URL where this Post is displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PostAuthor
	{
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The identifier of the creator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The creator's avatar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public PostAuthorImage Image { get; set; }
		
		/// <summary>
		/// The URL of the creator's Profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PostAuthorImage
	{
		
		/// <summary>
		/// The creator's avatar URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PostBlog
	{
		
		/// <summary>
		/// The identifier of the Blog that contains this Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class PostImages
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PostLocation
	{
		
		/// <summary>
		/// Location's latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		/// <summary>
		/// Location's longitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lng")]
		public System.Nullable<System.Double> Lng { get; set; }
		
		/// <summary>
		/// Location name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Location's viewport span. Can be used when rendering a map preview.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="span")]
		public string Span { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PostReaderComments
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONT_ALLOW_SHOW_EXISTING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONT_ALLOW_HIDE_EXISTING = 2,
	}
	
	public class PostReplies
	{
		
		/// <summary>
		/// The List of Comments for this Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Comment[] Items { get; set; }
		
		/// <summary>
		/// The URL of the comments on this post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The count of comments on this post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public string TotalItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Comment
	{
		
		/// <summary>
		/// The author of this Comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public CommentAuthor Author { get; set; }
		
		/// <summary>
		/// Data about the blog containing this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blog")]
		public CommentBlog Blog { get; set; }
		
		/// <summary>
		/// The actual content of the comment. May include HTML markup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The identifier for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Data about the comment this is in reply to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inReplyTo")]
		public CommentInReplyTo InReplyTo { get; set; }
		
		/// <summary>
		/// The kind of this entry. Always blogger#comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Data about the post containing this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="post")]
		public CommentPost Post { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this comment was published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public string Published { get; set; }
		
		/// <summary>
		/// The API REST URL to fetch this resource from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The status of the comment (only populated for admin users).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<CommentStatus> Status { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this comment was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public string Updated { get; set; }
	}
	
	public class CommentAuthor
	{
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The identifier of the creator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The creator's avatar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public CommentAuthorImage Image { get; set; }
		
		/// <summary>
		/// The URL of the creator's Profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class CommentAuthorImage
	{
		
		/// <summary>
		/// The creator's avatar URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class CommentBlog
	{
		
		/// <summary>
		/// The identifier of the blog containing this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class CommentInReplyTo
	{
		
		/// <summary>
		/// The identified of the parent of this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class CommentPost
	{
		
		/// <summary>
		/// The identifier of the post containing this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CommentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMPTIED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPAM = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PostStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT_TRASHED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BlogStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BlogList
	{
		
		/// <summary>
		/// Admin level list of blog per-user information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blogUserInfos")]
		public BlogUserInfo[] BlogUserInfos { get; set; }
		
		/// <summary>
		/// The list of Blogs this user has Authorship or Admin rights over.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Blog[] Items { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#blogList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BlogUserInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="blog")]
		public Blog Blog { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blog_user_info")]
		public BlogPerUserInfo Blog_user_info { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#blogUserInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BlogPerUserInfo
	{
		
		/// <summary>
		/// ID of the Blog resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blogId")]
		public string BlogId { get; set; }
		
		/// <summary>
		/// True if the user has Admin level access to the blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasAdminAccess")]
		public System.Nullable<System.Boolean> HasAdminAccess { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#blogPerUserInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The Photo Album Key for the user when adding photos to the blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photosAlbumKey")]
		public string PhotosAlbumKey { get; set; }
		
		/// <summary>
		/// Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<BlogPerUserInfoRole> Role { get; set; }
		
		/// <summary>
		/// ID of the User.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BlogPerUserInfoRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEW_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHOR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommentList
	{
		
		/// <summary>
		/// Etag of the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The List of Comments for a Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Comment[] Items { get; set; }
		
		/// <summary>
		/// The kind of this entry. Always blogger#commentList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to fetch the next page, if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Pagination token to fetch the previous page, if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Page
	{
		
		/// <summary>
		/// The author of this Page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public PageAuthor Author { get; set; }
		
		/// <summary>
		/// Data about the blog containing this Page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blog")]
		public PageBlog Blog { get; set; }
		
		/// <summary>
		/// The body content of this Page, in HTML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Etag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The identifier for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this Page was published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public string Published { get; set; }
		
		/// <summary>
		/// The API REST URL to fetch this resource from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The status of the page for admin resources (either LIVE or DRAFT).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PageStatus> Status { get; set; }
		
		/// <summary>
		/// The title of this entity. This is the name displayed in the Admin user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this Page was trashed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trashed")]
		public string Trashed { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this Page was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public string Updated { get; set; }
		
		/// <summary>
		/// The URL that this Page is displayed at.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PageAuthor
	{
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The identifier of the creator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The creator's avatar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public PageAuthorImage Image { get; set; }
		
		/// <summary>
		/// The URL of the creator's Profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PageAuthorImage
	{
		
		/// <summary>
		/// The creator's avatar URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PageBlog
	{
		
		/// <summary>
		/// The identifier of the blog containing this page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PageStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT_TRASHED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PageList
	{
		
		/// <summary>
		/// Etag of the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The list of Pages for a Blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Page[] Items { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#pageList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to fetch the next page, if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pageviews
	{
		
		/// <summary>
		/// Blog Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blogId")]
		public string BlogId { get; set; }
		
		/// <summary>
		/// The container of posts in this blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counts")]
		public PageviewsCounts[] PageviewsCounts { get; set; }
		
		/// <summary>
		/// The kind of this entry. Always blogger#page_views.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	public class PageviewsCounts
	{
		
		/// <summary>
		/// Count of page views for the given time range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// Time range the given count applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeRange")]
		public System.Nullable<PageviewsCountsTimeRange> TimeRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PageviewsCountsTimeRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_TIME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRTY_DAYS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVEN_DAYS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostList
	{
		
		/// <summary>
		/// Etag of the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The list of Posts for this Blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Post[] Items { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#postList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to fetch the next page, if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Pagination token to fetch the previous page, if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostPerUserInfo
	{
		
		/// <summary>
		/// ID of the Blog that the post resource belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blogId")]
		public string BlogId { get; set; }
		
		/// <summary>
		/// True if the user has Author level access to the post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasEditAccess")]
		public System.Nullable<System.Boolean> HasEditAccess { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#postPerUserInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// ID of the Post resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postId")]
		public string PostId { get; set; }
		
		/// <summary>
		/// ID of the User.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostUserInfo
	{
		
		/// <summary>
		/// The kind of this entity. Always blogger#postUserInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="post")]
		public Post Post { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="post_user_info")]
		public PostPerUserInfo Post_user_info { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostUserInfosList
	{
		
		/// <summary>
		/// The list of Posts with User information for the post, for this Blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PostUserInfo[] Items { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#postList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to fetch the next page, if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		/// <summary>
		/// Profile summary information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
		
		/// <summary>
		/// The container of blogs for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blogs")]
		public UserBlogs Blogs { get; set; }
		
		/// <summary>
		/// The timestamp of when this profile was created, in seconds since epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The identifier for this User.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// This user's locale
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public UserLocale Locale { get; set; }
		
		/// <summary>
		/// The API REST URL to fetch this resource from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The user's profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class UserBlogs
	{
		
		/// <summary>
		/// The URL of the Blogs for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	public class UserLocale
	{
		
		/// <summary>
		/// The country this blog's locale is set to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The language this blog is authored in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The language variant this blog is authored in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variant")]
		public string Variant { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a blog by url.
		/// Blogger_blogs_getByUrl v3/blogs/byurl
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Blog> Blogger_blogs_getByUrlAsync(string url, BlogPerUserInfoRole view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/byurl?url=" + (url==null? "" : System.Uri.EscapeDataString(url))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Blog>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a blog by id.
		/// Blogger_blogs_get v3/blogs/{blogId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Blog> Blogger_blogs_getAsync(string blogId, int maxPosts, BlogPerUserInfoRole view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"&maxPosts="+maxPosts+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Blog>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists comments by blog.
		/// Blogger_comments_listByBlog v3/blogs/{blogId}/comments
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<CommentList> Blogger_comments_listByBlogAsync(string blogId, string endDate, bool fetchBodies, int maxResults, string pageToken, string startDate, CommentStatus[] status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/comments&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&fetchBodies="+fetchBodies+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&"+string.Join("&", status.Select(z => $"status={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommentList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists pages.
		/// Blogger_pages_list v3/blogs/{blogId}/pages
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<PageList> Blogger_pages_listAsync(string blogId, bool fetchBodies, int maxResults, string pageToken, PageStatus[] status, BlogPerUserInfoRole view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/pages&fetchBodies="+fetchBodies+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&"+string.Join("&", status.Select(z => $"status={z}"))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PageList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a page.
		/// Blogger_pages_insert v3/blogs/{blogId}/pages
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Page> Blogger_pages_insertAsync(string blogId, bool isDraft, Page requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/pages&isDraft="+isDraft;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Page>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a page by blog id and page id.
		/// Blogger_pages_delete v3/blogs/{blogId}/pages/{pageId}
		/// </summary>
		/// <param name="useTrash">Move to Trash if possible</param>
		/// <returns>Successful response</returns>
		public async Task Blogger_pages_deleteAsync(string blogId, string pageId, bool useTrash, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId))+"&useTrash="+useTrash;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a page by blog id and page id.
		/// Blogger_pages_get v3/blogs/{blogId}/pages/{pageId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Page> Blogger_pages_getAsync(string blogId, string pageId, BlogPerUserInfoRole view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Page>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches a page.
		/// Blogger_pages_patch v3/blogs/{blogId}/pages/{pageId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Page> Blogger_pages_patchAsync(string blogId, string pageId, bool publish, bool revert, Page requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId))+"&publish="+publish+"&revert="+revert;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Page>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a page by blog id and page id.
		/// Blogger_pages_update v3/blogs/{blogId}/pages/{pageId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Page> Blogger_pages_updateAsync(string blogId, string pageId, bool publish, bool revert, Page requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId))+"&publish="+publish+"&revert="+revert;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Page>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Publishes a page.
		/// Blogger_pages_publish v3/blogs/{blogId}/pages/{pageId}/publish
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Page> Blogger_pages_publishAsync(string blogId, string pageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId))+"/publish";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Page>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reverts a published or scheduled page to draft state.
		/// Blogger_pages_revert v3/blogs/{blogId}/pages/{pageId}/revert
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Page> Blogger_pages_revertAsync(string blogId, string pageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId))+"/revert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Page>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets page views by blog id.
		/// Blogger_pageViews_get v3/blogs/{blogId}/pageviews
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Pageviews> Blogger_pageViews_getAsync(string blogId, string[] range, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/pageviews&"+string.Join("&", range.Select(z => $"range={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Pageviews>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists posts.
		/// Blogger_posts_list v3/blogs/{blogId}/posts
		/// </summary>
		/// <param name="sortOption">Sort direction applied to post list.</param>
		/// <returns>Successful response</returns>
		public async Task<PostList> Blogger_posts_listAsync(string blogId, string endDate, bool fetchBodies, bool fetchImages, string labels, int maxResults, Blogger_posts_listOrderBy orderBy, string pageToken, Blogger_posts_listSortOption sortOption, string startDate, PostStatus[] status, BlogPerUserInfoRole view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&fetchBodies="+fetchBodies+"&fetchImages="+fetchImages+"&labels=" + (labels==null? "" : System.Uri.EscapeDataString(labels))+"&maxResults="+maxResults+"&orderBy=" + orderBy+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&sortOption=" + sortOption+"&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&"+string.Join("&", status.Select(z => $"status={z}"))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PostList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a post.
		/// Blogger_posts_insert v3/blogs/{blogId}/posts
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Post> Blogger_posts_insertAsync(string blogId, bool fetchBody, bool fetchImages, bool isDraft, Post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts&fetchBody="+fetchBody+"&fetchImages="+fetchImages+"&isDraft="+isDraft;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Post>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a post by path.
		/// Blogger_posts_getByPath v3/blogs/{blogId}/posts/bypath
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Post> Blogger_posts_getByPathAsync(string blogId, string path, int maxComments, BlogPerUserInfoRole view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/bypath&path=" + (path==null? "" : System.Uri.EscapeDataString(path))+"&maxComments="+maxComments+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Post>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches for posts matching given query terms in the specified blog.
		/// Blogger_posts_search v3/blogs/{blogId}/posts/search
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<PostList> Blogger_posts_searchAsync(string blogId, string q, bool fetchBodies, Blogger_posts_listOrderBy orderBy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/search&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&fetchBodies="+fetchBodies+"&orderBy=" + orderBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PostList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a post by blog id and post id.
		/// Blogger_posts_delete v3/blogs/{blogId}/posts/{postId}
		/// </summary>
		/// <param name="useTrash">Move to Trash if possible</param>
		/// <returns>Successful response</returns>
		public async Task Blogger_posts_deleteAsync(string blogId, string postId, bool useTrash, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"&useTrash="+useTrash;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a post by blog id and post id
		/// Blogger_posts_get v3/blogs/{blogId}/posts/{postId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Post> Blogger_posts_getAsync(string blogId, string postId, bool fetchBody, bool fetchImages, int maxComments, BlogPerUserInfoRole view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"&fetchBody="+fetchBody+"&fetchImages="+fetchImages+"&maxComments="+maxComments+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Post>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches a post.
		/// Blogger_posts_patch v3/blogs/{blogId}/posts/{postId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Post> Blogger_posts_patchAsync(string blogId, string postId, bool fetchBody, bool fetchImages, int maxComments, bool publish, bool revert, Post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"&fetchBody="+fetchBody+"&fetchImages="+fetchImages+"&maxComments="+maxComments+"&publish="+publish+"&revert="+revert;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Post>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a post by blog id and post id.
		/// Blogger_posts_update v3/blogs/{blogId}/posts/{postId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Post> Blogger_posts_updateAsync(string blogId, string postId, bool fetchBody, bool fetchImages, int maxComments, bool publish, bool revert, Post requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"&fetchBody="+fetchBody+"&fetchImages="+fetchImages+"&maxComments="+maxComments+"&publish="+publish+"&revert="+revert;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Post>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists comments.
		/// Blogger_comments_list v3/blogs/{blogId}/posts/{postId}/comments
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<CommentList> Blogger_comments_listAsync(string blogId, string postId, string endDate, bool fetchBodies, int maxResults, string pageToken, string startDate, CommentStatus status, BlogPerUserInfoRole view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"/comments&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&fetchBodies="+fetchBodies+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&status=" + status+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommentList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a comment by blog id, post id and comment id.
		/// Blogger_comments_delete v3/blogs/{blogId}/posts/{postId}/comments/{commentId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Blogger_comments_deleteAsync(string blogId, string postId, string commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a comment by id.
		/// Blogger_comments_get v3/blogs/{blogId}/posts/{postId}/comments/{commentId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Comment> Blogger_comments_getAsync(string blogId, string postId, string commentId, BlogPerUserInfoRole view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Comment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Marks a comment as not spam by blog id, post id and comment id.
		/// Blogger_comments_approve v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Comment> Blogger_comments_approveAsync(string blogId, string postId, string commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"/approve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Comment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the content of a comment by blog id, post id and comment id.
		/// Blogger_comments_removeContent v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Comment> Blogger_comments_removeContentAsync(string blogId, string postId, string commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"/removecontent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Comment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Marks a comment as spam by blog id, post id and comment id.
		/// Blogger_comments_markAsSpam v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Comment> Blogger_comments_markAsSpamAsync(string blogId, string postId, string commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"/spam";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Comment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Publishes a post.
		/// Blogger_posts_publish v3/blogs/{blogId}/posts/{postId}/publish
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Post> Blogger_posts_publishAsync(string blogId, string postId, string publishDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"/publish&publishDate=" + (publishDate==null? "" : System.Uri.EscapeDataString(publishDate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Post>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reverts a published or scheduled post to draft state.
		/// Blogger_posts_revert v3/blogs/{blogId}/posts/{postId}/revert
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Post> Blogger_posts_revertAsync(string blogId, string postId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"/revert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Post>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one user by user_id.
		/// Blogger_users_get v3/users/{userId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<User> Blogger_users_getAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists blogs by user.
		/// Blogger_blogs_listByUser v3/users/{userId}/blogs
		/// </summary>
		/// <param name="status">Default value of status is LIVE.</param>
		/// <returns>Successful response</returns>
		public async Task<BlogList> Blogger_blogs_listByUserAsync(string userId, bool fetchUserInfo, BlogPerUserInfoRole[] role, BlogStatus[] status, BlogPerUserInfoRole view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/blogs&fetchUserInfo="+fetchUserInfo+"&"+string.Join("&", role.Select(z => $"role={z}"))+"&"+string.Join("&", status.Select(z => $"status={z}"))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BlogList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one blog and user info pair by blog id and user id.
		/// Blogger_blogUserInfos_get v3/users/{userId}/blogs/{blogId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<BlogUserInfo> Blogger_blogUserInfos_getAsync(string userId, string blogId, int maxPosts, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"&maxPosts="+maxPosts;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BlogUserInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists post and user info pairs.
		/// Blogger_postUserInfos_list v3/users/{userId}/blogs/{blogId}/posts
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<PostUserInfosList> Blogger_postUserInfos_listAsync(string userId, string blogId, string endDate, bool fetchBodies, string labels, int maxResults, Blogger_posts_listOrderBy orderBy, string pageToken, string startDate, PostStatus[] status, BlogPerUserInfoRole view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&fetchBodies="+fetchBodies+"&labels=" + (labels==null? "" : System.Uri.EscapeDataString(labels))+"&maxResults="+maxResults+"&orderBy=" + orderBy+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&"+string.Join("&", status.Select(z => $"status={z}"))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PostUserInfosList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one post and user info pair, by post_id and user_id.
		/// Blogger_postUserInfos_get v3/users/{userId}/blogs/{blogId}/posts/{postId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<PostUserInfo> Blogger_postUserInfos_getAsync(string userId, string blogId, string postId, int maxComments, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"&maxComments="+maxComments;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PostUserInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Blogger_posts_listOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORDER_BY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATED = 2,
	}
	
	public enum Blogger_posts_listSortOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SORT_OPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
