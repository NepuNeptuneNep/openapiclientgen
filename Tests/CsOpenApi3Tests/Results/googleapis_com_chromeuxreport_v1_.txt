//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A bin is a discrete portion of data spanning from start to end, or if no end is given, then from start to +inf. A bin's start and end values are given in the value type of the metric it represents. For example, "first contentful paint" is measured in milliseconds and exposed as ints, therefore its metric bins will use int32s for its start and end types. However, "cumulative layout shift" is measured in unitless decimals and is exposed as a decimal encoded as a string, therefore its metric bins will use strings for its value type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Bin
	{
		
		/// <summary>
		/// The proportion of users that experienced this bin's value for the given metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="density")]
		public System.Nullable<System.Double> Density { get; set; }
		
		/// <summary>
		/// End is the end of the data bin. If end is not populated, then the bin has no end and is valid from start to +inf.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public object End { get; set; }
		
		/// <summary>
		/// Start is the beginning of the data bin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public object Start { get; set; }
	}
	
	/// <summary>
	/// The collection period is a date range which includes the `first` and `last` day.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionPeriod
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstDate")]
		public Date FirstDate { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastDate")]
		public Date LastDate { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// For enum metrics, provides fraction timeseries which add up to approximately 1.0 per entry (k-th element into the repeated fractions field for any k <= len) across fraction_timeseries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FractionTimeseries
	{
		
		/// <summary>
		/// Values between 0.0 and 1.0 (inclusive) and NaN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fractions")]
		public double[] Fractions { get; set; }
	}
	
	/// <summary>
	/// Key defines all the dimensions that identify this record as unique.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HistoryKey
	{
		
		/// <summary>
		/// The form factor is the device class that all users used to access the site for this record. If the form factor is unspecified, then aggregated data over all form factors will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formFactor")]
		public System.Nullable<HistoryKeyFormFactor> FormFactor { get; set; }
		
		/// <summary>
		/// Origin specifies the origin that this record is for. Note: When specifying an origin, data for loads under this origin over all pages are aggregated into origin level user experience data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// Url specifies a specific url that this record is for. This url should be normalized, following the normalization actions taken in the request to increase the chances of successful lookup. Note: When specifying a "url" only data for that specific url will be aggregated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HistoryKeyFormFactor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_FORM_FACTORS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESKTOP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLET = 3,
	}
	
	/// <summary>
	/// HistoryRecord is a timeseries of Chrome UX Report data. It contains user experience statistics for a single url pattern and a set of dimensions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HistoryRecord
	{
		
		/// <summary>
		/// The collection periods indicate when each of the data points reflected in the time series data in metrics was collected. Note that all the time series share the same collection periods, and it is enforced in the CrUX pipeline that every time series has the same number of data points.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionPeriods")]
		public CollectionPeriod[] CollectionPeriods { get; set; }
		
		/// <summary>
		/// Key defines all the dimensions that identify this record as unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public HistoryKey Key { get; set; }
		
		/// <summary>
		/// Metrics is the map of user experience time series data available for the record defined in the key field. Metrics are keyed on the metric name. Allowed key values: ["first_contentful_paint", "first_input_delay", "largest_contentful_paint", "cumulative_layout_shift", "experimental_time_to_first_byte", "experimental_interaction_to_next_paint"]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public System.Collections.Generic.Dictionary<string, MetricTimeseries> Metrics { get; set; }
	}
	
	/// <summary>
	/// A `metric timeseries` is a set of user experience data for a single web performance metric, like "first contentful paint". It contains a summary histogram of real world Chrome usage as a series of `bins`, where each bin has density values for a particular time period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricTimeseries
	{
		
		/// <summary>
		/// Mapping from labels to timeseries of fractions attributed to this label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fractionTimeseries")]
		public System.Collections.Generic.Dictionary<string, FractionTimeseries> FractionTimeseries { get; set; }
		
		/// <summary>
		/// The histogram of user experiences for a metric. The histogram will have at least one bin and the densities of all bins will add up to ~1, for each timeseries entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histogramTimeseries")]
		public TimeseriesBin[] HistogramTimeseries { get; set; }
		
		/// <summary>
		/// Percentiles contains synthetic values of a metric at a given statistical percentile. These are used for estimating a metric's value as experienced by a percentage of users out of the total number of users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentilesTimeseries")]
		public TimeseriesPercentiles PercentilesTimeseries { get; set; }
	}
	
	/// <summary>
	/// A bin is a discrete portion of data spanning from start to end, or if no end is given, then from start to +inf. A bin's start and end values are given in the value type of the metric it represents. For example, "first contentful paint" is measured in milliseconds and exposed as ints, therefore its metric bins will use int32s for its start and end types. However, "cumulative layout shift" is measured in unitless decimals and is exposed as a decimal encoded as a string, therefore its metric bins will use strings for its value type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeseriesBin
	{
		
		/// <summary>
		/// The proportion of users that experienced this bin's value for the given metric in a given collection period; the index for each of these entries corresponds to an entry in the CollectionPeriods field in the HistoryRecord message, which describes when the density was observed in the field. Thus, the length of this list of densities is equal to the length of the CollectionPeriods field in the HistoryRecord message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="densities")]
		public double[] Densities { get; set; }
		
		/// <summary>
		/// End is the end of the data bin. If end is not populated, then the bin has no end and is valid from start to +inf.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public object End { get; set; }
		
		/// <summary>
		/// Start is the beginning of the data bin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public object Start { get; set; }
	}
	
	/// <summary>
	/// Percentiles contains synthetic values of a metric at a given statistical percentile. These are used for estimating a metric's value as experienced by a percentage of users out of the total number of users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeseriesPercentiles
	{
		
		/// <summary>
		/// 75% of users experienced the given metric at or below this value. The length of this list of densities is equal to the length of the CollectionPeriods field in the HistoryRecord message, which describes when the density was observed in the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="p75s")]
		public string[] P75s { get; set; }
	}
	
	/// <summary>
	/// Key defines all the dimensions that identify this record as unique.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Key
	{
		
		/// <summary>
		/// The effective connection type is the general connection class that all users experienced for this record. This field uses the values ["offline", "slow-2G", "2G", "3G", "4G"] as specified in: https://wicg.github.io/netinfo/#effective-connection-types If the effective connection type is unspecified, then aggregated data over all effective connection types will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveConnectionType")]
		public string EffectiveConnectionType { get; set; }
		
		/// <summary>
		/// The form factor is the device class that all users used to access the site for this record. If the form factor is unspecified, then aggregated data over all form factors will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formFactor")]
		public HistoryKeyFormFactor FormFactor { get; set; }
		
		/// <summary>
		/// Origin specifies the origin that this record is for. Note: When specifying an origin, data for loads under this origin over all pages are aggregated into origin level user experience data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// Url specifies a specific url that this record is for. Note: When specifying a "url" only data for that specific url will be aggregated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A `metric` is a set of user experience data for a single web performance metric, like "first contentful paint". It contains a summary histogram of real world Chrome usage as a series of `bins`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metric
	{
		
		/// <summary>
		/// For enum metrics, provides fractions which add up to approximately 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fractions")]
		public System.Collections.Generic.Dictionary<string, double> Fractions { get; set; }
		
		/// <summary>
		/// The histogram of user experiences for a metric. The histogram will have at least one bin and the densities of all bins will add up to ~1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histogram")]
		public Bin[] Histogram { get; set; }
		
		/// <summary>
		/// Percentiles contains synthetic values of a metric at a given statistical percentile. These are used for estimating a metric's value as experienced by a percentage of users out of the total number of users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentiles")]
		public Percentiles Percentiles { get; set; }
	}
	
	/// <summary>
	/// Percentiles contains synthetic values of a metric at a given statistical percentile. These are used for estimating a metric's value as experienced by a percentage of users out of the total number of users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Percentiles
	{
		
		/// <summary>
		/// 75% of users experienced the given metric at or below this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="p75")]
		public object P75 { get; set; }
	}
	
	/// <summary>
	/// Request payload sent by a physical web client. This request includes all necessary context to load a particular user experience history record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryHistoryRequest
	{
		
		/// <summary>
		/// The form factor is a query dimension that specifies the device class that the record's data should belong to. Note: If no form factor is specified, then a special record with aggregated data over all form factors will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formFactor")]
		public HistoryKeyFormFactor FormFactor { get; set; }
		
		/// <summary>
		/// The metrics that should be included in the response. If none are specified then any metrics found will be returned. Allowed values: ["first_contentful_paint", "first_input_delay", "largest_contentful_paint", "cumulative_layout_shift", "experimental_time_to_first_byte", "experimental_interaction_to_next_paint"]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string[] Metrics { get; set; }
		
		/// <summary>
		/// The url pattern "origin" refers to a url pattern that is the origin of a website. Examples: "https://example.com", "https://cloud.google.com"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// The url pattern "url" refers to a url pattern that is any arbitrary url. Examples: "https://example.com/", "https://cloud.google.com/why-google-cloud/"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Response payload sent back to a physical web client. This response contains the record found based on the identiers present in a `QueryHistoryRequest`. The returned response will have a history record, and sometimes details on normalization actions taken on the request that were necessary to make the request successful.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryHistoryResponse
	{
		
		/// <summary>
		/// HistoryRecord is a timeseries of Chrome UX Report data. It contains user experience statistics for a single url pattern and a set of dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="record")]
		public HistoryRecord Record { get; set; }
		
		/// <summary>
		/// Object representing the normalization actions taken to normalize a url to achieve a higher chance of successful lookup. These are simple automated changes that are taken when looking up the provided `url_patten` would be known to fail. Complex actions like following redirects are not handled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlNormalizationDetails")]
		public UrlNormalization UrlNormalizationDetails { get; set; }
	}
	
	/// <summary>
	/// Object representing the normalization actions taken to normalize a url to achieve a higher chance of successful lookup. These are simple automated changes that are taken when looking up the provided `url_patten` would be known to fail. Complex actions like following redirects are not handled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UrlNormalization
	{
		
		/// <summary>
		/// The URL after any normalization actions. This is a valid user experience URL that could reasonably be looked up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="normalizedUrl")]
		public string NormalizedUrl { get; set; }
		
		/// <summary>
		/// The original requested URL prior to any normalization actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalUrl")]
		public string OriginalUrl { get; set; }
	}
	
	/// <summary>
	/// Request payload sent by a physical web client. This request includes all necessary context to load a particular user experience record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryRequest
	{
		
		/// <summary>
		/// The effective connection type is a query dimension that specifies the effective network class that the record's data should belong to. This field uses the values ["offline", "slow-2G", "2G", "3G", "4G"] as specified in: https://wicg.github.io/netinfo/#effective-connection-types Note: If no effective connection type is specified, then a special record with aggregated data over all effective connection types will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveConnectionType")]
		public string EffectiveConnectionType { get; set; }
		
		/// <summary>
		/// The form factor is a query dimension that specifies the device class that the record's data should belong to. Note: If no form factor is specified, then a special record with aggregated data over all form factors will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formFactor")]
		public HistoryKeyFormFactor FormFactor { get; set; }
		
		/// <summary>
		/// The metrics that should be included in the response. If none are specified then any metrics found will be returned. Allowed values: ["first_contentful_paint", "first_input_delay", "largest_contentful_paint", "cumulative_layout_shift", "experimental_time_to_first_byte", "experimental_interaction_to_next_paint"]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string[] Metrics { get; set; }
		
		/// <summary>
		/// The url pattern "origin" refers to a url pattern that is the origin of a website. Examples: "https://example.com", "https://cloud.google.com"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// The url pattern "url" refers to a url pattern that is any arbitrary url. Examples: "https://example.com/", "https://cloud.google.com/why-google-cloud/"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Response payload sent back to a physical web client. This response contains the record found based on the identiers present in a `QueryRequest`. The returned response will have a record, and sometimes details on normalization actions taken on the request that were necessary to make the request successful.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryResponse
	{
		
		/// <summary>
		/// Record is a single Chrome UX report data record. It contains use experience statistics for a single url pattern and set of dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="record")]
		public Record Record { get; set; }
		
		/// <summary>
		/// Object representing the normalization actions taken to normalize a url to achieve a higher chance of successful lookup. These are simple automated changes that are taken when looking up the provided `url_patten` would be known to fail. Complex actions like following redirects are not handled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlNormalizationDetails")]
		public UrlNormalization UrlNormalizationDetails { get; set; }
	}
	
	/// <summary>
	/// Record is a single Chrome UX report data record. It contains use experience statistics for a single url pattern and set of dimensions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Record
	{
		
		/// <summary>
		/// The collection period is a date range which includes the `first` and `last` day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionPeriod")]
		public CollectionPeriod CollectionPeriod { get; set; }
		
		/// <summary>
		/// Key defines all the dimensions that identify this record as unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public Key Key { get; set; }
		
		/// <summary>
		/// Metrics is the map of user experience data available for the record defined in the key field. Metrics are keyed on the metric name. Allowed key values: ["first_contentful_paint", "first_input_delay", "largest_contentful_paint", "cumulative_layout_shift", "experimental_time_to_first_byte", "experimental_interaction_to_next_paint"]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public System.Collections.Generic.Dictionary<string, Metric> Metrics { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Queries the Chrome User Experience Report for a timeseries `history record` for a given site. Returns a `history record` that contains one or more `metric timeseries` corresponding to performance data about the requested site.
		/// Chromeuxreport_records_queryHistoryRecord v1/records:queryHistoryRecord
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<QueryHistoryResponse> Chromeuxreport_records_queryHistoryRecordAsync(QueryHistoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/records:queryHistoryRecord";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<QueryHistoryResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Queries the Chrome User Experience for a single `record` for a given site. Returns a `record` that contains one or more `metrics` corresponding to performance data about the requested site.
		/// Chromeuxreport_records_queryRecord v1/records:queryRecord
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<QueryResponse> Chromeuxreport_records_queryRecordAsync(QueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/records:queryRecord";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<QueryResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
