//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AirQuality_PointData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AirQuality_PointHourlyData[] Data { get; set; }
		
		/// <summary>
		/// Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="elevation")]
		public int Elevation { get; set; }
		
		/// <summary>
		/// Latitude of the point, always in the format <float><N/S>, for example ``23.5S``
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public string Lat { get; set; }
		
		/// <summary>
		/// Longitude of the point, always in the format <float><E/W>, for example ``23.5W``
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public string Lon { get; set; }
		
		/// <summary>
		/// Name of the timezone in format like 'Europe/London'. Available only when the place is specified through place ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AirQuality_PointHourlyData
	{
		
		/// <summary>
		/// Total aerosol optical depth at 550 nm.
		///Unit: dimensionless
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aerosol_550")]
		public System.Nullable<System.Double> Aerosol_550 { get; set; }
		
		/// <summary>
		/// Air quality index. The following values can appear:
		///
		///* 1 - Very good
		///* 2 - Good
		///* 3 - Medium
		///* 4 - Poor
		///* 5 - Very poor
		///* 6 - Extremely poor
		///
		///Unit: index
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="air_quality")]
		public System.Nullable<System.Double> Air_quality { get; set; }
		
		/// <summary>
		/// Carbon monoxide at surface level.
		///Unit: µg/m3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="co_surface")]
		public System.Nullable<System.Double> Co_surface { get; set; }
		
		/// <summary>
		/// Datetime in YYYY-MM-DDTHH:MM:SS format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Dust aerosol optical depth at 550 nm.
		///Unit: dimensionless
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dust_550nm")]
		public System.Nullable<System.Double> Dust_550nm { get; set; }
		
		/// <summary>
		/// Dust aerosol (0.55 - 0.9 µm) mixing ratio.
		///Unit: kg/kg
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dust_mixing_ratio_05")]
		public System.Nullable<System.Double> Dust_mixing_ratio_05 { get; set; }
		
		/// <summary>
		/// Nitrogen dioxide at surface level.
		///Unit: µg/m3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="no2_surface")]
		public System.Nullable<System.Double> No2_surface { get; set; }
		
		/// <summary>
		/// Nitrogen monoxide at surface level.
		///Unit: µg/m3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="no_surface")]
		public System.Nullable<System.Double> No_surface { get; set; }
		
		/// <summary>
		/// Ozone.
		///Unit: µg/m3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ozone_surface")]
		public System.Nullable<System.Double> Ozone_surface { get; set; }
		
		/// <summary>
		/// Total column ozone.
		///Unit: Dobson
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ozone_total")]
		public System.Nullable<System.Double> Ozone_total { get; set; }
		
		/// <summary>
		/// Particulate matter d < 10 µm (PM10).
		///Unit: µg/m3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pm10")]
		public System.Nullable<System.Double> Pm10 { get; set; }
		
		/// <summary>
		/// Particulate matter d < 2.5 µm (PM2.5).
		///Unit: µg/m3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pm25")]
		public System.Nullable<System.Double> Pm25 { get; set; }
		
		/// <summary>
		/// Sulphur dioxide at surface level.
		///Unit: µg/m3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="so2_surface")]
		public System.Nullable<System.Double> So2_surface { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FindPlacesModel
	{
		
		/// <summary>
		/// first-level administrative area (a US state, for example)
		/// </summary>
		[System.ComponentModel.DefaultValue("England")]
		[System.Runtime.Serialization.DataMember(Name="adm_area1")]
		public string Adm_area1 { get; set; } = "England";
		
		/// <summary>
		/// second-level administrative area (a US county, for example)
		/// </summary>
		[System.ComponentModel.DefaultValue("Greater London")]
		[System.Runtime.Serialization.DataMember(Name="adm_area2")]
		public string Adm_area2 { get; set; } = "Greater London";
		
		/// <summary>
		/// name of the country
		/// </summary>
		[System.ComponentModel.DefaultValue("United Kingdom")]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; } = "United Kingdom";
		
		/// <summary>
		/// Latitude of the point, always in the format \<float><N/S>, for example ``23.5S``
		/// </summary>
		[System.ComponentModel.DefaultValue("23.2N")]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public string Lat { get; set; } = "23.2N";
		
		/// <summary>
		/// Longitude of the point, always in format \<float><E/W>, for example ``23.5W``
		/// </summary>
		[System.ComponentModel.DefaultValue("15.3E")]
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public string Lon { get; set; } = "15.3E";
		
		/// <summary>
		/// name of the place
		/// </summary>
		[System.ComponentModel.DefaultValue("London")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "London";
		
		/// <summary>
		/// unique identifier of the place, which can be used in /point and /map endpoints
		/// </summary>
		[System.ComponentModel.DefaultValue("london")]
		[System.Runtime.Serialization.DataMember(Name="place_id")]
		public string Place_id { get; set; } = "london";
		
		/// <summary>
		/// Timezone of the point in tzinfo format.
		/// </summary>
		[System.ComponentModel.DefaultValue("Europe/London")]
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; } = "Europe/London";
		
		/// <summary>
		/// The character of the place. May be one of the following values:
		///
		///* administrative areas (states, counties, districts...): ``administrative_area``
		///* country: ``country``
		///* a different political entity from a country (for example, a dependent teritory): ``political_entity``
		///* villages, towns and cities: ``settlement``
		///* air industry locations: ``airbase``, ``airfield``, ``heliport``, ``airport``, ``airport_terminal``
		///* places related to water: ``bay``, ``channel``, ``fjord``, ``lake``, ``pond``, ``falls``, ``gulf``,
		///    ``harbor``, ``reservoir``, ``sea``, ``dam``, ``cape``, ``island``, ``peninsula``
		///* places related to mountain areas: ``hill``, ``mountain``, ``peak``, ``valley``, ``volcano``, ``canyon``
		///* other places related to nature: ``park``, ``reserve``, ``resort``, ``desert``
		///* places based on postcodes: ``postcode``
		///        
		/// </summary>
		[System.ComponentModel.DefaultValue("settlement")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "settlement";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneralRequestError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HTTPValidationError
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public ValidationError[] Detail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loc")]
		public string[] Loc { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Language
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cs = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointAlerts
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointCurrentData
	{
		
		/// <summary>
		/// Percentage of sky covered by clouds.
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloud_cover")]
		public System.Nullable<System.Double> Cloud_cover { get; set; }
		
		/// <summary>
		/// Current dew point temperature.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dew_point")]
		public System.Nullable<System.Double> Dew_point { get; set; }
		
		/// <summary>
		/// Feels like temperature.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feels_like")]
		public System.Nullable<System.Double> Feels_like { get; set; }
		
		/// <summary>
		/// Relative humidity.
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="humidity")]
		public System.Nullable<System.Int32> Humidity { get; set; }
		
		/// <summary>
		/// String identifier of current weather icon, e.g. `light_rain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		/// <summary>
		/// Numeric identifier of current weather icon. The following values can appear:
		///
		///* 1 - Not available
		///* 2 - Sunny
		///* 3 - Mostly sunny
		///* 4 - Partly sunny
		///* 5 - Mostly cloudy
		///* 6 - Cloudy
		///* 7 - Overcast
		///* 8 - Overcast with low clouds
		///* 9 - Fog
		///* 10 - Light rain
		///* 11 - Rain
		///* 12 - Possible rain
		///* 13 - Rain shower
		///* 14 - Thunderstorm
		///* 15 - Local thunderstorms
		///* 16 - Light snow
		///* 17 - Snow
		///* 18 - Possible snow
		///* 19 - Snow shower
		///* 20 - Rain and snow
		///* 21 - Possible rain and snow
		///* 22 - Rain and snow
		///* 23 - Freezing rain
		///* 24 - Possible freezing rain
		///* 25 - Hail
		///* 26 - Clear (night)
		///* 27 - Mostly clear (night)
		///* 28 - Partly clear (night)
		///* 29 - Mostly cloudy (night)
		///* 30 - Cloudy (night)
		///* 31 - Overcast with low clouds (night)
		///* 32 - Rain shower (night)
		///* 33 - Local thunderstorms (night)
		///* 34 - Snow shower (night)
		///* 35 - Rain and snow (night)
		///* 36 - Possible freezing rain (night)
		///
		///Unit: weather_ico0_36
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon_num")]
		public System.Nullable<System.Int32> Icon_num { get; set; }
		
		/// <summary>
		/// Global downward short-wave radiation flux.
		///Unit: W/m2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="irradiance")]
		public System.Nullable<System.Double> Irradiance { get; set; }
		
		/// <summary>
		/// Total column of ozone.
		///Unit: Dobson
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ozone")]
		public System.Nullable<System.Double> Ozone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public Point_PointCurrentPrecipitationData Precipitation { get; set; }
		
		/// <summary>
		/// Atmospheric pressure at mean sea level.
		///Units: metric = hPa, us = Hg, uk = hPa, ca = kPa
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pressure")]
		public System.Nullable<System.Double> Pressure { get; set; }
		
		/// <summary>
		/// Short text summary of current weather, e.g. `Light rain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// Current temperature 2 metres above ground.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temperature")]
		public System.Nullable<System.Double> Temperature { get; set; }
		
		/// <summary>
		/// UV index, values from zero (low risk of harm) to 11+ (extreme risk of harm).
		///Unit: uv_index
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uv_index")]
		public System.Nullable<System.Double> Uv_index { get; set; }
		
		/// <summary>
		/// Visibility.
		///Units: metric = km, us = mi, uk = mi, ca = km
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<System.Double> Visibility { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wind")]
		public Point_PointCurrentWindData Wind { get; set; }
		
		/// <summary>
		/// Windchill temperature.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wind_chill")]
		public System.Nullable<System.Double> Wind_chill { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointCurrentPrecipitationData
	{
		
		/// <summary>
		/// Current amount of precipitation.
		///Units: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Precipitation type, may be one of:
		///
		///* `none`, it there is no precipitation
		///* `rain`
		///* `snow`
		///* `rain_snow`
		///* `ice pellets`
		///* `frozen rain`
		///
		///Unit: prec_str
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointCurrentWindData
	{
		
		/// <summary>
		/// Wind direction angle in degrees, 180° means wind from the south.
		///Unit: degrees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="angle")]
		public System.Nullable<System.Double> Angle { get; set; }
		
		/// <summary>
		/// Wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.
		///Unit: 16dir
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Wind gust speed.
		///Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gusts")]
		public System.Nullable<System.Double> Gusts { get; set; }
		
		/// <summary>
		/// Wind speed 10 metres above the ground.
		///Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speed")]
		public System.Nullable<System.Double> Speed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDaily
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Point_PointDailyData[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyData
	{
		
		[System.Runtime.Serialization.DataMember(Name="afternoon")]
		public Point_PointDailyAfternoonData Afternoon { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="all_day")]
		public Point_PointDailyAllDayData All_day { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="astro")]
		public Point_PointDailyAstroData Astro { get; set; }
		
		/// <summary>
		/// Datetime in YYYY-MM-DDTHH:MM:SS format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public string Day { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evening")]
		public Point_PointDailyEveningData Evening { get; set; }
		
		/// <summary>
		/// Numeric identifier of the weather icon. The following values can appear:
		///
		///* 1 - Not available
		///* 2 - Sunny
		///* 3 - Mostly sunny
		///* 4 - Partly sunny
		///* 5 - Mostly cloudy
		///* 6 - Cloudy
		///* 7 - Overcast
		///* 8 - Overcast with low clouds
		///* 9 - Fog
		///* 10 - Light rain
		///* 11 - Rain
		///* 12 - Possible rain
		///* 13 - Rain shower
		///* 14 - Thunderstorm
		///* 15 - Local thunderstorms
		///* 16 - Light snow
		///* 17 - Snow
		///* 18 - Possible snow
		///* 19 - Snow shower
		///* 20 - Rain and snow
		///* 21 - Possible rain and snow
		///* 22 - Rain and snow
		///* 23 - Freezing rain
		///* 24 - Possible freezing rain
		///* 25 - Hail
		///* 26 - Clear (night)
		///* 27 - Mostly clear (night)
		///* 28 - Partly clear (night)
		///* 29 - Mostly cloudy (night)
		///* 30 - Cloudy (night)
		///* 31 - Overcast with low clouds (night)
		///* 32 - Rain shower (night)
		///* 33 - Local thunderstorms (night)
		///* 34 - Snow shower (night)
		///* 35 - Rain and snow (night)
		///* 36 - Possible freezing rain (night)
		///
		///Unit: icon
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public System.Nullable<System.Int32> Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="morning")]
		public Point_PointDailyMorningData Morning { get; set; }
		
		/// <summary>
		/// Weather predictability. Values from 1 (very high predictability) to 5 (very low predictability).
		///Unit: 1-5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictability")]
		public System.Nullable<System.Int32> Predictability { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public Point_PointDailyStatsData Statistics { get; set; }
		
		/// <summary>
		/// Short text summary of the weather, e.g. `Light rain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// All day string identifier of the weather icon, e.g. `light_rain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weather")]
		public string Weather { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyAfternoonData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cloud_cover")]
		public Point_PointDailyAfternoonCloudCoverData Cloud_cover { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dew_point")]
		public System.Nullable<System.Double> Dew_point { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feels_like")]
		public System.Nullable<System.Double> Feels_like { get; set; }
		
		/// <summary>
		/// Relative humidity. (afternoon avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="humidity")]
		public System.Nullable<System.Int32> Humidity { get; set; }
		
		/// <summary>
		/// Afternoon umeric identifier of the weather icon. The following values can appear:
		///
		///* 1 - Not available
		///* 2 - Sunny
		///* 3 - Mostly sunny
		///* 4 - Partly sunny
		///* 5 - Mostly cloudy
		///* 6 - Cloudy
		///* 7 - Overcast
		///* 8 - Overcast with low clouds
		///* 9 - Fog
		///* 10 - Light rain
		///* 11 - Rain
		///* 12 - Possible rain
		///* 13 - Rain shower
		///* 14 - Thunderstorm
		///* 15 - Local thunderstorms
		///* 16 - Light snow
		///* 17 - Snow
		///* 18 - Possible snow
		///* 19 - Snow shower
		///* 20 - Rain and snow
		///* 21 - Possible rain and snow
		///* 22 - Rain and snow
		///* 23 - Freezing rain
		///* 24 - Possible freezing rain
		///* 25 - Hail
		///* 26 - Clear (night)
		///* 27 - Mostly clear (night)
		///* 28 - Partly clear (night)
		///* 29 - Mostly cloudy (night)
		///* 30 - Cloudy (night)
		///* 31 - Overcast with low clouds (night)
		///* 32 - Rain shower (night)
		///* 33 - Local thunderstorms (night)
		///* 34 - Snow shower (night)
		///* 35 - Rain and snow (night)
		///* 36 - Possible freezing rain (night)
		///
		///Unit: icon
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public System.Nullable<System.Int32> Icon { get; set; }
		
		/// <summary>
		/// Total column of ozone. (afternoon avg)
		///Unit: Dobson
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ozone")]
		public System.Nullable<System.Double> Ozone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public Point_PointDailyAfternoonPrecipitationData Precipitation { get; set; }
		
		/// <summary>
		/// Atmospheric pressure at mean sea level. (afternoon avg)
		///Units: metric = hPa, us = Hg, uk = hPa, ca = kPa
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pressure")]
		public System.Nullable<System.Double> Pressure { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public Point_PointDailyAfternoonProbData Probability { get; set; }
		
		/// <summary>
		/// Snow depth. (afternoon avg)
		///Units: metric = cm, us = inch, uk = cm, ca = cm
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snow_depth")]
		public System.Nullable<System.Double> Snow_depth { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="soil_temperature")]
		public System.Nullable<System.Double> Soil_temperature { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surface_temperature")]
		public System.Nullable<System.Double> Surface_temperature { get; set; }
		
		/// <summary>
		/// Temperature 2 metres above ground. (afternoon avg)
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temperature")]
		public System.Nullable<System.Double> Temperature { get; set; }
		
		/// <summary>
		/// Visibility. (afternoon avg)
		///Units: metric = km, us = mi, uk = mi, ca = km
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<System.Double> Visibility { get; set; }
		
		/// <summary>
		/// Afternoon day string identifier of the weather icon, e.g. `light_rain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weather")]
		public string Weather { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wind")]
		public Point_PointDailyAfternoonWindData Wind { get; set; }
		
		/// <summary>
		/// Temperature 2 metres above ground. (afternoon avg)
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wind_chill")]
		public System.Nullable<System.Double> Wind_chill { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyAfternoonCloudCoverData
	{
		
		/// <summary>
		/// Percentage of sky covered by high clouds. (afternoon avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Double> High { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by low clouds. (afternoon avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Double> Low { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by middle clouds. (afternoon avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="middle")]
		public System.Nullable<System.Double> Middle { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by clouds. (afternoon avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyAfternoonPrecipitationData
	{
		
		/// <summary>
		/// Total precipitation amount accumulated since last hour. (afternoon sum)
		///Units: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Precipitation type, may be one of:
		///
		///* `none`, it there is no precipitation
		///* `rain`
		///* `snow`
		///* `rain_snow`
		///* `ice pellets`
		///* `frozen rain`
		///
		///Unit: precipitation type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyAfternoonProbData
	{
		
		/// <summary>
		/// Probability the temperature drops below 0 °C. (afternoon avg)
		///Unit: %
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeze")]
		public System.Nullable<System.Double> Freeze { get; set; }
		
		/// <summary>
		/// Probability of non-zero precipitation.
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public System.Nullable<System.Int32> Precipitation { get; set; }
		
		/// <summary>
		/// Total precipitation amount accumulated since last hour.
		///Unit: mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storm")]
		public System.Nullable<System.Double> Storm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyAfternoonWindData
	{
		
		/// <summary>
		/// Afternoon wind direction angle in degrees, 180° means wind from the south.
		///Unit: degrees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="angle")]
		public System.Nullable<System.Double> Angle { get; set; }
		
		/// <summary>
		/// Afternoon wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.
		///Unit: 16dir
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gusts")]
		public System.Nullable<System.Double> Gusts { get; set; }
		
		/// <summary>
		/// Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speed")]
		public System.Nullable<System.Double> Speed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyAllDayData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cloud_cover")]
		public Point_PointDailyAllDayCloudCoverData Cloud_cover { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dew_point")]
		public System.Nullable<System.Double> Dew_point { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dew_point_max")]
		public System.Nullable<System.Double> Dew_point_max { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dew_point_min")]
		public System.Nullable<System.Double> Dew_point_min { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feels_like")]
		public System.Nullable<System.Double> Feels_like { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feels_like_max")]
		public System.Nullable<System.Double> Feels_like_max { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feels_like_min")]
		public System.Nullable<System.Double> Feels_like_min { get; set; }
		
		/// <summary>
		/// Relative humidity. (allday avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="humidity")]
		public System.Nullable<System.Int32> Humidity { get; set; }
		
		/// <summary>
		/// Numeric identifier of the weather icon. The following values can appear:
		///
		///* 1 - Not available
		///* 2 - Sunny
		///* 3 - Mostly sunny
		///* 4 - Partly sunny
		///* 5 - Mostly cloudy
		///* 6 - Cloudy
		///* 7 - Overcast
		///* 8 - Overcast with low clouds
		///* 9 - Fog
		///* 10 - Light rain
		///* 11 - Rain
		///* 12 - Possible rain
		///* 13 - Rain shower
		///* 14 - Thunderstorm
		///* 15 - Local thunderstorms
		///* 16 - Light snow
		///* 17 - Snow
		///* 18 - Possible snow
		///* 19 - Snow shower
		///* 20 - Rain and snow
		///* 21 - Possible rain and snow
		///* 22 - Rain and snow
		///* 23 - Freezing rain
		///* 24 - Possible freezing rain
		///* 25 - Hail
		///* 26 - Clear (night)
		///* 27 - Mostly clear (night)
		///* 28 - Partly clear (night)
		///* 29 - Mostly cloudy (night)
		///* 30 - Cloudy (night)
		///* 31 - Overcast with low clouds (night)
		///* 32 - Rain shower (night)
		///* 33 - Local thunderstorms (night)
		///* 34 - Snow shower (night)
		///* 35 - Rain and snow (night)
		///* 36 - Possible freezing rain (night)
		///
		///Unit: icon
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public System.Nullable<System.Int32> Icon { get; set; }
		
		/// <summary>
		/// Total column of ozone. (allday avg)
		///Unit: Dobson
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ozone")]
		public System.Nullable<System.Double> Ozone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public Point_PointDailyAllDayPrecipitationData Precipitation { get; set; }
		
		/// <summary>
		/// Atmospheric pressure at mean sea level. (allday avg)
		///Units: metric = hPa, us = Hg, uk = hPa, ca = kPa
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pressure")]
		public System.Nullable<System.Double> Pressure { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public Point_PointDailyAllDayProbData Probability { get; set; }
		
		/// <summary>
		/// Snow depth. (allday avg)
		///Units: metric = cm, us = inch, uk = cm, ca = cm
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snow_depth")]
		public System.Nullable<System.Double> Snow_depth { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="soil_temperature")]
		public System.Nullable<System.Double> Soil_temperature { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="soil_temperature_max")]
		public System.Nullable<System.Double> Soil_temperature_max { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="soil_temperature_min")]
		public System.Nullable<System.Double> Soil_temperature_min { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surface_temperature")]
		public System.Nullable<System.Double> Surface_temperature { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surface_temperature_max")]
		public System.Nullable<System.Double> Surface_temperature_max { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surface_temperature_min")]
		public System.Nullable<System.Double> Surface_temperature_min { get; set; }
		
		/// <summary>
		/// Temperature 2 metres above ground. (allday avg)
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temperature")]
		public System.Nullable<System.Double> Temperature { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temperature_max")]
		public System.Nullable<System.Double> Temperature_max { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temperature_min")]
		public System.Nullable<System.Double> Temperature_min { get; set; }
		
		/// <summary>
		/// Visibility. (allday avg)
		///Units: metric = km, us = mi, uk = mi, ca = km
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<System.Double> Visibility { get; set; }
		
		/// <summary>
		/// All day string identifier of the weather icon, e.g. `light_rain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weather")]
		public string Weather { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wind")]
		public Point_PointDailyAllDayWindData Wind { get; set; }
		
		/// <summary>
		/// Temperature 2 metres above ground. (allday avg)
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wind_chill")]
		public System.Nullable<System.Double> Wind_chill { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wind_chill_max")]
		public System.Nullable<System.Double> Wind_chill_max { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wind_chill_min")]
		public System.Nullable<System.Double> Wind_chill_min { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyAllDayCloudCoverData
	{
		
		/// <summary>
		/// Percentage of sky covered by high clouds. (allday avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Double> High { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by low clouds. (allday avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Double> Low { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by middle clouds. (allday avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="middle")]
		public System.Nullable<System.Double> Middle { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by clouds. (allday avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyAllDayPrecipitationData
	{
		
		/// <summary>
		/// Total precipitation amount accumulated since last hour. (allday sum)
		///Units: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Precipitation type, may be one of:
		///
		///* `none`, it there is no precipitation
		///* `rain`
		///* `snow`
		///* `rain_snow`
		///* `ice pellets`
		///* `frozen rain`
		///
		///Unit: precipitation type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyAllDayProbData
	{
		
		/// <summary>
		/// Probability the temperature drops below 0 °C. (allday avg)
		///Unit: %
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeze")]
		public System.Nullable<System.Double> Freeze { get; set; }
		
		/// <summary>
		/// Probability of non-zero precipitation.
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public System.Nullable<System.Int32> Precipitation { get; set; }
		
		/// <summary>
		/// Total precipitation amount accumulated since last hour.
		///Unit: mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storm")]
		public System.Nullable<System.Double> Storm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyAllDayWindData
	{
		
		/// <summary>
		/// All day wind direction angle in degrees, 180° means wind from the south.
		///Unit: degrees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="angle")]
		public System.Nullable<System.Double> Angle { get; set; }
		
		/// <summary>
		/// All day wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.
		///Unit: 16dir
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gusts")]
		public System.Nullable<System.Double> Gusts { get; set; }
		
		/// <summary>
		/// Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speed")]
		public System.Nullable<System.Double> Speed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyAstroData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="moon")]
		public Point_PointDailyMoonData Moon { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sun")]
		public Point_PointDailySunData Sun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyMoonData
	{
		
		/// <summary>
		/// True if the moon never rises on given day, false otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="always_down")]
		public System.Nullable<System.Boolean> Always_down { get; set; }
		
		/// <summary>
		/// True if the moon never sets on given day, false otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="always_up")]
		public System.Nullable<System.Boolean> Always_up { get; set; }
		
		/// <summary>
		/// Name of the moon phase, one of 'new_moon', 'first_quarter', 'full_moon', 'last_quarter'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public string Phase { get; set; }
		
		/// <summary>
		/// Datetime of the moonrise or null if the moon does not rise on given day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rise")]
		public System.Nullable<System.DateTimeOffset> Rise { get; set; }
		
		/// <summary>
		/// Datetime of the moonset or null if the moon does not set on given day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="set")]
		public System.Nullable<System.DateTimeOffset> Set { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailySunData
	{
		
		/// <summary>
		/// True if the sun never rises on given day (polar night), false otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="always_down")]
		public System.Nullable<System.Boolean> Always_down { get; set; }
		
		/// <summary>
		/// True if the sun never sets on given day (polar day), false otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="always_up")]
		public System.Nullable<System.Boolean> Always_up { get; set; }
		
		/// <summary>
		/// Datetime of the sunrise or null during polar day/night.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rise")]
		public System.Nullable<System.DateTimeOffset> Rise { get; set; }
		
		/// <summary>
		/// Datetime of the sunset or null during polar day/night.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="set")]
		public System.Nullable<System.DateTimeOffset> Set { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyEveningData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cloud_cover")]
		public Point_PointDailyEveningCloudCoverData Cloud_cover { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dew_point")]
		public System.Nullable<System.Double> Dew_point { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feels_like")]
		public System.Nullable<System.Double> Feels_like { get; set; }
		
		/// <summary>
		/// Relative humidity. (evening avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="humidity")]
		public System.Nullable<System.Int32> Humidity { get; set; }
		
		/// <summary>
		/// Evening numeric identifier of the weather icon. The following values can appear:
		///
		///* 1 - Not available
		///* 2 - Sunny
		///* 3 - Mostly sunny
		///* 4 - Partly sunny
		///* 5 - Mostly cloudy
		///* 6 - Cloudy
		///* 7 - Overcast
		///* 8 - Overcast with low clouds
		///* 9 - Fog
		///* 10 - Light rain
		///* 11 - Rain
		///* 12 - Possible rain
		///* 13 - Rain shower
		///* 14 - Thunderstorm
		///* 15 - Local thunderstorms
		///* 16 - Light snow
		///* 17 - Snow
		///* 18 - Possible snow
		///* 19 - Snow shower
		///* 20 - Rain and snow
		///* 21 - Possible rain and snow
		///* 22 - Rain and snow
		///* 23 - Freezing rain
		///* 24 - Possible freezing rain
		///* 25 - Hail
		///* 26 - Clear (night)
		///* 27 - Mostly clear (night)
		///* 28 - Partly clear (night)
		///* 29 - Mostly cloudy (night)
		///* 30 - Cloudy (night)
		///* 31 - Overcast with low clouds (night)
		///* 32 - Rain shower (night)
		///* 33 - Local thunderstorms (night)
		///* 34 - Snow shower (night)
		///* 35 - Rain and snow (night)
		///* 36 - Possible freezing rain (night)
		///
		///Unit: icon
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public System.Nullable<System.Int32> Icon { get; set; }
		
		/// <summary>
		/// Total column of ozone. (evening avg)
		///Unit: Dobson
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ozone")]
		public System.Nullable<System.Double> Ozone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public Point_PointDailyEveningPrecipitationData Precipitation { get; set; }
		
		/// <summary>
		/// Atmospheric pressure at mean sea level. (evening avg)
		///Units: metric = hPa, us = Hg, uk = hPa, ca = kPa
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pressure")]
		public System.Nullable<System.Double> Pressure { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public Point_PointDailyEveningProbData Probability { get; set; }
		
		/// <summary>
		/// Snow depth. (evening avg)
		///Units: metric = cm, us = inch, uk = cm, ca = cm
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snow_depth")]
		public System.Nullable<System.Double> Snow_depth { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="soil_temperature")]
		public System.Nullable<System.Double> Soil_temperature { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surface_temperature")]
		public System.Nullable<System.Double> Surface_temperature { get; set; }
		
		/// <summary>
		/// Temperature 2 metres above ground. (evening avg)
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temperature")]
		public System.Nullable<System.Double> Temperature { get; set; }
		
		/// <summary>
		/// Visibility. (evening avg)
		///Units: metric = km, us = mi, uk = mi, ca = km
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<System.Double> Visibility { get; set; }
		
		/// <summary>
		/// Evening day string identifier of the weather icon, e.g. `light_rain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weather")]
		public string Weather { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wind")]
		public Point_PointDailyEveningWindData Wind { get; set; }
		
		/// <summary>
		/// Temperature 2 metres above ground. (evening avg)
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wind_chill")]
		public System.Nullable<System.Double> Wind_chill { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyEveningCloudCoverData
	{
		
		/// <summary>
		/// Percentage of sky covered by high clouds. (evening avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Double> High { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by low clouds. (evening avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Double> Low { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by middle clouds. (evening avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="middle")]
		public System.Nullable<System.Double> Middle { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by clouds. (evening avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyEveningPrecipitationData
	{
		
		/// <summary>
		/// Total precipitation amount accumulated since last hour. (evening sum)
		///Units: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Precipitation type, may be one of:
		///
		///* `none`, it there is no precipitation
		///* `rain`
		///* `snow`
		///* `rain_snow`
		///* `ice pellets`
		///* `frozen rain`
		///
		///Unit: precipitation type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyEveningProbData
	{
		
		/// <summary>
		/// Probability the temperature drops below 0 °C. (evening avg)
		///Unit: %
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeze")]
		public System.Nullable<System.Double> Freeze { get; set; }
		
		/// <summary>
		/// Probability of non-zero precipitation.
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public System.Nullable<System.Int32> Precipitation { get; set; }
		
		/// <summary>
		/// Total precipitation amount accumulated since last hour.
		///Unit: mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storm")]
		public System.Nullable<System.Double> Storm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyEveningWindData
	{
		
		/// <summary>
		/// Evening wind direction angle in degrees, 180° means wind from the south.
		///Unit: degrees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="angle")]
		public System.Nullable<System.Double> Angle { get; set; }
		
		/// <summary>
		/// Evening wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.
		///Unit: 16dir
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gusts")]
		public System.Nullable<System.Double> Gusts { get; set; }
		
		/// <summary>
		/// Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speed")]
		public System.Nullable<System.Double> Speed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyMorningData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cloud_cover")]
		public Point_PointDailyMorningCloudCoverData Cloud_cover { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dew_point")]
		public System.Nullable<System.Double> Dew_point { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feels_like")]
		public System.Nullable<System.Double> Feels_like { get; set; }
		
		/// <summary>
		/// Relative humidity. (morning avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="humidity")]
		public System.Nullable<System.Int32> Humidity { get; set; }
		
		/// <summary>
		/// Morning numeric identifier of the weather icon. The following values can appear:
		///
		///* 1 - Not available
		///* 2 - Sunny
		///* 3 - Mostly sunny
		///* 4 - Partly sunny
		///* 5 - Mostly cloudy
		///* 6 - Cloudy
		///* 7 - Overcast
		///* 8 - Overcast with low clouds
		///* 9 - Fog
		///* 10 - Light rain
		///* 11 - Rain
		///* 12 - Possible rain
		///* 13 - Rain shower
		///* 14 - Thunderstorm
		///* 15 - Local thunderstorms
		///* 16 - Light snow
		///* 17 - Snow
		///* 18 - Possible snow
		///* 19 - Snow shower
		///* 20 - Rain and snow
		///* 21 - Possible rain and snow
		///* 22 - Rain and snow
		///* 23 - Freezing rain
		///* 24 - Possible freezing rain
		///* 25 - Hail
		///* 26 - Clear (night)
		///* 27 - Mostly clear (night)
		///* 28 - Partly clear (night)
		///* 29 - Mostly cloudy (night)
		///* 30 - Cloudy (night)
		///* 31 - Overcast with low clouds (night)
		///* 32 - Rain shower (night)
		///* 33 - Local thunderstorms (night)
		///* 34 - Snow shower (night)
		///* 35 - Rain and snow (night)
		///* 36 - Possible freezing rain (night)
		///
		///Unit: icon
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public System.Nullable<System.Int32> Icon { get; set; }
		
		/// <summary>
		/// Total column of ozone. (morning avg)
		///Unit: Dobson
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ozone")]
		public System.Nullable<System.Double> Ozone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public Point_PointDailyMorningPrecipitationData Precipitation { get; set; }
		
		/// <summary>
		/// Atmospheric pressure at mean sea level. (morning avg)
		///Units: metric = hPa, us = Hg, uk = hPa, ca = kPa
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pressure")]
		public System.Nullable<System.Double> Pressure { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public Point_PointDailyMorningProbData Probability { get; set; }
		
		/// <summary>
		/// Snow depth. (morning avg)
		///Units: metric = cm, us = inch, uk = cm, ca = cm
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snow_depth")]
		public System.Nullable<System.Double> Snow_depth { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="soil_temperature")]
		public System.Nullable<System.Double> Soil_temperature { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surface_temperature")]
		public System.Nullable<System.Double> Surface_temperature { get; set; }
		
		/// <summary>
		/// Temperature 2 metres above ground. (morning avg)
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temperature")]
		public System.Nullable<System.Double> Temperature { get; set; }
		
		/// <summary>
		/// Visibility. (morning avg)
		///Units: metric = km, us = mi, uk = mi, ca = km
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<System.Double> Visibility { get; set; }
		
		/// <summary>
		/// Morning day string identifier of the weather icon, e.g. `light_rain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weather")]
		public string Weather { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wind")]
		public Point_PointDailyMorningWindData Wind { get; set; }
		
		/// <summary>
		/// Temperature 2 metres above ground. (morning avg)
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wind_chill")]
		public System.Nullable<System.Double> Wind_chill { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyMorningCloudCoverData
	{
		
		/// <summary>
		/// Percentage of sky covered by high clouds. (morning avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Double> High { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by low clouds. (morning avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Double> Low { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by middle clouds. (morning avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="middle")]
		public System.Nullable<System.Double> Middle { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by clouds. (morning avg)
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyMorningPrecipitationData
	{
		
		/// <summary>
		/// Total precipitation amount accumulated since last hour. (morning sum)
		///Units: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Precipitation type, may be one of:
		///
		///* `none`, it there is no precipitation
		///* `rain`
		///* `snow`
		///* `rain_snow`
		///* `ice pellets`
		///* `frozen rain`
		///
		///Unit: precipitation type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyMorningProbData
	{
		
		/// <summary>
		/// Probability the temperature drops below 0 °C. (morning avg)
		///Unit: %
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeze")]
		public System.Nullable<System.Double> Freeze { get; set; }
		
		/// <summary>
		/// Probability of non-zero precipitation.
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public System.Nullable<System.Int32> Precipitation { get; set; }
		
		/// <summary>
		/// Total precipitation amount accumulated since last hour.
		///Unit: mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storm")]
		public System.Nullable<System.Double> Storm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyMorningWindData
	{
		
		/// <summary>
		/// Morning wind direction angle in degrees, 180° means wind from the south.
		///Unit: degrees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="angle")]
		public System.Nullable<System.Double> Angle { get; set; }
		
		/// <summary>
		/// Morning wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.
		///Unit: 16dir
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gusts")]
		public System.Nullable<System.Double> Gusts { get; set; }
		
		/// <summary>
		/// Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speed")]
		public System.Nullable<System.Double> Speed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyStatsData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public Point_PointDailyStatsPrecipitationData Precipitation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="temperature")]
		public Point_PointDailyStatsTemperatureData Temperature { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wind")]
		public Point_PointDailyStatsWindData Wind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyStatsPrecipitationData
	{
		
		/// <summary>
		/// Long-term average daily precipitation amount.
		///Units: metric = mm/day, us = inches per day, uk = mm/day, ca = mm/day
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg")]
		public System.Nullable<System.Double> Avg { get; set; }
		
		/// <summary>
		/// Long-term average precipitation probability.
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public System.Nullable<System.Int32> Probability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyStatsTemperatureData
	{
		
		/// <summary>
		/// Long-term temperature average.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg")]
		public System.Nullable<System.Double> Avg { get; set; }
		
		/// <summary>
		/// Long-term daily maximum temperature average.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg_max")]
		public System.Nullable<System.Double> Avg_max { get; set; }
		
		/// <summary>
		/// Long-term daily minimum temperature average.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg_min")]
		public System.Nullable<System.Double> Avg_min { get; set; }
		
		/// <summary>
		/// Historical daily maximum.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="record_max")]
		public System.Nullable<System.Double> Record_max { get; set; }
		
		/// <summary>
		/// Historical daily minimum temperature.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="record_min")]
		public System.Nullable<System.Double> Record_min { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointDailyStatsWindData
	{
		
		/// <summary>
		/// Long-term average wind angle.
		///Unit: deg
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg_angle")]
		public System.Nullable<System.Double> Avg_angle { get; set; }
		
		/// <summary>
		/// Long-term average wind direction in 'N', 'NNE', 'NE', ... 'NNW' format.
		///Unit: 16dir
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg_dir")]
		public string Avg_dir { get; set; }
		
		/// <summary>
		/// Long-term average wind speed.
		///Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg_speed")]
		public System.Nullable<System.Double> Avg_speed { get; set; }
		
		/// <summary>
		/// Historical daily maximum wind gust speed.
		///Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_gust")]
		public System.Nullable<System.Double> Max_gust { get; set; }
		
		/// <summary>
		/// Historical daily maximum wind speed.
		///Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_speed")]
		public System.Nullable<System.Double> Max_speed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alerts")]
		public Point_PointAlerts Alerts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="current")]
		public Point_PointCurrentData Current { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="daily")]
		public Point_PointDaily Daily { get; set; }
		
		/// <summary>
		/// Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="elevation")]
		public int Elevation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hourly")]
		public Point_PointHourly Hourly { get; set; }
		
		/// <summary>
		/// Latitude of the point, always in the format <float><N/S>, for example ``23.5S``
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public string Lat { get; set; }
		
		/// <summary>
		/// Longitude of the point, always in the format <float><E/W>, for example ``23.5W``
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public string Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minutely")]
		public Point_PointMinutely Minutely { get; set; }
		
		/// <summary>
		/// Name of the timezone in format like 'Europe/London'. Available only when the place is specified through place ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// Unit system (metric, uk, ca or us)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointHourly
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Point_PointHourlyData[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointHourlyData
	{
		
		/// <summary>
		/// Convective available potential energy.
		///Unit: J/kg
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cape")]
		public System.Nullable<System.Double> Cape { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cloud_cover")]
		public Point_PointHourlyCloudCoverData Cloud_cover { get; set; }
		
		/// <summary>
		/// Datetime in YYYY-MM-DDTHH:MM:SS format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dew_point")]
		public System.Nullable<System.Double> Dew_point { get; set; }
		
		/// <summary>
		/// Evaporation of liquid water into water vapor.
		///Unit: mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaporation")]
		public System.Nullable<System.Double> Evaporation { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feels_like")]
		public System.Nullable<System.Double> Feels_like { get; set; }
		
		/// <summary>
		/// Relative humidity.
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="humidity")]
		public System.Nullable<System.Int32> Humidity { get; set; }
		
		/// <summary>
		/// Numeric identifier of the weather icon. The following values can appear:
		///
		///* 1 - Not available
		///* 2 - Sunny
		///* 3 - Mostly sunny
		///* 4 - Partly sunny
		///* 5 - Mostly cloudy
		///* 6 - Cloudy
		///* 7 - Overcast
		///* 8 - Overcast with low clouds
		///* 9 - Fog
		///* 10 - Light rain
		///* 11 - Rain
		///* 12 - Possible rain
		///* 13 - Rain shower
		///* 14 - Thunderstorm
		///* 15 - Local thunderstorms
		///* 16 - Light snow
		///* 17 - Snow
		///* 18 - Possible snow
		///* 19 - Snow shower
		///* 20 - Rain and snow
		///* 21 - Possible rain and snow
		///* 22 - Rain and snow
		///* 23 - Freezing rain
		///* 24 - Possible freezing rain
		///* 25 - Hail
		///* 26 - Clear (night)
		///* 27 - Mostly clear (night)
		///* 28 - Partly clear (night)
		///* 29 - Mostly cloudy (night)
		///* 30 - Cloudy (night)
		///* 31 - Overcast with low clouds (night)
		///* 32 - Rain shower (night)
		///* 33 - Local thunderstorms (night)
		///* 34 - Snow shower (night)
		///* 35 - Rain and snow (night)
		///* 36 - Possible freezing rain (night)
		///
		///Unit: weather_ico0_36
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public System.Nullable<System.Int32> Icon { get; set; }
		
		/// <summary>
		/// Global downward short-wave radiation flux.
		///Unit: W/m2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="irradiance")]
		public System.Nullable<System.Double> Irradiance { get; set; }
		
		/// <summary>
		/// Surface lifted index.
		///Unit: K
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lftx")]
		public System.Nullable<System.Double> Lftx { get; set; }
		
		/// <summary>
		/// Total column of ozone.
		///Unit: Dobson
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ozone")]
		public System.Nullable<System.Double> Ozone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public Point_PointHourlyPrecipitationData Precipitation { get; set; }
		
		/// <summary>
		/// Atmospheric pressure at mean sea level.
		///Units: metric = hPa, us = Hg, uk = hPa, ca = kPa
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pressure")]
		public System.Nullable<System.Double> Pressure { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public Point_PointHourlyProbData Probability { get; set; }
		
		/// <summary>
		/// Snow depth.
		///Units: metric = cm, us = inch, uk = cm, ca = cm
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snow_depth")]
		public System.Nullable<System.Double> Snow_depth { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="soil_temperature")]
		public System.Nullable<System.Double> Soil_temperature { get; set; }
		
		/// <summary>
		/// Short text summary of the weather, e.g. `Light rain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// Sunshine duration since start of previous hour.
		///Unit: s
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sunshine_duration")]
		public System.Nullable<System.Double> Sunshine_duration { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surface_temperature")]
		public System.Nullable<System.Double> Surface_temperature { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temperature")]
		public System.Nullable<System.Double> Temperature { get; set; }
		
		/// <summary>
		/// UV index, values from zero (low risk of harm) to 11+ (extreme risk of harm).
		///Unit: uv_index
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uv_index")]
		public System.Nullable<System.Double> Uv_index { get; set; }
		
		/// <summary>
		/// Visibility.
		///Units: metric = km, us = mi, uk = mi, ca = km
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<System.Double> Visibility { get; set; }
		
		/// <summary>
		/// String identifier of the weather icon, e.g. `light_rain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weather")]
		public string Weather { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wind")]
		public Point_PointHourlyWindData Wind { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wind_chill")]
		public System.Nullable<System.Double> Wind_chill { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointHourlyCloudCoverData
	{
		
		/// <summary>
		/// Percentage of sky covered by high clouds.
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Double> High { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by low clouds.
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Double> Low { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by middle clouds.
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="middle")]
		public System.Nullable<System.Double> Middle { get; set; }
		
		/// <summary>
		/// Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointHourlyPrecipitationData
	{
		
		/// <summary>
		/// Total precipitation amount accumulated since last hour.
		///Units: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convective")]
		public System.Nullable<System.Double> Convective { get; set; }
		
		/// <summary>
		/// Precipitation in the surrounding of queried location. The data is 7x7 ASCII art string, queried location being in the center. Character `#` means there is precipitation, `.` means no precipitation. The distance between neighboring cells is 0.25°.
		///Unit: rainspot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rainspot")]
		public string Rainspot { get; set; }
		
		/// <summary>
		/// Total precipitation amount accumulated since last hour.
		///Units: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Precipitation type, may be one of:
		///
		///* `none`, it there is no precipitation
		///* `rain`
		///* `snow`
		///* `rain_snow`
		///* `ice pellets`
		///* `frozen rain`
		///
		///Unit: precipitation type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointHourlyProbData
	{
		
		/// <summary>
		/// Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeze")]
		public System.Nullable<System.Double> Freeze { get; set; }
		
		/// <summary>
		/// Probability of non-zero precipitation.
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public System.Nullable<System.Int32> Precipitation { get; set; }
		
		/// <summary>
		/// Total precipitation amount accumulated since last hour.
		///Unit: mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storm")]
		public System.Nullable<System.Double> Storm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointHourlyWindData
	{
		
		/// <summary>
		/// Wind direction angle in degrees, 180° means wind from the south.
		///Unit: degrees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="angle")]
		public System.Nullable<System.Double> Angle { get; set; }
		
		/// <summary>
		/// Wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.
		///Unit: 16dir
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gusts")]
		public System.Nullable<System.Double> Gusts { get; set; }
		
		/// <summary>
		/// Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speed")]
		public System.Nullable<System.Double> Speed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointMinutely
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Point_PointMinutelyPrecipitationData[] Data { get; set; }
		
		/// <summary>
		/// Text summary about upcoming precipitation.
		///Unit: summary
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point_PointMinutelyPrecipitationData
	{
		
		/// <summary>
		/// Datetime in YYYY-MM-DDTHH:MM:SS format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Minutely precipitation amount (per hour). For the startup tier, showing one value per 10 minutes.
		///For other tiers, showing one value per each minute.
		///
		///Unit: mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public System.Nullable<System.Double> Precipitation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeMachine_PointDailyStatsData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public TimeMachine_PointDailyStatsPrecipitationData Precipitation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="temperature")]
		public TimeMachine_PointDailyStatsTemperatureData Temperature { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wind")]
		public TimeMachine_PointDailyStatsWindData Wind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeMachine_PointDailyStatsPrecipitationData
	{
		
		/// <summary>
		/// Long-term average daily precipitation amount.
		///Units: metric = mm/day, us = inches per day, uk = mm/day, ca = mm/day
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg")]
		public System.Nullable<System.Double> Avg { get; set; }
		
		/// <summary>
		/// Long-term average precipitation probability.
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public System.Nullable<System.Int32> Probability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeMachine_PointDailyStatsTemperatureData
	{
		
		/// <summary>
		/// Long-term temperature average.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg")]
		public System.Nullable<System.Double> Avg { get; set; }
		
		/// <summary>
		/// Long-term daily maximum temperature average.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg_max")]
		public System.Nullable<System.Double> Avg_max { get; set; }
		
		/// <summary>
		/// Long-term daily minimum temperature average.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg_min")]
		public System.Nullable<System.Double> Avg_min { get; set; }
		
		/// <summary>
		/// Historical daily maximum.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="record_max")]
		public System.Nullable<System.Double> Record_max { get; set; }
		
		/// <summary>
		/// Historical daily minimum temperature.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="record_min")]
		public System.Nullable<System.Double> Record_min { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeMachine_PointDailyStatsWindData
	{
		
		/// <summary>
		/// Long-term average wind angle.
		///Unit: deg
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg_angle")]
		public System.Nullable<System.Double> Avg_angle { get; set; }
		
		/// <summary>
		/// Long-term average wind direction in 'N', 'NNE', 'NE', ... 'NNW' format.
		///Unit: 16dir
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg_dir")]
		public string Avg_dir { get; set; }
		
		/// <summary>
		/// Long-term average wind speed.
		///Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg_speed")]
		public System.Nullable<System.Double> Avg_speed { get; set; }
		
		/// <summary>
		/// Historical daily maximum wind gust speed.
		///Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_gust")]
		public System.Nullable<System.Double> Max_gust { get; set; }
		
		/// <summary>
		/// Historical daily maximum wind speed.
		///Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_speed")]
		public System.Nullable<System.Double> Max_speed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeMachine_TimeMachine
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TimeMachine_TimeMachineHourlyData[] Data { get; set; }
		
		/// <summary>
		/// Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="elevation")]
		public int Elevation { get; set; }
		
		/// <summary>
		/// Latitude of the point, always in the format <float><N/S>, for example ``23.5S``
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public string Lat { get; set; }
		
		/// <summary>
		/// Longitude of the point, always in the format <float><E/W>, for example ``23.5W``
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public string Lon { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public TimeMachine_PointDailyStatsData Statistics { get; set; }
		
		/// <summary>
		/// Name of the timezone in format like 'Europe/London'. Available only when the place is specified through place ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// Unit system (metric, uk, ca or us)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeMachine_TimeMachineHourlyData
	{
		
		/// <summary>
		/// Convective available potential energy.
		///Unit: J/kg
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cape")]
		public System.Nullable<System.Int32> Cape { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cloud_cover")]
		public TimeMachine_TimeMachineCloudCoverData Cloud_cover { get; set; }
		
		/// <summary>
		/// Datetime in YYYY-MM-DDTHH:MM:SS format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dew_point")]
		public System.Nullable<System.Double> Dew_point { get; set; }
		
		/// <summary>
		/// Evaporation of liquid water into water vapor.
		///Unit: mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaporation")]
		public System.Nullable<System.Int32> Evaporation { get; set; }
		
		/// <summary>
		/// Feels like temperature.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feels_like")]
		public System.Nullable<System.Double> Feels_like { get; set; }
		
		/// <summary>
		/// Relative humidity.
		///Unit: \%
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="humidity")]
		public System.Nullable<System.Int32> Humidity { get; set; }
		
		/// <summary>
		/// Numeric identifier of the weather icon. The following values can appear:
		///
		///* 1 - Not available
		///* 2 - Sunny
		///* 3 - Mostly sunny
		///* 4 - Partly sunny
		///* 5 - Mostly cloudy
		///* 6 - Cloudy
		///* 7 - Overcast
		///* 8 - Overcast with low clouds
		///* 9 - Fog
		///* 10 - Light rain
		///* 11 - Rain
		///* 12 - Possible rain
		///* 13 - Rain shower
		///* 14 - Thunderstorm
		///* 15 - Local thunderstorms
		///* 16 - Light snow
		///* 17 - Snow
		///* 18 - Possible snow
		///* 19 - Snow shower
		///* 20 - Rain and snow
		///* 21 - Possible rain and snow
		///* 22 - Rain and snow
		///* 23 - Freezing rain
		///* 24 - Possible freezing rain
		///* 25 - Hail
		///* 26 - Clear (night)
		///* 27 - Mostly clear (night)
		///* 28 - Partly clear (night)
		///* 29 - Mostly cloudy (night)
		///* 30 - Cloudy (night)
		///* 31 - Overcast with low clouds (night)
		///* 32 - Rain shower (night)
		///* 33 - Local thunderstorms (night)
		///* 34 - Snow shower (night)
		///* 35 - Rain and snow (night)
		///* 36 - Possible freezing rain (night)
		///
		///Unit: N/A
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public System.Nullable<System.Int32> Icon { get; set; }
		
		/// <summary>
		/// Global downward short-wave radiation flux.
		///Unit: W/m2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="irradiance")]
		public System.Nullable<System.Int32> Irradiance { get; set; }
		
		/// <summary>
		/// Total column of ozone.
		///Unit: Dobson
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ozone")]
		public System.Nullable<System.Int32> Ozone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="precipitation")]
		public TimeMachine_TimeMachinePrecipitationData Precipitation { get; set; }
		
		/// <summary>
		/// Atmospheric pressure at mean sea level.
		///Units: metric = hPa, us = Hg, uk = hPa, ca = kPa
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pressure")]
		public System.Nullable<System.Double> Pressure { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="soil_temperature")]
		public System.Nullable<System.Double> Soil_temperature { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surface_temperature")]
		public System.Nullable<System.Double> Surface_temperature { get; set; }
		
		/// <summary>
		/// Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temperature")]
		public System.Nullable<System.Double> Temperature { get; set; }
		
		/// <summary>
		/// String identifier of the weather icon, e.g. `light_rain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weather")]
		public string Weather { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wind")]
		public TimeMachine_TimeMachineWindData Wind { get; set; }
		
		/// <summary>
		/// Windchill temperature.
		///Units: metric = °C, us = °F, uk = °C, ca = °C
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wind_chill")]
		public System.Nullable<System.Double> Wind_chill { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeMachine_TimeMachineCloudCoverData
	{
		
		/// <summary>
		/// Percentage of sky covered by high clouds.
		///Unit: %
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Int32> High { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by low clouds.
		///Unit: %
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Int32> Low { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by middle clouds.
		///Unit: %
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="middle")]
		public System.Nullable<System.Int32> Middle { get; set; }
		
		/// <summary>
		/// Percentage of sky covered by clouds.
		///Unit: %
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeMachine_TimeMachinePrecipitationData
	{
		
		/// <summary>
		/// Total precipitation amount accumulated since last hour.
		///Units: metric = mm/h, us = inches per hour, uk = mm/h, ca = mm/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Precipitation type, may be one of:
		///
		///* `none`, it there is no precipitation
		///* `rain`
		///* `snow`
		///* `rain_snow`
		///* `ice pellets`
		///* `frozen rain`
		///
		///Unit: precipitation type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeMachine_TimeMachineWindData
	{
		
		/// <summary>
		/// Wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.
		///Unit: deg
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="angle")]
		public System.Nullable<System.Int32> Angle { get; set; }
		
		/// <summary>
		/// Wind direction in `N`, `NNE`, `NE`, ..., `NNW` format.
		///Unit: 16dir
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Wind gust speed.
		///Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gusts")]
		public System.Nullable<System.Int32> Gusts { get; set; }
		
		/// <summary>
		/// Wind speed 10 metres above the ground.
		///Units: metric = m/s, us = mph, uk = mph, ca = km/h
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speed")]
		public System.Nullable<System.Int32> Speed { get; set; }
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Units
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		metric = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uk = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ca = 4,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns air quality data for a single point (geographic name or GPS)
		/// ## Air quality forecast for a single location
		/// 
		/// ### Location specification
		/// The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this:
		/// 1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`.
		/// 2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
		/// 
		/// ### Notes
		/// * **For a detailed description of variables, please consult ⚠️ <a href="https://www.meteosource.com/documentation#description_aq" target="_blank">description of variables</a> ⚠️ in Documentation or `Schema` of the response (link next to Example value in the Responses section below).**
		/// * Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them.
		/// * The response contains an `Expires` header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**.
		/// * Meteosource API supports HTTP compression. To enable it, simply add an `Accept-Encoding: gzip` header to your request.
		/// * When daylight saving time starts, one hourly record will be missing (typically `2:00:00 AM`). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically `2:00:00 AM`).
		/// Air_quality_air_quality_get air_quality
		/// </summary>
		/// <param name="place_id">Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).</param>
		/// <param name="lat">Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4</param>
		/// <param name="lon">Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4</param>
		/// <param name="timezone">Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used.
		///The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used.
		///Alternatively you may use the value ``auto`` in which case the local timezone of the location is used.
		///The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
		///</param>
		/// <param name="key">Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.</param>
		/// <returns>Successful Response</returns>
		public async Task<AirQuality_PointData> Air_quality_air_quality_getAsync(string place_id, string lat, string lon, string timezone, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "air_quality?place_id=" + (place_id==null? "" : System.Uri.EscapeDataString(place_id))+"&lat=" + (lat==null? "" : System.Uri.EscapeDataString(lat))+"&lon=" + (lon==null? "" : System.Uri.EscapeDataString(lon))+"&timezone=" + (timezone==null? "" : System.Uri.EscapeDataString(timezone))+"&key=" + (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AirQuality_PointData>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for places. Complete words required.
		/// ## Search for places
		/// 
		/// You can use this endpoint to obtain `place_id` of the location you want, to be used in `point` endpoint.
		/// The response also contains detailed information about the location, such as coordinates, timezone and the country the place belongs to.
		/// 
		/// Unlike the `/find_place_prefix` endpoint, complete words are required here. You can search for cities,
		/// mountains, lakes, countries, ZIP codes, etc. The response can contain multiple places, sorted by relevance.
		/// You can then identify the one you want by coordinates, country, or the administrative area.
		/// Find_places_find_places_get find_places
		/// </summary>
		/// <param name="text">Place name or ZIP code</param>
		/// <param name="language">The language of text summaries and place names (variable names are never translated). Available languages are:
		///
		///   * ``en``: English
		///   * ``es``: Spanish
		///   * ``fr``: French
		///   * ``de``: German
		///   * ``pl``: Polish
		///   * ``pt``: Portuguese
		///   * ``cs``: Czech
		///</param>
		/// <param name="key">Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.</param>
		/// <returns>Successful Response</returns>
		public async Task<FindPlacesModel[]> Find_places_find_places_getAsync(string text, Language language, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "find_places?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&language=" + language+"&key=" + (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FindPlacesModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Prefix search for places. Useful for autocomplete forms.
		/// ## Search for places by prefix
		/// 
		/// You can use this endpoint to obtain `place_id` of the location you want, to be used in `point` endpoint. The response also contains detailed information about the location, such as coordinates, timezone and the country the place belongs to.
		/// 
		/// Unlike the `/find_places` endpoint, you should only specify the prefix of the place you are looking for. This is particularly useful for autocomplete forms. You can search for cities, mountains, lakes, countries, ZIP codes, etc. The response can contain multiple places, sorted by relevance. You can then identify the one you want by coordinates, country, or the administrative area.
		/// Find_places_prefix_find_places_prefix_get find_places_prefix
		/// </summary>
		/// <param name="text">Place name or ZIP code</param>
		/// <param name="language">The language of text summaries and place names (variable names are never translated). Available languages are:
		///
		///   * ``en``: English
		///   * ``es``: Spanish
		///   * ``fr``: French
		///   * ``de``: German
		///   * ``pl``: Polish
		///   * ``pt``: Portuguese
		///   * ``cs``: Czech
		///</param>
		/// <param name="key">Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.</param>
		/// <returns>Successful Response</returns>
		public async Task<FindPlacesModel[]> Find_places_prefix_find_places_prefix_getAsync(string text, Language language, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "find_places_prefix?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&language=" + language+"&key=" + (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FindPlacesModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns PNG weather map for given area and variable
		/// ## PNG weather forecast maps for given area and variable
		/// 
		/// ### Area specification
		/// There are two ways to specify geographical area you need for your map:
		/// 1. Specify `X` and `Y` coordinates and zoom level `Z` of desired tile in <a href="https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/" rel="nofollow" target="_blank">Google Maps Tile notation</a>.
		/// 2. Specify latitude and longitude bounds of the area you want to cover.
		/// 
		/// ### Notes
		/// * The resulting PNG maps are **always** in <a href="https://epsg.io/3857" rel="nofollow" target="_blank">Google Mercator projection (EPSG:3857)</a>.
		/// * As Meteosource only covers areas between latitudes 80° and -80°, you can only request maps within these bounds, when specifying the latitude and longitude boundaries. When specifying the area using Google Maps Tile notation, the regions outside our supported latitudes will be fully transparent.
		/// * The finest resolution is not available for maps covering very large regions. The resulting map will be automatically downscaled in this case, to guarantee high-speed responses.
		/// * Weather maps are only supported for forecasts, not for archive data.
		/// Map_map_get map
		/// </summary>
		/// <param name="tile_x">The X coordinate of Google Maps tile</param>
		/// <param name="tile_y">The Y coordinate of Google Maps tile</param>
		/// <param name="tile_zoom">The zoom level of Google Maps tile</param>
		/// <param name="min_lat">Minimal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2
		///</param>
		/// <param name="min_lon">Minimal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2
		///</param>
		/// <param name="max_lat">Maximal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2.
		///</param>
		/// <param name="max_lon">Maximal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2
		///</param>
		/// <param name="variable">Name of the variable for your map. Available values are:
		///
		///* `temperature`: Temperature 2 metres above ground
		///* `feels_like_temperature`: Feels like temperature
		///* `clouds`: Percentage of sky covered by clouds
		///* `precipitation`: Total precipitation amount accumulated since last hour
		///* `wind_speed`: Wind speed 10 metres above the ground
		///* `wind_gust`: Wind gust speed
		///* `pressure`: Atmospheric pressure at mean sea level
		///* `humidity`: Relative humidity
		///* `wave_height`: Wave height
		///* `wave_period`: Wave period
		///* `sea_temperature`: Sea temperature (available only for +-24 hours)
		///* `air_quality`: Air quality index
		///* `ozone_surface`: Ozone at surface level
		///* `ozone_total`: Total column ozone
		///* `no2`: Nitrogen dioxide at surface level
		///* `pm2.5`: Particulate matter d < 2.5 µm (PM2.5)
		///</param>
		/// <param name="datetime">There are two ways to specify date and time for your map:
		///
		///1. Datetime in `YYYY-MM-DDTHH:MM` format and `UTC` timezone, e.g. `2021-08-24T12:00`
		///2. Offset from current time in `[+-]<minutes|hours|days>` format, e.g. `+10minutes`, `-2hours` or `+1days`
		///</param>
		/// <param name="key">Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.</param>
		/// <returns>Successful Response</returns>
		public async Task Map_map_getAsync(int tile_x, int tile_y, int tile_zoom, string min_lat, string min_lon, string max_lat, string max_lon, string variable, string datetime, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "map?tile_x="+tile_x+"&tile_y="+tile_y+"&tile_zoom="+tile_zoom+"&min_lat=" + (min_lat==null? "" : System.Uri.EscapeDataString(min_lat))+"&min_lon=" + (min_lon==null? "" : System.Uri.EscapeDataString(min_lon))+"&max_lat=" + (max_lat==null? "" : System.Uri.EscapeDataString(max_lat))+"&max_lon=" + (max_lon==null? "" : System.Uri.EscapeDataString(max_lon))+"&variable=" + (variable==null? "" : System.Uri.EscapeDataString(variable))+"&datetime=" + (datetime==null? "" : System.Uri.EscapeDataString(datetime))+"&key=" + (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the nearest named location for a given GPS coordinates.
		/// ## Search for nearest place by coordinates
		/// 
		/// You can use this endpoint to find the nearest place from given coordinates.
		/// 
		/// *Note: If you specify coordinates of a secluded place (e.g. middle of the ocean), the nearest point can be very far from the coordinates.*
		/// Nearest_place_nearest_place_get nearest_place
		/// </summary>
		/// <param name="lat">Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4</param>
		/// <param name="lon">Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4</param>
		/// <param name="language">The language of text summaries and place names (variable names are never translated). Available languages are:
		///
		///   * ``en``: English
		///   * ``es``: Spanish
		///   * ``fr``: French
		///   * ``de``: German
		///   * ``pl``: Polish
		///   * ``pt``: Portuguese
		///   * ``cs``: Czech
		///</param>
		/// <param name="key">Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.</param>
		/// <returns>Successful Response</returns>
		public async Task<FindPlacesModel> Nearest_place_nearest_place_getAsync(string lat, string lon, Language language, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nearest_place?lat=" + (lat==null? "" : System.Uri.EscapeDataString(lat))+"&lon=" + (lon==null? "" : System.Uri.EscapeDataString(lon))+"&language=" + language+"&key=" + (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FindPlacesModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns weather data for a single point (geographic name or GPS)
		/// ## Current weather and forecast for single location
		/// 
		/// ### Location specification
		/// The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this:
		/// 1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`.
		/// 2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
		/// 
		/// *Note: For mountains, it is usually better to specify the `place_id` rather than the `lat` and `lon`. When you use `place_id`, you are guaranteed to receive forecasts for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*
		/// 
		/// ### Sections
		/// The endpoint can return multiple sections of data. To obtain the best performance, we advise only requesting the sections you actually need. The available sections are as follows:
		/// 
		/// * Current weather situation
		/// * Hourly forecast (for 24/48/96/168 hours, depending on the tier)
		/// * Daily forecast (for 7/10/30 days, depending on the tier)
		/// * Minutely precipitation forecast (for 60 minutes in the following hour, only for higher tiers)
		/// * Weather alerts (only for higher tiers)
		/// 
		/// By default, only the current and hourly sections are returned. The division into daily parts (morning, afternoon and evening) is only available for the first 7 days of the forecast. For details regarding available parameters, see the parameter description below.
		/// 
		/// ### Notes
		/// * **For a detailed description of variables (e.g. icons), please consult ⚠️ <a href="https://www.meteosource.com/documentation#description" target="_blank">description of variables</a> ⚠️ in Documentation or `Schema` of the response (link next to Example value in the Responses section below).**
		/// * Variables can be instantaneous, averaged, or accumulated over certain time. For example, `precipitation` forecast provides the precipitation accumulated until the next hour (data with timestamp as `12:00:00` is rain accumulated from `12:00:00` to `13:00:00`).
		/// * Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them.
		/// * The response contains an `Expires` header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**.
		/// * Meteosource API supports HTTP compression. To enable it, simply add an `Accept-Encoding: gzip` header to your request.
		/// * When daylight saving time starts, one hourly record will be missing (typically `2:00:00 AM`). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically `2:00:00 AM`).
		/// * The detailed description of weather alerts is only available in English. The alert category is translated into selected language.
		/// Point_point_get point
		/// </summary>
		/// <param name="place_id">Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).</param>
		/// <param name="lat">Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4</param>
		/// <param name="lon">Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4</param>
		/// <param name="sections">Sections to be included in the response. You can specify more section by separating the values with a comma. The available values are:
		///
		///* ``current``: Current weather situation
		///* ``daily``: Forecasts for each whole day, without the daily parts
		///* ``daily-parts``: Forecasts for each whole day, morning, afternoon and evening
		///    * Important: forecast for the morning, afternoon and evening is available only for the first
		///      7 days in the forecast
		///* ``hourly``: Forecasts with hourly resolution
		///* ``minutely``: Precipitation forecast with 1 minute resolution
		///* ``alerts``: The weather alerts
		///* ``all``: All sections
		///</param>
		/// <param name="timezone">Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used.
		///The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used.
		///Alternatively you may use the value ``auto`` in which case the local timezone of the location is used.
		///The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
		///</param>
		/// <param name="language">The language of text summaries and place names (variable names are never translated). Available languages are:
		///
		///   * ``en``: English
		///   * ``es``: Spanish
		///   * ``fr``: French
		///   * ``de``: German
		///   * ``pl``: Polish
		///   * ``pt``: Portuguese
		///   * ``cs``: Czech
		///</param>
		/// <param name="units">Unit system to be used. The available values are:
		///
		///* `auto`: Select the system automatically, based on the forecast location.
		///* `metric`: Metric (SI) units (`°C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`).
		///* `us`: Imperial units (`°F`, `in/h`, `mph`, `in`, `mi`, `Hg`).
		///* `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`.
		///* `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`.
		///</param>
		/// <param name="key">Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.</param>
		/// <returns>Successful Response</returns>
		public async Task<Point_PointData> Point_point_getAsync(string place_id, string lat, string lon, string sections, string timezone, Language language, Units units, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "point?place_id=" + (place_id==null? "" : System.Uri.EscapeDataString(place_id))+"&lat=" + (lat==null? "" : System.Uri.EscapeDataString(lat))+"&lon=" + (lon==null? "" : System.Uri.EscapeDataString(lon))+"&sections=" + (sections==null? "" : System.Uri.EscapeDataString(sections))+"&timezone=" + (timezone==null? "" : System.Uri.EscapeDataString(timezone))+"&language=" + language+"&units=" + units+"&key=" + (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Point_PointData>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns weather data for a single location and given day in the past
		/// ## Actual weather data for a single location and day in the past
		/// 
		/// The output contains actual weather data for each day up to 20 years in the past, and long-term statistics of selected weather variables aggregated over 40 years.
		/// 
		/// ### Location specification
		/// The location of the weather data must be specified. There are two ways to do this:
		/// 1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`.
		/// 2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
		/// 
		/// *Note: For mountains, it is usually better to specify the `place_id` rather than the `lat` and `lon`. When you use `place_id`, you are guaranteed to receive data for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*
		/// Time_machine_time_machine_get time_machine
		/// </summary>
		/// <param name="place_id">Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).</param>
		/// <param name="lat">Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4</param>
		/// <param name="lon">Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4</param>
		/// <param name="date">The day of the data in the past. Specify in `YYYY-MM-DD` format, e.g. `2021-08-24`.
		///</param>
		/// <param name="timezone">Timezone to be used for the date fields. If not specified, local timezone of the location will be used.
		///The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used.
		///Alternatively you may use the value ``auto`` in which case the local timezone of the location is used.
		///The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
		///</param>
		/// <param name="units">Unit system to be used. The available values are:
		///
		///* `auto`: Select the system automatically, based on the forecast location.
		///* `metric`: Metric (SI) units (`°C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`).
		///* `us`: Imperial units (`°F`, `in/h`, `mph`, `in`, `mi`, `Hg`).
		///* `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`.
		///* `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`.
		///</param>
		/// <param name="key">Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.</param>
		/// <returns>Successful Response</returns>
		public async Task<TimeMachine_TimeMachine> Time_machine_time_machine_getAsync(string place_id, string lat, string lon, System.DateOnly date, string timezone, Units units, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_machine?place_id=" + (place_id==null? "" : System.Uri.EscapeDataString(place_id))+"&lat=" + (lat==null? "" : System.Uri.EscapeDataString(lat))+"&lon=" + (lon==null? "" : System.Uri.EscapeDataString(lon))+"&date="+date+"&timezone=" + (timezone==null? "" : System.Uri.EscapeDataString(timezone))+"&units=" + units+"&key=" + (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimeMachine_TimeMachine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
