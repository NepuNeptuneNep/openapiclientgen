//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Artifact
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentLength")]
		public System.Nullable<System.Double> ContentLength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtifactFormat
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileExtension")]
		public string FileExtension { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forContentType")]
		public string ForContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preserveAspectRatio")]
		public System.Nullable<System.Boolean> PreserveAspectRatio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upscaleAllowed")]
		public System.Nullable<System.Boolean> UpscaleAllowed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtifactFormats
	{
		
		[System.Runtime.Serialization.DataMember(Name="contribution")]
		public ArtifactFormat[] Contribution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cover")]
		public ArtifactFormat[] Cover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileImage")]
		public ArtifactFormat[] ProfileImage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Assignment
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowsAnonymousContributions")]
		public System.Nullable<System.Boolean> AllowsAnonymousContributions { get; set; }
		
		/// <summary>
		/// An optional call to action specific to this assignment. ie. Submit your snow pictures.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callToAction")]
		public string CallToAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cover")]
		public MediaUsage Cover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="embargo")]
		public System.Nullable<System.DateTimeOffset> Embargo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ends")]
		public System.Nullable<System.DateTimeOffset> Ends { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featured")]
		public System.Nullable<System.Boolean> Featured { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mediaRequired")]
		public System.Nullable<System.Boolean> MediaRequired { get; set; }
		
		/// <summary>
		/// Optional credential id of the moderator who owns this particular assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moderator")]
		public string Moderator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Helper value. Is this assignment currently open? Based on the value of the ends field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="open")]
		public System.Nullable<System.Boolean> Open { get; set; }
		
		/// <summary>
		/// An optional assignment specific message to be displayed on successful contribution submission. For example, this might be used to inform contributors of assignment specific moderation time frames.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiptMessage")]
		public string ReceiptMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="starts")]
		public System.Nullable<System.DateTimeOffset> Starts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlWords")]
		public string UrlWords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webUrl")]
		public string WebUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaUsage
	{
		
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public Artifact[] Artifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="media")]
		public Media Media { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Media
	{
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Double> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="place")]
		public Place Place { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Place
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geohash")]
		public string Geohash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="google")]
		public string Google { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latLong")]
		public LatLong LatLong { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osm")]
		public OsmId Osm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LatLong
	{
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OsmId
	{
		
		[System.Runtime.Serialization.DataMember(Name="osmId")]
		public System.Nullable<System.Double> OsmId1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osmType")]
		public string OsmType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Optional HTML hexcode colour
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colour")]
		public string Colour { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagSet")]
		public TagSet TagSet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlWords")]
		public string UrlWords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagSet
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssignmentSubmission
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowsAnonymousContributions")]
		public System.Nullable<System.Boolean> AllowsAnonymousContributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cover")]
		public MediaUsage Cover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="embargo")]
		public System.Nullable<System.DateTimeOffset> Embargo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ends")]
		public System.Nullable<System.DateTimeOffset> Ends { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featured")]
		public System.Nullable<System.Boolean> Featured { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mediaRequired")]
		public System.Nullable<System.Boolean> MediaRequired { get; set; }
		
		/// <summary>
		/// Optional credential id of the login which will moderator this assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moderator")]
		public string Moderator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An optional assignment specific message to be displayed on successful contribution submission. For example, this might be used to inform contributors of assignment specific moderation time frames.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiptMessage")]
		public string ReceiptMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="starts")]
		public System.Nullable<System.DateTimeOffset> Starts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlWords")]
		public string UrlWords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Authority
	{
		
		[System.Runtime.Serialization.DataMember(Name="client")]
		public Client Client { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Client
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="bio")]
		public string Bio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registered")]
		public System.Nullable<System.DateTimeOffset> Registered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeLogItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.DateTimeOffset Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Contribution
	{
		
		[System.Runtime.Serialization.DataMember(Name="assignment")]
		public Assignment Assignment { get; set; }
		
		/// <summary>
		/// The public attribution for this contribution. This will be the display name of the registered user or the contributor's first and last name if they provided them while making a non authenticated contribution. A blank attribution field indicates and anonymous contribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribution")]
		public string Attribution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headline")]
		public string Headline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mediaUsages")]
		public MediaUsage[] MediaUsages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moderationHistory")]
		public ModerationHistoryItem[] ModerationHistory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="place")]
		public Place Place { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlWords")]
		public string UrlWords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="via")]
		public Via Via { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModerationHistoryItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public ModerationAction Action { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.DateTimeOffset Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModerationAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resultingState")]
		public ModerationState ResultingState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModerationState
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="public")]
		public bool Public { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Via
	{
		
		[System.Runtime.Serialization.DataMember(Name="authority")]
		public Authority Authority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressPlace")]
		public Place IpAddressPlace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Credential
	{
		
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorField
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public ErrorField[] Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Export
	{
		
		[System.Runtime.Serialization.DataMember(Name="downloadUrl")]
		public string DownloadUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="finished")]
		public System.Nullable<System.DateTimeOffset> Finished { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public System.Nullable<System.Double> Progress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.DateTimeOffset Started { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="step")]
		public string Step { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportSummary
	{
		
		/// <summary>
		/// The number of contributions selected for export.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contributions")]
		public double Contributions { get; set; }
		
		/// <summary>
		/// Human readable estimate of the export size. ie. '10MB'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedSize")]
		public string EstimatedSize { get; set; }
		
		/// <summary>
		/// The number of media files included in this export.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="media")]
		public double Media { get; set; }
		
		/// <summary>
		/// The expected total size of the media files to be exported.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalMediaSize")]
		public double TotalMediaSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flag
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Form
	{
		
		[System.Runtime.Serialization.DataMember(Name="callToAction")]
		public string CallToAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cssUrl")]
		public string CssUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public FormField[] Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="heading")]
		public string Heading { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noCss")]
		public System.Nullable<System.Boolean> NoCss { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownedBy")]
		public string OwnedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormField
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="contribution")]
		public string Contribution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="form")]
		public string Form { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responses")]
		public System.Collections.Generic.Dictionary<string, string> Responses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormResponseSubmission
	{
		
		[System.Runtime.Serialization.DataMember(Name="contribution")]
		public string Contribution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="form")]
		public string Form { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responses")]
		public System.Collections.Generic.Dictionary<string, string> Responses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormSubmission
	{
		
		[System.Runtime.Serialization.DataMember(Name="callToAction")]
		public string CallToAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cssUrl")]
		public string CssUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public FormField[] Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="heading")]
		public string Heading { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noCss")]
		public System.Nullable<System.Boolean> NoCss { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Group
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkedProfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="bio")]
		public string Bio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public string Picture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public string Profile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registered")]
		public System.Nullable<System.DateTimeOffset> Registered { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModerationHistoryItemSubmission
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public ModerationAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationPreview
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="html")]
		public string Html { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subscription
	{
		
		[System.Runtime.Serialization.DataMember(Name="assignment")]
		public string Assignment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="includeBody")]
		public bool IncludeBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeThumbenail")]
		public System.Nullable<System.Boolean> IncludeThumbenail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slackChannel")]
		public string SlackChannel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionSubmission
	{
		
		[System.Runtime.Serialization.DataMember(Name="assignment")]
		public string Assignment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="includeBody")]
		public bool IncludeBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeThumbenail")]
		public System.Nullable<System.Boolean> IncludeThumbenail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slackChannel")]
		public string SlackChannel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagSetSubmission
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="urlWords")]
		public string UrlWords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagSubmission
	{
		
		[System.Runtime.Serialization.DataMember(Name="colour")]
		public string Colour { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagSet")]
		public TagSet TagSet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlWords")]
		public string UrlWords { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Artifact formats
		/// List the available artifact formats
		/// Artifact_formatsGet artifact-formats
		/// </summary>
		/// <returns>A list of artifact formats</returns>
		public async Task<ArtifactFormats> Artifact_formatsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "artifact-formats";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArtifactFormats>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List assignments
		/// AssignmentsGetByOwnedByAndPageAndPageSizeAndQAndUrlWordsAndOpenAndAlwaysOpenAndTagAndName assignments
		/// </summary>
		/// <param name="ownedBy">Restrict results to assignments owned by this user.</param>
		/// <param name="page">Pagination page</param>
		/// <param name="pageSize">Pagination page size</param>
		/// <param name="q">Restrict results to assignments whose name or description matches this keyword.</param>
		/// <param name="urlWords">Select an assignment by urlWords.</param>
		/// <param name="open">Select open or closed assignments</param>
		/// <param name="alwaysOpen">Select assignments with no closing date.</param>
		/// <param name="tag">Restrict results to assignments which are tagged with this tag.</param>
		/// <param name="name">Restrict results to the assignment (or potentially assignments) with this exact name</param>
		/// <returns>A list of assignments</returns>
		public async Task<Assignment[]> AssignmentsGetByOwnedByAndPageAndPageSizeAndQAndUrlWordsAndOpenAndAlwaysOpenAndTagAndNameAsync(string ownedBy, int page, int pageSize, string q, string urlWords, bool open, bool alwaysOpen, string tag, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assignments?ownedBy=" + (ownedBy==null? "" : System.Uri.EscapeDataString(ownedBy))+"&page="+page+"&pageSize="+pageSize+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&urlWords=" + (urlWords==null? "" : System.Uri.EscapeDataString(urlWords))+"&open="+open+"&alwaysOpen="+alwaysOpen+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Assignment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new assignment
		/// AssignmentsPost assignments
		/// </summary>
		/// <param name="requestBody">Assignment object to be created</param>
		/// <returns>Assignment created</returns>
		public async Task<Assignment> AssignmentsPostAsync(AssignmentSubmission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assignments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Assignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete this assignment and all of it's contributions
		/// Assignments_idDelete assignments/{id}
		/// </summary>
		/// <param name="id">Id of the assignment to return</param>
		/// <returns>Assignment deleted</returns>
		public async Task Assignments_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assignments/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a single assigment by id
		/// Assignments_idGet assignments/{id}
		/// </summary>
		/// <param name="id">Id of the assignment to return</param>
		/// <returns>Assignment found</returns>
		public async Task<Assignment> Assignments_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "assignments/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Assignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recent changes
		/// The Contribly change log.
		/// Change_logGet change-log
		/// </summary>
		/// <returns>A list of change log items</returns>
		public async Task<ChangeLogItem[]> Change_logGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "change-log";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChangeLogItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List valid contribution refinement types
		/// Contribution_refinement_typesGet contribution-refinement-types
		/// </summary>
		/// <returns>An array of refinement types. These are the possible values of the get contribution refinements parameter.</returns>
		public async Task<string[]> Contribution_refinement_typesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contribution-refinement-types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List contribution refinement options
		/// Given a contribution list query determine the available filter options. Can be used to generate the UI to refinement a filter.
		/// Contribution_refinementsGetByAssignmentAndCountryAndCreatedBeforeAndCreatedAfterAndGeohashAndHasLocationAndLatLongAndRadiusAndMediaTypeAndOwnedByAndQAndUrlWordsAndUserAndRefinementsAndRefinementSize contribution-refinements
		/// </summary>
		/// <param name="assignment">Restrict results to contributions submitted to this assignment.</param>
		/// <param name="country">Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code).</param>
		/// <param name="createdBefore">Limit results to contributions created before this date time.</param>
		/// <param name="createdAfter">Limit results to contributions created after this date time.</param>
		/// <param name="geohash">Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes)</param>
		/// <param name="hasLocation">Restrict results to contributions which have a publicly visible location.</param>
		/// <param name="latLong">Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius</param>
		/// <param name="radius">When limiting result by location with the latLong parameter, specify the radius in kilometers.</param>
		/// <param name="mediaType">Restrict results to contributions which include a media file of the given type (ie. image / video)</param>
		/// <param name="ownedBy">Restrict results to contributions which are fall under the jurisdiction by this user.</param>
		/// <param name="q">Restrict results to contributions whose headline text matches this keyword.</param>
		/// <param name="urlWords">Locate a specific contribution by URL words</param>
		/// <param name="user">Restrict results to contributions by this user identified by id.</param>
		/// <param name="refinements">Comma seperated list of refinement names.</param>
		/// <param name="refinementSize">Number of refinement options to return.</param>
		/// <returns>A map of refinement names to lists of options</returns>
		public async Task<System.Collections.Generic.Dictionary<string, string[]>> Contribution_refinementsGetByAssignmentAndCountryAndCreatedBeforeAndCreatedAfterAndGeohashAndHasLocationAndLatLongAndRadiusAndMediaTypeAndOwnedByAndQAndUrlWordsAndUserAndRefinementsAndRefinementSizeAsync(
					string assignment, 
					string country, 
					System.DateTimeOffset createdBefore, 
					System.DateTimeOffset createdAfter, 
					string geohash, 
					bool hasLocation, 
					string latLong, 
					double radius, 
					string mediaType, 
					string ownedBy, 
					string q, 
					string urlWords, 
					string user, 
					string refinements, 
					double refinementSize, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contribution-refinements?assignment=" + (assignment==null? "" : System.Uri.EscapeDataString(assignment))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&createdBefore=" + createdBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAfter=" + createdAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&geohash=" + (geohash==null? "" : System.Uri.EscapeDataString(geohash))+"&hasLocation="+hasLocation+"&latLong=" + (latLong==null? "" : System.Uri.EscapeDataString(latLong))+"&radius="+radius+"&mediaType=" + (mediaType==null? "" : System.Uri.EscapeDataString(mediaType))+"&ownedBy=" + (ownedBy==null? "" : System.Uri.EscapeDataString(ownedBy))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&urlWords=" + (urlWords==null? "" : System.Uri.EscapeDataString(urlWords))+"&user=" + (user==null? "" : System.Uri.EscapeDataString(user))+"&refinements=" + (refinements==null? "" : System.Uri.EscapeDataString(refinements))+"&refinementSize="+refinementSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, string[]>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List contributions
		/// Retrieve contributions.
		/// ContributionsGetByAssignmentAndCountryAndCreatedBeforeAndCreatedAfterAndCreatedDayAndCreatedMonthAndGeohashAndHasLocationAndLatLongAndRadiusAndMediaTypeAndOwnedByAndQAndUrlWordsAndUserAndIdsAndFormat contributions
		/// </summary>
		/// <param name="assignment">Restrict results to contributions submitted to this assignment.</param>
		/// <param name="country">Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code).</param>
		/// <param name="createdBefore">Limit results to contributions created before this date time.</param>
		/// <param name="createdAfter">Limit results to contributions created after this date time.</param>
		/// <param name="createdDay">Limit results to contributions created on this day.</param>
		/// <param name="createdMonth">Limit results to contributions created during this month.</param>
		/// <param name="geohash">Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes)</param>
		/// <param name="hasLocation">Restrict results to contributions which have a publicly visible location.</param>
		/// <param name="latLong">Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius</param>
		/// <param name="radius">When limiting result by location with the latLong parameter, specify the radius in kilometers.</param>
		/// <param name="mediaType">Restrict results to contributions which include a media file of the given type (ie. image / video)</param>
		/// <param name="ownedBy">Restrict results to contributions which are fall under the jurisdiction by this user.</param>
		/// <param name="q">Restrict results to contributions whose headline text matches this keyword.</param>
		/// <param name="urlWords">Locate a specific contribution by URL words</param>
		/// <param name="user">Restrict results to contributions by this user identified by id.</param>
		/// <param name="ids">Restrict results to a list of specific contributions identified by a comma seperated list of ids.</param>
		/// <param name="format">Select output format. 'json' or 'rss'. Defaults to JSON.</param>
		/// <returns>A list of contributions</returns>
		public async Task<Contribution[]> ContributionsGetByAssignmentAndCountryAndCreatedBeforeAndCreatedAfterAndCreatedDayAndCreatedMonthAndGeohashAndHasLocationAndLatLongAndRadiusAndMediaTypeAndOwnedByAndQAndUrlWordsAndUserAndIdsAndFormatAsync(
					string assignment, 
					string country, 
					System.DateTimeOffset createdBefore, 
					System.DateTimeOffset createdAfter, 
					System.DateOnly createdDay, 
					string createdMonth, 
					string geohash, 
					bool hasLocation, 
					string latLong, 
					double radius, 
					string mediaType, 
					string ownedBy, 
					string q, 
					string urlWords, 
					string user, 
					string ids, 
					string format, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contributions?assignment=" + (assignment==null? "" : System.Uri.EscapeDataString(assignment))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&createdBefore=" + createdBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAfter=" + createdAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdDay="+createdDay+"&createdMonth=" + (createdMonth==null? "" : System.Uri.EscapeDataString(createdMonth))+"&geohash=" + (geohash==null? "" : System.Uri.EscapeDataString(geohash))+"&hasLocation="+hasLocation+"&latLong=" + (latLong==null? "" : System.Uri.EscapeDataString(latLong))+"&radius="+radius+"&mediaType=" + (mediaType==null? "" : System.Uri.EscapeDataString(mediaType))+"&ownedBy=" + (ownedBy==null? "" : System.Uri.EscapeDataString(ownedBy))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&urlWords=" + (urlWords==null? "" : System.Uri.EscapeDataString(urlWords))+"&user=" + (user==null? "" : System.Uri.EscapeDataString(user))+"&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contribution[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new contribution
		/// ContributionsPost contributions
		/// </summary>
		/// <param name="requestBody">Contribution object to be created</param>
		/// <returns>Contribution created</returns>
		public async Task<Contribution> ContributionsPostAsync(Contribution requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contributions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contribution>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete this contribution
		/// Contributions_idDelete contributions/{id}
		/// </summary>
		/// <param name="id">Id of the contribution to delete</param>
		/// <returns>The deletion request has been accepted and will be processed in the background.</returns>
		public async Task<Contribution> Contributions_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contributions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contribution>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a single contribution by id
		/// Contributions_idGet contributions/{id}
		/// </summary>
		/// <param name="id">Id of the contribution to return</param>
		/// <returns>Successful</returns>
		public async Task<Contribution> Contributions_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contributions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contribution>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Raise a flag against this contribution
		/// Allows end users to bring potential issues with publicly visible content to the attention of moderators.
		/// Contributions_idFlagPost contributions/{id}/flag
		/// </summary>
		/// <param name="id">Id of the contribution to flag</param>
		/// <param name="requestBody">Flag to be created</param>
		/// <returns>Flag created</returns>
		public async Task<Flag> Contributions_idFlagPostAsync(string id, Flag requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contributions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/flag";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flag>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows a user to mark a contribution as liked
		/// Contributions_idLikePost contributions/{id}/like
		/// </summary>
		/// <param name="id">Id of the contribution</param>
		/// <returns>The updated like count for this contribution.</returns>
		public async Task<double> Contributions_idLikePostAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contributions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/like";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<double>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List users who have liked this contributions
		/// Returns a list of user ids of users who have liked this conribution
		/// Contributions_idLikesGet contributions/{id}/likes
		/// </summary>
		/// <param name="id">Id of the contribution</param>
		/// <returns>A list of user ids.</returns>
		public async Task<string[]> Contributions_idLikesGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contributions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/likes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Perform a moderation action on this contribution
		/// Allows the contribution to approved of rejected.
		/// Contributions_idModeratePost contributions/{id}/moderate
		/// </summary>
		/// <param name="id">Id of the contribution to moderate</param>
		/// <param name="requestBody">A moderation action</param>
		/// <returns>The moderation action was successfully applied</returns>
		public async Task<string> Contributions_idModeratePostAsync(string id, ModerationHistoryItemSubmission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contributions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/moderate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the credentials associated with the authenticated user.
		/// CredentialsGet credentials
		/// </summary>
		/// <returns>A list of credentials associated with this user.</returns>
		public async Task<Credential[]> CredentialsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "credentials";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Credential[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Event types
		/// List available notification event types
		/// Event_typesGet event-types
		/// </summary>
		/// <returns>A list of event types</returns>
		public async Task<EventType[]> Event_typesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event-types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Export contributions.
		/// Begin an export job. Returns a export job which can be polled to follow the progress of an export.
		/// ExportPostByAssignmentAndCountryAndCreatedBeforeAndCreatedAfterAndGeohashAndHasLocationAndLatLongAndRadiusAndMediaTypeAndOwnedByAndQAndUrlWordsAndUserAndTaggedAndCombinedAndIndividualAndFormatAndJson export
		/// </summary>
		/// <param name="assignment">Restrict results to contributions submitted to this assignment.</param>
		/// <param name="country">Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code).</param>
		/// <param name="createdBefore">Limit results to contributions created before this date time.</param>
		/// <param name="createdAfter">Limit results to contributions created after this date time.</param>
		/// <param name="geohash">Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes)</param>
		/// <param name="hasLocation">Restrict results to contributions which have a publicly visible location.</param>
		/// <param name="latLong">Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius</param>
		/// <param name="radius">When limiting result by location with the latLong parameter, specify the radius in kilometers.</param>
		/// <param name="mediaType">Restrict results to contributions which include a media file of the given type (ie. image / video)</param>
		/// <param name="ownedBy">Restrict results to contributions which are fall under the jurisdiction by this user.</param>
		/// <param name="q">Restrict results to contributions whose headline text matches this keyword.</param>
		/// <param name="urlWords">Locate a specific contribution by URL words</param>
		/// <param name="user">Restrict results to contributions by this user identified by id.</param>
		/// <param name="tagged">Should exported media files be tagged with metadata. Deprecated; use format instead.</param>
		/// <param name="combined">Included a combined file with all contribution text.</param>
		/// <param name="individual">Include individual text files for each contribution.</param>
		/// <param name="format">Media format to export; none, fullsize, tagged or original.</param>
		/// <param name="json">Include raw JSON for each contribution.</param>
		public async Task ExportPostByAssignmentAndCountryAndCreatedBeforeAndCreatedAfterAndGeohashAndHasLocationAndLatLongAndRadiusAndMediaTypeAndOwnedByAndQAndUrlWordsAndUserAndTaggedAndCombinedAndIndividualAndFormatAndJsonAsync(
					string assignment, 
					string country, 
					System.DateTimeOffset createdBefore, 
					System.DateTimeOffset createdAfter, 
					string geohash, 
					bool hasLocation, 
					string latLong, 
					double radius, 
					string mediaType, 
					string ownedBy, 
					string q, 
					string urlWords, 
					string user, 
					bool tagged, 
					bool combined, 
					bool individual, 
					string format, 
					bool json, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export?assignment=" + (assignment==null? "" : System.Uri.EscapeDataString(assignment))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&createdBefore=" + createdBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAfter=" + createdAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&geohash=" + (geohash==null? "" : System.Uri.EscapeDataString(geohash))+"&hasLocation="+hasLocation+"&latLong=" + (latLong==null? "" : System.Uri.EscapeDataString(latLong))+"&radius="+radius+"&mediaType=" + (mediaType==null? "" : System.Uri.EscapeDataString(mediaType))+"&ownedBy=" + (ownedBy==null? "" : System.Uri.EscapeDataString(ownedBy))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&urlWords=" + (urlWords==null? "" : System.Uri.EscapeDataString(urlWords))+"&user=" + (user==null? "" : System.Uri.EscapeDataString(user))+"&tagged="+tagged+"&combined="+combined+"&individual="+individual+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&json="+json;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Export contributions preflight summary.
		/// Provide a preflight summary of an export request.
		/// Export_summaryPostByAssignmentAndCountryAndCreatedBeforeAndCreatedAfterAndGeohashAndHasLocationAndLatLongAndRadiusAndMediaTypeAndOwnedByAndQAndUrlWordsAndUser export-summary
		/// </summary>
		/// <param name="assignment">Restrict results to contributions submitted to this assignment.</param>
		/// <param name="country">Limit results to contributions which have a publicly visible location within the given country (specified by two letter country code).</param>
		/// <param name="createdBefore">Limit results to contributions created before this date time.</param>
		/// <param name="createdAfter">Limit results to contributions created after this date time.</param>
		/// <param name="geohash">Restrict results to contributions which have specified a location which falls within this geohash (or comma seperated list of multiple geohashes)</param>
		/// <param name="hasLocation">Restrict results to contributions which have a publicly visible location.</param>
		/// <param name="latLong">Limit results to contributions with location near this latitude and longitude (comma seperated lat/long pair). Also see radius</param>
		/// <param name="radius">When limiting result by location with the latLong parameter, specify the radius in kilometers.</param>
		/// <param name="mediaType">Restrict results to contributions which include a media file of the given type (ie. image / video)</param>
		/// <param name="ownedBy">Restrict results to contributions which are fall under the jurisdiction by this user.</param>
		/// <param name="q">Restrict results to contributions whose headline text matches this keyword.</param>
		/// <param name="urlWords">Locate a specific contribution by URL words</param>
		/// <param name="user">Restrict results to contributions by this user identified by id.</param>
		/// <returns>A summary of the number of contributions, media files and approximate total size of media files.</returns>
		public async Task<ExportSummary> Export_summaryPostByAssignmentAndCountryAndCreatedBeforeAndCreatedAfterAndGeohashAndHasLocationAndLatLongAndRadiusAndMediaTypeAndOwnedByAndQAndUrlWordsAndUserAsync(string assignment, string country, System.DateTimeOffset createdBefore, System.DateTimeOffset createdAfter, string geohash, bool hasLocation, string latLong, double radius, string mediaType, string ownedBy, string q, string urlWords, string user, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export-summary?assignment=" + (assignment==null? "" : System.Uri.EscapeDataString(assignment))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&createdBefore=" + createdBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAfter=" + createdAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&geohash=" + (geohash==null? "" : System.Uri.EscapeDataString(geohash))+"&hasLocation="+hasLocation+"&latLong=" + (latLong==null? "" : System.Uri.EscapeDataString(latLong))+"&radius="+radius+"&mediaType=" + (mediaType==null? "" : System.Uri.EscapeDataString(mediaType))+"&ownedBy=" + (ownedBy==null? "" : System.Uri.EscapeDataString(ownedBy))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&urlWords=" + (urlWords==null? "" : System.Uri.EscapeDataString(urlWords))+"&user=" + (user==null? "" : System.Uri.EscapeDataString(user));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a single export job; poll to follow export progress.
		/// Exports_idGet exports/{id}
		/// </summary>
		/// <param name="id">Id of the export job to return</param>
		/// <returns>Successful</returns>
		public async Task<Export> Exports_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "exports/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Export>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List form responses
		/// Form_responsesGetByUserAndFormAndContribution form-responses
		/// </summary>
		/// <param name="user">Restrict results to responses submitted by this user.</param>
		/// <param name="form">Restrict results to responses submitted to this form.</param>
		/// <param name="contribution">Restrict results to responses relating to this contribution.</param>
		/// <returns>A list of form responses</returns>
		public async Task<FormResponse[]> Form_responsesGetByUserAndFormAndContributionAsync(string user, string form, string contribution, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "form-responses?user=" + (user==null? "" : System.Uri.EscapeDataString(user))+"&form=" + (form==null? "" : System.Uri.EscapeDataString(form))+"&contribution=" + (contribution==null? "" : System.Uri.EscapeDataString(contribution));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FormResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit a response to a form
		/// Form_responsesPost form-responses
		/// </summary>
		/// <param name="requestBody">Form response</param>
		/// <returns>Form response saved</returns>
		public async Task<FormResponse> Form_responsesPostAsync(FormResponseSubmission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "form-responses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FormResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a single form response by id
		/// Form_responses_idGet form-responses/{id}
		/// </summary>
		/// <param name="id">Id of the assignment to return</param>
		/// <returns>Form response found</returns>
		public async Task<FormResponse> Form_responses_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "form-responses/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FormResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List forms
		/// FormsGetByOwnedBy forms
		/// </summary>
		/// <param name="ownedBy">Restrict results to forms owned by this user.</param>
		/// <returns>A list of forms</returns>
		public async Task<Form[]> FormsGetByOwnedByAsync(string ownedBy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forms?ownedBy=" + (ownedBy==null? "" : System.Uri.EscapeDataString(ownedBy));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Form[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a form
		/// FormsPost forms
		/// </summary>
		/// <param name="requestBody">Form object to be created</param>
		/// <returns>Form created</returns>
		public async Task<Form> FormsPostAsync(FormSubmission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forms";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Form>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete this form and all of it's responses.
		/// Forms_idDelete forms/{id}
		/// </summary>
		/// <param name="id">Id of the form to delete</param>
		/// <returns>Form deleted</returns>
		public async Task Forms_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a single form by id
		/// Forms_idGet forms/{id}
		/// </summary>
		/// <param name="id">Id of the form to return</param>
		/// <returns>Form found</returns>
		public async Task<Form> Forms_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forms/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Form>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit a new media file
		/// MediaPost media
		/// </summary>
		/// <param name="requestBody">Binary media file</param>
		/// <returns>Media created</returns>
		public async Task<Media> MediaPostAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Media>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// NotificationsContributions_idPreviewGetByMessage notifications/contributions/{id}/preview
		/// </summary>
		/// <param name="id">Id of the contribution to preview a notification for</param>
		/// <param name="message">Type of message to preview.</param>
		/// <returns>Notification preview</returns>
		public async Task<NotificationPreview> NotificationsContributions_idPreviewGetByMessageAsync(string id, string message, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notifications/contributions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/preview&message=" + (message==null? "" : System.Uri.EscapeDataString(message));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotificationPreview>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Scopes
		/// List available token scopes
		/// ScopesGet scopes
		/// </summary>
		/// <returns>A list of scopes</returns>
		public async Task<string[]> ScopesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scopes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscription types
		/// List available subscription types
		/// Subscription_typesGet subscription-types
		/// </summary>
		/// <returns>A list of subscription event types</returns>
		public async Task<SubscriptionType[]> Subscription_typesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscription-types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubscriptionType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List subscriptions for the authorised user.
		/// SubscriptionsGet subscriptions
		/// </summary>
		/// <returns>A list of notification subscriptions</returns>
		public async Task<Subscription[]> SubscriptionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Subscription[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a subscription.
		/// Subscriptions_idDelete subscriptions/{id}
		/// </summary>
		/// <param name="id">Id of the subscription to delete</param>
		/// <returns>The subscription has been successfully deleted.</returns>
		public async Task Subscriptions_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List tags
		/// Retrieve tags.
		/// TagsGetByOwnedByAndTagSetAndUrlWords tags
		/// </summary>
		/// <param name="ownedBy">Restrict results to those owned by this user.</param>
		/// <param name="tagSet">Restrict results to tags belonging to this tag set.</param>
		/// <param name="urlWords">Restrict results by urlWords. Should be used with ownedBy when searching for one of your own tags.</param>
		/// <returns>A list of tags</returns>
		public async Task<Tag[]> TagsGetByOwnedByAndTagSetAndUrlWordsAsync(string ownedBy, string tagSet, string urlWords, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags?ownedBy=" + (ownedBy==null? "" : System.Uri.EscapeDataString(ownedBy))+"&tagSet=" + (tagSet==null? "" : System.Uri.EscapeDataString(tagSet))+"&urlWords=" + (urlWords==null? "" : System.Uri.EscapeDataString(urlWords));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Tag[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new tag
		/// TagsPost tags
		/// </summary>
		/// <param name="requestBody">Tag object to be created</param>
		/// <returns>Tag created</returns>
		public async Task<Tag> TagsPostAsync(TagSubmission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Tag>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single tag by id
		/// Tags_idGet tags/{id}
		/// </summary>
		/// <param name="id">Id of the tag to return</param>
		/// <returns>The tag</returns>
		public async Task<Tag> Tags_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Tag>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List tag sets
		/// Retrieve tag sets.
		/// TagsetsGetByOwnedByAndUrlWords tagsets
		/// </summary>
		/// <param name="ownedBy">Restrict results to those owned by this user.</param>
		/// <param name="urlWords">Restrict results by urlWords. Should be used with ownedBy when searching for one of your own tag sets.</param>
		/// <returns>A list of tag sets</returns>
		public async Task<TagSet[]> TagsetsGetByOwnedByAndUrlWordsAsync(string ownedBy, string urlWords, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagsets?ownedBy=" + (ownedBy==null? "" : System.Uri.EscapeDataString(ownedBy))+"&urlWords=" + (urlWords==null? "" : System.Uri.EscapeDataString(urlWords));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagSet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new tag set
		/// TagsetsPost tagsets
		/// </summary>
		/// <param name="requestBody">Tag set to be created</param>
		/// <returns>Tagset created</returns>
		public async Task<TagSet> TagsetsPostAsync(TagSetSubmission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagsets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagSet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single tag set by id
		/// Tagsets_idGet tagsets/{id}
		/// </summary>
		/// <param name="id">Id of the tag set to return</param>
		/// <returns>The tag set</returns>
		public async Task<TagSet> Tagsets_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagsets/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagSet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List users
		/// UsersGetByAssignmentAndCountryAndMinimumContributionsAndLinkedProfileAndOwnedByAndSubmittedBeforeAndSubmittedAfterAndUsername users
		/// </summary>
		/// <param name="assignment">Restrict results to the users who have contributed to this assignment.</param>
		/// <param name="country">Restrict results to the users who have submitted a contribution with a public location located within this country.</param>
		/// <param name="minimumContributions">Restrict results to the users who have submitted at least this many contributions.</param>
		/// <param name="linkedProfile">Restrict results to the users who a linked profile of this type.</param>
		/// <param name="ownedBy">Restrict results to the users who are owned by of this owner.</param>
		/// <param name="submittedBefore">Limit results to users who have submitted at least one contribution before this date time.</param>
		/// <param name="submittedAfter">Limit results to users who have submitted at least one contribution after this date time.</param>
		/// <param name="username">Restrict results to the user with this username.</param>
		/// <returns>A list of users</returns>
		public async Task<User[]> UsersGetByAssignmentAndCountryAndMinimumContributionsAndLinkedProfileAndOwnedByAndSubmittedBeforeAndSubmittedAfterAndUsernameAsync(string assignment, string country, double minimumContributions, string linkedProfile, string ownedBy, System.DateTimeOffset submittedBefore, System.DateTimeOffset submittedAfter, string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users?assignment=" + (assignment==null? "" : System.Uri.EscapeDataString(assignment))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&minimumContributions="+minimumContributions+"&linkedProfile=" + (linkedProfile==null? "" : System.Uri.EscapeDataString(linkedProfile))+"&ownedBy=" + (ownedBy==null? "" : System.Uri.EscapeDataString(ownedBy))+"&submittedBefore=" + submittedBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&submittedAfter=" + submittedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single user by id
		/// Users_idGet users/{id}
		/// </summary>
		/// <param name="id">Id of the user to return</param>
		/// <returns>Successful</returns>
		public async Task<User> Users_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a users linked profile by type
		/// Users_idLinked_typeGet users/{id}/linked/{type}
		/// </summary>
		/// <param name="id">Id of the user to return</param>
		/// <param name="type">Type of the linked profile to fetch</param>
		/// <returns>Successful</returns>
		public async Task<LinkedProfile> Users_idLinked_typeGetAsync(string id, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/linked/"+ (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkedProfile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verify token and return details of the owning user
		/// VerifyPost verify
		/// </summary>
		/// <returns>Token is valid</returns>
		public async Task<Authority> VerifyPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "verify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Authority>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
