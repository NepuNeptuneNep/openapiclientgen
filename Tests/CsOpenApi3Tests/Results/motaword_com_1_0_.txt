//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountGlossaryUploadRequest
	{
		
		/// <summary>
		/// Glossary file. Currently supported formats: .xlsx, .tbx
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="glossary")]
		public string Glossary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountStyleGuideUploadRequest
	{
		
		/// <summary>
		/// Style guide file. Currently supported formats: .pdf, .docx, .txt
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="styleguide")]
		public string Styleguide { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActiveWidget
	{
		
		/// <summary>
		/// Is the Active Widget in admin mode? This changes a couple of behaviors in the widget to configure some rules like elements, sections, pages, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="admin_mode")]
		public System.Nullable<System.Boolean> Admin_mode { get; set; }
		
		/// <summary>
		/// When true, hash params are included in filenames. When false, params are ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allow_hash_in_url")]
		public System.Nullable<System.Boolean> Allow_hash_in_url { get; set; }
		
		/// <summary>
		/// When true, query params are included in filenames. When false, params are ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allow_query_in_url")]
		public System.Nullable<System.Boolean> Allow_query_in_url { get; set; }
		
		/// <summary>
		/// When true, we will ignore the source language of your project and try to automatically detect the source language of the given content. This is especially useful in environments with unpredictable source contents, such as a chat environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_detect_source_language")]
		public System.Nullable<System.Boolean> Auto_detect_source_language { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// When true, Active ecosystem will print debug-level logs from all Active modules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debug_mode")]
		public System.Nullable<System.Boolean> Debug_mode { get; set; }
		
		/// <summary>
		/// Continuous project exclusive elements and rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public string Elements { get; set; }
		
		/// <summary>
		/// Specify whether we should follow the user around in your website and automatically translate pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="follow_user")]
		public System.Nullable<System.Boolean> Follow_user { get; set; }
		
		/// <summary>
		/// Determines whether to force-refresh local browser cache of your translations in certain period of times, no matter if there is a new activity in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force_cache_refresh_interval")]
		public System.Nullable<System.Boolean> Force_cache_refresh_interval { get; set; }
		
		/// <summary>
		/// When true, Active ecosystem will collect all strings on TMS no matter if the translation is present in the cache.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hit_backend_for_existing")]
		public System.Nullable<System.Boolean> Hit_backend_for_existing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Continuous project language mappings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language_mappings")]
		public string Language_mappings { get; set; }
		
		/// <summary>
		/// Whether ActiveJS should be considered live in an embedded site. Use `false` if you are still testing Active. Go to your Active dashboard and follow links to your website to actually test Active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="live")]
		public System.Nullable<System.Boolean> Live { get; set; }
		
		/// <summary>
		/// We can automatically localize the same-domain URLs in your page. The way we localize the URL depends on urlMode configuration. We can either add/update the locale query parameter, or add/update the path of the URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modify_links")]
		public System.Nullable<System.Boolean> Modify_links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// When true, Active ecosystem will optimize the script and data flows per page, rather than per project. This decreases the bandwidth usage per script, but makes translation publishing more complex and script serving per-page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optimize_per_page")]
		public System.Nullable<System.Boolean> Optimize_per_page { get; set; }
		
		/// <summary>
		/// Continuous project page rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public string Pages { get; set; }
		
		/// <summary>
		/// Custom regex for path-type URL mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path_regex")]
		public string Path_regex { get; set; }
		
		/// <summary>
		/// Options are "bottom-left", "bottom-right", "in-place"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public string Position { get; set; }
		
		/// <summary>
		/// Query parameter name to be used with query-type URL mode. Default is 'locale'.
		/// </summary>
		[System.ComponentModel.DefaultValue("locale")]
		[System.Runtime.Serialization.DataMember(Name="query_name")]
		public string Query_name { get; set; } = "locale";
		
		/// <summary>
		/// When true, Active ecosystem reboots itself when url changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reboot_on_url_change")]
		public System.Nullable<System.Boolean> Reboot_on_url_change { get; set; }
		
		/// <summary>
		/// JSON string for a list of domains that this widget's API interactions are limited to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restricted_domains")]
		public string Restricted_domains { get; set; }
		
		/// <summary>
		/// Continuous project section rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sections")]
		public string Sections { get; set; }
		
		/// <summary>
		/// Is the Active Widget in test mode? This changes a couple behaviors in the widget to make it easier for you to test and develop your Active integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="test_mode")]
		public System.Nullable<System.Boolean> Test_mode { get; set; }
		
		/// <summary>
		/// \"light\", \"dark\" OR custom JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public string Theme { get; set; }
		
		/// <summary>
		/// Token that you should use when you are using this widget on your website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// When a user changes locale (or when we automatically detect and change it for them), we will change the URL of the page they are in. We can do this by actually redirecting the user to the new page, or by simply changing the URL in the address bar via browser's History API. When NULL, we won't apply any URL changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url_change_mode")]
		public string Url_change_mode { get; set; }
		
		/// <summary>
		/// When a user changes locale (or when we automatically detect and change it for them), we will change the URL of the page they are in. We can either change the path of the URL to prefix it with the locale code, or we can add a query parameter to the URL. We also use this mode to detect the locale for the current page when a user directly loads a page. When NULL, locale detection from URL will be disabled (even then, if the user has selected a locale manually, and followUser is enabled, we will still automatically translate the page in user's locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url_mode")]
		public string Url_mode { get; set; }
		
		/// <summary>
		/// Should we make use of local browser cache for your visitors? We will refresh the cache when Active JS detects new activity in your project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="use_cache")]
		public System.Nullable<System.Boolean> Use_cache { get; set; }
		
		/// <summary>
		/// When enabled, we will translate your website with dummy content, rather than actually using MT/TM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="use_dummy_translations")]
		public System.Nullable<System.Boolean> Use_dummy_translations { get; set; }
		
		/// <summary>
		/// Continuous project variable definitions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public string Variables { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActiveWidgetList
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="widgets")]
		public ActiveWidget[] Widgets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagingMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="paging")]
		public PagingMetaPaging Paging { get; set; }
	}
	
	public class PagingMetaPaging
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PagingLinksMeta Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int64> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int64> Per_page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int64> Total_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Activity
	{
		
		/// <summary>
		/// Unix epoch time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activity_at")]
		public System.Nullable<System.Int64> Activity_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ActivityLinks Links { get; set; }
		
		/// <summary>
		/// Source text
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_text")]
		public string Source_text { get; set; }
		
		/// <summary>
		/// Target text of the activity, which is actually the translation of the source text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target_text")]
		public string Target_text { get; set; }
		
		/// <summary>
		/// Unique identifier of the translator/proofreader of this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translator")]
		public System.Nullable<System.Int64> Translator { get; set; }
		
		/// <summary>
		/// Currently there are two available activity types; 'translated', 'proofread'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ActivityType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="translated")]
		translated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="proofread")]
		proofread = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityLinks : LinksMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public Href Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Href Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Href
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityList
	{
		
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public Activity[] Activities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddOrUpdateDocumentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public FileAsData Document { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileAsData
	{
		
		/// <summary>
		/// Base64 encoded contents of your file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Name of your file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Address
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyticsCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="anonymousId")]
		public string AnonymousId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyticsToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="jwt")]
		public string Jwt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AsyncOperationStatus
	{
		
		/// <summary>
		/// operation duration in milliseconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int64> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<AsyncOperationStatusStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AsyncOperationStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sent")]
		sent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="started")]
		started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AsyncOperationStatusEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sent")]
		sent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="started")]
		started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailableVendorsFilter
	{
		
		/// <summary>
		/// Corporate account ID to filter for vendor authorization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporateId")]
		public System.Nullable<System.Double> CorporateId { get; set; }
		
		/// <summary>
		/// Filter vendors for manual work permission
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualWorkPermission")]
		public System.Nullable<System.Boolean> ManualWorkPermission { get; set; }
		
		/// <summary>
		/// Source language code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLanguage")]
		public string SourceLanguage { get; set; }
		
		/// <summary>
		/// List of target language codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLanguages")]
		public string[] TargetLanguages { get; set; }
		
		/// <summary>
		/// List of vendor types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingAddress : Address
	{
		
		/// <summary>
		/// addressing name, such as company name. used in billing address.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlogArticle
	{
		
		[System.Runtime.Serialization.DataMember(Name="announcement_type")]
		public System.Nullable<BlogArticleAnnouncement_type> Announcement_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// Article content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// Article excerpt
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excerpt")]
		public string Excerpt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// language code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public BlogArticleLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BlogArticleAnnouncement_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="article")]
		article = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="case")]
		_case = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="famous-translators")]
		famousMinustranslators = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sales")]
		sales = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlogArticleLinks : LinksMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="android")]
		public Href Android { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="header_image")]
		public Href Header_image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ios")]
		public Href Ios { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="web")]
		public Href Web { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlogArticleList
	{
		
		[System.Runtime.Serialization.DataMember(Name="articles")]
		public BlogArticle[] Articles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CM
	{
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public System.Nullable<System.Int64> User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallbackResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Project Data { get; set; }
		
		/// <summary>
		/// Callback response returned from `url`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ProjectStatus Type { get; set; }
		
		/// <summary>
		/// The URL that received the callback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project
	{
		
		[System.Runtime.Serialization.DataMember(Name="average_scores")]
		public System.Collections.Generic.Dictionary<string, float> Average_scores { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="budget_code")]
		public string Budget_code { get; set; }
		
		/// <summary>
		/// Callback URL to notify when project status changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callback_url")]
		public string Callback_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="can_pam_manage")]
		public System.Nullable<System.Boolean> Can_pam_manage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client")]
		public User Client { get; set; }
		
		/// <summary>
		/// Assigned admin's id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cm_id")]
		public System.Nullable<System.Int64> Cm_id { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed_on")]
		public System.Nullable<System.DateTimeOffset> Completed_on { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="continuous_project_type")]
		public string Continuous_project_type { get; set; }
		
		/// <summary>
		/// Unix epoch time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		/// <summary>
		/// Custom data provided while creating a new project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom")]
		public string Custom { get; set; }
		
		/// <summary>
		/// Unix epoch time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delivery_at")]
		public System.Nullable<System.Int64> Delivery_at { get; set; }
		
		/// <summary>
		/// A list of errors. Visible when creating a project and uploading your documents at the same time, in case of multiple errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_api_project")]
		public System.Nullable<System.Boolean> Is_api_project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_certified")]
		public System.Nullable<System.Boolean> Is_certified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_continuous")]
		public System.Nullable<System.Boolean> Is_continuous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_manual")]
		public System.Nullable<System.Boolean> Is_manual { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ProjectLinks Links { get; set; }
		
		/// <summary>
		/// Currently authed vendor's available working language pairs in this project. Includes rates per language pair. Includes complex pair logic such as bilingualism, project reverse pair enforcement etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pairs")]
		public VendorProjectPair[] Pairs { get; set; }
		
		/// <summary>
		/// Quote IDs of pivots
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivoted_projects")]
		public int[] Pivoted_projects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public ProjectPrice Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price_without_discount")]
		public ProjectPrice_without_discount Price_without_discount { get; set; }
		
		/// <summary>
		/// Currently authed vendor's role in this project. If vendor has already joined, this contains the role they joined the project with. If not joined yet, this is the role that they can join the project with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<ProjectRole> Role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="should_send_client_survey")]
		public System.Nullable<System.Boolean> Should_send_client_survey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<ProjectSource> Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_language")]
		public string Source_language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ProjectStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subjects")]
		public string[] Subjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_languages")]
		public string[] Target_languages { get; set; }
		
		/// <summary>
		/// TMS project name for this MW project. Requires privileged scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tms_name")]
		public string Tms_name { get; set; }
		
		/// <summary>
		/// Unix epoch time. Available only if status is `pending`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valid_until")]
		public System.Nullable<System.Int64> Valid_until { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_word_count")]
		public System.Nullable<System.Int64> Vendor_word_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word_count")]
		public System.Nullable<System.Int64> Word_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word_count_analysis")]
		public ProjectWord_count_analysis Word_count_analysis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="billing")]
		public BillingAddress Billing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="birthday")]
		public System.Nullable<System.DateOnly> Birthday { get; set; }
		
		/// <summary>
		/// \@deprecated. use `vendor` key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="can_work_manual_files")]
		public System.Nullable<System.Boolean> Can_work_manual_files { get; set; }
		
		/// <summary>
		/// \@deprecated. use mailing or billing key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client")]
		public UserClient Client { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="corporate_id")]
		public System.Nullable<System.Int64> Corporate_id { get; set; }
		
		/// <summary>
		/// \@deprecated. use mailing or billing key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Unix epoch time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="do_not_contact")]
		public System.Nullable<System.Boolean> Do_not_contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="has_pwd")]
		public System.Nullable<System.Boolean> Has_pwd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_client")]
		public System.Nullable<System.Boolean> Is_client { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_developer")]
		public System.Nullable<System.Boolean> Is_developer { get; set; }
		
		/// <summary>
		/// \@deprecated. use `vendor` key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_proofreader")]
		public System.Nullable<System.Boolean> Is_proofreader { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_prospect")]
		public System.Nullable<System.Boolean> Is_prospect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_sales_person")]
		public System.Nullable<System.Boolean> Is_sales_person { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_vendor")]
		public System.Nullable<System.Boolean> Is_vendor { get; set; }
		
		/// <summary>
		/// \@deprecated. use `vendor` key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language_pairs")]
		public LanguagePair[] Language_pairs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Unix epoch time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_seen_online_at")]
		public System.Nullable<System.Int64> Last_seen_online_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public UserLinks Links { get; set; }
		
		/// <summary>
		/// User Locale
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mailing")]
		public Address Mailing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// \@deprecated. Native language of user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="native_language")]
		public string Native_language { get; set; }
		
		/// <summary>
		/// \@deprecated. use /stats endpoint for the current nps value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nps")]
		public System.Nullable<System.Single> Nps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile_picture_path")]
		public string Profile_picture_path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="social_media")]
		public SocialMedia Social_media { get; set; }
		
		/// <summary>
		/// \@deprecated. use mailing or billing key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// \@deprecated. use mailing or billing key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// \@deprecated. use `vendor` key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tms_user_name")]
		public string Tms_user_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_groups")]
		public UserGroup[] User_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public UserVendor Vendor { get; set; }
		
		/// <summary>
		/// \@deprecated. use mailing or billing key. new key name is "zip".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zip_code")]
		public string Zip_code { get; set; }
	}
	
	public class UserClient
	{
		
		[System.Runtime.Serialization.DataMember(Name="corporate")]
		public UserClientCorporate Corporate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nps")]
		public System.Nullable<System.Single> Nps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subjects")]
		public System.Collections.Generic.Dictionary<string, long> Subjects { get; set; }
	}
	
	public class UserClientCorporate
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LanguagePair
	{
		
		[System.Runtime.Serialization.DataMember(Name="source_language")]
		public string Source_language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_language")]
		public string Target_language { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SocialMedia
	{
		
		[System.Runtime.Serialization.DataMember(Name="facebook_url")]
		public string Facebook_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkedIn_url")]
		public string LinkedIn_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twitter_url")]
		public string Twitter_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="corporate_id")]
		public System.Nullable<System.Int64> Corporate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	public class UserVendor
	{
		
		[System.Runtime.Serialization.DataMember(Name="can_work_manual_files")]
		public System.Nullable<System.Boolean> Can_work_manual_files { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email_open_rate")]
		public System.Nullable<System.Single> Email_open_rate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_frozen")]
		public System.Nullable<System.Boolean> Is_frozen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_proofreader")]
		public System.Nullable<System.Boolean> Is_proofreader { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language_pairs")]
		public LanguagePair[] Language_pairs { get; set; }
		
		/// <summary>
		/// Native language of user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="native_language")]
		public string Native_language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pam_tqs")]
		public System.Nullable<System.Single> Pam_tqs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paypal_email")]
		public string Paypal_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile_survey")]
		public ProfileSurvey Profile_survey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="require_1099")]
		public System.Nullable<System.Boolean> Require_1099 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tms_user_name")]
		public string Tms_user_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_type")]
		public string Vendor_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileSurvey
	{
		
		[System.Runtime.Serialization.DataMember(Name="current_services")]
		public string Current_services { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="daily_proofreading_capacity")]
		public string Daily_proofreading_capacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="daily_translation_capacity")]
		public string Daily_translation_capacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dtp_software")]
		public string Dtp_software { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="experience")]
		public string Experience { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_certified_translator")]
		public string Is_certified_translator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_sworn_translator")]
		public string Is_sworn_translator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memoq")]
		public string Memoq { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memsource")]
		public string Memsource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="omegat")]
		public string Omegat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proofreader_experience")]
		public string Proofreader_experience { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provides_creative_writing_service")]
		public string Provides_creative_writing_service { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provides_postedit_service")]
		public string Provides_postedit_service { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sdl_trados")]
		public string Sdl_trados { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skype_id")]
		public string Skype_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smartcat")]
		public string Smartcat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smartling")]
		public string Smartling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="software")]
		public string Software { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="specialization")]
		public string Specialization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle_edit")]
		public string Subtitle_edit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle_workshop")]
		public string Subtitle_workshop { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translator_association")]
		public string Translator_association { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transsuite_2000")]
		public string Transsuite_2000 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_profile_lsp")]
		public string Vendor_profile_lsp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wordbee")]
		public string Wordbee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wordfast")]
		public string Wordfast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="work_type")]
		public string Work_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="work_with")]
		public string Work_with { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="working_as")]
		public string Working_as { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="working_timezone")]
		public string Working_timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xbench")]
		public string Xbench { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xtm")]
		public string Xtm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="help")]
		public string Help { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="http_code")]
		public System.Nullable<System.Int32> Http_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VendorProjectPair
	{
		
		[System.ComponentModel.DefaultValue("usd")]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; } = "usd";
		
		/// <summary>
		/// Indicates if the vendor be able to proofred this pair
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_proofreader")]
		public System.Nullable<System.Boolean> Is_proofreader { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proofreader")]
		public User Proofreader { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proofreading_rate")]
		public System.Nullable<System.Single> Proofreading_rate { get; set; }
		
		/// <summary>
		/// Source language code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_language")]
		public string Source_language { get; set; }
		
		/// <summary>
		/// Target language code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target_language")]
		public string Target_language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translation_rate")]
		public System.Nullable<System.Single> Translation_rate { get; set; }
	}
	
	public class ProjectPrice
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Single> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="base_amount")]
		public System.Nullable<System.Single> Base_amount { get; set; }
		
		[System.ComponentModel.DefaultValue("usd")]
		[System.Runtime.Serialization.DataMember(Name="base_currency")]
		public string Base_currency { get; set; } = "usd";
		
		[System.ComponentModel.DefaultValue("usd")]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; } = "usd";
		
		/// <summary>
		/// USD is our base pricing currency. If `currency` is different, this will help.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usd_amount")]
		public System.Nullable<System.Single> Usd_amount { get; set; }
	}
	
	public class ProjectPrice_without_discount
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Single> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="base_amount")]
		public System.Nullable<System.Single> Base_amount { get; set; }
		
		[System.ComponentModel.DefaultValue("usd")]
		[System.Runtime.Serialization.DataMember(Name="base_currency")]
		public string Base_currency { get; set; } = "usd";
		
		[System.ComponentModel.DefaultValue("usd")]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; } = "usd";
		
		/// <summary>
		/// USD is our base pricing currency. If `currency` is different, this will help.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usd_amount")]
		public System.Nullable<System.Single> Usd_amount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="translator")]
		translator = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="proofreader")]
		proofreader = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="both")]
		both = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="api")]
		api = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="web")]
		web = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="started")]
		started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="translated")]
		translated = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="proofread")]
		proofread = 4,
	}
	
	public class ProjectWord_count_analysis
	{
		
		[System.Runtime.Serialization.DataMember(Name="base")]
		public string Base { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duplicate")]
		public string Duplicate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exclusion")]
		public string Exclusion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="final")]
		public string Final { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tm")]
		public string Tm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelProjectRequest
	{
		
		/// <summary>
		/// Cancellation reason
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientProfile
	{
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_creation_date")]
		public System.Nullable<System.DateTimeOffset> Account_creation_date { get; set; }
		
		/// <summary>
		/// total project count that this client sent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_project_count")]
		public System.Nullable<System.Double> Client_project_count { get; set; }
		
		/// <summary>
		/// corporate name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporate")]
		public string Corporate { get; set; }
		
		/// <summary>
		/// corporate id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporate_id")]
		public System.Nullable<System.Double> Corporate_id { get; set; }
		
		/// <summary>
		/// total user count in a corporation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corporate_user_count")]
		public System.Nullable<System.Double> Corporate_user_count { get; set; }
		
		/// <summary>
		/// the file extension for the files that usually this client sent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequent_file_extension")]
		public string Frequent_file_extension { get; set; }
		
		/// <summary>
		/// frequent language pairs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequent_language_pairs")]
		public string[] Frequent_language_pairs { get; set; }
		
		/// <summary>
		/// full name of the client
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="full_name")]
		public string Full_name { get; set; }
		
		/// <summary>
		/// The answer for the question "Is there any growth for this corporate's spending". The values can be true, false or null if the corporate is oour client for less than 6 months
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="growth")]
		public System.Nullable<System.Boolean> Growth { get; set; }
		
		/// <summary>
		/// the answer for the question "Is this client usually sent complex projects?"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_complex")]
		public System.Nullable<System.Boolean> Is_complex { get; set; }
		
		/// <summary>
		/// corporate's spending in twelve months
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_12_months_spending")]
		public System.Nullable<System.Single> Last_12_months_spending { get; set; }
		
		/// <summary>
		/// the quote number for the last project of this client
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_project")]
		public System.Nullable<System.Double> Last_project { get; set; }
		
		/// <summary>
		/// the creation date of the last project that is sent by this client
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_project_time")]
		public System.Nullable<System.DateTimeOffset> Last_project_time { get; set; }
		
		/// <summary>
		/// list of prooofreaders for the target languages of last project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_proofreaders")]
		public ProofreaderWithLanguage[] Last_proofreaders { get; set; }
		
		/// <summary>
		/// notes that is submited for this client and/or with her projects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string[] Notes { get; set; }
		
		/// <summary>
		/// net promoter score info for this client
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nps")]
		public ClientProfileNps Nps { get; set; }
		
		/// <summary>
		/// rank of the user in all corporate users for project count. If the user is the most active user foor sending projects her rank is 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_rank_in_project_count")]
		public System.Nullable<System.Double> User_rank_in_project_count { get; set; }
		
		/// <summary>
		/// rank of the user in all corporate users for total spending. If the user is the most active user for spending her rank is 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_rank_in_spending")]
		public System.Nullable<System.Double> User_rank_in_spending { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProofreaderWithLanguage
	{
		
		/// <summary>
		/// full name of the proofreader
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="full_name")]
		public string Full_name { get; set; }
		
		/// <summary>
		/// proofreader id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// language code (i.e en-US)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// link to the vendor that can be only used in motaword admin application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor_link")]
		public string Vendor_link { get; set; }
	}
	
	public class ClientProfileNps
	{
		
		/// <summary>
		/// information for all nps survey that this client completed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="average")]
		public ClientProfileNpsAverage Average { get; set; }
		
		/// <summary>
		/// last survey info
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last")]
		public ClientProfileNpsLast Last { get; set; }
	}
	
	public class ClientProfileNpsAverage
	{
		
		/// <summary>
		/// total number of completed survey count by this client
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed_surveys_count")]
		public System.Nullable<System.Double> Completed_surveys_count { get; set; }
		
		/// <summary>
		/// average score for all coompleted surveys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
	}
	
	public class ClientProfileNpsLast
	{
		
		/// <summary>
		/// last surveys completion date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completion_date")]
		public System.Nullable<System.DateTimeOffset> Completion_date { get; set; }
		
		/// <summary>
		/// score that the client gave us
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Double> Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientProjectStat
	{
		
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="month")]
		public string Month { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number_of_projects")]
		public System.Nullable<System.Int64> Number_of_projects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_spending")]
		public System.Nullable<System.Single> Total_spending { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="week")]
		public string Week { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientProjectStats
	{
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public ClientProjectStat[] Stats { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientStats
	{
		
		[System.Runtime.Serialization.DataMember(Name="document_count")]
		public System.Nullable<System.Int64> Document_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nps")]
		public System.Nullable<System.Single> Nps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="started_project_count")]
		public System.Nullable<System.Int64> Started_project_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_discounted")]
		public Monetary Total_discounted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_project_count")]
		public System.Nullable<System.Int64> Total_project_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_spending")]
		public System.Nullable<System.Single> Total_spending { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translator_count")]
		public System.Nullable<System.Int64> Translator_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Monetary
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Single> Amount { get; set; }
		
		[System.ComponentModel.DefaultValue("usd")]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; } = "usd";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientStringStats
	{
		
		[System.Runtime.Serialization.DataMember(Name="language_counts")]
		public LanguageStringStat[] Language_counts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_project_strings_count")]
		public System.Nullable<System.Int64> Total_project_strings_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_tm_strings_count")]
		public System.Nullable<System.Int64> Total_tm_strings_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LanguageStringStat
	{
		
		[System.Runtime.Serialization.DataMember(Name="project_string_count")]
		public System.Nullable<System.Int64> Project_string_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_language")]
		public string Source_language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tm_string_count")]
		public System.Nullable<System.Int64> Tm_string_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientStringTranslation
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_changed")]
		public System.Nullable<System.DateTimeOffset> Last_changed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource_id")]
		public string Resource_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ClientStringTranslationState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_language")]
		public string Target_language { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ClientStringTranslationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Translated")]
		Translated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Approved")]
		Approved = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientStringWithTranslations
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_changed")]
		public System.Nullable<System.DateTimeOffset> Last_changed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translations")]
		public ClientStringTranslation[] Translations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientStrings
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strings")]
		public ClientStringWithTranslations[] Strings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Comment
	{
		
		/// <summary>
		/// Comment text.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment1 { get; set; }
		
		/// <summary>
		/// Unix epoch time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commented_at")]
		public System.Nullable<System.Int64> Commented_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CommentLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentLinks : LinksMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="activity")]
		public Href Activity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Href Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentList
	{
		
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public Comment[] Activities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Commission
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Monetary Amount { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Project Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<CommissionStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CommissionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unclaimed")]
		unclaimed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sent")]
		sent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="waiting")]
		waiting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="waiting_invoice")]
		waiting_invoice = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommissionList
	{
		
		[System.Runtime.Serialization.DataMember(Name="commissions")]
		public Commission[] Commissions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommissionStats
	{
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public Monetary Balance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paid")]
		public Monetary Paid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quote_total")]
		public Monetary Quote_total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public Monetary Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProject
	{
		
		/// <summary>
		/// Should we collect analytics data from Active for this continuous project?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analytics_enabled")]
		public System.Nullable<System.Boolean> Analytics_enabled { get; set; }
		
		/// <summary>
		/// Immediately start post-editing project for translation requests that are applied MT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_start_postedit")]
		public System.Nullable<System.Boolean> Auto_start_postedit { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_enabled")]
		public System.Nullable<System.Boolean> Is_enabled { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_activity_at")]
		public System.Nullable<System.DateTimeOffset> Last_activity_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ContinuousProjectLinks Links { get; set; }
		
		/// <summary>
		/// Immediately apply MT on translation requests if they are missing from TM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mt_enabled")]
		public System.Nullable<System.Boolean> Mt_enabled { get; set; }
		
		/// <summary>
		/// One of "MOTAWORD", "GOOGLE", "AMAZON", "MS". Default is "MOTAWORD".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mt_engine")]
		public string Mt_engine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Get an instant quote for translation requests that are applied MT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postedit_enabled")]
		public System.Nullable<System.Boolean> Postedit_enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_language")]
		public string Source_language { get; set; }
		
		/// <summary>
		/// One of "a => ACTIVE", "i => INACTIVE", "d => DELETED", "c => SCHEDULED CANCELLATION", "p => SCHEDULED CHANGE"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public Subscription Subscription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_languages")]
		public string[] Target_languages { get; set; }
		
		/// <summary>
		/// Continuous project type. We currently have only 2 types, NULL and "active".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word_count")]
		public System.Nullable<System.Int64> Word_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subscription
	{
		
		/// <summary>
		/// Stripe downgradable plan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downgrade")]
		public string[] Downgrade { get; set; }
		
		/// <summary>
		/// Stripe subscription plan payment card internal id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_method")]
		public System.Nullable<System.Int32> Payment_method { get; set; }
		
		/// <summary>
		/// Stripe plan period end
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period_end")]
		public System.Nullable<System.DateTimeOffset> Period_end { get; set; }
		
		/// <summary>
		/// Stripe subscription plan id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan_id")]
		public string Plan_id { get; set; }
		
		/// <summary>
		/// Stripe subscription plan name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan_name")]
		public string Plan_name { get; set; }
		
		/// <summary>
		/// Stripe plan price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string[] Products { get; set; }
		
		/// <summary>
		/// Stripe Scheduled plan period end
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule_name")]
		public string Schedule_name { get; set; }
		
		/// <summary>
		/// Stripe Scheduled start date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule_start")]
		public System.Nullable<System.DateTimeOffset> Schedule_start { get; set; }
		
		/// <summary>
		/// Stripe subscription id for this project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription_id")]
		public string Subscription_id { get; set; }
		
		/// <summary>
		/// Stripe upgradable plan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgrade")]
		public string[] Upgrade { get; set; }
		
		/// <summary>
		/// Stripe plan trial
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withTrial")]
		public object WithTrial { get; set; }
	}
	
	/// <summary>
	/// Continuous project cache for translations per target language.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectCache
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translations")]
		public System.Collections.Generic.Dictionary<string, ContinuousProjectLanguageCache> Translations { get; set; }
	}
	
	/// <summary>
	/// TM, MT and Nonparsed cache list for translations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectLanguageCache
	{
		
		/// <summary>
		/// source > target map of strings for translations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mt")]
		public ContinuousProjectCachedStrings Mt { get; set; }
		
		/// <summary>
		/// source > target map of strings for translations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonparsed")]
		public ContinuousProjectCachedStrings Nonparsed { get; set; }
		
		/// <summary>
		/// source > target map of strings for translations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tm")]
		public ContinuousProjectCachedStrings Tm { get; set; }
	}
	
	/// <summary>
	/// source > target map of strings for translations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectCachedStrings
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectCosts
	{
		
		[System.Runtime.Serialization.DataMember(Name="mt")]
		public Monetary Mt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="post_edit")]
		public Monetary Post_edit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="saved")]
		public Monetary Saved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public Monetary Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectDocument
	{
		
		[System.Runtime.Serialization.DataMember(Name="billed_word_count")]
		public System.Nullable<System.Int64> Billed_word_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public DocumentLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="post_edit_enabled")]
		public System.Nullable<System.Boolean> Post_edit_enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project_id")]
		public string Project_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_language")]
		public string Source_language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_languages")]
		public string[] Target_languages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word_count")]
		public System.Nullable<System.Int64> Word_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectDocumentList
	{
		
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public ContinuousProjectDocument[] Documents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectDocumentProgressBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="documentName")]
		public string DocumentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filterByLanguage")]
		public string FilterByLanguage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectDocumentStringsBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="documentName")]
		public string DocumentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectInvoices
	{
		
		[System.Runtime.Serialization.DataMember(Name="invoices")]
		public Invoice[] Invoices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Invoice
	{
		
		/// <summary>
		/// Monetary amount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Single> Amount { get; set; }
		
		/// <summary>
		/// Monetary amount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base_amount")]
		public System.Nullable<System.Single> Base_amount { get; set; }
		
		[System.ComponentModel.DefaultValue("usd")]
		[System.Runtime.Serialization.DataMember(Name="base_currency")]
		public string Base_currency { get; set; } = "usd";
		
		[System.Runtime.Serialization.DataMember(Name="billing")]
		public BillingAddress Billing { get; set; }
		
		[System.ComponentModel.DefaultValue("usd")]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; } = "usd";
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoice_no")]
		public System.Nullable<System.Int64> Invoice_no { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiced_at")]
		public System.Nullable<System.DateTimeOffset> Invoiced_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public InvoiceLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectLanguage
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_enabled")]
		public System.Nullable<System.Boolean> Is_enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectLinks : LinksMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="editors")]
		public System.Collections.Generic.Dictionary<string, Href> Editors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectProgress
	{
		
		[System.Runtime.Serialization.DataMember(Name="costs")]
		public ContinuousProjectCosts Costs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public Progress Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word_counts")]
		public ContinuousProjectWordCounts Word_counts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectWordCounts
	{
		
		[System.Runtime.Serialization.DataMember(Name="mt")]
		public System.Nullable<System.Int64> Mt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="post_edit")]
		public System.Nullable<System.Int64> Post_edit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectUpdateContent
	{
		
		[System.Runtime.Serialization.DataMember(Name="analytics_enabled")]
		public System.Nullable<System.Boolean> Analytics_enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auto_start_postedit")]
		public System.Nullable<System.Boolean> Auto_start_postedit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_enabled")]
		public System.Nullable<System.Boolean> Is_enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public ContinuousProjectLanguage[] Languages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mt_enabled")]
		public System.Nullable<System.Boolean> Mt_enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postedit_enabled")]
		public System.Nullable<System.Boolean> Postedit_enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousProjectsList
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public ContinuousProject[] Projects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CorporateAccount
	{
		
		[System.Runtime.Serialization.DataMember(Name="billing")]
		public BillingAddress Billing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Deprecated, use `domain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="web_site")]
		public string Web_site { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreditCard
	{
		
		[System.Runtime.Serialization.DataMember(Name="bin")]
		public string Bin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_default")]
		public System.Nullable<System.Boolean> Is_default { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payment_code")]
		public string Payment_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeliveryPredictionInLanguage
	{
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// true for late, false for on-time delivery
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="late")]
		public System.Nullable<System.Boolean> Late { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public System.Nullable<System.Single> Probability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeliveryPredictionPayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public System.Nullable<System.Int64> ProjectId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeliveryPredictionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public DeliveryPredictionInLanguage[] Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeprecatedStringTranslationContent
	{
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string[] Contents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_language")]
		public string Source_language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_languages")]
		public string[] Target_languages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Document
	{
		
		/// <summary>
		/// Extension of the file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_type")]
		public string File_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="has_custom_package")]
		public System.Nullable<System.Boolean> Has_custom_package { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public DocumentLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="manual_files")]
		public ManualFile[] Manual_files { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project_id")]
		public System.Nullable<System.Int64> Project_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="review_in_manual_editor")]
		public System.Nullable<System.Boolean> Review_in_manual_editor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheme")]
		public string Scheme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="search_score")]
		public System.Nullable<System.Single> Search_score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_language")]
		public string Source_language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_languages")]
		public string[] Target_languages { get; set; }
		
		/// <summary>
		/// Unix epoch time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploaded_at")]
		public System.Nullable<System.Int64> Uploaded_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word_count")]
		public System.Nullable<System.Int64> Word_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManualFile
	{
		
		[System.Runtime.Serialization.DataMember(Name="driveFileId")]
		public System.Nullable<System.Int64> DriveFileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isProofread")]
		public System.Nullable<System.Boolean> IsProofread { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTranslated")]
		public System.Nullable<System.Boolean> IsTranslated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proofreadingFileId")]
		public System.Nullable<System.Int64> ProofreadingFileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translationFileId")]
		public System.Nullable<System.Int64> TranslationFileId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentInSearch : Document
	{
		
		[System.Runtime.Serialization.DataMember(Name="search_result_reason")]
		public string Search_result_reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentLinks : LinksMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="admins")]
		public System.Collections.Generic.Dictionary<string, Href> Admins { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download")]
		public Href Download { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editors")]
		public System.Collections.Generic.Dictionary<string, Href> Editors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preview-box")]
		public Href Preview_box { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preview-pdf")]
		public Href Preview_pdf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preview-pdf-viewer")]
		public Href Preview_pdf_viewer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public Href Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Href Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strings")]
		public Href Strings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public Href Thumbnail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentList
	{
		
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public Document[] Documents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentSubjects
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentUpdates
	{
		
		/// <summary>
		/// You can add as many files as you want in documents[] parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documents[]")]
		public string[] Documents__ { get; set; }
		
		/// <summary>
		/// JSON string. If your documents have a scheme, as in cases of CSV files, use the same array index keys for `schemes` parameter to specify their schemes. See `Document Schemes` title in the API documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemes[]")]
		public string Schemes__ { get; set; }
		
		/// <summary>
		/// When provided, we will download the files from these URLs, in addition to files provded in `documents` parameter and then save as source documents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source-links[]")]
		public LinkedSourceDocument[] Source_links__ { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkedSourceDocument
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// file size in bytes. optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// Preferred source names are listed as enum. If you have a custom file type, simply enter that name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<LinkedSourceDocumentSource> Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LinkedSourceDocumentSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dropbox")]
		dropbox = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="googledrive")]
		googledrive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="icloud")]
		icloud = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentUploadRequest
	{
		
		/// <summary>
		/// Single file data. The name is plural to provide a consistent naming convention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public string Documents { get; set; }
		
		/// <summary>
		/// JSON string. If your documents have a scheme, as in cases of CSV files, use the same array index keys for `schemes` parameter to specify their schemes. See `Document Schemes` title in the API documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemes")]
		public string Schemes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source-link")]
		public LinkedSourceDocument Source_link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Earning
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Single> Amount { get; set; }
		
		[System.ComponentModel.DefaultValue("usd")]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; } = "usd";
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="due_date")]
		public System.Nullable<System.DateTimeOffset> Due_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<EarningStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="words")]
		public System.Nullable<System.Int64> Words { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="words_approved")]
		public System.Nullable<System.Int64> Words_approved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="words_translated")]
		public System.Nullable<System.Int64> Words_translated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EarningStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="paid")]
		paid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EarningWithTQS : Earning
	{
		
		/// <summary>
		/// Is this score above or below the average among other vendors in the same project?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_above_average")]
		public System.Nullable<System.Boolean> Is_above_average { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
		
		/// <summary>
		/// The number of translated strings by this translator which was edited by a proofreader.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strings_edited")]
		public System.Nullable<System.Int64> Strings_edited { get; set; }
		
		/// <summary>
		/// The number of translated strings by this translator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strings_translated")]
		public System.Nullable<System.Int64> Strings_translated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Earnings
	{
		
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public EarningWithTQS[] Completed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ongoing")]
		public EarningWithTQS[] Ongoing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Single> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Email
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileNeedsVendor
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileId")]
		public System.Nullable<System.Int64> FileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public System.Nullable<System.Int64> ProjectId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetLanguage")]
		public string[] TargetLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskType")]
		public string[] TaskType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterContents
	{
		
		[System.Runtime.Serialization.DataMember(Name="budget_codes")]
		public string[] Budget_codes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clients")]
		public SimpleModel[] Clients { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public SimpleModel[] Documents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public SimpleModel[] Projects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severities")]
		public string[] Severities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_languages")]
		public string[] Source_languages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subjects")]
		public string[] Subjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_languages")]
		public string[] Target_languages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendors")]
		public SimpleModel[] Vendors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SimpleModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterDates
	{
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_from")]
		public System.Nullable<System.DateTimeOffset> Date_from { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_to")]
		public System.Nullable<System.DateTimeOffset> Date_to { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterVendorRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clients")]
		public int[] Clients { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="communication_channel")]
		public string[] Communication_channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="corporate_ids_for_auth")]
		public int[] Corporate_ids_for_auth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="corporates")]
		public int[] Corporates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string[] Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="current_services")]
		public string[] Current_services { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="daily_proofreading_capacity")]
		public System.Nullable<System.Int32> Daily_proofreading_capacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="daily_translation_capacity")]
		public System.Nullable<System.Int32> Daily_translation_capacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_languages")]
		public int[] Destination_languages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dtp_software")]
		public string[] Dtp_software { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="experience")]
		public string[] Experience { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int[] Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_certified_translator")]
		public System.Nullable<System.Boolean> Is_certified_translator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_sworn_translator")]
		public System.Nullable<System.Boolean> Is_sworn_translator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language_pairs")]
		public string[] Language_pairs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_online")]
		public string Last_online { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_worked")]
		public string Last_worked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memoq")]
		public System.Nullable<System.Int32> Memoq { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memsource")]
		public System.Nullable<System.Int32> Memsource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="min_tqs")]
		public System.Nullable<System.Double> Min_tqs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="omegat")]
		public System.Nullable<System.Int32> Omegat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project_count")]
		public System.Nullable<System.Int32> Project_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proofreader_experience")]
		public System.Nullable<System.Int32> Proofreader_experience { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provides_creative_writing_service")]
		public System.Nullable<System.Boolean> Provides_creative_writing_service { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provides_postedit_service")]
		public System.Nullable<System.Boolean> Provides_postedit_service { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quote_file_subjects")]
		public string[] Quote_file_subjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sdl_trados")]
		public System.Nullable<System.Int32> Sdl_trados { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="search")]
		public string Search { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skype_id")]
		public string Skype_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smartcat")]
		public System.Nullable<System.Int32> Smartcat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smartling")]
		public System.Nullable<System.Int32> Smartling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_languages")]
		public int[] Source_languages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="specialization")]
		public string[] Specialization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string[] Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle_edit")]
		public System.Nullable<System.Int32> Subtitle_edit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle_workshop")]
		public System.Nullable<System.Int32> Subtitle_workshop { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translator_association")]
		public string Translator_association { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transsuite_2000")]
		public System.Nullable<System.Int32> Transsuite_2000 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_working_timezone")]
		public string[] User_working_timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_profile_lsp")]
		public string Vendor_profile_lsp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_tags")]
		public string[] Vendor_tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_type")]
		public string[] Vendor_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_working_timezone")]
		public string[] Vendor_working_timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word_count")]
		public System.Nullable<System.Int32> Word_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wordbee")]
		public System.Nullable<System.Int32> Wordbee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wordfast")]
		public System.Nullable<System.Int32> Wordfast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="work_type")]
		public string Work_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="work_with")]
		public string Work_with { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="working_as")]
		public string[] Working_as { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xbench")]
		public System.Nullable<System.Int32> Xbench { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xtm")]
		public System.Nullable<System.Int32> Xtm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Formats
	{
		
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public FormatsDocuments Documents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="glossaries")]
		public FormatsGlossaries Glossaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="styleguides")]
		public FormatsStyleguides Styleguides { get; set; }
	}
	
	public class FormatsDocuments
	{
		
		[System.Runtime.Serialization.DataMember(Name="extensions")]
		public string[] Extensions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mimes")]
		public string[] Mimes { get; set; }
	}
	
	public class FormatsGlossaries
	{
		
		[System.Runtime.Serialization.DataMember(Name="extensions")]
		public string[] Extensions { get; set; }
	}
	
	public class FormatsStyleguides
	{
		
		[System.Runtime.Serialization.DataMember(Name="extensions")]
		public string[] Extensions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetQuotesForDocumentsBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="files")]
		public int[] Files { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetQuotesForLanguagesBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Glossary
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public DocumentLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Unix epoch time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploaded_at")]
		public System.Nullable<System.Int64> Uploaded_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GlossaryList
	{
		
		[System.Runtime.Serialization.DataMember(Name="glossaries")]
		public Glossary[] Glossaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GlossaryUploadRequest
	{
		
		/// <summary>
		/// You can only add one glossary, even though the name suggests multiple glossaries. This may be updated in the future to support multiple glossaries.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="glossaries")]
		public string Glossaries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstantContentsTranslationResult
	{
		
		/// <summary>
		/// a map of source string > translated string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public System.Collections.Generic.Dictionary<string, string> Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstantFilesTranslationResult
	{
		
		/// <summary>
		/// a map of source file name > base64-encoded translated file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public System.Collections.Generic.Dictionary<string, string> Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstantTranslationFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="skipMt")]
		public string[] SkipMt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skipPostEdit")]
		public string[] SkipPostEdit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstantTranslationRequest
	{
		
		/// <summary>
		/// Simple list of strings to be translated. You can also choose to upload files instead of strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string[] Contents { get; set; }
		
		/// <summary>
		/// You can add as many files as you want in documents parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public FileAsData[] Documents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public InstantTranslationFilter Filters { get; set; }
		
		/// <summary>
		/// Free-form meta data to attach to your instant translation request. This can be used in statistics and analytical dashboards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public string Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstantTranslationResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntegrationsToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvitedVendor
	{
		
		/// <summary>
		/// Action to be taken
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Email opening rate of the vendor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_open_rate")]
		public System.Nullable<System.Double> Email_open_rate { get; set; }
		
		/// <summary>
		/// Did the vendor enter the given project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_entered")]
		public System.Nullable<System.Boolean> Is_entered { get; set; }
		
		/// <summary>
		/// Is vendor get ever paid?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_get_paid")]
		public System.Nullable<System.Boolean> Is_get_paid { get; set; }
		
		/// <summary>
		/// Did the vendor work on the given project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_worked")]
		public System.Nullable<System.Boolean> Is_worked { get; set; }
		
		/// <summary>
		/// Vendors working status in any project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_worked_in_any_project")]
		public System.Nullable<System.Boolean> Is_worked_in_any_project { get; set; }
		
		/// <summary>
		/// Last project date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_project_date")]
		public System.Nullable<System.DateOnly> Last_project_date { get; set; }
		
		/// <summary>
		/// Project translation percentage when interacted with the vendor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project_status_when_interacted")]
		public System.Nullable<System.Double> Project_status_when_interacted { get; set; }
		
		/// <summary>
		/// Registration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registration_date")]
		public System.Nullable<System.DateOnly> Registration_date { get; set; }
		
		/// <summary>
		/// Responsiveness of the vendor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsiveness")]
		public System.Nullable<System.Double> Responsiveness { get; set; }
		
		/// <summary>
		/// Id in the Users
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
		
		/// <summary>
		/// Id in the Vendors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor_id")]
		public string Vendor_id { get; set; }
		
		/// <summary>
		/// The name of the vendor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor_name")]
		public string Vendor_name { get; set; }
		
		/// <summary>
		/// Type of the vendor in the given project namely translator or proofreader
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor_type")]
		public string Vendor_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvitedVendorsByLanguage
	{
		
		/// <summary>
		/// Invited vendors for this target language
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invited_vendors")]
		public InvitedVendor[] Invited_vendors { get; set; }
		
		/// <summary>
		/// Target Language that the vendors invited for
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target_language")]
		public string Target_language { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceLinks : LinksMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="corporate")]
		public Href Corporate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="html")]
		public Href Html { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="json")]
		public Href Json { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf")]
		public Href Pdf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Href Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="view")]
		public Href View { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Language
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LanguagePairsReport
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report")]
		public LanguagePairsReportReport[] LanguagePairsReportReport { get; set; }
	}
	
	public class LanguagePairsReportReport
	{
		
		[System.Runtime.Serialization.DataMember(Name="language_pair")]
		public LanguagePairsReportReportLanguage_pair Language_pair { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spending")]
		public System.Nullable<System.Single> Spending { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word_count")]
		public System.Nullable<System.Int64> Word_count { get; set; }
	}
	
	public class LanguagePairsReportReportLanguage_pair
	{
		
		[System.Runtime.Serialization.DataMember(Name="source_language")]
		public string Source_language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_language")]
		public string Target_language { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public Href Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ListOrderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asc")]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="desc")]
		desc = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationUpdateContent
	{
		
		/// <summary>
		/// Latitude of location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public float Lat { get; set; }
		
		/// <summary>
		/// Longitude of location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public float Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Int32> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MachineTranslatedStrings
	{
		
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public Monetary Cost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strings")]
		public ClientStringWithTranslations[] Strings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NewProject
	{
		
		/// <summary>
		/// Optional. If you provide a callback URL, we will send POST callbacks when the status of the current project is changed. Possible status changes are, 'translated', 'proofread', 'completed'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callback_url")]
		public string Callback_url { get; set; }
		
		/// <summary>
		/// Coupon code to redeem
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coupon_code")]
		public string Coupon_code { get; set; }
		
		/// <summary>
		/// Optional. This is a consistent custom data parameter that will be given to you in the response across every request of this project model. Values should be provided like this, custom[my_key] = my_value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom")]
		public string[] Custom { get; set; }
		
		/// <summary>
		/// Optional. You can add as many files as you want in documents[] parameter. Or you add your documents later in separate calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documents[]")]
		public string Documents__ { get; set; }
		
		/// <summary>
		/// Optional. Only one glossary is supported at the moment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glossaries[]")]
		public string Glossaries__ { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_language")]
		public string Source_language { get; set; }
		
		/// <summary>
		/// Optional. You can add as many files as you want in styleguides[] parameter. Or you add your style guides later in separate calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="styleguides[]")]
		public string Styleguides__ { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_languages[]")]
		public string[] Target_languages__ { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NewSalesActivity
	{
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Int64> Timestamp { get; set; }
		
		/// <summary>
		/// Activity Type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationSubscription
	{
		
		[System.Runtime.Serialization.DataMember(Name="device")]
		public System.Nullable<NotificationSubscriptionDevice> Device { get; set; }
		
		/// <summary>
		/// OneSignal calls this "player ID".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<NotificationSubscriptionType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NotificationSubscriptionDevice
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="iOS")]
		iOS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Android")]
		Android = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Chrome")]
		Chrome = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Firefox")]
		Firefox = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Safari")]
		Safari = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Edge")]
		Edge = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon")]
		Amazon = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WindowsPhone")]
		WindowsPhone = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Windows")]
		Windows = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MacOS")]
		MacOS = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NotificationSubscriptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OneSignal")]
		OneSignal = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OperationStatusStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OperationStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="success")]
		success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error")]
		error = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OperationStatusEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="success")]
		success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error")]
		error = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Package : PackageStatus
	{
		
		/// <summary>
		/// This is the unique package tracking key. You can use this key to track the current progress of the translation packaging with /package/check call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PackageStatus
	{
		
		/// <summary>
		/// The status of translation packaging. Possible values are 'started', 'packaging', 'completed'. When completed, you can make a /download call to download the last translation package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PackageStatusStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PackageStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="started")]
		started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="packaging")]
		packaging = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 2,
	}
	
	/// <summary>
	/// The status of translation packaging. Possible values are 'started', 'packaging', 'completed'. When completed, you can make a /download call to download the last translation package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PackageStatusEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="started")]
		started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="packaging")]
		packaging = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagingLinksMeta : LinksMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PamMessage
	{
		
		/// <summary>
		/// the message to be sent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// name of the recipients in the channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public string[] Recipients { get; set; }
		
		/// <summary>
		/// contexts for next message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slots")]
		public string[] Slots { get; set; }
		
		/// <summary>
		/// id of the thread
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thread_id")]
		public string Thread_id { get; set; }
		
		/// <summary>
		/// the key for thread_id default is project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thread_key")]
		public string Thread_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PasswordUpdateContent
	{
		
		/// <summary>
		/// New Password
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="billing")]
		public BillingAddress Billing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="card")]
		public CreditCard Card { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cards")]
		public CreditCard[] Cards { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="corporate")]
		public PaymentInfoCorporate Corporate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_card")]
		public CreditCard Shared_card { get; set; }
	}
	
	public class PaymentInfoCorporate
	{
		
		[System.Runtime.Serialization.DataMember(Name="allow_api_invoicing")]
		public System.Nullable<System.Boolean> Allow_api_invoicing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allow_payment_code")]
		public System.Nullable<System.Boolean> Allow_payment_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auto_charge")]
		public System.Nullable<System.Boolean> Auto_charge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billing")]
		public BillingAddress Billing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="card")]
		public CreditCard Card { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact_email_address")]
		public string Contact_email_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payment_code")]
		public string Payment_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PermissionList
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PopularLanguagePairs
	{
		
		[System.Runtime.Serialization.DataMember(Name="pairs")]
		public LanguagePair[] Pairs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfilePictureUpload
	{
		
		/// <summary>
		/// Profile picture file contents. Accepted extensions are png, jpg.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profile_picture")]
		public string Profile_picture { get; set; }
	}
	
	public class Progress
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProgressLink : LinksMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Href Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProgressSub
	{
		
		[System.Runtime.Serialization.DataMember(Name="proofreading")]
		public System.Nullable<System.Single> Proofreading { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Single> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translation")]
		public System.Nullable<System.Single> Translation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word_count")]
		public System.Nullable<System.Int64> Word_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectCompletionReport
	{
		
		/// <summary>
		/// Assigned admin's user id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="admin_user_id")]
		public string Admin_user_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completion_report_data")]
		public InvitedVendorsByLanguage[] Completion_report_data { get; set; }
		
		/// <summary>
		/// internal id of the project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// quote id of the project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quote_id")]
		public string Quote_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectId
	{
		
		[System.Runtime.Serialization.DataMember(Name="internal-id")]
		public System.Nullable<System.Int64> Internal_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="public-id")]
		public System.Nullable<System.Int64> Public_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectInSearch : Project
	{
		
		[System.Runtime.Serialization.DataMember(Name="search_result_reason")]
		public string Search_result_reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectLaunchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ProjectLaunchResponseStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectLaunchResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="started")]
		started = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectLaunchResponseEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="started")]
		started = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectLinks : LinksMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public Href Documents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="glossaries")]
		public Href Glossaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payment")]
		public Href Payment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quote-pdf")]
		public Href Quote_pdf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="styleguides")]
		public Href Styleguides { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectList
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public Project[] Projects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectPayment
	{
		
		/// <summary>
		/// Last 4 digits of the credit card you are using one-time. This parameter is only required when stripe_token is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bin")]
		public string Bin { get; set; }
		
		/// <summary>
		/// Optional with corporate accounts. Not available for others.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budget_code")]
		public string Budget_code { get; set; }
		
		/// <summary>
		/// Optional. `client`, `app`, `corporate_card` methods require a credit card ID. `credit` method requires Stripe token and bin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_id")]
		public System.Nullable<System.Int64> Card_id { get; set; }
		
		/// <summary>
		/// Optional. `corporate` payment method requires this.s
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_code")]
		public string Payment_code { get; set; }
		
		/// <summary>
		/// Optional. Determines which method to use for payment. `client`, `app`, `corporate_card` methods require a credit card ID. `credit` method requires Stripe token and bin. `corporate` method follows corporate account policy automatically, either follows invoicing flow or automatically charges corporate's primary card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_method")]
		public System.Nullable<ProjectPaymentPayment_method> Payment_method { get; set; }
		
		/// <summary>
		/// This is required if you are using a one-time credit card. This is the token generted from frontend via Stripe SDK. If you are using a one-time card with `stripe_token`, you must also provide `bin`, last 4 digits of the card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stripe_token")]
		public string Stripe_token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectPaymentPayment_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="corporate")]
		corporate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="client")]
		client = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="app")]
		app = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credit")]
		credit = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="corporate_card")]
		corporate_card = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectTQS
	{
		
		/// <summary>
		/// Is this score above or below the average among other vendors in the same project?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_above_average")]
		public System.Nullable<System.Boolean> Is_above_average { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
		
		/// <summary>
		/// The number of translated strings by this translator which was edited by a proofreader.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strings_edited")]
		public System.Nullable<System.Int64> Strings_edited { get; set; }
		
		/// <summary>
		/// The number of translated strings by this translator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strings_translated")]
		public System.Nullable<System.Int64> Strings_translated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectUpdate
	{
		
		/// <summary>
		/// Optional. If you provide a callback URL, we will send POST callbacks when the status of the current project is changed. Possible status changes are, 'translated', 'proofread', 'completed'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callback_url")]
		public string Callback_url { get; set; }
		
		/// <summary>
		/// Coupon code to redeem
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coupon_code")]
		public string Coupon_code { get; set; }
		
		/// <summary>
		/// Optional. This is a consistent custom data parameter that will be given to you in the response across every request of this project model. Values should be provided like this, custom[my_key] = my_value. If you previously provided one, it will be replaced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom")]
		public string[] Custom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_language")]
		public string Source_language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_languages[]")]
		public string[] Target_languages__ { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QaEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="docId")]
		public string DocId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editorLink")]
		public string EditorLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int64> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inSource")]
		public System.Nullable<System.Boolean> InSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCurrent")]
		public System.Nullable<System.Boolean> IsCurrent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="module")]
		public string Module { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public SimpleModel ProjectId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceLanguage")]
		public SimpleModel SourceLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int64> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetLanguage")]
		public SimpleModel TargetLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translation")]
		public string Translation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uniqueKey")]
		public string UniqueKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public SimpleModel Vendor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QaFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="budget_codes")]
		public string[] Budget_codes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clients")]
		public double[] Clients { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_from")]
		public System.Nullable<System.DateTimeOffset> Date_from { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_to")]
		public System.Nullable<System.DateTimeOffset> Date_to { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public double[] Documents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public double[] Projects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severities")]
		public string[] Severities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_languages")]
		public string[] Source_languages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subjects")]
		public string[] Subjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_languages")]
		public string[] Target_languages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendors")]
		public double[] Vendors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QaWarnings
	{
		
		[System.Runtime.Serialization.DataMember(Name="report")]
		public QaEntry[] Report { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegeneratePreviewResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public Href Link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportContent
	{
		
		/// <summary>
		/// Activity Type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activity_type")]
		public string Activity_type { get; set; }
		
		/// <summary>
		/// Report Message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportFilter
	{
		
		/// <summary>
		/// budget code filter. valid for corporate accounts only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budget_code")]
		public string Budget_code { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_from")]
		public System.Nullable<System.DateTimeOffset> Date_from { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_to")]
		public System.Nullable<System.DateTimeOffset> Date_to { get; set; }
		
		/// <summary>
		/// List of source language codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_languages")]
		public string[] Source_languages { get; set; }
		
		/// <summary>
		/// List of target language codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target_languages")]
		public string[] Target_languages { get; set; }
		
		/// <summary>
		/// List of corporate user IDs. Valid for corporate accounts only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public int[] Users { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Responsivity
	{
		
		[System.Runtime.Serialization.DataMember(Name="invited")]
		public System.Nullable<System.Int64> Invited { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="month")]
		public string Month { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notEntered")]
		public System.Nullable<System.Int64> NotEntered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onlyEntered")]
		public System.Nullable<System.Int64> OnlyEntered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="week")]
		public string Week { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="worked")]
		public System.Nullable<System.Int64> Worked { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResponsivityList
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public LinksMeta Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responsivity")]
		public Responsivity[] Responsivity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesActivities
	{
		
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public SalesActivity[] Activities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesActivity
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SalesActivityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMAIL")]
		EMAIL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOTE")]
		NOTE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCOMING_EMAIL")]
		INCOMING_EMAIL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TASK")]
		TASK = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchEverywhereResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public SearchEverywhereResultResult Result { get; set; }
	}
	
	public class SearchEverywhereResultResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public DocumentInSearch[] Documents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public ProjectInSearch[] Projects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strings")]
		public StringInSearch[] Strings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StringInSearch
	{
		
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public System.Nullable<System.Int64> File_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internal_project_id")]
		public System.Nullable<System.Int64> Internal_project_id { get; set; }
		
		/// <summary>
		/// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_updated")]
		public System.Nullable<System.DateTimeOffset> Last_updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project_id")]
		public System.Nullable<System.Int64> Project_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="search_score")]
		public System.Nullable<System.Single> Search_score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<StringInSearchStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="string_id")]
		public System.Nullable<System.Int64> String_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public string[] Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tm_name")]
		public string Tm_name { get; set; }
		
		/// <summary>
		/// String search result typ from ZNT. Options are LOCAL_PROJECT, IMPORTED_TM. Imported TM results should probably not be visible to end users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<StringInSearchType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StringInSearchStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Approved")]
		Approved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Translated")]
		Translated = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StringInSearchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCAL_PROJECT")]
		LOCAL_PROJECT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORTED_TM")]
		IMPORTED_TM = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleString
	{
		
		/// <summary>
		/// source string content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_id")]
		public System.Nullable<System.Int64> File_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Stats
	{
		
		[System.Runtime.Serialization.DataMember(Name="client")]
		public ClientStats Client { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public VendorStats Vendor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VendorStats
	{
		
		[System.Runtime.Serialization.DataMember(Name="earnings")]
		public VendorEarningStats Earnings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public VendorProjectStats Projects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="words")]
		public VendorWordStats Words { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VendorEarningStats
	{
		
		/// <summary>
		/// total amount of USD that this user has earned in the platform so far.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Single> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VendorProjectStats
	{
		
		/// <summary>
		/// total number of projects that this user was invited to. TODO this key is to replace "total" key due to naming ambiguity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invited")]
		public System.Nullable<System.Int64> Invited { get; set; }
		
		/// <summary>
		/// total number of projects that this user was invited to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
		
		/// <summary>
		/// total number of projects that this user actually worked on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="worked")]
		public System.Nullable<System.Int64> Worked { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VendorWordStats
	{
		
		/// <summary>
		/// total number of words that this user has approved so far.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approved")]
		public System.Nullable<System.Int64> Approved { get; set; }
		
		/// <summary>
		/// total number of words that this user has translated so far.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translated")]
		public System.Nullable<System.Int64> Translated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StringList
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translations")]
		public StringWithTranslations[] Translations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StringWithTranslations : SingleString
	{
		
		[System.Runtime.Serialization.DataMember(Name="translations")]
		public System.Collections.Generic.Dictionary<string, StringTranslation> Translations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StringTranslation
	{
		
		/// <summary>
		/// source string content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public StringInSearchStatus State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StringTranslationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Approved")]
		Approved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Translated")]
		Translated = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StyleGuide
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public DocumentLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Unix epoch time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploaded_at")]
		public System.Nullable<System.Int64> Uploaded_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StyleGuideList
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="styleguides")]
		public StyleGuide[] Styleguides { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StyleGuideUploadRequest
	{
		
		/// <summary>
		/// You can only add one style guide, even though the name suggests multiple style guides. This may be updated in the future to support multiple style guides.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="styleguides")]
		public string Styleguides { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SurveyAnswer
	{
		
		[System.Runtime.Serialization.DataMember(Name="answer")]
		public string Answer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project_id")]
		public System.Nullable<System.Int64> Project_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="question_answer_id")]
		public System.Nullable<System.Int64> Question_answer_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="question_id")]
		public System.Nullable<System.Int64> Question_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public System.Nullable<System.Int64> User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SurveyAnswers
	{
		
		[System.Runtime.Serialization.DataMember(Name="answers")]
		public SurveyAnswer[] Answers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SurveyQuestion
	{
		
		[System.Runtime.Serialization.DataMember(Name="answers")]
		public SimpleModel[] Answers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="question")]
		public SurveyQuestionQuestion Question { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="question_answers")]
		public SimpleModel[] Question_answers { get; set; }
	}
	
	public class SurveyQuestionQuestion
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="question")]
		public string Question { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuspendUserRequest
	{
		
		/// <summary>
		/// Suspension reason for vendor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Token
	{
		
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public System.Nullable<System.Int64> Expires_in { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		public string Token_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public System.Nullable<System.Int64> User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokenError : Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="account_status")]
		public System.Nullable<TokenErrorAccount_status> Account_status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TokenErrorAccount_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="registered")]
		registered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email_confirmed")]
		email_confirmed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deleted")]
		deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="suspended")]
		suspended = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="approved")]
		approved = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resume")]
		resume = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webinar")]
		webinar = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="course")]
		course = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokenRequest
	{
		
		/// <summary>
		/// OAuth2 grant type. Supports 'client_credentials', 'password', 'refresh_token' or 'user_id'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grant_type")]
		public string Grant_type { get; set; }
		
		/// <summary>
		/// MW Account password (to be used in password grant type)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Refresh token value for refresh token flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
		
		/// <summary>
		/// Authorization scope. Use 'privileged' for private endpoints.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// Value for user_id grant type flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public System.Nullable<System.Int64> User_id { get; set; }
		
		/// <summary>
		/// MW Account email (to be used in password grant type)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TranslationMemoryUnit
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceLanguage")]
		public string SourceLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceText")]
		public string SourceText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetLanguage")]
		public string TargetLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetText")]
		public string TargetText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePaymentInfo : Address
	{
		
		[System.Runtime.Serialization.DataMember(Name="bin")]
		public string Bin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="save_as_corporate_primary")]
		public System.Nullable<System.Boolean> Save_as_corporate_primary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="share_with_corporate_users")]
		public System.Nullable<System.Boolean> Share_with_corporate_users { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripeToken")]
		public string StripeToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UseAsDraftPayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromFileId")]
		public System.Nullable<System.Double> FromFileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromManualTranslationFileId")]
		public System.Nullable<System.Double> FromManualTranslationFileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toManualTranslationFileId")]
		public System.Nullable<System.Double> ToManualTranslationFileId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UseAsRegularPayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowOriginalFilePreview")]
		public System.Nullable<System.Boolean> AllowOriginalFilePreview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowReviewInManualEditor")]
		public System.Nullable<System.Boolean> AllowReviewInManualEditor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disableInvitations")]
		public System.Nullable<System.Boolean> DisableInvitations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromManualTranslationFileId")]
		public System.Nullable<System.Double> FromManualTranslationFileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideNumbers")]
		public System.Nullable<System.Boolean> HideNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recreate")]
		public System.Nullable<System.Boolean> Recreate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserGroupList
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_groups")]
		public UserGroup[] User_groups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserLinks : LinksMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="login_as")]
		public Href Login_as { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public Href Projects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responsivity")]
		public Href Responsivity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public Href Stats { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserList
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public User[] Users { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserUpdateContent : Address
	{
		
		[System.Runtime.Serialization.DataMember(Name="birthday")]
		public System.Nullable<System.DateOnly> Birthday { get; set; }
		
		/// <summary>
		/// Optional. User e-mail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Optional. User first name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Optional. ID of the user being updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Optional. User last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Notification settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifications")]
		public UserUpdateContentNotifications Notifications { get; set; }
		
		/// <summary>
		/// Notify new user account creation with login information and MotaWord introduction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notify")]
		public System.Nullable<System.Boolean> Notify { get; set; }
		
		/// <summary>
		/// Optional. Vendor paypal e-mail
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paypal_email")]
		public string Paypal_email { get; set; }
		
		/// <summary>
		/// Optional. Whether this vendor requires 1099 form in US for their earnings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="require_1099")]
		public System.Nullable<System.Boolean> Require_1099 { get; set; }
		
		/// <summary>
		/// A list of user group IDs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_groups")]
		public int[] User_groups { get; set; }
	}
	
	public class UserUpdateContentNotifications
	{
		
		/// <summary>
		/// User phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// User sms notification setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sms_enabled")]
		public System.Nullable<System.Boolean> Sms_enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsersReport
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PagingMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report")]
		public UsersReportReport[] UsersReportReport { get; set; }
	}
	
	public class UsersReportReport
	{
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spending")]
		public System.Nullable<System.Single> Spending { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word_count")]
		public System.Nullable<System.Int64> Word_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VendorInvitationList
	{
		
		[System.Runtime.Serialization.DataMember(Name="vendors")]
		public VendorWithNeeds[] Vendors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VendorWithNeeds
	{
		
		[System.Runtime.Serialization.DataMember(Name="matchedNeeds")]
		public FileNeedsVendor[] MatchedNeeds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	/// <summary>
	/// Currently authed vendor's role in this project. If vendor has already joined, this contains the role they joined the project with. If not joined yet, this is the role that they can join the project with.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VendorProjectRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="translator")]
		translator = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="proofreader")]
		proofreader = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="both")]
		both = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VendorTag
	{
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Webhook
	{
		
		/// <summary>
		/// Webhook URL. We will send POST callbacks when the status of the current project is changed. Possible status changes are, 'translated', 'proofread', 'completed'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callback_url")]
		public string Callback_url { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Available endpoints
		/// The root endpoint will provide you with an OpenAPI definition of MotaWord API.
		/// 
		/// GetEndpoints 
		/// </summary>
		/// <returns>YAML representation of our OpenAPI definition.</returns>
		public async Task GetEndpointsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download result of an async operation
		/// Download the result of an async operation that you have requested in other endpoints.
		/// Download async/download
		/// </summary>
		/// <param name="async_request_key">Async operation key</param>
		/// <returns>File</returns>
		public async Task DownloadAsync(string async_request_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "async/download?async_request_key=" + (async_request_key==null? "" : System.Uri.EscapeDataString(async_request_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get blog posts - ordered by created desc by default
		/// GetBlogPosts blogs
		/// </summary>
		/// <param name="locale">Article language, default `en`. When no blog article is available and `fallback=true` is specified, it falls back to `en`.</param>
		/// <param name="fallback">When `true`, and no article is found in the locale, it falls back to `locale=en`.</param>
		/// <returns>List of blog articles</returns>
		public async Task<BlogArticleList> GetBlogPostsAsync(string locale, bool fallback, long page, long per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "blogs?locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&fallback="+fallback+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BlogArticleList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear cache by key
		/// DeleteCache cache/{key}
		/// </summary>
		/// <param name="key">Cache key</param>
		/// <returns>Operation status</returns>
		public async Task<OperationStatus> DeleteCacheAsync(string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cache/"+ (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a commission list of current client.
		/// GetCommissions commissions
		/// </summary>
		/// <returns>Commissions for client.</returns>
		public async Task<CommissionList> GetCommissionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "commissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommissionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a commission list of current client.
		/// GetCommissionsByFilter commissions
		/// </summary>
		/// <returns>Commissions for client.</returns>
		public async Task<CommissionList> GetCommissionsByFilterAsync(ReportFilter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "commissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommissionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View continuous projects
		/// View a list of continuous projects under your account. Continuous projects are those that are constantly updated, such as a CI/CD project, software project, website translation and such.
		/// GetContinuousProjects continuous_projects
		/// </summary>
		/// <param name="type">Type of continuous project.</param>
		/// <returns>Newly created continuous project</returns>
		public async Task<ContinuousProjectsList> GetContinuousProjectsAsync(GetContinuousProjectsType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects?type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContinuousProjectsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a continuous project
		/// Create a new continuous project for your software, website, CI/CD translation needs.
		/// CreateContinuousProject continuous_projects
		/// </summary>
		/// <returns>Newly created continuous project</returns>
		public async Task<ContinuousProject> CreateContinuousProjectAsync(ContinuousProject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContinuousProject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a continuous project
		/// Delete an existing continuous project. Your project will be cancelled, and you will still be charged for the amount of translations we have done for you so far.
		/// DeleteContinuousProject continuous_projects/{id}
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <returns>Continuous project deleted successfully</returns>
		public async Task<OperationStatus> DeleteContinuousProjectAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View a continuous project
		/// View the details of a continuous project.
		/// GetContinuousProject continuous_projects/{id}
		/// </summary>
		/// <param name="id">Continuous Project ID</param>
		/// <returns>ContinuousProject model</returns>
		public async Task<ContinuousProject> GetContinuousProjectAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContinuousProject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a continuous project
		/// Update the details and settings of continuous project.
		/// UpdateContinuousProject continuous_projects/{id}
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <returns>Update continuous project operation status</returns>
		public async Task<ContinuousProject> UpdateContinuousProjectAsync(long id, ContinuousProjectUpdateContent requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContinuousProject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get JWT token to be used in analytics dashboards
		/// Get JWT token to be used in analytics dashboards
		/// GetAnalyticsToken continuous_projects/{id}/analytics-token
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <returns>JWT token result</returns>
		public async Task<AnalyticsToken> GetAnalyticsTokenAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/analytics-token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalyticsToken>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save/collect analytics data from Active widget
		/// Save/collect analytics data from Active widget
		/// CollectAnalytics continuous_projects/{id}/collect-analytics
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <returns>Analytics data collection result</returns>
		public async Task<OperationStatus> CollectAnalyticsAsync(long id, AnalyticsCollection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/collect-analytics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Complete continuous project
		/// Complete continuous project
		/// Complete continuous_projects/{id}/complete
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <returns>Operation status</returns>
		public async Task<OperationStatus> CompleteAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/complete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get quote for documents
		/// Get a new quote for provided documents in continuous project
		/// GetQuoteForDocuments continuous_projects/{id}/documents/quote
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <returns>Newly created project</returns>
		public async Task<ProjectList> GetQuoteForDocumentsAsync(long id, GetQuotesForDocumentsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/documents/quote";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Complete a continuous project document
		/// Complete a continuous project document. Per your project settings, a continuous project document can be target language-specific or project-wide for all target languages of the project.
		/// CompleteContinuousDocument continuous_projects/{id}/documents/{documentId}/complete
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <param name="documentId">Document ID</param>
		/// <returns>Operation status</returns>
		public async Task<OperationStatus> CompleteContinuousDocumentAsync(long id, long documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/documents/"+documentId+"/complete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a quote for a continuous project document
		/// Get a new quote for provided document in continuous project. Per your project settings, a continuous project document can be target language-specific or project-wide for all target languages of the project.
		/// GetQuoteForDocument continuous_projects/{id}/documents/{documentId}/quote
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <param name="documentId">Document ID</param>
		/// <returns>Newly created project</returns>
		public async Task<ProjectList> GetQuoteForDocumentAsync(long id, long documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/documents/"+documentId+"/quote";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get quote for languages
		/// Get a new quote for provided target languages in continuous project
		/// GetQuoteForLanguages continuous_projects/{id}/languages/quote
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <returns>Newly created project</returns>
		public async Task<ProjectList> GetQuoteForLanguagesAsync(long id, GetQuotesForLanguagesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/languages/quote";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Complete continuous project language
		/// Complete continuous project language
		/// CompleteLanguage continuous_projects/{id}/languages/{targetLanguage}/complete
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <param name="targetLanguage">Target language that you want to complete</param>
		/// <returns>Operation status</returns>
		public async Task<OperationStatus> CompleteLanguageAsync(long id, string targetLanguage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/languages/"+ (targetLanguage==null? "" : System.Uri.EscapeDataString(targetLanguage))+"/complete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get quote for language
		/// Get a new quote for provided target language in continuous project
		/// GetQuoteForLanguage continuous_projects/{id}/languages/{targetLanguage}/quote
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <param name="targetLanguage">Target language that you want to complete</param>
		/// <returns>Newly created project(s)</returns>
		public async Task<ProjectList> GetQuoteForLanguageAsync(long id, string targetLanguage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/languages/"+ (targetLanguage==null? "" : System.Uri.EscapeDataString(targetLanguage))+"/quote";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete subscription for continuous project
		/// Delete subscription for continuous project
		/// DeleteSubscription continuous_projects/{id}/subscription
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <returns>Delete continuous project subscription</returns>
		public async Task<Subscription> DeleteSubscriptionAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/subscription";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get subscription for continuous project
		/// Get subscription for continuous project
		/// GetSubscription continuous_projects/{id}/subscription
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <returns>Get continuous project subscription</returns>
		public async Task<Subscription> GetSubscriptionAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/subscription";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create subscription for continuous project
		/// Create subscription for continuous project
		/// CreateSubscription continuous_projects/{id}/subscription
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <returns>Newly created continuous project subscription</returns>
		public async Task<Subscription> CreateSubscriptionAsync(long id, Subscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/subscription";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update subscription for continuous project
		/// Update subscription for continuous project
		/// UpdateSubscription continuous_projects/{id}/subscription
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <returns>Updated continuous project subscription</returns>
		public async Task<Subscription> UpdateSubscriptionAsync(long id, Subscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/subscription";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update subscription payment method for continuous project
		/// Update subscription payment method for continuous project
		/// UpdateSubscriptionPaymentMethod continuous_projects/{id}/subscription/payment
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <returns>Updated continuous project subscription</returns>
		public async Task<Subscription> UpdateSubscriptionPaymentMethodAsync(long id, Subscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/subscription/payment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Instantly translate your content
		/// Instantly translate your content with your existing TM and MT resources. This is the primary endpoint to translate your files and content on the fly, especially in CI/CD environments. This is a complex endpoint that is configured in your Active or Continuous Project dashboards. For instance, you can configure whether to use your TM, or translate missing strings via MT and then post-edit those new translations. There are various scenarios you can establish via a set of configurations.
		/// Translate continuous_projects/{id}/translate/{targetLanguage}
		/// </summary>
		/// <param name="id">Continuous project ID</param>
		/// <param name="targetLanguage">Target language that you want to instantly translate your file into.</param>
		/// <returns>Instant translation result. It may return a list of translated strings, or a list of translated files.</returns>
		public async Task<InstantTranslationResult> TranslateAsync(long id, string targetLanguage, InstantTranslationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+id+"/translate/"+ (targetLanguage==null? "" : System.Uri.EscapeDataString(targetLanguage));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InstantTranslationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View continuous documents
		/// View the documents under this continuous project
		/// GetContinuousProjectDocuments continuous_projects/{projectId}/documents
		/// </summary>
		/// <param name="projectId">Continuous Project ID</param>
		/// <returns>A list of continuous project document models</returns>
		public async Task<ContinuousProjectDocumentList> GetContinuousProjectDocumentsAsync(long projectId, string filterByLanguage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/documents?filterByLanguage=" + (filterByLanguage==null? "" : System.Uri.EscapeDataString(filterByLanguage));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContinuousProjectDocumentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new document to your continuous project
		/// Add a new document to your continuous project. If the name already exists, it will update the existing document. In most scenarios, this operation will also trigger auto-translation of your document, via MT and/or TM.
		/// AddDocument continuous_projects/{projectId}/documents
		/// </summary>
		/// <param name="projectId">Continuous project ID</param>
		/// <returns>The newly added continuous project document object.</returns>
		public async Task<ContinuousProjectDocument> AddDocumentAsync(long projectId, AddOrUpdateDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/documents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContinuousProjectDocument>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get continuous project document progress for multiple IDs
		/// Get continuous project document progress for multiple IDs
		/// PostContinuousProjectDocumentProgress continuous_projects/{projectId}/documents/progress
		/// </summary>
		/// <param name="projectId">Continuous project ID</param>
		/// <returns>Progress information</returns>
		public async Task<Progress> PostContinuousProjectDocumentProgressAsync(long projectId, ContinuousProjectDocumentProgressBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/documents/progress";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Progress>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of strings and its translations in the project.
		/// PostContinuousProjectFileStrings continuous_projects/{projectId}/documents/strings
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <returns>Response for strings and their translations</returns>
		public async Task<StringList> PostContinuousProjectFileStringsAsync(long projectId, ContinuousProjectDocumentStringsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/documents/strings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StringList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View a continuous document
		/// View the details of a source document in continuous translation project.
		/// GetContinuousProjectDocument continuous_projects/{projectId}/documents/{documentId}
		/// </summary>
		/// <param name="projectId">Continuous project ID</param>
		/// <param name="documentId">Document ID/Name</param>
		/// <returns>Progress information</returns>
		public async Task<ContinuousProjectDocument> GetContinuousProjectDocumentAsync(long projectId, long documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/documents/"+documentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContinuousProjectDocument>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the document
		/// Update source document in your continuous project. In most scenarios, this operation will also trigger auto-translation of your document, via MT and/or TM.
		/// UpdateDocument continuous_projects/{projectId}/documents/{documentId}
		/// </summary>
		/// <param name="projectId">Continuous project ID</param>
		/// <param name="documentId">Continuous project document ID</param>
		/// <returns>The updated continuous project document object.</returns>
		public async Task<ContinuousProjectDocument> UpdateDocumentAsync(long projectId, long documentId, AddOrUpdateDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/documents/"+documentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContinuousProjectDocument>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Monitor progress of a continuous document
		/// Monitor the translation progress of a document in a continuous project in real-time.
		/// GetContinuousProjectDocumentProgress continuous_projects/{projectId}/documents/{documentId}/progress
		/// </summary>
		/// <param name="projectId">Continuous project ID</param>
		/// <param name="documentId">Document ID/Name</param>
		/// <returns>Progress information</returns>
		public async Task<Progress> GetContinuousProjectDocumentProgressAsync(long projectId, long documentId, string filterByLanguage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/documents/"+documentId+"/progress?filterByLanguage=" + (filterByLanguage==null? "" : System.Uri.EscapeDataString(filterByLanguage));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Progress>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View strings their translations in a continuous document
		/// View the strings from a document and their translations in your continuous translation project, for all target languages. If you need the translated version of your source document/file, then you need to use package and download endpoints.
		/// GetContinuousProjectFileStrings continuous_projects/{projectId}/documents/{documentId}/strings
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="documentId">Document ID/Name</param>
		/// <returns>Response for strings and their translations</returns>
		public async Task<StringList> GetContinuousProjectFileStringsAsync(long projectId, long documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/documents/"+documentId+"/strings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StringList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invoices of a continuous project
		/// Get real-time access to a continuous project's invoices.
		/// GetContinuousProjectInvoices continuous_projects/{projectId}/invoices
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <returns>Invoices List</returns>
		public async Task<ContinuousProjectInvoices> GetContinuousProjectInvoicesAsync(long projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/invoices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContinuousProjectInvoices>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Monitor progress and status of a continous project
		/// Monitor the translation progress of an ongoing continuous project in real-time.
		/// GetContinuousProjectProgress continuous_projects/{projectId}/progress
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <returns>Progress information</returns>
		public async Task<ContinuousProjectProgress> GetContinuousProjectProgressAsync(long projectId, string filterByLanguage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/progress?filterByLanguage=" + (filterByLanguage==null? "" : System.Uri.EscapeDataString(filterByLanguage));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContinuousProjectProgress>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View strings and translations in continuous project
		/// View the strings and their translations in your continuous translation project, for all target languages. If you need the translated version of your source document/file, then you need to use package and download endpoints.
		/// GetContinuousProjectStrings continuous_projects/{projectId}/strings
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <returns>Response for strings and their translations</returns>
		public async Task<StringList> GetContinuousProjectStringsAsync(long projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/strings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StringList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear translation cache
		/// Clear/delete continuous project translation cache.
		/// ClearTranslationCache continuous_projects/{projectId}/strings/cached
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="locale">Locale</param>
		/// <param name="file_id">Continuous Project File ID</param>
		/// <returns>Operation response</returns>
		public async Task<OperationStatus> ClearTranslationCacheAsync(long projectId, string locale, long file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/strings/cached?locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&file_id="+file_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View cached strings translations in continuous project
		/// MotaWord caches your account intensively (and in a smart way) in real-time translation environments. This endpoint will return the currently cached strings and translations in your continuous translation project.
		/// GetTranslationCache continuous_projects/{projectId}/strings/cached
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="flatten">Flatten cache results and ignore document keys</param>
		/// <returns>Response for strings and their translations</returns>
		public async Task<ContinuousProjectCache> GetTranslationCacheAsync(long projectId, bool flatten, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/strings/cached?flatten="+flatten;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContinuousProjectCache>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recache translations
		/// Recache translations for the continuous project.
		/// RecacheTranslations continuous_projects/{projectId}/strings/recache-tms
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="locale">Locale</param>
		/// <param name="file_id">Continuous Project File ID</param>
		/// <returns>Operation response</returns>
		public async Task<OperationStatus> RecacheTranslationsAsync(long projectId, string locale, long file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/strings/recache-tms?locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&file_id="+file_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View Active widgets
		/// View a list of widgets in your Active project to be used in your website. Most website-specific configuration is provided via widgets.
		/// GetActiveWidgets continuous_projects/{projectId}/widgets
		/// </summary>
		/// <param name="projectId">Continuous Project ID</param>
		/// <returns>List of widgets</returns>
		public async Task<ActiveWidgetList> GetActiveWidgetsAsync(long projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/widgets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActiveWidgetList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Active widget
		/// Create a new widget for your Active project to be used in your website. Most website-specific configuration is provided via widgets. This does not create a new Active project, just a separate widget.
		/// CreateActiveWidget continuous_projects/{projectId}/widgets
		/// </summary>
		/// <param name="projectId">Continuous project ID</param>
		/// <returns>Updated widget details</returns>
		public async Task<ActiveWidget> CreateActiveWidgetAsync(long projectId, ActiveWidget requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/widgets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActiveWidget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a single widget for this Active project
		/// Delete a single widget for this Active project
		/// DeleteActiveWidget continuous_projects/{projectId}/widgets/{widgetId}
		/// </summary>
		/// <param name="projectId">Continuous Project ID</param>
		/// <param name="widgetId">Active widget ID belonging to this Continuous Project</param>
		/// <returns>Delete operation result</returns>
		public async Task<OperationStatus> DeleteActiveWidgetAsync(long projectId, long widgetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/widgets/"+widgetId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View an Active widget
		/// View the details of an Active widget to be used in your website. Most website-specific configuration is provided via widgets.
		/// GetActiveWidget continuous_projects/{projectId}/widgets/{widgetId}
		/// </summary>
		/// <param name="projectId">Continuous Project ID</param>
		/// <param name="widgetId">Active widget ID belonging to this Continuous Project</param>
		/// <returns>Active widget details</returns>
		public async Task<ActiveWidget> GetActiveWidgetAsync(long projectId, long widgetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/widgets/"+widgetId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActiveWidget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Active widget settings.
		/// Update Active widget settings.
		/// UpdateActiveWidget continuous_projects/{projectId}/widgets/{widgetId}
		/// </summary>
		/// <param name="projectId">Continuous Project ID</param>
		/// <param name="widgetId">Active widget ID belonging to this Continuous Project</param>
		/// <returns>Updated widget details</returns>
		public async Task<ActiveWidget> UpdateActiveWidgetAsync(long projectId, long widgetId, ActiveWidget requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/widgets/"+widgetId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActiveWidget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reset Active widget token
		/// Reset the public token used with your Active widget. This token is used when communicating from your environment to MotaWord systems for translation, analytics and meta.
		/// ResetActiveWidgetToken continuous_projects/{projectId}/widgets/{widgetId}/reset-token
		/// </summary>
		/// <param name="projectId">Continuous Project ID</param>
		/// <param name="widgetId">Active widget ID belonging to this Continuous Project</param>
		/// <returns>Updated widget details</returns>
		public async Task<ActiveWidget> ResetActiveWidgetTokenAsync(long projectId, long widgetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "continuous_projects/"+projectId+"/widgets/"+widgetId+"/reset-token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActiveWidget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View your corporate account
		/// View the details of the corporate account that your user account belongs to.
		/// GetCorporate corporate
		/// </summary>
		/// <returns>Corporate account details</returns>
		public async Task<CorporateAccount> GetCorporateAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "corporate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CorporateAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View available permissions
		/// View a list of available permissions for your corporate account. They are used when assigning permissions to your corporate users.
		/// GetAvailableCorporatePermissions corporate/permissions
		/// </summary>
		/// <returns>List of permission strings</returns>
		public async Task<PermissionList> GetAvailableCorporatePermissionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "corporate/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View user groups
		/// View a list of user groups under my corporate account. User groups are a part of our RBAC implementation and can be used to configure complex permission scenarios.
		/// GetCorporateUserGroups corporate/user-groups
		/// </summary>
		/// <returns>User group list</returns>
		public async Task<UserGroupList> GetCorporateUserGroupsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "corporate/user-groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserGroupList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a corporate user group
		/// Create or update a corporate user group
		/// SaveCorporateUserGroup corporate/user-groups
		/// </summary>
		/// <returns>User group list</returns>
		public async Task<UserGroup> SaveCorporateUserGroupAsync(UserGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "corporate/user-groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View users
		/// View a list of users under your corporate account. This endpoint will only return information if your user account is permitted to view corporate account users, configured by your administrator.
		/// GetCorporateUsers corporate/users
		/// </summary>
		/// <returns>User list</returns>
		public async Task<UserList> GetCorporateUsersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "corporate/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a user
		/// Create or update a user under your corporate account. This endpoint requires permissions for corporate user management, configured by your administrator.
		/// SaveCorporateUser corporate/users
		/// </summary>
		/// <returns>Created or updated user</returns>
		public async Task<User> SaveCorporateUserAsync(UserUpdateContent requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "corporate/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of corporate accounts
		/// Get a list of corporate accounts
		/// GetCorporatesList corporates/all
		/// </summary>
		/// <returns>Corporate account list</returns>
		public async Task<CorporateAccount[]> GetCorporatesListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "corporates/all";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CorporateAccount[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details of this corporate account
		/// Get details of this corporate account
		/// GetCorporateById corporates/{corporateId}
		/// </summary>
		/// <param name="corporateId">Corporate ID</param>
		/// <returns>Corporate account details</returns>
		public async Task<CorporateAccount> GetCorporateByIdAsync(long corporateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "corporates/"+corporateId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CorporateAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
		/// Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
		/// GetAvailableCorporatePermissionsById corporates/{corporateId}/permissions
		/// </summary>
		/// <param name="corporateId">Corporate ID</param>
		/// <returns>List of permission strings</returns>
		public async Task<PermissionList> GetAvailableCorporatePermissionsByIdAsync(long corporateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "corporates/"+corporateId+"/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of user groups for this corporate account
		/// Get a list of user groups for this corporate account
		/// GetCorporateUserGroupsById corporates/{corporateId}/user-groups
		/// </summary>
		/// <param name="corporateId">Corporate ID</param>
		/// <returns>User group list</returns>
		public async Task<UserGroupList> GetCorporateUserGroupsByIdAsync(long corporateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "corporates/"+corporateId+"/user-groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserGroupList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a corporate user group for this corporate account
		/// Create or update a corporate user group for this corporate account
		/// SaveCorporateUserGroupById corporates/{corporateId}/user-groups
		/// </summary>
		/// <param name="corporateId">Corporate ID</param>
		/// <returns>User group list</returns>
		public async Task<UserGroup> SaveCorporateUserGroupByIdAsync(long corporateId, UserGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "corporates/"+corporateId+"/user-groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of users for this corporate account
		/// Get a list of users for this corporate account
		/// GetCorporateUsersById corporates/{corporateId}/users
		/// </summary>
		/// <param name="corporateId">Corporate ID</param>
		/// <returns>User list</returns>
		public async Task<UserList> GetCorporateUsersByIdAsync(long corporateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "corporates/"+corporateId+"/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete your account
		/// Delete your MotaWord account. Be careful; once deleted, you will not have access to MotaWord via API or your dashboards.
		/// DeleteAccount delete-account
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> DeleteAccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "delete-account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View your documents
		/// View a list of files and documents that you have translations for. This endpoint lets you view your MotaWord account as a multilingual translated file repository, without needing to go through your projects to interact with files in them.
		/// GetDocuments documents
		/// </summary>
		/// <param name="recent">When true, this will return the most 4 recent active documents.</param>
		/// <param name="language_code">searches in source language of documents, in source and target languages of document's quote</param>
		/// <param name="with_">Attach further information. Possible values 'preview' to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]=preview for single document/style guide calls.</param>
		/// <returns>Document list</returns>
		public async Task<DocumentList> GetDocumentsAsync(bool recent, string search, GetDocumentsType_filter type_filter, string language_code, long page, long per_page, GetDocumentsOrder_by order_by, ListOrderType order_type, string[] with_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents?recent="+recent+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&type_filter=" + type_filter+"&language_code=" + (language_code==null? "" : System.Uri.EscapeDataString(language_code))+"&page="+page+"&per_page="+per_page+"&order_by=" + order_by+"&order_type=" + order_type+"&"+string.Join("&", with_.Select(z => $"with[]={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of subjects of projects
		/// Get a list of subjects of projects
		/// GetAllDocumentSubjects documents/subjects
		/// </summary>
		/// <returns>List of subjects of all projects.</returns>
		public async Task<DocumentSubjects[]> GetAllDocumentSubjectsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/subjects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentSubjects[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View a single document
		/// View a single document from your MotaWord account with its translation info.
		/// GetDocument documents/{documentId}
		/// </summary>
		/// <param name="documentId">Document ID or filename</param>
		/// <returns>Document</returns>
		public async Task<ContinuousProjectDocument> GetDocumentAsync(string documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/"+ (documentId==null? "" : System.Uri.EscapeDataString(documentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContinuousProjectDocument>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View a document translation progress
		/// View the translation or proofreading progress of a document in your account. You can also track the progress of a document under the project that it was ordered with.
		/// GetDocumentProgress documents/{documentId}/progress
		/// </summary>
		/// <param name="documentId">Document ID</param>
		/// <returns>Progress information</returns>
		public async Task<Progress> GetDocumentProgressAsync(double documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/"+documentId+"/progress";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Progress>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerate preview and return preview URL for given file
		/// Regenerate preview and return preview URL for given file
		/// RegeneratePreview documents/{documentId}/regenerate_preview
		/// </summary>
		/// <param name="documentId">Document ID</param>
		/// <returns>RegeneratePreviewResponse</returns>
		public async Task<RegeneratePreviewResponse> RegeneratePreviewAsync(long documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/"+documentId+"/regenerate_preview";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegeneratePreviewResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find documents similar to this document.
		/// Find documents similar to this document. Optionally, include translation information.
		/// GetSimilarDocuments documents/{documentId}/similars
		/// </summary>
		/// <param name="documentId">Document ID</param>
		/// <param name="per_page">Determines the number of similar documents to return.</param>
		/// <param name="with_">Attach further information. Possible values 'preview' to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]=preview for single document/style guide calls.</param>
		/// <returns>Document list</returns>
		public async Task<DocumentList> GetSimilarDocumentsAsync(long documentId, long per_page, string[] with_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/"+documentId+"/similars?per_page="+per_page+"&"+string.Join("&", with_.Select(z => $"with[]={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use the translation of given source manual document as manual draft source for the given target document.
		/// Use the translation of given source manual document as manual draft source for the given target document.
		/// UseAsDraft documents/{documentId}/use_as_draft
		/// </summary>
		/// <param name="documentId">Document ID</param>
		/// <returns>Operation status</returns>
		public async Task<OperationStatus> UseAsDraftAsync(long documentId, UseAsDraftPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/"+documentId+"/use_as_draft";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use the translation of the given manual document as a regular file.
		/// Use the translation of the given manual document as a regular file.
		/// UseAsRegular documents/{documentId}/use_as_regular
		/// </summary>
		/// <param name="documentId">Document ID</param>
		/// <returns>Operation status</returns>
		public async Task<OperationStatus> UseAsRegularAsync(long documentId, UseAsRegularPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/"+documentId+"/use_as_regular";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DowngradeProofreader downgrade-proofreader
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> DowngradeProofreaderAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "downgrade-proofreader";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View your vendor earnings
		/// View your vendor earnings from your translation activites. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects, as well as total earnings and string edits.
		/// GetEarnings earnings
		/// </summary>
		/// <returns>Earnings for vendors</returns>
		public async Task<Earnings> GetEarningsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "earnings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Earnings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of supported file formats
		/// Get a list of supported formats for documents, style guides and extensions.
		/// 
		/// GetFormats formats
		/// </summary>
		/// <returns>A list of supported formats</returns>
		public async Task<string> GetFormatsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "formats";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Freeze account
		/// Freeze your account temporarily, especially to stop receiving project notifications.
		/// FreezeAccount freeze-account
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> FreezeAccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "freeze-account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download account glossary.
		/// Download your corporate account's global glossary. This endpoint is available only for corporate account customers. This glossary will be automatically attached to each new project under your account.
		/// DownloadGlobalGlossary glossary
		/// </summary>
		/// <returns>Glossary file streamed.</returns>
		public async Task<string> DownloadGlobalGlossaryAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "glossary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update the account glossary
		/// Update your corporate account's global glossary. This endpoint is available only for corporate account customers. This glossary will be automatically attached to each new project under your account.
		/// UpdateGlobalGlossary glossary
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> UpdateGlobalGlossaryAsync(AccountGlossaryUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "glossary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate a new access token for MotaWord's integrations service
		/// Generate a new access token for MotaWord's integrations service
		/// GetIntegrationsToken integrations/token
		/// </summary>
		/// <returns>Token</returns>
		public async Task<IntegrationsToken> GetIntegrationsTokenAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "integrations/token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationsToken>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get vendor list for compiled invitation needs
		/// Get vendor list for compiled invitation needs
		/// GetInvitationVendors invitation/vendors
		/// </summary>
		/// <returns>Invitation need grouped by vendor</returns>
		public async Task<VendorInvitationList> GetInvitationVendorsAsync(FileNeedsVendor[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invitation/vendors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VendorInvitationList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List of supported languages
		/// Get a list of supported languages
		/// GetLanguages languages
		/// </summary>
		/// <returns>A list of supported languages</returns>
		public async Task<Language[]> GetLanguagesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "languages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Language[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Log user's current location. This data is used in our Intelligent Project Manager for various data analysis, including project prioritization for vendors and account validation.
		/// LogLocation location
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> LogLocationAsync(LocationUpdateContent requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "location";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// MakeProofreader make-proofreader
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> MakeProofreaderAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "make-proofreader";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View your account info
		/// Get your user information, including client, corporate account and vendor account information.
		/// GetMe me
		/// </summary>
		/// <returns>User summary</returns>
		public async Task<User> GetMeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update your account info
		/// UpdateMe me
		/// </summary>
		/// <returns>User info</returns>
		public async Task<User> UpdateMeAsync(UserUpdateContent requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a delivery prediction for a project
		/// Get a delivery prediction for a project
		/// GetDeliveryPrediction ml/delivery-prediction
		/// </summary>
		/// <returns>Prediction and its probability</returns>
		public async Task<DeliveryPredictionResponse> GetDeliveryPredictionAsync(DeliveryPredictionPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ml/delivery-prediction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeliveryPredictionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Subscribe to push notifications
		/// Subscribe to push notifications to receive project and platform notifications.
		/// SubscribeNotification notifications/subscribe
		/// </summary>
		/// <returns>Saved notification subscription information</returns>
		public async Task<OperationStatus> SubscribeNotificationAsync(NotificationSubscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notifications/subscribe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// UnsubscribeNotification notifications/unsubscribe
		/// </summary>
		/// <returns>Deleted notification subscription information</returns>
		public async Task<OperationStatus> UnsubscribeNotificationAsync(NotificationSubscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notifications/unsubscribe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sends a message to chat
		/// Sends a message to the channel.
		/// PostMessage pam/chat
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> PostMessageAsync(PamMessage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pam/chat";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the Pam profile of a client for this client ID
		/// Get the Pam  profile of a client for this client ID
		/// GetClientProfileForPam pam/profiles/client/{clientId}
		/// </summary>
		/// <param name="clientId">Client ID</param>
		/// <returns>Client profile</returns>
		public async Task<ClientProfile> GetClientProfileForPamAsync(long clientId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pam/profiles/client/"+clientId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClientProfile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get completion report data of a project
		/// Get completion report data of a project
		/// GetProjectCompletionReportForPam pam/projects/{projectId}/completion-report
		/// </summary>
		/// <param name="projectId">Quote ID</param>
		/// <returns>Project Completion Report</returns>
		public async Task<ProjectCompletionReport> GetProjectCompletionReportForPamAsync(long projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pam/projects/"+projectId+"/completion-report";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectCompletionReport>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update your account password
		/// Password should contain at least one uppercase, lowercase character and one number
		/// UpdatePassword password
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> UpdatePasswordAsync(PasswordUpdateContent requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "password";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View your payment and billing info
		/// Returns billing and saved credit card information for user, and their corporate account if present & allowed.
		/// GetPaymentInfo payment
		/// </summary>
		/// <returns>Returns billing and saved card information for user, and their corporate if present.</returns>
		public async Task<PaymentInfo> GetPaymentInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update payment info
		/// Update your billing and saved credit card information
		/// UpdatePaymentInfo payment
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<PaymentInfo> UpdatePaymentInfoAsync(UpdatePaymentInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reset payment code
		/// Reset your corporate account's payment code to bypass credit card payment. This will invalidate your current payment code and your users should be aware of this change while ordering translations.
		/// ResetCorporatePaymentCode payment/reset-corporate-payment-code
		/// </summary>
		/// <returns>Credit card content</returns>
		public async Task<CreditCard> ResetCorporatePaymentCodeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payment/reset-corporate-payment-code";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditCard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Manage automatic charges on your credit card
		/// Toggle (enable/disable) automatic charges on the credit card on file.
		/// ToggleCorporateAutoCharge payment/toggle-corporate-auto-charge
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> ToggleCorporateAutoChargeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payment/toggle-corporate-auto-charge";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View saved credit card
		/// GetCreditCard payment/{cardId}
		/// </summary>
		/// <param name="cardId">Credit Card ID</param>
		/// <returns>Credit card content</returns>
		public async Task<CreditCard> GetCreditCardAsync(long cardId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payment/"+cardId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditCard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete credit card
		/// DeleteCreditCard payment/{cardId}/delete
		/// </summary>
		/// <param name="cardId">Credit Card ID</param>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> DeleteCreditCardAsync(long cardId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payment/"+cardId+"/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset credit card payment code
		/// Reset the payment code used to bypass credit card payment. This will invalidate your current payment code and your users should be aware of this change while ordering translations.
		/// ResetCardPaymentCode payment/{cardId}/reset-payment-code
		/// </summary>
		/// <param name="cardId">Credit Card ID</param>
		/// <returns>Credit card content</returns>
		public async Task<CreditCard> ResetCardPaymentCodeAsync(long cardId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payment/"+cardId+"/reset-payment-code";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditCard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View your permissions
		/// View a list of permissions that your user account is authorized for, configured either by default, or by your account administator.
		/// GetPermissions permissions
		/// </summary>
		/// <returns>List of permission strings</returns>
		public async Task<PermissionList> GetPermissionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload profile picture
		/// Upload a profile picture on your account. This is used where your profile is mentioned throughout the platform. Your picture is not used publicly.
		/// UploadProfilePicture profile-picture
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> UploadProfilePictureAsync(ProfilePictureUpload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profile-picture";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View your translation projects
		/// View the translation projects ordered in your account. If you have the related permission (configured by your account administrator), you can view the projects of your colleagues under the same company account.
		/// GetProjects projects
		/// </summary>
		/// <param name="status_">Filter projects by status. Accepts multiple statuses. Possible values 'pending', 'started', 'completed'</param>
		/// <param name="with_pending">deprecated. use `status[]` param.</param>
		/// <param name="with_started">deprecated. use `status[]` param.</param>
		/// <param name="with_completed">deprecated. use `status[]` param.</param>
		/// <param name="with_">Include detailed information. Possible values 'client', 'vendor'</param>
		/// <returns>Project list</returns>
		public async Task<ProjectList> GetProjectsAsync(long page, long per_page, ProjectStatus[] status_, bool with_pending, bool with_started, bool with_completed, GetProjectsOrder_by order_by, ListOrderType order_type, string[] with_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects?page="+page+"&per_page="+per_page+"&"+string.Join("&", status_.Select(z => $"status[]={z}"))+"&with_pending="+with_pending+"&with_started="+with_started+"&with_completed="+with_completed+"&order_by=" + order_by+"&order_type=" + order_type+"&"+string.Join("&", with_.Select(z => $"with[]={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new project
		/// Create a new translation project. Projects are not launched (you are not charged) until you `/launch` the created project.
		/// CreateProject projects
		/// </summary>
		/// <returns>Newly created project</returns>
		public async Task<Project> CreateProjectAsync(NewProject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Quote Id
		/// Get Quote Id
		/// GetQuoteIdFromInternalId projects/from-internal-id/{projectId}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <returns>QuoteId</returns>
		public async Task<ProjectId> GetQuoteIdFromInternalIdAsync(long projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/from-internal-id/"+projectId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectId>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List projects as a vendor
		/// Get a list of projects that are available to you to work on as a vendor. This is not a list of projects that you ordered as a customer.
		/// GetVendorProjects projects/vendor
		/// </summary>
		/// <param name="joined">Return only projects that this user has already joined</param>
		/// <param name="completed">Return only projects that have been completed. When `true`, this makes `joined` true as well.</param>
		/// <returns>Vendor project list</returns>
		public async Task<ProjectList> GetVendorProjectsAsync(bool joined, bool completed, long page, long per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/vendor?joined="+joined+"&completed="+completed+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete your translation project
		/// If you haven't launched your translation project yet, we will delete it. If MotaWord already started working on your project, we will cancel the project and refund the volume that we haven't worked on yet.
		/// DeleteProject projects/{id}
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Project canceled successfully</returns>
		public async Task<OperationStatus> DeleteProjectAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View a translation project
		/// View the details of a translation project in your account.
		/// GetProject projects/{id}
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <param name="with_">Include detailed information. Possible values 'client', 'vendor', 'score'</param>
		/// <returns>Project model</returns>
		public async Task<Project> GetProjectAsync(long id, string[] with_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"?"+string.Join("&", with_.Select(z => $"with[]={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update project info and settings
		/// UpdateProject projects/{id}
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Updated project</returns>
		public async Task<Project> UpdateProjectAsync(long id, ProjectUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Assign a CM to the project
		/// AssignCM projects/{id}/assign-cm
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Operation started successfully</returns>
		public async Task<OperationStatus> AssignCMAsync(long id, CM requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/assign-cm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Trigger a call to your callback URL related to this project.
		/// Trigger a call to your callback URL related to this project.
		/// TriggerCallback projects/{id}/callback/{actionType}
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <param name="actionType">Callback type</param>
		/// <returns>Callback result</returns>
		public async Task<CallbackResult> TriggerCallbackAsync(long id, TriggerCallbackActionType actionType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/callback/"+actionType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CallbackResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel your translation project
		/// If you haven't launched your translation project yet, we will delete it. If MotaWord already started working on your project, we will cancel the project and refund the volume that we haven't worked on yet.
		/// CancelProject projects/{id}/cancel
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Project canceled successfully</returns>
		public async Task<OperationStatus> CancelProjectAsync(long id, CancelProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deliver project
		/// Deliver project to the owner of the project. You can also download your translations in `/package` and `/download` endpoints.
		/// DeliverProject projects/{id}/deliver
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Operation started successfully</returns>
		public async Task<OperationStatus> DeliverProjectAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/deliver";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download your translated project
		/// Download the latest translation package. You must have requested a `/package` call beforehand and wait until the packaging status is 'completed'.
		/// Download projects/{id}/download
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Translation package streamed. The streamed file is always a ZIP file, except when the API client is configured for Drupal and Wordpress.</returns>
		public async Task DownloadAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/download";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download your translated project language
		/// Download the latest translation package for your target language. You must have requested a `/package` call beforehand and wait until the packaging status is 'completed'.
		/// DownloadLanguage projects/{id}/download/{language}
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <param name="language">Language code. You can download the translation of only a specific language.</param>
		/// <returns>Translation package streamed. The streamed file is always a ZIP file, except when the API client is configured for Drupal and Wordpress.</returns>
		public async Task DownloadLanguageAsync(long id, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/download/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send a quote email
		/// Send a quote email
		/// SendQuoteEmail projects/{id}/email-quote
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Email sent successfully</returns>
		public async Task<OperationStatus> SendQuoteEmailAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/email-quote";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View project invoice
		/// View your invoice details for your translation project.
		/// GetInvoice projects/{id}/invoice
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Invoice</returns>
		public async Task<Invoice> GetInvoiceAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/invoice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download project invoice (HTML)
		/// Download your project invoice as HTML. This is useful when you want to show your users the invoice in a webpage.
		/// DownloadHtmlInvoice projects/{id}/invoice.html
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Invoice</returns>
		public async Task DownloadHtmlInvoiceAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/invoice.html";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download project invoice (PDF)
		/// Download your project invoice as PDF. Your invoice may be in "unpaid" status, in which case youn can see the payment instructions in the PDF file.
		/// DownloadPdfInvoice projects/{id}/invoice.pdf
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Invoice</returns>
		public async Task DownloadPdfInvoiceAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/invoice.pdf";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Launch your translation project
		/// Launch your translation project so MotaWord can actually start working on your translation.
		/// LaunchProject projects/{id}/launch
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Project launched successfully</returns>
		public async Task<ProjectLaunchResponse> LaunchProjectAsync(long id, ProjectPayment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/launch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectLaunchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Package your translated project
		/// Package the translations in your project, prepare translated documents and make it ready to be downloaded. Once packaged, you can download your translated project.
		/// Package projects/{id}/package
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <param name="async">If you want to package and download the translation synchronously, mark this parameter as '0'. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call.</param>
		/// <returns>Packaged translation streamed.</returns>
		public async Task PackageAsync(long id, long async, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/package?async="+async;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Track translation packaging status
		/// Track the packaging status of your translations, by using the `key` from packaging request. Once packaging is completed, you can download your translations via `/download` endpoints.
		/// TrackPackage projects/{id}/package/check
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <param name="key">This is the package tracking key provided in the response of a /package call.</param>
		/// <returns>Current status of packaging process.</returns>
		public async Task<PackageStatus> TrackPackageAsync(long id, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/package/check?key=" + (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PackageStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Package your translated project language
		/// Package the translations in your project for a specific target language, prepare translated documents and make it ready to be downloaded. Once packaged, you can download your translated project in this target language.
		/// PackageLanguage projects/{id}/package/{language}
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <param name="language">Language code. You can package the translation of only a specific language.</param>
		/// <param name="async">If you want to package and download the translation synchronously, mark this parameter as '0'. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call.</param>
		/// <returns>Packaging status and tracking code. With the package key, you can track the progress of translation packaging.Also packaged translation streamed.</returns>
		public async Task<Package> PackageLanguageAsync(long id, string language, long async, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/package/"+ (language==null? "" : System.Uri.EscapeDataString(language))+"&async="+async;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Package>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View progress of a project
		/// Monitor the translation progress of an already launched project in real-time.
		/// GetProgress projects/{id}/progress
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <param name="raw">This will return a more raw progress information for translation and proofreading. For instance, when completed, we will return 100% for both tasks by default, whereas their actual progress may be lower than 100%.</param>
		/// <returns>Progress information</returns>
		public async Task<Progress> GetProgressAsync(long id, bool raw, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/progress?raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Progress>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recreate your translation project from scratch. This is a risky action, you will lose current translations.
		/// RecreateProject projects/{id}/recreate
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Project recreation process started successfully</returns>
		public async Task<OperationStatus> RecreateProjectAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/recreate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit feedback report for a project
		/// SubmitProjectReports projects/{id}/reports
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Report submitted successfully</returns>
		public async Task<OperationStatus> SubmitProjectReportsAsync(long id, ReportContent requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/reports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get sales activities for a project
		/// GetSalesActivities projects/{id}/sales/activities
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Activities fetched successfully</returns>
		public async Task<SalesActivities> GetSalesActivitiesAsync(long id, string excludeOwner, SalesActivityType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/sales/activities?excludeOwner=" + (excludeOwner==null? "" : System.Uri.EscapeDataString(excludeOwner))+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesActivities>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert sales activity for a project
		/// InsertSalesActivity projects/{id}/sales/activities
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Acvitity inserted successfully</returns>
		public async Task<OperationStatus> InsertSalesActivityAsync(long id, NewSalesActivity requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/sales/activities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete project webhooks
		/// Delete project webhooks. Projects currently support registering only 1 webhook. This endpoint deletes the previously registered webhook.
		/// DeleteProjectWebhook projects/{id}/webhooks
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Project webhook deleted successfully</returns>
		public async Task<OperationStatus> DeleteProjectWebhookAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View project webhooks
		/// This endpoint returns Project entity which contains `callback_url` field for webhook URL. Currently projects can have only 1 webhook registered.
		/// GetProjectWebhooks projects/{id}/webhooks
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Project model</returns>
		public async Task<Project> GetProjectWebhooksAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update project webhook
		/// Update project webhook URL
		/// PostProjectWebhook projects/{id}/webhooks
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Updated project</returns>
		public async Task<Project> PostProjectWebhookAsync(long id, Webhook requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update project webhook
		/// Update project webhook URL
		/// UpdateProjectWebhook projects/{id}/webhooks
		/// </summary>
		/// <param name="id">Project ID</param>
		/// <returns>Updated project</returns>
		public async Task<Project> UpdateProjectWebhookAsync(long id, Webhook requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+id+"/webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Monitor project activities
		/// Get a list of real-time activities in the project, such as translation suggestion and translation approval.
		/// GetActivities projects/{projectId}/activities
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <returns>A list of activity models</returns>
		public async Task<ActivityList> GetActivitiesAsync(long projectId, long page, long per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/activities?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View an activity
		/// View the details of an activity in the project.
		/// GetActivity projects/{projectId}/activities/{activityId}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="activityId">Activity ID</param>
		/// <returns>Activity model</returns>
		public async Task<Activity> GetActivityAsync(long projectId, long activityId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/activities/"+activityId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Activity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit comment to an activity
		/// Submit a comment to an activity in the project, such as translation or editing.
		/// SubmitComment projects/{projectId}/activities/{activityId}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="activityId">Activity ID</param>
		/// <returns>Comment model</returns>
		public async Task<Comment> SubmitCommentAsync(long projectId, long activityId, Comment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/activities/"+activityId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View activity comments
		/// View a list of comments added to this activity.
		/// GetActivityComments projects/{projectId}/activities/{activityId}/comments
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="activityId">Activity ID</param>
		/// <returns>A list of Comment models</returns>
		public async Task<CommentList> GetActivityCommentsAsync(long projectId, long activityId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/activities/"+activityId+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View all project comments
		/// View a list of activity comments in the project.
		/// GetComments projects/{projectId}/comments
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <returns>A list of Comment models</returns>
		public async Task<CommentList> GetCommentsAsync(long projectId, long page, long per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/comments?page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View project source documents
		/// Get a list of source files you uploaded to be translated in your project.
		/// GetProjectDocuments projects/{projectId}/documents
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="with_">Attach further information. Possible values 'preview' to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]=preview for single document/style guide calls.</param>
		/// <returns>A list of document models</returns>
		public async Task<DocumentList> GetProjectDocumentsAsync(long projectId, string[] with_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/documents?"+string.Join("&", with_.Select(z => $"with[]={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload a new document
		/// Upload a new document
		/// CreateProjectDocument projects/{projectId}/documents
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <returns>A list of successfully added new documents.</returns>
		public async Task<DocumentList> CreateProjectDocumentAsync(long projectId, DocumentUpdates requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/documents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the document
		/// Delete the document
		/// DeleteProjectDocument projects/{projectId}/documents/{documentId}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="documentId">Document ID</param>
		/// <returns>Document deleted successfully</returns>
		public async Task<OperationStatus> DeleteProjectDocumentAsync(long projectId, long documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/documents/"+documentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View a project source document
		/// View the details of a source file you uploaded to be translated in your project.
		/// GetProjectDocument projects/{projectId}/documents/{documentId}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="documentId">Document ID</param>
		/// <param name="with_">Attach further information. Possible values 'preview' to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]=preview for single document/style guide calls.</param>
		/// <returns>Document model</returns>
		public async Task<Document> GetProjectDocumentAsync(long projectId, long documentId, string[] with_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/documents/"+documentId+"?"+string.Join("&", with_.Select(z => $"with[]={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Document>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the document.
		/// Update the document. File name and contents will replaced with the new one.
		/// UpdateProjectDocument projects/{projectId}/documents/{documentId}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="documentId">Document ID</param>
		/// <returns>Updated document model</returns>
		public async Task<Document> UpdateProjectDocumentAsync(long projectId, long documentId, DocumentUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/documents/"+documentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Document>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Download a project source document
		/// Download an actual source file you uploaded to be translated in your project.
		/// DownloadProjectDocument projects/{projectId}/documents/{documentId}/download
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="documentId">Document ID</param>
		/// <returns>Document streamed</returns>
		public async Task<string> DownloadProjectDocumentAsync(long projectId, long documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/documents/"+documentId+"/download";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View strings and translations of a document
		/// View the strings and their translations in your translation project for the specified source document. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
		/// GetDocumentTranslations projects/{projectId}/documents/{documentId}/translations
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="documentId">Document ID</param>
		/// <returns>Response for strings and their translations</returns>
		public async Task<StringList> GetDocumentTranslationsAsync(long projectId, long documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/documents/"+documentId+"/translations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StringList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download translated document
		/// Download translated document in the given target language.
		/// DownloadTranslatedDocumentForLanguage projects/{projectId}/documents/{documentId}/translations/download/{language}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="documentId">Document ID</param>
		/// <param name="language">Target language code.</param>
		/// <param name="certified">Download certified translation</param>
		/// <returns>File</returns>
		public async Task DownloadTranslatedDocumentForLanguageAsync(long projectId, long documentId, string language, bool certified, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/documents/"+documentId+"/translations/download/"+ (language==null? "" : System.Uri.EscapeDataString(language))+"&certified="+certified;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View strings and translations of a document for target language
		/// View the strings and their translations in the given target language for the specified source document. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
		/// GetDocumentTranslationsForLanguage projects/{projectId}/documents/{documentId}/translations/{language}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="documentId">Document ID</param>
		/// <param name="language">Target language code.</param>
		/// <returns>Response for strings and their translations</returns>
		public async Task<StringList> GetDocumentTranslationsForLanguageAsync(long projectId, long documentId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/documents/"+documentId+"/translations/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StringList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View glossaries
		/// View a list of glossaries previously uploaded to the project.
		/// GetGlossaries projects/{projectId}/glossaries
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <returns>A list of glossary models</returns>
		public async Task<GlossaryList> GetGlossariesAsync(long projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/glossaries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlossaryList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload a glossary file
		/// Upload a new glossary file to your project to be used during translation. Glossaries can be CSV or TBX files.
		/// CreateGlossary projects/{projectId}/glossaries
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <returns>Newly created glossary model.</returns>
		public async Task<Glossary> CreateGlossaryAsync(long projectId, GlossaryUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/glossaries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Glossary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a glossary
		/// Delete the existing glossary from the project.
		/// DeleteGlossary projects/{projectId}/glossaries/{glossaryId}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="glossaryId">Glossary ID</param>
		/// <returns>Glossary deleted successfully</returns>
		public async Task<OperationStatus> DeleteGlossaryAsync(long projectId, long glossaryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/glossaries/"+glossaryId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View a glossary
		/// View the details of a glossary file uploaded to a project.
		/// GetGlossary projects/{projectId}/glossaries/{glossaryId}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="glossaryId">Glossary ID</param>
		/// <returns>Glossary model</returns>
		public async Task<Glossary> GetGlossaryAsync(long projectId, long glossaryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/glossaries/"+glossaryId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Glossary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a glossary
		/// Update the existing glossary file in the project. Public users are allowed to have only 1 glossary per project and file name and contents will replaced with the new glossary file that you are uploading via this endpoint.
		/// UpdateGlossary projects/{projectId}/glossaries/{glossaryId}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="glossaryId">Glossary ID</param>
		/// <returns>Updated glossary model</returns>
		public async Task<Glossary> UpdateGlossaryAsync(long projectId, long glossaryId, GlossaryUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/glossaries/"+glossaryId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Glossary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Download a glossary
		/// Download a previously uploaded glossary file.
		/// DownloadGlossary projects/{projectId}/glossaries/{glossaryId}/download
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="glossaryId">Glossary ID</param>
		/// <returns>Glossary streamed</returns>
		public async Task<string> DownloadGlossaryAsync(long projectId, long glossaryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/glossaries/"+glossaryId+"/download";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View project strings and translations
		/// View the strings and their translations in your translation project, for all target languages. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
		/// GetProjectStrings projects/{projectId}/strings
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <returns>Response for strings and their translations</returns>
		public async Task<StringList> GetProjectStringsAsync(long projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/strings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StringList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download project translation memory
		/// Package and download project translation memory in TMX format
		/// PackageProjectTranslationMemory projects/{projectId}/strings/package
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="async">If you want to package and download the translation memory synchronously, mark this parameter as '0'. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call.</param>
		/// <param name="format">Translation Memory file format</param>
		/// <returns>Response in TMX or async request</returns>
		public async Task<AsyncOperationStatus> PackageProjectTranslationMemoryAsync(long projectId, long async, string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/strings/package?async="+async+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AsyncOperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check translation memory packaging status
		/// Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
		/// PackageProjectTranslationMemoryStatus projects/{projectId}/strings/package/status
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="async_request_key">Async operation key</param>
		/// <returns>Async operation status. Use the key to query status of this operation.</returns>
		public async Task<AsyncOperationStatus> PackageProjectTranslationMemoryStatusAsync(long projectId, string async_request_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/strings/package/status?async_request_key=" + (async_request_key==null? "" : System.Uri.EscapeDataString(async_request_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AsyncOperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download language-specific project translation memory
		/// Package and download project translation memory in TMX format for a specific target language.
		/// PackageProjectTranslationMemoryForLanguage projects/{projectId}/strings/{languageCode}/package
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="languageCode">Language Code</param>
		/// <param name="async">If you want to package and download the translation memory synchronously, mark this parameter as '0'. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call.</param>
		/// <param name="format">Translation Memory file format</param>
		/// <returns>Response in TMX or async request</returns>
		public async Task<AsyncOperationStatus> PackageProjectTranslationMemoryForLanguageAsync(long projectId, string languageCode, long async, string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/strings/"+ (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"/package&async="+async+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AsyncOperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check language-specific translation memory packaging status
		/// Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
		/// PackageProjectTranslationMemoryForLanguageStatus projects/{projectId}/strings/{languageCode}/package/status
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="languageCode">Language Code</param>
		/// <param name="async_request_key">Async operation key</param>
		/// <returns>Async operation status. Use the key to query status of this operation.</returns>
		public async Task<AsyncOperationStatus> PackageProjectTranslationMemoryForLanguageStatusAsync(long projectId, string languageCode, string async_request_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/strings/"+ (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"/package/status&async_request_key=" + (async_request_key==null? "" : System.Uri.EscapeDataString(async_request_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AsyncOperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View strings and translations for target language
		/// View the strings and their translations in your translation project for the specified target language. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
		/// GetProjectStringsForLanguage projects/{projectId}/strings/{language}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="language">Target language code</param>
		/// <returns>Response for strings and their translations</returns>
		public async Task<StringList> GetProjectStringsForLanguageAsync(long projectId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/strings/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StringList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View style guides
		/// View a list of style guides in your project.
		/// GetStyleGuides projects/{projectId}/styleguides
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="with_">Attach further information. Possible values 'preview' to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]=preview for single document/style guide calls.</param>
		/// <returns>A list of style guide models</returns>
		public async Task<StyleGuideList> GetStyleGuidesAsync(long projectId, string[] with_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/styleguides?"+string.Join("&", with_.Select(z => $"with[]={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StyleGuideList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload a new style guide
		/// Upload a new style guide
		/// CreateStyleGuide projects/{projectId}/styleguides
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <returns>Newly created style guide model or a list of new style guide models</returns>
		public async Task<StyleGuideList> CreateStyleGuideAsync(long projectId, StyleGuideUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/styleguides";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StyleGuideList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a style guide
		/// Delete the existing style guide from the project.
		/// DeleteStyleGuide projects/{projectId}/styleguides/{styleGuideId}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="styleGuideId">Style Guide ID</param>
		/// <returns>Style guide deleted successfully</returns>
		public async Task<OperationStatus> DeleteStyleGuideAsync(long projectId, long styleGuideId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/styleguides/"+styleGuideId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View a style guide
		/// View the details of a style guide uploaded to a project
		/// GetStyleGuide projects/{projectId}/styleguides/{styleGuideId}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="styleGuideId">Style Guide ID</param>
		/// <param name="with_">Attach further information. Possible values 'preview' to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]=preview for single document/style guide calls.</param>
		/// <returns>Style guide model</returns>
		public async Task<StyleGuide> GetStyleGuideAsync(long projectId, long styleGuideId, string[] with_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/styleguides/"+styleGuideId+"?"+string.Join("&", with_.Select(z => $"with[]={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StyleGuide>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a style guide
		/// Update the existing style guide in the project. Public users are allowed to have only 1 style guide per project and file name and contents will replaced with the new style guide that you are uploading via this endpoint.
		/// UpdateStyleGuide projects/{projectId}/styleguides/{styleGuideId}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="styleGuideId">Style guide ID</param>
		/// <returns>Updated style guide model</returns>
		public async Task<StyleGuide> UpdateStyleGuideAsync(long projectId, long styleGuideId, StyleGuideUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/styleguides/"+styleGuideId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StyleGuide>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Download a style guide
		/// Download a previously uploaded style guide file.
		/// DownloadStyleGuide projects/{projectId}/styleguides/{styleGuideId}/download
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="styleGuideId">Style Guide ID</param>
		/// <returns>Style guide streamed</returns>
		public async Task<string> DownloadStyleGuideAsync(long projectId, long styleGuideId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/styleguides/"+styleGuideId+"/download";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deprecated. Use /projects/{projectId}/strings instead.
		/// GetProjectTranslations projects/{projectId}/translations
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <returns>Response for strings and their translations</returns>
		public async Task<StringList> GetProjectTranslationsAsync(long projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/translations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StringList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deprecated. use /projects/{projectId}/strings/{language} instead.
		/// GetProjectTranslationsForLanguage projects/{projectId}/translations/{language}
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="language">Target language code</param>
		/// <returns>Response for strings and their translations</returns>
		public async Task<StringList> GetProjectTranslationsForLanguageAsync(long projectId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/translations/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StringList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of vendors.
		/// Get a list of vendors.
		/// GetProjectVendors projects/{projectId}/vendors
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <returns>User list</returns>
		public async Task<UserList> GetProjectVendorsAsync(long projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+projectId+"/vendors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns available options for selected timeframe.
		/// GetFilterContents reports/filter
		/// </summary>
		/// <returns>Filter contents</returns>
		public async Task<FilterContents> GetFilterContentsAsync(FilterDates requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/filter";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FilterContents>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Language pairs report
		/// View translation reports for each language pair with translations under your account. You can view company-wide language pairs if you have the user permission.
		/// GetLanguagePairsReport reports/language-pairs
		/// </summary>
		/// <returns>Language pairs stats for client and vendors</returns>
		public async Task<LanguagePairsReport> GetLanguagePairsReportAsync(ReportFilter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/language-pairs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LanguagePairsReport>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Projects report
		/// View projects under your account, with advanced filtering. You can view company-wide projects if you have the user permission.
		/// GetProjectsReport reports/projects
		/// </summary>
		/// <returns>User stats for client and vendors</returns>
		public async Task<ProjectList> GetProjectsReportAsync(ReportFilter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate a QA report for given filter
		/// Generate a QA report for given filter
		/// GenerateQAReport reports/qa
		/// </summary>
		/// <returns>List of QA entries</returns>
		public async Task<QaWarnings> GenerateQAReportAsync(QaFilter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/qa";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QaWarnings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Company users report
		/// View translation reports for each user under your company account. You need the permission to view users in your company.
		/// GetUsersReport reports/users
		/// </summary>
		/// <returns>User stats for client and vendors</returns>
		public async Task<UsersReport> GetUsersReportAsync(ReportFilter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsersReport>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sends email confirmation email for current user
		/// SendEmailConfirmation resend-email-confirmation
		/// </summary>
		/// <returns>When confirmation email is sent, status is `success`, or `already_confirmed` when user has already confirmed their email address.</returns>
		public async Task<OperationStatus> SendEmailConfirmationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "resend-email-confirmation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View your vendor responsiveness
		/// View your statistical analysis of responsiveness to our translation projects, invitations, notifications and such.
		/// GetResponsivity responsivity
		/// </summary>
		/// <param name="period">Time period to calculate your responsiveness</param>
		/// <returns>Vendor responsivity stats</returns>
		public async Task<ResponsivityList> GetResponsivityAsync(GetResponsivityPeriod period, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "responsivity?period=" + period;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResponsivityList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search everything in your account
		/// Search through everything in your account, from projects to documents, from source strings to translations...
		/// SearchEverywhere search
		/// </summary>
		/// <param name="query">Search query term</param>
		/// <param name="include_">Search in these entities. Current oprions are projects, documents, strings. Can be multiple. When not provided, we'll search through all entities.</param>
		/// <returns>Search result for multiple entities and paging</returns>
		public async Task<SearchEverywhereResult> SearchEverywhereAsync(string query, string[] include_, long page, long per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&"+string.Join("&", include_.Select(z => $"include[]={System.Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchEverywhereResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reindex for search all of the client source and translation documents.
		/// ReindexDocuments search/documents/reindex
		/// </summary>
		/// <returns>Async operation status. Use the key to query status of this operation.</returns>
		public async Task<AsyncOperationStatus> ReindexDocumentsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/documents/reindex";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AsyncOperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check reindex status of the client source and translation documents.
		/// CheckDocumentsReindex search/documents/reindex/status
		/// </summary>
		/// <param name="async_request_key">Async operation key</param>
		/// <returns>Async operation status. Use the key to query status of this operation.</returns>
		public async Task<AsyncOperationStatus> CheckDocumentsReindexAsync(string async_request_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/documents/reindex/status?async_request_key=" + (async_request_key==null? "" : System.Uri.EscapeDataString(async_request_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AsyncOperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View your account statistics
		/// View your client and vendor statistics.
		/// GetStats stats
		/// </summary>
		/// <returns>Client and vendor statistics for your account</returns>
		public async Task<Stats> GetStatsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Stats>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the total commissions stats.
		/// GetCommissionStats stats/commissions
		/// </summary>
		/// <returns>User's commission stats</returns>
		public async Task<CommissionStats> GetCommissionStatsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/commissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommissionStats>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the total commissions stats by report filter.
		/// GetCommissionStatsByFilter stats/commissions
		/// </summary>
		/// <returns>User's commission stats</returns>
		public async Task<CommissionStats> GetCommissionStatsByFilterAsync(ReportFilter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/commissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommissionStats>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View your popular language pairs
		/// GetPopularPairs stats/popular-pairs
		/// </summary>
		/// <returns>Your most ordered language pairs</returns>
		public async Task<PopularLanguagePairs> GetPopularPairsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/popular-pairs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PopularLanguagePairs>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View your project statistics
		/// GetProjectStats stats/projects
		/// </summary>
		/// <returns>Project statistics for your account</returns>
		public async Task<ClientProjectStats> GetProjectStatsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClientProjectStats>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View your translation statistics
		/// GetStringStats stats/strings
		/// </summary>
		/// <returns>Translation statistics for your account</returns>
		public async Task<ClientStringStats> GetStringStatsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stats/strings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClientStringStats>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View account strings (translation memory)
		/// Get a list of all strings and their translations under your account, from all projects. This is your MotaWord translation memory. If you have the related permission, this endpoint will also return strings from your company account.
		/// GetStrings strings
		/// </summary>
		/// <param name="source_language">Source Language Code</param>
		/// <param name="page">Requested page</param>
		/// <returns>List of strings in JSON</returns>
		public async Task<ClientStrings> GetStringsAsync(string source_language, long page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "strings?source_language=" + (source_language==null? "" : System.Uri.EscapeDataString(source_language))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClientStrings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Translate Strings with MT
		/// Deprecated, use instant translation mechanism for continuous projects.
		/// PostStrings strings
		/// </summary>
		/// <returns>Machine Translated Strings in JSON</returns>
		public async Task<MachineTranslatedStrings> PostStringsAsync(DeprecatedStringTranslationContent requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "strings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MachineTranslatedStrings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update string translation
		/// Update the translation of a string from your account strings/translation memory.
		/// UpdateTranslationMemoryUnit strings
		/// </summary>
		/// <returns>Translation updated by adding new translation memory unit</returns>
		public async Task<OperationStatus> UpdateTranslationMemoryUnitAsync(TranslationMemoryUnit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "strings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Download account translation memory
		/// Package and download account translation memory in TMX format. If you have the related permission, this will also download your company translation memory.
		/// PackageUserTranslationMemory strings/{languageCode}/package
		/// </summary>
		/// <param name="languageCode">Source Language Code</param>
		/// <param name="async">If you want to package and download the translation memory synchronously, mark this parameter as '0'. It will package the translation memory and then return the packaged file in the response, identical to async/download call after an asynchronous /package call.</param>
		/// <param name="email">If you don't need us to email the TMX, set this to '0'. Default is 1.</param>
		/// <returns>Response in TMX or async request</returns>
		public async Task<AsyncOperationStatus> PackageUserTranslationMemoryAsync(string languageCode, long async, long email, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "strings/"+ (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"/package&async="+async+"&email="+email;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AsyncOperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check account translation memory packaging status
		/// Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
		/// PackageUserTranslationMemoryForLanguageStatus strings/{languageCode}/package/status
		/// </summary>
		/// <param name="languageCode">Language Code</param>
		/// <param name="async_request_key">Async operation key</param>
		/// <returns>Async operation status. Use the key to query status of this operation.</returns>
		public async Task<AsyncOperationStatus> PackageUserTranslationMemoryForLanguageStatusAsync(string languageCode, string async_request_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "strings/"+ (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"/package/status&async_request_key=" + (async_request_key==null? "" : System.Uri.EscapeDataString(async_request_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AsyncOperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download account style guide
		/// Download your account's global style guide. This endpoint is available only for corporate account customers. This style guide will be automatically attached to each new project under your account.
		/// DownloadGlobalStyleGuide styleguide
		/// </summary>
		/// <returns>Style guide file streamed.</returns>
		public async Task<string> DownloadGlobalStyleGuideAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "styleguide";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update the account style guide
		/// Update your corporate account's global style guide. This endpoint is available only for corporate account customers. This style guide will be automatically attached to each new project under your account.
		/// UpdateGlobalStyleGuide styleguide
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> UpdateGlobalStyleGuideAsync(AccountStyleGuideUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "styleguide";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get survey questions in given scope and type
		/// Get survey questions in given scope and type
		/// GetQuestions surveys/{scope}/{type}
		/// </summary>
		/// <param name="scope">Scope</param>
		/// <param name="type">Type</param>
		/// <param name="attach_answers_for_project">Project ID</param>
		/// <returns>Survey Questions</returns>
		public async Task<SurveyQuestion[]> GetQuestionsAsync(string scope, string type, long attach_answers_for_project, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "surveys/"+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&attach_answers_for_project="+attach_answers_for_project;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SurveyQuestion[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post survey answers for scope and type
		/// Post survey answers for scope and type
		/// SubmitAnswers surveys/{scope}/{type}
		/// </summary>
		/// <param name="scope">Scope</param>
		/// <param name="type">Type</param>
		/// <returns>Survey Answers</returns>
		public async Task<OperationStatus> SubmitAnswersAsync(string scope, string type, SurveyAnswers requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "surveys/"+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/"+ (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// OpenAPI YAML representation of our API
		/// Get Swagger YAML
		/// GetSwaggerYaml swagger
		/// </summary>
		/// <returns>Swagger YAML</returns>
		public async Task GetSwaggerYamlAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "swagger";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an access token
		/// MotaWord API is using OAuth2 procedures when authenticating or authorizing your API call.
		/// 
		/// GetAccessToken token
		/// </summary>
		/// <returns>Authentication response</returns>
		public async Task<Token> GetAccessTokenAsync(TokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Token>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Defreeze your account
		/// Reactive your account to start receiving notifications.
		/// UnfreezeAccount unfreeze-account
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> UnfreezeAccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "unfreeze-account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View your user groups
		/// View the user groups that your user account belongs to. This is typically configured by your account administator's dashboard.
		/// GetUserGroups user-groups
		/// </summary>
		/// <returns>List of user groups</returns>
		public async Task<UserGroupList> GetUserGroupsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user-groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserGroupList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of platform users
		/// Get a list of platform users
		/// GetUsers users
		/// </summary>
		/// <returns>User list</returns>
		public async Task<UserList> GetUsersAsync(long page, long per_page, GetUsersUser_type user_type, string search, string email, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users?page="+page+"&per_page="+per_page+"&user_type=" + user_type+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new user
		/// Create a new platform user
		/// CreateUser users
		/// </summary>
		/// <param name="notify">Send a welcome email to the user</param>
		/// <returns>Created user</returns>
		public async Task<User> CreateUserAsync(bool notify, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users?notify="+notify;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of vendors available for the criteria given
		/// Get a list of vendors available for the criteria given
		/// GetAvailableVendors users/available-vendors
		/// </summary>
		/// <param name="with_">Include detailed information. Possible values 'user'. Requesting user info enrichment takes much longer.</param>
		/// <returns>User list</returns>
		public async Task<UserList> GetAvailableVendorsAsync(string[] with_, AvailableVendorsFilter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/available-vendors?"+string.Join("&", with_.Select(z => $"with[]={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Filter vendors based on provided parameters
		/// Get a list of vendors available for the criteria given
		/// GetFilteredVendors users/filter
		/// </summary>
		/// <param name="page">The page number</param>
		/// <param name="per_page">The number of items per page</param>
		/// <param name="order_by">The field to order the results by</param>
		/// <param name="order">The order to sort the results by (ascending or descending)</param>
		/// <returns>Successful response User List</returns>
		public async Task<UserList> GetFilteredVendorsAsync(int page, int per_page, string order_by, string order, FilterVendorRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/filter?page="+page+"&per_page="+per_page+"&order_by=" + (order_by==null? "" : System.Uri.EscapeDataString(order_by))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sends password reset email to the user's registered email address
		/// SendPasswordReminder users/send-password-reminder
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> SendPasswordReminderAsync(Email requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/send-password-reminder";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns all vendor tags for vendors filter
		/// Returns all vendor tags for vendors filter
		/// GetAllVendorTags users/tags
		/// </summary>
		/// <returns>Successful response tag list</returns>
		public async Task<VendorTag[]> GetAllVendorTagsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VendorTag[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user information, including client or vendor specific info.
		/// GetUser {userId}
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>User summary</returns>
		public async Task<User> GetUserAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateUser {userId}
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>User info</returns>
		public async Task<User> UpdateUserAsync(long userId, UserUpdateContent requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ApproveVendorApplication {userId}/approve
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>Vendor application of this user is approved. User is ready to work with us.</returns>
		public async Task<OperationStatus> ApproveVendorApplicationAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/approve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete requester account
		/// DeleteUserAccount {userId}/delete-account
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> DeleteUserAccountAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/delete-account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of your documents
		/// Get a list of your documents
		/// GetUserDocuments {userId}/documents
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <param name="recent">When true, this will return the most 4 recent active documents.</param>
		/// <param name="language_code">searches in source language of documents, in source and target languages of document's quote</param>
		/// <returns>Document list</returns>
		public async Task<DocumentList> GetUserDocumentsAsync(long userId, bool recent, string search, GetDocumentsType_filter type_filter, string language_code, long page, long per_page, GetDocumentsOrder_by order_by, ListOrderType order_type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/documents?recent="+recent+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&type_filter=" + type_filter+"&language_code=" + (language_code==null? "" : System.Uri.EscapeDataString(language_code))+"&page="+page+"&per_page="+per_page+"&order_by=" + order_by+"&order_type=" + order_type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DowngradeUserProofreader {userId}/downgrade-proofreader
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> DowngradeUserProofreaderAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/downgrade-proofreader";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns your vendor earnings. Includes real-time earnings from ongoing projects, and fixed earnings from completed projects. Also includes total earnings and string edits.
		/// GetUserEarnings {userId}/earnings
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>Earnings for vendors</returns>
		public async Task<Earnings> GetUserEarningsAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/earnings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Earnings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Freeze requester account for project notifications
		/// FreezeUserAccount {userId}/freeze-account
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> FreezeUserAccountAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/freeze-account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// MakeUserProofreader {userId}/make-proofreader
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> MakeUserProofreaderAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/make-proofreader";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SubscribeUserNotification {userId}/notifications/subscribe
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>Saved notification subscription information</returns>
		public async Task<OperationStatus> SubscribeUserNotificationAsync(long userId, NotificationSubscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/notifications/subscribe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// UnsubscribeUserNotification {userId}/notifications/unsubscribe
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>Deleted notification subscription information</returns>
		public async Task<OperationStatus> UnsubscribeUserNotificationAsync(long userId, NotificationSubscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/notifications/unsubscribe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View user's payment and billing info
		/// Returns billing and saved credit card information for user, and their corporate account if present & allowed.
		/// GetUserPaymentInfo {userId}/payment
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>Returns billing and saved card information for user, and their corporate if present.</returns>
		public async Task<PaymentInfo> GetUserPaymentInfoAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/payment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update user payment info
		/// Update user's billing and saved credit card information
		/// UpdateUserPaymentInfo {userId}/payment
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> UpdateUserPaymentInfoAsync(long userId, PaymentInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/payment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of permissions that this user is authorized for.
		/// GetUserPermissions {userId}/permissions
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>List of permission strings</returns>
		public async Task<PermissionList> GetUserPermissionsAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UploadUserProfilePicture {userId}/profile-picture
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> UploadUserProfilePictureAsync(long userId, ProfilePictureUpload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/profile-picture";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of user/vendor projects
		/// Get a list of user/vendor projects
		/// GetVendorProjectsByUserId {userId}/projects/vendor
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <param name="joined">Return only projects that this user has already joined</param>
		/// <param name="completed">Return only projects that have been completed. When `true`, this makes `joined` true as well.</param>
		/// <returns>Vendor project list</returns>
		public async Task<ProjectList> GetVendorProjectsByUserIdAsync(long userId, bool joined, bool completed, long page, long per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/projects/vendor?joined="+joined+"&completed="+completed+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RejectVendorApplication {userId}/reject
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>Vendor application of this user is rejected.</returns>
		public async Task<OperationStatus> RejectVendorApplicationAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/reject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sends email confirmation email for a user
		/// SendUserEmailConfirmation {userId}/resend-email-confirmation
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>confirmation email has been sent</returns>
		public async Task<OperationStatus> SendUserEmailConfirmationAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/resend-email-confirmation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a user's vendor responsivity stats
		/// GetUserResponsivity {userId}/responsivity
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <param name="period">Period for calcualtion.</param>
		/// <returns>Vendor responsivity stats</returns>
		public async Task<ResponsivityList> GetUserResponsivityAsync(long userId, GetResponsivityPeriod period, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/responsivity?period=" + period;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResponsivityList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a user's client and vendor statistics. This used to be called "summary" (\@deprecated).
		/// GetUserStats {userId}/stats
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>User stats for client and vendors</returns>
		public async Task<Stats> GetUserStatsAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/stats";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Stats>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the language pairs that the user has ordered most.
		/// GetUserPopularPairs {userId}/stats/popular-pairs
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>User's most ordered language pairs</returns>
		public async Task<PopularLanguagePairs> GetUserPopularPairsAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/stats/popular-pairs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PopularLanguagePairs>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a user's project statistics.
		/// GetUserProjectStats {userId}/stats/projects
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>User stats for client and vendors</returns>
		public async Task<ClientProjectStats> GetUserProjectStatsAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/stats/projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClientProjectStats>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SuspendUser {userId}/suspend
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>Suspended user account.</returns>
		public async Task<OperationStatus> SuspendUserAsync(long userId, SuspendUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/suspend";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unfreeze requester account for project notifications
		/// UnfreezeUserAccount {userId}/unfreeze-account
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>Successful operation</returns>
		public async Task<OperationStatus> UnfreezeUserAccountAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/unfreeze-account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of user groups that this user belongs to.
		/// GetThisUserGroups {userId}/user-groups
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>List of user groups</returns>
		public async Task<UserGroupList> GetThisUserGroupsAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/user-groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserGroupList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateUserGroup {userId}/user-groups
		/// </summary>
		/// <param name="userId">User ID</param>
		/// <returns>List of user groups</returns>
		public async Task<UserGroupList> UpdateUserGroupAsync(long userId, ActiveWidget requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+userId+"/user-groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserGroupList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum GetContinuousProjectsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
	}
	
	public enum GetDocumentsType_filter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEXT_DOCUMENTS")]
		TEXT_DOCUMENTS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRESENTATIONS")]
		PRESENTATIONS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPREADSHEETS")]
		SPREADSHEETS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PDFS")]
		PDFS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMAGES")]
		IMAGES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTITLES")]
		SUBTITLES = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESIGNS")]
		DESIGNS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCALIZATION")]
		LOCALIZATION = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEB")]
		WEB = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STYLE_GUIDES")]
		STYLE_GUIDES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GLOSSARIES")]
		GLOSSARIES = 11,
	}
	
	public enum GetDocumentsOrder_by
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="updated_at")]
		updated_at = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="created_at")]
		created_at = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name")]
		name = 3,
	}
	
	public enum GetProjectsOrder_by
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="status")]
		status = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delivery")]
		delivery = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="price")]
		price = 3,
	}
	
	public enum TriggerCallbackActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="translated")]
		translated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="proofread")]
		proofread = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 2,
	}
	
	public enum GetResponsivityPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="monthly")]
		monthly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="weekly")]
		weekly = 1,
	}
	
	public enum GetUsersUser_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vendor")]
		vendor = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
