//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A response message that contains the status of a newly created domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDomainResponse
	{
		
		/// <summary>
		/// The current status of the search domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainStatus DomainStatus { get; set; }
	}
	
	/// <summary>
	/// The current status of the search domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainStatus
	{
		
		/// <summary>
		/// An internally generated unique identifier for a domain.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string DomainId { get; set; }
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumSearchableDocs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceEndpoint DocService { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceEndpoint SearchService { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool RequiresIndexDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Processing { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SearchInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SearchPartitionCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SearchInstanceCount { get; set; }
	}
	
	/// <summary>
	/// The endpoint to which service requests can be submitted, including the actual URL prefix for sending requests and the Amazon Resource Name (ARN) so the endpoint can be referenced in other API calls such as <a>UpdateServiceAccessPolicies</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceEndpoint
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN). See <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// The URL (including /version/pathPrefix) to which service requests can be submitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Endpoint { get; set; }
	}
	
	/// <summary>
	/// An error occurred while processing the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseException
	{
		
		/// <summary>
		/// A machine-parsable string error or warning code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// A human-readable string error or warning message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// An internal error occurred while processing the request. If this problem persists, report an issue from the <a href="http://status.aws.amazon.com/">Service Health Dashboard</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalException
	{
	}
	
	/// <summary>
	/// The request was rejected because a resource limit has already been met.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LimitExceededException
	{
	}
	
	/// <summary>
	/// A response message that contains the status of an updated index field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DefineIndexFieldResponse
	{
		
		/// <summary>
		/// The value of an <code>IndexField</code> and its current status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IndexFieldStatus IndexField { get; set; }
	}
	
	/// <summary>
	/// The value of an <code>IndexField</code> and its current status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexFieldStatus
	{
		
		/// <summary>
		/// Defines a field in the index, including its name, type, and the source of its data. The <code>IndexFieldType</code> indicates which of the options will be present. It is invalid to specify options for a type other than the <code>IndexFieldType</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IndexField Options { get; set; }
		
		/// <summary>
		/// The status of an option, including when it was last updated and whether it is actively in use for searches.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// Defines a field in the index, including its name, type, and the source of its data. The <code>IndexFieldType</code> indicates which of the options will be present. It is invalid to specify options for a type other than the <code>IndexFieldType</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexField
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IndexFieldName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IndexFieldType IndexFieldType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UIntOptions UIntOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LiteralOptions LiteralOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TextOptions TextOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceAttribute[] SourceAttributes { get; set; }
	}
	
	/// <summary>
	/// The type of <code>IndexField</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IndexFieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uint")]
		_uint = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		literal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 2,
	}
	
	/// <summary>
	/// Options that define a <code>uint</code> field in the search index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UIntOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultValue { get; set; }
	}
	
	/// <summary>
	/// Options that define a literal field in the search index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiteralOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SearchEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FacetEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ResultEnabled { get; set; }
	}
	
	/// <summary>
	/// Options that define a text field in the search index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FacetEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ResultEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TextProcessor { get; set; }
	}
	
	/// <summary>
	/// Identifies the source data for an index field. An optional data transformation can be applied to the source data when populating the index field. By default, the value of the source attribute is copied to the index field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceAttribute
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SourceDataFunction SourceDataFunction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceData SourceDataCopy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceDataTrimTitle SourceDataTrimTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceDataMap SourceDataMap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SourceDataFunction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Copy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TrimTitle = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Map = 2,
	}
	
	/// <summary>
	/// The source attribute name and an optional default value to use if a document doesn't have an attribute of that name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultValue { get; set; }
	}
	
	/// <summary>
	/// Specifies how to trim common words from the beginning of a field to enable title sorting by that field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceDataTrimTitle
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Separator { get; set; }
		
		/// <summary>
		/// An <a href="http://tools.ietf.org/html/rfc4646">IETF RFC 4646</a> language code. Only the primary language is considered. English (en) is currently the only supported language.
		/// Pattern: [a-zA-Z]{2,8}(?:-[a-zA-Z]{2,8})*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z]{2,8}(?:-[a-zA-Z]{2,8})*")]
		public string Language { get; set; }
	}
	
	/// <summary>
	/// Specifies how to map source attribute values to custom values when populating an <code>IndexField</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceDataMap
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringCaseMap Cases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StringCaseMap
	{
	}
	
	/// <summary>
	/// The status of an option, including when it was last updated and whether it is actively in use for searches.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OptionStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UpdateVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PendingDeletion { get; set; }
	}
	
	/// <summary>
	/// The state of processing a change to an option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OptionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequiresIndexDocuments = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 2,
	}
	
	/// <summary>
	/// The request was rejected because it specified an invalid type definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidTypeException
	{
	}
	
	/// <summary>
	/// The request was rejected because it attempted to reference a resource that does not exist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	/// <summary>
	/// A response message that contains the status of an updated <code>RankExpression</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DefineRankExpressionResponse
	{
		
		/// <summary>
		/// The value of a <code>RankExpression</code> and its current status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RankExpressionStatus RankExpression { get; set; }
	}
	
	/// <summary>
	/// The value of a <code>RankExpression</code> and its current status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RankExpressionStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NamedRankExpression Options { get; set; }
		
		/// <summary>
		/// The status of an option, including when it was last updated and whether it is actively in use for searches.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// A named expression that can be evaluated at search time and used for ranking or thresholding in a search query. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NamedRankExpression
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RankName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RankExpression { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the status of a newly deleted domain, or no status if the domain has already been completely deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDomainResponse
	{
		
		/// <summary>
		/// The current status of the search domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainStatus DomainStatus { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the status of a deleted index field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIndexFieldResponse
	{
		
		/// <summary>
		/// The value of an <code>IndexField</code> and its current status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IndexFieldStatus IndexField { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the status of a deleted <code>RankExpression</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRankExpressionResponse
	{
		
		/// <summary>
		/// The value of a <code>RankExpression</code> and its current status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RankExpressionStatus RankExpression { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>DescribeAvailabilityOptions</code> request. Indicates whether or not the Multi-AZ option is enabled for the domain specified in the request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeAvailabilityOptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityOptionsStatus AvailabilityOptions { get; set; }
	}
	
	/// <summary>
	/// The status and configuration of the domain's availability options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AvailabilityOptionsStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Options { get; set; }
		
		/// <summary>
		/// The status of an option, including when it was last updated and whether it is actively in use for searches.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// The request was rejected because it attempted an operation which is not enabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisabledOperationException
	{
	}
	
	/// <summary>
	/// A response message that contains the default search field for a search domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDefaultSearchFieldResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DefaultSearchFieldStatus DefaultSearchField { get; set; }
	}
	
	/// <summary>
	/// The value of the <code>DefaultSearchField</code> configured for this search domain and its current status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DefaultSearchFieldStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Options { get; set; }
		
		/// <summary>
		/// The status of an option, including when it was last updated and whether it is actively in use for searches.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the status of one or more domains.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDomainsResponse
	{
		
		/// <summary>
		/// The current status of all of your search domains.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainStatus[] DomainStatusList { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the index fields for a search domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeIndexFieldsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IndexFieldStatus[] IndexFields { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the rank expressions for a search domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRankExpressionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RankExpressionStatus[] RankExpressions { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the access policies for a domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeServiceAccessPoliciesResponse
	{
		
		/// <summary>
		/// A <code>PolicyDocument</code> that specifies access policies for the search domain's services, and the current status of those policies.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccessPoliciesStatus AccessPolicies { get; set; }
	}
	
	/// <summary>
	/// A <code>PolicyDocument</code> that specifies access policies for the search domain's services, and the current status of those policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessPoliciesStatus
	{
		
		/// <summary>
		/// <p>An IAM access policy as described in <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?AccessPolicyLanguage.html" target="_blank">The Access Policy Language</a> in <i>Using AWS Identity and Access Management</i>. The maximum size of an access policy document is 100 KB.</p> <p>Example: <code>{"Statement": [{"Effect":"Allow", "Action": "*", "Resource": "arn:aws:cs:us-east-1:1234567890:search/movies", "Condition": { "IpAddress": { "aws:SourceIp": ["203.0.113.1/32"] } }}, {"Effect":"Allow", "Action": "*", "Resource": "arn:aws:cs:us-east-1:1234567890:documents/movies", "Condition": { "IpAddress": { "aws:SourceIp": ["203.0.113.1/32"] } }} ] }</code></p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Options { get; set; }
		
		/// <summary>
		/// The status of an option, including when it was last updated and whether it is actively in use for searches.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the stemming options for a search domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeStemmingOptionsResponse
	{
		
		/// <summary>
		/// The stemming options configured for this search domain and the current status of those options.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StemmingOptionsStatus Stems { get; set; }
	}
	
	/// <summary>
	/// The stemming options configured for this search domain and the current status of those options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StemmingOptionsStatus
	{
		
		/// <summary>
		/// Maps terms to their stems, serialized as a JSON document. The document has a single object with one property "stems" whose value is an object mapping terms to their stems. The maximum size of a stemming document is 500 KB. Example: <code>{ "stems": {"people": "person", "walking": "walk"} }</code>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Options { get; set; }
		
		/// <summary>
		/// The status of an option, including when it was last updated and whether it is actively in use for searches.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the stopword options for a search domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeStopwordOptionsResponse
	{
		
		/// <summary>
		/// The stopword options configured for this search domain and the current status of those options.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StopwordOptionsStatus Stopwords { get; set; }
	}
	
	/// <summary>
	/// The stopword options configured for this search domain and the current status of those options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopwordOptionsStatus
	{
		
		/// <summary>
		/// Lists stopwords serialized as a JSON document. The document has a single object with one property "stopwords" whose value is an array of strings. The maximum size of a stopwords document is 10 KB. Example: <code>{ "stopwords": ["a", "an", "the", "of"] }</code>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Options { get; set; }
		
		/// <summary>
		/// The status of an option, including when it was last updated and whether it is actively in use for searches.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the synonym options for a search domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSynonymOptionsResponse
	{
		
		/// <summary>
		/// The synonym options configured for this search domain and the current status of those options.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SynonymOptionsStatus Synonyms { get; set; }
	}
	
	/// <summary>
	/// The synonym options configured for this search domain and the current status of those options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SynonymOptionsStatus
	{
		
		/// <summary>
		/// Maps terms to their synonyms, serialized as a JSON document. The document has a single object with one property "synonyms" whose value is an object mapping terms to their synonyms. Each synonym is a simple string or an array of strings. The maximum size of a stopwords document is 100 KB. Example: <code>{ "synonyms": {"cat": ["feline", "kitten"], "puppy": "dog"} }</code>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Options { get; set; }
		
		/// <summary>
		/// The status of an option, including when it was last updated and whether it is actively in use for searches.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// The result of an <code>IndexDocuments</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexDocumentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FieldNames { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>UpdateAvailabilityOptions</code> request. Contains the status of the domain's availability options. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAvailabilityOptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityOptionsStatus AvailabilityOptions { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the status of an updated default search field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDefaultSearchFieldResponse
	{
		
		/// <summary>
		/// The value of the <code>DefaultSearchField</code> configured for this search domain and its current status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DefaultSearchFieldStatus DefaultSearchField { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the status of updated access policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateServiceAccessPoliciesResponse
	{
		
		/// <summary>
		/// A <code>PolicyDocument</code> that specifies access policies for the search domain's services, and the current status of those policies.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccessPoliciesStatus AccessPolicies { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the status of updated stemming options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateStemmingOptionsResponse
	{
		
		/// <summary>
		/// The stemming options configured for this search domain and the current status of those options.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StemmingOptionsStatus Stems { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the status of updated stopword options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateStopwordOptionsResponse
	{
		
		/// <summary>
		/// The stopword options configured for this search domain and the current status of those options.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StopwordOptionsStatus Stopwords { get; set; }
	}
	
	/// <summary>
	/// A response message that contains the status of updated synonym options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSynonymOptionsResponse
	{
		
		/// <summary>
		/// The synonym options configured for this search domain and the current status of those options.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SynonymOptionsStatus Synonyms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDomainRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DefineIndexFieldRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Defines a field in the index, including its name, type, and the source of its data. The <code>IndexFieldType</code> indicates which of the options will be present. It is invalid to specify options for a type other than the <code>IndexFieldType</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IndexField IndexField { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DefineRankExpressionRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// A named expression that can be evaluated at search time and used for ranking or thresholding in a search query. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NamedRankExpression RankExpression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDomainRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIndexFieldRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// A string that represents the name of an index field. Field names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Uppercase letters and hyphens are not allowed. The names "body", "docid", and "text_relevance" are reserved and cannot be specified as field or rank expression names.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [a-z][a-z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9_]*")]
		public string IndexFieldName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRankExpressionRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RankName { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DescribeAvailabilityOptions</a></code> operation. Specifies the name of the domain you want to describe. To show the active configuration and exclude any pending changes, set the Deployed option to <code>true</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeAvailabilityOptionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDefaultSearchFieldRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDomainsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DomainNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeIndexFieldsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FieldNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRankExpressionsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RankNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeServiceAccessPoliciesRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeStemmingOptionsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeStopwordOptionsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSynonymOptionsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexDocumentsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>UpdateAvailabilityOptions</a></code> operation. Specifies the name of the domain you want to update and the Multi-AZ availability option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAvailabilityOptionsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool MultiAZ { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDefaultSearchFieldRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DefaultSearchField { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateServiceAccessPoliciesRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// <p>An IAM access policy as described in <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?AccessPolicyLanguage.html" target="_blank">The Access Policy Language</a> in <i>Using AWS Identity and Access Management</i>. The maximum size of an access policy document is 100 KB.</p> <p>Example: <code>{"Statement": [{"Effect":"Allow", "Action": "*", "Resource": "arn:aws:cs:us-east-1:1234567890:search/movies", "Condition": { "IpAddress": { "aws:SourceIp": ["203.0.113.1/32"] } }}, {"Effect":"Allow", "Action": "*", "Resource": "arn:aws:cs:us-east-1:1234567890:documents/movies", "Condition": { "IpAddress": { "aws:SourceIp": ["203.0.113.1/32"] } }} ] }</code></p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessPolicies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateStemmingOptionsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Maps terms to their stems, serialized as a JSON document. The document has a single object with one property "stems" whose value is an object mapping terms to their stems. The maximum size of a stemming document is 500 KB. Example: <code>{ "stems": {"people": "person", "walking": "walk"} }</code>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Stems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateStopwordOptionsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Lists stopwords serialized as a JSON document. The document has a single object with one property "stopwords" whose value is an array of strings. The maximum size of a stopwords document is 10 KB. Example: <code>{ "stopwords": ["a", "an", "the", "of"] }</code>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Stopwords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSynonymOptionsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names must be unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen). Uppercase letters and underscores are not allowed.
		/// Required
		/// Min length: 3
		/// Max length: 28
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z][a-z0-9\-]+")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Maps terms to their synonyms, serialized as a JSON document. The document has a single object with one property "synonyms" whose value is an object mapping terms to their synonyms. Each synonym is a simple string or an array of strings. The maximum size of a stopwords document is 100 KB. Example: <code>{ "synonyms": {"cat": ["feline", "kitten"], "puppy": "dog"} }</code>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Synonyms { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a new search domain.
		/// GET_CreateDomain #Action=CreateDomain
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_CreateDomainAsync(string DomainName, GET_CreateDomainAction Action, GET_CreateDomainVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateDomain?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures an <code>IndexField</code> for the search domain. Used to create new fields and modify existing ones. If the field exists, the new configuration replaces the old one. You can configure a maximum of 200 index fields.
		/// GET_DefineIndexField #Action=DefineIndexField
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DefineIndexFieldAsync(string DomainName, GET_DefineIndexFieldIndexField IndexField, GET_DefineIndexFieldAction Action, GET_DefineIndexFieldVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DefineIndexField?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&IndexField=" + IndexField+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures a <code>RankExpression</code> for the search domain. Used to create new rank expressions and modify existing ones. If the expression exists, the new configuration replaces the old one. You can configure a maximum of 50 rank expressions.
		/// GET_DefineRankExpression #Action=DefineRankExpression
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DefineRankExpressionAsync(string DomainName, GET_DefineRankExpressionRankExpression RankExpression, GET_DefineRankExpressionAction Action, GET_DefineRankExpressionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DefineRankExpression?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&RankExpression=" + RankExpression+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permanently deletes a search domain and all of its data.
		/// GET_DeleteDomain #Action=DeleteDomain
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDomainAsync(string DomainName, GET_DeleteDomainAction Action, GET_DeleteDomainVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteDomain?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an <code>IndexField</code> from the search domain.
		/// GET_DeleteIndexField #Action=DeleteIndexField
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <param name="IndexFieldName">Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteIndexFieldAsync(string DomainName, string IndexFieldName, GET_DeleteIndexFieldAction Action, GET_DeleteIndexFieldVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteIndexField?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&IndexFieldName=" + (IndexFieldName==null? "" : System.Uri.EscapeDataString(IndexFieldName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a <code>RankExpression</code> from the search domain.
		/// GET_DeleteRankExpression #Action=DeleteRankExpression
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <param name="RankName">The name of the <code>RankExpression</code> to delete.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteRankExpressionAsync(string DomainName, string RankName, GET_DeleteRankExpressionAction Action, GET_DeleteRankExpressionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteRankExpression?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&RankName=" + (RankName==null? "" : System.Uri.EscapeDataString(RankName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the availability options configured for a domain. By default, shows the configuration with any pending changes. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html" target="_blank">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DescribeAvailabilityOptions #Action=DescribeAvailabilityOptions
		/// </summary>
		/// <param name="DomainName">The name of the domain you want to describe.
		/// Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAvailabilityOptionsAsync(string DomainName, GET_DescribeAvailabilityOptionsAction Action, GET_DescribeAvailabilityOptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAvailabilityOptions?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the default search field configured for the search domain.
		/// GET_DescribeDefaultSearchField #Action=DescribeDefaultSearchField
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDefaultSearchFieldAsync(string DomainName, GET_DescribeDefaultSearchFieldAction Action, GET_DescribeDefaultSearchFieldVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDefaultSearchField?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the search domains owned by this account. Can be limited to specific domains. Shows all domains by default.
		/// GET_DescribeDomains #Action=DescribeDomains
		/// </summary>
		/// <param name="DomainNames">Limits the DescribeDomains response to the specified search domains.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDomainsAsync(string[] DomainNames, GET_DescribeDomainsAction Action, GET_DescribeDomainsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDomains?"+string.Join("&", DomainNames.Select(z => $"DomainNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the index fields configured for the search domain. Can be limited to specific fields by name. Shows all fields by default.
		/// GET_DescribeIndexFields #Action=DescribeIndexFields
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <param name="FieldNames">Limits the <code>DescribeIndexFields</code> response to the specified fields.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeIndexFieldsAsync(string DomainName, string[] FieldNames, GET_DescribeIndexFieldsAction Action, GET_DescribeIndexFieldsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeIndexFields?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&"+string.Join("&", FieldNames.Select(z => $"FieldNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the rank expressions configured for the search domain. Can be limited to specific rank expressions by name. Shows all rank expressions by default.
		/// GET_DescribeRankExpressions #Action=DescribeRankExpressions
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <param name="RankNames">Limits the <code>DescribeRankExpressions</code> response to the specified fields.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeRankExpressionsAsync(string DomainName, string[] RankNames, GET_DescribeRankExpressionsAction Action, GET_DescribeRankExpressionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeRankExpressions?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&"+string.Join("&", RankNames.Select(z => $"RankNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the resource-based policies that control access to the domain's document and search services.
		/// GET_DescribeServiceAccessPolicies #Action=DescribeServiceAccessPolicies
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeServiceAccessPoliciesAsync(string DomainName, GET_DescribeServiceAccessPoliciesAction Action, GET_DescribeServiceAccessPoliciesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeServiceAccessPolicies?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the stemming dictionary configured for the search domain.
		/// GET_DescribeStemmingOptions #Action=DescribeStemmingOptions
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeStemmingOptionsAsync(string DomainName, GET_DescribeStemmingOptionsAction Action, GET_DescribeStemmingOptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeStemmingOptions?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the stopwords configured for the search domain.
		/// GET_DescribeStopwordOptions #Action=DescribeStopwordOptions
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeStopwordOptionsAsync(string DomainName, GET_DescribeStopwordOptionsAction Action, GET_DescribeStopwordOptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeStopwordOptions?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the synonym dictionary configured for the search domain.
		/// GET_DescribeSynonymOptions #Action=DescribeSynonymOptions
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSynonymOptionsAsync(string DomainName, GET_DescribeSynonymOptionsAction Action, GET_DescribeSynonymOptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSynonymOptions?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tells the search domain to start indexing its documents using the latest text processing options and <code>IndexFields</code>. This operation must be invoked to make options whose <a>OptionStatus</a> has <code>OptionState</code> of <code>RequiresIndexDocuments</code> visible in search results.
		/// GET_IndexDocuments #Action=IndexDocuments
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_IndexDocumentsAsync(string DomainName, GET_IndexDocumentsAction Action, GET_IndexDocumentsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=IndexDocuments?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures the availability options for a domain. Enabling the Multi-AZ option expands an Amazon CloudSearch domain to an additional Availability Zone in the same Region to increase fault tolerance in the event of a service disruption. Changes to the Multi-AZ option can take about half an hour to become active. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html" target="_blank">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_UpdateAvailabilityOptions #Action=UpdateAvailabilityOptions
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <param name="MultiAZ">You expand an existing search domain to a second Availability Zone by setting the Multi-AZ option to true. Similarly, you can turn off the Multi-AZ option to downgrade the domain to a single Availability Zone by setting the Multi-AZ option to <code>false</code>. </param>
		/// <returns>Success</returns>
		public async Task GET_UpdateAvailabilityOptionsAsync(string DomainName, bool MultiAZ, GET_UpdateAvailabilityOptionsAction Action, GET_UpdateAvailabilityOptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateAvailabilityOptions?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&MultiAZ="+MultiAZ+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures the default search field for the search domain. The default search field is the text field that is searched when a search request does not specify which fields to search. By default, it is configured to include the contents of all of the domain's text fields.
		/// GET_UpdateDefaultSearchField #Action=UpdateDefaultSearchField
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <param name="DefaultSearchField">The text field to search if the search request does not specify which field to search. The default search field is used when search terms are specified with the <code>q</code> parameter, or if a match expression specified with the <code>bq</code> parameter does not constrain the search to a particular field. The default is an empty string, which automatically searches all text fields.</param>
		/// <returns>Success</returns>
		public async Task GET_UpdateDefaultSearchFieldAsync(string DomainName, string DefaultSearchField, GET_UpdateDefaultSearchFieldAction Action, GET_UpdateDefaultSearchFieldVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateDefaultSearchField?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&DefaultSearchField=" + (DefaultSearchField==null? "" : System.Uri.EscapeDataString(DefaultSearchField))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures the policies that control access to the domain's document and search services. The maximum size of an access policy document is 100 KB.
		/// GET_UpdateServiceAccessPolicies #Action=UpdateServiceAccessPolicies
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_UpdateServiceAccessPoliciesAsync(string DomainName, string AccessPolicies, GET_UpdateServiceAccessPoliciesAction Action, GET_UpdateServiceAccessPoliciesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateServiceAccessPolicies?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&AccessPolicies=" + (AccessPolicies==null? "" : System.Uri.EscapeDataString(AccessPolicies))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures a stemming dictionary for the search domain. The stemming dictionary is used during indexing and when processing search requests. The maximum size of the stemming dictionary is 500 KB.
		/// GET_UpdateStemmingOptions #Action=UpdateStemmingOptions
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_UpdateStemmingOptionsAsync(string DomainName, string Stems, GET_UpdateStemmingOptionsAction Action, GET_UpdateStemmingOptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateStemmingOptions?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Stems=" + (Stems==null? "" : System.Uri.EscapeDataString(Stems))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures stopwords for the search domain. Stopwords are used during indexing and when processing search requests. The maximum size of the stopwords dictionary is 10 KB.
		/// GET_UpdateStopwordOptions #Action=UpdateStopwordOptions
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_UpdateStopwordOptionsAsync(string DomainName, string Stopwords, GET_UpdateStopwordOptionsAction Action, GET_UpdateStopwordOptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateStopwordOptions?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Stopwords=" + (Stopwords==null? "" : System.Uri.EscapeDataString(Stopwords))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures a synonym dictionary for the search domain. The synonym dictionary is used during indexing to configure mappings for terms that occur in text fields. The maximum size of the synonym dictionary is 100 KB.
		/// GET_UpdateSynonymOptions #Action=UpdateSynonymOptions
		/// </summary>
		/// <param name="DomainName">Min length: 3
		/// Max length: 28
		// </param>
		/// <returns>Success</returns>
		public async Task GET_UpdateSynonymOptionsAsync(string DomainName, string Synonyms, GET_UpdateSynonymOptionsAction Action, GET_UpdateSynonymOptionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateSynonymOptions?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Synonyms=" + (Synonyms==null? "" : System.Uri.EscapeDataString(Synonyms))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GET_CreateDomainAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateDomain = 0,
	}
	
	public enum GET_CreateDomainVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_CreateDomainVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public class GET_DefineIndexFieldIndexField
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IndexFieldName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IndexFieldType IndexFieldType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UIntOptions UIntOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LiteralOptions LiteralOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TextOptions TextOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceAttribute[] SourceAttributes { get; set; }
	}
	
	public enum GET_DefineIndexFieldAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DefineIndexField = 0,
	}
	
	public enum GET_DefineIndexFieldVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_DefineIndexFieldVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public class GET_DefineRankExpressionRankExpression
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RankName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RankExpression { get; set; }
	}
	
	public enum GET_DefineRankExpressionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DefineRankExpression = 0,
	}
	
	public enum GET_DefineRankExpressionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_DefineRankExpressionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_DeleteDomainAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteDomain = 0,
	}
	
	public enum GET_DeleteDomainVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_DeleteDomainVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_DeleteIndexFieldAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteIndexField = 0,
	}
	
	public enum GET_DeleteIndexFieldVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_DeleteIndexFieldVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_DeleteRankExpressionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteRankExpression = 0,
	}
	
	public enum GET_DeleteRankExpressionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_DeleteRankExpressionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_DescribeAvailabilityOptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeAvailabilityOptions = 0,
	}
	
	public enum GET_DescribeAvailabilityOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_DescribeAvailabilityOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_DescribeDefaultSearchFieldAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeDefaultSearchField = 0,
	}
	
	public enum GET_DescribeDefaultSearchFieldVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_DescribeDefaultSearchFieldVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_DescribeDomainsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeDomains = 0,
	}
	
	public enum GET_DescribeDomainsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_DescribeDomainsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_DescribeIndexFieldsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeIndexFields = 0,
	}
	
	public enum GET_DescribeIndexFieldsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_DescribeIndexFieldsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_DescribeRankExpressionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeRankExpressions = 0,
	}
	
	public enum GET_DescribeRankExpressionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_DescribeRankExpressionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_DescribeServiceAccessPoliciesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeServiceAccessPolicies = 0,
	}
	
	public enum GET_DescribeServiceAccessPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_DescribeServiceAccessPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_DescribeStemmingOptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeStemmingOptions = 0,
	}
	
	public enum GET_DescribeStemmingOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_DescribeStemmingOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_DescribeStopwordOptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeStopwordOptions = 0,
	}
	
	public enum GET_DescribeStopwordOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_DescribeStopwordOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_DescribeSynonymOptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeSynonymOptions = 0,
	}
	
	public enum GET_DescribeSynonymOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_DescribeSynonymOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_IndexDocumentsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IndexDocuments = 0,
	}
	
	public enum GET_IndexDocumentsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_IndexDocumentsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_UpdateAvailabilityOptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateAvailabilityOptions = 0,
	}
	
	public enum GET_UpdateAvailabilityOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_UpdateAvailabilityOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_UpdateDefaultSearchFieldAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateDefaultSearchField = 0,
	}
	
	public enum GET_UpdateDefaultSearchFieldVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_UpdateDefaultSearchFieldVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_UpdateServiceAccessPoliciesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateServiceAccessPolicies = 0,
	}
	
	public enum GET_UpdateServiceAccessPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_UpdateServiceAccessPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_UpdateStemmingOptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateStemmingOptions = 0,
	}
	
	public enum GET_UpdateStemmingOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_UpdateStemmingOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_UpdateStopwordOptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateStopwordOptions = 0,
	}
	
	public enum GET_UpdateStopwordOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_UpdateStopwordOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum GET_UpdateSynonymOptionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateSynonymOptions = 0,
	}
	
	public enum GET_UpdateSynonymOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
	
	public enum POST_UpdateSynonymOptionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011-02-01")]
		_2011Minus02Minus01 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
