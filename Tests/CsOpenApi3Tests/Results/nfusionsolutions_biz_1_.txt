//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Interval
	{
		
		[System.Runtime.Serialization.DataMember(Name="change")]
		public System.Nullable<System.Double> Change { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changePercent")]
		public System.Nullable<System.Double> ChangePercent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Double> High { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last")]
		public System.Nullable<System.Double> Last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Double> Low { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="open")]
		public System.Nullable<System.Double> Open { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntervalCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseCurrency")]
		public string BaseCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intervals")]
		public Interval[] Intervals { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntervalCollectionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public IntervalCollection Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedCurrency")]
		public string RequestedCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedSymbol")]
		public string RequestedSymbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedUnitOfMeasure")]
		public string RequestedUnitOfMeasure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Rate
	{
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Rate Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedCurrency")]
		public string RequestedCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedSymbol")]
		public string RequestedSymbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedUnitOfMeasure")]
		public string RequestedUnitOfMeasure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Summary
	{
		
		[System.Runtime.Serialization.DataMember(Name="ask")]
		public System.Nullable<System.Double> Ask { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="baseCurrency")]
		public string BaseCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bid")]
		public System.Nullable<System.Double> Bid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fiftyTwoWeekHigh")]
		public System.Nullable<System.Double> FiftyTwoWeekHigh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fiftyTwoWeekLow")]
		public System.Nullable<System.Double> FiftyTwoWeekLow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fiftyTwoWeekPercentChange")]
		public System.Nullable<System.Double> FiftyTwoWeekPercentChange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fourWeekPercentChange")]
		public System.Nullable<System.Double> FourWeekPercentChange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Double> High { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last")]
		public System.Nullable<System.Double> Last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Double> Low { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oneDayChange")]
		public System.Nullable<System.Double> OneDayChange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oneDayPercentChange")]
		public System.Nullable<System.Double> OneDayPercentChange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oneDayValue")]
		public System.Nullable<System.Double> OneDayValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="open")]
		public System.Nullable<System.Double> Open { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twelveWeekPercentChange")]
		public System.Nullable<System.Double> TwelveWeekPercentChange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yearToDatePercentChange")]
		public System.Nullable<System.Double> YearToDatePercentChange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SummaryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Summary Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedCurrency")]
		public string RequestedCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedSymbol")]
		public string RequestedSymbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedUnitOfMeasure")]
		public string RequestedUnitOfMeasure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get historical prices for requested currency pairs
		/// Historical OHLC data for the specified period and interval size
		/// 
		/// The combination of the interval parameter and start and end dates can result in results
		/// being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
		/// Currencies_History_GET api/v1/Currencies/history
		/// </summary>
		/// <param name="pairs">comma separated list of currency pairs. For example: USD/CAD,USD/EUR,USD/AUD</param>
		/// <param name="start">start date of time period. format is <i>yyyy-mm-dd</i></param>
		/// <param name="end">end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.</param>
		/// <param name="interval">aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified), 
		///followed by a type string which must be one of the following values:
		///y=year,
		///m=month,
		///w=week,
		///d=day,
		///h=hour,
		///mi=minute
		///
		///For example, a yearly interval can be specified as "y" and 6 month interval as "6m". 
		///
		///If not specified the interval parameter default is 1 Day.</param>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<IntervalCollectionResponse[]> Currencies_History_GETAsync(string pairs, System.DateTimeOffset start, System.DateTimeOffset end, string interval, Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Currencies/history?pairs=" + (pairs==null? "" : System.Uri.EscapeDataString(pairs))+"&start=" + start.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end=" + end.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&interval=" + (interval==null? "" : System.Uri.EscapeDataString(interval))+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntervalCollectionResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of currency pairs supported by the history endpoint
		/// Only the currency pairs in the direction noted can be used with the history endpoint.
		/// For example: USD/CAD is not the same as CAD/USD
		/// Currencies_SupportedCurrencies_History_GET api/v1/Currencies/history/supported
		/// </summary>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<string[]> Currencies_SupportedCurrencies_History_GETAsync(Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Currencies/history/supported?format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get latest mid rate for requested currency pairs
		/// Current Mid Rate
		/// Currencies_Rate_GET api/v1/Currencies/rate
		/// </summary>
		/// <param name="pairs">comma separated list of currency pairs. For example: USD/CAD,USD/EUR,USD/AUD</param>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<RateResponse[]> Currencies_Rate_GETAsync(string pairs, Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Currencies/rate?pairs=" + (pairs==null? "" : System.Uri.EscapeDataString(pairs))+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RateResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of currencies supported by the rate endpoint
		/// Any of the currencies in this list can be paired with any other currency in this list when supplied to the Rate endpoint.
		/// For example: USD/CAD,CAD/USD,USD/EUR,EUR/CAD
		/// Currencies_SupportedCurrencies_Rate_GET api/v1/Currencies/rate/supported
		/// </summary>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<string[]> Currencies_SupportedCurrencies_Rate_GETAsync(Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Currencies/rate/supported?format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get latest Summary for requested currency pairs
		/// Current and daily summary information combined into a single quote
		/// Currencies_Summary_GET api/v1/Currencies/summary
		/// </summary>
		/// <param name="pairs">comma separated list of currency pairs. For example: USD/CAD,USD/EUR,USD/AUD</param>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<SummaryResponse[]> Currencies_Summary_GETAsync(string pairs, Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Currencies/summary?pairs=" + (pairs==null? "" : System.Uri.EscapeDataString(pairs))+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SummaryResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of currency pairs supported by the Summary endpoint
		/// Only the currency pairs in the direction noted can be used with the Summary endpoint.
		/// For example: USD/CAD is not the same as CAD/USD
		/// Currencies_SupportedCurrencies_Summary_GET api/v1/Currencies/summary/supported
		/// </summary>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<string[]> Currencies_SupportedCurrencies_Summary_GETAsync(Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Currencies/summary/supported?format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get historical benchmark prices for requested metals
		/// Historical OHLC data for the specified period and interval size
		/// 
		/// The combination of the interval parameter and start and end dates can result in results
		/// being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
		/// 
		/// The historicalfx flag is used to determine whether to apply today's fx rates to a historical period, or to apply the historical rates from that same time frame.
		/// Metals_BenchmarkHistory_GET api/v1/Metals/benchmark/history
		/// </summary>
		/// <param name="metals">comma separated list of metals</param>
		/// <param name="start">start date of time period. format is <i>yyyy-mm-dd</i></param>
		/// <param name="end">end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.</param>
		/// <param name="interval">aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified), 
		///followed by a type string which must be one of the following values:
		///y=year,
		///m=month,
		///w=week,
		///d=day,
		///h=hour,
		///mi=minute
		///
		///For example, a yearly interval can be specified as "y" and 6 month interval as "6m". 
		///
		///If not specified the interval parameter default is 1 Day.</param>
		/// <param name="historicalfx">if true use historical currency rates otherwise current currency rates. Defaults to true.</param>
		/// <param name="currency">comma separated list of conversion currencies, defaults to USD</param>
		/// <param name="unitofmeasure">unit of meaure, defaults to troy ounces. allowed values are:
		///mg=milligram
		///g=gram
		///kg=kilogram
		///gr=grain
		///oz=ounce
		///toz=troy ounce
		///ct=carat
		///dwt=pennyweight</param>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<IntervalCollectionResponse[]> Metals_BenchmarkHistory_GETAsync(string metals, System.DateTimeOffset start, System.DateTimeOffset end, string interval, bool historicalfx, string currency, Metals_BenchmarkHistory_GETUnitofmeasure unitofmeasure, Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Metals/benchmark/history?metals=" + (metals==null? "" : System.Uri.EscapeDataString(metals))+"&start=" + start.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end=" + end.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&interval=" + (interval==null? "" : System.Uri.EscapeDataString(interval))+"&historicalfx="+historicalfx+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&unitofmeasure=" + unitofmeasure+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntervalCollectionResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get latest Benchmark prices for requested metals
		/// Benchmark price information
		/// Metals_BenchmarkSummary_GET api/v1/Metals/benchmark/summary
		/// </summary>
		/// <param name="metals">comma separated list of metals</param>
		/// <param name="currency">comma separated list of conversion currencies, defaults to USD</param>
		/// <param name="unitofmeasure">unit of meaure, defaults to troy ounces. allowed values are:
		///mg=milligram
		///g=gram
		///kg=kilogram
		///gr=grain
		///oz=ounce
		///toz=troy ounce
		///ct=carat
		///dwt=pennyweight</param>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<SummaryResponse[]> Metals_BenchmarkSummary_GETAsync(string metals, string currency, Metals_BenchmarkHistory_GETUnitofmeasure unitofmeasure, Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Metals/benchmark/summary?metals=" + (metals==null? "" : System.Uri.EscapeDataString(metals))+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&unitofmeasure=" + unitofmeasure+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SummaryResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of symbols supported by the benchmark endpoints
		/// Metals_BenchmarkSupportedMetals_GET api/v1/Metals/benchmark/supported
		/// </summary>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<string[]> Metals_BenchmarkSupportedMetals_GETAsync(Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Metals/benchmark/supported?format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get historical Spot prices for requested metals
		/// Historical OHLC data for the specified period and interval size
		/// 
		/// The combination of the interval parameter and start and end dates can result in results
		/// being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
		/// 
		/// The historicalfx flag is used to determine whether to apply today's fx rates to a historical period, or to apply the historical rates from that same time frame.
		/// Metals_SpotHistory_GET api/v1/Metals/spot/history
		/// </summary>
		/// <param name="metals">comma separated list of metals</param>
		/// <param name="start">start date of time period. format is <i>yyyy-mm-dd</i></param>
		/// <param name="end">end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.</param>
		/// <param name="interval">aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified), 
		///followed by a type string which must be one of the following values:
		///y=year,
		///m=month,
		///w=week,
		///d=day,
		///h=hour,
		///mi=minute
		///
		///For example, a yearly interval can be specified as "y" and 6 month interval as "6m". 
		///
		///If not specified the interval parameter default is 1 Day.</param>
		/// <param name="historicalfx">if true use historical currency rates otherwise current currency rates. Defaults to true.</param>
		/// <param name="currency">comma separated list of conversion currencies, defaults to USD</param>
		/// <param name="unitofmeasure">unit of meaure, defaults to troy ounces. allowed values are:
		///mg=milligram
		///g=gram
		///kg=kilogram
		///gr=grain
		///oz=ounce
		///toz=troy ounce
		///ct=carat
		///dwt=pennyweight</param>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<IntervalCollectionResponse[]> Metals_SpotHistory_GETAsync(string metals, System.DateTimeOffset start, System.DateTimeOffset end, string interval, bool historicalfx, string currency, Metals_BenchmarkHistory_GETUnitofmeasure unitofmeasure, Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Metals/spot/history?metals=" + (metals==null? "" : System.Uri.EscapeDataString(metals))+"&start=" + start.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end=" + end.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&interval=" + (interval==null? "" : System.Uri.EscapeDataString(interval))+"&historicalfx="+historicalfx+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&unitofmeasure=" + unitofmeasure+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntervalCollectionResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Historical Performance for requested metals
		/// Historical Performance information
		/// Metals_SpotHistoricalPerformance_GET api/v1/Metals/spot/performance
		/// </summary>
		/// <param name="metals">comma separated list of metals</param>
		/// <param name="currency">comma separated list of conversion currencies, defaults to USD</param>
		/// <param name="unitofmeasure">unit of meaure, defaults to troy ounces. allowed values are:
		///mg=milligram
		///g=gram
		///kg=kilogram
		///gr=grain
		///oz=ounce
		///toz=troy ounce
		///ct=carat
		///dwt=pennyweight</param>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<IntervalCollectionResponse[]> Metals_SpotHistoricalPerformance_GETAsync(string metals, string currency, Metals_BenchmarkHistory_GETUnitofmeasure unitofmeasure, Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Metals/spot/performance?metals=" + (metals==null? "" : System.Uri.EscapeDataString(metals))+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&unitofmeasure=" + unitofmeasure+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntervalCollectionResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Historical Annual Performance for requested metals
		/// Annual Historical Performance information
		/// Metals_SpotAnnualHistoricalPerformance_GET api/v1/Metals/spot/performance/annual
		/// </summary>
		/// <param name="metals">comma separated list of metals</param>
		/// <param name="currency">comma separated list of conversion currencies, defaults to USD</param>
		/// <param name="unitofmeasure">unit of meaure, defaults to troy ounces. allowed values are:
		///mg=milligram
		///g=gram
		///kg=kilogram
		///gr=grain
		///oz=ounce
		///toz=troy ounce
		///ct=carat
		///dwt=pennyweight</param>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <param name="years">Number of years of history to return. Defaults to 10.</param>
		/// <returns>Success</returns>
		public async Task<IntervalCollectionResponse[]> Metals_SpotAnnualHistoricalPerformance_GETAsync(string metals, string currency, Metals_BenchmarkHistory_GETUnitofmeasure unitofmeasure, Currencies_History_GETFormat format, int years, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Metals/spot/performance/annual?metals=" + (metals==null? "" : System.Uri.EscapeDataString(metals))+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&unitofmeasure=" + unitofmeasure+"&format=" + format+"&years="+years;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntervalCollectionResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get historical Spot Ratio prices for requested metals
		/// Historical data for the specified period and interval size
		/// 
		/// The combination of the interval parameter and start and end dates can result in results
		/// being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
		/// Metals_SpotRatioHistory_GET api/v1/Metals/spot/ratio/history
		/// </summary>
		/// <param name="pairs">comma separated list of metals</param>
		/// <param name="start">start date of time period. format is <i>yyyy-mm-dd</i></param>
		/// <param name="end">end date of time period. format is <i>yyyy-mm-dd</i>. Default is current date.</param>
		/// <param name="interval">aggregation interval. Composed of an optional integer value (which defaults to 1 when not specified), 
		///followed by a type string which must be one of the following values:
		///y=year,
		///m=month,
		///w=week,
		///d=day,
		///h=hour,
		///mi=minute
		///
		///For example, a yearly interval can be specified as "y" and 6 month interval as "6m". 
		///
		///If not specified the interval parameter default is 1 Day.</param>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<IntervalCollectionResponse[]> Metals_SpotRatioHistory_GETAsync(string pairs, System.DateTimeOffset start, System.DateTimeOffset end, string interval, Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Metals/spot/ratio/history?pairs=" + (pairs==null? "" : System.Uri.EscapeDataString(pairs))+"&start=" + start.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end=" + end.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&interval=" + (interval==null? "" : System.Uri.EscapeDataString(interval))+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntervalCollectionResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get latest Spot Summary for requested metal ratios
		/// Ratios between prices of two metals
		/// Metals_SpotRatioSummary_GET api/v1/Metals/spot/ratio/summary
		/// </summary>
		/// <param name="pairs">comma separated list of metal pairs. For example: gold/silver,gold/platinum,silver/palladium</param>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<SummaryResponse[]> Metals_SpotRatioSummary_GETAsync(string pairs, Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Metals/spot/ratio/summary?pairs=" + (pairs==null? "" : System.Uri.EscapeDataString(pairs))+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SummaryResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get latest Spot Summary for requested metals
		/// Current and daily summary information combined into a single quote
		/// Metals_SpotSummary_GET api/v1/Metals/spot/summary
		/// </summary>
		/// <param name="metals">comma separated list of metals</param>
		/// <param name="currency">comma separated list of conversion currencies, defaults to USD</param>
		/// <param name="unitofmeasure">unit of meaure, defaults to troy ounces. allowed values are:
		///mg=milligram
		///g=gram
		///kg=kilogram
		///gr=grain
		///oz=ounce
		///toz=troy ounce
		///ct=carat
		///dwt=pennyweight</param>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<SummaryResponse[]> Metals_SpotSummary_GETAsync(string metals, string currency, Metals_BenchmarkHistory_GETUnitofmeasure unitofmeasure, Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Metals/spot/summary?metals=" + (metals==null? "" : System.Uri.EscapeDataString(metals))+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&unitofmeasure=" + unitofmeasure+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SummaryResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of symbols supported by the spot endpoints
		/// Metals_SpotSupportedMetals_GET api/v1/Metals/spot/supported
		/// </summary>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<string[]> Metals_SpotSupportedMetals_GETAsync(Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Metals/spot/supported?format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of currencies supported by metals endpoints for currency conversion
		/// Metals_SupportedCurrencies_Metals_GET api/v1/Metals/supported/currency
		/// </summary>
		/// <param name="format">to override content negotiation specify a value of json or xml</param>
		/// <returns>Success</returns>
		public async Task<string[]> Metals_SupportedCurrencies_Metals_GETAsync(Currencies_History_GETFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Metals/supported/currency?format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Currencies_History_GETFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xml = 1,
	}
	
	public enum Metals_BenchmarkHistory_GETUnitofmeasure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mg = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gr = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		oz = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		toz = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ct = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dwt = 7,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
