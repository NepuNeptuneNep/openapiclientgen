//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class A_specific_entitlement_by_organization
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Activate_an_individual_project
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Add_member_body
	{
		
		/// <summary>
		/// The role of the user, "admin" or "collaborator".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// The id of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Aggregated_Project_Snapshot_Issues
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Aggregated_Project_issues
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Aggregated_project_issues
	{
		
		/// <summary>
		/// An array of identified issues
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public Aggregated_project_issuesIssues[] Aggregated_project_issuesIssues { get; set; }
	}
	
	public class Aggregated_project_issuesIssues
	{
		
		/// <summary>
		/// Information about fix/upgrade/pinnable options for the issue (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixInfo")]
		public Aggregated_project_issuesIssuesFixInfo FixInfo { get; set; }
		
		/// <summary>
		/// The identifier of the issue
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The list of reasons why the issue was ignored
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreReasons")]
		public string[] IgnoreReasons { get; set; }
		
		/// <summary>
		/// The list of what introduced the issue (it is available only for container project with Dockerfile)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="introducedThrough")]
		public string[] IntroducedThrough { get; set; }
		
		/// <summary>
		/// Whether the issue has been ignored
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isIgnored")]
		public bool IsIgnored { get; set; }
		
		/// <summary>
		/// Whether the issue has been patched (Non-IaC projects only)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isPatched")]
		public bool IsPatched { get; set; }
		
		/// <summary>
		/// The details of the issue
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueData")]
		public Aggregated_project_issuesIssuesIssueData IssueData { get; set; }
		
		/// <summary>
		/// type of the issue ('vuln', 'license' or 'configuration')
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueType")]
		public string IssueType { get; set; }
		
		/// <summary>
		/// Onward links from this record (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Aggregated_project_issuesIssuesLinks Links { get; set; }
		
		/// <summary>
		/// The package name (Non-IaC projects only)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgName")]
		public string PkgName { get; set; }
		
		/// <summary>
		/// List of affected package versions (Non-IaC projects only)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgVersions")]
		public string[] PkgVersions { get; set; }
		
		/// <summary>
		/// Information about the priority of the issue (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public Aggregated_project_issuesIssuesPriority Priority { get; set; }
	}
	
	public class Aggregated_project_issuesIssuesFixInfo
	{
		
		/// <summary>
		/// The set of versions in which this issue has been fixed. If the issue spanned multiple versions (i.e. `1.x` and `2.x`) then there will be multiple `fixedIn` entries
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedIn")]
		public string[] FixedIn { get; set; }
		
		/// <summary>
		/// Whether all of the issue's paths are fixable. Paths that are already patched are not considered fixable unless they have an alternative remediation (e.g. pinning or upgrading). An upgrade path where the only changes are in transitive dependencies is only considered fixable if the package manager supports it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFixable")]
		public System.Nullable<System.Boolean> IsFixable { get; set; }
		
		/// <summary>
		/// Whether any of the issue's paths can be fixed. Paths that are already patched are not considered fixable unless they have an alternative remediation (e.g. pinning or upgrading).  An upgrade path where the only changes are in transitive dependencies is only considered fixable if the package manager supports it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPartiallyFixable")]
		public System.Nullable<System.Boolean> IsPartiallyFixable { get; set; }
		
		/// <summary>
		/// Whether all the of issue's paths are patchable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPatchable")]
		public System.Nullable<System.Boolean> IsPatchable { get; set; }
		
		/// <summary>
		/// Whether the issue can be fixed by pinning a transitive
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPinnable")]
		public System.Nullable<System.Boolean> IsPinnable { get; set; }
		
		/// <summary>
		/// Whether all of the issue's paths are upgradable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUpgradable")]
		public System.Nullable<System.Boolean> IsUpgradable { get; set; }
		
		/// <summary>
		/// Nearest version which includes a fix for the issue. This is populated for container projects only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nearestFixedInVersion")]
		public string NearestFixedInVersion { get; set; }
	}
	
	public class Aggregated_project_issuesIssuesIssueData
	{
		
		/// <summary>
		/// The CVSS v3 string that signifies how the CVSS score was calculated (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CVSSv3 { get; set; }
		
		/// <summary>
		/// The list of people responsible for first uncovering or reporting the issue (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credit")]
		public string[] Credit { get; set; }
		
		/// <summary>
		/// The CVSS score that results from running the CVSSv3 string (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssScore")]
		public System.Nullable<System.Double> CvssScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The date that the vulnerability was first disclosed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disclosureTime")]
		public string DisclosureTime { get; set; }
		
		/// <summary>
		/// The exploit maturity of the issue
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exploitMaturity")]
		public string ExploitMaturity { get; set; }
		
		/// <summary>
		/// The identifier of the issue
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// External identifiers assigned to the issue (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifiers")]
		public Aggregated_project_issuesIssuesIssueDataIdentifiers Identifiers { get; set; }
		
		/// <summary>
		/// Whether the issue is intentional, indicating a malicious package
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMaliciousPackage")]
		public System.Nullable<System.Boolean> IsMaliciousPackage { get; set; }
		
		/// <summary>
		/// The language of the issue (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Nearest version which includes a fix for the issue. This is populated for container projects only. (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nearestFixedInVersion")]
		public string NearestFixedInVersion { get; set; }
		
		/// <summary>
		/// The original severity status of the issue, as retrieved from Snyk Vulnerability database, before policies are applied
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originalSeverity")]
		public string OriginalSeverity { get; set; }
		
		/// <summary>
		/// A list of patches available for the given issue (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patches")]
		public string[] Patches { get; set; }
		
		/// <summary>
		/// Path to the resource property violating the policy within the scanned project. (IaC projects only)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The date that the vulnerability was first published by Snyk (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicationTime")]
		public string PublicationTime { get; set; }
		
		/// <summary>
		/// The ranges that are vulnerable and unaffected by the issue (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="semver")]
		public Aggregated_project_issuesIssuesIssueDataSemver Semver { get; set; }
		
		/// <summary>
		/// The severity status of the issue, after policies are applied
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		/// <summary>
		/// The issue title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// URL to a page containing information about the issue
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The ID of the violated policy in the issue (IaC projects only)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="violatedPolicyPublicId")]
		public string ViolatedPolicyPublicId { get; set; }
	}
	
	public class Aggregated_project_issuesIssuesIssueDataIdentifiers
	{
		
		/// <summary>
		/// Common Vulnerability Enumeration identifiers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] CVE { get; set; }
		
		/// <summary>
		/// Common Weakness Enumeration identifiers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] CWE { get; set; }
		
		/// <summary>
		/// Identifiers assigned by the Open Source Vulnerability Database (OSVDB)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] OSVDB { get; set; }
	}
	
	public class Aggregated_project_issuesIssuesIssueDataSemver
	{
		
		/// <summary>
		/// The ranges that are unaffected by the issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unaffected")]
		public string Unaffected { get; set; }
		
		/// <summary>
		/// The ranges that are vulnerable to the issue. May be an array or a string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vulnerable")]
		public string[] Vulnerable { get; set; }
	}
	
	public class Aggregated_project_issuesIssuesLinks
	{
		
		/// <summary>
		/// The URL for the dependency paths that introduce this issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public string Paths { get; set; }
	}
	
	public class Aggregated_project_issuesIssuesPriority
	{
		
		/// <summary>
		/// The list of factors that contributed to the priority of the issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factors")]
		public string[] Factors { get; set; }
		
		/// <summary>
		/// The priority score of the issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Double> Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Aggregated_project_issues_filters
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Aggregated_project_issues_filtersFilters Filters { get; set; }
		
		/// <summary>
		/// If set to `true`, Include issue's description, if set to `false` (by default), it won't (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeDescription")]
		public System.Nullable<System.Boolean> IncludeDescription { get; set; }
		
		/// <summary>
		/// If set to `true`, Include issue's introducedThrough, if set to `false` (by default), it won't. It's for container only projects (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeIntroducedThrough")]
		public System.Nullable<System.Boolean> IncludeIntroducedThrough { get; set; }
	}
	
	public class Aggregated_project_issues_filtersFilters
	{
		
		/// <summary>
		/// The exploit maturity levels of issues to filter the results by (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exploitMaturity")]
		public string[] ExploitMaturity { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignored")]
		public System.Nullable<System.Boolean> Ignored { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patched")]
		public System.Nullable<System.Boolean> Patched { get; set; }
		
		/// <summary>
		/// The priority to filter the issues by (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public Aggregated_project_issues_filtersFiltersPriority Priority { get; set; }
		
		/// <summary>
		/// The severity levels of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severities")]
		public string[] Severities { get; set; }
		
		/// <summary>
		/// The type of issues to filter the results by (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	public class Aggregated_project_issues_filtersFiltersPriority
	{
		
		/// <summary>
		/// Include issues where the priority score is between min and max
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public Aggregated_project_issues_filtersFiltersPriorityScore Score { get; set; }
	}
	
	public class Aggregated_project_issues_filtersFiltersPriorityScore
	{
		
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Double> Max { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Double> Min { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class All_ignores
	{
		
		/// <summary>
		/// The issue ID that should be ignored.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueId")]
		public string[] IssueId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class All_jira_issues
	{
		
		/// <summary>
		/// The issue ID and relating jira issue.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueId")]
		public string[] IssueId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class All_projects
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AssignmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		manual = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoRemediationPrs
	{
		
		/// <summary>
		/// If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backlogPrsEnabled")]
		public System.Nullable<System.Boolean> BacklogPrsEnabled { get; set; }
		
		/// <summary>
		/// If true, allows automatic remediation of prioritized backlog issues
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshPrsEnabled")]
		public System.Nullable<System.Boolean> FreshPrsEnabled { get; set; }
		
		/// <summary>
		/// If true, allows using patched remediation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usePatchRemediation")]
		public System.Nullable<System.Boolean> UsePatchRemediation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BrokerSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComposerLock
	{
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_organization
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_organizations_body
	{
		
		/// <summary>
		/// The group ID. The `API_KEY` must have access to this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		/// <summary>
		/// The name of the new organization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The id of an organization to copy settings from.
		///
		///If provided, this organization must be associated with the same group.
		///
		///The items that will be copied are: 
		///Source control integrations (GitHub, GitLab, BitBucket)
		///\+ Container registries integrations (ACR, Docker Hub, ECR, GCR)
		///\+ Container orchestrators integrations (Kubernetes)
		///\+ PaaS and Serverless Integrations (Heroku, AWS Lambda)
		///\+ Notification integrations (Slack, Jira)
		///\+ Policies
		///\+ Ignore settings
		///\+ Language settings
		///\+ Infrastructure as Code settings
		///\+ Snyk Code settings
		///
		///The following will not be copied across:
		///Service accounts
		///\+ Members
		///\+ Projects
		///\+ Notification preferences
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceOrgId")]
		public string SourceOrgId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Deactivate_an_individual_project
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Delete_Tag_From_Group
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Delete_tag_body
	{
		
		/// <summary>
		/// force delete tag that has entities (default is `false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force")]
		public System.Nullable<System.Boolean> Force { get; set; }
		
		/// <summary>
		/// Valid tag key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Valid tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DepGraph
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DepGraphData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="graph")]
		public Graph Graph { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgManager")]
		public PkgManager PkgManager { get; set; }
		
		/// <summary>
		/// Array of package dependencies.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgs")]
		public string[] Pkgs { get; set; }
		
		/// <summary>
		/// Snyk DepGraph library schema version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Graph
	{
		
		/// <summary>
		/// Array of node objects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public string[] Nodes { get; set; }
		
		/// <summary>
		/// Root node id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rootNodeId")]
		public string RootNodeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PkgManager
	{
		
		/// <summary>
		/// Package manager name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of package repositories (i.e. maven-central, or npm) that defaults to the canonical package registry for the given package manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public string[] Repositories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dep_Graph
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dependencies
	{
		
		/// <summary>
		/// A list of issues
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public DependenciesResults[] DependenciesResults { get; set; }
		
		/// <summary>
		/// The number of results returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	public class DependenciesResults
	{
		
		/// <summary>
		/// The copyright notices for the package
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string[] Copyright { get; set; }
		
		/// <summary>
		/// The identifiers of dependencies with issues that are depended upon as a result of this dependency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependenciesWithIssues")]
		public string[] DependenciesWithIssues { get; set; }
		
		/// <summary>
		/// The numbers for those versions that are marked as deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecatedVersions")]
		public string[] DeprecatedVersions { get; set; }
		
		/// <summary>
		/// The timestamp for when the specified package was first published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPublishedDate")]
		public string FirstPublishedDate { get; set; }
		
		/// <summary>
		/// The identifier of the package
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// True if the latest version of the package is marked as deprecated; False otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDeprecated")]
		public System.Nullable<System.Boolean> IsDeprecated { get; set; }
		
		/// <summary>
		/// The number of critical severity issues in this dependency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuesCritical")]
		public System.Nullable<System.Double> IssuesCritical { get; set; }
		
		/// <summary>
		/// The number of high severity issues in this dependency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuesHigh")]
		public System.Nullable<System.Double> IssuesHigh { get; set; }
		
		/// <summary>
		/// The number of low severity issues in this dependency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuesLow")]
		public System.Nullable<System.Double> IssuesLow { get; set; }
		
		/// <summary>
		/// The number of medium severity issues in this dependency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuesMedium")]
		public System.Nullable<System.Double> IssuesMedium { get; set; }
		
		/// <summary>
		/// The latest version available for the specified package
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestVersion")]
		public string LatestVersion { get; set; }
		
		/// <summary>
		/// The timestamp for when the latest version of the specified package was published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestVersionPublishedDate")]
		public string LatestVersionPublishedDate { get; set; }
		
		/// <summary>
		/// The licenses of the dependency
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="licenses")]
		public DependenciesResultsLicenses[] DependenciesResultsLicenses { get; set; }
		
		/// <summary>
		/// The name of the package
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The projects which depend on the dependency
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public DependenciesResultsProjects[] DependenciesResultsProjects { get; set; }
		
		/// <summary>
		/// The package type of the dependency
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The version of the package
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	public class DependenciesResultsLicenses
	{
		
		/// <summary>
		/// The identifier of the license
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of the license
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="license")]
		public string License { get; set; }
		
		/// <summary>
		/// The title of the license
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class DependenciesResultsProjects
	{
		
		/// <summary>
		/// The identifier of the project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dependencies_by_organization
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dependencies_filters
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Dependencies_filtersFilters Filters { get; set; }
	}
	
	public class Dependencies_filtersFilters
	{
		
		/// <summary>
		/// Status of the dependency. Requires reporting entitlement. Options: `deprecated` - Include only deprecated packages; `notDeprecated` - Include all packages that are not marked as deprecated; `any` - Include all packages (default)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="depStatus")]
		public string DepStatus { get; set; }
		
		/// <summary>
		/// The list of dependency IDs to filter the results by (i.e amdefine@1.0.1 or org.javassist:javassist@3.18.1-GA)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public string[] Dependencies { get; set; }
		
		/// <summary>
		/// The type of languages to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The list of license IDs to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenses")]
		public string[] Licenses { get; set; }
		
		/// <summary>
		/// The list of project IDs to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public string[] Projects { get; set; }
		
		/// <summary>
		/// The severities to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string[] Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Entitlements_by_organization
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error_Response
	{
		
		/// <summary>
		/// The error response code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public double Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error_ResponseError Error { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ok")]
		public bool Ok { get; set; }
	}
	
	public class Error_ResponseError
	{
		
		/// <summary>
		/// A list of additional reasons why the error occurred
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerErrors")]
		public string[] InnerErrors { get; set; }
		
		/// <summary>
		/// A descriptive message of the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Function
	{
		
		[System.Runtime.Serialization.DataMember(Name="functionId")]
		public FunctionId FunctionId { get; set; }
		
		/// <summary>
		/// Versions this function relates to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string[] Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FunctionId
	{
		
		/// <summary>
		/// Class name (Java only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="className?")]
		public string ClassName_ { get; set; }
		
		/// <summary>
		/// Path to file (Javascript only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePath?")]
		public string FilePath_ { get; set; }
		
		/// <summary>
		/// Function name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functionName")]
		public string FunctionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoPkgLock
	{
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Gradle
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GradleFile
	{
		
		/// <summary>
		/// The contents of the file, encoded according to the `encoding` field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Gradle_request_payload
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public System.Nullable<Gradle_request_payloadEncoding> Encoding { get; set; }
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Gradle_request_payloadFiles Files { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Gradle_request_payloadEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		plain = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		base64 = 1,
	}
	
	public class Gradle_request_payloadFiles
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public GradleFile Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GraphDependency
	{
		
		/// <summary>
		/// Node id unique across the graph.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public string NodeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Group_level_audit_logs
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Group_settings
	{
		
		/// <summary>
		/// Can only be updated if `API_KEY` has edit access to request access settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAccess")]
		public Group_settingsRequestAccess RequestAccess { get; set; }
		
		/// <summary>
		/// The new session length for the group in minutes. This must be an integer between 1 and 43200 (30 days). Setting this value to null will result in this group inheriting from the global default of 30 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionLength")]
		public System.Nullable<System.Double> SessionLength { get; set; }
	}
	
	public class Group_settingsRequestAccess
	{
		
		/// <summary>
		/// Choose whether a user may request access to Snyk orgs in this group that they are not a member of.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Groups_Audit_logs_filters
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Groups_Audit_logs_filtersFilters Filters { get; set; }
	}
	
	public class Groups_Audit_logs_filtersFilters
	{
		
		/// <summary>
		/// User email address. Will fetch only audit logs originated from this user's actions. Ignored if the userId filter is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Will return only logs for this specific event. Only one of event and excludeEvent may be specified in a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public System.Nullable<Groups_Audit_logs_filtersFiltersEvent> Event { get; set; }
		
		/// <summary>
		/// Will return logs except logs for this event. Only one of event and excludeEvent may be specified in a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeEvent")]
		public System.Nullable<Groups_Audit_logs_filtersFiltersExcludeEvent> ExcludeEvent { get; set; }
		
		/// <summary>
		/// Will return only logs for this specific project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// User public ID. Will fetch only audit logs originated from this user's actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Groups_Audit_logs_filtersFiltersEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="api.access")]
		api_access = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.cloud_config.settings.edit")]
		group_cloud_config_settings_edit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.create")]
		group_create = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.delete")]
		group_delete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.edit")]
		group_edit = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.feature_flags.edit")]
		group_feature_flags_edit = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.notification_settings.edit")]
		group_notification_settings_edit = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.org.add")]
		group_org_add = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.org.remove")]
		group_org_remove = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.policy.create")]
		group_policy_create = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.policy.delete")]
		group_policy_delete = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.policy.edit")]
		group_policy_edit = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.request_access_settings.edit")]
		group_request_access_settings_edit = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.role.create")]
		group_role_create = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.role.edit")]
		group_role_edit = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.service_account.create")]
		group_service_account_create = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.service_account.delete")]
		group_service_account_delete = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.service_account.edit")]
		group_service_account_edit = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.settings.edit")]
		group_settings_edit = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.settings.feature_flag.edit")]
		group_settings_feature_flag_edit = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.auth0_connection.create")]
		group_sso_auth0_connection_create = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.auth0_connection.edit")]
		group_sso_auth0_connection_edit = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.add")]
		group_sso_add = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.create")]
		group_sso_create = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.delete")]
		group_sso_delete = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.edit")]
		group_sso_edit = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.membership.sync")]
		group_sso_membership_sync = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.remove")]
		group_sso_remove = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.tag.create")]
		group_tag_create = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.tag.delete")]
		group_tag_delete = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.add")]
		group_user_add = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.provision.accept")]
		group_user_provision_accept = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.provision.create")]
		group_user_provision_create = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.provision.delete")]
		group_user_provision_delete = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.remove")]
		group_user_remove = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.role.edit")]
		group_user_role_edit = 35,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Groups_Audit_logs_filtersFiltersExcludeEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="api.access")]
		api_access = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.cloud_config.settings.edit")]
		group_cloud_config_settings_edit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.create")]
		group_create = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.delete")]
		group_delete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.edit")]
		group_edit = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.feature_flags.edit")]
		group_feature_flags_edit = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.notification_settings.edit")]
		group_notification_settings_edit = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.org.add")]
		group_org_add = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.org.remove")]
		group_org_remove = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.policy.create")]
		group_policy_create = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.policy.delete")]
		group_policy_delete = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.policy.edit")]
		group_policy_edit = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.request_access_settings.edit")]
		group_request_access_settings_edit = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.role.create")]
		group_role_create = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.role.edit")]
		group_role_edit = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.service_account.create")]
		group_service_account_create = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.service_account.delete")]
		group_service_account_delete = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.service_account.edit")]
		group_service_account_edit = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.settings.edit")]
		group_settings_edit = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.settings.feature_flag.edit")]
		group_settings_feature_flag_edit = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.auth0_connection.create")]
		group_sso_auth0_connection_create = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.auth0_connection.edit")]
		group_sso_auth0_connection_edit = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.add")]
		group_sso_add = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.create")]
		group_sso_create = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.delete")]
		group_sso_delete = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.edit")]
		group_sso_edit = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.membership.sync")]
		group_sso_membership_sync = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.remove")]
		group_sso_remove = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.tag.create")]
		group_tag_create = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.tag.delete")]
		group_tag_delete = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.add")]
		group_user_add = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.provision.accept")]
		group_user_provision_accept = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.provision.create")]
		group_user_provision_create = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.provision.delete")]
		group_user_provision_delete = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.remove")]
		group_user_remove = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.role.edit")]
		group_user_role_edit = 35,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ignore
	{
		
		/// <summary>
		/// The path that should be ignored. Wildcards can be specified with a `*`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ignorePath")]
		public IgnoreIgnorePath IgnorePath { get; set; }
	}
	
	public class IgnoreIgnorePath
	{
		
		/// <summary>
		/// The timestamp that the issue was ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		/// <summary>
		/// Only ignore the issue if no upgrade or patch is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disregardIfFixable")]
		public System.Nullable<System.Boolean> DisregardIfFixable { get; set; }
		
		/// <summary>
		/// The timestamp that the issue will no longer be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public string Expires { get; set; }
		
		/// <summary>
		/// The person who ignored the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoredBy")]
		public IgnoreIgnorePathIgnoredBy IgnoredBy { get; set; }
		
		/// <summary>
		/// The reason that the issue was ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The classification of the ignore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonType")]
		public System.Nullable<IgnoreIgnorePathReasonType> ReasonType { get; set; }
	}
	
	public class IgnoreIgnorePathIgnoredBy
	{
		
		/// <summary>
		/// The email of the person who ignored the issue.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The user ID of the person who ignored the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the person who ignored the issue.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum IgnoreIgnorePathReasonType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-vulnerable")]
		notMinusvulnerable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wont-fix")]
		wontMinusfix = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="temporary-ignore")]
		temporaryMinusignore = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ignore_rule
	{
		
		/// <summary>
		/// Only ignore the issue if no upgrade or patch is available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disregardIfFixable")]
		public bool DisregardIfFixable { get; set; }
		
		/// <summary>
		/// The timestamp that the issue will no longer be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public string Expires { get; set; }
		
		/// <summary>
		/// The path to ignore (default is `*` which represents all paths).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignorePath")]
		public string IgnorePath { get; set; }
		
		/// <summary>
		/// The reason that the issue was ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The classification of the ignore.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reasonType")]
		public Ignore_ruleReasonType ReasonType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Ignore_ruleReasonType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-vulnerable")]
		notMinusvulnerable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wont-fix")]
		wontMinusfix = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="temporary-ignore")]
		temporaryMinusignore = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ignored_issues
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Import
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Import_job
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Individual_project
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Integration
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntegrationCredentials
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum IntegrationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		acr = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artifactory-cr")]
		artifactoryMinuscr = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="azure-repos")]
		azureMinusrepos = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bitbucket-cloud")]
		bitbucketMinuscloud = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bitbucket-server")]
		bitbucketMinusserver = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digitalocean-cr")]
		digitaloceanMinuscr = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="docker-hub")]
		dockerMinushub = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ecr = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gcr = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		github = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="github-cr")]
		githubMinuscr = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="github-enterprise")]
		githubMinusenterprise = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gitlab = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gitlab-cr")]
		gitlabMinuscr = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="google-artifact-cr")]
		googleMinusartifactMinuscr = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="harbor-cr")]
		harborMinuscr = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nexus-cr")]
		nexusMinuscr = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quay-cr")]
		quayMinuscr = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Integration_authentication
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Integration_broker_token_provisioning
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Integration_broker_token_switching
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Integration_by_type
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Integration_cloning
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Integration_settings
	{
		
		/// <summary>
		/// Defines if the functionality is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeEnabled")]
		public System.Nullable<System.Boolean> AutoDepUpgradeEnabled { get; set; }
		
		/// <summary>
		/// A list of strings defining what dependencies should be ignored
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeIgnoredDependencies")]
		public string[] AutoDepUpgradeIgnoredDependencies { get; set; }
		
		/// <summary>
		/// A limit on how many automatic dependency upgrade PRs can be opened simultaneously
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeLimit")]
		public System.Nullable<System.Double> AutoDepUpgradeLimit { get; set; }
		
		/// <summary>
		/// The age (in days) that an automatic dependency check is valid for
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeMinAge")]
		public System.Nullable<System.Double> AutoDepUpgradeMinAge { get; set; }
		
		/// <summary>
		/// Defines automatic remediation policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRemediationPrs")]
		public Integration_settingsAutoRemediationPrs AutoRemediationPrs { get; set; }
		
		/// <summary>
		/// If true, will automatically detect and scan Dockerfiles in your Git repositories, surface base image vulnerabilities and recommend possible fixes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockerfileSCMEnabled")]
		public System.Nullable<System.Boolean> DockerfileSCMEnabled { get; set; }
		
		/// <summary>
		/// Defines manual remediation policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualRemediationPrs")]
		public Integration_settingsManualRemediationPrs ManualRemediationPrs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestAssignment")]
		public PullRequestAssignment PullRequestAssignment { get; set; }
		
		/// <summary>
		/// If an opened PR should fail to be validated if any vulnerable dependencies have been detected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestFailOnAnyVulns")]
		public System.Nullable<System.Boolean> PullRequestFailOnAnyVulns { get; set; }
		
		/// <summary>
		/// If an opened PR only should fail its validation if any dependencies are marked as being of high severity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestFailOnlyForHighSeverity")]
		public System.Nullable<System.Boolean> PullRequestFailOnlyForHighSeverity { get; set; }
		
		/// <summary>
		/// If opened PRs should be tested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestTestEnabled")]
		public System.Nullable<System.Boolean> PullRequestTestEnabled { get; set; }
	}
	
	public class Integration_settingsAutoRemediationPrs
	{
		
		/// <summary>
		/// If true, allows automatic remediation of prioritized backlog issues
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backlogPrsEnabled")]
		public System.Nullable<System.Boolean> BacklogPrsEnabled { get; set; }
		
		/// <summary>
		/// If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshPrsEnabled")]
		public System.Nullable<System.Boolean> FreshPrsEnabled { get; set; }
		
		/// <summary>
		/// If true, allows using patched remediation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usePatchRemediation")]
		public System.Nullable<System.Boolean> UsePatchRemediation { get; set; }
	}
	
	public class Integration_settingsManualRemediationPrs
	{
		
		/// <summary>
		/// If true, allows using patched remediation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usePatchRemediation")]
		public System.Nullable<System.Boolean> UsePatchRemediation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PullRequestAssignment
	{
		
		/// <summary>
		/// an array of usernames that have contributed to the organization's project(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignees")]
		public string[] Assignees { get; set; }
		
		/// <summary>
		/// if the organization's project(s) will assign Snyk pull requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AssignmentType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Integrations
	{
		
		/// <summary>
		/// The name of an integration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Alphanumeric UUID including - with a limit of 36 characters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Integrations_body
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Issue_Counts
	{
		
		/// <summary>
		/// A list of issue counts by day
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Issue_CountsResults[] Issue_CountsResults { get; set; }
	}
	
	public class Issue_CountsResults
	{
		
		/// <summary>
		/// The number of issues
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public double Count { get; set; }
		
		/// <summary>
		/// The date in the format `YYYY-MM-DD`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="day")]
		public string Day { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fixable")]
		public Issue_CountsResultsFixable Fixable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public Issue_CountsResultsSeverity Severity { get; set; }
	}
	
	public class Issue_CountsResultsFixable
	{
		
		/// <summary>
		/// The number of non-fixable issues
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="false")]
		public System.Nullable<System.Double> False { get; set; }
		
		/// <summary>
		/// The number of fixable issues
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="true")]
		public System.Nullable<System.Double> True { get; set; }
	}
	
	public class Issue_CountsResultsSeverity
	{
		
		/// <summary>
		/// The number of critical severity issues
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public System.Nullable<System.Double> Critical { get; set; }
		
		/// <summary>
		/// The number of high severity issues
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Double> High { get; set; }
		
		/// <summary>
		/// The number of low severity issues
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Double> Low { get; set; }
		
		/// <summary>
		/// The number of medium severity issues
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public System.Nullable<System.Double> Medium { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Issue_Counts_Filters
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Issue_Counts_FiltersFilters Filters { get; set; }
	}
	
	public class Issue_Counts_FiltersFilters
	{
		
		/// <summary>
		/// If set to `true`, only include issues which are fixable, if set to `false`, only include issues which are not fixable. An issue is fixable if it is either upgradable, patchable or pinnable. Also see isUpgradable, isPatchable and isPinnable filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixable")]
		public System.Nullable<System.Boolean> Fixable { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignored")]
		public System.Nullable<System.Boolean> Ignored { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are patchable, if set to `false`, only include issues which are not patchable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPatchable")]
		public System.Nullable<System.Boolean> IsPatchable { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are pinnable, if set to `false`, only include issues which are not pinnable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPinnable")]
		public System.Nullable<System.Boolean> IsPinnable { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are upgradable, if set to `false`, only include issues which are not upgradable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUpgradable")]
		public System.Nullable<System.Boolean> IsUpgradable { get; set; }
		
		/// <summary>
		/// The type of languages to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The list of org IDs to filter the results by
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgs")]
		public string[] Orgs { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patched")]
		public System.Nullable<System.Boolean> Patched { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priorityScore")]
		public PriorityScore PriorityScore { get; set; }
		
		/// <summary>
		/// The list of project IDs to filter issues by, max projects allowed is 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public string[] Projects { get; set; }
		
		/// <summary>
		/// The severity levels of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string[] Severity { get; set; }
		
		/// <summary>
		/// The type of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PriorityScore
	{
		
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Double> Max { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Double> Min { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Issue_counts_over_time
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Issue_paths
	{
		
		/// <summary>
		/// Onward links from this record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Issue_pathsLinks Links { get; set; }
		
		/// <summary>
		/// A list of the dependency paths that introduce the issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public string[] Paths { get; set; }
		
		/// <summary>
		/// The identifier of the snapshot for which the paths have been found
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotId")]
		public string SnapshotId { get; set; }
		
		/// <summary>
		/// The total number of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	public class Issue_pathsLinks
	{
		
		/// <summary>
		/// The URL of the last page of paths for the issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last")]
		public string Last { get; set; }
		
		/// <summary>
		/// The URL of the next page of paths for the issue, if not on the last page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The URL of the previous page of paths for the issue, if not on the first page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Issues
	{
		
		/// <summary>
		/// A list of issues
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public IssuesResults[] IssuesResults { get; set; }
		
		/// <summary>
		/// The total number of results found
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public double Total { get; set; }
	}
	
	public class IssuesResults
	{
		
		/// <summary>
		/// The date that the issue was fixed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedDate")]
		public string FixedDate { get; set; }
		
		/// <summary>
		/// The date that the issue was introduced into the project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="introducedDate")]
		public string IntroducedDate { get; set; }
		
		/// <summary>
		/// Whether the issue has been fixed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isFixed")]
		public bool IsFixed { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issue")]
		public IssuesResultsIssue Issue { get; set; }
		
		/// <summary>
		/// The date that the issue was patched
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patchedDate")]
		public string PatchedDate { get; set; }
	}
	
	public class IssuesResultsIssue
	{
		
		/// <summary>
		/// The CVSS v3 string that signifies how the CVSS score was calculated (not applicable to licenses)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CVSSv3 { get; set; }
		
		/// <summary>
		/// The list of people responsible for first uncovering or reporting the issue (not applicable to licenses)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credit")]
		public string[] Credit { get; set; }
		
		/// <summary>
		/// The CVSS score that results from running the CVSSv3 string (not applicable to licenses)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssScore")]
		public System.Nullable<System.Double> CvssScore { get; set; }
		
		/// <summary>
		/// The date that the vulnerability was first disclosed (not applicable to licenses)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disclosureTime")]
		public string DisclosureTime { get; set; }
		
		/// <summary>
		/// The exploit maturity of the issue
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exploitMaturity")]
		public string ExploitMaturity { get; set; }
		
		/// <summary>
		/// The identifier of the issue
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// External identifiers assigned to the issue (not applicable to licenses)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifiers")]
		public IssuesResultsIssueIdentifiers Identifiers { get; set; }
		
		/// <summary>
		/// The list of ignore rules that were applied to the issue (only present if issue was ignored and no `groupBy` in the API request)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignored")]
		public string[] Ignored { get; set; }
		
		/// <summary>
		/// Whether the issue has been ignored (only present if there is no `groupBy` in the API request)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isIgnored")]
		public System.Nullable<System.Boolean> IsIgnored { get; set; }
		
		/// <summary>
		/// Whether the issue can be patched
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPatchable")]
		public System.Nullable<System.Boolean> IsPatchable { get; set; }
		
		/// <summary>
		/// Whether the issue has been patched (not applicable to licenses and only present if there is no `groupBy` in the API request)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPatched")]
		public System.Nullable<System.Boolean> IsPatched { get; set; }
		
		/// <summary>
		/// Whether the issue can be pinned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPinnable")]
		public System.Nullable<System.Boolean> IsPinnable { get; set; }
		
		/// <summary>
		/// Whether the issue can be fixed by upgrading to a later version of the dependency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUpgradable")]
		public System.Nullable<System.Boolean> IsUpgradable { get; set; }
		
		/// <summary>
		/// The link to the Jira issue attached to the vulnerability
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jiraIssueUrl")]
		public string JiraIssueUrl { get; set; }
		
		/// <summary>
		/// The language of the issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The original severity status of the issue, as retrieved from Snyk Vulnerability database, before policies are applied
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originalSeverity")]
		public string OriginalSeverity { get; set; }
		
		/// <summary>
		/// The name of the package that the issue relates to
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package { get; set; }
		
		/// <summary>
		/// The package manager of the issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageManager")]
		public string PackageManager { get; set; }
		
		/// <summary>
		/// A list of patches available for the given issue (not applicable to licenses)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patches")]
		public string[] Patches { get; set; }
		
		/// <summary>
		/// The priority score ranging between 0-1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priorityScore")]
		public System.Nullable<System.Double> PriorityScore { get; set; }
		
		/// <summary>
		/// The date that the vulnerability was first published by Snyk (not applicable to licenses)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicationTime")]
		public string PublicationTime { get; set; }
		
		/// <summary>
		/// The ranges that are vulnerable and unaffected by the issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="semver")]
		public IssuesResultsIssueSemver Semver { get; set; }
		
		/// <summary>
		/// The severity status of the issue, after policies are applied
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		/// <summary>
		/// The issue title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The issue type, can be "vuln", "license"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// A list of all severities in issue per projects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueSeveritiesList")]
		public string[] UniqueSeveritiesList { get; set; }
		
		/// <summary>
		/// URL to a page containing information about the issue
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The version of the package that the issue relates to
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	public class IssuesResultsIssueIdentifiers
	{
		
		/// <summary>
		/// Common Vulnerability Enumeration identifiers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] CVE { get; set; }
		
		/// <summary>
		/// Common Weakness Enumeration identifiers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] CWE { get; set; }
		
		/// <summary>
		/// Identifiers assigned by the Open Source Vulnerability Database (OSVDB)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] OSVDB { get; set; }
	}
	
	public class IssuesResultsIssueSemver
	{
		
		/// <summary>
		/// The ranges that are unaffected by the issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unaffected")]
		public string Unaffected { get; set; }
		
		/// <summary>
		/// The ranges that are vulnerable to the issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vulnerable")]
		public string[] Vulnerable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Issues_Filters
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Issues_FiltersFilters Filters { get; set; }
	}
	
	public class Issues_FiltersFilters
	{
		
		/// <summary>
		/// The exploit maturity levels of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exploitMaturity")]
		public string[] ExploitMaturity { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are fixable, if set to `false`, only include issues which are not fixable. An issue is fixable if it is either upgradable, patchable or pinnable. Also see isUpgradable, isPatchable and isPinnable filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixable")]
		public System.Nullable<System.Boolean> Fixable { get; set; }
		
		/// <summary>
		/// Search term to filter issue name by, or an exact CVE or CWE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignored")]
		public System.Nullable<System.Boolean> Ignored { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are fixed, if set to `false`, only include issues which are not fixed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFixed")]
		public System.Nullable<System.Boolean> IsFixed { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are patchable, if set to `false`, only include issues which are not patchable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPatchable")]
		public System.Nullable<System.Boolean> IsPatchable { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are pinnable, if set to `false`, only include issues which are not pinnable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPinnable")]
		public System.Nullable<System.Boolean> IsPinnable { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are upgradable, if set to `false`, only include issues which are not upgradable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUpgradable")]
		public System.Nullable<System.Boolean> IsUpgradable { get; set; }
		
		/// <summary>
		/// The list of issue IDs to filter issues by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public string[] Issues { get; set; }
		
		/// <summary>
		/// The type of languages to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The list of org IDs to filter the results by
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgs")]
		public string[] Orgs { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patched")]
		public System.Nullable<System.Boolean> Patched { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priorityScore")]
		public PriorityScore PriorityScore { get; set; }
		
		/// <summary>
		/// The list of project IDs to filter issues by, max projects allowed is 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public string[] Projects { get; set; }
		
		/// <summary>
		/// The severity levels of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string[] Severity { get; set; }
		
		/// <summary>
		/// The type of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Jira_issue
	{
		
		/// <summary>
		/// The details about the jira issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jiraIssue")]
		public Jira_issueJiraIssue JiraIssue { get; set; }
	}
	
	public class Jira_issueJiraIssue
	{
		
		/// <summary>
		/// The id of the issue in Jira.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The key of the issue in Jira.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Jira_issue_request
	{
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public Jira_issue_requestFields Fields { get; set; }
	}
	
	public class Jira_issue_requestFields
	{
		
		/// <summary>
		/// See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-post for details of what to send as fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuetype")]
		public string Issuetype { get; set; }
		
		/// <summary>
		/// See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-post for details of what to send as fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		/// <summary>
		/// See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-post for details of what to send as fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Latest_Issues
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Latest_issue_counts
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Latest_project_counts
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Licenses
	{
		
		/// <summary>
		/// A list of licenses
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public LicensesResults[] LicensesResults { get; set; }
		
		/// <summary>
		/// The number of results returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	public class LicensesResults
	{
		
		/// <summary>
		/// The dependencies of projects in the organization which have the license
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public LicensesResultsDependencies[] LicensesResultsDependencies { get; set; }
		
		/// <summary>
		/// The identifier of the license
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Custom instructions assigned to this license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instructions")]
		public string Instructions { get; set; }
		
		/// <summary>
		/// The projects which contain the license
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public LicensesResultsProjects[] LicensesResultsProjects { get; set; }
		
		/// <summary>
		/// The severity assigned to this license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<LicensesResultsSeverity> Severity { get; set; }
	}
	
	public class LicensesResultsDependencies
	{
		
		/// <summary>
		/// The identifier of the package
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the package
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The package manager of the dependency
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="packageManager")]
		public string PackageManager { get; set; }
		
		/// <summary>
		/// The version of the package
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	public class LicensesResultsProjects
	{
		
		/// <summary>
		/// The identifier of the project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LicensesResultsSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		high = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		medium = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		low = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Licenses_by_organization
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Licenses_filters
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Licenses_filtersFilters Filters { get; set; }
	}
	
	public class Licenses_filtersFilters
	{
		
		/// <summary>
		/// The list of dependency IDs to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public string[] Dependencies { get; set; }
		
		/// <summary>
		/// The type of languages to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The list of license IDs to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenses")]
		public string[] Licenses { get; set; }
		
		/// <summary>
		/// The list of project IDs to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public string[] Projects { get; set; }
		
		/// <summary>
		/// The severities to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string[] Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class List_all_organizations_in_a_group
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class List_all_projects
	{
		
		[System.Runtime.Serialization.DataMember(Name="org")]
		public List_all_projectsOrg Org { get; set; }
		
		/// <summary>
		/// A list of org's projects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public Project_without_remediation[] Projects { get; set; }
	}
	
	public class List_all_projectsOrg
	{
		
		/// <summary>
		/// The identifier of the org
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_without_remediation
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Project_attributes Attributes { get; set; }
		
		/// <summary>
		/// The monitored branch (if available)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; }
		
		/// <summary>
		/// URL with project overview
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="browseUrl")]
		public string BrowseUrl { get; set; }
		
		/// <summary>
		/// The date that the project was created on
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		/// <summary>
		/// The project identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// For docker projects shows the base image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageBaseImage")]
		public string ImageBaseImage { get; set; }
		
		/// <summary>
		/// For Kubernetes projects shows the origin cluster name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageCluster")]
		public string ImageCluster { get; set; }
		
		/// <summary>
		/// For docker projects shows the ID of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public string ImageId { get; set; }
		
		/// <summary>
		/// For docker projects shows the platform of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imagePlatform")]
		public string ImagePlatform { get; set; }
		
		/// <summary>
		/// For docker projects shows the tag of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageTag")]
		public string ImageTag { get; set; }
		
		/// <summary>
		/// The user who imported the project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importingUser")]
		public Project_without_remediationImportingUser ImportingUser { get; set; }
		
		/// <summary>
		/// Describes if a project is currently monitored or it is de-activated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMonitored")]
		public System.Nullable<System.Boolean> IsMonitored { get; set; }
		
		/// <summary>
		/// Number of known vulnerabilities in the project, not including ignored issues
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issueCountsBySeverity")]
		public Project_without_remediationIssueCountsBySeverity IssueCountsBySeverity { get; set; }
		
		/// <summary>
		/// The date on which the most recent test was conducted for this project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastTestedDate")]
		public string LastTestedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The origin the project was added from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// The user who owns the project, null if not set
		///
		///{
		///    "id": "e713cf94-bb02-4ea0-89d9-613cce0caed2",
		///    "name": "example-user@snyk.io",
		///    "username": "exampleUser",
		///    "email": "example-user@snyk.io"
		///}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// Whether the project is read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// The project remote repository url. Only set for projects imported via the Snyk CLI tool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteRepoUrl")]
		public string RemoteRepoUrl { get; set; }
		
		/// <summary>
		/// List of applied tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// The identifier for which revision of the resource is scanned by Snyk. For example this may be a branch for SCM project, or a tag for a container image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetReference")]
		public string TargetReference { get; set; }
		
		/// <summary>
		/// The frequency of automated Snyk re-test. Can be 'daily', 'weekly or 'never'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testFrequency")]
		public string TestFrequency { get; set; }
		
		/// <summary>
		/// Number of dependencies of the project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalDependencies")]
		public System.Nullable<System.Double> TotalDependencies { get; set; }
		
		/// <summary>
		/// The package manager of the project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_attributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="criticality")]
		public string[] Criticality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string[] Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycle")]
		public string[] Lifecycle { get; set; }
	}
	
	public class Project_without_remediationImportingUser
	{
		
		/// <summary>
		/// The email of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The username of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class Project_without_remediationIssueCountsBySeverity
	{
		
		/// <summary>
		/// Number of critical severity vulnerabilities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public System.Nullable<System.Double> Critical { get; set; }
		
		/// <summary>
		/// Number of high severity vulnerabilities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Double> High { get; set; }
		
		/// <summary>
		/// Number of low severity vulnerabilities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Double> Low { get; set; }
		
		/// <summary>
		/// Number of medium severity vulnerabilities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public System.Nullable<System.Double> Medium { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class List_all_roles_in_a_group
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class List_all_tags_in_a_group
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class List_members_in_a_group
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Manage_organization
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Manage_roles_in_organization
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Maven
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MavenAdditionalFile
	{
		
		/// <summary>
		/// The contents of the file, encoded according to the `encoding` field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MavenFile
	{
		
		/// <summary>
		/// The contents of the file, encoded according to the `encoding` field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Maven_request_payload
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; }
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Maven_request_payloadFiles Files { get; set; }
	}
	
	public class Maven_request_payloadFiles
	{
		
		/// <summary>
		/// additional manifest files (if needed), encoded according the the "encoding" field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional")]
		public string[] Additional { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public MavenFile Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Members_in_an_organization_of_a_group
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Members_in_organization
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitorDepGraphData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="graph")]
		public MonitorGraph Graph { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgManager")]
		public MonitorPkgManager PkgManager { get; set; }
		
		/// <summary>
		/// Array of package dependencies.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgs")]
		public string[] Pkgs { get; set; }
		
		/// <summary>
		/// Snyk DepGraph library schema version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitorGraph
	{
		
		/// <summary>
		/// Array of node objects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public string[] Nodes { get; set; }
		
		/// <summary>
		/// Root node id. Note the root node name is used as your project name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rootNodeId")]
		public string RootNodeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitorPkgManager
	{
		
		/// <summary>
		/// Package manager name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of package repositories (i.e. maven-central, or npm) that defaults to the canonical package registry for the given package manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public string[] Repositories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitorGraphDependency
	{
		
		/// <summary>
		/// Node id unique across the graph.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public string NodeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitorMetaData
	{
		
		/// <summary>
		/// Required for a NuGet or Paket DepGraph only. Specify the target framework in your project file using Target Framework Monikers (TFMs). For example, netstandard1.0, netcoreapp1.0 or net452. Test each framework separately if you have multiple defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetFramework")]
		public string TargetFramework { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitorNode
	{
		
		/// <summary>
		/// An array of package ids this package depends on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deps")]
		public string[] Deps { get; set; }
		
		/// <summary>
		/// Node id unique across the graph.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public string NodeId { get; set; }
		
		/// <summary>
		/// Package id reference should match id in pkg array and take the format name@version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgId")]
		public string PkgId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitorPackage
	{
		
		/// <summary>
		/// Unique package identifier, should take the format name@version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="info")]
		public MonitorPackageInfo Info { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitorPackageInfo
	{
		
		/// <summary>
		/// Package name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Package version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitorRepository
	{
		
		/// <summary>
		/// deb, apk and rpm package managers should use an alias to indicate the target Operating System, for example 'debian:10'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Move_project
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class My_User_Details
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class New_issues_notification_setting_request
	{
		
		/// <summary>
		/// Whether notifications should be sent
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueSeverity")]
		public New_issues_notification_setting_requestIssueSeverity IssueSeverity { get; set; }
		
		/// <summary>
		/// Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueType")]
		public New_issues_notification_setting_requestIssueType IssueType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum New_issues_notification_setting_requestIssueSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		high = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum New_issues_notification_setting_requestIssueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vuln = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		license = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Node
	{
		
		/// <summary>
		/// An array of package ids this package depends on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deps")]
		public string[] Deps { get; set; }
		
		/// <summary>
		/// Node id unique across the graph.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public string NodeId { get; set; }
		
		/// <summary>
		/// Package id reference should match id in pkg array and take the format name@version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgId")]
		public string PkgId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Notification_setting_response : New_issues_notification_setting_request
	{
		
		/// <summary>
		/// Whether the setting was found on the requested context directly or inherited from a parent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inherited")]
		public System.Nullable<System.Boolean> Inherited { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Notification_settings
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Notification_settings_request
	{
		
		[System.Runtime.Serialization.DataMember(Name="new-issues-remediations")]
		public New_issues_notification_setting_request New_issues_remediations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project-imported")]
		public Simple_notification_setting_request Project_imported { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="test-limit")]
		public Simple_notification_setting_request Test_limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekly-report")]
		public Simple_notification_setting_request Weekly_report { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Simple_notification_setting_request
	{
		
		/// <summary>
		/// Whether notifications should be sent
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Notification_settings_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="new-issues-remediations")]
		public Notification_setting_response New_issues_remediations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project-imported")]
		public Simple_notification_setting_response Project_imported { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="test-limit")]
		public Simple_notification_setting_response Test_limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekly-report")]
		public Simple_notification_setting_response Weekly_report { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Org_Audit_logs_filters
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Org_Audit_logs_filtersFilters Filters { get; set; }
	}
	
	public class Org_Audit_logs_filtersFilters
	{
		
		/// <summary>
		/// User email address. Will fetch only audit logs originated from this user's actions. Ignored if the userId filter is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Will return only logs for this specific event. Only one of event and excludeEvent may be specified in a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public System.Nullable<Org_Audit_logs_filtersFiltersEvent> Event { get; set; }
		
		/// <summary>
		/// Will return logs except logs for this event. Only one of event and excludeEvent may be specified in a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeEvent")]
		public System.Nullable<Org_Audit_logs_filtersFiltersExcludeEvent> ExcludeEvent { get; set; }
		
		/// <summary>
		/// Will return only logs for this specific project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// User public ID. Will fetch only audit logs originated from this user's actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Org_Audit_logs_filtersFiltersEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="api.access")]
		api_access = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.cloud_config.settings.edit")]
		org_cloud_config_settings_edit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.create")]
		org_create = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.delete")]
		org_delete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.edit")]
		org_edit = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.ignore_policy.edit")]
		org_ignore_policy_edit = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.create")]
		org_integration_create = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.delete")]
		org_integration_delete = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.edit")]
		org_integration_edit = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.settings.edit")]
		org_integration_settings_edit = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.language_settings.edit")]
		org_language_settings_edit = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.license_rule.create")]
		org_license_rule_create = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.license_rule.delete")]
		org_license_rule_delete = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.license_rule.edit")]
		org_license_rule_edit = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.notification_settings.edit")]
		org_notification_settings_edit = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.org_source.create")]
		org_org_source_create = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.org_source.delete")]
		org_org_source_delete = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.org_source.edit")]
		org_org_source_edit = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.policy.edit")]
		org_policy_edit = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.add")]
		org_project_add = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.attributes.edit")]
		org_project_attributes_edit = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.delete")]
		org_project_delete = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.edit")]
		org_project_edit = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.fix_pr.auto_open")]
		org_project_fix_pr_auto_open = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.fix_pr.manual_open")]
		org_project_fix_pr_manual_open = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.ignore.create")]
		org_project_ignore_create = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.ignore.delete")]
		org_project_ignore_delete = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.ignore.edit")]
		org_project_ignore_edit = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.monitor")]
		org_project_monitor = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.pr_check.edit")]
		org_project_pr_check_edit = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.remove")]
		org_project_remove = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.settings.delete")]
		org_project_settings_delete = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.settings.edit")]
		org_project_settings_edit = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.stop_monitor")]
		org_project_stop_monitor = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.tag.add")]
		org_project_tag_add = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.tag.remove")]
		org_project_tag_remove = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.test")]
		org_project_test = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.request_access_settings.edit")]
		org_request_access_settings_edit = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.sast_settings.edit")]
		org_sast_settings_edit = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.create")]
		org_service_account_create = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.delete")]
		org_service_account_delete = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.edit")]
		org_service_account_edit = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.membership.upsert")]
		org_service_account_membership_upsert = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.settings.feature_flag.edit")]
		org_settings_feature_flag_edit = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.target.create")]
		org_target_create = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.target.delete")]
		org_target_delete = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.add")]
		org_user_add = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite")]
		org_user_invite = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite.accept")]
		org_user_invite_accept = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite.revoke")]
		org_user_invite_revoke = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite_link.accept")]
		org_user_invite_link_accept = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite_link.create")]
		org_user_invite_link_create = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite_link.revoke")]
		org_user_invite_link_revoke = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.leave")]
		org_user_leave = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.provision.accept")]
		org_user_provision_accept = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.provision.create")]
		org_user_provision_create = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.provision.delete")]
		org_user_provision_delete = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.remove")]
		org_user_remove = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.create")]
		org_user_role_create = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.delete")]
		org_user_role_delete = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.details.edit")]
		org_user_role_details_edit = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.edit")]
		org_user_role_edit = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.permissions.edit")]
		org_user_role_permissions_edit = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.webhook.add")]
		org_webhook_add = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.webhook.delete")]
		org_webhook_delete = 64,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Org_Audit_logs_filtersFiltersExcludeEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="api.access")]
		api_access = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.cloud_config.settings.edit")]
		org_cloud_config_settings_edit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.create")]
		org_create = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.delete")]
		org_delete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.edit")]
		org_edit = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.ignore_policy.edit")]
		org_ignore_policy_edit = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.create")]
		org_integration_create = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.delete")]
		org_integration_delete = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.edit")]
		org_integration_edit = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.settings.edit")]
		org_integration_settings_edit = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.language_settings.edit")]
		org_language_settings_edit = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.license_rule.create")]
		org_license_rule_create = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.license_rule.delete")]
		org_license_rule_delete = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.license_rule.edit")]
		org_license_rule_edit = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.notification_settings.edit")]
		org_notification_settings_edit = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.org_source.create")]
		org_org_source_create = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.org_source.delete")]
		org_org_source_delete = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.org_source.edit")]
		org_org_source_edit = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.policy.edit")]
		org_policy_edit = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.add")]
		org_project_add = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.attributes.edit")]
		org_project_attributes_edit = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.delete")]
		org_project_delete = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.edit")]
		org_project_edit = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.fix_pr.auto_open")]
		org_project_fix_pr_auto_open = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.fix_pr.manual_open")]
		org_project_fix_pr_manual_open = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.ignore.create")]
		org_project_ignore_create = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.ignore.delete")]
		org_project_ignore_delete = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.ignore.edit")]
		org_project_ignore_edit = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.monitor")]
		org_project_monitor = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.pr_check.edit")]
		org_project_pr_check_edit = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.remove")]
		org_project_remove = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.settings.delete")]
		org_project_settings_delete = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.settings.edit")]
		org_project_settings_edit = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.stop_monitor")]
		org_project_stop_monitor = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.tag.add")]
		org_project_tag_add = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.tag.remove")]
		org_project_tag_remove = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.test")]
		org_project_test = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.request_access_settings.edit")]
		org_request_access_settings_edit = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.sast_settings.edit")]
		org_sast_settings_edit = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.create")]
		org_service_account_create = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.delete")]
		org_service_account_delete = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.edit")]
		org_service_account_edit = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.membership.upsert")]
		org_service_account_membership_upsert = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.settings.feature_flag.edit")]
		org_settings_feature_flag_edit = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.target.create")]
		org_target_create = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.target.delete")]
		org_target_delete = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.add")]
		org_user_add = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite")]
		org_user_invite = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite.accept")]
		org_user_invite_accept = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite.revoke")]
		org_user_invite_revoke = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite_link.accept")]
		org_user_invite_link_accept = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite_link.create")]
		org_user_invite_link_create = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite_link.revoke")]
		org_user_invite_link_revoke = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.leave")]
		org_user_leave = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.provision.accept")]
		org_user_provision_accept = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.provision.create")]
		org_user_provision_create = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.provision.delete")]
		org_user_provision_delete = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.remove")]
		org_user_remove = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.create")]
		org_user_role_create = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.delete")]
		org_user_role_delete = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.details.edit")]
		org_user_role_details_edit = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.edit")]
		org_user_role_edit = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.permissions.edit")]
		org_user_role_permissions_edit = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.webhook.add")]
		org_webhook_add = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.webhook.delete")]
		org_webhook_delete = 64,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Org_settings_request
	{
		
		/// <summary>
		/// Can only be updated if `API_KEY` has edit access to request access settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAccess")]
		public Org_settings_requestRequestAccess RequestAccess { get; set; }
	}
	
	public class Org_settings_requestRequestAccess
	{
		
		/// <summary>
		/// Whether requesting access to the organization is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Org_settings_response
	{
		
		/// <summary>
		/// Will only be returned if `API_KEY` has read access to request access settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAccess")]
		public Org_settings_responseRequestAccess RequestAccess { get; set; }
	}
	
	public class Org_settings_responseRequestAccess
	{
		
		/// <summary>
		/// Whether requesting access to the organization is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Organization_level_audit_logs
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Organization_settings
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Organizations_in_a_group
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Package
	{
		
		/// <summary>
		/// Unique package identifier, should take the format name@version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="info")]
		public PackageInfo Info { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PackageInfo
	{
		
		/// <summary>
		/// Package name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Package version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PackageLockJsonFile
	{
		
		/// <summary>
		/// The contents of the file, encoded according to the `encoding` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Patch
	{
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string[] Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modificationTime")]
		public string ModificationTime { get; set; }
		
		/// <summary>
		/// Links to patch files to fix an issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public string[] Urls { get; set; }
		
		/// <summary>
		/// Versions this patch is applicable to, in semver format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ping
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Project_attributes Attributes { get; set; }
		
		/// <summary>
		/// The monitored branch (if available)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; }
		
		/// <summary>
		/// URL with project overview
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="browseUrl")]
		public string BrowseUrl { get; set; }
		
		/// <summary>
		/// The date that the project was created on
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		/// <summary>
		/// The hostname for a CLI project, null if not set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		/// <summary>
		/// The project identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// For docker projects shows the base image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageBaseImage")]
		public string ImageBaseImage { get; set; }
		
		/// <summary>
		/// For Kubernetes projects shows the origin cluster name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageCluster")]
		public string ImageCluster { get; set; }
		
		/// <summary>
		/// For docker projects shows the ID of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public string ImageId { get; set; }
		
		/// <summary>
		/// For docker projects shows the platform of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imagePlatform")]
		public string ImagePlatform { get; set; }
		
		/// <summary>
		/// For docker projects shows the tag of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageTag")]
		public string ImageTag { get; set; }
		
		/// <summary>
		/// The user who imported the project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importingUser")]
		public ProjectImportingUser ImportingUser { get; set; }
		
		/// <summary>
		/// Describes if a project is currently monitored or it is de-activated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMonitored")]
		public System.Nullable<System.Boolean> IsMonitored { get; set; }
		
		/// <summary>
		/// Number of known vulnerabilities in the project, not including ignored issues
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issueCountsBySeverity")]
		public ProjectIssueCountsBySeverity IssueCountsBySeverity { get; set; }
		
		/// <summary>
		/// The date on which the most recent test was conducted for this project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastTestedDate")]
		public string LastTestedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The origin the project was added from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// The user who owns the project, null if not set
		///
		///{
		///    "id": "e713cf94-bb02-4ea0-89d9-613cce0caed2",
		///    "name": "example-user@snyk.io",
		///    "username": "exampleUser",
		///    "email": "example-user@snyk.io"
		///}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// Whether the project is read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// Remediation data (if available)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remediation")]
		public ProjectRemediation Remediation { get; set; }
		
		/// <summary>
		/// The project remote repository url. Only set for projects imported via the Snyk CLI tool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteRepoUrl")]
		public string RemoteRepoUrl { get; set; }
		
		/// <summary>
		/// List of applied tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// The identifier for which revision of the resource is scanned by Snyk. For example this may be a branch for SCM project, or a tag for a container image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetReference")]
		public string TargetReference { get; set; }
		
		/// <summary>
		/// The frequency of automated Snyk re-test. Can be 'daily', 'weekly or 'never'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testFrequency")]
		public string TestFrequency { get; set; }
		
		/// <summary>
		/// Number of dependencies of the project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalDependencies")]
		public System.Nullable<System.Double> TotalDependencies { get; set; }
		
		/// <summary>
		/// The package manager of the project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ProjectImportingUser
	{
		
		/// <summary>
		/// The email of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The username of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class ProjectIssueCountsBySeverity
	{
		
		/// <summary>
		/// Number of critical severity vulnerabilities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public System.Nullable<System.Double> Critical { get; set; }
		
		/// <summary>
		/// Number of high severity vulnerabilities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Double> High { get; set; }
		
		/// <summary>
		/// Number of low severity vulnerabilities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Double> Low { get; set; }
		
		/// <summary>
		/// Number of medium severity vulnerabilities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public System.Nullable<System.Double> Medium { get; set; }
	}
	
	public class ProjectRemediation
	{
		
		/// <summary>
		/// Recommended patches to apply to the project
		///
		///(object)
		///   paths (array) - List of paths to the vulnerable dependency that can be patched
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patch")]
		public string Patch { get; set; }
		
		/// <summary>
		/// Recommended pins to apply to the project (Python only)
		///
		///(object)
		///    + upgradeTo (string, required) - `package@version` to upgrade to
		///    + vulns (array[string], required) - List of vulnerability ids that will be fixed as part of this upgrade
		///    + isTransitive (boolean) - Describes if the dependency to be pinned is a transitive dependency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pin")]
		public string Pin { get; set; }
		
		/// <summary>
		/// Recommended upgrades to apply to the project
		///
		///(object)
		///    + upgradeTo (string, required) - `package@version` to upgrade to
		///    + upgrades (array[string], required) -  List of `package@version` that will be upgraded as part of this upgrade
		///    + vulns (array[string], required) - List of vulnerability ids that will be fixed as part of this upgrade
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgrade")]
		public string Upgrade { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_Attributes
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_Counts
	{
		
		/// <summary>
		/// A list of project counts by day
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Project_CountsResults[] Project_CountsResults { get; set; }
	}
	
	public class Project_CountsResults
	{
		
		/// <summary>
		/// The number of projects
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public double Count { get; set; }
		
		/// <summary>
		/// The date in the format `YYYY-MM-DD`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="day")]
		public string Day { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_Counts_Filters
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Project_Counts_FiltersFilters Filters { get; set; }
	}
	
	public class Project_Counts_FiltersFilters
	{
		
		/// <summary>
		/// The type of languages to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The list of org IDs to filter the results by
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgs")]
		public string[] Orgs { get; set; }
		
		/// <summary>
		/// The list of project IDs to filter the results by, max projects allowed is 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public string[] Projects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_History
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_Issue_Paths
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_Snapshot_Issue_Paths
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_counts_over_time
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_dependency_graph
	{
		
		/// <summary>
		/// The dependency-graph object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="depGraph")]
		public Project_dependency_graphDepGraph DepGraph { get; set; }
	}
	
	public class Project_dependency_graphDepGraph
	{
		
		/// <summary>
		/// A directional graph of the packages in the project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="graph")]
		public Project_dependency_graphDepGraphGraph Graph { get; set; }
		
		/// <summary>
		/// The package manager of the project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgManager")]
		public Project_dependency_graphDepGraphPkgManager PkgManager { get; set; }
		
		/// <summary>
		/// A list of dependencies in the project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgs")]
		public Project_dependency_graphDepGraphPkgs[] Project_dependency_graphDepGraphPkgs { get; set; }
		
		/// <summary>
		/// The scheme version of the depGraph object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
	}
	
	public class Project_dependency_graphDepGraphGraph
	{
		
		/// <summary>
		/// A list of the first-level packages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public Project_dependency_graphDepGraphGraphNodes[] Project_dependency_graphDepGraphGraphNodes { get; set; }
		
		/// <summary>
		/// The internal id of the root node
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rootNodeId")]
		public string RootNodeId { get; set; }
	}
	
	public class Project_dependency_graphDepGraphGraphNodes
	{
		
		/// <summary>
		/// A list of the direct dependencies of the package
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deps")]
		public Project_dependency_graphDepGraphGraphNodesDeps[] Project_dependency_graphDepGraphGraphNodesDeps { get; set; }
		
		/// <summary>
		/// The internal id of the node
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public string NodeId { get; set; }
		
		/// <summary>
		/// The id of the package
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgId")]
		public string PkgId { get; set; }
	}
	
	public class Project_dependency_graphDepGraphGraphNodesDeps
	{
		
		/// <summary>
		/// The id of the node
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public string NodeId { get; set; }
	}
	
	public class Project_dependency_graphDepGraphPkgManager
	{
		
		/// <summary>
		/// The name of the package manager
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public Project_dependency_graphDepGraphPkgManagerRepositories[] Project_dependency_graphDepGraphPkgManagerRepositories { get; set; }
		
		/// <summary>
		/// The version of the package manager
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	public class Project_dependency_graphDepGraphPkgManagerRepositories
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
	}
	
	public class Project_dependency_graphDepGraphPkgs
	{
		
		/// <summary>
		/// The internal id of the package
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="info")]
		public Project_dependency_graphDepGraphPkgsInfo Info { get; set; }
	}
	
	public class Project_dependency_graphDepGraphPkgsInfo
	{
		
		/// <summary>
		/// The name of the package
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The version of the package
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_ignores
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_issues_filters
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Project_issues_filtersFilters Filters { get; set; }
	}
	
	public class Project_issues_filtersFilters
	{
		
		/// <summary>
		/// The exploit maturity levels of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exploitMaturity")]
		public string[] ExploitMaturity { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignored")]
		public System.Nullable<System.Boolean> Ignored { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patched")]
		public System.Nullable<System.Boolean> Patched { get; set; }
		
		/// <summary>
		/// Include issues that have a priority score between `min` and `max`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priorityScore")]
		public Project_issues_filtersFiltersPriorityScore PriorityScore { get; set; }
		
		/// <summary>
		/// The severity levels of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severities")]
		public string[] Severities { get; set; }
		
		/// <summary>
		/// The type of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	public class Project_issues_filtersFiltersPriorityScore
	{
		
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Double> Max { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Double> Min { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_jira_issues
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_move
	{
		
		/// <summary>
		/// The ID of the organization that the project should be moved to. The API_KEY must have group admin permissions. If the project is moved to a new group, a personal level API key is needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetOrgId")]
		public string TargetOrgId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_settings
	{
		
		/// <summary>
		/// If set to `true`, Snyk will raise dependency upgrade PRs automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeEnabled")]
		public System.Nullable<System.Boolean> AutoDepUpgradeEnabled { get; set; }
		
		/// <summary>
		/// An array of comma-separated strings with names of dependencies you wish Snyk to ignore to upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeIgnoredDependencies")]
		public string[] AutoDepUpgradeIgnoredDependencies { get; set; }
		
		/// <summary>
		/// The limit on auto dependency upgrade PRs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeLimit")]
		public System.Nullable<System.Double> AutoDepUpgradeLimit { get; set; }
		
		/// <summary>
		/// The age (in days) that an automatic dependency check is valid for
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeMinAge")]
		public System.Nullable<System.Double> AutoDepUpgradeMinAge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoRemediationPrs")]
		public AutoRemediationPrs AutoRemediationPrs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestAssignment")]
		public PullRequestAssignment PullRequestAssignment { get; set; }
		
		/// <summary>
		/// If set to `true`, fail Snyk Test if the repo has any vulnerabilities. Otherwise, fail only when the PR is adding a vulnerable dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestFailOnAnyVulns")]
		public System.Nullable<System.Boolean> PullRequestFailOnAnyVulns { get; set; }
		
		/// <summary>
		/// If set to `true`, fail Snyk Test only for high and critical severity vulnerabilities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestFailOnlyForHighSeverity")]
		public System.Nullable<System.Boolean> PullRequestFailOnlyForHighSeverity { get; set; }
		
		/// <summary>
		/// If set to `true`, Snyk Test checks PRs for vulnerabilities.:cq
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestTestEnabled")]
		public System.Nullable<System.Boolean> PullRequestTestEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_snapshots
	{
		
		/// <summary>
		/// A list of the project's snapshots, ordered according to date (latest first).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshots")]
		public Project_snapshotsSnapshots[] Project_snapshotsSnapshots { get; set; }
		
		/// <summary>
		/// The total number of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	public class Project_snapshotsSnapshots
	{
		
		/// <summary>
		/// The date that the snapshot was taken
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		/// <summary>
		/// The snapshot identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageBaseImage")]
		public string ImageBaseImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePlatform")]
		public string ImagePlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageTag")]
		public string ImageTag { get; set; }
		
		/// <summary>
		/// Number of known vulnerabilities in the project, not including ignored issues
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueCounts")]
		public Project_snapshotsSnapshotsIssueCounts IssueCounts { get; set; }
		
		/// <summary>
		/// The method by which this snapshot was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public System.Nullable<Project_snapshotsSnapshotsMethod> Method { get; set; }
		
		/// <summary>
		/// Number of dependencies of the project
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalDependencies")]
		public double TotalDependencies { get; set; }
	}
	
	public class Project_snapshotsSnapshotsIssueCounts
	{
		
		[System.Runtime.Serialization.DataMember(Name="license")]
		public Project_snapshotsSnapshotsIssueCountsLicense License { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sast")]
		public Project_snapshotsSnapshotsIssueCountsSast Sast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vuln")]
		public Project_snapshotsSnapshotsIssueCountsVuln Vuln { get; set; }
	}
	
	public class Project_snapshotsSnapshotsIssueCountsLicense
	{
		
		/// <summary>
		/// Number of critical severity vulnerabilities
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public double Critical { get; set; }
		
		/// <summary>
		/// Number of high severity vulnerabilities
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="high")]
		public double High { get; set; }
		
		/// <summary>
		/// Number of low severity vulnerabilities
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="low")]
		public double Low { get; set; }
		
		/// <summary>
		/// Number of medium severity vulnerabilities
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public double Medium { get; set; }
	}
	
	public class Project_snapshotsSnapshotsIssueCountsSast
	{
		
		/// <summary>
		/// Number of critical severity vulnerabilities
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public double Critical { get; set; }
		
		/// <summary>
		/// Number of high severity vulnerabilities
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="high")]
		public double High { get; set; }
		
		/// <summary>
		/// Number of low severity vulnerabilities
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="low")]
		public double Low { get; set; }
		
		/// <summary>
		/// Number of medium severity vulnerabilities
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public double Medium { get; set; }
	}
	
	public class Project_snapshotsSnapshotsIssueCountsVuln
	{
		
		/// <summary>
		/// Number of critical severity vulnerabilities
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public double Critical { get; set; }
		
		/// <summary>
		/// Number of high severity vulnerabilities
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="high")]
		public double High { get; set; }
		
		/// <summary>
		/// Number of low severity vulnerabilities
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="low")]
		public double Low { get; set; }
		
		/// <summary>
		/// Number of medium severity vulnerabilities
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public double Medium { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Project_snapshotsSnapshotsMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		api = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cli = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		recurring = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		web = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="web-test")]
		webMinustest = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wizard = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_snapshots_filters
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Project_snapshots_filtersFilters Filters { get; set; }
	}
	
	public class Project_snapshots_filtersFilters
	{
		
		/// <summary>
		/// For container projects, filter by the ID of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public string ImageId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project_tags
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Projects_filters
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Projects_filtersFilters Filters { get; set; }
	}
	
	public class Projects_filtersFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Project_attributes Attributes { get; set; }
		
		/// <summary>
		/// If set to `true`, only include projects which are monitored, if set to `false`, only include projects which are not monitored
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMonitored")]
		public System.Nullable<System.Boolean> IsMonitored { get; set; }
		
		/// <summary>
		/// If supplied, only projects that have a name that **starts with** this value will be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If supplied, only projects that exactly match this origin will be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Projects_filtersFiltersTags Tags { get; set; }
		
		/// <summary>
		/// If supplied, only projects that exactly match this type will be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class Projects_filtersFiltersTags
	{
		
		/// <summary>
		/// A project must have all provided tags in order to be included in the response. A maximum of 3 tags can be supplied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public string[] Includes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Provision_user
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Remove_project_tag
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Repository
	{
		
		/// <summary>
		/// deb, apk and rpm package managers should use an alias to indicate the target Operating System, for example 'debian:10'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SBTFile
	{
		
		/// <summary>
		/// The contents of the file, encoded according to the `encoding` field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SemverObject
	{
		
		/// <summary>
		/// The (semver) range of versions NOT vulnerable to this issue. *Deprecated* and should not be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unaffected")]
		public string Unaffected { get; set; }
		
		/// <summary>
		/// The (semver) range of versions vulnerable to this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vulnerable")]
		public string Vulnerable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Simple_notification_setting_response : Simple_notification_setting_request
	{
		
		/// <summary>
		/// Whether the setting was found on the requested context directly or inherited from a parent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inherited")]
		public System.Nullable<System.Boolean> Inherited { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Alphanumeric including - and _ with a limit of 30 characters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Alphanumeric including - and _ with a limit of 50 characters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag_body
	{
		
		/// <summary>
		/// Valid tag key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Valid tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Test_Counts
	{
		
		/// <summary>
		/// A list of test counts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Test_CountsResults[] Test_CountsResults { get; set; }
	}
	
	public class Test_CountsResults
	{
		
		/// <summary>
		/// The number of tests conducted
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public double Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPrivate")]
		public Test_CountsResultsIsPrivate IsPrivate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuesPrevented")]
		public Test_CountsResultsIssuesPrevented IssuesPrevented { get; set; }
	}
	
	public class Test_CountsResultsIsPrivate
	{
		
		/// <summary>
		/// The number of tests conducted against public projects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="false")]
		public System.Nullable<System.Double> False { get; set; }
		
		/// <summary>
		/// The number of tests conducted against private projects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="true")]
		public System.Nullable<System.Double> True { get; set; }
	}
	
	public class Test_CountsResultsIssuesPrevented
	{
		
		/// <summary>
		/// The number of tests that did not prevent issues from being introduced
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="false")]
		public System.Nullable<System.Double> False { get; set; }
		
		/// <summary>
		/// The number of tests that prevented issues from being introduced
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="true")]
		public System.Nullable<System.Double> True { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Test_counts
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tests_Filters
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Tests_FiltersFilters Filters { get; set; }
	}
	
	public class Tests_FiltersFilters
	{
		
		/// <summary>
		/// If set to `true`, only include tests which were conducted against private projects, if set to `false` only include tests which were conducted against public projects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPrivate")]
		public System.Nullable<System.Boolean> IsPrivate { get; set; }
		
		/// <summary>
		/// If set to `true`, only include tests which prevented issues from being introduced, if set to `false` only include tests which did not prevent issues from being introduced
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuesPrevented")]
		public System.Nullable<System.Boolean> IssuesPrevented { get; set; }
		
		/// <summary>
		/// The list of org IDs to filter the results by
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgs")]
		public string[] Orgs { get; set; }
		
		/// <summary>
		/// The list of project IDs to filter issues by, max projects allowed is 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public string[] Projects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class The_Snyk_organization_for_a_request
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Update_member_roles_in_your_organization
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User_Details
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User_invitation_to_organization
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User_organization_notification_settings
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User_project_notification_settings
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Vulnerability
	{
		
		/// <summary>
		/// Common Vulnerability Scoring System (CVSS) provides a way to capture the principal characteristics of a vulnerability, and produce a numerical score reflecting its severity, as well as a textual representation of that score.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CVSSv3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alternativeIds")]
		public string AlternativeIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// The reporter of the vulnerability
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credit")]
		public string Credit { get; set; }
		
		/// <summary>
		/// CVSS Score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssScore")]
		public System.Nullable<System.Double> CvssScore { get; set; }
		
		/// <summary>
		/// The description of the vulnerability
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disclosureTime")]
		public string DisclosureTime { get; set; }
		
		/// <summary>
		/// Snyk exploit maturity for this issue. One of: `mature`, `proof-of-concept`, `no-known-exploit` or `no-data`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exploitMaturity")]
		public string ExploitMaturity { get; set; }
		
		/// <summary>
		/// Paths from which the vulnerable package is required in the code base.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// List of vulnerable functions inside the vulnerable packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functions")]
		public string[] Functions { get; set; }
		
		/// <summary>
		/// Additional identifiers for this issue (CVE, CWE, etc).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifiers")]
		public string Identifiers { get; set; }
		
		/// <summary>
		/// Is a patch by Snyk available to fix this vulnerability?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPatchable")]
		public System.Nullable<System.Boolean> IsPatchable { get; set; }
		
		/// <summary>
		/// Will pinning this package to a newer version fix the vulnerability?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPinnable")]
		public System.Nullable<System.Boolean> IsPinnable { get; set; }
		
		/// <summary>
		/// Will upgrading a top-level dependency fix the vulnerability?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUpgradable")]
		public System.Nullable<System.Boolean> IsUpgradable { get; set; }
		
		/// <summary>
		/// The programming language for this package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modificationTime")]
		public string ModificationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageManager `npm`")]
		public string PackageManager__npm_ { get; set; }
		
		/// <summary>
		/// The name of the vulnerable package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Patches to fix this issue, by Snyk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patches")]
		public string[] Patches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicationTime")]
		public string PublicationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="semver")]
		public SemverObject Semver { get; set; }
		
		/// <summary>
		/// Snyk severity for this issue. One of: `critical`, `medium`, `high`, `medium` or `low`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		/// <summary>
		/// The title of the vulnerability
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upgradePath")]
		public string UpgradePath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Webhook
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Webhook_Collection
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class YarnLockFile
	{
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Composer
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Composer_request_payload
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; }
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Composer_request_payloadFiles Files { get; set; }
	}
	
	public class Composer_request_payloadFiles
	{
		
		/// <summary>
		/// a lockfile encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="additional")]
		public string[] Additional { get; set; }
		
		/// <summary>
		/// the `composer.json` file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Composer_request_payloadFilesTarget Target { get; set; }
	}
	
	public class Composer_request_payloadFilesTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dep
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Golangdep_request_payload
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; }
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Golangdep_request_payloadFiles Files { get; set; }
	}
	
	public class Golangdep_request_payloadFiles
	{
		
		/// <summary>
		/// a lockfile encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="additional")]
		public string[] Additional { get; set; }
		
		/// <summary>
		/// the `Gopkg.toml` file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Golangdep_request_payloadFilesTarget Target { get; set; }
	}
	
	public class Golangdep_request_payloadFilesTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Govendor_request_payload
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; }
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Govendor_request_payloadFiles Files { get; set; }
	}
	
	public class Govendor_request_payloadFiles
	{
		
		/// <summary>
		/// the `vendor.json` file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Govendor_request_payloadFilesTarget Target { get; set; }
	}
	
	public class Govendor_request_payloadFilesTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Graph_request_payload
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="depGraph")]
		public DepGraphData DepGraph { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IgnorePath
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IssueId
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Monitor_graph_payload
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="depGraph")]
		public MonitorDepGraphData DepGraph { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public MonitorMetaData Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Npm
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Npm_request_payload
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; }
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Npm_request_payloadFiles Files { get; set; }
	}
	
	public class Npm_request_payloadFiles
	{
		
		/// <summary>
		/// a lockfile can be sent (if needed), encoded according the the "encoding" field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional")]
		public string[] Additional { get; set; }
		
		/// <summary>
		/// the `package.json` file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Npm_request_payloadFilesTarget Target { get; set; }
	}
	
	public class Npm_request_payloadFilesTarget
	{
		
		/// <summary>
		/// the contents of `package.json` as a string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Pip
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Pip_request_payload
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; }
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Pip_request_payloadFiles Files { get; set; }
	}
	
	public class Pip_request_payloadFiles
	{
		
		/// <summary>
		/// the `requirements.txt` file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Pip_request_payloadFilesTarget Target { get; set; }
	}
	
	public class Pip_request_payloadFilesTarget
	{
		
		/// <summary>
		/// the contents of `requirements.txt` as a string, encoded according to `encoding` above.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Rubygems
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Rubygems_request_payload
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; }
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Rubygems_request_payloadFiles Files { get; set; }
	}
	
	public class Rubygems_request_payloadFiles
	{
		
		/// <summary>
		/// the `Gemfile.lock` file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Rubygems_request_payloadFilesTarget Target { get; set; }
	}
	
	public class Rubygems_request_payloadFilesTarget
	{
		
		/// <summary>
		/// the contents of `Gemfile.lock` as a string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sbt
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sbt_request_payload
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; }
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Sbt_request_payloadFiles Files { get; set; }
	}
	
	public class Sbt_request_payloadFiles
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public SBTFile Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Vendor
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Yarn
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Yarn_request_payload
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; }
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Yarn_request_payloadFiles Files { get; set; }
	}
	
	public class Yarn_request_payloadFiles
	{
		
		/// <summary>
		/// a lockfile can be sent (if needed), encoded according the the "encoding" field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional")]
		public string[] Additional { get; set; }
		
		/// <summary>
		/// the `package.json` file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Yarn_request_payloadFilesTarget Target { get; set; }
	}
	
	public class Yarn_request_payloadFilesTarget
	{
		
		/// <summary>
		/// the contents of `package.json` as a string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Add_a_tag_to_a_projectBody
	{
		
		/// <summary>
		/// Alphanumeric including - and _ with a limit of 30 characters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Alphanumeric including - and _ with a limit of 50 characters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get_latest_issue_countsBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Get_latest_issue_countsBodyFilters Filters { get; set; }
	}
	
	public class Get_latest_issue_countsBodyFilters
	{
		
		/// <summary>
		/// If set to `true`, only include issues which are fixable, if set to `false`, only include issues which are not fixable. An issue is fixable if it is either upgradable, patchable or pinnable. Also see isUpgradable, isPatchable and isPinnable filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixable")]
		public System.Nullable<System.Boolean> Fixable { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignored")]
		public System.Nullable<System.Boolean> Ignored { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are patchable, if set to `false`, only include issues which are not patchable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPatchable")]
		public System.Nullable<System.Boolean> IsPatchable { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are pinnable, if set to `false`, only include issues which are not pinnable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPinnable")]
		public System.Nullable<System.Boolean> IsPinnable { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are upgradable, if set to `false`, only include issues which are not upgradable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUpgradable")]
		public System.Nullable<System.Boolean> IsUpgradable { get; set; }
		
		/// <summary>
		/// The type of languages to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The list of org IDs to filter the results by
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgs")]
		public object Orgs { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patched")]
		public System.Nullable<System.Boolean> Patched { get; set; }
		
		/// <summary>
		/// The priority score ranging between 0-1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priorityScore")]
		public Get_latest_issue_countsBodyFiltersPriorityScore PriorityScore { get; set; }
		
		/// <summary>
		/// The list of project IDs to filter issues by, max projects allowed is 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public object Projects { get; set; }
		
		/// <summary>
		/// The severity levels of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string[] Severity { get; set; }
		
		/// <summary>
		/// The type of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	public class Get_latest_issue_countsBodyFiltersPriorityScore
	{
		
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Double> Max { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Double> Min { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get_latest_project_countsBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Get_latest_project_countsBodyFilters Filters { get; set; }
	}
	
	public class Get_latest_project_countsBodyFilters
	{
		
		/// <summary>
		/// The type of languages to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The list of org IDs to filter the results by
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgs")]
		public object Orgs { get; set; }
		
		/// <summary>
		/// The list of project IDs to filter the results by, max projects allowed is 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public object Projects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get_list_of_latest_issuesBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Get_list_of_latest_issuesBodyFilters Filters { get; set; }
	}
	
	public class Get_list_of_latest_issuesBodyFilters
	{
		
		/// <summary>
		/// The exploit maturity levels of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exploitMaturity")]
		public string[] ExploitMaturity { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are fixable, if set to `false`, only include issues which are not fixable. An issue is fixable if it is either upgradable, patchable or pinnable. Also see isUpgradable, isPatchable and isPinnable filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixable")]
		public System.Nullable<System.Boolean> Fixable { get; set; }
		
		/// <summary>
		/// Search term to filter issue name by, or an exact CVE or CWE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignored")]
		public System.Nullable<System.Boolean> Ignored { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are fixed, if set to `false`, only include issues which are not fixed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFixed")]
		public System.Nullable<System.Boolean> IsFixed { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are patchable, if set to `false`, only include issues which are not patchable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPatchable")]
		public System.Nullable<System.Boolean> IsPatchable { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are pinnable, if set to `false`, only include issues which are not pinnable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPinnable")]
		public System.Nullable<System.Boolean> IsPinnable { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are upgradable, if set to `false`, only include issues which are not upgradable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUpgradable")]
		public System.Nullable<System.Boolean> IsUpgradable { get; set; }
		
		/// <summary>
		/// The list of issue IDs to filter issues by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public object Issues { get; set; }
		
		/// <summary>
		/// The type of languages to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The list of org IDs to filter the results by
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgs")]
		public object Orgs { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patched")]
		public System.Nullable<System.Boolean> Patched { get; set; }
		
		/// <summary>
		/// The priority score ranging between 0-1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priorityScore")]
		public Get_list_of_latest_issuesBodyFiltersPriorityScore PriorityScore { get; set; }
		
		/// <summary>
		/// The list of project IDs to filter issues by, max projects allowed is 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public object Projects { get; set; }
		
		/// <summary>
		/// The severity levels of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string[] Severity { get; set; }
		
		/// <summary>
		/// The type of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	public class Get_list_of_latest_issuesBodyFiltersPriorityScore
	{
		
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Double> Max { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Double> Min { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class List_all_Aggregated_issuesBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public List_all_Aggregated_issuesBodyFilters Filters { get; set; }
		
		/// <summary>
		/// If set to `true`, Include issue's description, if set to `false` (by default), it won't (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeDescription")]
		public System.Nullable<System.Boolean> IncludeDescription { get; set; }
		
		/// <summary>
		/// If set to `true`, Include issue's introducedThrough, if set to `false` (by default), it won't. It's for container only projects (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeIntroducedThrough")]
		public System.Nullable<System.Boolean> IncludeIntroducedThrough { get; set; }
	}
	
	public class List_all_Aggregated_issuesBodyFilters
	{
		
		/// <summary>
		/// The exploit maturity levels of issues to filter the results by (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exploitMaturity")]
		public string[] ExploitMaturity { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignored")]
		public System.Nullable<System.Boolean> Ignored { get; set; }
		
		/// <summary>
		/// If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patched")]
		public System.Nullable<System.Boolean> Patched { get; set; }
		
		/// <summary>
		/// The priority to filter the issues by (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public List_all_Aggregated_issuesBodyFiltersPriority Priority { get; set; }
		
		/// <summary>
		/// The severity levels of issues to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severities")]
		public string[] Severities { get; set; }
		
		/// <summary>
		/// The type of issues to filter the results by (Non-IaC projects only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	public class List_all_Aggregated_issuesBodyFiltersPriority
	{
		
		/// <summary>
		/// Include issues where the priority score is between min and max
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public List_all_Aggregated_issuesBodyFiltersPriorityScore Score { get; set; }
	}
	
	public class List_all_Aggregated_issuesBodyFiltersPriorityScore
	{
		
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Double> Max { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Double> Min { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Modify_organization_notification_settingsBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="new-issues-remediations")]
		public Modify_organization_notification_settingsBodyNew_issues_remediations New_issues_remediations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project-imported")]
		public Modify_organization_notification_settingsBodyProject_imported Project_imported { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="test-limit")]
		public Modify_organization_notification_settingsBodyTest_limit Test_limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekly-report")]
		public Modify_organization_notification_settingsBodyWeekly_report Weekly_report { get; set; }
	}
	
	public class Modify_organization_notification_settingsBodyNew_issues_remediations
	{
		
		/// <summary>
		/// Whether notifications should be sent
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueSeverity")]
		public New_issues_notification_setting_requestIssueSeverity IssueSeverity { get; set; }
		
		/// <summary>
		/// Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueType")]
		public New_issues_notification_setting_requestIssueType IssueType { get; set; }
	}
	
	public class Modify_organization_notification_settingsBodyProject_imported
	{
		
		/// <summary>
		/// Whether notifications should be sent
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	public class Modify_organization_notification_settingsBodyTest_limit
	{
		
		/// <summary>
		/// Whether notifications should be sent
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	public class Modify_organization_notification_settingsBodyWeekly_report
	{
		
		/// <summary>
		/// Whether notifications should be sent
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get group level audit logs
		/// Get_group_level_audit_logs group/{groupId}/audit
		/// </summary>
		/// <param name="groupId">The group ID. The `API_KEY` must have access to this group.</param>
		/// <param name="from">The date you wish to fetch results from, in the format YYYY-MM-DD. Default is 3 months ago. Please note that logs are only available for past 3 months.</param>
		/// <param name="to">The date you wish to fetch results until, in the format YYYY-MM-DD. Default is today. Please note that logs are only available for past 3 months.</param>
		/// <param name="page">The page of results to request. Audit logs are returned in page sizes of 100</param>
		/// <param name="sortOrder">The sort order of the returned audit logs by date. Values: `ASC`, `DESC`. Default: `DESC`.</param>
		/// <returns>OK</returns>
		public async Task Get_group_level_audit_logsAsync(string groupId, string from, string to, double page, string sortOrder, Get_group_level_audit_logsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "group/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/audit&from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&to=" + (to==null? "" : System.Uri.EscapeDataString(to))+"&page="+page+"&sortOrder=" + (sortOrder==null? "" : System.Uri.EscapeDataString(sortOrder));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all members in a group
		/// List_all_members_in_a_group group/{groupId}/members
		/// </summary>
		/// <param name="groupId">The group ID. The `API_KEY` must have access admin to this group.</param>
		/// <returns>OK</returns>
		public async Task List_all_members_in_a_groupAsync(string groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "group/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a member to an organization within a group
		/// Add_a_member_to_an_organization_within_a_group group/{groupId}/org/{orgId}/members
		/// </summary>
		/// <param name="groupId">The group ID. The `API_KEY` must have access admin to this group.</param>
		/// <param name="orgId">The organization ID we want to add the member to. The `API_KEY` must have access to this organization.</param>
		/// <returns>OK</returns>
		public async Task Add_a_member_to_an_organization_within_a_groupAsync(string groupId, string orgId, Add_a_member_to_an_organization_within_a_groupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "group/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all organizations in a group
		/// List_all_organizations_in_a_group group/{groupId}/orgs
		/// </summary>
		/// <param name="groupId">The group ID. The `API_KEY` must have READ access to this group and LIST organizations access in this group.</param>
		/// <param name="perPage">The number of results to return (maximum is 100).</param>
		/// <param name="page">For pagination - offset (from which to start returning results).</param>
		/// <param name="name">Only organizations that have a name that **starts with** this value (case insensitive) will be returned.</param>
		/// <returns>OK</returns>
		public async Task List_all_organizations_in_a_groupAsync(string groupId, double perPage, double page, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "group/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/orgs&perPage="+perPage+"&page="+page+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all roles in a group
		/// List_all_roles_in_a_group group/{groupId}/roles
		/// </summary>
		/// <param name="groupId">The group ID. The `API_KEY` must have READ access to this group.</param>
		/// <returns>OK</returns>
		public async Task List_all_roles_in_a_groupAsync(string groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "group/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View group settings
		/// View_group_settings group/{groupId}/settings
		/// </summary>
		/// <param name="groupId">The group ID. The `API_KEY` must have admin access to this group.</param>
		/// <returns>OK</returns>
		public async Task View_group_settingsAsync(string groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "group/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update group settings
		/// Update_group_settings group/{groupId}/settings
		/// </summary>
		/// <param name="groupId">Automatically added</param>
		/// <returns>OK</returns>
		public async Task Update_group_settingsAsync(string groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "group/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all tags in a group
		/// List_all_tags_in_a_group group/{groupId}/tags
		/// </summary>
		/// <param name="groupId">The group ID. The `API_KEY` must have access admin to this group.</param>
		/// <param name="perPage">The number of results to return (the default is 1000).</param>
		/// <param name="page">The offset from which to start returning results from.</param>
		/// <returns>OK</returns>
		public async Task List_all_tags_in_a_groupAsync(string groupId, double perPage, double page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "group/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/tags&perPage="+perPage+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete tag from group
		/// Delete_tag_from_group group/{groupId}/tags/delete
		/// </summary>
		/// <param name="groupId">The group ID. The `API_KEY` must have access admin to this group.</param>
		/// <returns>OK</returns>
		public async Task Delete_tag_from_groupAsync(string groupId, Delete_tag_from_groupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "group/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/tags/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Monitor Dep Graph
		/// Use this endpoint to monitor a [DepGraph data object](https://github.com/snyk/dep-graph#depgraphdata).
		/// Monitor_Dep_Graph monitor/dep-graph
		/// </summary>
		/// <param name="org">The organization to test the package with. See "The Snyk organization for a request" above.</param>
		/// <returns>OK</returns>
		public async Task Monitor_Dep_GraphAsync(string org, Monitor_Dep_GraphPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "monitor/dep-graph?org=" + (org==null? "" : System.Uri.EscapeDataString(org));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a new organization
		/// Create_a_new_organization org
		/// </summary>
		public async Task Create_a_new_organizationAsync(Create_a_new_organizationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove organization
		/// Remove_organization org/{orgId}
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have permission to delete the provided organization. Currently this operation is only supported for organizations without any projects.</param>
		public async Task Remove_organizationAsync(string orgId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get organization level audit logs
		/// Get_organization_level_audit_logs org/{orgId}/audit
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <param name="from">The date you wish to fetch results from, in the format YYYY-MM-DD. Default is 3 months ago. Please note that logs are only available for past 3 months.</param>
		/// <param name="to">The date you wish to fetch results until, in the format YYYY-MM-DD. Default is today. Please note that logs are only available for past 3 months.</param>
		/// <param name="page">The page of results to request. Audit logs are returned in page sizes of 100.</param>
		/// <param name="sortOrder">The sort order of the returned audit logs by date. Values: `ASC`, `DESC`. Default: `DESC`.</param>
		/// <returns>OK</returns>
		public async Task Get_organization_level_audit_logsAsync(string orgId, string from, string to, double page, string sortOrder, Get_organization_level_audit_logsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/audit&from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&to=" + (to==null? "" : System.Uri.EscapeDataString(to))+"&page="+page+"&sortOrder=" + (sortOrder==null? "" : System.Uri.EscapeDataString(sortOrder));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all dependencies
		/// List_all_dependencies org/{orgId}/dependencies
		/// </summary>
		/// <param name="orgId">The organization ID to list projects for. The `API_KEY` must have access to this organization.</param>
		/// <param name="sortBy">The field to sort results by.</param>
		/// <param name="order">The direction to sort results by.</param>
		/// <param name="page">The page of results to fetch.</param>
		/// <param name="perPage">The number of results to fetch per page (maximum is 1000).</param>
		/// <returns>OK</returns>
		public async Task List_all_dependenciesAsync(string orgId, List_all_dependenciesSortBy sortBy, List_all_dependenciesOrder order, double page, double perPage, List_all_dependenciesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/dependencies&sortBy=" + sortBy+"&order=" + order+"&page="+page+"&perPage="+perPage;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get an organization's entitlement value
		/// Get_an_organization_s_entitlement_value org/{orgId}/entitlement/{entitlementKey}
		/// </summary>
		/// <param name="orgId">The organization ID to query the entitlement for. The `API_KEY` must have access to this organization.</param>
		/// <param name="entitlementKey">The entitlement to query.</param>
		/// <returns>OK</returns>
		public async Task Get_an_organization_s_entitlement_valueAsync(string orgId, Get_an_organization_s_entitlement_valueEntitlementKey entitlementKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/entitlement/"+entitlementKey;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all entitlements
		/// List_all_entitlements org/{orgId}/entitlements
		/// </summary>
		/// <param name="orgId">The organization ID to list entitlements for. The `API_KEY` must have access to this organization.</param>
		/// <returns>OK</returns>
		public async Task List_all_entitlementsAsync(string orgId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/entitlements";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List
		/// List org/{orgId}/integrations
		/// </summary>
		/// <param name="orgId">The organization public ID. The `API_KEY` must have admin access to this organization.</param>
		/// <returns>OK</returns>
		public async Task ListAsync(string orgId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/integrations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add new integration
		/// Add new integration for given organization.
		/// Add_new_integration org/{orgId}/integrations
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have admin access to this organization.</param>
		/// <returns>OK</returns>
		public async Task Add_new_integrationAsync(string orgId, Add_new_integrationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/integrations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update existing integration
		/// + Update integration's credentials for given organization. Integration must be **not brokered**
		/// 
		/// + Enable or disable brokered integration for given organization. *Credentials required for disabling brokered integration*
		/// 
		/// Examples in right section:
		/// 
		/// 1. Set up a broker for an existing integration
		/// 
		/// 2. Update credentials for an existing non-brokered integration
		/// 
		/// 3. Disable broker for an existing integration
		/// Update_existing_integration org/{orgId}/integrations/{integrationId}
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have admin access to this organization.</param>
		/// <param name="integrationId">The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured.</param>
		/// <returns>OK</returns>
		public async Task Update_existing_integrationAsync(string orgId, string integrationId, Update_existing_integrationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete credentials
		/// Removes any credentials set for this integration. If this is a brokered connection the operation will have no effect.
		/// Delete_credentials org/{orgId}/integrations/{integrationId}/authentication
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <param name="integrationId">The integration ID.</param>
		/// <returns>OK</returns>
		public async Task Delete_credentialsAsync(string orgId, string integrationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId))+"/authentication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provision new broker token
		/// Issue a new and unique provisional broker token for the brokered integration.
		/// 
		/// Used for zero down-time token rotation with the Snyk Broker. Once provisioned, the token can be used to initialize a new broker client before using the switch API to update the token in use by the integration.
		/// 
		/// The new provisional token will fail to be created if the integration, or any other integration in the same group, already has one provisioned.
		/// Provision_new_broker_token org/{orgId}/integrations/{integrationId}/authentication/provision-token
		/// </summary>
		/// <param name="orgId">The `API_KEY` must have access to this organization.</param>
		/// <returns>OK</returns>
		public async Task Provision_new_broker_tokenAsync(string orgId, string integrationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId))+"/authentication/provision-token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Switch between broker tokens
		/// Switch the existing broker token with the provisioned token for this integration and any other in the same group.
		/// Only perform this action when you have a Broker client running with the provisioned token.
		/// This action will fail if there is no token provisioned for this integration or any integration in the same group.
		/// Switch_between_broker_tokens org/{orgId}/integrations/{integrationId}/authentication/switch-token
		/// </summary>
		/// <param name="orgId">The `API_KEY` must have access to this organization.</param>
		/// <returns>OK</returns>
		public async Task Switch_between_broker_tokensAsync(string orgId, string integrationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId))+"/authentication/switch-token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clone an integration (with settings and credentials)
		/// Clone an integration, including all of its settings and credentials from one organization to another organization in the same group.
		/// This API supports both brokered and non-brokered integrations.
		/// 
		/// Use this API for when you want to share a Broker token between several Snyk organizations (integrations).
		/// Clone_an_integration_with_settings_and_credentials org/{orgId}/integrations/{integrationId}/clone
		/// </summary>
		/// <param name="orgId">Source organization public ID to clone integration settings from. The `API_KEY` must have access to this organization.</param>
		/// <param name="integrationId">Source integration public ID to clone.</param>
		/// <returns>OK</returns>
		public async Task Clone_an_integration_with_settings_and_credentialsAsync(string orgId, string integrationId, Clone_an_integration_with_settings_and_credentialsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId))+"/clone";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Import targets
		/// Import_targets org/{orgId}/integrations/{integrationId}/import
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have admin access to this organization.</param>
		/// <param name="integrationId">The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured.</param>
		public async Task Import_targetsAsync(string orgId, string integrationId, Import_targetsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId))+"/import";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get import job details
		/// Get_import_job_details org/{orgId}/integrations/{integrationId}/import/{jobId}
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have admin access to this organization.</param>
		/// <param name="integrationId">The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured.</param>
		/// <param name="jobId">The ID of the job. This can be found in the Location response header from the corresponding POST request that triggered the import job.</param>
		/// <returns>OK</returns>
		public async Task Get_import_job_detailsAsync(string orgId, string integrationId, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId))+"/import/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve
		/// Retrieve org/{orgId}/integrations/{integrationId}/settings
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have admin access to this organization.</param>
		/// <param name="integrationId">The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured.</param>
		/// <returns>OK</returns>
		public async Task RetrieveAsync(string orgId, string integrationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update
		/// Update org/{orgId}/integrations/{integrationId}/settings
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have admin access to this organization.</param>
		/// <param name="integrationId">The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured.</param>
		/// <returns>OK</returns>
		public async Task UpdateAsync(string orgId, string integrationId, UpdatePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get existing integration by type
		/// Get_existing_integration_by_type org/{orgId}/integrations/{type}
		/// </summary>
		/// <param name="orgId">The `API_KEY` must have admin access to this organization.</param>
		/// <param name="type">Integration type.</param>
		/// <returns>OK</returns>
		public async Task Get_existing_integration_by_typeAsync(string orgId, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/integrations/"+ (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invite users
		/// Invite_users org/{orgId}/invite
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have admin access to this organization.</param>
		/// <returns>OK</returns>
		public async Task Invite_usersAsync(string orgId, Invite_usersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/invite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all licenses
		/// List_all_licenses org/{orgId}/licenses
		/// </summary>
		/// <param name="orgId">The organization ID to list projects for. The `API_KEY` must have access to this organization.</param>
		/// <param name="sortBy">The field to sort results by.</param>
		/// <param name="order">The direction to sort results by.</param>
		/// <returns>OK</returns>
		public async Task List_all_licensesAsync(string orgId, List_all_licensesSortBy sortBy, List_all_dependenciesOrder order, List_all_licensesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/licenses&sortBy=" + sortBy+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Members
		/// List_Members org/{orgId}/members
		/// </summary>
		/// <param name="orgId">The organization ID.</param>
		/// <param name="includeGroupAdmins">Include group administrators who also have access to this organization.</param>
		/// <returns>OK</returns>
		public async Task List_MembersAsync(string orgId, bool includeGroupAdmins, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/members&includeGroupAdmins="+includeGroupAdmins;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a member's role in the organization
		/// Update_a_member_s_role_in_the_organization org/{orgId}/members/update/{userId}
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have admin access to this organization.</param>
		/// <param name="userId">The user ID.</param>
		/// <returns>OK</returns>
		public async Task Update_a_member_s_role_in_the_organizationAsync(string orgId, string userId, Update_a_member_s_role_in_the_organizationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/members/update/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a member from the organization
		/// Remove_a_member_from_the_organization org/{orgId}/members/{userId}
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must admin have access to this organization.</param>
		/// <param name="userId">The user ID we want to remove.</param>
		/// <returns>OK</returns>
		public async Task Remove_a_member_from_the_organizationAsync(string orgId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/members/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a member in the organization
		/// Update_a_member_in_the_organization org/{orgId}/members/{userId}
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have admin access to this organization.</param>
		/// <param name="userId">The user ID.</param>
		/// <returns>OK</returns>
		public async Task Update_a_member_in_the_organizationAsync(string orgId, string userId, Update_a_member_in_the_organizationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/members/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get organization notification settings
		/// OrganizationsGetByOrgId org/{orgId}/notification-settings
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <returns>OK</returns>
		public async Task OrganizationsGetByOrgIdAsync(string orgId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/notification-settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set notification settings
		/// Set_notification_settings org/{orgId}/notification-settings
		/// </summary>
		/// <param name="orgId">Automatically added</param>
		/// <returns>OK</returns>
		public async Task Set_notification_settingsAsync(string orgId, Modify_organization_notification_settingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/notification-settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a project
		/// Delete_a_project org/{orgId}/project/{projectId}
		/// </summary>
		/// <param name="orgId">Automatically added</param>
		/// <param name="projectId">Automatically added</param>
		/// <returns>OK</returns>
		public async Task Delete_a_projectAsync(string orgId, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single project
		/// Retrieve_a_single_project org/{orgId}/project/{projectId}
		/// </summary>
		/// <param name="orgId">The organization ID the project belongs to. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID.</param>
		/// <returns>OK</returns>
		public async Task Retrieve_a_single_projectAsync(string orgId, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a project
		/// Update_a_project org/{orgId}/project/{projectId}
		/// </summary>
		/// <param name="orgId">Automatically added</param>
		/// <param name="projectId">Automatically added</param>
		/// <returns>OK</returns>
		public async Task Update_a_projectAsync(string orgId, string projectId, Update_a_projectPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Activate
		/// Activating a project will:
		/// 
		/// - Add a repository webhook for supported integrations.
		/// 
		/// - Enable pull request tests for new vulnerabilities.
		/// 
		/// - Open Fix pull request for newly disclosed vulnerabilities.
		/// 
		/// - Enable recurring tests, sending email alerts about newly disclosed vulnerabilities.
		/// Activate org/{orgId}/project/{projectId}/activate
		/// </summary>
		/// <param name="orgId">The organization ID the project belongs to. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID.</param>
		/// <returns>OK</returns>
		public async Task ActivateAsync(string orgId, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/activate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Aggregated issues
		/// List_all_Aggregated_issues org/{orgId}/project/{projectId}/aggregated-issues
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID to return issues for.</param>
		/// <returns>OK</returns>
		public async Task List_all_Aggregated_issuesAsync(string orgId, string projectId, List_all_Aggregated_issuesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/aggregated-issues";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Applying attributes
		/// Applies an attribute to the provided project.
		/// It is possible to assign multiple values to each attribute, but you can only assign values to one of the predefined attribute categories, using the predefined options for this category.
		/// Assigning an attribute requires the caller to be either an Organization Administrator or a Group Administrator.
		/// Assigning an attribute will override any existing values that the specific attribute already has set.
		/// In order to clear out an attribute value, an empty array can be set.
		/// Applying_attributes org/{orgId}/project/{projectId}/attributes
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID to remove a tag from</param>
		/// <returns>OK</returns>
		public async Task Applying_attributesAsync(string orgId, string projectId, Applying_attributesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/attributes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deactivate
		/// Deactivating a project will:
		/// 
		/// - Disable pull request tests for new vulnerabilities.
		/// 
		/// - Disable Fix pull request from being opened for newly disclosed vulnerabilities.
		/// 
		/// - Disable recurring tests - email alerts about newly disclosed vulnerabilities will be turned off.
		/// 
		/// - If the repository has no other active projects, then remove any webhooks related to the project.
		/// Deactivate org/{orgId}/project/{projectId}/deactivate
		/// </summary>
		/// <param name="orgId">The organization ID the project belongs to. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID.</param>
		/// <returns>OK</returns>
		public async Task DeactivateAsync(string orgId, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/deactivate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Project dependency graph
		/// Get_Project_dependency_graph org/{orgId}/project/{projectId}/dep-graph
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID to return issues for.</param>
		/// <returns>* A reference implementation of the graph, as well as conversion functions to/from legacy tree format, can be found at: https://github.com/snyk/dep-graph.
		///
		///* The object might contain additional fields in the future, in a backward-compatible way (`schemaVersion` will change accordingly).</returns>
		public async Task Get_Project_dependency_graphAsync(string orgId, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/dep-graph";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all project snapshots
		/// List_all_project_snapshots org/{orgId}/project/{projectId}/history
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID to return snapshots for.</param>
		/// <param name="perPage">The number of results to return (the default is 10, the maximum is 100).</param>
		/// <param name="page">The offset from which to start returning results from.</param>
		/// <returns>OK</returns>
		public async Task List_all_project_snapshotsAsync(string orgId, string projectId, double perPage, double page, List_all_project_snapshotsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/history&perPage="+perPage+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all project snapshot aggregated issues
		/// List_all_project_snapshot_aggregated_issues org/{orgId}/project/{projectId}/history/{snapshotId}/aggregated-issues
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID.</param>
		/// <param name="snapshotId">The snapshot ID. If set to latest, the most recent snapshot will be used.</param>
		/// <returns>OK</returns>
		public async Task List_all_project_snapshot_aggregated_issuesAsync(string orgId, string projectId, string snapshotId, List_all_Aggregated_issuesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/history/"+ (snapshotId==null? "" : System.Uri.EscapeDataString(snapshotId))+"/aggregated-issues";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all project snapshot issue paths
		/// List_all_project_snapshot_issue_paths org/{orgId}/project/{projectId}/history/{snapshotId}/issue/{issueId}/paths
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID for which to return issue paths.</param>
		/// <param name="snapshotId">The project snapshot ID for which to return issue paths. If set to `latest`, the most recent snapshot will be used. Use the "List all project snapshots" endpoint to find suitable values for this.</param>
		/// <param name="issueId">The issue ID for which to return issue paths.</param>
		/// <param name="perPage">The number of results to return per page (1 - 1000, inclusive).</param>
		/// <param name="page">The page of results to return.</param>
		/// <returns>OK</returns>
		public async Task List_all_project_snapshot_issue_pathsAsync(string orgId, string projectId, string snapshotId, string issueId, double perPage, double page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/history/"+ (snapshotId==null? "" : System.Uri.EscapeDataString(snapshotId))+"/issue/"+ (issueId==null? "" : System.Uri.EscapeDataString(issueId))+"/paths&perPage="+perPage+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete ignores
		/// Delete_ignores org/{orgId}/project/{projectId}/ignore/{issueId}
		/// </summary>
		/// <param name="orgId">Automatically added</param>
		/// <param name="projectId">Automatically added</param>
		/// <param name="issueId">Automatically added</param>
		/// <returns>OK</returns>
		public async Task Delete_ignoresAsync(string orgId, string projectId, string issueId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/ignore/"+ (issueId==null? "" : System.Uri.EscapeDataString(issueId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve ignore
		/// Retrieve_ignore org/{orgId}/project/{projectId}/ignore/{issueId}
		/// </summary>
		/// <param name="orgId">The organization ID to modify ignores for. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID to modify ignores for.</param>
		/// <param name="issueId">The issue ID to modify ignores for. Can be a vulnerability or a license Issue.</param>
		/// <returns>OK</returns>
		public async Task Retrieve_ignoreAsync(string orgId, string projectId, string issueId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/ignore/"+ (issueId==null? "" : System.Uri.EscapeDataString(issueId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add ignore
		/// Add_ignore org/{orgId}/project/{projectId}/ignore/{issueId}
		/// </summary>
		/// <param name="orgId">Automatically added</param>
		/// <param name="projectId">Automatically added</param>
		/// <param name="issueId">Automatically added</param>
		/// <returns>OK</returns>
		public async Task Add_ignoreAsync(string orgId, string projectId, string issueId, Add_ignorePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/ignore/"+ (issueId==null? "" : System.Uri.EscapeDataString(issueId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace ignores
		/// Replace_ignores org/{orgId}/project/{projectId}/ignore/{issueId}
		/// </summary>
		/// <param name="orgId">Automatically added</param>
		/// <param name="projectId">Automatically added</param>
		/// <param name="issueId">Automatically added</param>
		/// <returns>OK</returns>
		public async Task Replace_ignoresAsync(string orgId, string projectId, string issueId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/ignore/"+ (issueId==null? "" : System.Uri.EscapeDataString(issueId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all ignores
		/// Temporary ignores include an `expires` attribute, while permanent ignores do not.
		/// List_all_ignores org/{orgId}/project/{projectId}/ignores
		/// </summary>
		/// <param name="orgId">The organization ID to list ignores for. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID to list ignores for.</param>
		/// <returns>OK</returns>
		public async Task List_all_ignoresAsync(string orgId, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/ignores";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create jira issue
		/// Create_jira_issue org/{orgId}/project/{projectId}/issue/{issueId}/jira-issue
		/// </summary>
		/// <param name="issueId">The issue ID to create Jira issue for.</param>
		/// <param name="orgId">Automatically added</param>
		/// <param name="projectId">Automatically added</param>
		/// <returns>OK</returns>
		public async Task Create_jira_issueAsync(string issueId, string orgId, string projectId, Create_jira_issuePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/issue/"+ (issueId==null? "" : System.Uri.EscapeDataString(issueId))+"/jira-issue";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all project issue paths
		/// List_all_project_issue_paths org/{orgId}/project/{projectId}/issue/{issueId}/paths
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID for which to return issue paths.</param>
		/// <param name="issueId">The issue ID for which to return issue paths.</param>
		/// <param name="snapshotId">The project snapshot ID for which to return issue paths. If set to `latest`, the most recent snapshot will be used. Use the "List all project snapshots" endpoint to find suitable values for this.</param>
		/// <param name="perPage">The number of results to return per page (1 - 1000, inclusive).</param>
		/// <param name="page">The page of results to return.</param>
		/// <returns>OK</returns>
		public async Task List_all_project_issue_pathsAsync(string orgId, string projectId, string issueId, string snapshotId, double perPage, double page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/issue/"+ (issueId==null? "" : System.Uri.EscapeDataString(issueId))+"/paths&snapshotId=" + (snapshotId==null? "" : System.Uri.EscapeDataString(snapshotId))+"&perPage="+perPage+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all jira issues
		/// List_all_jira_issues org/{orgId}/project/{projectId}/jira-issues
		/// </summary>
		/// <param name="orgId">The organization ID to list Jira issues for. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID to list Jira issues for.</param>
		/// <returns>OK</returns>
		public async Task List_all_jira_issuesAsync(string orgId, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jira-issues";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Move project to a different organization
		/// Note: when moving a project to a new organization, the historical data used for reporting does not move with it.
		/// Move_project_to_a_different_organization org/{orgId}/project/{projectId}/move
		/// </summary>
		/// <param name="orgId">The organization ID to which the project belongs. The API_KEY must have group admin permissions. If the project is moved to a new group, a personal level API key is needed.</param>
		/// <param name="projectId">The project ID.</param>
		/// <returns>OK</returns>
		public async Task Move_project_to_a_different_organizationAsync(string orgId, string projectId, Move_project_to_a_different_organizationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/move";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete project settings
		/// Deleting project settings will set the project to inherit default settings from its integration.
		/// Delete_project_settings org/{orgId}/project/{projectId}/settings
		/// </summary>
		/// <param name="orgId">Automatically added</param>
		/// <param name="projectId">Automatically added</param>
		public async Task Delete_project_settingsAsync(string orgId, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List project settings
		/// List_project_settings org/{orgId}/project/{projectId}/settings
		/// </summary>
		/// <param name="orgId">The organization ID to which the project belongs. The API_KEY must have access to this organization.</param>
		/// <param name="projectId">The project ID</param>
		/// <returns>The response will contain only attributes that can be updated (see `ATTRIBUTES` section in `Update project settings`) and that have been previously set.</returns>
		public async Task List_project_settingsAsync(string orgId, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update project settings
		/// Update_project_settings org/{orgId}/project/{projectId}/settings
		/// </summary>
		/// <param name="orgId">Automatically added</param>
		/// <param name="projectId">Automatically added</param>
		/// <returns>The response will contain the attributes and values that have been sent in the request and successfully updated.</returns>
		public async Task Update_project_settingsAsync(string orgId, string projectId, Update_project_settingsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a tag to a project
		/// ​
		/// Add_a_tag_to_a_project org/{orgId}/project/{projectId}/tags
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID to apply the tag to</param>
		/// <returns>OK</returns>
		public async Task Add_a_tag_to_a_projectAsync(string orgId, string projectId, Add_a_tag_to_a_projectBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a tag from a project
		/// Remove_a_tag_from_a_project org/{orgId}/project/{projectId}/tags/remove
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID to remove a tag from</param>
		/// <returns>OK</returns>
		public async Task Remove_a_tag_from_a_projectAsync(string orgId, string projectId, Add_a_tag_to_a_projectBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/tags/remove";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all projects
		/// List_all_projects org/{orgId}/projects
		/// </summary>
		/// <param name="orgId">The organization ID to list projects for. The `API_KEY` must have access to this organization.</param>
		/// <returns>OK</returns>
		public async Task List_all_projectsAsync(string orgId, List_all_projectsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete pending user provision
		/// Delete_pending_user_provision org/{orgId}/provision
		/// </summary>
		/// <param name="orgId">The organization ID.</param>
		/// <returns>OK</returns>
		public async Task Delete_pending_user_provisionAsync(string orgId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/provision";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List pending user provisions
		/// List_pending_user_provisions org/{orgId}/provision
		/// </summary>
		/// <param name="orgId">The organization ID.</param>
		/// <returns>OK</returns>
		public async Task List_pending_user_provisionsAsync(string orgId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/provision";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provision a user to the organization
		/// Provision_a_user_to_the_organization org/{orgId}/provision
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must not exceed the permissions being granted to the provisioned user.</param>
		/// <returns>OK</returns>
		public async Task Provision_a_user_to_the_organizationAsync(string orgId, Provision_a_user_to_the_organizationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/provision";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View organization settings
		/// View_organization_settings org/{orgId}/settings
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <returns>OK</returns>
		public async Task View_organization_settingsAsync(string orgId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update organization settings
		/// Settings that are not provided will not be modified.
		/// Update_organization_settings org/{orgId}/settings
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have admin access to this organization.</param>
		/// <returns>OK</returns>
		public async Task Update_organization_settingsAsync(string orgId, Update_organization_settingsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List webhooks
		/// List_webhooks org/{orgId}/webhooks
		/// </summary>
		/// <param name="orgId">The organization ID to list projects for. The `API_KEY` must have access to this organization.</param>
		/// <returns>OK</returns>
		public async Task List_webhooksAsync(string orgId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a webhook
		/// Create_a_webhook org/{orgId}/webhooks
		/// </summary>
		/// <param name="orgId">The organization ID to list projects for. The `API_KEY` must have access to this organization.</param>
		/// <returns>OK</returns>
		public async Task Create_a_webhookAsync(string orgId, Create_a_webhookPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a webhook
		/// Delete_a_webhook org/{orgId}/webhooks/{webhookId}
		/// </summary>
		/// <param name="orgId">Automatically added</param>
		/// <param name="webhookId">Automatically added</param>
		/// <returns>OK</returns>
		public async Task Delete_a_webhookAsync(string orgId, string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a webhook
		/// Retrieve_a_webhook org/{orgId}/webhooks/{webhookId}
		/// </summary>
		/// <param name="orgId">The organization ID the project belongs to. The `API_KEY` must have access to this organization.</param>
		/// <param name="webhookId">The webhook ID.</param>
		/// <returns>OK</returns>
		public async Task Retrieve_a_webhookAsync(string orgId, string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Ping a webhook
		/// Ping_a_webhook org/{orgId}/webhooks/{webhookId}/ping
		/// </summary>
		/// <param name="orgId">The organization ID the project belongs to. The `API_KEY` must have access to this organization.</param>
		/// <param name="webhookId">The webhook ID.</param>
		/// <returns>OK</returns>
		public async Task Ping_a_webhookAsync(string orgId, string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId))+"/ping";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the organizations a user belongs to
		/// List_all_the_organizations_a_user_belongs_to orgs
		/// </summary>
		/// <returns>OK</returns>
		public async Task List_all_the_organizations_a_user_belongs_toAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get issue counts
		/// Get_issue_counts reporting/counts/issues
		/// </summary>
		/// <param name="from">The date you wish to fetch results from, in the format `YYYY-MM-DD`</param>
		/// <param name="to">The date you wish to fetch results until, in the format `YYYY-MM-DD`</param>
		/// <param name="groupBy">The field to group results by</param>
		/// <returns>OK</returns>
		public async Task Get_issue_countsAsync(string from, string to, Get_issue_countsGroupBy groupBy, Get_latest_issue_countsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reporting/counts/issues?from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&to=" + (to==null? "" : System.Uri.EscapeDataString(to))+"&groupBy=" + groupBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get latest issue counts
		/// Get_latest_issue_counts reporting/counts/issues/latest
		/// </summary>
		/// <param name="groupBy">The field to group results by</param>
		/// <returns>OK</returns>
		public async Task Get_latest_issue_countsAsync(Get_latest_issue_countsGroupBy groupBy, Get_latest_issue_countsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reporting/counts/issues/latest?groupBy=" + groupBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get project counts
		/// Get_project_counts reporting/counts/projects
		/// </summary>
		/// <param name="from">The date you wish to fetch results from, in the format `YYYY-MM-DD`</param>
		/// <param name="to">The date you wish to fetch results until, in the format `YYYY-MM-DD`</param>
		/// <returns>OK</returns>
		public async Task Get_project_countsAsync(string from, string to, Get_latest_project_countsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reporting/counts/projects?from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&to=" + (to==null? "" : System.Uri.EscapeDataString(to));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get latest project counts
		/// Get_latest_project_counts reporting/counts/projects/latest
		/// </summary>
		/// <returns>OK</returns>
		public async Task Get_latest_project_countsAsync(Get_latest_project_countsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reporting/counts/projects/latest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get test counts
		/// Get_test_counts reporting/counts/tests
		/// </summary>
		/// <param name="from">The date you wish to count tests from, in the format `YYYY-MM-DD`</param>
		/// <param name="to">The date you wish to count tests until, in the format `YYYY-MM-DD`</param>
		/// <param name="groupBy">The field to group results by</param>
		/// <returns>OK</returns>
		public async Task Get_test_countsAsync(string from, string to, Get_test_countsGroupBy groupBy, Get_test_countsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reporting/counts/tests?from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&to=" + (to==null? "" : System.Uri.EscapeDataString(to))+"&groupBy=" + groupBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get list of issues
		/// Get_list_of_issues reporting/issues/
		/// </summary>
		/// <param name="from">The date you wish to fetch results from, in the format `YYYY-MM-DD`</param>
		/// <param name="to">The date you wish to fetch results until, in the format `YYYY-MM-DD`</param>
		/// <param name="page">The page of results to request</param>
		/// <param name="perPage">The number of results to return per page (Maximum: 1000)</param>
		/// <param name="sortBy">The key to sort results by</param>
		/// <param name="order">The direction to sort results.</param>
		/// <param name="groupBy">Set to issue to group the same issue in multiple projects</param>
		/// <returns>OK</returns>
		public async Task Get_list_of_issuesAsync(string from, string to, double page, double perPage, Get_list_of_issuesSortBy sortBy, string order, Get_list_of_issuesGroupBy groupBy, Get_list_of_latest_issuesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reporting/issues/?from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&to=" + (to==null? "" : System.Uri.EscapeDataString(to))+"&page="+page+"&perPage="+perPage+"&sortBy=" + sortBy+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&groupBy=" + groupBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get list of latest issues
		/// Get_list_of_latest_issues reporting/issues/latest
		/// </summary>
		/// <param name="page">The page of results to request</param>
		/// <param name="perPage">The number of results to return per page (Maximum: 1000)</param>
		/// <param name="sortBy">The key to sort results by</param>
		/// <param name="order">The direction to sort results.</param>
		/// <param name="groupBy">Set to issue to group the same issue in multiple projects</param>
		/// <returns>OK</returns>
		public async Task Get_list_of_latest_issuesAsync(double page, double perPage, Get_list_of_issuesSortBy sortBy, string order, Get_list_of_issuesGroupBy groupBy, Get_list_of_latest_issuesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reporting/issues/latest?page="+page+"&perPage="+perPage+"&sortBy=" + sortBy+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&groupBy=" + groupBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test composer.json & composer.lock file
		/// You can test your Composer packages for issues according to their manifest file & lockfile using this action. It takes a JSON object containing a "target" `composer.json` and a `composer.lock`.
		/// Test_composer_json_And_composer_lock_file test/composer
		/// </summary>
		/// <returns>OK</returns>
		public async Task Test_composer_json_And_composer_lock_fileAsync(Test_composer_json_And_composer_lock_filePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/composer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test Dep Graph
		/// Use this endpoint to find issues in a [DepGraph data object](https://github.com/snyk/dep-graph#depgraphdata).
		/// Test_Dep_Graph test/dep-graph
		/// </summary>
		/// <param name="org">The organization to test the package with. See "The Snyk organization for a request" above.</param>
		/// <returns>OK</returns>
		public async Task Test_Dep_GraphAsync(string org, Test_Dep_GraphPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/dep-graph?org=" + (org==null? "" : System.Uri.EscapeDataString(org));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test Gopkg.toml & Gopkg.lock File
		/// You can test your Go dep packages for issues according to their manifest file & lockfile using this action. It takes a JSON object containing a "target" `Gopkg.toml` and a `Gopkg.lock`.
		/// Test_Gopkg_toml_And_Gopkg_lock_File test/golangdep
		/// </summary>
		/// <param name="org">The organization to test the package with. See "The Snyk organization for a request" above.</param>
		/// <returns>OK</returns>
		public async Task Test_Gopkg_toml_And_Gopkg_lock_FileAsync(string org, Test_Gopkg_toml_And_Gopkg_lock_FilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/golangdep?org=" + (org==null? "" : System.Uri.EscapeDataString(org));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test vendor.json File
		/// You can test your Go vendor packages for issues according to their manifest file using this action. It takes a JSON object containing a "target" `vendor.json`.
		/// Test_vendor_json_File test/govendor
		/// </summary>
		/// <returns>OK</returns>
		public async Task Test_vendor_json_FileAsync(Test_vendor_json_FilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/govendor";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test gradle file
		/// You can test your Gradle packages for issues according to their manifest file using this action. It takes a JSON object containing the "target" `build.gradle`.
		/// Test_gradle_file test/gradle
		/// </summary>
		/// <returns>OK</returns>
		public async Task Test_gradle_fileAsync(Test_gradle_filePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/gradle";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test for issues in a public package by group, name and version
		/// You can test `gradle` packages for issues according to their group, name and version. This is done via the maven endpoint (for Java), since the packages are hosted on maven central or a compatible repository. See "Maven" above for details.
		/// Test_for_issues_in_a_public_package_by_group__name_and_version test/gradle/{group}/{name}/{version}
		/// </summary>
		/// <param name="group">The package's group ID.</param>
		/// <param name="name">The package's artifact ID.</param>
		/// <param name="version">The package version to test.</param>
		/// <param name="org">The organization to test the package with. See "The Snyk organization for a request" above.</param>
		/// <param name="repository">The repository hosting this package. The default value is Maven Central. More than one value is supported, in order.</param>
		/// <returns>OK</returns>
		public async Task Test_for_issues_in_a_public_package_by_group__name_and_versionAsync(string group, string name, string version, string org, string repository, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/gradle/"+ (group==null? "" : System.Uri.EscapeDataString(group))+"/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"&org=" + (org==null? "" : System.Uri.EscapeDataString(org))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test maven file
		/// You can test your Maven packages for issues according to their manifest file using this action. It takes a JSON object containing a the "target" `pom.xml`.
		/// 
		/// Additional manifest files, if they are needed, like parent `pom.xml` files, child poms, etc., according the the definitions in the target `pom.xml` file, should be supplied in the `additional` body parameter.
		/// Test_maven_file test/maven
		/// </summary>
		/// <param name="org">The organization to test the package with. See "The Snyk organization for a request" above.</param>
		/// <param name="repository">The Maven repository hosting this package. The default value is Maven Central. More than one value is supported, in order.</param>
		/// <returns>OK</returns>
		public async Task Test_maven_fileAsync(string org, string repository, Test_maven_filePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/maven?org=" + (org==null? "" : System.Uri.EscapeDataString(org))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test for issues in a public package by group id, artifact id and version
		/// You can test `maven` packages for issues according to their [coordinates](https://maven.apache.org/pom.html#Maven_Coordinates): group ID, artifact ID and version. The repository hosting the package may also be customized (see the `repository` query parameter).
		/// Test_for_issues_in_a_public_package_by_group_id__artifact_id_and_version test/maven/{groupId}/{artifactId}/{version}
		/// </summary>
		/// <param name="groupId">The package's group ID.</param>
		/// <param name="artifactId">The package's artifact ID.</param>
		/// <param name="version">The package version to test.</param>
		/// <param name="org">The organization to test the package with. See "The Snyk organization for a request" above.</param>
		/// <param name="repository">The Maven repository hosting this package. The default value is Maven Central. More than one value is supported, in order.</param>
		/// <returns>OK</returns>
		public async Task Test_for_issues_in_a_public_package_by_group_id__artifact_id_and_versionAsync(string groupId, string artifactId, string version, string org, string repository, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/maven/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/"+ (artifactId==null? "" : System.Uri.EscapeDataString(artifactId))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"&org=" + (org==null? "" : System.Uri.EscapeDataString(org))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test package.json & package-lock.json File
		/// You can test your npm packages for issues according to their manifest file & optional lockfile using this action. It takes a JSON object containing a "target" `package.json` and optionally a `package-lock.json`.
		/// Test_package_json_And_package_lock_json_File test/npm
		/// </summary>
		/// <returns>OK</returns>
		public async Task Test_package_json_And_package_lock_json_FileAsync(Test_package_json_And_package_lock_json_FilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/npm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test for issues in a public package by name and version
		/// You can test `npm` packages for issues according to their name and version.
		/// Test_for_issues_in_a_public_package_by_name_and_version test/npm/{packageName}/{version}
		/// </summary>
		/// <param name="packageName">The package name. For scoped packages, **must** be url-encoded, so to test "@angular/core" version 4.3.2, one should `GET /test/npm/%40angular%2Fcore/4.3.2`.</param>
		/// <param name="version">The Package version to test.</param>
		/// <param name="org">The organization to test the package with. See "The Snyk organization for a request" above.</param>
		/// <returns>OK</returns>
		public async Task Test_for_issues_in_a_public_package_by_name_and_versionAsync(string packageName, string version, string org, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/npm/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"&org=" + (org==null? "" : System.Uri.EscapeDataString(org));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test requirements.txt file
		/// You can test your pip packages for issues according to their manifest file using this action. It takes a JSON object containing a the "target" `requirements.txt`.
		/// Test_requirements_txt_file test/pip
		/// </summary>
		/// <returns>OK</returns>
		public async Task Test_requirements_txt_fileAsync(Test_requirements_txt_filePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/pip";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test for issues in a public package by name and version
		/// You can test `pip` packages for issues according to their name and version.
		/// TestGetByPackageNameAndVersionAndOrg test/pip/{packageName}/{version}
		/// </summary>
		/// <param name="packageName">The package name.</param>
		/// <param name="version">The Package version to test.</param>
		/// <param name="org">The organization to test the package with. See "The Snyk organization for a request" above.</param>
		/// <returns>OK</returns>
		public async Task TestGetByPackageNameAndVersionAndOrgAsync(string packageName, string version, string org, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/pip/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"&org=" + (org==null? "" : System.Uri.EscapeDataString(org));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test gemfile.lock file
		/// You can test your rubygems applications for issues according to their lockfile using this action. It takes a JSON object containing a the "target" `Gemfile.lock`.
		/// Test_gemfile_lock_file test/rubygems
		/// </summary>
		/// <returns>OK</returns>
		public async Task Test_gemfile_lock_fileAsync(Test_gemfile_lock_filePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/rubygems";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test for issues in a public gem by name and version
		/// You can test `rubygems` packages for issues according to their name and version.
		/// Test_for_issues_in_a_public_gem_by_name_and_version test/rubygems/{gemName}/{version}
		/// </summary>
		/// <param name="gemName">The gem name.</param>
		/// <param name="version">The gem version to test.</param>
		/// <param name="org">The organization to test the package with. See "The Snyk organization for a request" above.</param>
		/// <returns>OK</returns>
		public async Task Test_for_issues_in_a_public_gem_by_name_and_versionAsync(string gemName, string version, string org, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/rubygems/"+ (gemName==null? "" : System.Uri.EscapeDataString(gemName))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"&org=" + (org==null? "" : System.Uri.EscapeDataString(org));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test sbt file
		/// You can test your `sbt` packages for issues according to their manifest file using this action. It takes a JSON object containing a the "target" `build.sbt`.
		/// Test_sbt_file test/sbt
		/// </summary>
		/// <returns>OK</returns>
		public async Task Test_sbt_fileAsync(Test_sbt_filePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/sbt";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test for issues in a public package by group id, artifact id and version
		/// You can test `sbt` packages for issues according to their group ID, artifact ID and version. This is done via the maven endpoint (for Java), since the packages are hosted on maven central or a compatible repository. See "Maven" above for details.
		/// TestGetByGroupIdAndArtifactIdAndVersionAndOrgAndRepository test/sbt/{groupId}/{artifactId}/{version}
		/// </summary>
		/// <param name="groupId">The package's group ID.</param>
		/// <param name="artifactId">The package's artifact ID.</param>
		/// <param name="version">The package version to test.</param>
		/// <param name="org">The organization to test the package with. See "The Snyk organization for a request" above.</param>
		/// <param name="repository">The repository hosting this package. The default value is Maven Central. More than one value is supported, in order.</param>
		/// <returns>OK</returns>
		public async Task TestGetByGroupIdAndArtifactIdAndVersionAndOrgAndRepositoryAsync(string groupId, string artifactId, string version, string org, string repository, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/sbt/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/"+ (artifactId==null? "" : System.Uri.EscapeDataString(artifactId))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"&org=" + (org==null? "" : System.Uri.EscapeDataString(org))+"&repository=" + (repository==null? "" : System.Uri.EscapeDataString(repository));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test package.json & yarn.lock File
		/// You can test your yarn packages for issues according to their manifest file & lockfile using this action. It takes a JSON object containing a "target" `package.json` and a `yarn.lock`.
		/// Test_package_json_And_yarn_lock_File test/yarn
		/// </summary>
		/// <returns>OK</returns>
		public async Task Test_package_json_And_yarn_lock_FileAsync(Test_package_json_And_yarn_lock_FilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "test/yarn";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get My Details
		/// Get_My_Details user/me
		/// </summary>
		/// <returns>OK</returns>
		public async Task Get_My_DetailsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get organization notification settings
		/// Get_organization_notification_settings user/me/notification-settings/org/{orgId}
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <returns>OK</returns>
		public async Task Get_organization_notification_settingsAsync(string orgId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/me/notification-settings/org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify organization notification settings
		/// Modify_organization_notification_settings user/me/notification-settings/org/{orgId}
		/// </summary>
		/// <param name="orgId">Automatically added</param>
		/// <returns>OK</returns>
		public async Task Modify_organization_notification_settingsAsync(string orgId, Modify_organization_notification_settingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/me/notification-settings/org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get project notification settings
		/// Get_project_notification_settings user/me/notification-settings/org/{orgId}/project/{projectId}
		/// </summary>
		/// <param name="orgId">The organization ID. The `API_KEY` must have access to this organization.</param>
		/// <param name="projectId">The project ID to return notification settings for.</param>
		/// <returns>OK</returns>
		public async Task Get_project_notification_settingsAsync(string orgId, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/me/notification-settings/org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify project notification settings
		/// Modify_project_notification_settings user/me/notification-settings/org/{orgId}/project/{projectId}
		/// </summary>
		/// <param name="orgId">Automatically added</param>
		/// <param name="projectId">Automatically added</param>
		/// <returns>OK</returns>
		public async Task Modify_project_notification_settingsAsync(string orgId, string projectId, Modify_project_notification_settingsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/me/notification-settings/org/"+ (orgId==null? "" : System.Uri.EscapeDataString(orgId))+"/project/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get User Details
		/// Get_User_Details user/{userId}
		/// </summary>
		/// <param name="userId">The users ID. The `API_KEY` must have admin access to at least one group or organization where the requested user is a member and must have the `api` entitlement on their preferred organization.</param>
		/// <returns>OK</returns>
		public async Task Get_User_DetailsAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class Get_group_level_audit_logsPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Get_group_level_audit_logsPostBodyFilters Filters { get; set; }
	}
	
	public class Get_group_level_audit_logsPostBodyFilters
	{
		
		/// <summary>
		/// User email address. Will fetch only audit logs originated from this user's actions. Ignored if the userId filter is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Will return only logs for this specific event. Only one of event and excludeEvent may be specified in a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public System.Nullable<Get_group_level_audit_logsPostBodyFiltersEvent> Event { get; set; }
		
		/// <summary>
		/// Will return logs except logs for this event. Only one of event and excludeEvent may be specified in a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeEvent")]
		public System.Nullable<Get_group_level_audit_logsPostBodyFiltersExcludeEvent> ExcludeEvent { get; set; }
		
		/// <summary>
		/// Will return only logs for this specific project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// User public ID. Will fetch only audit logs originated from this user's actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Get_group_level_audit_logsPostBodyFiltersEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="api.access")]
		api_access = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.cloud_config.settings.edit")]
		group_cloud_config_settings_edit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.create")]
		group_create = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.delete")]
		group_delete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.edit")]
		group_edit = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.feature_flags.edit")]
		group_feature_flags_edit = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.notification_settings.edit")]
		group_notification_settings_edit = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.org.add")]
		group_org_add = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.org.remove")]
		group_org_remove = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.policy.create")]
		group_policy_create = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.policy.delete")]
		group_policy_delete = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.policy.edit")]
		group_policy_edit = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.request_access_settings.edit")]
		group_request_access_settings_edit = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.role.create")]
		group_role_create = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.role.edit")]
		group_role_edit = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.service_account.create")]
		group_service_account_create = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.service_account.delete")]
		group_service_account_delete = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.service_account.edit")]
		group_service_account_edit = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.settings.edit")]
		group_settings_edit = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.settings.feature_flag.edit")]
		group_settings_feature_flag_edit = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.auth0_connection.create")]
		group_sso_auth0_connection_create = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.auth0_connection.edit")]
		group_sso_auth0_connection_edit = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.add")]
		group_sso_add = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.create")]
		group_sso_create = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.delete")]
		group_sso_delete = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.edit")]
		group_sso_edit = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.membership.sync")]
		group_sso_membership_sync = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.remove")]
		group_sso_remove = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.tag.create")]
		group_tag_create = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.tag.delete")]
		group_tag_delete = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.add")]
		group_user_add = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.provision.accept")]
		group_user_provision_accept = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.provision.create")]
		group_user_provision_create = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.provision.delete")]
		group_user_provision_delete = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.remove")]
		group_user_remove = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.role.edit")]
		group_user_role_edit = 35,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Get_group_level_audit_logsPostBodyFiltersExcludeEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="api.access")]
		api_access = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.cloud_config.settings.edit")]
		group_cloud_config_settings_edit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.create")]
		group_create = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.delete")]
		group_delete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.edit")]
		group_edit = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.feature_flags.edit")]
		group_feature_flags_edit = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.notification_settings.edit")]
		group_notification_settings_edit = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.org.add")]
		group_org_add = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.org.remove")]
		group_org_remove = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.policy.create")]
		group_policy_create = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.policy.delete")]
		group_policy_delete = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.policy.edit")]
		group_policy_edit = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.request_access_settings.edit")]
		group_request_access_settings_edit = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.role.create")]
		group_role_create = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.role.edit")]
		group_role_edit = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.service_account.create")]
		group_service_account_create = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.service_account.delete")]
		group_service_account_delete = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.service_account.edit")]
		group_service_account_edit = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.settings.edit")]
		group_settings_edit = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.settings.feature_flag.edit")]
		group_settings_feature_flag_edit = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.auth0_connection.create")]
		group_sso_auth0_connection_create = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.auth0_connection.edit")]
		group_sso_auth0_connection_edit = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.add")]
		group_sso_add = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.create")]
		group_sso_create = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.delete")]
		group_sso_delete = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.edit")]
		group_sso_edit = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.membership.sync")]
		group_sso_membership_sync = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.sso.remove")]
		group_sso_remove = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.tag.create")]
		group_tag_create = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.tag.delete")]
		group_tag_delete = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.add")]
		group_user_add = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.provision.accept")]
		group_user_provision_accept = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.provision.create")]
		group_user_provision_create = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.provision.delete")]
		group_user_provision_delete = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.remove")]
		group_user_remove = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="group.user.role.edit")]
		group_user_role_edit = 35,
	}
	
	public class Add_a_member_to_an_organization_within_a_groupPostBody
	{
		
		/// <summary>
		/// The role of the user, "admin" or "collaborator".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// The id of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	public class Delete_tag_from_groupPostBody
	{
		
		/// <summary>
		/// force delete tag that has entities (default is `false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force")]
		public System.Nullable<System.Boolean> Force { get; set; }
		
		/// <summary>
		/// Valid tag key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Valid tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class Monitor_Dep_GraphPostBody
	{
		
		/// <summary>
		/// A [DepGraph data object](https://github.com/snyk/dep-graph#depgraphdata) defining all packages and their relationships.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="depGraph")]
		public Monitor_Dep_GraphPostBodyDepGraph DepGraph { get; set; }
		
		/// <summary>
		/// Project metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Monitor_Dep_GraphPostBodyMeta Meta { get; set; }
	}
	
	public class Monitor_Dep_GraphPostBodyDepGraph
	{
		
		/// <summary>
		/// Graph object references each pkg and how they depend on each other through the deps property.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="graph")]
		public Monitor_Dep_GraphPostBodyDepGraphGraph Graph { get; set; }
		
		/// <summary>
		/// Package manager information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgManager")]
		public Monitor_Dep_GraphPostBodyDepGraphPkgManager PkgManager { get; set; }
		
		/// <summary>
		/// Array of package dependencies.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgs")]
		public string[] Pkgs { get; set; }
		
		/// <summary>
		/// Snyk DepGraph library schema version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
	}
	
	public class Monitor_Dep_GraphPostBodyDepGraphGraph
	{
		
		/// <summary>
		/// Array of node objects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public string[] Nodes { get; set; }
		
		/// <summary>
		/// Root node id. Note the root node name is used as your project name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rootNodeId")]
		public string RootNodeId { get; set; }
	}
	
	public class Monitor_Dep_GraphPostBodyDepGraphPkgManager
	{
		
		/// <summary>
		/// Package manager name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of package repositories (i.e. maven-central, or npm) that defaults to the canonical package registry for the given package manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public string[] Repositories { get; set; }
	}
	
	public class Monitor_Dep_GraphPostBodyMeta
	{
		
		/// <summary>
		/// Required for a NuGet or Paket DepGraph only. Specify the target framework in your project file using Target Framework Monikers (TFMs). For example, netstandard1.0, netcoreapp1.0 or net452. Test each framework separately if you have multiple defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetFramework")]
		public string TargetFramework { get; set; }
	}
	
	public class Create_a_new_organizationPostBody
	{
		
		/// <summary>
		/// The group ID. The `API_KEY` must have access to this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		/// <summary>
		/// The name of the new organization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The id of an organization to copy settings from.
		///
		///If provided, this organization must be associated with the same group.
		///
		///The items that will be copied are: 
		///Source control integrations (GitHub, GitLab, BitBucket)
		///\+ Container registries integrations (ACR, Docker Hub, ECR, GCR)
		///\+ Container orchestrators integrations (Kubernetes)
		///\+ PaaS and Serverless Integrations (Heroku, AWS Lambda)
		///\+ Notification integrations (Slack, Jira)
		///\+ Policies
		///\+ Ignore settings
		///\+ Language settings
		///\+ Infrastructure as Code settings
		///\+ Snyk Code settings
		///
		///The following will not be copied across:
		///Service accounts
		///\+ Members
		///\+ Projects
		///\+ Notification preferences
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceOrgId")]
		public string SourceOrgId { get; set; }
	}
	
	public class Get_organization_level_audit_logsPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Get_organization_level_audit_logsPostBodyFilters Filters { get; set; }
	}
	
	public class Get_organization_level_audit_logsPostBodyFilters
	{
		
		/// <summary>
		/// User email address. Will fetch only audit logs originated from this user's actions. Ignored if the userId filter is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Will return only logs for this specific event. Only one of event and excludeEvent may be specified in a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public System.Nullable<Get_organization_level_audit_logsPostBodyFiltersEvent> Event { get; set; }
		
		/// <summary>
		/// Will return logs except logs for this event. Only one of event and excludeEvent may be specified in a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeEvent")]
		public System.Nullable<Get_organization_level_audit_logsPostBodyFiltersExcludeEvent> ExcludeEvent { get; set; }
		
		/// <summary>
		/// Will return only logs for this specific project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// User public ID. Will fetch only audit logs originated from this user's actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Get_organization_level_audit_logsPostBodyFiltersEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="api.access")]
		api_access = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.cloud_config.settings.edit")]
		org_cloud_config_settings_edit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.create")]
		org_create = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.delete")]
		org_delete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.edit")]
		org_edit = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.ignore_policy.edit")]
		org_ignore_policy_edit = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.create")]
		org_integration_create = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.delete")]
		org_integration_delete = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.edit")]
		org_integration_edit = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.settings.edit")]
		org_integration_settings_edit = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.language_settings.edit")]
		org_language_settings_edit = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.license_rule.create")]
		org_license_rule_create = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.license_rule.delete")]
		org_license_rule_delete = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.license_rule.edit")]
		org_license_rule_edit = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.notification_settings.edit")]
		org_notification_settings_edit = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.org_source.create")]
		org_org_source_create = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.org_source.delete")]
		org_org_source_delete = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.org_source.edit")]
		org_org_source_edit = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.policy.edit")]
		org_policy_edit = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.add")]
		org_project_add = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.attributes.edit")]
		org_project_attributes_edit = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.delete")]
		org_project_delete = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.edit")]
		org_project_edit = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.fix_pr.auto_open")]
		org_project_fix_pr_auto_open = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.fix_pr.manual_open")]
		org_project_fix_pr_manual_open = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.ignore.create")]
		org_project_ignore_create = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.ignore.delete")]
		org_project_ignore_delete = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.ignore.edit")]
		org_project_ignore_edit = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.monitor")]
		org_project_monitor = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.pr_check.edit")]
		org_project_pr_check_edit = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.remove")]
		org_project_remove = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.settings.delete")]
		org_project_settings_delete = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.settings.edit")]
		org_project_settings_edit = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.stop_monitor")]
		org_project_stop_monitor = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.tag.add")]
		org_project_tag_add = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.tag.remove")]
		org_project_tag_remove = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.test")]
		org_project_test = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.request_access_settings.edit")]
		org_request_access_settings_edit = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.sast_settings.edit")]
		org_sast_settings_edit = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.create")]
		org_service_account_create = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.delete")]
		org_service_account_delete = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.edit")]
		org_service_account_edit = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.membership.upsert")]
		org_service_account_membership_upsert = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.settings.feature_flag.edit")]
		org_settings_feature_flag_edit = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.target.create")]
		org_target_create = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.target.delete")]
		org_target_delete = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.add")]
		org_user_add = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite")]
		org_user_invite = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite.accept")]
		org_user_invite_accept = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite.revoke")]
		org_user_invite_revoke = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite_link.accept")]
		org_user_invite_link_accept = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite_link.create")]
		org_user_invite_link_create = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite_link.revoke")]
		org_user_invite_link_revoke = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.leave")]
		org_user_leave = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.provision.accept")]
		org_user_provision_accept = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.provision.create")]
		org_user_provision_create = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.provision.delete")]
		org_user_provision_delete = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.remove")]
		org_user_remove = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.create")]
		org_user_role_create = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.delete")]
		org_user_role_delete = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.details.edit")]
		org_user_role_details_edit = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.edit")]
		org_user_role_edit = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.permissions.edit")]
		org_user_role_permissions_edit = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.webhook.add")]
		org_webhook_add = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.webhook.delete")]
		org_webhook_delete = 64,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Get_organization_level_audit_logsPostBodyFiltersExcludeEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="api.access")]
		api_access = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.cloud_config.settings.edit")]
		org_cloud_config_settings_edit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.create")]
		org_create = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.delete")]
		org_delete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.edit")]
		org_edit = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.ignore_policy.edit")]
		org_ignore_policy_edit = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.create")]
		org_integration_create = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.delete")]
		org_integration_delete = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.edit")]
		org_integration_edit = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.integration.settings.edit")]
		org_integration_settings_edit = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.language_settings.edit")]
		org_language_settings_edit = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.license_rule.create")]
		org_license_rule_create = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.license_rule.delete")]
		org_license_rule_delete = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.license_rule.edit")]
		org_license_rule_edit = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.notification_settings.edit")]
		org_notification_settings_edit = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.org_source.create")]
		org_org_source_create = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.org_source.delete")]
		org_org_source_delete = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.org_source.edit")]
		org_org_source_edit = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.policy.edit")]
		org_policy_edit = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.add")]
		org_project_add = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.attributes.edit")]
		org_project_attributes_edit = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.delete")]
		org_project_delete = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.edit")]
		org_project_edit = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.fix_pr.auto_open")]
		org_project_fix_pr_auto_open = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.fix_pr.manual_open")]
		org_project_fix_pr_manual_open = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.ignore.create")]
		org_project_ignore_create = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.ignore.delete")]
		org_project_ignore_delete = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.ignore.edit")]
		org_project_ignore_edit = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.monitor")]
		org_project_monitor = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.pr_check.edit")]
		org_project_pr_check_edit = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.remove")]
		org_project_remove = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.settings.delete")]
		org_project_settings_delete = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.settings.edit")]
		org_project_settings_edit = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.stop_monitor")]
		org_project_stop_monitor = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.tag.add")]
		org_project_tag_add = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.tag.remove")]
		org_project_tag_remove = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.project.test")]
		org_project_test = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.request_access_settings.edit")]
		org_request_access_settings_edit = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.sast_settings.edit")]
		org_sast_settings_edit = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.create")]
		org_service_account_create = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.delete")]
		org_service_account_delete = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.edit")]
		org_service_account_edit = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.service_account.membership.upsert")]
		org_service_account_membership_upsert = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.settings.feature_flag.edit")]
		org_settings_feature_flag_edit = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.target.create")]
		org_target_create = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.target.delete")]
		org_target_delete = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.add")]
		org_user_add = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite")]
		org_user_invite = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite.accept")]
		org_user_invite_accept = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite.revoke")]
		org_user_invite_revoke = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite_link.accept")]
		org_user_invite_link_accept = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite_link.create")]
		org_user_invite_link_create = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.invite_link.revoke")]
		org_user_invite_link_revoke = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.leave")]
		org_user_leave = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.provision.accept")]
		org_user_provision_accept = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.provision.create")]
		org_user_provision_create = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.provision.delete")]
		org_user_provision_delete = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.remove")]
		org_user_remove = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.create")]
		org_user_role_create = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.delete")]
		org_user_role_delete = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.details.edit")]
		org_user_role_details_edit = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.edit")]
		org_user_role_edit = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.user.role.permissions.edit")]
		org_user_role_permissions_edit = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.webhook.add")]
		org_webhook_add = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="org.webhook.delete")]
		org_webhook_delete = 64,
	}
	
	public enum List_all_dependenciesSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projects = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dependency = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		severity = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dependenciesWithIssues = 3,
	}
	
	public enum List_all_dependenciesOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	public class List_all_dependenciesPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public List_all_dependenciesPostBodyFilters Filters { get; set; }
	}
	
	public class List_all_dependenciesPostBodyFilters
	{
		
		/// <summary>
		/// Status of the dependency. Requires reporting entitlement. Options: `deprecated` - Include only deprecated packages; `notDeprecated` - Include all packages that are not marked as deprecated; `any` - Include all packages (default)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="depStatus")]
		public string DepStatus { get; set; }
		
		/// <summary>
		/// The list of dependency IDs to filter the results by (i.e amdefine@1.0.1 or org.javassist:javassist@3.18.1-GA)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public object Dependencies { get; set; }
		
		/// <summary>
		/// The type of languages to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The list of license IDs to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenses")]
		public object Licenses { get; set; }
		
		/// <summary>
		/// The list of project IDs to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public object Projects { get; set; }
		
		/// <summary>
		/// The severities to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string[] Severity { get; set; }
	}
	
	public enum Get_an_organization_s_entitlement_valueEntitlementKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		licenses = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reports = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fullVulnDB = 2,
	}
	
	public class Add_new_integrationPostBody
	{
		
		/// <summary>
		/// credentials for given integration
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public string Credentials { get; set; }
		
		/// <summary>
		/// integration type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Add_new_integrationPostBodyType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Add_new_integrationPostBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		acr = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artifactory-cr")]
		artifactoryMinuscr = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="azure-repos")]
		azureMinusrepos = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bitbucket-cloud")]
		bitbucketMinuscloud = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bitbucket-server")]
		bitbucketMinusserver = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digitalocean-cr")]
		digitaloceanMinuscr = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="docker-hub")]
		dockerMinushub = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ecr = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gcr = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		github = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="github-cr")]
		githubMinuscr = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="github-enterprise")]
		githubMinusenterprise = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gitlab = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gitlab-cr")]
		gitlabMinuscr = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="google-artifact-cr")]
		googleMinusartifactMinuscr = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="harbor-cr")]
		harborMinuscr = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nexus-cr")]
		nexusMinuscr = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quay-cr")]
		quayMinuscr = 17,
	}
	
	public class Update_existing_integrationPutBody
	{
		
		/// <summary>
		/// brokered integration settings
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="broker")]
		public Update_existing_integrationPutBodyBroker Broker { get; set; }
		
		/// <summary>
		/// integration type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Update_existing_integrationPutBodyType Type { get; set; }
	}
	
	public class Update_existing_integrationPutBodyBroker
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Update_existing_integrationPutBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		acr = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artifactory-cr")]
		artifactoryMinuscr = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="azure-repos")]
		azureMinusrepos = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bitbucket-cloud")]
		bitbucketMinuscloud = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bitbucket-server")]
		bitbucketMinusserver = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="digitalocean-cr")]
		digitaloceanMinuscr = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="docker-hub")]
		dockerMinushub = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ecr = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gcr = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		github = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="github-cr")]
		githubMinuscr = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="github-enterprise")]
		githubMinusenterprise = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gitlab = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gitlab-cr")]
		gitlabMinuscr = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="google-artifact-cr")]
		googleMinusartifactMinuscr = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="harbor-cr")]
		harborMinuscr = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nexus-cr")]
		nexusMinuscr = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quay-cr")]
		quayMinuscr = 17,
	}
	
	public class Clone_an_integration_with_settings_and_credentialsPostBody
	{
		
		/// <summary>
		/// The organization public ID. The `API_KEY` must have access to this organization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationOrgPublicId")]
		public string DestinationOrgPublicId { get; set; }
	}
	
	public class Import_targetsPostBody
	{
		
		/// <summary>
		/// a comma-separated list of up to 10 folder names to exclude from scanning (each folder name must not exceed 100 characters). If not specified, it will default to "fixtures, tests, \_\_tests\_\_, node_modules". If an empty string is provided - no folders will be excluded. This attribute is only respected with Open Source and Container scan targets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclusionGlobs")]
		public string ExclusionGlobs { get; set; }
		
		/// <summary>
		/// an array of file objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public string[] Files { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Import_targetsPostBodyTarget Target { get; set; }
	}
	
	public class Import_targetsPostBodyTarget
	{
		
		/// <summary>
		/// default branch of the repo (Please contact support if you want to import a non default repo branch)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; }
		
		/// <summary>
		/// name of the repo
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// for Github: account owner of the repository; for Azure Repos, this is `Project ID`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
	}
	
	public class UpdatePutBody
	{
		
		/// <summary>
		/// Defines if the functionality is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeEnabled")]
		public System.Nullable<System.Boolean> AutoDepUpgradeEnabled { get; set; }
		
		/// <summary>
		/// A list of strings defining what dependencies should be ignored
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeIgnoredDependencies")]
		public string[] AutoDepUpgradeIgnoredDependencies { get; set; }
		
		/// <summary>
		/// A limit on how many automatic dependency upgrade PRs can be opened simultaneously
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeLimit")]
		public System.Nullable<System.Double> AutoDepUpgradeLimit { get; set; }
		
		/// <summary>
		/// The age (in days) that an automatic dependency check is valid for
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeMinAge")]
		public System.Nullable<System.Double> AutoDepUpgradeMinAge { get; set; }
		
		/// <summary>
		/// Defines automatic remediation policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRemediationPrs")]
		public UpdatePutBodyAutoRemediationPrs AutoRemediationPrs { get; set; }
		
		/// <summary>
		/// If true, will automatically detect and scan Dockerfiles in your Git repositories, surface base image vulnerabilities and recommend possible fixes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockerfileSCMEnabled")]
		public System.Nullable<System.Boolean> DockerfileSCMEnabled { get; set; }
		
		/// <summary>
		/// Defines manual remediation policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualRemediationPrs")]
		public UpdatePutBodyManualRemediationPrs ManualRemediationPrs { get; set; }
		
		/// <summary>
		/// assign Snyk pull requests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestAssignment")]
		public UpdatePutBodyPullRequestAssignment PullRequestAssignment { get; set; }
		
		/// <summary>
		/// If an opened PR should fail to be validated if any vulnerable dependencies have been detected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestFailOnAnyVulns")]
		public System.Nullable<System.Boolean> PullRequestFailOnAnyVulns { get; set; }
		
		/// <summary>
		/// If an opened PR only should fail its validation if any dependencies are marked as being of high severity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestFailOnlyForHighSeverity")]
		public System.Nullable<System.Boolean> PullRequestFailOnlyForHighSeverity { get; set; }
		
		/// <summary>
		/// If opened PRs should be tested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestTestEnabled")]
		public System.Nullable<System.Boolean> PullRequestTestEnabled { get; set; }
	}
	
	public class UpdatePutBodyAutoRemediationPrs
	{
		
		/// <summary>
		/// If true, allows automatic remediation of prioritized backlog issues
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backlogPrsEnabled")]
		public System.Nullable<System.Boolean> BacklogPrsEnabled { get; set; }
		
		/// <summary>
		/// If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshPrsEnabled")]
		public System.Nullable<System.Boolean> FreshPrsEnabled { get; set; }
		
		/// <summary>
		/// If true, allows using patched remediation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usePatchRemediation")]
		public System.Nullable<System.Boolean> UsePatchRemediation { get; set; }
	}
	
	public class UpdatePutBodyManualRemediationPrs
	{
		
		/// <summary>
		/// If true, allows using patched remediation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usePatchRemediation")]
		public System.Nullable<System.Boolean> UsePatchRemediation { get; set; }
	}
	
	public class UpdatePutBodyPullRequestAssignment
	{
		
		/// <summary>
		/// an array of usernames that have contributed to the organization's project(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignees")]
		public string[] Assignees { get; set; }
		
		/// <summary>
		/// if the organization's project(s) will assign Snyk pull requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// a string representing the type of assignment your projects require.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AssignmentType Type { get; set; }
	}
	
	public class Invite_usersPostBody
	{
		
		/// <summary>
		/// The email of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// (optional) Set the role as admin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAdmin")]
		public System.Nullable<System.Boolean> IsAdmin { get; set; }
	}
	
	public enum List_all_licensesSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		license = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dependencies = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projects = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		severity = 3,
	}
	
	public class List_all_licensesPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public List_all_licensesPostBodyFilters Filters { get; set; }
	}
	
	public class List_all_licensesPostBodyFilters
	{
		
		/// <summary>
		/// The list of dependency IDs to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public object Dependencies { get; set; }
		
		/// <summary>
		/// The type of languages to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The list of license IDs to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenses")]
		public object Licenses { get; set; }
		
		/// <summary>
		/// The list of project IDs to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public object Projects { get; set; }
		
		/// <summary>
		/// The severities to filter the results by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string[] Severity { get; set; }
	}
	
	public class Update_a_member_s_role_in_the_organizationPutBody
	{
		
		/// <summary>
		/// The new role public ID to update the user to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolePublicId")]
		public string RolePublicId { get; set; }
	}
	
	public class Update_a_member_in_the_organizationPutBody
	{
		
		/// <summary>
		/// The new role of the user, "admin" or "collaborator".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	public class Update_a_projectPutBody
	{
		
		/// <summary>
		/// The branch that this project should be monitoring
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; }
		
		/// <summary>
		/// Set to `null` to remove all ownership. User must be a member of the same organization as the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Update_a_projectPutBodyOwner Owner { get; set; }
	}
	
	public class Update_a_projectPutBodyOwner
	{
		
		/// <summary>
		/// A user to assign as the project owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class Applying_attributesPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="criticality")]
		public string[] Criticality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string[] Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycle")]
		public string[] Lifecycle { get; set; }
	}
	
	public class List_all_project_snapshotsPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public List_all_project_snapshotsPostBodyFilters Filters { get; set; }
	}
	
	public class List_all_project_snapshotsPostBodyFilters
	{
		
		/// <summary>
		/// For container projects, filter by the ID of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public string ImageId { get; set; }
	}
	
	public class Add_ignorePostBody
	{
		
		/// <summary>
		/// Only ignore the issue if no upgrade or patch is available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disregardIfFixable")]
		public bool DisregardIfFixable { get; set; }
		
		/// <summary>
		/// The timestamp that the issue will no longer be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public string Expires { get; set; }
		
		/// <summary>
		/// The path to ignore (default is `*` which represents all paths).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignorePath")]
		public string IgnorePath { get; set; }
		
		/// <summary>
		/// The reason that the issue was ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The classification of the ignore.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reasonType")]
		public Add_ignorePostBodyReasonType ReasonType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Add_ignorePostBodyReasonType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-vulnerable")]
		notMinusvulnerable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wont-fix")]
		wontMinusfix = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="temporary-ignore")]
		temporaryMinusignore = 2,
	}
	
	public class Create_jira_issuePostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public Create_jira_issuePostBodyFields Fields { get; set; }
	}
	
	public class Create_jira_issuePostBodyFields
	{
		
		/// <summary>
		/// See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-post for details of what to send as fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuetype")]
		public string Issuetype { get; set; }
		
		/// <summary>
		/// See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-post for details of what to send as fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		/// <summary>
		/// See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-post for details of what to send as fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	public class Move_project_to_a_different_organizationPutBody
	{
		
		/// <summary>
		/// The ID of the organization that the project should be moved to. The API_KEY must have group admin permissions. If the project is moved to a new group, a personal level API key is needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetOrgId")]
		public string TargetOrgId { get; set; }
	}
	
	public class Update_project_settingsPutBody
	{
		
		/// <summary>
		/// If set to `true`, Snyk will raise dependency upgrade PRs automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeEnabled")]
		public System.Nullable<System.Boolean> AutoDepUpgradeEnabled { get; set; }
		
		/// <summary>
		/// An array of comma-separated strings with names of dependencies you wish Snyk to ignore to upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeIgnoredDependencies")]
		public string[] AutoDepUpgradeIgnoredDependencies { get; set; }
		
		/// <summary>
		/// The limit on auto dependency upgrade PRs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeLimit")]
		public System.Nullable<System.Double> AutoDepUpgradeLimit { get; set; }
		
		/// <summary>
		/// The age (in days) that an automatic dependency check is valid for
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDepUpgradeMinAge")]
		public System.Nullable<System.Double> AutoDepUpgradeMinAge { get; set; }
		
		/// <summary>
		/// Defines automatic remediation policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRemediationPrs")]
		public Update_project_settingsPutBodyAutoRemediationPrs AutoRemediationPrs { get; set; }
		
		/// <summary>
		/// assign Snyk pull requests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestAssignment")]
		public Update_project_settingsPutBodyPullRequestAssignment PullRequestAssignment { get; set; }
		
		/// <summary>
		/// If set to `true`, fail Snyk Test if the repo has any vulnerabilities. Otherwise, fail only when the PR is adding a vulnerable dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestFailOnAnyVulns")]
		public System.Nullable<System.Boolean> PullRequestFailOnAnyVulns { get; set; }
		
		/// <summary>
		/// If set to `true`, fail Snyk Test only for high and critical severity vulnerabilities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestFailOnlyForHighSeverity")]
		public System.Nullable<System.Boolean> PullRequestFailOnlyForHighSeverity { get; set; }
		
		/// <summary>
		/// If set to `true`, Snyk Test checks PRs for vulnerabilities.:cq
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestTestEnabled")]
		public System.Nullable<System.Boolean> PullRequestTestEnabled { get; set; }
	}
	
	public class Update_project_settingsPutBodyAutoRemediationPrs
	{
		
		/// <summary>
		/// If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backlogPrsEnabled")]
		public System.Nullable<System.Boolean> BacklogPrsEnabled { get; set; }
		
		/// <summary>
		/// If true, allows automatic remediation of prioritized backlog issues
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freshPrsEnabled")]
		public System.Nullable<System.Boolean> FreshPrsEnabled { get; set; }
		
		/// <summary>
		/// If true, allows using patched remediation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usePatchRemediation")]
		public System.Nullable<System.Boolean> UsePatchRemediation { get; set; }
	}
	
	public class Update_project_settingsPutBodyPullRequestAssignment
	{
		
		/// <summary>
		/// an array of usernames that have contributed to the organization's project(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignees")]
		public string[] Assignees { get; set; }
		
		/// <summary>
		/// if the organization's project(s) will assign Snyk pull requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// a string representing the type of assignment your projects require.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AssignmentType Type { get; set; }
	}
	
	public class List_all_projectsPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public List_all_projectsPostBodyFilters Filters { get; set; }
	}
	
	public class List_all_projectsPostBodyFilters
	{
		
		/// <summary>
		/// When you filter by multiple values on a single attribute, you will return projects that have been assigned one or more of the values in the filter.
		///
		///When you filter by multiple attributes, you will return projects which have been assigned values of both attributes in the filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public List_all_projectsPostBodyFiltersAttributes Attributes { get; set; }
		
		/// <summary>
		/// If set to `true`, only include projects which are monitored, if set to `false`, only include projects which are not monitored
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMonitored")]
		public System.Nullable<System.Boolean> IsMonitored { get; set; }
		
		/// <summary>
		/// If supplied, only projects that have a name that **starts with** this value will be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If supplied, only projects that exactly match this origin will be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public List_all_projectsPostBodyFiltersTags Tags { get; set; }
		
		/// <summary>
		/// If supplied, only projects that exactly match this type will be returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class List_all_projectsPostBodyFiltersAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="criticality")]
		public string[] Criticality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string[] Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycle")]
		public string[] Lifecycle { get; set; }
	}
	
	public class List_all_projectsPostBodyFiltersTags
	{
		
		/// <summary>
		/// A project must have all provided tags in order to be included in the response. A maximum of 3 tags can be supplied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public string[] Includes { get; set; }
	}
	
	public class Provision_a_user_to_the_organizationPostBody
	{
		
		/// <summary>
		/// The email of the user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Deprecated. Name of the role to grant this user. Must be one of `ADMIN`, `COLLABORATOR`, or `RESTRICTED_COLLABORATOR`. This field is invalid if `rolePublicId` is supplied with the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// ID of the role to grant this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolePublicId")]
		public string RolePublicId { get; set; }
	}
	
	public class Update_organization_settingsPutBody
	{
		
		/// <summary>
		/// Can only be updated if `API_KEY` has edit access to request access settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAccess")]
		public Update_organization_settingsPutBodyRequestAccess RequestAccess { get; set; }
	}
	
	public class Update_organization_settingsPutBodyRequestAccess
	{
		
		/// <summary>
		/// Whether requesting access to the organization is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	public class Create_a_webhookPostBody
	{
		
		/// <summary>
		/// This is a password you create, that Snyk uses to sign our transports to you, so you be sure the notification is authentic. Your `secret` should: Be a random string with high entropy; Not be used for anything else; Only known to Snyk and your webhook transport consuming code;
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		/// <summary>
		/// Webhooks can only be configured for URLs using the `https` protocol. `http` is not allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public enum Get_issue_countsGroupBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		severity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fixable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="project,[severity|fixable]")]
		project_severity_fixable = 2,
	}
	
	public enum Get_latest_issue_countsGroupBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		severity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fixable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="project,[severity|fixable]")]
		project_severity_fixable = 2,
	}
	
	public enum Get_test_countsGroupBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		isPrivate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		issuesPrevented = 1,
	}
	
	public class Get_test_countsPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Get_test_countsPostBodyFilters Filters { get; set; }
	}
	
	public class Get_test_countsPostBodyFilters
	{
		
		/// <summary>
		/// If set to `true`, only include tests which were conducted against private projects, if set to `false` only include tests which were conducted against public projects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPrivate")]
		public System.Nullable<System.Boolean> IsPrivate { get; set; }
		
		/// <summary>
		/// If set to `true`, only include tests which prevented issues from being introduced, if set to `false` only include tests which did not prevent issues from being introduced
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuesPrevented")]
		public System.Nullable<System.Boolean> IssuesPrevented { get; set; }
		
		/// <summary>
		/// The list of org IDs to filter the results by
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgs")]
		public object Orgs { get; set; }
		
		/// <summary>
		/// The list of project IDs to filter issues by, max projects allowed is 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public object Projects { get; set; }
	}
	
	public enum Get_list_of_issuesSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		severity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		issueTitle = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projectName = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		isFixed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		isPatched = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		isIgnored = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		introducedDate = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		isUpgradable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		isPatchable = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		priorityScore = 9,
	}
	
	public enum Get_list_of_issuesGroupBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		issue = 0,
	}
	
	public class Test_composer_json_And_composer_lock_filePostBody
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.ComponentModel.DefaultValue(Gradle_request_payloadEncoding.base64)]
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; } = Gradle_request_payloadEncoding.base64;
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Test_composer_json_And_composer_lock_filePostBodyFiles Files { get; set; }
	}
	
	public class Test_composer_json_And_composer_lock_filePostBodyFiles
	{
		
		/// <summary>
		/// a lockfile encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="additional")]
		public string[] Additional { get; set; }
		
		/// <summary>
		/// the `composer.json` file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Test_composer_json_And_composer_lock_filePostBodyFilesTarget Target { get; set; }
	}
	
	public class Test_composer_json_And_composer_lock_filePostBodyFilesTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	public class Test_Dep_GraphPostBody
	{
		
		/// <summary>
		/// A [DepGraph data object](https://github.com/snyk/dep-graph#depgraphdata) defining all packages and their relationships.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="depGraph")]
		public Test_Dep_GraphPostBodyDepGraph DepGraph { get; set; }
	}
	
	public class Test_Dep_GraphPostBodyDepGraph
	{
		
		/// <summary>
		/// Graph object references each pkg and how they depend on each other through the deps property.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="graph")]
		public Test_Dep_GraphPostBodyDepGraphGraph Graph { get; set; }
		
		/// <summary>
		/// Package manager information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgManager")]
		public Test_Dep_GraphPostBodyDepGraphPkgManager PkgManager { get; set; }
		
		/// <summary>
		/// Array of package dependencies.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pkgs")]
		public string[] Pkgs { get; set; }
		
		/// <summary>
		/// Snyk DepGraph library schema version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
	}
	
	public class Test_Dep_GraphPostBodyDepGraphGraph
	{
		
		/// <summary>
		/// Array of node objects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public string[] Nodes { get; set; }
		
		/// <summary>
		/// Root node id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rootNodeId")]
		public string RootNodeId { get; set; }
	}
	
	public class Test_Dep_GraphPostBodyDepGraphPkgManager
	{
		
		/// <summary>
		/// Package manager name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of package repositories (i.e. maven-central, or npm) that defaults to the canonical package registry for the given package manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public string[] Repositories { get; set; }
	}
	
	public class Test_Gopkg_toml_And_Gopkg_lock_FilePostBody
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.ComponentModel.DefaultValue(Gradle_request_payloadEncoding.base64)]
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; } = Gradle_request_payloadEncoding.base64;
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Test_Gopkg_toml_And_Gopkg_lock_FilePostBodyFiles Files { get; set; }
	}
	
	public class Test_Gopkg_toml_And_Gopkg_lock_FilePostBodyFiles
	{
		
		/// <summary>
		/// a lockfile encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="additional")]
		public string[] Additional { get; set; }
		
		/// <summary>
		/// the `Gopkg.toml` file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Test_Gopkg_toml_And_Gopkg_lock_FilePostBodyFilesTarget Target { get; set; }
	}
	
	public class Test_Gopkg_toml_And_Gopkg_lock_FilePostBodyFilesTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	public class Test_vendor_json_FilePostBody
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.ComponentModel.DefaultValue(Gradle_request_payloadEncoding.base64)]
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; } = Gradle_request_payloadEncoding.base64;
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Test_vendor_json_FilePostBodyFiles Files { get; set; }
	}
	
	public class Test_vendor_json_FilePostBodyFiles
	{
		
		/// <summary>
		/// the `vendor.json` file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Test_vendor_json_FilePostBodyFilesTarget Target { get; set; }
	}
	
	public class Test_vendor_json_FilePostBodyFilesTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	public class Test_gradle_filePostBody
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.ComponentModel.DefaultValue(Gradle_request_payloadEncoding.base64)]
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; } = Gradle_request_payloadEncoding.base64;
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Test_gradle_filePostBodyFiles Files { get; set; }
	}
	
	public class Test_gradle_filePostBodyFiles
	{
		
		/// <summary>
		/// the manifest file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Test_gradle_filePostBodyFilesTarget Target { get; set; }
	}
	
	public class Test_gradle_filePostBodyFilesTarget
	{
		
		/// <summary>
		/// The contents of the file, encoded according to the `encoding` field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	public class Test_maven_filePostBody
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.ComponentModel.DefaultValue(Gradle_request_payloadEncoding.base64)]
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; } = Gradle_request_payloadEncoding.base64;
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Test_maven_filePostBodyFiles Files { get; set; }
	}
	
	public class Test_maven_filePostBodyFiles
	{
		
		/// <summary>
		/// additional manifest files (if needed), encoded according the the "encoding" field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional")]
		public string[] Additional { get; set; }
		
		/// <summary>
		/// the main/root manifest file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Test_maven_filePostBodyFilesTarget Target { get; set; }
	}
	
	public class Test_maven_filePostBodyFilesTarget
	{
		
		/// <summary>
		/// The contents of the file, encoded according to the `encoding` field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	public class Test_package_json_And_package_lock_json_FilePostBody
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.ComponentModel.DefaultValue(Gradle_request_payloadEncoding.base64)]
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; } = Gradle_request_payloadEncoding.base64;
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Test_package_json_And_package_lock_json_FilePostBodyFiles Files { get; set; }
	}
	
	public class Test_package_json_And_package_lock_json_FilePostBodyFiles
	{
		
		/// <summary>
		/// a lockfile can be sent (if needed), encoded according the the "encoding" field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional")]
		public string[] Additional { get; set; }
		
		/// <summary>
		/// the `package.json` file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Test_package_json_And_package_lock_json_FilePostBodyFilesTarget Target { get; set; }
	}
	
	public class Test_package_json_And_package_lock_json_FilePostBodyFilesTarget
	{
		
		/// <summary>
		/// the contents of `package.json` as a string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	public class Test_requirements_txt_filePostBody
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.ComponentModel.DefaultValue(Gradle_request_payloadEncoding.base64)]
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; } = Gradle_request_payloadEncoding.base64;
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Test_requirements_txt_filePostBodyFiles Files { get; set; }
	}
	
	public class Test_requirements_txt_filePostBodyFiles
	{
		
		/// <summary>
		/// the `requirements.txt` file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Test_requirements_txt_filePostBodyFilesTarget Target { get; set; }
	}
	
	public class Test_requirements_txt_filePostBodyFilesTarget
	{
		
		/// <summary>
		/// the contents of `requirements.txt` as a string, encoded according to `encoding` above.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	public class Test_gemfile_lock_filePostBody
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.ComponentModel.DefaultValue(Gradle_request_payloadEncoding.base64)]
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; } = Gradle_request_payloadEncoding.base64;
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Test_gemfile_lock_filePostBodyFiles Files { get; set; }
	}
	
	public class Test_gemfile_lock_filePostBodyFiles
	{
		
		/// <summary>
		/// the `Gemfile.lock` file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Test_gemfile_lock_filePostBodyFilesTarget Target { get; set; }
	}
	
	public class Test_gemfile_lock_filePostBodyFilesTarget
	{
		
		/// <summary>
		/// the contents of `Gemfile.lock` as a string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	public class Test_sbt_filePostBody
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.ComponentModel.DefaultValue(Gradle_request_payloadEncoding.base64)]
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; } = Gradle_request_payloadEncoding.base64;
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Test_sbt_filePostBodyFiles Files { get; set; }
	}
	
	public class Test_sbt_filePostBodyFiles
	{
		
		/// <summary>
		/// the manifest file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Test_sbt_filePostBodyFilesTarget Target { get; set; }
	}
	
	public class Test_sbt_filePostBodyFilesTarget
	{
		
		/// <summary>
		/// The contents of the file, encoded according to the `encoding` field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	public class Test_package_json_And_yarn_lock_FilePostBody
	{
		
		/// <summary>
		/// the encoding for the manifest files sent.
		/// </summary>
		[System.ComponentModel.DefaultValue(Gradle_request_payloadEncoding.plain)]
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Gradle_request_payloadEncoding Encoding { get; set; } = Gradle_request_payloadEncoding.plain;
		
		/// <summary>
		/// The manifest files:
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="files")]
		public Test_package_json_And_yarn_lock_FilePostBodyFiles Files { get; set; }
	}
	
	public class Test_package_json_And_yarn_lock_FilePostBodyFiles
	{
		
		/// <summary>
		/// a lockfile can be sent (if needed), encoded according the the "encoding" field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional")]
		public string[] Additional { get; set; }
		
		/// <summary>
		/// the `package.json` file, encoded according the the "encoding" field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Test_package_json_And_yarn_lock_FilePostBodyFilesTarget Target { get; set; }
	}
	
	public class Test_package_json_And_yarn_lock_FilePostBodyFilesTarget
	{
		
		/// <summary>
		/// the contents of `package.json` as a string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	public class Modify_project_notification_settingsPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="new-issues-remediations")]
		public Modify_project_notification_settingsPutBodyNew_issues_remediations New_issues_remediations { get; set; }
	}
	
	public class Modify_project_notification_settingsPutBodyNew_issues_remediations
	{
		
		/// <summary>
		/// Whether notifications should be sent
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueSeverity")]
		public New_issues_notification_setting_requestIssueSeverity IssueSeverity { get; set; }
		
		/// <summary>
		/// Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueType")]
		public New_issues_notification_setting_requestIssueType IssueType { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
