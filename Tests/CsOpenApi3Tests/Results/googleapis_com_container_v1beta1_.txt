//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// AcceleratorConfig represents a Hardware Accelerator request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceleratorConfig
	{
		
		/// <summary>
		/// The number of the accelerator cards exposed to an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceleratorCount")]
		public string AcceleratorCount { get; set; }
		
		/// <summary>
		/// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceleratorType")]
		public string AcceleratorType { get; set; }
		
		/// <summary>
		/// GPUDriverInstallationConfig specifies the version of GPU driver to be auto installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpuDriverInstallationConfig")]
		public GPUDriverInstallationConfig GpuDriverInstallationConfig { get; set; }
		
		/// <summary>
		/// Size of partitions to create on the GPU. Valid values are described in the NVIDIA [mig user guide](https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpuPartitionSize")]
		public string GpuPartitionSize { get; set; }
		
		/// <summary>
		/// GPUSharingConfig represents the GPU sharing configuration for Hardware Accelerators.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpuSharingConfig")]
		public GPUSharingConfig GpuSharingConfig { get; set; }
		
		/// <summary>
		/// The number of time-shared GPU resources to expose for each physical GPU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTimeSharedClientsPerGpu")]
		public string MaxTimeSharedClientsPerGpu { get; set; }
	}
	
	/// <summary>
	/// GPUDriverInstallationConfig specifies the version of GPU driver to be auto installed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GPUDriverInstallationConfig
	{
		
		/// <summary>
		/// Mode for how the GPU driver is installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpuDriverVersion")]
		public System.Nullable<GPUDriverInstallationConfigGpuDriverVersion> GpuDriverVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GPUDriverInstallationConfigGpuDriverVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GPU_DRIVER_VERSION_UNSPECIFIED")]
		GPU_DRIVER_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLATION_DISABLED")]
		INSTALLATION_DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT")]
		DEFAULT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LATEST")]
		LATEST = 3,
	}
	
	/// <summary>
	/// GPUSharingConfig represents the GPU sharing configuration for Hardware Accelerators.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GPUSharingConfig
	{
		
		/// <summary>
		/// The type of GPU sharing strategy to enable on the GPU node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpuSharingStrategy")]
		public System.Nullable<GPUSharingConfigGpuSharingStrategy> GpuSharingStrategy { get; set; }
		
		/// <summary>
		/// The max number of containers that can share a physical GPU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSharedClientsPerGpu")]
		public string MaxSharedClientsPerGpu { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GPUSharingConfigGpuSharingStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GPU_SHARING_STRATEGY_UNSPECIFIED")]
		GPU_SHARING_STRATEGY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIME_SHARING")]
		TIME_SHARING = 1,
	}
	
	/// <summary>
	/// AdditionalNodeNetworkConfig is the configuration for additional node networks within the NodeNetworkConfig message
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdditionalNodeNetworkConfig
	{
		
		/// <summary>
		/// Name of the VPC where the additional interface belongs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Name of the subnetwork where the additional interface belongs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetwork")]
		public string Subnetwork { get; set; }
	}
	
	/// <summary>
	/// AdditionalPodNetworkConfig is the configuration for additional pod networks within the NodeNetworkConfig message
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdditionalPodNetworkConfig
	{
		
		/// <summary>
		/// Constraints applied to pods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPodsPerNode")]
		public MaxPodsConstraint MaxPodsPerNode { get; set; }
		
		/// <summary>
		/// The name of the secondary range on the subnet which provides IP address for this pod range
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryPodRange")]
		public string SecondaryPodRange { get; set; }
		
		/// <summary>
		/// Name of the subnetwork where the additional pod network belongs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetwork")]
		public string Subnetwork { get; set; }
	}
	
	/// <summary>
	/// Constraints applied to pods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaxPodsConstraint
	{
		
		/// <summary>
		/// Constraint enforced on the max num of pods per node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPodsPerNode")]
		public string MaxPodsPerNode { get; set; }
	}
	
	/// <summary>
	/// AdditionalPodRangesConfig is the configuration for additional pod secondary ranges supporting the ClusterUpdate message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdditionalPodRangesConfig
	{
		
		/// <summary>
		/// Output only. [Output only] Information for additional pod range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podRangeInfo")]
		public RangeInfo[] PodRangeInfo { get; set; }
		
		/// <summary>
		/// Name for pod secondary ipv4 range which has the actual range defined ahead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podRangeNames")]
		public string[] PodRangeNames { get; set; }
	}
	
	/// <summary>
	/// RangeInfo contains the range name and the range utilization by this cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RangeInfo
	{
		
		/// <summary>
		/// Output only. [Output only] Name of a range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rangeName")]
		public string RangeName { get; set; }
		
		/// <summary>
		/// Output only. [Output only] The utilization of the range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utilization")]
		public System.Nullable<System.Double> Utilization { get; set; }
	}
	
	/// <summary>
	/// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddonsConfig
	{
		
		/// <summary>
		/// Configuration options for the Cloud Run feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudRunConfig")]
		public CloudRunConfig CloudRunConfig { get; set; }
		
		/// <summary>
		/// Configuration options for the Config Connector add-on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configConnectorConfig")]
		public ConfigConnectorConfig ConfigConnectorConfig { get; set; }
		
		/// <summary>
		/// Configuration for NodeLocal DNSCache
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsCacheConfig")]
		public DnsCacheConfig DnsCacheConfig { get; set; }
		
		/// <summary>
		/// Configuration for the Compute Engine PD CSI driver.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcePersistentDiskCsiDriverConfig")]
		public GcePersistentDiskCsiDriverConfig GcePersistentDiskCsiDriverConfig { get; set; }
		
		/// <summary>
		/// Configuration for the GCP Filestore CSI driver.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcpFilestoreCsiDriverConfig")]
		public GcpFilestoreCsiDriverConfig GcpFilestoreCsiDriverConfig { get; set; }
		
		/// <summary>
		/// Configuration for the Cloud Storage Fuse CSI driver.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsFuseCsiDriverConfig")]
		public GcsFuseCsiDriverConfig GcsFuseCsiDriverConfig { get; set; }
		
		/// <summary>
		/// Configuration for the Backup for GKE Agent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeBackupAgentConfig")]
		public GkeBackupAgentConfig GkeBackupAgentConfig { get; set; }
		
		/// <summary>
		/// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizontalPodAutoscaling")]
		public HorizontalPodAutoscaling HorizontalPodAutoscaling { get; set; }
		
		/// <summary>
		/// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpLoadBalancing")]
		public HttpLoadBalancing HttpLoadBalancing { get; set; }
		
		/// <summary>
		/// Configuration options for Istio addon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="istioConfig")]
		public IstioConfig IstioConfig { get; set; }
		
		/// <summary>
		/// Configuration options for the KALM addon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kalmConfig")]
		public KalmConfig KalmConfig { get; set; }
		
		/// <summary>
		/// Configuration for the Kubernetes Dashboard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kubernetesDashboard")]
		public KubernetesDashboard KubernetesDashboard { get; set; }
		
		/// <summary>
		/// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkPolicyConfig")]
		public NetworkPolicyConfig NetworkPolicyConfig { get; set; }
	}
	
	/// <summary>
	/// Configuration options for the Cloud Run feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloudRunConfig
	{
		
		/// <summary>
		/// Whether Cloud Run addon is enabled for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// Which load balancer type is installed for Cloud Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancerType")]
		public System.Nullable<CloudRunConfigLoadBalancerType> LoadBalancerType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CloudRunConfigLoadBalancerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOAD_BALANCER_TYPE_UNSPECIFIED")]
		LOAD_BALANCER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOAD_BALANCER_TYPE_EXTERNAL")]
		LOAD_BALANCER_TYPE_EXTERNAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOAD_BALANCER_TYPE_INTERNAL")]
		LOAD_BALANCER_TYPE_INTERNAL = 2,
	}
	
	/// <summary>
	/// Configuration options for the Config Connector add-on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigConnectorConfig
	{
		
		/// <summary>
		/// Whether Cloud Connector is enabled for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration for NodeLocal DNSCache
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DnsCacheConfig
	{
		
		/// <summary>
		/// Whether NodeLocal DNSCache is enabled for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration for the Compute Engine PD CSI driver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GcePersistentDiskCsiDriverConfig
	{
		
		/// <summary>
		/// Whether the Compute Engine PD CSI driver is enabled for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration for the GCP Filestore CSI driver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GcpFilestoreCsiDriverConfig
	{
		
		/// <summary>
		/// Whether the GCP Filestore CSI driver is enabled for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration for the Cloud Storage Fuse CSI driver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GcsFuseCsiDriverConfig
	{
		
		/// <summary>
		/// Whether the Cloud Storage Fuse CSI driver is enabled for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration for the Backup for GKE Agent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GkeBackupAgentConfig
	{
		
		/// <summary>
		/// Whether the Backup for GKE agent is enabled for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HorizontalPodAutoscaling
	{
		
		/// <summary>
		/// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	/// <summary>
	/// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpLoadBalancing
	{
		
		/// <summary>
		/// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	/// <summary>
	/// Configuration options for Istio addon.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IstioConfig
	{
		
		/// <summary>
		/// The specified Istio auth mode, either none, or mutual TLS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth")]
		public System.Nullable<IstioConfigAuth> Auth { get; set; }
		
		/// <summary>
		/// Whether Istio is enabled for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IstioConfigAuth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTH_NONE")]
		AUTH_NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTH_MUTUAL_TLS")]
		AUTH_MUTUAL_TLS = 1,
	}
	
	/// <summary>
	/// Configuration options for the KALM addon.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KalmConfig
	{
		
		/// <summary>
		/// Whether KALM is enabled for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration for the Kubernetes Dashboard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KubernetesDashboard
	{
		
		/// <summary>
		/// Whether the Kubernetes Dashboard is enabled for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	/// <summary>
	/// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkPolicyConfig
	{
		
		/// <summary>
		/// Whether NetworkPolicy is enabled for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	/// <summary>
	/// AdvancedDatapathObservabilityConfig specifies configuration of observability features of advanced datapath.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdvancedDatapathObservabilityConfig
	{
		
		/// <summary>
		/// Expose flow metrics on nodes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableMetrics")]
		public System.Nullable<System.Boolean> EnableMetrics { get; set; }
		
		/// <summary>
		/// Enable Relay component
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableRelay")]
		public System.Nullable<System.Boolean> EnableRelay { get; set; }
		
		/// <summary>
		/// Method used to make Relay available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relayMode")]
		public System.Nullable<AdvancedDatapathObservabilityConfigRelayMode> RelayMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AdvancedDatapathObservabilityConfigRelayMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RELAY_MODE_UNSPECIFIED")]
		RELAY_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL_VPC_LB")]
		INTERNAL_VPC_LB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXTERNAL_LB")]
		EXTERNAL_LB = 3,
	}
	
	/// <summary>
	/// Specifies options for controlling advanced machine features.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdvancedMachineFeatures
	{
		
		/// <summary>
		/// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threadsPerCore")]
		public string ThreadsPerCore { get; set; }
	}
	
	/// <summary>
	/// Configuration for returning group information from authenticators.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticatorGroupsConfig
	{
		
		/// <summary>
		/// Whether this cluster should return group membership lookups during authentication using a group of security groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The name of the security group-of-groups to be used. Only relevant if enabled = true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityGroup")]
		public string SecurityGroup { get; set; }
	}
	
	/// <summary>
	/// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoUpgradeOptions
	{
		
		/// <summary>
		/// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoUpgradeStartTime")]
		public string AutoUpgradeStartTime { get; set; }
		
		/// <summary>
		/// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Autopilot is the configuration for Autopilot settings on the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Autopilot
	{
		
		/// <summary>
		/// AutopilotConversionStatus represents conversion status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionStatus")]
		public AutopilotConversionStatus ConversionStatus { get; set; }
		
		/// <summary>
		/// Enable Autopilot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// WorkloadPolicyConfig is the configuration of workload policy for autopilot clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadPolicyConfig")]
		public WorkloadPolicyConfig WorkloadPolicyConfig { get; set; }
	}
	
	/// <summary>
	/// AutopilotConversionStatus represents conversion status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutopilotConversionStatus
	{
		
		/// <summary>
		/// Output only. The current state of the conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AutopilotConversionStatusState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AutopilotConversionStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATE_UNSPECIFIED")]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DONE")]
		DONE = 1,
	}
	
	/// <summary>
	/// WorkloadPolicyConfig is the configuration of workload policy for autopilot clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkloadPolicyConfig
	{
		
		/// <summary>
		/// If true, workloads can use NET_ADMIN capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowNetAdmin")]
		public System.Nullable<System.Boolean> AllowNetAdmin { get; set; }
	}
	
	/// <summary>
	/// AutopilotCompatibilityIssue contains information about a specific compatibility issue with Autopilot mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutopilotCompatibilityIssue
	{
		
		/// <summary>
		/// The constraint type of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraintType")]
		public string ConstraintType { get; set; }
		
		/// <summary>
		/// The description of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A URL to a public documnetation, which addresses resolving this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentationUrl")]
		public string DocumentationUrl { get; set; }
		
		/// <summary>
		/// The incompatibility type of this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incompatibilityType")]
		public System.Nullable<AutopilotCompatibilityIssueIncompatibilityType> IncompatibilityType { get; set; }
		
		/// <summary>
		/// The last time when this issue was observed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastObservation")]
		public string LastObservation { get; set; }
		
		/// <summary>
		/// The name of the resources which are subject to this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjects")]
		public string[] Subjects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AutopilotCompatibilityIssueIncompatibilityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSPECIFIED")]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCOMPATIBILITY")]
		INCOMPATIBILITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITIONAL_CONFIG_REQUIRED")]
		ADDITIONAL_CONFIG_REQUIRED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSED_WITH_OPTIONAL_CONFIG")]
		PASSED_WITH_OPTIONAL_CONFIG = 3,
	}
	
	/// <summary>
	/// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoprovisioningNodePoolDefaults
	{
		
		/// <summary>
		///  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootDiskKmsKey")]
		public string BootDiskKmsKey { get; set; }
		
		/// <summary>
		/// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGb")]
		public System.Nullable<System.Int32> DiskSizeGb { get; set; }
		
		/// <summary>
		/// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskType")]
		public string DiskType { get; set; }
		
		/// <summary>
		/// The image type to use for NAP created node. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageType")]
		public string ImageType { get; set; }
		
		/// <summary>
		/// Enable or disable Kubelet read only port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insecureKubeletReadonlyPortEnabled")]
		public System.Nullable<System.Boolean> InsecureKubeletReadonlyPortEnabled { get; set; }
		
		/// <summary>
		/// NodeManagement defines the set of node management services turned on for the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="management")]
		public NodeManagement Management { get; set; }
		
		/// <summary>
		/// Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass "automatic" as field value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minCpuPlatform")]
		public string MinCpuPlatform { get; set; }
		
		/// <summary>
		/// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthScopes")]
		public string[] OauthScopes { get; set; }
		
		/// <summary>
		/// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// A set of Shielded Instance options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shieldedInstanceConfig")]
		public ShieldedInstanceConfig ShieldedInstanceConfig { get; set; }
		
		/// <summary>
		/// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is SURGE, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeSettings")]
		public UpgradeSettings UpgradeSettings { get; set; }
	}
	
	/// <summary>
	/// NodeManagement defines the set of node management services turned on for the node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeManagement
	{
		
		/// <summary>
		/// Whether the nodes will be automatically repaired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRepair")]
		public System.Nullable<System.Boolean> AutoRepair { get; set; }
		
		/// <summary>
		/// Whether the nodes will be automatically upgraded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoUpgrade")]
		public System.Nullable<System.Boolean> AutoUpgrade { get; set; }
		
		/// <summary>
		/// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeOptions")]
		public AutoUpgradeOptions UpgradeOptions { get; set; }
	}
	
	/// <summary>
	/// A set of Shielded Instance options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShieldedInstanceConfig
	{
		
		/// <summary>
		/// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableIntegrityMonitoring")]
		public System.Nullable<System.Boolean> EnableIntegrityMonitoring { get; set; }
		
		/// <summary>
		/// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSecureBoot")]
		public System.Nullable<System.Boolean> EnableSecureBoot { get; set; }
	}
	
	/// <summary>
	/// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is SURGE, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpgradeSettings
	{
		
		/// <summary>
		/// Settings for blue-green upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blueGreenSettings")]
		public BlueGreenSettings BlueGreenSettings { get; set; }
		
		/// <summary>
		/// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSurge")]
		public System.Nullable<System.Int32> MaxSurge { get; set; }
		
		/// <summary>
		/// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxUnavailable")]
		public System.Nullable<System.Int32> MaxUnavailable { get; set; }
		
		/// <summary>
		/// Update strategy of the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strategy")]
		public System.Nullable<UpgradeSettingsStrategy> Strategy { get; set; }
	}
	
	/// <summary>
	/// Settings for blue-green upgrade.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlueGreenSettings
	{
		
		/// <summary>
		/// Autoscaled rollout policy uses cluster autoscaler during blue-green upgrades to scale both the green and blue pools.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoscaledRolloutPolicy")]
		public AutoscaledRolloutPolicy AutoscaledRolloutPolicy { get; set; }
		
		/// <summary>
		/// Time needed after draining entire blue pool. After this period, blue pool will be cleaned up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolSoakDuration")]
		public string NodePoolSoakDuration { get; set; }
		
		/// <summary>
		/// Standard rollout policy is the default policy for blue-green.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standardRolloutPolicy")]
		public StandardRolloutPolicy StandardRolloutPolicy { get; set; }
	}
	
	/// <summary>
	/// Autoscaled rollout policy uses cluster autoscaler during blue-green upgrades to scale both the green and blue pools.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoscaledRolloutPolicy
	{
	}
	
	/// <summary>
	/// Standard rollout policy is the default policy for blue-green.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StandardRolloutPolicy
	{
		
		/// <summary>
		/// Number of blue nodes to drain in a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchNodeCount")]
		public System.Nullable<System.Int32> BatchNodeCount { get; set; }
		
		/// <summary>
		/// Percentage of the blue pool nodes to drain in a batch. The range of this field should be (0.0, 1.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchPercentage")]
		public System.Nullable<System.Single> BatchPercentage { get; set; }
		
		/// <summary>
		/// Soak time after each batch gets drained. Default to zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchSoakDuration")]
		public string BatchSoakDuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UpgradeSettingsStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED")]
		NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLUE_GREEN")]
		BLUE_GREEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SURGE")]
		SURGE = 2,
	}
	
	/// <summary>
	/// Deprecated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailableVersion
	{
		
		/// <summary>
		/// Reason for availability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Kubernetes version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Best effort provisioning.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BestEffortProvisioning
	{
		
		/// <summary>
		/// When this is enabled, cluster/node pool creations will ignore non-fatal errors like stockout to best provision as many nodes as possible right now and eventually bring up all target number of nodes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Minimum number of nodes to be provisioned to be considered as succeeded, and the rest of nodes will be provisioned gradually and eventually when stockout issue has been resolved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minProvisionNodes")]
		public System.Nullable<System.Int32> MinProvisionNodes { get; set; }
	}
	
	/// <summary>
	/// Parameters for using BigQuery as the destination of resource usage export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigQueryDestination
	{
		
		/// <summary>
		/// The ID of a BigQuery Dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
	}
	
	/// <summary>
	/// Configuration for Binary Authorization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BinaryAuthorization
	{
		
		/// <summary>
		/// This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaluationMode")]
		public System.Nullable<BinaryAuthorizationEvaluationMode> EvaluationMode { get; set; }
		
		/// <summary>
		/// Optional. Binauthz policies that apply to this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyBindings")]
		public PolicyBinding[] PolicyBindings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BinaryAuthorizationEvaluationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVALUATION_MODE_UNSPECIFIED")]
		EVALUATION_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECT_SINGLETON_POLICY_ENFORCE")]
		PROJECT_SINGLETON_POLICY_ENFORCE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POLICY_BINDINGS")]
		POLICY_BINDINGS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POLICY_BINDINGS_AND_PROJECT_SINGLETON_POLICY_ENFORCE")]
		POLICY_BINDINGS_AND_PROJECT_SINGLETON_POLICY_ENFORCE = 4,
	}
	
	/// <summary>
	/// Binauthz policy that applies to this cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyBinding
	{
		
		/// <summary>
		/// The relative resource name of the binauthz platform policy to audit. GKE platform policies have the following format: `projects/{project_number}/platforms/gke/policies/{policy_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Information relevant to blue-green upgrade.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlueGreenInfo
	{
		
		/// <summary>
		/// The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with blue pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blueInstanceGroupUrls")]
		public string[] BlueInstanceGroupUrls { get; set; }
		
		/// <summary>
		/// Time to start deleting blue pool to complete blue-green upgrade, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bluePoolDeletionStartTime")]
		public string BluePoolDeletionStartTime { get; set; }
		
		/// <summary>
		/// The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with green pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="greenInstanceGroupUrls")]
		public string[] GreenInstanceGroupUrls { get; set; }
		
		/// <summary>
		/// Version of green pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="greenPoolVersion")]
		public string GreenPoolVersion { get; set; }
		
		/// <summary>
		/// Current blue-green upgrade phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public System.Nullable<BlueGreenInfoPhase> Phase { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BlueGreenInfoPhase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHASE_UNSPECIFIED")]
		PHASE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE_STARTED")]
		UPDATE_STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING_GREEN_POOL")]
		CREATING_GREEN_POOL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CORDONING_BLUE_POOL")]
		CORDONING_BLUE_POOL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WAITING_TO_DRAIN_BLUE_POOL")]
		WAITING_TO_DRAIN_BLUE_POOL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DRAINING_BLUE_POOL")]
		DRAINING_BLUE_POOL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NODE_POOL_SOAKING")]
		NODE_POOL_SOAKING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING_BLUE_POOL")]
		DELETING_BLUE_POOL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ROLLBACK_STARTED")]
		ROLLBACK_STARTED = 8,
	}
	
	/// <summary>
	/// CancelOperationRequest cancels a single operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelOperationRequest
	{
		
		/// <summary>
		/// The name (project, location, operation id) of the operation to cancel. Specified in the format `projects/*/locations/*/operations/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The server-assigned `name` of the operation. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// CheckAutopilotCompatibilityResponse has a list of compatibility issues.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckAutopilotCompatibilityResponse
	{
		
		/// <summary>
		/// The list of issues for the given operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public AutopilotCompatibilityIssue[] Issues { get; set; }
		
		/// <summary>
		/// The summary of the autopilot compatibility response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	/// <summary>
	/// CidrBlock contains an optional name and one CIDR block.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CidrBlock
	{
		
		/// <summary>
		/// cidr_block must be specified in CIDR notation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cidrBlock")]
		public string CidrBlock1 { get; set; }
		
		/// <summary>
		/// display_name is an optional field for users to identify CIDR blocks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Configuration for client certificates on the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientCertificateConfig
	{
		
		/// <summary>
		/// Issue a client certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issueClientCertificate")]
		public System.Nullable<System.Boolean> IssueClientCertificate { get; set; }
	}
	
	/// <summary>
	/// A Google Kubernetes Engine cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Cluster
	{
		
		/// <summary>
		/// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addonsConfig")]
		public AddonsConfig AddonsConfig { get; set; }
		
		/// <summary>
		/// Configuration for returning group information from authenticators.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authenticatorGroupsConfig")]
		public AuthenticatorGroupsConfig AuthenticatorGroupsConfig { get; set; }
		
		/// <summary>
		/// Autopilot is the configuration for Autopilot settings on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autopilot")]
		public Autopilot Autopilot { get; set; }
		
		/// <summary>
		/// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoscaling")]
		public ClusterAutoscaling Autoscaling { get; set; }
		
		/// <summary>
		/// Configuration for Binary Authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binaryAuthorization")]
		public BinaryAuthorization BinaryAuthorization { get; set; }
		
		/// <summary>
		/// The IP address range of the container pods in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`). Leave blank to have one automatically chosen or specify a `/14` block in `10.0.0.0/8`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterIpv4Cidr")]
		public string ClusterIpv4Cidr { get; set; }
		
		/// <summary>
		/// Telemetry integration for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterTelemetry")]
		public ClusterTelemetry ClusterTelemetry { get; set; }
		
		/// <summary>
		/// Which conditions caused the current cluster state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public StatusCondition[] Conditions { get; set; }
		
		/// <summary>
		/// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidentialNodes")]
		public ConfidentialNodes ConfidentialNodes { get; set; }
		
		/// <summary>
		/// Configuration for fine-grained cost management feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costManagementConfig")]
		public CostManagementConfig CostManagementConfig { get; set; }
		
		/// <summary>
		/// [Output only] The time the cluster was created, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// [Output only] The current software version of the master endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentMasterVersion")]
		public string CurrentMasterVersion { get; set; }
		
		/// <summary>
		/// [Output only] The number of nodes currently in the cluster. Deprecated. Call Kubernetes API directly to retrieve node information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentNodeCount")]
		public System.Nullable<System.Int32> CurrentNodeCount { get; set; }
		
		/// <summary>
		/// [Output only] Deprecated, use [NodePool.version](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1beta1/projects.locations.clusters.nodePools) instead. The current version of the node software components. If they are currently at multiple versions because they're in the process of being upgraded, this reflects the minimum version of all nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentNodeVersion")]
		public string CurrentNodeVersion { get; set; }
		
		/// <summary>
		/// Configuration of etcd encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseEncryption")]
		public DatabaseEncryption DatabaseEncryption { get; set; }
		
		/// <summary>
		/// Constraints applied to pods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultMaxPodsConstraint")]
		public MaxPodsConstraint DefaultMaxPodsConstraint { get; set; }
		
		/// <summary>
		/// An optional description of this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Kubernetes open source beta apis enabled on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableK8sBetaApis")]
		public K8sBetaAPIConfig EnableK8sBetaApis { get; set; }
		
		/// <summary>
		/// Kubernetes alpha features are enabled on this cluster. This includes alpha API groups (e.g. v1beta1) and features that may not be production ready in the kubernetes version of the master and nodes. The cluster has no SLA for uptime and master/node upgrades are disabled. Alpha enabled clusters are automatically deleted thirty days after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableKubernetesAlpha")]
		public System.Nullable<System.Boolean> EnableKubernetesAlpha { get; set; }
		
		/// <summary>
		/// Enable the ability to use Cloud TPUs in this cluster. This field is deprecated, use tpu_config.enabled instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableTpu")]
		public System.Nullable<System.Boolean> EnableTpu { get; set; }
		
		/// <summary>
		/// [Output only] The IP address of this cluster's master endpoint. The endpoint can be accessed from the internet at `https://username:password@endpoint/`. See the `masterAuth` property of this resource for username and password information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// EnterpriseConfig is the cluster enterprise configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enterpriseConfig")]
		public EnterpriseConfig EnterpriseConfig { get; set; }
		
		/// <summary>
		/// This checksum is computed by the server based on the value of cluster fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// [Output only] The time the cluster will be automatically deleted in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// Fleet is the fleet configuration for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fleet")]
		public Fleet Fleet { get; set; }
		
		/// <summary>
		/// Output only. Unique id for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// IdentityServiceConfig is configuration for Identity Service which allows customers to use external identity providers with the K8S API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityServiceConfig")]
		public IdentityServiceConfig IdentityServiceConfig { get; set; }
		
		/// <summary>
		/// The initial Kubernetes version for this cluster. Valid versions are those found in validMasterVersions returned by getServerConfig. The version can be upgraded over time; such upgrades are reflected in currentMasterVersion and currentNodeVersion. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "","-": picks the default Kubernetes version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialClusterVersion")]
		public string InitialClusterVersion { get; set; }
		
		/// <summary>
		/// The number of nodes to create in this cluster. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota. For requests, this field should only be used in lieu of a "node_pool" object, since this configuration (along with the "node_config") will be used to create a "NodePool" object with an auto-generated name. Do not use this and a node_pool at the same time. This field is deprecated, use node_pool.initial_node_count instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialNodeCount")]
		public System.Nullable<System.Int32> InitialNodeCount { get; set; }
		
		/// <summary>
		/// Deprecated. Use node_pools.instance_group_urls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceGroupUrls")]
		public string[] InstanceGroupUrls { get; set; }
		
		/// <summary>
		/// Configuration for controlling how IPs are allocated in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAllocationPolicy")]
		public IPAllocationPolicy IpAllocationPolicy { get; set; }
		
		/// <summary>
		/// The fingerprint of the set of labels for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelFingerprint")]
		public string LabelFingerprint { get; set; }
		
		/// <summary>
		/// Configuration for the legacy Attribute Based Access Control authorization mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legacyAbac")]
		public LegacyAbac LegacyAbac { get; set; }
		
		/// <summary>
		/// [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This field provides a default value if [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) are not specified during node pool creation. Warning: changing cluster locations will update the [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) of all node pools and will result in nodes being added and/or removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// LoggingConfig is cluster logging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public LoggingConfig LoggingConfig { get; set; }
		
		/// <summary>
		/// The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingService")]
		public string LoggingService { get; set; }
		
		/// <summary>
		/// MaintenancePolicy defines the maintenance policy to be used for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenancePolicy")]
		public MaintenancePolicy MaintenancePolicy { get; set; }
		
		/// <summary>
		/// Master is the configuration for components on master.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="master")]
		public Master Master { get; set; }
		
		/// <summary>
		/// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterAuth")]
		public MasterAuth MasterAuth { get; set; }
		
		/// <summary>
		/// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterAuthorizedNetworksConfig")]
		public MasterAuthorizedNetworksConfig MasterAuthorizedNetworksConfig { get; set; }
		
		/// <summary>
		/// The IP prefix in CIDR notation to use for the hosted master network. This prefix will be used for assigning private IP addresses to the master or set of masters, as well as the ILB VIP. This field is deprecated, use private_cluster_config.master_ipv4_cidr_block instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterIpv4CidrBlock")]
		public string MasterIpv4CidrBlock { get; set; }
		
		/// <summary>
		/// Configuration for issuance of mTLS keys and certificates to Kubernetes pods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meshCertificates")]
		public MeshCertificates MeshCertificates { get; set; }
		
		/// <summary>
		/// MonitoringConfig is cluster monitoring configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoringConfig")]
		public MonitoringConfig MonitoringConfig { get; set; }
		
		/// <summary>
		/// The monitoring service the cluster should use to write metrics. Currently available options: * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoringService")]
		public string MonitoringService { get; set; }
		
		/// <summary>
		/// The name of this cluster. The name must be unique within this project and location (e.g. zone or region), and can be up to 40 characters with the following restrictions: * Lowercase letters, numbers, and hyphens only. * Must start with a letter. * Must end with a number or a letter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the Google Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. If left unspecified, the `default` network will be used. On output this shows the network ID instead of the name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// NetworkConfig reports the relative names of network & subnetwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfig")]
		public NetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkPolicy")]
		public NetworkPolicy NetworkPolicy { get; set; }
		
		/// <summary>
		/// Parameters that describe the nodes in a cluster. GKE Autopilot clusters do not recognize parameters in `NodeConfig`. Use AutoprovisioningNodePoolDefaults instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeConfig")]
		public NodeConfig NodeConfig { get; set; }
		
		/// <summary>
		/// [Output only] The size of the address space on each node for hosting containers. This is provisioned from within the `container_ipv4_cidr` range. This field will only be set when cluster is in route-based network mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIpv4CidrSize")]
		public System.Nullable<System.Int32> NodeIpv4CidrSize { get; set; }
		
		/// <summary>
		/// node pool configs that apply to all auto-provisioned node pools in autopilot clusters and node auto-provisioning enabled clusters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolAutoConfig")]
		public NodePoolAutoConfig NodePoolAutoConfig { get; set; }
		
		/// <summary>
		/// Subset of Nodepool message that has defaults.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolDefaults")]
		public NodePoolDefaults NodePoolDefaults { get; set; }
		
		/// <summary>
		/// The node pools associated with this cluster. This field should not be set if "node_config" or "initial_node_count" are specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePools")]
		public NodePool[] NodePools { get; set; }
		
		/// <summary>
		/// NotificationConfig is the configuration of notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationConfig")]
		public NotificationConfig NotificationConfig { get; set; }
		
		/// <summary>
		/// ParentProductConfig is the configuration of the parent product of the cluster. This field is used by Google internal products that are built on top of a GKE cluster and take the ownership of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentProductConfig")]
		public ParentProductConfig ParentProductConfig { get; set; }
		
		/// <summary>
		/// Configuration for the PodSecurityPolicy feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podSecurityPolicyConfig")]
		public PodSecurityPolicyConfig PodSecurityPolicyConfig { get; set; }
		
		/// <summary>
		/// If this is a private cluster setup. Private clusters are clusters that, by default have no external IP addresses on the nodes and where nodes and the master communicate over private IP addresses. This field is deprecated, use private_cluster_config.enable_private_nodes instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateCluster")]
		public System.Nullable<System.Boolean> PrivateCluster { get; set; }
		
		/// <summary>
		/// Configuration options for private clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateClusterConfig")]
		public PrivateClusterConfig PrivateClusterConfig { get; set; }
		
		/// <summary>
		/// ProtectConfig defines the flags needed to enable/disable features for the Protect API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectConfig")]
		public ProtectConfig ProtectConfig { get; set; }
		
		/// <summary>
		/// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseChannel")]
		public ReleaseChannel ReleaseChannel { get; set; }
		
		/// <summary>
		/// The resource labels for the cluster to use to annotate any related Google Compute Engine resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLabels")]
		public System.Collections.Generic.Dictionary<string, string> ResourceLabels { get; set; }
		
		/// <summary>
		/// Configuration for exporting cluster resource usages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUsageExportConfig")]
		public ResourceUsageExportConfig ResourceUsageExportConfig { get; set; }
		
		/// <summary>
		/// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityPostureConfig")]
		public SecurityPostureConfig SecurityPostureConfig { get; set; }
		
		/// <summary>
		/// [Output only] Server-defined URL for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// [Output only] The IP address range of the Kubernetes services in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`). Service addresses are typically put in the last `/16` from the container CIDR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicesIpv4Cidr")]
		public string ServicesIpv4Cidr { get; set; }
		
		/// <summary>
		/// Configuration of Shielded Nodes feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shieldedNodes")]
		public ShieldedNodes ShieldedNodes { get; set; }
		
		/// <summary>
		/// [Output only] The current status of this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ClusterStatus> Status { get; set; }
		
		/// <summary>
		/// [Output only] Deprecated. Use conditions instead. Additional information about the current status of this cluster, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// The name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/subnetworks) to which the cluster is connected. On output this shows the subnetwork ID instead of the name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetwork")]
		public string Subnetwork { get; set; }
		
		/// <summary>
		/// Configuration for Cloud TPU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tpuConfig")]
		public TpuConfig TpuConfig { get; set; }
		
		/// <summary>
		/// [Output only] The IP address range of the Cloud TPUs in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tpuIpv4CidrBlock")]
		public string TpuIpv4CidrBlock { get; set; }
		
		/// <summary>
		/// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verticalPodAutoscaling")]
		public VerticalPodAutoscaling VerticalPodAutoscaling { get; set; }
		
		/// <summary>
		/// Configuration for direct-path (via ALTS) with workload identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadAltsConfig")]
		public WorkloadALTSConfig WorkloadAltsConfig { get; set; }
		
		/// <summary>
		/// Configuration for issuance of mTLS keys and certificates to Kubernetes pods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadCertificates")]
		public WorkloadCertificates WorkloadCertificates { get; set; }
		
		/// <summary>
		/// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadIdentityConfig")]
		public WorkloadIdentityConfig WorkloadIdentityConfig { get; set; }
		
		/// <summary>
		/// [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field is deprecated, use location instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterAutoscaling
	{
		
		/// <summary>
		/// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoprovisioningLocations")]
		public string[] AutoprovisioningLocations { get; set; }
		
		/// <summary>
		/// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoprovisioningNodePoolDefaults")]
		public AutoprovisioningNodePoolDefaults AutoprovisioningNodePoolDefaults { get; set; }
		
		/// <summary>
		/// Defines autoscaling behaviour.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoscalingProfile")]
		public System.Nullable<ClusterAutoscalingAutoscalingProfile> AutoscalingProfile { get; set; }
		
		/// <summary>
		/// Enables automatic node pool creation and deletion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableNodeAutoprovisioning")]
		public System.Nullable<System.Boolean> EnableNodeAutoprovisioning { get; set; }
		
		/// <summary>
		/// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLimits")]
		public ResourceLimit[] ResourceLimits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ClusterAutoscalingAutoscalingProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROFILE_UNSPECIFIED")]
		PROFILE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIMIZE_UTILIZATION")]
		OPTIMIZE_UTILIZATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BALANCED")]
		BALANCED = 2,
	}
	
	/// <summary>
	/// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceLimit
	{
		
		/// <summary>
		/// Maximum amount of the resource in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public string Maximum { get; set; }
		
		/// <summary>
		/// Minimum amount of the resource in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public string Minimum { get; set; }
		
		/// <summary>
		/// Resource name "cpu", "memory" or gpu-specific string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
	}
	
	/// <summary>
	/// Telemetry integration for the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterTelemetry
	{
		
		/// <summary>
		/// Type of the integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ClusterTelemetryType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ClusterTelemetryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSPECIFIED")]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYSTEM_ONLY")]
		SYSTEM_ONLY = 3,
	}
	
	/// <summary>
	/// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatusCondition
	{
		
		/// <summary>
		/// Canonical code of the condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canonicalCode")]
		public System.Nullable<StatusConditionCanonicalCode> CanonicalCode { get; set; }
		
		/// <summary>
		/// Machine-friendly representation of the condition Deprecated. Use canonical_code instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<StatusConditionCode> Code { get; set; }
		
		/// <summary>
		/// Human-friendly representation of the condition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StatusConditionCanonicalCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED")]
		CANCELLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_ARGUMENT")]
		INVALID_ARGUMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEADLINE_EXCEEDED")]
		DEADLINE_EXCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_FOUND")]
		NOT_FOUND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALREADY_EXISTS")]
		ALREADY_EXISTS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERMISSION_DENIED")]
		PERMISSION_DENIED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNAUTHENTICATED")]
		UNAUTHENTICATED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESOURCE_EXHAUSTED")]
		RESOURCE_EXHAUSTED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_PRECONDITION")]
		FAILED_PRECONDITION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ABORTED")]
		ABORTED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUT_OF_RANGE")]
		OUT_OF_RANGE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNIMPLEMENTED")]
		UNIMPLEMENTED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL")]
		INTERNAL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNAVAILABLE")]
		UNAVAILABLE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA_LOSS")]
		DATA_LOSS = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StatusConditionCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GCE_STOCKOUT")]
		GCE_STOCKOUT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GKE_SERVICE_ACCOUNT_DELETED")]
		GKE_SERVICE_ACCOUNT_DELETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GCE_QUOTA_EXCEEDED")]
		GCE_QUOTA_EXCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SET_BY_OPERATOR")]
		SET_BY_OPERATOR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOUD_KMS_KEY_ERROR")]
		CLOUD_KMS_KEY_ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CA_EXPIRING")]
		CA_EXPIRING = 6,
	}
	
	/// <summary>
	/// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfidentialNodes
	{
		
		/// <summary>
		/// Whether Confidential Nodes feature is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration for fine-grained cost management feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CostManagementConfig
	{
		
		/// <summary>
		/// Whether the feature is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration of etcd encryption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DatabaseEncryption
	{
		
		/// <summary>
		/// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// The desired state of etcd encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<DatabaseEncryptionState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DatabaseEncryptionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENCRYPTED")]
		ENCRYPTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DECRYPTED")]
		DECRYPTED = 2,
	}
	
	/// <summary>
	/// Kubernetes open source beta apis enabled on the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class K8sBetaAPIConfig
	{
		
		/// <summary>
		/// api name, e.g. storage.k8s.io/v1beta1/csistoragecapacities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledApis")]
		public string[] EnabledApis { get; set; }
	}
	
	/// <summary>
	/// EnterpriseConfig is the cluster enterprise configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnterpriseConfig
	{
		
		/// <summary>
		/// Output only. [Output only] cluster_tier specifies the premium tier of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterTier")]
		public System.Nullable<EnterpriseConfigClusterTier> ClusterTier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EnterpriseConfigClusterTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLUSTER_TIER_UNSPECIFIED")]
		CLUSTER_TIER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDARD")]
		STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENTERPRISE")]
		ENTERPRISE = 2,
	}
	
	/// <summary>
	/// Fleet is the fleet configuration for the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Fleet
	{
		
		/// <summary>
		/// [Output only] The full resource name of the registered fleet membership of the cluster, in the format `//gkehub.googleapis.com/projects/*/locations/*/memberships/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membership")]
		public string Membership { get; set; }
		
		/// <summary>
		/// [Output only] Whether the cluster has been registered through the fleet API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preRegistered")]
		public System.Nullable<System.Boolean> PreRegistered { get; set; }
		
		/// <summary>
		/// The Fleet host project(project ID or project number) where this cluster will be registered to. This field cannot be changed after the cluster has been registered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
	}
	
	/// <summary>
	/// IdentityServiceConfig is configuration for Identity Service which allows customers to use external identity providers with the K8S API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdentityServiceConfig
	{
		
		/// <summary>
		/// Whether to enable the Identity Service component
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration for controlling how IPs are allocated in the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IPAllocationPolicy
	{
		
		/// <summary>
		/// AdditionalPodRangesConfig is the configuration for additional pod secondary ranges supporting the ClusterUpdate message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalPodRangesConfig")]
		public AdditionalPodRangesConfig AdditionalPodRangesConfig { get; set; }
		
		/// <summary>
		/// If true, allow allocation of cluster CIDR ranges that overlap with certain kinds of network routes. By default we do not allow cluster CIDR ranges to intersect with any user declared routes. With allow_route_overlap == true, we allow overlapping with CIDR ranges that are larger than the cluster CIDR range. If this field is set to true, then cluster and services CIDRs must be fully-specified (e.g. `10.96.0.0/14`, but not `/14`), which means: 1) When `use_ip_aliases` is true, `cluster_ipv4_cidr_block` and `services_ipv4_cidr_block` must be fully-specified. 2) When `use_ip_aliases` is false, `cluster.cluster_ipv4_cidr` muse be fully-specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowRouteOverlap")]
		public System.Nullable<System.Boolean> AllowRouteOverlap { get; set; }
		
		/// <summary>
		/// This field is deprecated, use cluster_ipv4_cidr_block.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterIpv4Cidr")]
		public string ClusterIpv4Cidr { get; set; }
		
		/// <summary>
		/// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterIpv4CidrBlock")]
		public string ClusterIpv4CidrBlock { get; set; }
		
		/// <summary>
		/// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases and create_subnetwork is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterSecondaryRangeName")]
		public string ClusterSecondaryRangeName { get; set; }
		
		/// <summary>
		/// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createSubnetwork")]
		public System.Nullable<System.Boolean> CreateSubnetwork { get; set; }
		
		/// <summary>
		/// Output only. [Output only] The utilization of the cluster default IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultPodIpv4RangeUtilization")]
		public System.Nullable<System.Double> DefaultPodIpv4RangeUtilization { get; set; }
		
		/// <summary>
		/// The ipv6 access type (internal or external) when create_subnetwork is true
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv6AccessType")]
		public System.Nullable<IPAllocationPolicyIpv6AccessType> Ipv6AccessType { get; set; }
		
		/// <summary>
		/// This field is deprecated, use node_ipv4_cidr_block.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIpv4Cidr")]
		public string NodeIpv4Cidr { get; set; }
		
		/// <summary>
		/// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIpv4CidrBlock")]
		public string NodeIpv4CidrBlock { get; set; }
		
		/// <summary>
		/// [PRIVATE FIELD] Config for pod CIDR size overprovisioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podCidrOverprovisionConfig")]
		public PodCIDROverprovisionConfig PodCidrOverprovisionConfig { get; set; }
		
		/// <summary>
		/// This field is deprecated, use services_ipv4_cidr_block.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicesIpv4Cidr")]
		public string ServicesIpv4Cidr { get; set; }
		
		/// <summary>
		/// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicesIpv4CidrBlock")]
		public string ServicesIpv4CidrBlock { get; set; }
		
		/// <summary>
		/// Output only. [Output only] The services IPv6 CIDR block for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicesIpv6CidrBlock")]
		public string ServicesIpv6CidrBlock { get; set; }
		
		/// <summary>
		/// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases and create_subnetwork is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicesSecondaryRangeName")]
		public string ServicesSecondaryRangeName { get; set; }
		
		/// <summary>
		/// IP stack type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackType")]
		public System.Nullable<IPAllocationPolicyStackType> StackType { get; set; }
		
		/// <summary>
		/// Output only. [Output only] The subnet's IPv6 CIDR block used by nodes and pods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetIpv6CidrBlock")]
		public string SubnetIpv6CidrBlock { get; set; }
		
		/// <summary>
		/// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetworkName")]
		public string SubnetworkName { get; set; }
		
		/// <summary>
		/// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. This field is deprecated, use cluster.tpu_config.ipv4_cidr_block instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tpuIpv4CidrBlock")]
		public string TpuIpv4CidrBlock { get; set; }
		
		/// <summary>
		/// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useIpAliases")]
		public System.Nullable<System.Boolean> UseIpAliases { get; set; }
		
		/// <summary>
		/// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useRoutes")]
		public System.Nullable<System.Boolean> UseRoutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IPAllocationPolicyIpv6AccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IPV6_ACCESS_TYPE_UNSPECIFIED")]
		IPV6_ACCESS_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL")]
		INTERNAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXTERNAL")]
		EXTERNAL = 2,
	}
	
	/// <summary>
	/// [PRIVATE FIELD] Config for pod CIDR size overprovisioning.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PodCIDROverprovisionConfig
	{
		
		/// <summary>
		/// Whether Pod CIDR overprovisioning is disabled. Note: Pod CIDR overprovisioning is enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disable")]
		public System.Nullable<System.Boolean> Disable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IPAllocationPolicyStackType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STACK_TYPE_UNSPECIFIED")]
		STACK_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IPV4")]
		IPV4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IPV4_IPV6")]
		IPV4_IPV6 = 2,
	}
	
	/// <summary>
	/// Configuration for the legacy Attribute Based Access Control authorization mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LegacyAbac
	{
		
		/// <summary>
		/// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// LoggingConfig is cluster logging configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoggingConfig
	{
		
		/// <summary>
		/// LoggingComponentConfig is cluster logging component configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentConfig")]
		public LoggingComponentConfig ComponentConfig { get; set; }
	}
	
	/// <summary>
	/// LoggingComponentConfig is cluster logging component configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoggingComponentConfig
	{
		
		/// <summary>
		/// Select components to collect logs. An empty set would disable all logging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableComponents")]
		public string[] EnableComponents { get; set; }
	}
	
	/// <summary>
	/// MaintenancePolicy defines the maintenance policy to be used for the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaintenancePolicy
	{
		
		/// <summary>
		/// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceVersion")]
		public string ResourceVersion { get; set; }
		
		/// <summary>
		/// MaintenanceWindow defines the maintenance window to be used for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="window")]
		public MaintenanceWindow Window { get; set; }
	}
	
	/// <summary>
	/// MaintenanceWindow defines the maintenance window to be used for the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaintenanceWindow
	{
		
		/// <summary>
		/// Time window specified for daily maintenance operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyMaintenanceWindow")]
		public DailyMaintenanceWindow DailyMaintenanceWindow { get; set; }
		
		/// <summary>
		/// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceExclusions")]
		public System.Collections.Generic.Dictionary<string, TimeWindow> MaintenanceExclusions { get; set; }
		
		/// <summary>
		/// Represents an arbitrary window of time that recurs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurringWindow")]
		public RecurringTimeWindow RecurringWindow { get; set; }
	}
	
	/// <summary>
	/// Time window specified for daily maintenance operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DailyMaintenanceWindow
	{
		
		/// <summary>
		/// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// Time within the maintenance window to start the maintenance operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Represents an arbitrary window of time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeWindow
	{
		
		/// <summary>
		/// The time that the window ends. The end time should take place after the start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Represents the Maintenance exclusion option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceExclusionOptions")]
		public MaintenanceExclusionOptions MaintenanceExclusionOptions { get; set; }
		
		/// <summary>
		/// The time that the window first starts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Represents the Maintenance exclusion option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaintenanceExclusionOptions
	{
		
		/// <summary>
		/// Scope specifies the upgrade scope which upgrades are blocked by the exclusion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<MaintenanceExclusionOptionsScope> Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MaintenanceExclusionOptionsScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_UPGRADES")]
		NO_UPGRADES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_MINOR_UPGRADES")]
		NO_MINOR_UPGRADES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_MINOR_OR_NODE_UPGRADES")]
		NO_MINOR_OR_NODE_UPGRADES = 2,
	}
	
	/// <summary>
	/// Represents an arbitrary window of time that recurs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecurringTimeWindow
	{
		
		/// <summary>
		/// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ``` start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR ``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ``` start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA ``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrence")]
		public string Recurrence { get; set; }
		
		/// <summary>
		/// Represents an arbitrary window of time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="window")]
		public TimeWindow Window { get; set; }
	}
	
	/// <summary>
	/// Master is the configuration for components on master.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Master
	{
	}
	
	/// <summary>
	/// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MasterAuth
	{
		
		/// <summary>
		/// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientCertificate")]
		public string ClientCertificate { get; set; }
		
		/// <summary>
		/// Configuration for client certificates on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientCertificateConfig")]
		public ClientCertificateConfig ClientCertificateConfig { get; set; }
		
		/// <summary>
		/// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientKey")]
		public string ClientKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clusterCaCertificate")]
		public string ClusterCaCertificate { get; set; }
		
		/// <summary>
		/// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MasterAuthorizedNetworksConfig
	{
		
		/// <summary>
		/// cidr_blocks define up to 10 external networks that could access Kubernetes master through HTTPS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cidrBlocks")]
		public CidrBlock[] CidrBlocks { get; set; }
		
		/// <summary>
		/// Whether or not master authorized networks is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Whether master is accessbile via Google Compute Engine Public IP addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcpPublicCidrsAccessEnabled")]
		public System.Nullable<System.Boolean> GcpPublicCidrsAccessEnabled { get; set; }
	}
	
	/// <summary>
	/// Configuration for issuance of mTLS keys and certificates to Kubernetes pods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MeshCertificates
	{
		
		/// <summary>
		/// enable_certificates controls issuance of workload mTLS certificates. If set, the GKE Workload Identity Certificates controller and node agent will be deployed in the cluster, which can then be configured by creating a WorkloadCertificateConfig Custom Resource. Requires Workload Identity (workload_pool must be non-empty).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableCertificates")]
		public System.Nullable<System.Boolean> EnableCertificates { get; set; }
	}
	
	/// <summary>
	/// MonitoringConfig is cluster monitoring configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringConfig
	{
		
		/// <summary>
		/// AdvancedDatapathObservabilityConfig specifies configuration of observability features of advanced datapath.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advancedDatapathObservabilityConfig")]
		public AdvancedDatapathObservabilityConfig AdvancedDatapathObservabilityConfig { get; set; }
		
		/// <summary>
		/// MonitoringComponentConfig is cluster monitoring component configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentConfig")]
		public MonitoringComponentConfig ComponentConfig { get; set; }
		
		/// <summary>
		/// ManagedPrometheusConfig defines the configuration for Google Cloud Managed Service for Prometheus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedPrometheusConfig")]
		public ManagedPrometheusConfig ManagedPrometheusConfig { get; set; }
	}
	
	/// <summary>
	/// MonitoringComponentConfig is cluster monitoring component configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringComponentConfig
	{
		
		/// <summary>
		/// Select components to collect metrics. An empty set would disable all monitoring.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableComponents")]
		public string[] EnableComponents { get; set; }
	}
	
	/// <summary>
	/// ManagedPrometheusConfig defines the configuration for Google Cloud Managed Service for Prometheus.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedPrometheusConfig
	{
		
		/// <summary>
		/// Enable Managed Collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// NetworkConfig reports the relative names of network & subnetwork.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkConfig
	{
		
		/// <summary>
		/// The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datapathProvider")]
		public System.Nullable<NetworkConfigDatapathProvider> DatapathProvider { get; set; }
		
		/// <summary>
		/// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultSnatStatus")]
		public DefaultSnatStatus DefaultSnatStatus { get; set; }
		
		/// <summary>
		/// DNSConfig contains the desired set of options for configuring clusterDNS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsConfig")]
		public DNSConfig DnsConfig { get; set; }
		
		/// <summary>
		/// Whether FQDN Network Policy is enabled on this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableFqdnNetworkPolicy")]
		public System.Nullable<System.Boolean> EnableFqdnNetworkPolicy { get; set; }
		
		/// <summary>
		/// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableIntraNodeVisibility")]
		public System.Nullable<System.Boolean> EnableIntraNodeVisibility { get; set; }
		
		/// <summary>
		/// Whether L4ILB Subsetting is enabled for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableL4ilbSubsetting")]
		public System.Nullable<System.Boolean> EnableL4ilbSubsetting { get; set; }
		
		/// <summary>
		/// Whether multi-networking is enabled for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableMultiNetworking")]
		public System.Nullable<System.Boolean> EnableMultiNetworking { get; set; }
		
		/// <summary>
		/// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayApiConfig")]
		public GatewayAPIConfig GatewayApiConfig { get; set; }
		
		/// <summary>
		/// Specify the details of in-transit encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inTransitEncryptionConfig")]
		public System.Nullable<NetworkConfigInTransitEncryptionConfig> InTransitEncryptionConfig { get; set; }
		
		/// <summary>
		/// Output only. The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Configuration of all network bandwidth tiers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkPerformanceConfig")]
		public ClusterNetworkPerformanceConfig NetworkPerformanceConfig { get; set; }
		
		/// <summary>
		/// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateIpv6GoogleAccess")]
		public System.Nullable<NetworkConfigPrivateIpv6GoogleAccess> PrivateIpv6GoogleAccess { get; set; }
		
		/// <summary>
		/// Config to block services with externalIPs field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceExternalIpsConfig")]
		public ServiceExternalIPsConfig ServiceExternalIpsConfig { get; set; }
		
		/// <summary>
		/// Output only. The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetwork")]
		public string Subnetwork { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NetworkConfigDatapathProvider
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATAPATH_PROVIDER_UNSPECIFIED")]
		DATAPATH_PROVIDER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LEGACY_DATAPATH")]
		LEGACY_DATAPATH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADVANCED_DATAPATH")]
		ADVANCED_DATAPATH = 2,
	}
	
	/// <summary>
	/// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DefaultSnatStatus
	{
		
		/// <summary>
		/// Disables cluster default sNAT rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	/// <summary>
	/// DNSConfig contains the desired set of options for configuring clusterDNS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DNSConfig
	{
		
		/// <summary>
		/// cluster_dns indicates which in-cluster DNS provider should be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterDns")]
		public System.Nullable<DNSConfigClusterDns> ClusterDns { get; set; }
		
		/// <summary>
		/// cluster_dns_domain is the suffix used for all cluster service records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterDnsDomain")]
		public string ClusterDnsDomain { get; set; }
		
		/// <summary>
		/// cluster_dns_scope indicates the scope of access to cluster DNS records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterDnsScope")]
		public System.Nullable<DNSConfigClusterDnsScope> ClusterDnsScope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DNSConfigClusterDns
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROVIDER_UNSPECIFIED")]
		PROVIDER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLATFORM_DEFAULT")]
		PLATFORM_DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOUD_DNS")]
		CLOUD_DNS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KUBE_DNS")]
		KUBE_DNS = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DNSConfigClusterDnsScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DNS_SCOPE_UNSPECIFIED")]
		DNS_SCOPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLUSTER_SCOPE")]
		CLUSTER_SCOPE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VPC_SCOPE")]
		VPC_SCOPE = 2,
	}
	
	/// <summary>
	/// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GatewayAPIConfig
	{
		
		/// <summary>
		/// The Gateway API release channel to use for Gateway API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public System.Nullable<GatewayAPIConfigChannel> Channel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GatewayAPIConfigChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHANNEL_UNSPECIFIED")]
		CHANNEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHANNEL_DISABLED")]
		CHANNEL_DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHANNEL_EXPERIMENTAL")]
		CHANNEL_EXPERIMENTAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHANNEL_STANDARD")]
		CHANNEL_STANDARD = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NetworkConfigInTransitEncryptionConfig
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_TRANSIT_ENCRYPTION_CONFIG_UNSPECIFIED")]
		IN_TRANSIT_ENCRYPTION_CONFIG_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_TRANSIT_ENCRYPTION_DISABLED")]
		IN_TRANSIT_ENCRYPTION_DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_TRANSIT_ENCRYPTION_INTER_NODE_TRANSPARENT")]
		IN_TRANSIT_ENCRYPTION_INTER_NODE_TRANSPARENT = 2,
	}
	
	/// <summary>
	/// Configuration of all network bandwidth tiers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterNetworkPerformanceConfig
	{
		
		/// <summary>
		/// Specifies the total network bandwidth tier for the NodePool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalEgressBandwidthTier")]
		public System.Nullable<ClusterNetworkPerformanceConfigTotalEgressBandwidthTier> TotalEgressBandwidthTier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ClusterNetworkPerformanceConfigTotalEgressBandwidthTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIER_UNSPECIFIED")]
		TIER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIER_1")]
		TIER_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NetworkConfigPrivateIpv6GoogleAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED")]
		PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIVATE_IPV6_GOOGLE_ACCESS_DISABLED")]
		PRIVATE_IPV6_GOOGLE_ACCESS_DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIVATE_IPV6_GOOGLE_ACCESS_TO_GOOGLE")]
		PRIVATE_IPV6_GOOGLE_ACCESS_TO_GOOGLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIVATE_IPV6_GOOGLE_ACCESS_BIDIRECTIONAL")]
		PRIVATE_IPV6_GOOGLE_ACCESS_BIDIRECTIONAL = 3,
	}
	
	/// <summary>
	/// Config to block services with externalIPs field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceExternalIPsConfig
	{
		
		/// <summary>
		/// Whether Services with ExternalIPs field are allowed or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkPolicy
	{
		
		/// <summary>
		/// Whether network policy is enabled on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The selected network policy provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public System.Nullable<NetworkPolicyProvider> Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NetworkPolicyProvider
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROVIDER_UNSPECIFIED")]
		PROVIDER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CALICO")]
		CALICO = 1,
	}
	
	/// <summary>
	/// Parameters that describe the nodes in a cluster. GKE Autopilot clusters do not recognize parameters in `NodeConfig`. Use AutoprovisioningNodePoolDefaults instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeConfig
	{
		
		/// <summary>
		/// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accelerators")]
		public AcceleratorConfig[] Accelerators { get; set; }
		
		/// <summary>
		/// Specifies options for controlling advanced machine features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advancedMachineFeatures")]
		public AdvancedMachineFeatures AdvancedMachineFeatures { get; set; }
		
		/// <summary>
		///  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootDiskKmsKey")]
		public string BootDiskKmsKey { get; set; }
		
		/// <summary>
		/// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidentialNodes")]
		public ConfidentialNodes ConfidentialNodes { get; set; }
		
		/// <summary>
		/// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGb")]
		public System.Nullable<System.Int32> DiskSizeGb { get; set; }
		
		/// <summary>
		/// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskType")]
		public string DiskType { get; set; }
		
		/// <summary>
		/// Optional. Enable confidential storage on Hyperdisk. boot_disk_kms_key is required when enable_confidential_storage is true. This is only available for private preview.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableConfidentialStorage")]
		public System.Nullable<System.Boolean> EnableConfidentialStorage { get; set; }
		
		/// <summary>
		/// EphemeralStorageConfig contains configuration for the ephemeral storage filesystem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ephemeralStorageConfig")]
		public EphemeralStorageConfig EphemeralStorageConfig { get; set; }
		
		/// <summary>
		/// EphemeralStorageLocalSsdConfig contains configuration for the node ephemeral storage using Local SSDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ephemeralStorageLocalSsdConfig")]
		public EphemeralStorageLocalSsdConfig EphemeralStorageLocalSsdConfig { get; set; }
		
		/// <summary>
		/// Configuration of Fast Socket feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fastSocket")]
		public FastSocket FastSocket { get; set; }
		
		/// <summary>
		/// GcfsConfig contains configurations of Google Container File System.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcfsConfig")]
		public GcfsConfig GcfsConfig { get; set; }
		
		/// <summary>
		/// Configuration of gVNIC feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gvnic")]
		public VirtualNIC Gvnic { get; set; }
		
		/// <summary>
		/// HostMaintenancePolicy contains the maintenance policy for the hosts on which the GKE VMs run on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostMaintenancePolicy")]
		public HostMaintenancePolicy HostMaintenancePolicy { get; set; }
		
		/// <summary>
		/// The image type to use for this node. Note that for a given image type, the latest version of it will be used. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageType")]
		public string ImageType { get; set; }
		
		/// <summary>
		/// Node kubelet configs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kubeletConfig")]
		public NodeKubeletConfig KubeletConfig { get; set; }
		
		/// <summary>
		/// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Parameters that can be configured on Linux nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linuxNodeConfig")]
		public LinuxNodeConfig LinuxNodeConfig { get; set; }
		
		/// <summary>
		/// LocalNvmeSsdBlockConfig contains configuration for using raw-block local NVMe SSDs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localNvmeSsdBlockConfig")]
		public LocalNvmeSsdBlockConfig LocalNvmeSsdBlockConfig { get; set; }
		
		/// <summary>
		/// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localSsdCount")]
		public System.Nullable<System.Int32> LocalSsdCount { get; set; }
		
		/// <summary>
		/// NodePoolLoggingConfig specifies logging configuration for nodepools.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public NodePoolLoggingConfig LoggingConfig { get; set; }
		
		/// <summary>
		/// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types). If unspecified, the default machine type is `e2-medium`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-oslogin" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minCpuPlatform")]
		public string MinCpuPlatform { get; set; }
		
		/// <summary>
		/// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeGroup")]
		public string NodeGroup { get; set; }
		
		/// <summary>
		/// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthScopes")]
		public string[] OauthScopes { get; set; }
		
		/// <summary>
		/// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preemptible")]
		public System.Nullable<System.Boolean> Preemptible { get; set; }
		
		/// <summary>
		/// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservationAffinity")]
		public ReservationAffinity ReservationAffinity { get; set; }
		
		/// <summary>
		/// The resource labels for the node pool to use to annotate any related Google Compute Engine resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLabels")]
		public System.Collections.Generic.Dictionary<string, string> ResourceLabels { get; set; }
		
		/// <summary>
		/// A map of resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies. Tags must be according to specifications in https://cloud.google.com/vpc/docs/tags-firewalls-overview#specifications. A maximum of 5 tag key-value pairs can be specified. Existing tags will be replaced with new values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceManagerTags")]
		public ResourceManagerTags ResourceManagerTags { get; set; }
		
		/// <summary>
		/// SandboxConfig contains configurations of the sandbox to use for the node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sandboxConfig")]
		public SandboxConfig SandboxConfig { get; set; }
		
		/// <summary>
		/// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// A set of Shielded Instance options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shieldedInstanceConfig")]
		public ShieldedInstanceConfig ShieldedInstanceConfig { get; set; }
		
		/// <summary>
		/// SoleTenantConfig contains the NodeAffinities to specify what shared sole tenant node groups should back the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="soleTenantConfig")]
		public SoleTenantConfig SoleTenantConfig { get; set; }
		
		/// <summary>
		/// Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spot")]
		public System.Nullable<System.Boolean> Spot { get; set; }
		
		/// <summary>
		/// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taints")]
		public NodeTaint[] Taints { get; set; }
		
		/// <summary>
		/// Parameters that can be configured on Windows nodes. Windows Node Config that define the parameters that will be used to configure the Windows node pool settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsNodeConfig")]
		public WindowsNodeConfig WindowsNodeConfig { get; set; }
		
		/// <summary>
		/// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadMetadataConfig")]
		public WorkloadMetadataConfig WorkloadMetadataConfig { get; set; }
	}
	
	/// <summary>
	/// EphemeralStorageConfig contains configuration for the ephemeral storage filesystem.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EphemeralStorageConfig
	{
		
		/// <summary>
		/// Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localSsdCount")]
		public System.Nullable<System.Int32> LocalSsdCount { get; set; }
	}
	
	/// <summary>
	/// EphemeralStorageLocalSsdConfig contains configuration for the node ephemeral storage using Local SSDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EphemeralStorageLocalSsdConfig
	{
		
		/// <summary>
		/// Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localSsdCount")]
		public System.Nullable<System.Int32> LocalSsdCount { get; set; }
	}
	
	/// <summary>
	/// Configuration of Fast Socket feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FastSocket
	{
		
		/// <summary>
		/// Whether Fast Socket features are enabled in the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// GcfsConfig contains configurations of Google Container File System.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GcfsConfig
	{
		
		/// <summary>
		/// Whether to use GCFS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration of gVNIC feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VirtualNIC
	{
		
		/// <summary>
		/// Whether gVNIC features are enabled in the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// HostMaintenancePolicy contains the maintenance policy for the hosts on which the GKE VMs run on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HostMaintenancePolicy
	{
		
		/// <summary>
		/// Specifies the frequency of planned maintenance events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceInterval")]
		public System.Nullable<HostMaintenancePolicyMaintenanceInterval> MaintenanceInterval { get; set; }
		
		/// <summary>
		/// Strategy that will trigger maintenance on behalf of the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opportunisticMaintenanceStrategy")]
		public OpportunisticMaintenanceStrategy OpportunisticMaintenanceStrategy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HostMaintenancePolicyMaintenanceInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAINTENANCE_INTERVAL_UNSPECIFIED")]
		MAINTENANCE_INTERVAL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS_NEEDED")]
		AS_NEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERIODIC")]
		PERIODIC = 2,
	}
	
	/// <summary>
	/// Strategy that will trigger maintenance on behalf of the customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpportunisticMaintenanceStrategy
	{
		
		/// <summary>
		/// The window of time that opportunistic maintenance can run. Example: A setting of 14 days implies that opportunistic maintenance can only be ran in the 2 weeks leading up to the scheduled maintenance date. Setting 28 days allows opportunistic maintenance to run at any time in the scheduled maintenance window (all `PERIODIC` maintenance is set 28 days in advance).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceAvailabilityWindow")]
		public string MaintenanceAvailabilityWindow { get; set; }
		
		/// <summary>
		/// The minimum nodes required to be available in a pool. Blocks maintenance if it would cause the number of running nodes to dip below this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minNodesPerPool")]
		public string MinNodesPerPool { get; set; }
		
		/// <summary>
		/// The amount of time that a node can remain idle (no customer owned workloads running), before triggering maintenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIdleTimeWindow")]
		public string NodeIdleTimeWindow { get; set; }
	}
	
	/// <summary>
	/// Node kubelet configs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeKubeletConfig
	{
		
		/// <summary>
		/// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuCfsQuota")]
		public System.Nullable<System.Boolean> CpuCfsQuota { get; set; }
		
		/// <summary>
		/// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuCfsQuotaPeriod")]
		public string CpuCfsQuotaPeriod { get; set; }
		
		/// <summary>
		/// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. * "none": the default, which represents the existing scheduling behavior. * "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuManagerPolicy")]
		public string CpuManagerPolicy { get; set; }
		
		/// <summary>
		/// Enable or disable Kubelet read only port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insecureKubeletReadonlyPortEnabled")]
		public System.Nullable<System.Boolean> InsecureKubeletReadonlyPortEnabled { get; set; }
		
		/// <summary>
		/// Set the Pod PID limits. See https://kubernetes.io/docs/concepts/policy/pid-limiting/#pod-pid-limits Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podPidsLimit")]
		public string PodPidsLimit { get; set; }
	}
	
	/// <summary>
	/// Parameters that can be configured on Linux nodes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinuxNodeConfig
	{
		
		/// <summary>
		/// cgroup_mode specifies the cgroup mode to be used on the node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cgroupMode")]
		public System.Nullable<LinuxNodeConfigCgroupMode> CgroupMode { get; set; }
		
		/// <summary>
		/// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sysctls")]
		public System.Collections.Generic.Dictionary<string, string> Sysctls { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LinuxNodeConfigCgroupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CGROUP_MODE_UNSPECIFIED")]
		CGROUP_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CGROUP_MODE_V1")]
		CGROUP_MODE_V1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CGROUP_MODE_V2")]
		CGROUP_MODE_V2 = 2,
	}
	
	/// <summary>
	/// LocalNvmeSsdBlockConfig contains configuration for using raw-block local NVMe SSDs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalNvmeSsdBlockConfig
	{
		
		/// <summary>
		/// Number of local NVMe SSDs to use. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localSsdCount")]
		public System.Nullable<System.Int32> LocalSsdCount { get; set; }
	}
	
	/// <summary>
	/// NodePoolLoggingConfig specifies logging configuration for nodepools.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodePoolLoggingConfig
	{
		
		/// <summary>
		/// LoggingVariantConfig specifies the behaviour of the logging component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variantConfig")]
		public LoggingVariantConfig VariantConfig { get; set; }
	}
	
	/// <summary>
	/// LoggingVariantConfig specifies the behaviour of the logging component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoggingVariantConfig
	{
		
		/// <summary>
		/// Logging variant deployed on nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variant")]
		public System.Nullable<LoggingVariantConfigVariant> Variant { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoggingVariantConfigVariant
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VARIANT_UNSPECIFIED")]
		VARIANT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT")]
		DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX_THROUGHPUT")]
		MAX_THROUGHPUT = 2,
	}
	
	/// <summary>
	/// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservationAffinity
	{
		
		/// <summary>
		/// Corresponds to the type of reservation consumption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumeReservationType")]
		public System.Nullable<ReservationAffinityConsumeReservationType> ConsumeReservationType { get; set; }
		
		/// <summary>
		/// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "compute.googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Corresponds to the label value(s) of reservation resource(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReservationAffinityConsumeReservationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSPECIFIED")]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_RESERVATION")]
		NO_RESERVATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANY_RESERVATION")]
		ANY_RESERVATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPECIFIC_RESERVATION")]
		SPECIFIC_RESERVATION = 3,
	}
	
	/// <summary>
	/// A map of resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies. Tags must be according to specifications in https://cloud.google.com/vpc/docs/tags-firewalls-overview#specifications. A maximum of 5 tag key-value pairs can be specified. Existing tags will be replaced with new values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceManagerTags
	{
		
		/// <summary>
		/// Tags must be in one of the following formats ([KEY]=[VALUE]) 1. `tagKeys/{tag_key_id}=tagValues/{tag_value_id}` 2. `{org_id}/{tag_key_name}={tag_value_name}` 3. `{project_id}/{tag_key_name}={tag_value_name}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// SandboxConfig contains configurations of the sandbox to use for the node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SandboxConfig
	{
		
		/// <summary>
		/// Type of the sandbox to use for the node (e.g. 'gvisor')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sandboxType")]
		public string SandboxType { get; set; }
		
		/// <summary>
		/// Type of the sandbox to use for the node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SandboxConfigType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SandboxConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSPECIFIED")]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GVISOR")]
		GVISOR = 1,
	}
	
	/// <summary>
	/// SoleTenantConfig contains the NodeAffinities to specify what shared sole tenant node groups should back the node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SoleTenantConfig
	{
		
		/// <summary>
		/// NodeAffinities used to match to a shared sole tenant node group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeAffinities")]
		public NodeAffinity[] NodeAffinities { get; set; }
	}
	
	/// <summary>
	/// Specifies the NodeAffinity key, values, and affinity operator according to [shared sole tenant node group affinities](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes#node_affinity_and_anti-affinity).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeAffinity
	{
		
		/// <summary>
		/// Key for NodeAffinity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Operator for NodeAffinity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public System.Nullable<NodeAffinityOperator> Operator { get; set; }
		
		/// <summary>
		/// Values for NodeAffinity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NodeAffinityOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPERATOR_UNSPECIFIED")]
		OPERATOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN")]
		IN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_IN")]
		NOT_IN = 2,
	}
	
	/// <summary>
	/// Kubernetes taint is composed of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeTaint
	{
		
		/// <summary>
		/// Effect for taint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effect")]
		public System.Nullable<NodeTaintEffect> Effect { get; set; }
		
		/// <summary>
		/// Key for taint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Value for taint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NodeTaintEffect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EFFECT_UNSPECIFIED")]
		EFFECT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_SCHEDULE")]
		NO_SCHEDULE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREFER_NO_SCHEDULE")]
		PREFER_NO_SCHEDULE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_EXECUTE")]
		NO_EXECUTE = 3,
	}
	
	/// <summary>
	/// Parameters that can be configured on Windows nodes. Windows Node Config that define the parameters that will be used to configure the Windows node pool settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WindowsNodeConfig
	{
		
		/// <summary>
		/// OSVersion specifies the Windows node config to be used on the node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public System.Nullable<WindowsNodeConfigOsVersion> OsVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WindowsNodeConfigOsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OS_VERSION_UNSPECIFIED")]
		OS_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OS_VERSION_LTSC2019")]
		OS_VERSION_LTSC2019 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OS_VERSION_LTSC2022")]
		OS_VERSION_LTSC2022 = 2,
	}
	
	/// <summary>
	/// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkloadMetadataConfig
	{
		
		/// <summary>
		/// Mode is the configuration for how to expose metadata to workloads running on the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<WorkloadMetadataConfigMode> Mode { get; set; }
		
		/// <summary>
		/// NodeMetadata is the configuration for how to expose metadata to the workloads running on the node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeMetadata")]
		public System.Nullable<WorkloadMetadataConfigNodeMetadata> NodeMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WorkloadMetadataConfigMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MODE_UNSPECIFIED")]
		MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GCE_METADATA")]
		GCE_METADATA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GKE_METADATA")]
		GKE_METADATA = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WorkloadMetadataConfigNodeMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSPECIFIED")]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SECURE")]
		SECURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPOSE")]
		EXPOSE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GKE_METADATA_SERVER")]
		GKE_METADATA_SERVER = 3,
	}
	
	/// <summary>
	/// node pool configs that apply to all auto-provisioned node pools in autopilot clusters and node auto-provisioning enabled clusters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodePoolAutoConfig
	{
		
		/// <summary>
		/// Collection of Compute Engine network tags that can be applied to a node's underlying VM instance. (See `tags` field in [`NodeConfig`](/kubernetes-engine/docs/reference/rest/v1/NodeConfig)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkTags")]
		public NetworkTags NetworkTags { get; set; }
		
		/// <summary>
		/// A map of resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies. Tags must be according to specifications in https://cloud.google.com/vpc/docs/tags-firewalls-overview#specifications. A maximum of 5 tag key-value pairs can be specified. Existing tags will be replaced with new values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceManagerTags")]
		public ResourceManagerTags ResourceManagerTags { get; set; }
	}
	
	/// <summary>
	/// Collection of Compute Engine network tags that can be applied to a node's underlying VM instance. (See `tags` field in [`NodeConfig`](/kubernetes-engine/docs/reference/rest/v1/NodeConfig)).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkTags
	{
		
		/// <summary>
		/// List of network tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// Subset of Nodepool message that has defaults.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodePoolDefaults
	{
		
		/// <summary>
		/// Subset of NodeConfig message that has defaults.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeConfigDefaults")]
		public NodeConfigDefaults NodeConfigDefaults { get; set; }
	}
	
	/// <summary>
	/// Subset of NodeConfig message that has defaults.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeConfigDefaults
	{
		
		/// <summary>
		/// GcfsConfig contains configurations of Google Container File System.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcfsConfig")]
		public GcfsConfig GcfsConfig { get; set; }
		
		/// <summary>
		/// HostMaintenancePolicy contains the maintenance policy for the hosts on which the GKE VMs run on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostMaintenancePolicy")]
		public HostMaintenancePolicy HostMaintenancePolicy { get; set; }
		
		/// <summary>
		/// NodePoolLoggingConfig specifies logging configuration for nodepools.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public NodePoolLoggingConfig LoggingConfig { get; set; }
	}
	
	/// <summary>
	/// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodePool
	{
		
		/// <summary>
		/// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoscaling")]
		public NodePoolAutoscaling Autoscaling { get; set; }
		
		/// <summary>
		/// Best effort provisioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bestEffortProvisioning")]
		public BestEffortProvisioning BestEffortProvisioning { get; set; }
		
		/// <summary>
		/// Which conditions caused the current node pool state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public StatusCondition[] Conditions { get; set; }
		
		/// <summary>
		/// Parameters that describe the nodes in a cluster. GKE Autopilot clusters do not recognize parameters in `NodeConfig`. Use AutoprovisioningNodePoolDefaults instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public NodeConfig Config { get; set; }
		
		/// <summary>
		/// This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialNodeCount")]
		public System.Nullable<System.Int32> InitialNodeCount { get; set; }
		
		/// <summary>
		/// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool. During the node pool blue-green upgrade operation, the URLs contain both blue and green resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceGroupUrls")]
		public string[] InstanceGroupUrls { get; set; }
		
		/// <summary>
		/// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// NodeManagement defines the set of node management services turned on for the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="management")]
		public NodeManagement Management { get; set; }
		
		/// <summary>
		/// Constraints applied to pods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPodsConstraint")]
		public MaxPodsConstraint MaxPodsConstraint { get; set; }
		
		/// <summary>
		/// The name of the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parameters for node pool-level network config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfig")]
		public NodeNetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// PlacementPolicy defines the placement policy used by the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementPolicy")]
		public PlacementPolicy PlacementPolicy { get; set; }
		
		/// <summary>
		/// [Output only] The pod CIDR block size per node in this node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podIpv4CidrSize")]
		public System.Nullable<System.Int32> PodIpv4CidrSize { get; set; }
		
		/// <summary>
		/// QueuedProvisioning defines the queued provisioning used by the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queuedProvisioning")]
		public QueuedProvisioning QueuedProvisioning { get; set; }
		
		/// <summary>
		/// [Output only] Server-defined URL for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// [Output only] The status of the nodes in this pool instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<NodePoolStatus> Status { get; set; }
		
		/// <summary>
		/// [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// UpdateInfo contains resource (instance groups, etc), status and other intermediate information relevant to a node pool upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateInfo")]
		public UpdateInfo UpdateInfo { get; set; }
		
		/// <summary>
		/// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is SURGE, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeSettings")]
		public UpgradeSettings UpgradeSettings { get; set; }
		
		/// <summary>
		/// The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodePoolAutoscaling
	{
		
		/// <summary>
		/// Can this node pool be deleted automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoprovisioned")]
		public System.Nullable<System.Boolean> Autoprovisioned { get; set; }
		
		/// <summary>
		/// Is autoscaling enabled for this node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Location policy used when scaling up a nodepool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationPolicy")]
		public System.Nullable<NodePoolAutoscalingLocationPolicy> LocationPolicy { get; set; }
		
		/// <summary>
		/// Maximum number of nodes for one location in the NodePool. Must be >= min_node_count. There has to be enough quota to scale up the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxNodeCount")]
		public System.Nullable<System.Int32> MaxNodeCount { get; set; }
		
		/// <summary>
		/// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= max_node_count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minNodeCount")]
		public System.Nullable<System.Int32> MinNodeCount { get; set; }
		
		/// <summary>
		/// Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalMaxNodeCount")]
		public System.Nullable<System.Int32> TotalMaxNodeCount { get; set; }
		
		/// <summary>
		/// Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalMinNodeCount")]
		public System.Nullable<System.Int32> TotalMinNodeCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NodePoolAutoscalingLocationPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATION_POLICY_UNSPECIFIED")]
		LOCATION_POLICY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BALANCED")]
		BALANCED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANY")]
		ANY = 2,
	}
	
	/// <summary>
	/// Parameters for node pool-level network config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeNetworkConfig
	{
		
		/// <summary>
		/// We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalNodeNetworkConfigs")]
		public AdditionalNodeNetworkConfig[] AdditionalNodeNetworkConfigs { get; set; }
		
		/// <summary>
		/// We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalPodNetworkConfigs")]
		public AdditionalPodNetworkConfig[] AdditionalPodNetworkConfigs { get; set; }
		
		/// <summary>
		/// Input only. Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified. If neither `create_pod_range` or `pod_range` are specified, the cluster-level default (`ip_allocation_policy.cluster_ipv4_cidr_block`) is used. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createPodRange")]
		public System.Nullable<System.Boolean> CreatePodRange { get; set; }
		
		/// <summary>
		/// Whether nodes have internal IP addresses only. If enable_private_nodes is not specified, then the value is derived from cluster.privateClusterConfig.enablePrivateNodes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePrivateNodes")]
		public System.Nullable<System.Boolean> EnablePrivateNodes { get; set; }
		
		/// <summary>
		/// Configuration of all network bandwidth tiers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkPerformanceConfig")]
		public NetworkPerformanceConfig NetworkPerformanceConfig { get; set; }
		
		/// <summary>
		/// [PRIVATE FIELD] Config for pod CIDR size overprovisioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podCidrOverprovisionConfig")]
		public PodCIDROverprovisionConfig PodCidrOverprovisionConfig { get; set; }
		
		/// <summary>
		/// The IP address range for pod IPs in this node pool. Only applicable if `create_pod_range` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) to pick a specific range to use. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podIpv4CidrBlock")]
		public string PodIpv4CidrBlock { get; set; }
		
		/// <summary>
		/// Output only. [Output only] The utilization of the IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podIpv4RangeUtilization")]
		public System.Nullable<System.Double> PodIpv4RangeUtilization { get; set; }
		
		/// <summary>
		/// The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podRange")]
		public string PodRange { get; set; }
	}
	
	/// <summary>
	/// Configuration of all network bandwidth tiers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkPerformanceConfig
	{
		
		/// <summary>
		/// Specifies the network bandwidth tier for the NodePool for traffic to external/public IP addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalIpEgressBandwidthTier")]
		public ClusterNetworkPerformanceConfigTotalEgressBandwidthTier ExternalIpEgressBandwidthTier { get; set; }
		
		/// <summary>
		/// Specifies the total network bandwidth tier for the NodePool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalEgressBandwidthTier")]
		public ClusterNetworkPerformanceConfigTotalEgressBandwidthTier TotalEgressBandwidthTier { get; set; }
	}
	
	/// <summary>
	/// PlacementPolicy defines the placement policy used by the node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlacementPolicy
	{
		
		/// <summary>
		/// If set, refers to the name of a custom resource policy supplied by the user. The resource policy must be in the same project and region as the node pool. If not found, InvalidArgument error is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyName")]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// TPU placement topology for pod slice node pool. https://cloud.google.com/tpu/docs/types-topologies#tpu_topologies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tpuTopology")]
		public string TpuTopology { get; set; }
		
		/// <summary>
		/// The type of placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PlacementPolicyType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PlacementPolicyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_UNSPECIFIED")]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPACT")]
		COMPACT = 1,
	}
	
	/// <summary>
	/// QueuedProvisioning defines the queued provisioning used by the node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueuedProvisioning
	{
		
		/// <summary>
		/// Denotes that this nodepool is QRM specific, meaning nodes can be only obtained through queuing via the Cluster Autoscaler ProvisioningRequest API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NodePoolStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATUS_UNSPECIFIED")]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROVISIONING")]
		PROVISIONING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING_WITH_ERROR")]
		RUNNING_WITH_ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECONCILING")]
		RECONCILING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOPPING")]
		STOPPING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 6,
	}
	
	/// <summary>
	/// UpdateInfo contains resource (instance groups, etc), status and other intermediate information relevant to a node pool upgrade.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInfo
	{
		
		/// <summary>
		/// Information relevant to blue-green upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blueGreenInfo")]
		public BlueGreenInfo BlueGreenInfo { get; set; }
	}
	
	/// <summary>
	/// NotificationConfig is the configuration of notifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationConfig
	{
		
		/// <summary>
		/// Pub/Sub specific notification config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsub")]
		public PubSub Pubsub { get; set; }
	}
	
	/// <summary>
	/// Pub/Sub specific notification config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PubSub
	{
		
		/// <summary>
		/// Enable notifications for Pub/Sub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public Filter Filter { get; set; }
		
		/// <summary>
		/// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	/// <summary>
	/// Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Filter
	{
		
		/// <summary>
		/// Event types to allowlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string[] EventType { get; set; }
	}
	
	/// <summary>
	/// ParentProductConfig is the configuration of the parent product of the cluster. This field is used by Google internal products that are built on top of a GKE cluster and take the ownership of the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParentProductConfig
	{
		
		/// <summary>
		/// Labels contain the configuration of the parent product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Name of the parent product associated with the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productName")]
		public string ProductName { get; set; }
	}
	
	/// <summary>
	/// Configuration for the PodSecurityPolicy feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PodSecurityPolicyConfig
	{
		
		/// <summary>
		/// Enable the PodSecurityPolicy controller for this cluster. If enabled, pods must be valid under a PodSecurityPolicy to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration options for private clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateClusterConfig
	{
		
		/// <summary>
		/// Whether the master's internal IP address is used as the cluster endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePrivateEndpoint")]
		public System.Nullable<System.Boolean> EnablePrivateEndpoint { get; set; }
		
		/// <summary>
		/// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePrivateNodes")]
		public System.Nullable<System.Boolean> EnablePrivateNodes { get; set; }
		
		/// <summary>
		/// Configuration for controlling master global access settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterGlobalAccessConfig")]
		public PrivateClusterMasterGlobalAccessConfig MasterGlobalAccessConfig { get; set; }
		
		/// <summary>
		/// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterIpv4CidrBlock")]
		public string MasterIpv4CidrBlock { get; set; }
		
		/// <summary>
		/// Output only. The peering name in the customer VPC used by this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeringName")]
		public string PeeringName { get; set; }
		
		/// <summary>
		/// Output only. The internal IP address of this cluster's master endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateEndpoint")]
		public string PrivateEndpoint { get; set; }
		
		/// <summary>
		/// Subnet to provision the master's private endpoint during cluster creation. Specified in projects/*/regions/*/subnetworks/* format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateEndpointSubnetwork")]
		public string PrivateEndpointSubnetwork { get; set; }
		
		/// <summary>
		/// Output only. The external IP address of this cluster's master endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicEndpoint")]
		public string PublicEndpoint { get; set; }
	}
	
	/// <summary>
	/// Configuration for controlling master global access settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateClusterMasterGlobalAccessConfig
	{
		
		/// <summary>
		/// Whenever master is accessible globally or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// ProtectConfig defines the flags needed to enable/disable features for the Protect API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProtectConfig
	{
		
		/// <summary>
		/// WorkloadConfig defines the flags to enable or disable the workload configurations for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadConfig")]
		public WorkloadConfig WorkloadConfig { get; set; }
		
		/// <summary>
		/// Sets which mode to use for Protect workload vulnerability scanning feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadVulnerabilityMode")]
		public System.Nullable<ProtectConfigWorkloadVulnerabilityMode> WorkloadVulnerabilityMode { get; set; }
	}
	
	/// <summary>
	/// WorkloadConfig defines the flags to enable or disable the workload configurations for the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkloadConfig
	{
		
		/// <summary>
		/// Sets which mode of auditing should be used for the cluster's workloads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditMode")]
		public System.Nullable<WorkloadConfigAuditMode> AuditMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WorkloadConfigAuditMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MODE_UNSPECIFIED")]
		MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BASIC")]
		BASIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BASELINE")]
		BASELINE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESTRICTED")]
		RESTRICTED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProtectConfigWorkloadVulnerabilityMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WORKLOAD_VULNERABILITY_MODE_UNSPECIFIED")]
		WORKLOAD_VULNERABILITY_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BASIC")]
		BASIC = 2,
	}
	
	/// <summary>
	/// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReleaseChannel
	{
		
		/// <summary>
		/// channel specifies which release channel the cluster is subscribed to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public System.Nullable<ReleaseChannelChannel> Channel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReleaseChannelChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSPECIFIED")]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RAPID")]
		RAPID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGULAR")]
		REGULAR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STABLE")]
		STABLE = 3,
	}
	
	/// <summary>
	/// Configuration for exporting cluster resource usages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceUsageExportConfig
	{
		
		/// <summary>
		/// Parameters for using BigQuery as the destination of resource usage export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bigqueryDestination")]
		public BigQueryDestination BigqueryDestination { get; set; }
		
		/// <summary>
		/// Parameters for controlling consumption metering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumptionMeteringConfig")]
		public ConsumptionMeteringConfig ConsumptionMeteringConfig { get; set; }
		
		/// <summary>
		/// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableNetworkEgressMetering")]
		public System.Nullable<System.Boolean> EnableNetworkEgressMetering { get; set; }
	}
	
	/// <summary>
	/// Parameters for controlling consumption metering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConsumptionMeteringConfig
	{
		
		/// <summary>
		/// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecurityPostureConfig
	{
		
		/// <summary>
		/// Sets which mode to use for Security Posture features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<SecurityPostureConfigMode> Mode { get; set; }
		
		/// <summary>
		/// Sets which mode to use for vulnerability scanning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vulnerabilityMode")]
		public System.Nullable<SecurityPostureConfigVulnerabilityMode> VulnerabilityMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SecurityPostureConfigMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MODE_UNSPECIFIED")]
		MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BASIC")]
		BASIC = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SecurityPostureConfigVulnerabilityMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VULNERABILITY_MODE_UNSPECIFIED")]
		VULNERABILITY_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VULNERABILITY_DISABLED")]
		VULNERABILITY_DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VULNERABILITY_BASIC")]
		VULNERABILITY_BASIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VULNERABILITY_ENTERPRISE")]
		VULNERABILITY_ENTERPRISE = 3,
	}
	
	/// <summary>
	/// Configuration of Shielded Nodes feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShieldedNodes
	{
		
		/// <summary>
		/// Whether Shielded Nodes features are enabled on all nodes in this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ClusterStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATUS_UNSPECIFIED")]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROVISIONING")]
		PROVISIONING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECONCILING")]
		RECONCILING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOPPING")]
		STOPPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEGRADED")]
		DEGRADED = 6,
	}
	
	/// <summary>
	/// Configuration for Cloud TPU.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TpuConfig
	{
		
		/// <summary>
		/// Whether Cloud TPU integration is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// IPv4 CIDR block reserved for Cloud TPU in the VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv4CidrBlock")]
		public string Ipv4CidrBlock { get; set; }
		
		/// <summary>
		/// Whether to use service networking for Cloud TPU or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useServiceNetworking")]
		public System.Nullable<System.Boolean> UseServiceNetworking { get; set; }
	}
	
	/// <summary>
	/// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VerticalPodAutoscaling
	{
		
		/// <summary>
		/// Enables vertical pod autoscaling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Configuration for direct-path (via ALTS) with workload identity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkloadALTSConfig
	{
		
		/// <summary>
		/// enable_alts controls whether the alts handshaker should be enabled or not for direct-path. Requires Workload Identity (workload_pool must be non-empty).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAlts")]
		public System.Nullable<System.Boolean> EnableAlts { get; set; }
	}
	
	/// <summary>
	/// Configuration for issuance of mTLS keys and certificates to Kubernetes pods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkloadCertificates
	{
		
		/// <summary>
		/// enable_certificates controls issuance of workload mTLS certificates. If set, the GKE Workload Identity Certificates controller and node agent will be deployed in the cluster, which can then be configured by creating a WorkloadCertificateConfig Custom Resource. Requires Workload Identity (workload_pool must be non-empty).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableCertificates")]
		public System.Nullable<System.Boolean> EnableCertificates { get; set; }
	}
	
	/// <summary>
	/// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkloadIdentityConfig
	{
		
		/// <summary>
		/// IAM Identity Namespace to attach all Kubernetes Service Accounts to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityNamespace")]
		public string IdentityNamespace { get; set; }
		
		/// <summary>
		/// identity provider is the third party identity provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityProvider")]
		public string IdentityProvider { get; set; }
		
		/// <summary>
		/// The workload pool to attach all Kubernetes service accounts to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadPool")]
		public string WorkloadPool { get; set; }
	}
	
	/// <summary>
	/// ClusterUpdate describes an update to the cluster. Exactly one update can be applied to a cluster with each request, so at most one field can be provided.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterUpdate
	{
		
		/// <summary>
		/// AdditionalPodRangesConfig is the configuration for additional pod secondary ranges supporting the ClusterUpdate message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalPodRangesConfig")]
		public AdditionalPodRangesConfig AdditionalPodRangesConfig { get; set; }
		
		/// <summary>
		/// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredAddonsConfig")]
		public AddonsConfig DesiredAddonsConfig { get; set; }
		
		/// <summary>
		/// Configuration for returning group information from authenticators.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredAuthenticatorGroupsConfig")]
		public AuthenticatorGroupsConfig DesiredAuthenticatorGroupsConfig { get; set; }
		
		/// <summary>
		/// WorkloadPolicyConfig is the configuration of workload policy for autopilot clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredAutopilotWorkloadPolicyConfig")]
		public WorkloadPolicyConfig DesiredAutopilotWorkloadPolicyConfig { get; set; }
		
		/// <summary>
		/// Configuration for Binary Authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredBinaryAuthorization")]
		public BinaryAuthorization DesiredBinaryAuthorization { get; set; }
		
		/// <summary>
		/// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredClusterAutoscaling")]
		public ClusterAutoscaling DesiredClusterAutoscaling { get; set; }
		
		/// <summary>
		/// Telemetry integration for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredClusterTelemetry")]
		public ClusterTelemetry DesiredClusterTelemetry { get; set; }
		
		/// <summary>
		/// Configuration for fine-grained cost management feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredCostManagementConfig")]
		public CostManagementConfig DesiredCostManagementConfig { get; set; }
		
		/// <summary>
		/// Configuration of etcd encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredDatabaseEncryption")]
		public DatabaseEncryption DesiredDatabaseEncryption { get; set; }
		
		/// <summary>
		/// The desired datapath provider for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredDatapathProvider")]
		public NetworkConfigDatapathProvider DesiredDatapathProvider { get; set; }
		
		/// <summary>
		/// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredDefaultSnatStatus")]
		public DefaultSnatStatus DesiredDefaultSnatStatus { get; set; }
		
		/// <summary>
		/// DNSConfig contains the desired set of options for configuring clusterDNS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredDnsConfig")]
		public DNSConfig DesiredDnsConfig { get; set; }
		
		/// <summary>
		/// Enable/Disable FQDN Network Policy for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredEnableFqdnNetworkPolicy")]
		public System.Nullable<System.Boolean> DesiredEnableFqdnNetworkPolicy { get; set; }
		
		/// <summary>
		/// Enable/Disable private endpoint for the cluster's master.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredEnablePrivateEndpoint")]
		public System.Nullable<System.Boolean> DesiredEnablePrivateEndpoint { get; set; }
		
		/// <summary>
		/// Fleet is the fleet configuration for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredFleet")]
		public Fleet DesiredFleet { get; set; }
		
		/// <summary>
		/// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredGatewayApiConfig")]
		public GatewayAPIConfig DesiredGatewayApiConfig { get; set; }
		
		/// <summary>
		/// GcfsConfig contains configurations of Google Container File System.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredGcfsConfig")]
		public GcfsConfig DesiredGcfsConfig { get; set; }
		
		/// <summary>
		/// HostMaintenancePolicy contains the maintenance policy for the hosts on which the GKE VMs run on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredHostMaintenancePolicy")]
		public HostMaintenancePolicy DesiredHostMaintenancePolicy { get; set; }
		
		/// <summary>
		/// IdentityServiceConfig is configuration for Identity Service which allows customers to use external identity providers with the K8S API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredIdentityServiceConfig")]
		public IdentityServiceConfig DesiredIdentityServiceConfig { get; set; }
		
		/// <summary>
		/// The desired image type for the node pool. NOTE: Set the "desired_node_pool" field as well.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredImageType")]
		public string DesiredImageType { get; set; }
		
		/// <summary>
		/// Specify the details of in-transit encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredInTransitEncryptionConfig")]
		public NetworkConfigInTransitEncryptionConfig DesiredInTransitEncryptionConfig { get; set; }
		
		/// <summary>
		/// IntraNodeVisibilityConfig contains the desired config of the intra-node visibility on this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredIntraNodeVisibilityConfig")]
		public IntraNodeVisibilityConfig DesiredIntraNodeVisibilityConfig { get; set; }
		
		/// <summary>
		/// Kubernetes open source beta apis enabled on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredK8sBetaApis")]
		public K8sBetaAPIConfig DesiredK8sBetaApis { get; set; }
		
		/// <summary>
		/// ILBSubsettingConfig contains the desired config of L4 Internal LoadBalancer subsetting on this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredL4ilbSubsettingConfig")]
		public ILBSubsettingConfig DesiredL4ilbSubsettingConfig { get; set; }
		
		/// <summary>
		/// The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This list must always include the cluster's primary zone. Warning: changing cluster locations will update the locations of all node pools and will result in nodes being added and/or removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredLocations")]
		public string[] DesiredLocations { get; set; }
		
		/// <summary>
		/// LoggingConfig is cluster logging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredLoggingConfig")]
		public LoggingConfig DesiredLoggingConfig { get; set; }
		
		/// <summary>
		/// The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredLoggingService")]
		public string DesiredLoggingService { get; set; }
		
		/// <summary>
		/// Master is the configuration for components on master.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredMaster")]
		public Master DesiredMaster { get; set; }
		
		/// <summary>
		/// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredMasterAuthorizedNetworksConfig")]
		public MasterAuthorizedNetworksConfig DesiredMasterAuthorizedNetworksConfig { get; set; }
		
		/// <summary>
		/// The Kubernetes version to change the master to. The only valid value is the latest supported version. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "-": picks the default Kubernetes version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredMasterVersion")]
		public string DesiredMasterVersion { get; set; }
		
		/// <summary>
		/// Configuration for issuance of mTLS keys and certificates to Kubernetes pods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredMeshCertificates")]
		public MeshCertificates DesiredMeshCertificates { get; set; }
		
		/// <summary>
		/// MonitoringConfig is cluster monitoring configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredMonitoringConfig")]
		public MonitoringConfig DesiredMonitoringConfig { get; set; }
		
		/// <summary>
		/// The monitoring service the cluster should use to write metrics. Currently available options: * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredMonitoringService")]
		public string DesiredMonitoringService { get; set; }
		
		/// <summary>
		/// Configuration of all network bandwidth tiers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredNetworkPerformanceConfig")]
		public ClusterNetworkPerformanceConfig DesiredNetworkPerformanceConfig { get; set; }
		
		/// <summary>
		/// Collection of Compute Engine network tags that can be applied to a node's underlying VM instance. (See `tags` field in [`NodeConfig`](/kubernetes-engine/docs/reference/rest/v1/NodeConfig)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredNodePoolAutoConfigNetworkTags")]
		public NetworkTags DesiredNodePoolAutoConfigNetworkTags { get; set; }
		
		/// <summary>
		/// A map of resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies. Tags must be according to specifications in https://cloud.google.com/vpc/docs/tags-firewalls-overview#specifications. A maximum of 5 tag key-value pairs can be specified. Existing tags will be replaced with new values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredNodePoolAutoConfigResourceManagerTags")]
		public ResourceManagerTags DesiredNodePoolAutoConfigResourceManagerTags { get; set; }
		
		/// <summary>
		/// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredNodePoolAutoscaling")]
		public NodePoolAutoscaling DesiredNodePoolAutoscaling { get; set; }
		
		/// <summary>
		/// The node pool to be upgraded. This field is mandatory if "desired_node_version", "desired_image_family", "desired_node_pool_autoscaling", or "desired_workload_metadata_config" is specified and there is more than one node pool on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredNodePoolId")]
		public string DesiredNodePoolId { get; set; }
		
		/// <summary>
		/// NodePoolLoggingConfig specifies logging configuration for nodepools.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredNodePoolLoggingConfig")]
		public NodePoolLoggingConfig DesiredNodePoolLoggingConfig { get; set; }
		
		/// <summary>
		/// The Kubernetes version to change the nodes to (typically an upgrade). Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "-": picks the Kubernetes master version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredNodeVersion")]
		public string DesiredNodeVersion { get; set; }
		
		/// <summary>
		/// NotificationConfig is the configuration of notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredNotificationConfig")]
		public NotificationConfig DesiredNotificationConfig { get; set; }
		
		/// <summary>
		/// ParentProductConfig is the configuration of the parent product of the cluster. This field is used by Google internal products that are built on top of a GKE cluster and take the ownership of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredParentProductConfig")]
		public ParentProductConfig DesiredParentProductConfig { get; set; }
		
		/// <summary>
		/// Configuration for the PodSecurityPolicy feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredPodSecurityPolicyConfig")]
		public PodSecurityPolicyConfig DesiredPodSecurityPolicyConfig { get; set; }
		
		/// <summary>
		/// Configuration options for private clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredPrivateClusterConfig")]
		public PrivateClusterConfig DesiredPrivateClusterConfig { get; set; }
		
		/// <summary>
		/// The desired state of IPv6 connectivity to Google Services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredPrivateIpv6GoogleAccess")]
		public NetworkConfigPrivateIpv6GoogleAccess DesiredPrivateIpv6GoogleAccess { get; set; }
		
		/// <summary>
		/// ProtectConfig defines the flags needed to enable/disable features for the Protect API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredProtectConfig")]
		public ProtectConfig DesiredProtectConfig { get; set; }
		
		/// <summary>
		/// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredReleaseChannel")]
		public ReleaseChannel DesiredReleaseChannel { get; set; }
		
		/// <summary>
		/// Configuration for exporting cluster resource usages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredResourceUsageExportConfig")]
		public ResourceUsageExportConfig DesiredResourceUsageExportConfig { get; set; }
		
		/// <summary>
		/// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredSecurityPostureConfig")]
		public SecurityPostureConfig DesiredSecurityPostureConfig { get; set; }
		
		/// <summary>
		/// Config to block services with externalIPs field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredServiceExternalIpsConfig")]
		public ServiceExternalIPsConfig DesiredServiceExternalIpsConfig { get; set; }
		
		/// <summary>
		/// Configuration of Shielded Nodes feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredShieldedNodes")]
		public ShieldedNodes DesiredShieldedNodes { get; set; }
		
		/// <summary>
		/// The desired stack type of the cluster. If a stack type is provided and does not match the current stack type of the cluster, update will attempt to change the stack type to the new type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredStackType")]
		public IPAllocationPolicyStackType DesiredStackType { get; set; }
		
		/// <summary>
		/// Configuration for Cloud TPU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredTpuConfig")]
		public TpuConfig DesiredTpuConfig { get; set; }
		
		/// <summary>
		/// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredVerticalPodAutoscaling")]
		public VerticalPodAutoscaling DesiredVerticalPodAutoscaling { get; set; }
		
		/// <summary>
		/// Configuration for direct-path (via ALTS) with workload identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredWorkloadAltsConfig")]
		public WorkloadALTSConfig DesiredWorkloadAltsConfig { get; set; }
		
		/// <summary>
		/// Configuration for issuance of mTLS keys and certificates to Kubernetes pods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredWorkloadCertificates")]
		public WorkloadCertificates DesiredWorkloadCertificates { get; set; }
		
		/// <summary>
		/// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredWorkloadIdentityConfig")]
		public WorkloadIdentityConfig DesiredWorkloadIdentityConfig { get; set; }
		
		/// <summary>
		/// Kubernetes open source beta apis enabled on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableK8sBetaApis")]
		public K8sBetaAPIConfig EnableK8sBetaApis { get; set; }
		
		/// <summary>
		/// The current etag of the cluster. If an etag is provided and does not match the current etag of the cluster, update will be blocked and an ABORTED error will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// AdditionalPodRangesConfig is the configuration for additional pod secondary ranges supporting the ClusterUpdate message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removedAdditionalPodRangesConfig")]
		public AdditionalPodRangesConfig RemovedAdditionalPodRangesConfig { get; set; }
	}
	
	/// <summary>
	/// IntraNodeVisibilityConfig contains the desired config of the intra-node visibility on this cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntraNodeVisibilityConfig
	{
		
		/// <summary>
		/// Enables intra node visibility for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// ILBSubsettingConfig contains the desired config of L4 Internal LoadBalancer subsetting on this cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ILBSubsettingConfig
	{
		
		/// <summary>
		/// Enables l4 ILB subsetting for this cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// CompleteIPRotationRequest moves the cluster master back into single-IP mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompleteIPRotationRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster name) of the cluster to complete IP rotation. Specified in the format `projects/*/locations/*/clusters/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// CompleteNodePoolUpgradeRequest sets the name of target node pool to complete upgrade.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompleteNodePoolUpgradeRequest
	{
	}
	
	/// <summary>
	/// CreateClusterRequest creates a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateClusterRequest
	{
		
		/// <summary>
		/// A Google Kubernetes Engine cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public Cluster Cluster { get; set; }
		
		/// <summary>
		/// The parent (project and location) where the cluster will be created. Specified in the format `projects/*/locations/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the parent field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// CreateNodePoolRequest creates a node pool for a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateNodePoolRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the parent field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePool")]
		public NodePool NodePool { get; set; }
		
		/// <summary>
		/// The parent (project, location, cluster name) where the node pool will be created. Specified in the format `projects/*/locations/*/clusters/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the parent field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// GetJSONWebKeysResponse is a valid JSON Web Key Set as specififed in rfc 7517
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetJSONWebKeysResponse
	{
		
		/// <summary>
		/// RFC-2616: cache control support
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheHeader")]
		public HttpCacheControlResponseHeader CacheHeader { get; set; }
		
		/// <summary>
		/// The public component of the keys used by the cluster to sign token requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public Jwk[] Keys { get; set; }
	}
	
	/// <summary>
	/// RFC-2616: cache control support
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpCacheControlResponseHeader
	{
		
		/// <summary>
		/// 14.6 response cache age, in seconds since the response is generated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="age")]
		public string Age { get; set; }
		
		/// <summary>
		/// 14.9 request and response directives
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directive")]
		public string Directive { get; set; }
		
		/// <summary>
		/// 14.21 response cache expires, in RFC 1123 date format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public string Expires { get; set; }
	}
	
	/// <summary>
	/// Jwk is a JSON Web Key as specified in RFC 7517
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Jwk
	{
		
		/// <summary>
		/// Algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alg")]
		public string Alg { get; set; }
		
		/// <summary>
		/// Used for ECDSA keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crv")]
		public string Crv { get; set; }
		
		/// <summary>
		/// Used for RSA keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="e")]
		public string E { get; set; }
		
		/// <summary>
		/// Key ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kid")]
		public string Kid { get; set; }
		
		/// <summary>
		/// Key Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kty")]
		public string Kty { get; set; }
		
		/// <summary>
		/// Used for RSA keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="n")]
		public string N { get; set; }
		
		/// <summary>
		/// Permitted uses for the public keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="use")]
		public string Use { get; set; }
		
		/// <summary>
		/// Used for ECDSA keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x")]
		public string X { get; set; }
		
		/// <summary>
		/// Used for ECDSA keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="y")]
		public string Y { get; set; }
	}
	
	/// <summary>
	/// GetOpenIDConfigResponse is an OIDC discovery document for the cluster. See the OpenID Connect Discovery 1.0 specification for details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOpenIDConfigResponse
	{
		
		/// <summary>
		/// RFC-2616: cache control support
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheHeader")]
		public HttpCacheControlResponseHeader CacheHeader { get; set; }
		
		/// <summary>
		/// Supported claims.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claims_supported")]
		public string[] Claims_supported { get; set; }
		
		/// <summary>
		/// Supported grant types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grant_types")]
		public string[] Grant_types { get; set; }
		
		/// <summary>
		/// supported ID Token signing Algorithms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id_token_signing_alg_values_supported")]
		public string[] Id_token_signing_alg_values_supported { get; set; }
		
		/// <summary>
		/// OIDC Issuer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		/// <summary>
		/// JSON Web Key uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwks_uri")]
		public string Jwks_uri { get; set; }
		
		/// <summary>
		/// Supported response types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response_types_supported")]
		public string[] Response_types_supported { get; set; }
		
		/// <summary>
		/// Supported subject types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject_types_supported")]
		public string[] Subject_types_supported { get; set; }
	}
	
	/// <summary>
	/// ListClustersResponse is the result of ListClustersRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListClustersResponse
	{
		
		/// <summary>
		/// A list of clusters in the project in the specified zone, or across all ones.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusters")]
		public Cluster[] Clusters { get; set; }
		
		/// <summary>
		/// If any zones are listed here, the list of clusters returned may be missing those zones.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="missingZones")]
		public string[] MissingZones { get; set; }
	}
	
	/// <summary>
	/// ListLocationsResponse returns the list of all GKE locations and their recommendation state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A full list of GKE locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// Only return ListLocationsResponse that occur after the page_token. This value should be populated from the ListLocationsResponse.next_page_token if that response token was set (which happens when listing more Locations than fit in a single ListLocationsResponse).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Location returns the location name, and if the location is recommended for GKE cluster scheduling.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// Contains the name of the resource requested. Specified in the format `projects/*/locations/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether the location is recommended for GKE cluster scheduling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommended")]
		public System.Nullable<System.Boolean> Recommended { get; set; }
		
		/// <summary>
		/// Contains the type of location this Location is for. Regional or Zonal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<LocationType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATION_TYPE_UNSPECIFIED")]
		LOCATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZONE")]
		ZONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGION")]
		REGION = 2,
	}
	
	/// <summary>
	/// ListNodePoolsResponse is the result of ListNodePoolsRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListNodePoolsResponse
	{
		
		/// <summary>
		/// A list of node pools for a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePools")]
		public NodePool[] NodePools { get; set; }
	}
	
	/// <summary>
	/// ListOperationsResponse is the result of ListOperationsRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// If any zones are listed here, the list of operations returned may be missing the operations from those zones.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="missingZones")]
		public string[] MissingZones { get; set; }
		
		/// <summary>
		/// A list of operations in the project in the specified zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Operation
	{
		
		/// <summary>
		/// Which conditions caused the current cluster state. Deprecated. Use field error instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterConditions")]
		public StatusCondition[] ClusterConditions { get; set; }
		
		/// <summary>
		/// Detailed operation progress, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// [Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The server-assigned ID for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Which conditions caused the current node pool state. Deprecated. Use field error instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodepoolConditions")]
		public StatusCondition[] NodepoolConditions { get; set; }
		
		/// <summary>
		/// The operation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public System.Nullable<OperationOperationType> OperationType { get; set; }
		
		/// <summary>
		/// Information about operation (or operation stage) progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public OperationProgress Progress { get; set; }
		
		/// <summary>
		/// Server-defined URI for the operation. Example: `https://container.googleapis.com/v1alpha1/projects/123/locations/us-central1/operations/operation-123`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// [Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The current status of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OperationProgressStatus Status { get; set; }
		
		/// <summary>
		/// Output only. If an error has occurred, a textual description of the error. Deprecated. Use field error instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Server-defined URI for the target of the operation. The format of this is a URI to the resource being modified (such as a cluster, node pool, or node). For node pool repairs, there may be multiple nodes being repaired, but only one will be the target. Examples: - ## `https://container.googleapis.com/v1/projects/123/locations/us-central1/clusters/my-cluster` ## `https://container.googleapis.com/v1/projects/123/zones/us-central1-c/clusters/my-cluster/nodePools/my-np` `https://container.googleapis.com/v1/projects/123/zones/us-central1-c/clusters/my-cluster/nodePools/my-np/node/my-node`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLink")]
		public string TargetLink { get; set; }
		
		/// <summary>
		/// The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OperationOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_UNSPECIFIED")]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_CLUSTER")]
		CREATE_CLUSTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE_CLUSTER")]
		DELETE_CLUSTER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPGRADE_MASTER")]
		UPGRADE_MASTER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPGRADE_NODES")]
		UPGRADE_NODES = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REPAIR_CLUSTER")]
		REPAIR_CLUSTER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE_CLUSTER")]
		UPDATE_CLUSTER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_NODE_POOL")]
		CREATE_NODE_POOL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE_NODE_POOL")]
		DELETE_NODE_POOL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SET_NODE_POOL_MANAGEMENT")]
		SET_NODE_POOL_MANAGEMENT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO_REPAIR_NODES")]
		AUTO_REPAIR_NODES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO_UPGRADE_NODES")]
		AUTO_UPGRADE_NODES = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SET_LABELS")]
		SET_LABELS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SET_MASTER_AUTH")]
		SET_MASTER_AUTH = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SET_NODE_POOL_SIZE")]
		SET_NODE_POOL_SIZE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SET_NETWORK_POLICY")]
		SET_NETWORK_POLICY = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SET_MAINTENANCE_POLICY")]
		SET_MAINTENANCE_POLICY = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESIZE_CLUSTER")]
		RESIZE_CLUSTER = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FLEET_FEATURE_UPGRADE")]
		FLEET_FEATURE_UPGRADE = 18,
	}
	
	/// <summary>
	/// Information about operation (or operation stage) progress.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationProgress
	{
		
		/// <summary>
		/// Progress metric bundle, for example: metrics: [{name: "nodes done", int_value: 15}, {name: "nodes total", int_value: 32}] or metrics: [{name: "progress", double_value: 0.56}, {name: "progress scale", double_value: 1.0}]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
		
		/// <summary>
		/// A non-parameterized string describing an operation stage. Unset for single-stage operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Substages of an operation or a stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stages")]
		public OperationProgress[] Stages { get; set; }
		
		/// <summary>
		/// Status of an operation stage. Unset for single-stage operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OperationProgressStatus> Status { get; set; }
	}
	
	/// <summary>
	/// Progress metric is (string, int|float|string) pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Metric
	{
		
		/// <summary>
		/// For metrics with floating point value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleValue")]
		public System.Nullable<System.Double> DoubleValue { get; set; }
		
		/// <summary>
		/// For metrics with integer value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intValue")]
		public string IntValue { get; set; }
		
		/// <summary>
		/// Required. Metric name, e.g., "nodes total", "percent done".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// For metrics with custom values (ratios, visual progress, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OperationProgressStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATUS_UNSPECIFIED")]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DONE")]
		DONE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ABORTING")]
		ABORTING = 4,
	}
	
	/// <summary>
	/// ListUsableSubnetworksResponse is the response of ListUsableSubnetworksRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUsableSubnetworksResponse
	{
		
		/// <summary>
		/// This token allows you to get the next page of results for list requests. If the number of results is larger than `page_size`, use the `next_page_token` as a value for the query parameter `page_token` in the next request. The value will become empty when there are no more pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of usable subnetworks in the specified network project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetworks")]
		public UsableSubnetwork[] Subnetworks { get; set; }
	}
	
	/// <summary>
	/// UsableSubnetwork resource returns the subnetwork name, its associated network and the primary CIDR range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsableSubnetwork
	{
		
		/// <summary>
		/// The range of internal addresses that are owned by this subnetwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipCidrRange")]
		public string IpCidrRange { get; set; }
		
		/// <summary>
		/// Network Name. Example: projects/my-project/global/networks/my-network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Secondary IP ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryIpRanges")]
		public UsableSubnetworkSecondaryRange[] SecondaryIpRanges { get; set; }
		
		/// <summary>
		/// A human readable status message representing the reasons for cases where the caller cannot use the secondary ranges under the subnet. For example if the secondary_ip_ranges is empty due to a permission issue, an insufficient permission message will be given by status_message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Subnetwork Name. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetwork")]
		public string Subnetwork { get; set; }
	}
	
	/// <summary>
	/// Secondary IP range of a usable subnetwork.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsableSubnetworkSecondaryRange
	{
		
		/// <summary>
		/// The range of IP addresses belonging to this subnetwork secondary range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipCidrRange")]
		public string IpCidrRange { get; set; }
		
		/// <summary>
		/// The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rangeName")]
		public string RangeName { get; set; }
		
		/// <summary>
		/// This field is to determine the status of the secondary range programmably.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<UsableSubnetworkSecondaryRangeStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UsableSubnetworkSecondaryRangeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNUSED")]
		UNUSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_USE_SERVICE")]
		IN_USE_SERVICE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_USE_SHAREABLE_POD")]
		IN_USE_SHAREABLE_POD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_USE_MANAGED_POD")]
		IN_USE_MANAGED_POD = 4,
	}
	
	/// <summary>
	/// Collection of node-level [Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeLabels
	{
		
		/// <summary>
		/// Map of node label keys and node label values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
	}
	
	/// <summary>
	/// Collection of Kubernetes [node taints](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeTaints
	{
		
		/// <summary>
		/// List of node taints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taints")]
		public NodeTaint[] Taints { get; set; }
	}
	
	/// <summary>
	/// ReleaseChannelConfig exposes configuration for a release channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReleaseChannelConfig
	{
		
		/// <summary>
		/// Deprecated. This field has been deprecated and replaced with the valid_versions field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableVersions")]
		public AvailableVersion[] AvailableVersions { get; set; }
		
		/// <summary>
		/// The release channel this configuration applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public ReleaseChannelChannel Channel { get; set; }
		
		/// <summary>
		/// The default version for newly created clusters on the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultVersion")]
		public string DefaultVersion { get; set; }
		
		/// <summary>
		/// List of valid versions for the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validVersions")]
		public string[] ValidVersions { get; set; }
	}
	
	/// <summary>
	/// Collection of [GCP labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceLabels
	{
		
		/// <summary>
		/// Map of node label keys and node label values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
	}
	
	/// <summary>
	/// RollbackNodePoolUpgradeRequest rollbacks the previously Aborted or Failed NodePool upgrade. This will be an no-op if the last upgrade successfully completed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RollbackNodePoolUpgradeRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster to rollback. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster, node pool id) of the node poll to rollback upgrade. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the node pool to rollback. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolId")]
		public string NodePoolId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Option for rollback to ignore the PodDisruptionBudget. Default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="respectPdb")]
		public System.Nullable<System.Boolean> RespectPdb { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// SecurityBulletinEvent is a notification sent to customers when a security bulletin has been posted that they are vulnerable to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecurityBulletinEvent
	{
		
		/// <summary>
		/// The GKE minor versions affected by this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedSupportedMinors")]
		public string[] AffectedSupportedMinors { get; set; }
		
		/// <summary>
		/// A brief description of the bulletin. See the bulletin pointed to by the bulletin_uri field for an expanded description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="briefDescription")]
		public string BriefDescription { get; set; }
		
		/// <summary>
		/// The ID of the bulletin corresponding to the vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bulletinId")]
		public string BulletinId { get; set; }
		
		/// <summary>
		/// The URI link to the bulletin on the website for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bulletinUri")]
		public string BulletinUri { get; set; }
		
		/// <summary>
		/// The CVEs associated with this bulletin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cveIds")]
		public string[] CveIds { get; set; }
		
		/// <summary>
		/// If this field is specified, it means there are manual steps that the user must take to make their clusters safe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualStepsRequired")]
		public System.Nullable<System.Boolean> ManualStepsRequired { get; set; }
		
		/// <summary>
		/// The GKE versions where this vulnerability is patched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patchedVersions")]
		public string[] PatchedVersions { get; set; }
		
		/// <summary>
		/// The resource type (node/control plane) that has the vulnerability. Multiple notifications (1 notification per resource type) will be sent for a vulnerability that affects > 1 resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceTypeAffected")]
		public string ResourceTypeAffected { get; set; }
		
		/// <summary>
		/// The severity of this bulletin as it relates to GKE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		/// <summary>
		/// This represents a version selected from the patched_versions field that the cluster receiving this notification should most likely want to upgrade to based on its current version. Note that if this notification is being received by a given cluster, it means that this version is currently available as an upgrade target in that cluster's location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedUpgradeTarget")]
		public string SuggestedUpgradeTarget { get; set; }
	}
	
	/// <summary>
	/// Kubernetes Engine service configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerConfig
	{
		
		/// <summary>
		/// List of release channel configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public ReleaseChannelConfig[] Channels { get; set; }
		
		/// <summary>
		/// Version of Kubernetes the service deploys by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultClusterVersion")]
		public string DefaultClusterVersion { get; set; }
		
		/// <summary>
		/// Default image type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultImageType")]
		public string DefaultImageType { get; set; }
		
		/// <summary>
		/// List of valid image types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validImageTypes")]
		public string[] ValidImageTypes { get; set; }
		
		/// <summary>
		/// List of valid master versions, in descending order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validMasterVersions")]
		public string[] ValidMasterVersions { get; set; }
		
		/// <summary>
		/// List of valid node upgrade target versions, in descending order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validNodeVersions")]
		public string[] ValidNodeVersions { get; set; }
		
		/// <summary>
		/// Maps of Kubernetes version and supported Windows server versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsVersionMaps")]
		public System.Collections.Generic.Dictionary<string, WindowsVersions> WindowsVersionMaps { get; set; }
	}
	
	/// <summary>
	/// Windows server versions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WindowsVersions
	{
		
		/// <summary>
		/// List of Windows server versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsVersions")]
		public WindowsVersion[] WindowsVersions1 { get; set; }
	}
	
	/// <summary>
	/// Windows server version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WindowsVersion
	{
		
		/// <summary>
		/// Windows server image type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageType")]
		public string ImageType { get; set; }
		
		/// <summary>
		/// Windows server build number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportEndDate")]
		public Date SupportEndDate { get; set; }
	}
	
	/// <summary>
	/// SetAddonsRequest sets the addons associated with the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetAddonsConfigRequest
	{
		
		/// <summary>
		/// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addonsConfig")]
		public AddonsConfig AddonsConfig { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster) of the cluster to set addons. Specified in the format `projects/*/locations/*/clusters/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// SetLabelsRequest sets the Google Cloud Platform labels on a Google Container Engine cluster, which will in turn set them for Google Compute Engine resources used by that cluster
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetLabelsRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// Required. The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Kubernetes Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash when updating or changing labels. Make a `get()` request to the resource to get the latest fingerprint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelFingerprint")]
		public string LabelFingerprint { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster name) of the cluster to set labels. Specified in the format `projects/*/locations/*/clusters/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. The labels to set for that cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLabels")]
		public System.Collections.Generic.Dictionary<string, string> ResourceLabels { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// SetLegacyAbacRequest enables or disables the ABAC authorization mechanism for a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetLegacyAbacRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster to update. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// Required. Whether ABAC authorization will be enabled in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster name) of the cluster to set legacy abac. Specified in the format `projects/*/locations/*/clusters/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// SetLocationsRequest sets the locations of the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetLocationsRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// Required. The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. Changing the locations a cluster is in will result in nodes being either created or removed from the cluster, depending on whether locations are being added or removed. This list must always include the cluster's primary zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster) of the cluster to set locations. Specified in the format `projects/*/locations/*/clusters/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// SetLoggingServiceRequest sets the logging service of a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetLoggingServiceRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// Required. The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingService")]
		public string LoggingService { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster) of the cluster to set logging. Specified in the format `projects/*/locations/*/clusters/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// SetMaintenancePolicyRequest sets the maintenance policy for a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetMaintenancePolicyRequest
	{
		
		/// <summary>
		/// Required. The name of the cluster to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// MaintenancePolicy defines the maintenance policy to be used for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenancePolicy")]
		public MaintenancePolicy MaintenancePolicy { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster name) of the cluster to set maintenance policy. Specified in the format `projects/*/locations/*/clusters/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// SetMasterAuthRequest updates the admin password of a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetMasterAuthRequest
	{
		
		/// <summary>
		/// Required. The exact form of action to be taken on the master auth.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<SetMasterAuthRequestAction> Action { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster) of the cluster to set auth. Specified in the format `projects/*/locations/*/clusters/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update")]
		public MasterAuth Update { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SetMasterAuthRequestAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SET_PASSWORD")]
		SET_PASSWORD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERATE_PASSWORD")]
		GENERATE_PASSWORD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SET_USERNAME")]
		SET_USERNAME = 3,
	}
	
	/// <summary>
	/// SetMonitoringServiceRequest sets the monitoring service of a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetMonitoringServiceRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// Required. The monitoring service the cluster should use to write metrics. Currently available options: * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoringService")]
		public string MonitoringService { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster) of the cluster to set monitoring. Specified in the format `projects/*/locations/*/clusters/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// SetNetworkPolicyRequest enables/disables network policy for a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetNetworkPolicyRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster name) of the cluster to set networking policy. Specified in the format `projects/*/locations/*/clusters/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkPolicy")]
		public NetworkPolicy NetworkPolicy { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// SetNodePoolAutoscalingRequest sets the autoscaler settings of a node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetNodePoolAutoscalingRequest
	{
		
		/// <summary>
		/// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoscaling")]
		public NodePoolAutoscaling Autoscaling { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster, node pool) of the node pool to set autoscaler settings. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the node pool to upgrade. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolId")]
		public string NodePoolId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// SetNodePoolManagementRequest sets the node management properties of a node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetNodePoolManagementRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster to update. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// NodeManagement defines the set of node management services turned on for the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="management")]
		public NodeManagement Management { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster, node pool id) of the node pool to set management properties. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the node pool to update. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolId")]
		public string NodePoolId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// SetNodePoolSizeRequest sets the size of a node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetNodePoolSizeRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster to update. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster, node pool id) of the node pool to set size. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The desired node count for the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeCount")]
		public System.Nullable<System.Int32> NodeCount { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the node pool to update. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolId")]
		public string NodePoolId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// StartIPRotationRequest creates a new IP for the cluster and then performs a node upgrade on each node pool to point to the new IP.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartIPRotationRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster name) of the cluster to start IP rotation. Specified in the format `projects/*/locations/*/clusters/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Whether to rotate credentials during IP rotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotateCredentials")]
		public System.Nullable<System.Boolean> RotateCredentials { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// UpdateClusterRequest updates the settings of a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateClusterRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster) of the cluster to update. Specified in the format `projects/*/locations/*/clusters/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// ClusterUpdate describes an update to the cluster. Exactly one update can be applied to a cluster with each request, so at most one field can be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update")]
		public ClusterUpdate Update { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// UpdateMasterRequest updates the master of the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMasterRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// Required. The Kubernetes version to change the master to. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "-": picks the default Kubernetes version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterVersion")]
		public string MasterVersion { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster) of the cluster to update. Specified in the format `projects/*/locations/*/clusters/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// SetNodePoolVersionRequest updates the version of a node pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateNodePoolRequest
	{
		
		/// <summary>
		/// Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidentialNodes")]
		public ConfidentialNodes ConfidentialNodes { get; set; }
		
		/// <summary>
		/// Optional. The desired disk size for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified disk size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGb")]
		public string DiskSizeGb { get; set; }
		
		/// <summary>
		/// Optional. The desired disk type for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified disk type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskType")]
		public string DiskType { get; set; }
		
		/// <summary>
		/// The current etag of the node pool. If an etag is provided and does not match the current etag of the node pool, update will be blocked and an ABORTED error will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Configuration of Fast Socket feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fastSocket")]
		public FastSocket FastSocket { get; set; }
		
		/// <summary>
		/// GcfsConfig contains configurations of Google Container File System.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcfsConfig")]
		public GcfsConfig GcfsConfig { get; set; }
		
		/// <summary>
		/// Configuration of gVNIC feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gvnic")]
		public VirtualNIC Gvnic { get; set; }
		
		/// <summary>
		/// Required. The desired image type for the node pool. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageType")]
		public string ImageType { get; set; }
		
		/// <summary>
		/// Node kubelet configs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kubeletConfig")]
		public NodeKubeletConfig KubeletConfig { get; set; }
		
		/// <summary>
		/// Collection of node-level [Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public NodeLabels Labels { get; set; }
		
		/// <summary>
		/// Parameters that can be configured on Linux nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linuxNodeConfig")]
		public LinuxNodeConfig LinuxNodeConfig { get; set; }
		
		/// <summary>
		/// The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the node pool's nodes should be located. Changing the locations for a node pool will result in nodes being either created or removed from the node pool, depending on whether locations are being added or removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// NodePoolLoggingConfig specifies logging configuration for nodepools.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public NodePoolLoggingConfig LoggingConfig { get; set; }
		
		/// <summary>
		/// Optional. The desired machine type for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified machine type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// The name (project, location, cluster, node pool) of the node pool to update. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parameters for node pool-level network config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeNetworkConfig")]
		public NodeNetworkConfig NodeNetworkConfig { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the node pool to upgrade. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePoolId")]
		public string NodePoolId { get; set; }
		
		/// <summary>
		/// Required. The Kubernetes version to change the nodes to (typically an upgrade). Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "-": picks the Kubernetes master version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeVersion")]
		public string NodeVersion { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Collection of [GCP labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLabels")]
		public ResourceLabels ResourceLabels { get; set; }
		
		/// <summary>
		/// A map of resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies. Tags must be according to specifications in https://cloud.google.com/vpc/docs/tags-firewalls-overview#specifications. A maximum of 5 tag key-value pairs can be specified. Existing tags will be replaced with new values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceManagerTags")]
		public ResourceManagerTags ResourceManagerTags { get; set; }
		
		/// <summary>
		/// Collection of Compute Engine network tags that can be applied to a node's underlying VM instance. (See `tags` field in [`NodeConfig`](/kubernetes-engine/docs/reference/rest/v1/NodeConfig)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public NetworkTags Tags { get; set; }
		
		/// <summary>
		/// Collection of Kubernetes [node taints](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taints")]
		public NodeTaints Taints { get; set; }
		
		/// <summary>
		/// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is SURGE, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeSettings")]
		public UpgradeSettings UpgradeSettings { get; set; }
		
		/// <summary>
		/// Parameters that can be configured on Windows nodes. Windows Node Config that define the parameters that will be used to configure the Windows node pool settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsNodeConfig")]
		public WindowsNodeConfig WindowsNodeConfig { get; set; }
		
		/// <summary>
		/// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadMetadataConfig")]
		public WorkloadMetadataConfig WorkloadMetadataConfig { get; set; }
		
		/// <summary>
		/// Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// UpgradeAvailableEvent is a notification sent to customers when a new available version is released.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpgradeAvailableEvent
	{
		
		/// <summary>
		/// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseChannel")]
		public ReleaseChannel ReleaseChannel { get; set; }
		
		/// <summary>
		/// Optional relative path to the resource. For example, the relative path of the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// The resource type of the release version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public System.Nullable<UpgradeAvailableEventResourceType> ResourceType { get; set; }
		
		/// <summary>
		/// The release version available for upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// Windows server versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsVersions")]
		public WindowsVersions WindowsVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UpgradeAvailableEventResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPGRADE_RESOURCE_TYPE_UNSPECIFIED")]
		UPGRADE_RESOURCE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASTER")]
		MASTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NODE_POOL")]
		NODE_POOL = 2,
	}
	
	/// <summary>
	/// UpgradeEvent is a notification sent to customers by the cluster server when a resource is upgrading.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpgradeEvent
	{
		
		/// <summary>
		/// The current version before the upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentVersion")]
		public string CurrentVersion { get; set; }
		
		/// <summary>
		/// The operation associated with this upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The time when the operation was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationStartTime")]
		public string OperationStartTime { get; set; }
		
		/// <summary>
		/// Optional relative path to the resource. For example in node pool upgrades, the relative path of the node pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// The resource type that is upgrading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public UpgradeAvailableEventResourceType ResourceType { get; set; }
		
		/// <summary>
		/// The target version for the upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetVersion")]
		public string TargetVersion { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all clusters owned by a project in either the specified zone or all zones.
		/// Container_projects_zones_clusters_list v1beta1/projects/{projectId}/zones/{zone}/clusters
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides, or "-" for all zones. This field has been deprecated and replaced by the parent field.</param>
		/// <param name="parent">The parent (project and location) where the clusters will be listed. Specified in the format `projects/*/locations/*`. Location "-" matches all zones and all regions.</param>
		/// <returns>Successful response</returns>
		public async Task<ListClustersResponse> Container_projects_zones_clusters_listAsync(string projectId, string zone, string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters&parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListClustersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a cluster, consisting of the specified number and type of Google Compute Engine instances. By default, the cluster is created in the project's [default network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks). One firewall is added for the cluster. After cluster creation, the Kubelet creates routes for each node to allow the containers on that node to communicate with all other instances in the cluster. Finally, an entry is added to the project's global metadata indicating which CIDR range the cluster is using.
		/// Container_projects_zones_clusters_create v1beta1/projects/{projectId}/zones/{zone}/clusters
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the parent field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_createAsync(string projectId, string zone, CreateClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the cluster, including the Kubernetes endpoint and all worker nodes. Firewalls and routes that were configured during cluster creation are also deleted. Other Google Compute Engine resources that might be in use by the cluster, such as load balancer resources, are not deleted if they weren't present when the cluster was initially created.
		/// Container_projects_zones_clusters_delete v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to delete. This field has been deprecated and replaced by the name field.</param>
		/// <param name="name">The name (project, location, cluster) of the cluster to delete. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_deleteAsync(string projectId, string zone, string clusterId, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the details for a specific cluster.
		/// Container_projects_zones_clusters_get v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to retrieve. This field has been deprecated and replaced by the name field.</param>
		/// <param name="name">The name (project, location, cluster) of the cluster to retrieve. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Cluster> Container_projects_zones_clusters_getAsync(string projectId, string zone, string clusterId, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Cluster>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings for a specific cluster.
		/// Container_projects_zones_clusters_update v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_updateAsync(string projectId, string zone, string clusterId, UpdateClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the addons for a specific cluster.
		/// Container_projects_zones_clusters_addons v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/addons
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_addonsAsync(string projectId, string zone, string clusterId, SetAddonsConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/addons";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables or disables the ABAC authorization mechanism on a cluster.
		/// Container_projects_zones_clusters_legacyAbac v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/legacyAbac
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to update. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_legacyAbacAsync(string projectId, string zone, string clusterId, SetLegacyAbacRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/legacyAbac";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the locations for a specific cluster. Deprecated. Use [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1beta1/projects.locations.clusters/update) instead.
		/// Container_projects_zones_clusters_locations v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/locations
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_locationsAsync(string projectId, string zone, string clusterId, SetLocationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/locations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the logging service for a specific cluster.
		/// Container_projects_zones_clusters_logging v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/logging
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_loggingAsync(string projectId, string zone, string clusterId, SetLoggingServiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/logging";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the master for a specific cluster.
		/// Container_projects_zones_clusters_master v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/master
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_masterAsync(string projectId, string zone, string clusterId, UpdateMasterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/master";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the monitoring service for a specific cluster.
		/// Container_projects_zones_clusters_monitoring v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/monitoring
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_monitoringAsync(string projectId, string zone, string clusterId, SetMonitoringServiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/monitoring";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the node pools for a cluster.
		/// Container_projects_zones_clusters_nodePools_list v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the parent field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the parent field.</param>
		/// <param name="parent">The parent (project, location, cluster name) where the node pools will be listed. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<ListNodePoolsResponse> Container_projects_zones_clusters_nodePools_listAsync(string projectId, string zone, string clusterId, string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/nodePools&parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListNodePoolsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a node pool for a cluster.
		/// Container_projects_zones_clusters_nodePools_create v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the parent field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the parent field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_nodePools_createAsync(string projectId, string zone, string clusterId, CreateNodePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/nodePools";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a node pool from a cluster.
		/// Container_projects_zones_clusters_nodePools_delete v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field.</param>
		/// <param name="nodePoolId">Required. Deprecated. The name of the node pool to delete. This field has been deprecated and replaced by the name field.</param>
		/// <param name="name">The name (project, location, cluster, node pool id) of the node pool to delete. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_nodePools_deleteAsync(string projectId, string zone, string clusterId, string nodePoolId, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/nodePools/"+ (nodePoolId==null? "" : System.Uri.EscapeDataString(nodePoolId))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the requested node pool.
		/// Container_projects_zones_clusters_nodePools_get v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field.</param>
		/// <param name="nodePoolId">Required. Deprecated. The name of the node pool. This field has been deprecated and replaced by the name field.</param>
		/// <param name="name">The name (project, location, cluster, node pool id) of the node pool to get. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<NodePool> Container_projects_zones_clusters_nodePools_getAsync(string projectId, string zone, string clusterId, string nodePoolId, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/nodePools/"+ (nodePoolId==null? "" : System.Uri.EscapeDataString(nodePoolId))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NodePool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the autoscaling settings of a specific node pool.
		/// Container_projects_zones_clusters_nodePools_autoscaling v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/autoscaling
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.</param>
		/// <param name="nodePoolId">Required. Deprecated. The name of the node pool to upgrade. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_nodePools_autoscalingAsync(string projectId, string zone, string clusterId, string nodePoolId, SetNodePoolAutoscalingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/nodePools/"+ (nodePoolId==null? "" : System.Uri.EscapeDataString(nodePoolId))+"/autoscaling";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the NodeManagement options for a node pool.
		/// Container_projects_zones_clusters_nodePools_setManagement v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setManagement
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to update. This field has been deprecated and replaced by the name field.</param>
		/// <param name="nodePoolId">Required. Deprecated. The name of the node pool to update. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_nodePools_setManagementAsync(string projectId, string zone, string clusterId, string nodePoolId, SetNodePoolManagementRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/nodePools/"+ (nodePoolId==null? "" : System.Uri.EscapeDataString(nodePoolId))+"/setManagement";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SetNodePoolSizeRequest sets the size of a node pool. The new size will be used for all replicas, including future replicas created by modifying NodePool.locations.
		/// Container_projects_zones_clusters_nodePools_setSize v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setSize
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to update. This field has been deprecated and replaced by the name field.</param>
		/// <param name="nodePoolId">Required. Deprecated. The name of the node pool to update. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_nodePools_setSizeAsync(string projectId, string zone, string clusterId, string nodePoolId, SetNodePoolSizeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/nodePools/"+ (nodePoolId==null? "" : System.Uri.EscapeDataString(nodePoolId))+"/setSize";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the version and/or image type of a specific node pool.
		/// Container_projects_zones_clusters_nodePools_update v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/update
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.</param>
		/// <param name="nodePoolId">Required. Deprecated. The name of the node pool to upgrade. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_nodePools_updateAsync(string projectId, string zone, string clusterId, string nodePoolId, UpdateNodePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/nodePools/"+ (nodePoolId==null? "" : System.Uri.EscapeDataString(nodePoolId))+"/update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Rolls back a previously Aborted or Failed NodePool upgrade. This makes no changes if the last upgrade successfully completed.
		/// Container_projects_zones_clusters_nodePools_rollback v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}:rollback
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to rollback. This field has been deprecated and replaced by the name field.</param>
		/// <param name="nodePoolId">Required. Deprecated. The name of the node pool to rollback. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_nodePools_rollbackAsync(string projectId, string zone, string clusterId, string nodePoolId, RollbackNodePoolUpgradeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/nodePools/"+ (nodePoolId==null? "" : System.Uri.EscapeDataString(nodePoolId))+":rollback";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets labels on a cluster.
		/// Container_projects_zones_clusters_resourceLabels v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/resourceLabels
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_resourceLabelsAsync(string projectId, string zone, string clusterId, SetLabelsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"/resourceLabels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Completes master IP rotation.
		/// Container_projects_zones_clusters_completeIpRotation v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:completeIpRotation
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_completeIpRotationAsync(string projectId, string zone, string clusterId, CompleteIPRotationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+":completeIpRotation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the maintenance policy for a cluster.
		/// Container_projects_zones_clusters_setMaintenancePolicy v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMaintenancePolicy
		/// </summary>
		/// <param name="projectId">Required. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects).</param>
		/// <param name="zone">Required. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides.</param>
		/// <param name="clusterId">Required. The name of the cluster to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_setMaintenancePolicyAsync(string projectId, string zone, string clusterId, SetMaintenancePolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+":setMaintenancePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets master auth materials. Currently supports changing the admin password or a specific cluster, either via password generation or explicitly setting the password.
		/// Container_projects_zones_clusters_setMasterAuth v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMasterAuth
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_setMasterAuthAsync(string projectId, string zone, string clusterId, SetMasterAuthRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+":setMasterAuth";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables or disables Network Policy for a cluster.
		/// Container_projects_zones_clusters_setNetworkPolicy v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setNetworkPolicy
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_setNetworkPolicyAsync(string projectId, string zone, string clusterId, SetNetworkPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+":setNetworkPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts master IP rotation.
		/// Container_projects_zones_clusters_startIpRotation v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:startIpRotation
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_clusters_startIpRotationAsync(string projectId, string zone, string clusterId, StartIPRotationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+":startIpRotation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all operations in a project in the specified zone or all zones.
		/// Container_projects_zones_operations_list v1beta1/projects/{projectId}/zones/{zone}/operations
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) to return operations for, or `-` for all zones. This field has been deprecated and replaced by the parent field.</param>
		/// <param name="parent">The parent (project and location) where the operations will be listed. Specified in the format `projects/*/locations/*`. Location "-" matches all zones and all regions.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Container_projects_zones_operations_listAsync(string projectId, string zone, string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/operations&parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified operation.
		/// Container_projects_zones_operations_get v1beta1/projects/{projectId}/zones/{zone}/operations/{operationId}
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="operationId">Required. Deprecated. The server-assigned `name` of the operation. This field has been deprecated and replaced by the name field.</param>
		/// <param name="name">The name (project, location, operation id) of the operation to get. Specified in the format `projects/*/locations/*/operations/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_zones_operations_getAsync(string projectId, string zone, string operationId, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/operations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels the specified operation.
		/// Container_projects_zones_operations_cancel v1beta1/projects/{projectId}/zones/{zone}/operations/{operationId}:cancel
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation resides. This field has been deprecated and replaced by the name field.</param>
		/// <param name="operationId">Required. Deprecated. The server-assigned `name` of the operation. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Container_projects_zones_operations_cancelAsync(string projectId, string zone, string operationId, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/operations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns configuration info about the Google Kubernetes Engine service.
		/// Container_projects_zones_getServerconfig v1beta1/projects/{projectId}/zones/{zone}/serverconfig
		/// </summary>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) to return operations for. This field has been deprecated and replaced by the name field.</param>
		/// <param name="name">The name (project and location) of the server config to get, specified in the format `projects/*/locations/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<ServerConfig> Container_projects_zones_getServerconfigAsync(string projectId, string zone, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/zones/"+ (zone==null? "" : System.Uri.EscapeDataString(zone))+"/serverconfig&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServerConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a node pool from a cluster.
		/// Container_projects_locations_clusters_nodePools_delete v1beta1/{name}
		/// </summary>
		/// <param name="name">The name (project, location, cluster, node pool id) of the node pool to delete. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field.</param>
		/// <param name="nodePoolId">Required. Deprecated. The name of the node pool to delete. This field has been deprecated and replaced by the name field.</param>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_nodePools_deleteAsync(string name, string clusterId, string nodePoolId, string projectId, string zone, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&clusterId=" + (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"&nodePoolId=" + (nodePoolId==null? "" : System.Uri.EscapeDataString(nodePoolId))+"&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&zone=" + (zone==null? "" : System.Uri.EscapeDataString(zone));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified operation.
		/// Container_projects_locations_operations_get v1beta1/{name}
		/// </summary>
		/// <param name="name">The name (project, location, operation id) of the operation to get. Specified in the format `projects/*/locations/*/operations/*`.</param>
		/// <param name="operationId">Required. Deprecated. The server-assigned `name` of the operation. This field has been deprecated and replaced by the name field.</param>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_operations_getAsync(string name, string operationId, string projectId, string zone, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&operationId=" + (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&zone=" + (zone==null? "" : System.Uri.EscapeDataString(zone));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the version and/or image type of a specific node pool.
		/// Container_projects_locations_clusters_nodePools_update v1beta1/{name}
		/// </summary>
		/// <param name="name">The name (project, location, cluster, node pool) of the node pool to update. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_nodePools_updateAsync(string name, UpdateNodePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns configuration info about the Google Kubernetes Engine service.
		/// Container_projects_locations_getServerConfig v1beta1/{name}/serverConfig
		/// </summary>
		/// <param name="name">The name (project and location) of the server config to get, specified in the format `projects/*/locations/*`.</param>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) to return operations for. This field has been deprecated and replaced by the name field.</param>
		/// <returns>Successful response</returns>
		public async Task<ServerConfig> Container_projects_locations_getServerConfigAsync(string name, string projectId, string zone, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/serverConfig&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&zone=" + (zone==null? "" : System.Uri.EscapeDataString(zone));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServerConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels the specified operation.
		/// Container_projects_locations_operations_cancel v1beta1/{name}:cancel
		/// </summary>
		/// <param name="name">The name (project, location, operation id) of the operation to cancel. Specified in the format `projects/*/locations/*/operations/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Container_projects_locations_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Checks the cluster compatibility with Autopilot mode, and returns a list of compatibility issues.
		/// Container_projects_locations_clusters_checkAutopilotCompatibility v1beta1/{name}:checkAutopilotCompatibility
		/// </summary>
		/// <param name="name">The name (project, location, cluster) of the cluster to retrieve. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<CheckAutopilotCompatibilityResponse> Container_projects_locations_clusters_checkAutopilotCompatibilityAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":checkAutopilotCompatibility";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckAutopilotCompatibilityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Completes master IP rotation.
		/// Container_projects_locations_clusters_completeIpRotation v1beta1/{name}:completeIpRotation
		/// </summary>
		/// <param name="name">The name (project, location, cluster name) of the cluster to complete IP rotation. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_completeIpRotationAsync(string name, CompleteIPRotationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":completeIpRotation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CompleteNodePoolUpgrade will signal an on-going node pool upgrade to complete.
		/// Container_projects_locations_clusters_nodePools_completeUpgrade v1beta1/{name}:completeUpgrade
		/// </summary>
		/// <param name="name">The name (project, location, cluster, node pool id) of the node pool to complete upgrade. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Container_projects_locations_clusters_nodePools_completeUpgradeAsync(string name, CompleteNodePoolUpgradeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":completeUpgrade";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Rolls back a previously Aborted or Failed NodePool upgrade. This makes no changes if the last upgrade successfully completed.
		/// Container_projects_locations_clusters_nodePools_rollback v1beta1/{name}:rollback
		/// </summary>
		/// <param name="name">The name (project, location, cluster, node pool id) of the node poll to rollback upgrade. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_nodePools_rollbackAsync(string name, RollbackNodePoolUpgradeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":rollback";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the addons for a specific cluster.
		/// Container_projects_locations_clusters_setAddons v1beta1/{name}:setAddons
		/// </summary>
		/// <param name="name">The name (project, location, cluster) of the cluster to set addons. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_setAddonsAsync(string name, SetAddonsConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setAddons";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the autoscaling settings of a specific node pool.
		/// Container_projects_locations_clusters_nodePools_setAutoscaling v1beta1/{name}:setAutoscaling
		/// </summary>
		/// <param name="name">The name (project, location, cluster, node pool) of the node pool to set autoscaler settings. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_nodePools_setAutoscalingAsync(string name, SetNodePoolAutoscalingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setAutoscaling";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables or disables the ABAC authorization mechanism on a cluster.
		/// Container_projects_locations_clusters_setLegacyAbac v1beta1/{name}:setLegacyAbac
		/// </summary>
		/// <param name="name">The name (project, location, cluster name) of the cluster to set legacy abac. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_setLegacyAbacAsync(string name, SetLegacyAbacRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setLegacyAbac";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the locations for a specific cluster. Deprecated. Use [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1beta1/projects.locations.clusters/update) instead.
		/// Container_projects_locations_clusters_setLocations v1beta1/{name}:setLocations
		/// </summary>
		/// <param name="name">The name (project, location, cluster) of the cluster to set locations. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_setLocationsAsync(string name, SetLocationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setLocations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the logging service for a specific cluster.
		/// Container_projects_locations_clusters_setLogging v1beta1/{name}:setLogging
		/// </summary>
		/// <param name="name">The name (project, location, cluster) of the cluster to set logging. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_setLoggingAsync(string name, SetLoggingServiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setLogging";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the maintenance policy for a cluster.
		/// Container_projects_locations_clusters_setMaintenancePolicy v1beta1/{name}:setMaintenancePolicy
		/// </summary>
		/// <param name="name">The name (project, location, cluster name) of the cluster to set maintenance policy. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_setMaintenancePolicyAsync(string name, SetMaintenancePolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setMaintenancePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the NodeManagement options for a node pool.
		/// Container_projects_locations_clusters_nodePools_setManagement v1beta1/{name}:setManagement
		/// </summary>
		/// <param name="name">The name (project, location, cluster, node pool id) of the node pool to set management properties. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_nodePools_setManagementAsync(string name, SetNodePoolManagementRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setManagement";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets master auth materials. Currently supports changing the admin password or a specific cluster, either via password generation or explicitly setting the password.
		/// Container_projects_locations_clusters_setMasterAuth v1beta1/{name}:setMasterAuth
		/// </summary>
		/// <param name="name">The name (project, location, cluster) of the cluster to set auth. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_setMasterAuthAsync(string name, SetMasterAuthRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setMasterAuth";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the monitoring service for a specific cluster.
		/// Container_projects_locations_clusters_setMonitoring v1beta1/{name}:setMonitoring
		/// </summary>
		/// <param name="name">The name (project, location, cluster) of the cluster to set monitoring. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_setMonitoringAsync(string name, SetMonitoringServiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setMonitoring";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables or disables Network Policy for a cluster.
		/// Container_projects_locations_clusters_setNetworkPolicy v1beta1/{name}:setNetworkPolicy
		/// </summary>
		/// <param name="name">The name (project, location, cluster name) of the cluster to set networking policy. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_setNetworkPolicyAsync(string name, SetNetworkPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setNetworkPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets labels on a cluster.
		/// Container_projects_locations_clusters_setResourceLabels v1beta1/{name}:setResourceLabels
		/// </summary>
		/// <param name="name">The name (project, location, cluster name) of the cluster to set labels. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_setResourceLabelsAsync(string name, SetLabelsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setResourceLabels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// SetNodePoolSizeRequest sets the size of a node pool. The new size will be used for all replicas, including future replicas created by modifying NodePool.locations.
		/// Container_projects_locations_clusters_nodePools_setSize v1beta1/{name}:setSize
		/// </summary>
		/// <param name="name">The name (project, location, cluster, node pool id) of the node pool to set size. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_nodePools_setSizeAsync(string name, SetNodePoolSizeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":setSize";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts master IP rotation.
		/// Container_projects_locations_clusters_startIpRotation v1beta1/{name}:startIpRotation
		/// </summary>
		/// <param name="name">The name (project, location, cluster name) of the cluster to start IP rotation. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_startIpRotationAsync(string name, StartIPRotationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":startIpRotation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the master for a specific cluster.
		/// Container_projects_locations_clusters_updateMaster v1beta1/{name}:updateMaster
		/// </summary>
		/// <param name="name">The name (project, location, cluster) of the cluster to update. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_updateMasterAsync(string name, UpdateMasterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":updateMaster";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the OIDC discovery document for the cluster. See the [OpenID Connect Discovery 1.0 specification](https://openid.net/specs/openid-connect-discovery-1_0.html) for details. This API is not yet intended for general use, and is not available for all clusters.
		/// Container_projects_locations_clusters_well_known_getOpenid_configuration v1beta1/{parent}/.well-known/openid-configuration
		/// </summary>
		/// <param name="parent">The cluster (project, location, cluster name) to get the discovery document for. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<GetOpenIDConfigResponse> Container_projects_locations_clusters_well_known_getOpenid_configurationAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/.well-known/openid-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOpenIDConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists subnetworks that can be used for creating clusters in a project.
		/// Container_projects_aggregated_usableSubnetworks_list v1beta1/{parent}/aggregated/usableSubnetworks
		/// </summary>
		/// <param name="parent">Required. The parent project where subnetworks are usable. Specified in the format `projects/*`.</param>
		/// <param name="filter">Filtering currently only supports equality on the networkProjectId and must be in the form: "networkProjectId=[PROJECTID]", where `networkProjectId` is the project which owns the listed subnetworks. This defaults to the parent project ID.</param>
		/// <param name="pageSize">The max number of results per page that should be returned. If the number of available results is larger than `page_size`, a `next_page_token` is returned which can be used to get the next page of results in subsequent requests. Acceptable values are 0 to 500, inclusive. (Default: 500)</param>
		/// <param name="pageToken">Specifies a page token to use. Set this to the nextPageToken returned by previous list requests to get the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListUsableSubnetworksResponse> Container_projects_aggregated_usableSubnetworks_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/aggregated/usableSubnetworks&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListUsableSubnetworksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all clusters owned by a project in either the specified zone or all zones.
		/// Container_projects_locations_clusters_list v1beta1/{parent}/clusters
		/// </summary>
		/// <param name="parent">The parent (project and location) where the clusters will be listed. Specified in the format `projects/*/locations/*`. Location "-" matches all zones and all regions.</param>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides, or "-" for all zones. This field has been deprecated and replaced by the parent field.</param>
		/// <returns>Successful response</returns>
		public async Task<ListClustersResponse> Container_projects_locations_clusters_listAsync(string parent, string projectId, string zone, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/clusters&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&zone=" + (zone==null? "" : System.Uri.EscapeDataString(zone));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListClustersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a cluster, consisting of the specified number and type of Google Compute Engine instances. By default, the cluster is created in the project's [default network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks). One firewall is added for the cluster. After cluster creation, the Kubelet creates routes for each node to allow the containers on that node to communicate with all other instances in the cluster. Finally, an entry is added to the project's global metadata indicating which CIDR range the cluster is using.
		/// Container_projects_locations_clusters_create v1beta1/{parent}/clusters
		/// </summary>
		/// <param name="parent">The parent (project and location) where the cluster will be created. Specified in the format `projects/*/locations/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_createAsync(string parent, CreateClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/clusters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the public component of the cluster signing keys in JSON Web Key format. This API is not yet intended for general use, and is not available for all clusters.
		/// Container_projects_locations_clusters_getJwks v1beta1/{parent}/jwks
		/// </summary>
		/// <param name="parent">The cluster (project, location, cluster name) to get keys for. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<GetJSONWebKeysResponse> Container_projects_locations_clusters_getJwksAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/jwks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetJSONWebKeysResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches locations that offer Google Kubernetes Engine.
		/// Container_projects_locations_list v1beta1/{parent}/locations
		/// </summary>
		/// <param name="parent">Required. Contains the name of the resource requested. Specified in the format `projects/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Container_projects_locations_listAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/locations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the node pools for a cluster.
		/// Container_projects_locations_clusters_nodePools_list v1beta1/{parent}/nodePools
		/// </summary>
		/// <param name="parent">The parent (project, location, cluster name) where the node pools will be listed. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <param name="clusterId">Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the parent field.</param>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the parent field.</param>
		/// <returns>Successful response</returns>
		public async Task<ListNodePoolsResponse> Container_projects_locations_clusters_nodePools_listAsync(string parent, string clusterId, string projectId, string zone, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/nodePools&clusterId=" + (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&zone=" + (zone==null? "" : System.Uri.EscapeDataString(zone));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListNodePoolsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a node pool for a cluster.
		/// Container_projects_locations_clusters_nodePools_create v1beta1/{parent}/nodePools
		/// </summary>
		/// <param name="parent">The parent (project, location, cluster name) where the node pool will be created. Specified in the format `projects/*/locations/*/clusters/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Container_projects_locations_clusters_nodePools_createAsync(string parent, CreateNodePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/nodePools";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all operations in a project in the specified zone or all zones.
		/// Container_projects_locations_operations_list v1beta1/{parent}/operations
		/// </summary>
		/// <param name="parent">The parent (project and location) where the operations will be listed. Specified in the format `projects/*/locations/*`. Location "-" matches all zones and all regions.</param>
		/// <param name="projectId">Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.</param>
		/// <param name="zone">Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) to return operations for, or `-` for all zones. This field has been deprecated and replaced by the parent field.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Container_projects_locations_operations_listAsync(string parent, string projectId, string zone, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/operations&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&zone=" + (zone==null? "" : System.Uri.EscapeDataString(zone));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
