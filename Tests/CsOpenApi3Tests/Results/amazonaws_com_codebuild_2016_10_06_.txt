//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteBuildsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="buildsDeleted")]
		public string[] BuildsDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildsNotDeleted")]
		public BuildNotDeleted[] BuildsNotDeleted { get; set; }
	}
	
	/// <summary>
	/// Information about a build that could not be successfully deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildNotDeleted
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public string StatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeleteBuildsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidInputException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetBuildBatchesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="buildBatches")]
		public BuildBatch[] BuildBatches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildBatchesNotFound")]
		public string[] BuildBatchesNotFound { get; set; }
	}
	
	/// <summary>
	/// Contains information about a batch build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildBatch
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentPhase")]
		public string CurrentPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildBatchStatus")]
		public StatusType BuildBatchStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public string SourceVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolvedSourceVersion")]
		public string ResolvedSourceVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phases")]
		public BuildBatchPhase[] Phases { get; set; }
		
		/// <summary>
		/// Information about the build input source code for the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ProjectSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondarySources")]
		public ProjectSource[] SecondarySources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondarySourceVersions")]
		public ProjectSourceVersion[] SecondarySourceVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public BuildArtifacts Artifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondaryArtifacts")]
		public BuildArtifacts[] SecondaryArtifacts { get; set; }
		
		/// <summary>
		/// Information about the cache for the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cache")]
		public ProjectCache Cache { get; set; }
		
		/// <summary>
		/// Information about the build environment of the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public ProjectEnvironment Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceRole")]
		public string ServiceRole { get; set; }
		
		/// <summary>
		///  Information about logs for a build project. These can be logs in CloudWatch Logs, built in a specified S3 bucket, or both. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logConfig")]
		public LogsConfig LogConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildTimeoutInMinutes")]
		public System.Nullable<System.Int32> BuildTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queuedTimeoutInMinutes")]
		public System.Nullable<System.Int32> QueuedTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="complete")]
		public System.Nullable<System.Boolean> Complete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initiator")]
		public string Initiator { get; set; }
		
		/// <summary>
		/// Information about the VPC configuration that CodeBuild accesses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcConfig")]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKey")]
		public string EncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildBatchNumber")]
		public System.Nullable<System.Int32> BuildBatchNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileSystemLocations")]
		public ProjectFileSystemLocation[] FileSystemLocations { get; set; }
		
		/// <summary>
		/// Contains configuration information about a batch build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildBatchConfig")]
		public ProjectBuildBatchConfig BuildBatchConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildGroups")]
		public BuildGroup[] BuildGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debugSessionEnabled")]
		public System.Nullable<System.Boolean> DebugSessionEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAULT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 5,
	}
	
	/// <summary>
	/// Contains information about a stage for a batch build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildBatchPhase
	{
		
		[System.Runtime.Serialization.DataMember(Name="phaseType")]
		public BuildBatchPhaseType PhaseType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phaseStatus")]
		public StatusType PhaseStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationInSeconds")]
		public System.Nullable<System.Int32> DurationInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contexts")]
		public PhaseContext[] Contexts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BuildBatchPhaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOWNLOAD_BATCHSPEC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMBINE_ARTIFACTS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
	}
	
	/// <summary>
	/// Additional information about a build phase that has an error. You can use this information for troubleshooting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhaseContext
	{
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public string StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Information about the build input source code for the build project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SourceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitCloneDepth")]
		public System.Nullable<System.Int32> GitCloneDepth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitSubmodulesConfig")]
		public GitSubmodulesConfig GitSubmodulesConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildspec")]
		public string Buildspec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auth")]
		public SourceAuth Auth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportBuildStatus")]
		public System.Nullable<System.Boolean> ReportBuildStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildStatusConfig")]
		public BuildStatusConfig BuildStatusConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="insecureSsl")]
		public System.Nullable<System.Boolean> InsecureSsl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceIdentifier")]
		public string SourceIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODECOMMIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODEPIPELINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITBUCKET = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB_ENTERPRISE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SOURCE = 6,
	}
	
	/// <summary>
	///  Information about the Git submodules configuration for an CodeBuild build project. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GitSubmodulesConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fetchSubmodules")]
		public bool FetchSubmodules { get; set; }
	}
	
	/// <summary>
	/// <p>Information about the authorization settings for CodeBuild to access the source code to be built.</p> <p>This information is for the CodeBuild console's use only. Your code should not get or set this information directly.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceAuth
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SourceAuthType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SourceAuthType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OAUTH = 0,
	}
	
	/// <summary>
	/// Contains information that defines how the CodeBuild build project reports the build status to the source provider. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildStatusConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="context")]
		public string Context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetUrl")]
		public string TargetUrl { get; set; }
	}
	
	/// <summary>
	///  A source identifier and its corresponding version. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectSourceVersion
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceIdentifier")]
		public string SourceIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public string SourceVersion { get; set; }
	}
	
	/// <summary>
	/// Information about build output artifacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildArtifacts
	{
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sha256sum")]
		public string Sha256sum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="md5sum")]
		public string Md5sum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrideArtifactName")]
		public System.Nullable<System.Boolean> OverrideArtifactName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionDisabled")]
		public System.Nullable<System.Boolean> EncryptionDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifactIdentifier")]
		public string ArtifactIdentifier { get; set; }
		
		/// <summary>
		/// <p>Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects.</p> <note> <p>To use this property, your CodeBuild service role must have the <code>s3:PutBucketAcl</code> permission. This permission allows CodeBuild to modify the access control list for the bucket.</p> </note> <p>This property can be one of the following values:</p> <dl> <dt>NONE</dt> <dd> <p>The bucket owner does not have access to the objects. This is the default.</p> </dd> <dt>READ_ONLY</dt> <dd> <p>The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects.</p> </dd> <dt>FULL</dt> <dd> <p>The bucket owner has full access to the objects. Object ownership is determined by the following criteria:</p> <ul> <li> <p>If the bucket is configured with the <b>Bucket owner preferred</b> setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.</p> </li> <li> <p>Otherwise, the uploading account retains ownership of the objects.</p> </li> </ul> <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3 Object Ownership</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p> </dd> </dl>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketOwnerAccess")]
		public System.Nullable<BuildArtifactsBucketOwnerAccess> BucketOwnerAccess { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BuildArtifactsBucketOwnerAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 2,
	}
	
	/// <summary>
	/// Information about the cache for the build project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectCache
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CacheType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modes")]
		public CacheMode[] Modes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CacheType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_CACHE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CacheMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_DOCKER_LAYER_CACHE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_SOURCE_CACHE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_CUSTOM_CACHE = 2,
	}
	
	/// <summary>
	/// Information about the build environment of the build project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectEnvironment
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EnvironmentType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="computeType")]
		public ComputeType ComputeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariable[] EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privilegedMode")]
		public System.Nullable<System.Boolean> PrivilegedMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registryCredential")]
		public RegistryCredential RegistryCredential { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePullCredentialsType")]
		public ImagePullCredentialsType ImagePullCredentialsType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EnvironmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS_CONTAINER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX_CONTAINER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX_GPU_CONTAINER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARM_CONTAINER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS_SERVER_2019_CONTAINER = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ComputeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_SMALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_MEDIUM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_LARGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_2XLARGE = 3,
	}
	
	/// <summary>
	/// Information about an environment variable for a build project or a build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentVariable
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EnvironmentVariableType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EnvironmentVariableType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAINTEXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARAMETER_STORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECRETS_MANAGER = 2,
	}
	
	/// <summary>
	/// <p> Information about credentials that provide access to a private Docker registry. When this is set: </p> <ul> <li> <p> <code>imagePullCredentialsType</code> must be set to <code>SERVICE_ROLE</code>. </p> </li> <li> <p> images cannot be curated or an Amazon ECR image.</p> </li> </ul> <p> For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-private-registry.html">Private Registry with Secrets Manager Sample for CodeBuild</a>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegistryCredential
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="credential")]
		public string Credential { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="credentialProvider")]
		public CredentialProviderType CredentialProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CredentialProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECRETS_MANAGER = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ImagePullCredentialsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODEBUILD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_ROLE = 1,
	}
	
	/// <summary>
	///  Information about logs for a build project. These can be logs in CloudWatch Logs, built in a specified S3 bucket, or both. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogsConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogs")]
		public CloudWatchLogsConfig CloudWatchLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Logs")]
		public S3LogsConfig S3Logs { get; set; }
	}
	
	/// <summary>
	///  Information about CloudWatch Logs for a build project. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloudWatchLogsConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LogsConfigStatusType Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamName")]
		public string StreamName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LogsConfigStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	///  Information about S3 logs for a build project. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3LogsConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LogsConfigStatusType Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionDisabled")]
		public System.Nullable<System.Boolean> EncryptionDisabled { get; set; }
		
		/// <summary>
		/// <p>Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects.</p> <note> <p>To use this property, your CodeBuild service role must have the <code>s3:PutBucketAcl</code> permission. This permission allows CodeBuild to modify the access control list for the bucket.</p> </note> <p>This property can be one of the following values:</p> <dl> <dt>NONE</dt> <dd> <p>The bucket owner does not have access to the objects. This is the default.</p> </dd> <dt>READ_ONLY</dt> <dd> <p>The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects.</p> </dd> <dt>FULL</dt> <dd> <p>The bucket owner has full access to the objects. Object ownership is determined by the following criteria:</p> <ul> <li> <p>If the bucket is configured with the <b>Bucket owner preferred</b> setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.</p> </li> <li> <p>Otherwise, the uploading account retains ownership of the objects.</p> </li> </ul> <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3 Object Ownership</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p> </dd> </dl>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketOwnerAccess")]
		public BuildArtifactsBucketOwnerAccess BucketOwnerAccess { get; set; }
	}
	
	/// <summary>
	/// Information about the VPC configuration that CodeBuild accesses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnets")]
		public string[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
	}
	
	/// <summary>
	///  Information about a file system created by Amazon Elastic File System (EFS). For more information, see <a href="https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html">What Is Amazon Elastic File System?</a> 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectFileSystemLocation
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FileSystemType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mountPoint")]
		public string MountPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mountOptions")]
		public string MountOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FileSystemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EFS = 0,
	}
	
	/// <summary>
	/// Contains configuration information about a batch build project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectBuildBatchConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceRole")]
		public string ServiceRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="combineArtifacts")]
		public System.Nullable<System.Boolean> CombineArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public BatchRestrictions Restrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutInMins")]
		public System.Nullable<System.Int32> TimeoutInMins { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="batchReportMode")]
		public BatchReportModeType BatchReportMode { get; set; }
	}
	
	/// <summary>
	/// Specifies restrictions for the batch build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRestrictions
	{
		
		[System.Runtime.Serialization.DataMember(Name="maximumBuildsAllowed")]
		public System.Nullable<System.Int32> MaximumBuildsAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computeTypesAllowed")]
		public string[] ComputeTypesAllowed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchReportModeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPORT_INDIVIDUAL_BUILDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPORT_AGGREGATED_BATCH = 1,
	}
	
	/// <summary>
	/// Contains information about a batch build build group. Build groups are used to combine builds that can run in parallel, while still being able to set dependencies on other build groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dependsOn")]
		public string[] DependsOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignoreFailure")]
		public System.Nullable<System.Boolean> IgnoreFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentBuildSummary")]
		public BuildSummary CurrentBuildSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priorBuildSummaryList")]
		public BuildSummary[] PriorBuildSummaryList { get; set; }
	}
	
	/// <summary>
	/// Contains summary information about a batch build group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedOn")]
		public System.DateTimeOffset RequestedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildStatus")]
		public StatusType BuildStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primaryArtifact")]
		public ResolvedArtifact PrimaryArtifact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondaryArtifacts")]
		public ResolvedArtifact[] SecondaryArtifacts { get; set; }
	}
	
	/// <summary>
	/// Represents a resolved build artifact. A resolved artifact is an artifact that is built and deployed to the destination, such as Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResolvedArtifact
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ArtifactsType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ArtifactsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODEPIPELINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_ARTIFACTS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetBuildBatchesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetBuildsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="builds")]
		public Build[] Builds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildsNotFound")]
		public string[] BuildsNotFound { get; set; }
	}
	
	/// <summary>
	/// Information about a build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Build
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildNumber")]
		public System.Nullable<System.Int32> BuildNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentPhase")]
		public string CurrentPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildStatus")]
		public StatusType BuildStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public string SourceVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolvedSourceVersion")]
		public string ResolvedSourceVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phases")]
		public BuildPhase[] Phases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ProjectSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondarySources")]
		public ProjectSource[] SecondarySources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondarySourceVersions")]
		public ProjectSourceVersion[] SecondarySourceVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public BuildArtifacts Artifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondaryArtifacts")]
		public BuildArtifacts[] SecondaryArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cache")]
		public ProjectCache Cache { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public ProjectEnvironment Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceRole")]
		public string ServiceRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logs")]
		public LogsLocation Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutInMinutes")]
		public System.Nullable<System.Int32> TimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queuedTimeoutInMinutes")]
		public System.Nullable<System.Int32> QueuedTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildComplete")]
		public System.Nullable<System.Boolean> BuildComplete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initiator")]
		public string Initiator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfig")]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkInterface")]
		public NetworkInterface NetworkInterface { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKey")]
		public string EncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportedEnvironmentVariables")]
		public ExportedEnvironmentVariable[] ExportedEnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportArns")]
		public string[] ReportArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileSystemLocations")]
		public ProjectFileSystemLocation[] FileSystemLocations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debugSession")]
		public DebugSession DebugSession { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildBatchArn")]
		public string BuildBatchArn { get; set; }
	}
	
	/// <summary>
	/// Information about a stage for a build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildPhase
	{
		
		[System.Runtime.Serialization.DataMember(Name="phaseType")]
		public BuildPhaseType PhaseType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phaseStatus")]
		public StatusType PhaseStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationInSeconds")]
		public System.Nullable<System.Int32> DurationInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contexts")]
		public PhaseContext[] Contexts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BuildPhaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOWNLOAD_SOURCE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRE_BUILD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST_BUILD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPLOAD_ARTIFACTS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINALIZING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 10,
	}
	
	/// <summary>
	/// Information about build logs in CloudWatch Logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogsLocation
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamName")]
		public string StreamName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deepLink")]
		public string DeepLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3DeepLink")]
		public string S3DeepLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogsArn")]
		public string CloudWatchLogsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3LogsArn")]
		public string S3LogsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogs")]
		public CloudWatchLogsConfig CloudWatchLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Logs")]
		public S3LogsConfig S3Logs { get; set; }
	}
	
	/// <summary>
	/// Describes a network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkInterface
	{
		
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkInterfaceId")]
		public string NetworkInterfaceId { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an exported environment variable. </p> <p>Exported environment variables are used in conjunction with CodePipeline to export environment variables from the current build stage to subsequent stages in the pipeline. For more information, see <a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-variables.html">Working with variables</a> in the <i>CodePipeline User Guide</i>.</p> <note> <p> During a build, the value of a variable is available starting with the <code>install</code> phase. It can be updated between the start of the <code>install</code> phase and the end of the <code>post_build</code> phase. After the <code>post_build</code> phase ends, the value of exported variables cannot change.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportedEnvironmentVariable
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Contains information about the debug session for a build. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html">Viewing a running build in Session Manager</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DebugSession
	{
		
		[System.Runtime.Serialization.DataMember(Name="sessionEnabled")]
		public System.Nullable<System.Boolean> SessionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionTarget")]
		public string SessionTarget { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetBuildsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetProjectsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public Project[] Projects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectsNotFound")]
		public string[] ProjectsNotFound { get; set; }
	}
	
	/// <summary>
	/// Information about a build project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ProjectSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondarySources")]
		public ProjectSource[] SecondarySources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public string SourceVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondarySourceVersions")]
		public ProjectSourceVersion[] SecondarySourceVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public ProjectArtifacts Artifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondaryArtifacts")]
		public ProjectArtifacts[] SecondaryArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cache")]
		public ProjectCache Cache { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public ProjectEnvironment Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceRole")]
		public string ServiceRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutInMinutes")]
		public System.Nullable<System.Int32> TimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queuedTimeoutInMinutes")]
		public System.Nullable<System.Int32> QueuedTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKey")]
		public string EncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.DateTimeOffset LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webhook")]
		public Webhook Webhook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfig")]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="badge")]
		public ProjectBadge Badge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logsConfig")]
		public LogsConfig LogsConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileSystemLocations")]
		public ProjectFileSystemLocation[] FileSystemLocations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildBatchConfig")]
		public ProjectBuildBatchConfig BuildBatchConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concurrentBuildLimit")]
		public System.Nullable<System.Int32> ConcurrentBuildLimit { get; set; }
		
		/// <summary>
		/// <p>Specifies the visibility of the project's builds. Possible values are:</p> <dl> <dt>PUBLIC_READ</dt> <dd> <p>The project builds are visible to the public.</p> </dd> <dt>PRIVATE</dt> <dd> <p>The project builds are not visible to the public.</p> </dd> </dl>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectVisibility")]
		public System.Nullable<ProjectProjectVisibility> ProjectVisibility { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicProjectAlias")]
		public string PublicProjectAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceAccessRole")]
		public string ResourceAccessRole { get; set; }
	}
	
	/// <summary>
	/// Information about the build output artifacts for the build project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectArtifacts
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ArtifactsType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespaceType")]
		public ArtifactNamespace NamespaceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packaging")]
		public ArtifactPackaging Packaging { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrideArtifactName")]
		public System.Nullable<System.Boolean> OverrideArtifactName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionDisabled")]
		public System.Nullable<System.Boolean> EncryptionDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifactIdentifier")]
		public string ArtifactIdentifier { get; set; }
		
		/// <summary>
		/// <p>Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects.</p> <note> <p>To use this property, your CodeBuild service role must have the <code>s3:PutBucketAcl</code> permission. This permission allows CodeBuild to modify the access control list for the bucket.</p> </note> <p>This property can be one of the following values:</p> <dl> <dt>NONE</dt> <dd> <p>The bucket owner does not have access to the objects. This is the default.</p> </dd> <dt>READ_ONLY</dt> <dd> <p>The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects.</p> </dd> <dt>FULL</dt> <dd> <p>The bucket owner has full access to the objects. Object ownership is determined by the following criteria:</p> <ul> <li> <p>If the bucket is configured with the <b>Bucket owner preferred</b> setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.</p> </li> <li> <p>Otherwise, the uploading account retains ownership of the objects.</p> </li> </ul> <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3 Object Ownership</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p> </dd> </dl>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketOwnerAccess")]
		public BuildArtifactsBucketOwnerAccess BucketOwnerAccess { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ArtifactNamespace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_ID = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ArtifactPackaging
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZIP = 1,
	}
	
	/// <summary>
	/// <p>A tag, consisting of a key and a value.</p> <p>This tag is available for use by Amazon Web Services services that support tags in CodeBuild.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Information about a webhook that connects repository events to a build project in CodeBuild.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Webhook
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payloadUrl")]
		public string PayloadUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branchFilter")]
		public string BranchFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filterGroups")]
		public WebhookFilter[][] FilterGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildType")]
		public WebhookBuildType BuildType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedSecret")]
		public System.DateTimeOffset LastModifiedSecret { get; set; }
	}
	
	/// <summary>
	///  A filter used to determine which webhooks trigger a build. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public WebhookFilterType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="excludeMatchedPattern")]
		public System.Nullable<System.Boolean> ExcludeMatchedPattern { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum WebhookFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASE_REF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAD_REF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTOR_ACCOUNT_ID = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE_PATH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMIT_MESSAGE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum WebhookBuildType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_BATCH = 1,
	}
	
	/// <summary>
	/// Information about the build badge for the build project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectBadge
	{
		
		[System.Runtime.Serialization.DataMember(Name="badgeEnabled")]
		public System.Nullable<System.Boolean> BadgeEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="badgeRequestUrl")]
		public string BadgeRequestUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProjectProjectVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC_READ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetProjectsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="names")]
		public string[] Names { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetReportGroupsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="reportGroups")]
		public ReportGroup[] ReportGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportGroupsNotFound")]
		public string[] ReportGroupsNotFound { get; set; }
	}
	
	/// <summary>
	/// A series of reports. Each report contains information about the results from running a series of test cases. You specify the test cases for a report group in the buildspec for a build project using one or more paths to the test case files. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ReportType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportConfig")]
		public ReportExportConfig ExportConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.DateTimeOffset LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReportGroupStatusType Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODE_COVERAGE = 1,
	}
	
	/// <summary>
	///  Information about the location where the run of a report is exported. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportExportConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="exportConfigType")]
		public ReportExportConfigType ExportConfigType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Destination")]
		public S3ReportExportConfig S3Destination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportExportConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_EXPORT = 1,
	}
	
	/// <summary>
	///  Information about the S3 bucket where the raw data of a report are exported. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3ReportExportConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bucketOwner")]
		public string BucketOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packaging")]
		public ReportPackagingType Packaging { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKey")]
		public string EncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionDisabled")]
		public System.Nullable<System.Boolean> EncryptionDisabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportPackagingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportGroupStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetReportGroupsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportGroupArns")]
		public string[] ReportGroupArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetReportsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="reports")]
		public Report[] Reports { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportsNotFound")]
		public string[] ReportsNotFound { get; set; }
	}
	
	/// <summary>
	/// Information about the results from running a series of test cases during the run of a build project. The test cases are specified in the buildspec for the build project using one or more paths to the test case files. You can specify any type of tests you want, such as unit tests, integration tests, and functional tests. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Report
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ReportType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportGroupArn")]
		public string ReportGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReportStatusType Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expired")]
		public System.DateTimeOffset Expired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportConfig")]
		public ReportExportConfig ExportConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="truncated")]
		public System.Nullable<System.Boolean> Truncated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSummary")]
		public TestReportSummary TestSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeCoverageSummary")]
		public CodeCoverageReportSummary CodeCoverageSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPLETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
	}
	
	/// <summary>
	///  Information about a test report. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestReportSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public int Total { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusCounts")]
		public ReportStatusCounts StatusCounts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="durationInNanoSeconds")]
		public int DurationInNanoSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportStatusCounts
	{
	}
	
	/// <summary>
	/// <p>Contains a summary of a code coverage report.</p> <p>Line coverage measures how many statements your tests cover. A statement is a single instruction, not including comments, conditionals, etc.</p> <p>Branch coverage determines if your tests cover every possible branch of a control structure, such as an <code>if</code> or <code>case</code> statement.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodeCoverageReportSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="lineCoveragePercentage")]
		public System.Nullable<System.Double> LineCoveragePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linesCovered")]
		public System.Nullable<System.Int32> LinesCovered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linesMissed")]
		public System.Nullable<System.Int32> LinesMissed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branchCoveragePercentage")]
		public System.Nullable<System.Double> BranchCoveragePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branchesCovered")]
		public System.Nullable<System.Int32> BranchesCovered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branchesMissed")]
		public System.Nullable<System.Int32> BranchesMissed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetReportsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportArns")]
		public string[] ReportArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProjectOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Project Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProjectInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ProjectSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondarySources")]
		public ProjectSource[] SecondarySources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public string SourceVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondarySourceVersions")]
		public ProjectSourceVersion[] SecondarySourceVersions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public ProjectArtifacts Artifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondaryArtifacts")]
		public ProjectArtifacts[] SecondaryArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cache")]
		public ProjectCache Cache { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public ProjectEnvironment Environment { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceRole")]
		public string ServiceRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutInMinutes")]
		public System.Nullable<System.Int32> TimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queuedTimeoutInMinutes")]
		public System.Nullable<System.Int32> QueuedTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKey")]
		public string EncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfig")]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="badgeEnabled")]
		public System.Nullable<System.Boolean> BadgeEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logsConfig")]
		public LogsConfig LogsConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileSystemLocations")]
		public ProjectFileSystemLocation[] FileSystemLocations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildBatchConfig")]
		public ProjectBuildBatchConfig BuildBatchConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concurrentBuildLimit")]
		public System.Nullable<System.Int32> ConcurrentBuildLimit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateReportGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="reportGroup")]
		public ReportGroup ReportGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateReportGroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ReportType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exportConfig")]
		public ReportExportConfig ExportConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWebhookOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="webhook")]
		public Webhook Webhook { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWebhookInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branchFilter")]
		public string BranchFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filterGroups")]
		public WebhookFilter[][] FilterGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildType")]
		public WebhookBuildType BuildType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OAuthProviderException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBuildBatchOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public string StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildsDeleted")]
		public string[] BuildsDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildsNotDeleted")]
		public BuildNotDeleted[] BuildsNotDeleted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBuildBatchInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProjectOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProjectInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteReportOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteReportInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteReportGroupOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteReportGroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleteReports")]
		public System.Nullable<System.Boolean> DeleteReports { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteResourcePolicyOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteResourcePolicyInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSourceCredentialsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSourceCredentialsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWebhookOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWebhookInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCodeCoveragesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="codeCoverages")]
		public CodeCoverage[] CodeCoverages { get; set; }
	}
	
	/// <summary>
	/// <p>Contains code coverage report information.</p> <p>Line coverage measures how many statements your tests cover. A statement is a single instruction, not including comments, conditionals, etc.</p> <p>Branch coverage determines if your tests cover every possible branch of a control structure, such as an <code>if</code> or <code>case</code> statement.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodeCoverage
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportARN")]
		public string ReportARN { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineCoveragePercentage")]
		public System.Nullable<System.Double> LineCoveragePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linesCovered")]
		public System.Nullable<System.Int32> LinesCovered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linesMissed")]
		public System.Nullable<System.Int32> LinesMissed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branchCoveragePercentage")]
		public System.Nullable<System.Double> BranchCoveragePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branchesCovered")]
		public System.Nullable<System.Int32> BranchesCovered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branchesMissed")]
		public System.Nullable<System.Int32> BranchesMissed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expired")]
		public System.DateTimeOffset Expired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCodeCoveragesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportArn")]
		public string ReportArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrderType SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ReportCodeCoverageSortByType SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minLineCoveragePercentage")]
		public System.Nullable<System.Double> MinLineCoveragePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxLineCoveragePercentage")]
		public System.Nullable<System.Double> MaxLineCoveragePercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortOrderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportCodeCoverageSortByType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_COVERAGE_PERCENTAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE_PATH = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTestCasesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testCases")]
		public TestCase[] TestCases { get; set; }
	}
	
	/// <summary>
	///  Information about a test case created using a framework such as NUnit or Cucumber. A test case might be a unit test or a configuration test. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestCase
	{
		
		[System.Runtime.Serialization.DataMember(Name="reportArn")]
		public string ReportArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testRawDataPath")]
		public string TestRawDataPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationInNanoSeconds")]
		public System.Nullable<System.Int32> DurationInNanoSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expired")]
		public System.DateTimeOffset Expired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTestCasesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportArn")]
		public string ReportArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public TestCaseFilter Filter { get; set; }
	}
	
	/// <summary>
	/// A filter used to return specific types of test cases. In order to pass the filter, the report must meet all of the filter properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestCaseFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		public string Keyword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetReportGroupTrendOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public ReportGroupTrendStats Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawData")]
		public ReportWithRawData[] RawData { get; set; }
	}
	
	/// <summary>
	/// Contains trend statistics for a set of reports. The actual values depend on the type of trend being collected. For more information, see .
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportGroupTrendStats
	{
		
		[System.Runtime.Serialization.DataMember(Name="average")]
		public string Average { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="max")]
		public string Max { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="min")]
		public string Min { get; set; }
	}
	
	/// <summary>
	/// Contains the unmodified data for the report. For more information, see .
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportWithRawData
	{
		
		[System.Runtime.Serialization.DataMember(Name="reportArn")]
		public string ReportArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetReportGroupTrendInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportGroupArn")]
		public string ReportGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numOfReports")]
		public System.Nullable<System.Int32> NumOfReports { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trendField")]
		public ReportGroupTrendFieldType TrendField { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportGroupTrendFieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASS_RATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DURATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOTAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_COVERAGE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINES_COVERED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINES_MISSED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRANCH_COVERAGE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRANCHES_COVERED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRANCHES_MISSED = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetResourcePolicyOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetResourcePolicyInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportSourceCredentialsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportSourceCredentialsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverType")]
		public ServerType ServerType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shouldOverwrite")]
		public System.Nullable<System.Boolean> ShouldOverwrite { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ServerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITBUCKET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB_ENTERPRISE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuthType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OAUTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC_AUTH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL_ACCESS_TOKEN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidateProjectCacheOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidateProjectCacheInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBuildBatchesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBuildBatchesInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public BuildBatchFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrderType SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Specifies filters when retrieving batch builds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuildBatchFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StatusType Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBuildBatchesForProjectOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBuildBatchesForProjectInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public BuildBatchFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrderType SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBuildsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBuildsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrderType SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBuildsForProjectOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBuildsForProjectInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrderType SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCuratedEnvironmentImagesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="platforms")]
		public EnvironmentPlatform[] Platforms { get; set; }
	}
	
	/// <summary>
	/// A set of Docker images that are related by platform and are managed by CodeBuild.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentPlatform
	{
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public PlatformType Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public EnvironmentLanguage[] Languages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PlatformType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIAN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UBUNTU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS_SERVER = 3,
	}
	
	/// <summary>
	/// A set of Docker images that are related by programming language and are managed by CodeBuild.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentLanguage
	{
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public LanguageType Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="images")]
		public EnvironmentImage[] Images { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LanguageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAVA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PYTHON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODE_JS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUBY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOLANG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCKER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOTNET = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHP = 9,
	}
	
	/// <summary>
	/// Information about a Docker image that is managed by CodeBuild.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentImage
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public string[] Versions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCuratedEnvironmentImagesInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProjectsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public string[] Projects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProjectsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ProjectSortByType SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrderType SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProjectSortByType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_TIME = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListReportGroupsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportGroups")]
		public string[] ReportGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListReportGroupsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrderType SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ProjectSortByType SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListReportsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reports")]
		public string[] Reports { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListReportsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrderType SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ReportFilter Filter { get; set; }
	}
	
	/// <summary>
	///  A filter used to return reports with the status specified by the input <code>status</code> parameter. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReportStatusType Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListReportsForReportGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reports")]
		public string[] Reports { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListReportsForReportGroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportGroupArn")]
		public string ReportGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrderType SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ReportFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSharedProjectsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public string[] Projects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSharedProjectsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public SharedResourceSortByType SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrderType SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SharedResourceSortByType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFIED_TIME = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSharedReportGroupsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportGroups")]
		public string[] ReportGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSharedReportGroupsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrderType SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public SharedResourceSortByType SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSourceCredentialsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceCredentialsInfos")]
		public SourceCredentialsInfo[] SourceCredentialsInfos { get; set; }
	}
	
	/// <summary>
	///  Information about the credentials for a GitHub, GitHub Enterprise, or Bitbucket repository. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceCredentialsInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverType")]
		public ServerType ServerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSourceCredentialsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutResourcePolicyOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutResourcePolicyInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetryBuildOutput
	{
		
		/// <summary>
		/// Information about a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="build")]
		public Build Build { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetryBuildInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetryBuildBatchOutput
	{
		
		/// <summary>
		/// Contains information about a batch build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildBatch")]
		public BuildBatch BuildBatch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetryBuildBatchInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retryType")]
		public RetryBuildBatchType RetryType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RetryBuildBatchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETRY_ALL_BUILDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETRY_FAILED_BUILDS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartBuildOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="build")]
		public Build Build { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartBuildInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondarySourcesOverride")]
		public ProjectSource[] SecondarySourcesOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondarySourcesVersionOverride")]
		public ProjectSourceVersion[] SecondarySourcesVersionOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public string SourceVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifactsOverride")]
		public ProjectArtifacts ArtifactsOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondaryArtifactsOverride")]
		public ProjectArtifacts[] SecondaryArtifactsOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentVariablesOverride")]
		public EnvironmentVariable[] EnvironmentVariablesOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceTypeOverride")]
		public SourceType SourceTypeOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceLocationOverride")]
		public string SourceLocationOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceAuthOverride")]
		public SourceAuth SourceAuthOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitCloneDepthOverride")]
		public System.Nullable<System.Int32> GitCloneDepthOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitSubmodulesConfigOverride")]
		public GitSubmodulesConfig GitSubmodulesConfigOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildspecOverride")]
		public string BuildspecOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="insecureSslOverride")]
		public System.Nullable<System.Boolean> InsecureSslOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportBuildStatusOverride")]
		public System.Nullable<System.Boolean> ReportBuildStatusOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildStatusConfigOverride")]
		public BuildStatusConfig BuildStatusConfigOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentTypeOverride")]
		public EnvironmentType EnvironmentTypeOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageOverride")]
		public string ImageOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computeTypeOverride")]
		public ComputeType ComputeTypeOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateOverride")]
		public string CertificateOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheOverride")]
		public ProjectCache CacheOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceRoleOverride")]
		public string ServiceRoleOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privilegedModeOverride")]
		public System.Nullable<System.Boolean> PrivilegedModeOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutInMinutesOverride")]
		public System.Nullable<System.Int32> TimeoutInMinutesOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queuedTimeoutInMinutesOverride")]
		public System.Nullable<System.Int32> QueuedTimeoutInMinutesOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKeyOverride")]
		public string EncryptionKeyOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logsConfigOverride")]
		public LogsConfig LogsConfigOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registryCredentialOverride")]
		public RegistryCredential RegistryCredentialOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePullCredentialsTypeOverride")]
		public ImagePullCredentialsType ImagePullCredentialsTypeOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debugSessionEnabled")]
		public System.Nullable<System.Boolean> DebugSessionEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartBuildBatchOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="buildBatch")]
		public BuildBatch BuildBatch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartBuildBatchInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondarySourcesOverride")]
		public ProjectSource[] SecondarySourcesOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondarySourcesVersionOverride")]
		public ProjectSourceVersion[] SecondarySourcesVersionOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public string SourceVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifactsOverride")]
		public ProjectArtifacts ArtifactsOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondaryArtifactsOverride")]
		public ProjectArtifacts[] SecondaryArtifactsOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentVariablesOverride")]
		public EnvironmentVariable[] EnvironmentVariablesOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceTypeOverride")]
		public SourceType SourceTypeOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceLocationOverride")]
		public string SourceLocationOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceAuthOverride")]
		public SourceAuth SourceAuthOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitCloneDepthOverride")]
		public System.Nullable<System.Int32> GitCloneDepthOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitSubmodulesConfigOverride")]
		public GitSubmodulesConfig GitSubmodulesConfigOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildspecOverride")]
		public string BuildspecOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="insecureSslOverride")]
		public System.Nullable<System.Boolean> InsecureSslOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportBuildBatchStatusOverride")]
		public System.Nullable<System.Boolean> ReportBuildBatchStatusOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentTypeOverride")]
		public EnvironmentType EnvironmentTypeOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageOverride")]
		public string ImageOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computeTypeOverride")]
		public ComputeType ComputeTypeOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateOverride")]
		public string CertificateOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheOverride")]
		public ProjectCache CacheOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceRoleOverride")]
		public string ServiceRoleOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privilegedModeOverride")]
		public System.Nullable<System.Boolean> PrivilegedModeOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildTimeoutInMinutesOverride")]
		public System.Nullable<System.Int32> BuildTimeoutInMinutesOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queuedTimeoutInMinutesOverride")]
		public System.Nullable<System.Int32> QueuedTimeoutInMinutesOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKeyOverride")]
		public string EncryptionKeyOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logsConfigOverride")]
		public LogsConfig LogsConfigOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registryCredentialOverride")]
		public RegistryCredential RegistryCredentialOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePullCredentialsTypeOverride")]
		public ImagePullCredentialsType ImagePullCredentialsTypeOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildBatchConfigOverride")]
		public ProjectBuildBatchConfig BuildBatchConfigOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debugSessionEnabled")]
		public System.Nullable<System.Boolean> DebugSessionEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopBuildOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="build")]
		public Build Build { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopBuildInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopBuildBatchOutput
	{
		
		/// <summary>
		/// Contains information about a batch build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildBatch")]
		public BuildBatch BuildBatch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopBuildBatchInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProjectOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Project Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProjectInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ProjectSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondarySources")]
		public ProjectSource[] SecondarySources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public string SourceVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondarySourceVersions")]
		public ProjectSourceVersion[] SecondarySourceVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public ProjectArtifacts Artifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondaryArtifacts")]
		public ProjectArtifacts[] SecondaryArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cache")]
		public ProjectCache Cache { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public ProjectEnvironment Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceRole")]
		public string ServiceRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutInMinutes")]
		public System.Nullable<System.Int32> TimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queuedTimeoutInMinutes")]
		public System.Nullable<System.Int32> QueuedTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKey")]
		public string EncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfig")]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="badgeEnabled")]
		public System.Nullable<System.Boolean> BadgeEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logsConfig")]
		public LogsConfig LogsConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileSystemLocations")]
		public ProjectFileSystemLocation[] FileSystemLocations { get; set; }
		
		/// <summary>
		/// Contains configuration information about a batch build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildBatchConfig")]
		public ProjectBuildBatchConfig BuildBatchConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concurrentBuildLimit")]
		public System.Nullable<System.Int32> ConcurrentBuildLimit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProjectVisibilityOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="projectArn")]
		public string ProjectArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicProjectAlias")]
		public string PublicProjectAlias { get; set; }
		
		/// <summary>
		/// <p>Specifies the visibility of the project's builds. Possible values are:</p> <dl> <dt>PUBLIC_READ</dt> <dd> <p>The project builds are visible to the public.</p> </dd> <dt>PRIVATE</dt> <dd> <p>The project builds are not visible to the public.</p> </dd> </dl>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectVisibility")]
		public ProjectProjectVisibility ProjectVisibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProjectVisibilityInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectArn")]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// <p>Specifies the visibility of the project's builds. Possible values are:</p> <dl> <dt>PUBLIC_READ</dt> <dd> <p>The project builds are visible to the public.</p> </dd> <dt>PRIVATE</dt> <dd> <p>The project builds are not visible to the public.</p> </dd> </dl>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectVisibility")]
		public ProjectProjectVisibility ProjectVisibility { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceAccessRole")]
		public string ResourceAccessRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateReportGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="reportGroup")]
		public ReportGroup ReportGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateReportGroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportConfig")]
		public ReportExportConfig ExportConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWebhookOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="webhook")]
		public Webhook Webhook { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWebhookInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branchFilter")]
		public string BranchFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotateSecret")]
		public System.Nullable<System.Boolean> RotateSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filterGroups")]
		public WebhookFilter[][] FilterGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildType")]
		public WebhookBuildType BuildType { get; set; }
	}
	
	/// <summary>
	/// <p>Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects.</p> <note> <p>To use this property, your CodeBuild service role must have the <code>s3:PutBucketAcl</code> permission. This permission allows CodeBuild to modify the access control list for the bucket.</p> </note> <p>This property can be one of the following values:</p> <dl> <dt>NONE</dt> <dd> <p>The bucket owner does not have access to the objects. This is the default.</p> </dd> <dt>READ_ONLY</dt> <dd> <p>The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects.</p> </dd> <dt>FULL</dt> <dd> <p>The bucket owner has full access to the objects. Object ownership is determined by the following criteria:</p> <ul> <li> <p>If the bucket is configured with the <b>Bucket owner preferred</b> setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.</p> </li> <li> <p>Otherwise, the uploading account retains ownership of the objects.</p> </li> </ul> <p>For more information about Amazon S3 object ownership, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html">Controlling ownership of uploaded objects using S3 Object Ownership</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p> </dd> </dl>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BucketOwnerAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportGroupSortByType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_TIME = 2,
	}
	
	/// <summary>
	/// <p>Specifies the visibility of the project's builds. Possible values are:</p> <dl> <dt>PUBLIC_READ</dt> <dd> <p>The project builds are visible to the public.</p> </dd> <dt>PRIVATE</dt> <dd> <p>The project builds are not visible to the public.</p> </dd> </dl>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProjectVisibilityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC_READ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes one or more builds.
		/// BatchDeleteBuilds #X-Amz-Target=CodeBuild_20161006.BatchDeleteBuilds
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDeleteBuildsOutput> BatchDeleteBuildsAsync(BatchDeleteBuildsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.BatchDeleteBuilds";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDeleteBuildsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about one or more batch builds.
		/// BatchGetBuildBatches #X-Amz-Target=CodeBuild_20161006.BatchGetBuildBatches
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetBuildBatchesOutput> BatchGetBuildBatchesAsync(BatchGetBuildBatchesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.BatchGetBuildBatches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetBuildBatchesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more builds.
		/// BatchGetBuilds #X-Amz-Target=CodeBuild_20161006.BatchGetBuilds
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetBuildsOutput> BatchGetBuildsAsync(BatchGetBuildsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.BatchGetBuilds";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetBuildsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more build projects.
		/// BatchGetProjects #X-Amz-Target=CodeBuild_20161006.BatchGetProjects
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetProjectsOutput> BatchGetProjectsAsync(BatchGetProjectsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.BatchGetProjects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetProjectsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns an array of report groups.
		/// BatchGetReportGroups #X-Amz-Target=CodeBuild_20161006.BatchGetReportGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetReportGroupsOutput> BatchGetReportGroupsAsync(BatchGetReportGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.BatchGetReportGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetReportGroupsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns an array of reports.
		/// BatchGetReports #X-Amz-Target=CodeBuild_20161006.BatchGetReports
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetReportsOutput> BatchGetReportsAsync(BatchGetReportsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.BatchGetReports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetReportsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a build project.
		/// CreateProject #X-Amz-Target=CodeBuild_20161006.CreateProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProjectOutput> CreateProjectAsync(CreateProjectInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.CreateProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateProjectOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a report group. A report group contains a collection of reports.
		/// CreateReportGroup #X-Amz-Target=CodeBuild_20161006.CreateReportGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateReportGroupOutput> CreateReportGroupAsync(CreateReportGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.CreateReportGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateReportGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>For an existing CodeBuild build project that has its source code stored in a GitHub or Bitbucket repository, enables CodeBuild to start rebuilding the source code every time a code change is pushed to the repository.</p> <important> <p>If you enable webhooks for an CodeBuild project, and the project is used as a build step in CodePipeline, then two identical builds are created for each commit. One build is triggered through webhooks, and one through CodePipeline. Because billing is on a per-build basis, you are billed for both builds. Therefore, if you are using CodePipeline, we recommend that you disable webhooks in CodeBuild. In the CodeBuild console, clear the Webhook box. For more information, see step 5 in <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/change-project.html#change-project-console">Change a Build Project's Settings</a>.</p> </important>
		/// CreateWebhook #X-Amz-Target=CodeBuild_20161006.CreateWebhook
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateWebhookOutput> CreateWebhookAsync(CreateWebhookInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.CreateWebhook";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateWebhookOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a batch build.
		/// DeleteBuildBatch #X-Amz-Target=CodeBuild_20161006.DeleteBuildBatch
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteBuildBatchOutput> DeleteBuildBatchAsync(DeleteBuildBatchInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.DeleteBuildBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteBuildBatchOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a build project. When you delete a project, its builds are not deleted.
		/// DeleteProject #X-Amz-Target=CodeBuild_20161006.DeleteProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteProjectOutput> DeleteProjectAsync(DeleteProjectInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.DeleteProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteProjectOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a report.
		/// DeleteReport #X-Amz-Target=CodeBuild_20161006.DeleteReport
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteReportOutput> DeleteReportAsync(DeleteReportInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.DeleteReport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteReportOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a report group. Before you delete a report group, you must delete its reports.
		/// DeleteReportGroup #X-Amz-Target=CodeBuild_20161006.DeleteReportGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteReportGroupOutput> DeleteReportGroupAsync(DeleteReportGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.DeleteReportGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteReportGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource policy that is identified by its resource ARN.
		/// DeleteResourcePolicy #X-Amz-Target=CodeBuild_20161006.DeleteResourcePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteResourcePolicyOutput> DeleteResourcePolicyAsync(DeleteResourcePolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.DeleteResourcePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteResourcePolicyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a set of GitHub, GitHub Enterprise, or Bitbucket source credentials.
		/// DeleteSourceCredentials #X-Amz-Target=CodeBuild_20161006.DeleteSourceCredentials
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteSourceCredentialsOutput> DeleteSourceCredentialsAsync(DeleteSourceCredentialsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.DeleteSourceCredentials";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSourceCredentialsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// For an existing CodeBuild build project that has its source code stored in a GitHub or Bitbucket repository, stops CodeBuild from rebuilding the source code every time a code change is pushed to the repository.
		/// DeleteWebhook #X-Amz-Target=CodeBuild_20161006.DeleteWebhook
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteWebhookOutput> DeleteWebhookAsync(DeleteWebhookInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.DeleteWebhook";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteWebhookOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves one or more code coverage reports.
		/// DescribeCodeCoverages #X-Amz-Target=CodeBuild_20161006.DescribeCodeCoverages
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeCodeCoveragesOutput> DescribeCodeCoveragesAsync(string maxResults, string nextToken, DescribeCodeCoveragesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.DescribeCodeCoverages?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeCodeCoveragesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of details about test cases for a report.
		/// DescribeTestCases #X-Amz-Target=CodeBuild_20161006.DescribeTestCases
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeTestCasesOutput> DescribeTestCasesAsync(string maxResults, string nextToken, DescribeTestCasesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.DescribeTestCases?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeTestCasesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Analyzes and accumulates test report values for the specified test reports.
		/// GetReportGroupTrend #X-Amz-Target=CodeBuild_20161006.GetReportGroupTrend
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetReportGroupTrendOutput> GetReportGroupTrendAsync(GetReportGroupTrendInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.GetReportGroupTrend";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetReportGroupTrendOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a resource policy that is identified by its resource ARN.
		/// GetResourcePolicy #X-Amz-Target=CodeBuild_20161006.GetResourcePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetResourcePolicyOutput> GetResourcePolicyAsync(GetResourcePolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.GetResourcePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetResourcePolicyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Imports the source repository credentials for an CodeBuild project that has its source code stored in a GitHub, GitHub Enterprise, or Bitbucket repository.
		/// ImportSourceCredentials #X-Amz-Target=CodeBuild_20161006.ImportSourceCredentials
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportSourceCredentialsOutput> ImportSourceCredentialsAsync(ImportSourceCredentialsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.ImportSourceCredentials";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportSourceCredentialsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resets the cache for a project.
		/// InvalidateProjectCache #X-Amz-Target=CodeBuild_20161006.InvalidateProjectCache
		/// </summary>
		/// <returns>Success</returns>
		public async Task<InvalidateProjectCacheOutput> InvalidateProjectCacheAsync(InvalidateProjectCacheInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.InvalidateProjectCache";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvalidateProjectCacheOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the identifiers of your build batches in the current region.
		/// ListBuildBatches #X-Amz-Target=CodeBuild_20161006.ListBuildBatches
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBuildBatchesOutput> ListBuildBatchesAsync(string maxResults, string nextToken, ListBuildBatchesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.ListBuildBatches?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBuildBatchesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the identifiers of the build batches for a specific project.
		/// ListBuildBatchesForProject #X-Amz-Target=CodeBuild_20161006.ListBuildBatchesForProject
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBuildBatchesForProjectOutput> ListBuildBatchesForProjectAsync(string maxResults, string nextToken, ListBuildBatchesForProjectInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.ListBuildBatchesForProject?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBuildBatchesForProjectOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of build IDs, with each build ID representing a single build.
		/// ListBuilds #X-Amz-Target=CodeBuild_20161006.ListBuilds
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBuildsOutput> ListBuildsAsync(string nextToken, ListBuildsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.ListBuilds?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBuildsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of build identifiers for the specified build project, with each build identifier representing a single build.
		/// ListBuildsForProject #X-Amz-Target=CodeBuild_20161006.ListBuildsForProject
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBuildsForProjectOutput> ListBuildsForProjectAsync(string nextToken, ListBuildsForProjectInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.ListBuildsForProject?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBuildsForProjectOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about Docker images that are managed by CodeBuild.
		/// ListCuratedEnvironmentImages #X-Amz-Target=CodeBuild_20161006.ListCuratedEnvironmentImages
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListCuratedEnvironmentImagesOutput> ListCuratedEnvironmentImagesAsync(ListCuratedEnvironmentImagesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.ListCuratedEnvironmentImages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCuratedEnvironmentImagesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of build project names, with each build project name representing a single build project.
		/// ListProjects #X-Amz-Target=CodeBuild_20161006.ListProjects
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProjectsOutput> ListProjectsAsync(string nextToken, ListProjectsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.ListProjects?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProjectsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list ARNs for the report groups in the current Amazon Web Services account.
		/// ListReportGroups #X-Amz-Target=CodeBuild_20161006.ListReportGroups
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListReportGroupsOutput> ListReportGroupsAsync(string maxResults, string nextToken, ListReportGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.ListReportGroups?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListReportGroupsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of ARNs for the reports in the current Amazon Web Services account.
		/// ListReports #X-Amz-Target=CodeBuild_20161006.ListReports
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListReportsOutput> ListReportsAsync(string maxResults, string nextToken, ListReportsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.ListReports?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListReportsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of ARNs for the reports that belong to a <code>ReportGroup</code>.
		/// ListReportsForReportGroup #X-Amz-Target=CodeBuild_20161006.ListReportsForReportGroup
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListReportsForReportGroupOutput> ListReportsForReportGroupAsync(string maxResults, string nextToken, ListReportsForReportGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.ListReportsForReportGroup?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListReportsForReportGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of projects that are shared with other Amazon Web Services accounts or users.
		/// ListSharedProjects #X-Amz-Target=CodeBuild_20161006.ListSharedProjects
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSharedProjectsOutput> ListSharedProjectsAsync(string maxResults, string nextToken, ListSharedProjectsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.ListSharedProjects?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSharedProjectsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of report groups that are shared with other Amazon Web Services accounts or users.
		/// ListSharedReportGroups #X-Amz-Target=CodeBuild_20161006.ListSharedReportGroups
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSharedReportGroupsOutput> ListSharedReportGroupsAsync(string maxResults, string nextToken, ListSharedReportGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.ListSharedReportGroups?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSharedReportGroupsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <code>SourceCredentialsInfo</code> objects.
		/// ListSourceCredentials #X-Amz-Target=CodeBuild_20161006.ListSourceCredentials
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListSourceCredentialsOutput> ListSourceCredentialsAsync(ListSourceCredentialsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.ListSourceCredentials";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSourceCredentialsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stores a resource policy for the ARN of a <code>Project</code> or <code>ReportGroup</code> object.
		/// PutResourcePolicy #X-Amz-Target=CodeBuild_20161006.PutResourcePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutResourcePolicyOutput> PutResourcePolicyAsync(PutResourcePolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.PutResourcePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutResourcePolicyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Restarts a build.
		/// RetryBuild #X-Amz-Target=CodeBuild_20161006.RetryBuild
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RetryBuildOutput> RetryBuildAsync(RetryBuildInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.RetryBuild";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetryBuildOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Restarts a failed batch build. Only batch builds that have failed can be retried.
		/// RetryBuildBatch #X-Amz-Target=CodeBuild_20161006.RetryBuildBatch
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RetryBuildBatchOutput> RetryBuildBatchAsync(RetryBuildBatchInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.RetryBuildBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetryBuildBatchOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts running a build.
		/// StartBuild #X-Amz-Target=CodeBuild_20161006.StartBuild
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartBuildOutput> StartBuildAsync(StartBuildInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.StartBuild";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartBuildOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a batch build for a project.
		/// StartBuildBatch #X-Amz-Target=CodeBuild_20161006.StartBuildBatch
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartBuildBatchOutput> StartBuildBatchAsync(StartBuildBatchInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.StartBuildBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartBuildBatchOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attempts to stop running a build.
		/// StopBuild #X-Amz-Target=CodeBuild_20161006.StopBuild
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopBuildOutput> StopBuildAsync(StopBuildInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.StopBuild";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopBuildOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops a running batch build.
		/// StopBuildBatch #X-Amz-Target=CodeBuild_20161006.StopBuildBatch
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopBuildBatchOutput> StopBuildBatchAsync(StopBuildBatchInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.StopBuildBatch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopBuildBatchOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Changes the settings of a build project.
		/// UpdateProject #X-Amz-Target=CodeBuild_20161006.UpdateProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateProjectOutput> UpdateProjectAsync(UpdateProjectInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.UpdateProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateProjectOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Changes the public visibility for a project. The project's build results, logs, and artifacts are available to the general public. For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/public-builds.html">Public build projects</a> in the <i>CodeBuild User Guide</i>.</p> <important> <p>The following should be kept in mind when making your projects public:</p> <ul> <li> <p>All of a project's build results, logs, and artifacts, including builds that were run when the project was private, are available to the general public.</p> </li> <li> <p>All build logs and artifacts are available to the public. Environment variables, source code, and other sensitive information may have been output to the build logs and artifacts. You must be careful about what information is output to the build logs. Some best practice are:</p> <ul> <li> <p>Do not store sensitive values, especially Amazon Web Services access key IDs and secret access keys, in environment variables. We recommend that you use an Amazon EC2 Systems Manager Parameter Store or Secrets Manager to store sensitive values.</p> </li> <li> <p>Follow <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/webhooks.html#webhook-best-practices">Best practices for using webhooks</a> in the <i>CodeBuild User Guide</i> to limit which entities can trigger a build, and do not store the buildspec in the project itself, to ensure that your webhooks are as secure as possible.</p> </li> </ul> </li> <li> <p>A malicious user can use public builds to distribute malicious artifacts. We recommend that you review all pull requests to verify that the pull request is a legitimate change. We also recommend that you validate any artifacts with their checksums to make sure that the correct artifacts are being downloaded.</p> </li> </ul> </important>
		/// UpdateProjectVisibility #X-Amz-Target=CodeBuild_20161006.UpdateProjectVisibility
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateProjectVisibilityOutput> UpdateProjectVisibilityAsync(UpdateProjectVisibilityInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.UpdateProjectVisibility";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateProjectVisibilityOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a report group.
		/// UpdateReportGroup #X-Amz-Target=CodeBuild_20161006.UpdateReportGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateReportGroupOutput> UpdateReportGroupAsync(UpdateReportGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.UpdateReportGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateReportGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Updates the webhook associated with an CodeBuild build project. </p> <note> <p> If you use Bitbucket for your repository, <code>rotateSecret</code> is ignored. </p> </note>
		/// UpdateWebhook #X-Amz-Target=CodeBuild_20161006.UpdateWebhook
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateWebhookOutput> UpdateWebhookAsync(UpdateWebhookInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeBuild_20161006.UpdateWebhook";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateWebhookOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum BatchDeleteBuildsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.BatchDeleteBuilds")]
		CodeBuild_20161006_BatchDeleteBuilds = 0,
	}
	
	public enum BatchGetBuildBatchesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.BatchGetBuildBatches")]
		CodeBuild_20161006_BatchGetBuildBatches = 0,
	}
	
	public enum BatchGetBuildsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.BatchGetBuilds")]
		CodeBuild_20161006_BatchGetBuilds = 0,
	}
	
	public enum BatchGetProjectsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.BatchGetProjects")]
		CodeBuild_20161006_BatchGetProjects = 0,
	}
	
	public enum BatchGetReportGroupsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.BatchGetReportGroups")]
		CodeBuild_20161006_BatchGetReportGroups = 0,
	}
	
	public enum BatchGetReportsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.BatchGetReports")]
		CodeBuild_20161006_BatchGetReports = 0,
	}
	
	public enum CreateProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.CreateProject")]
		CodeBuild_20161006_CreateProject = 0,
	}
	
	public enum CreateReportGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.CreateReportGroup")]
		CodeBuild_20161006_CreateReportGroup = 0,
	}
	
	public enum CreateWebhookX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.CreateWebhook")]
		CodeBuild_20161006_CreateWebhook = 0,
	}
	
	public enum DeleteBuildBatchX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.DeleteBuildBatch")]
		CodeBuild_20161006_DeleteBuildBatch = 0,
	}
	
	public enum DeleteProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.DeleteProject")]
		CodeBuild_20161006_DeleteProject = 0,
	}
	
	public enum DeleteReportX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.DeleteReport")]
		CodeBuild_20161006_DeleteReport = 0,
	}
	
	public enum DeleteReportGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.DeleteReportGroup")]
		CodeBuild_20161006_DeleteReportGroup = 0,
	}
	
	public enum DeleteResourcePolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.DeleteResourcePolicy")]
		CodeBuild_20161006_DeleteResourcePolicy = 0,
	}
	
	public enum DeleteSourceCredentialsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.DeleteSourceCredentials")]
		CodeBuild_20161006_DeleteSourceCredentials = 0,
	}
	
	public enum DeleteWebhookX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.DeleteWebhook")]
		CodeBuild_20161006_DeleteWebhook = 0,
	}
	
	public enum DescribeCodeCoveragesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.DescribeCodeCoverages")]
		CodeBuild_20161006_DescribeCodeCoverages = 0,
	}
	
	public enum DescribeTestCasesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.DescribeTestCases")]
		CodeBuild_20161006_DescribeTestCases = 0,
	}
	
	public enum GetReportGroupTrendX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.GetReportGroupTrend")]
		CodeBuild_20161006_GetReportGroupTrend = 0,
	}
	
	public enum GetResourcePolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.GetResourcePolicy")]
		CodeBuild_20161006_GetResourcePolicy = 0,
	}
	
	public enum ImportSourceCredentialsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.ImportSourceCredentials")]
		CodeBuild_20161006_ImportSourceCredentials = 0,
	}
	
	public enum InvalidateProjectCacheX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.InvalidateProjectCache")]
		CodeBuild_20161006_InvalidateProjectCache = 0,
	}
	
	public enum ListBuildBatchesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.ListBuildBatches")]
		CodeBuild_20161006_ListBuildBatches = 0,
	}
	
	public enum ListBuildBatchesForProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.ListBuildBatchesForProject")]
		CodeBuild_20161006_ListBuildBatchesForProject = 0,
	}
	
	public enum ListBuildsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.ListBuilds")]
		CodeBuild_20161006_ListBuilds = 0,
	}
	
	public enum ListBuildsForProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.ListBuildsForProject")]
		CodeBuild_20161006_ListBuildsForProject = 0,
	}
	
	public enum ListCuratedEnvironmentImagesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.ListCuratedEnvironmentImages")]
		CodeBuild_20161006_ListCuratedEnvironmentImages = 0,
	}
	
	public enum ListProjectsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.ListProjects")]
		CodeBuild_20161006_ListProjects = 0,
	}
	
	public enum ListReportGroupsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.ListReportGroups")]
		CodeBuild_20161006_ListReportGroups = 0,
	}
	
	public enum ListReportsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.ListReports")]
		CodeBuild_20161006_ListReports = 0,
	}
	
	public enum ListReportsForReportGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.ListReportsForReportGroup")]
		CodeBuild_20161006_ListReportsForReportGroup = 0,
	}
	
	public enum ListSharedProjectsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.ListSharedProjects")]
		CodeBuild_20161006_ListSharedProjects = 0,
	}
	
	public enum ListSharedReportGroupsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.ListSharedReportGroups")]
		CodeBuild_20161006_ListSharedReportGroups = 0,
	}
	
	public enum ListSourceCredentialsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.ListSourceCredentials")]
		CodeBuild_20161006_ListSourceCredentials = 0,
	}
	
	public enum PutResourcePolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.PutResourcePolicy")]
		CodeBuild_20161006_PutResourcePolicy = 0,
	}
	
	public enum RetryBuildX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.RetryBuild")]
		CodeBuild_20161006_RetryBuild = 0,
	}
	
	public enum RetryBuildBatchX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.RetryBuildBatch")]
		CodeBuild_20161006_RetryBuildBatch = 0,
	}
	
	public enum StartBuildX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.StartBuild")]
		CodeBuild_20161006_StartBuild = 0,
	}
	
	public enum StartBuildBatchX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.StartBuildBatch")]
		CodeBuild_20161006_StartBuildBatch = 0,
	}
	
	public enum StopBuildX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.StopBuild")]
		CodeBuild_20161006_StopBuild = 0,
	}
	
	public enum StopBuildBatchX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.StopBuildBatch")]
		CodeBuild_20161006_StopBuildBatch = 0,
	}
	
	public enum UpdateProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.UpdateProject")]
		CodeBuild_20161006_UpdateProject = 0,
	}
	
	public enum UpdateProjectVisibilityX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.UpdateProjectVisibility")]
		CodeBuild_20161006_UpdateProjectVisibility = 0,
	}
	
	public enum UpdateReportGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.UpdateReportGroup")]
		CodeBuild_20161006_UpdateReportGroup = 0,
	}
	
	public enum UpdateWebhookX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeBuild_20161006.UpdateWebhook")]
		CodeBuild_20161006_UpdateWebhook = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
