//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BasicModelStats
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average")]
		public double Average { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="median")]
		public double Median { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pVariance")]
		public double PVariance { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stdDev")]
		public double StdDev { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BasicModelStatsResp
	{
		
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheTimeLimit")]
		public System.Nullable<System.Int32> CacheTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BasicModelStats[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BooleanResp
	{
		
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheTimeLimit")]
		public System.Nullable<System.Int32> CacheTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public bool Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BrandResp
	{
		
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheTimeLimit")]
		public System.Nullable<System.Int32> CacheTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BucketEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public double Bucket { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="percentOfMarket")]
		public double PercentOfMarket { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BucketResp
	{
		
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheTimeLimit")]
		public System.Nullable<System.Int32> CacheTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BucketEntry[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealershipData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dealerName")]
		public string DealerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public int[] Ids { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zipCode")]
		public int ZipCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealershipDataPaginated
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dealers")]
		public DealershipData[] Dealers { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maxPages")]
		public int MaxPages { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="page")]
		public int Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealershipDataPaginatedResp
	{
		
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheTimeLimit")]
		public System.Nullable<System.Int32> CacheTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DealershipDataPaginated Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealershipDataResp
	{
		
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheTimeLimit")]
		public System.Nullable<System.Int32> CacheTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DealershipData[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointList
	{
		
		[System.Runtime.Serialization.DataMember(Name="endPoints")]
		public string[] EndPoints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenericResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheTimeLimit")]
		public System.Nullable<System.Int32> CacheTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public object Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HTTPValidationError
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public ValidationError[] Detail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loc")]
		public string[] Loc { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HistoryResp
	{
		
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheTimeLimit")]
		public System.Nullable<System.Int32> CacheTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public VehHistoryData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VehHistoryData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public VehHistory[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vin")]
		public string Vin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VehHistory
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dealerName")]
		public string DealerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstSeen")]
		public System.DateOnly FirstSeen { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastSeen")]
		public System.DateOnly LastSeen { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="miles")]
		public int Miles { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="new")]
		public bool New { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public double Price { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public int Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JSONWebToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdOn")]
		public System.Nullable<System.Int32> CreatedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public System.Nullable<System.Int32> Expires { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Listing
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="askPrice")]
		public double AskPrice { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dealerID")]
		public int DealerID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstSeen")]
		public System.DateOnly FirstSeen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interiorColor")]
		public string InteriorColor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isNew")]
		public bool IsNew { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastSeen")]
		public System.DateOnly LastSeen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mileage")]
		public System.Nullable<System.Double> Mileage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msrp")]
		public double Msrp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vin")]
		public string Vin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vinDecode")]
		public string VinDecode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		public double Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListingResp
	{
		
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheTimeLimit")]
		public System.Nullable<System.Int32> CacheTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListingRespPaginated Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListingRespPaginated
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="listings")]
		public Listing[] Listings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maxPages")]
		public int MaxPages { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="page")]
		public int Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModelDict
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModelResp
	{
		
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheTimeLimit")]
		public System.Nullable<System.Int32> CacheTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ModelDict[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModelYearDistEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="percentOfMarket")]
		public double PercentOfMarket { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		public int Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModelYearDistResp
	{
		
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheTimeLimit")]
		public System.Nullable<System.Int32> CacheTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ModelYearDistEntry[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionResp
	{
		
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheTimeLimit")]
		public System.Nullable<System.Int32> CacheTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimilarSalePriceData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="daysBack")]
		public int DaysBack { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mileCount")]
		public int MileCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="milesAvg")]
		public double MilesAvg { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="milesStdDev")]
		public double MilesStdDev { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newCount")]
		public int NewCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newSaleAvg")]
		public double NewSaleAvg { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newSaleStdDev")]
		public double NewSaleStdDev { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="usedCount")]
		public int UsedCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="usedSaleAvg")]
		public double UsedSaleAvg { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="usedSaleStdDev")]
		public double UsedSaleStdDev { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimilarSalePriceResp
	{
		
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheTimeLimit")]
		public System.Nullable<System.Int32> CacheTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SimilarSalePriceData Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.DateOnly EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.DateOnly StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubUserJSONWebToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdOn")]
		public System.Nullable<System.Int32> CreatedOn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endPoints")]
		public string[] EndPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public System.Nullable<System.Int32> Expires { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TopModelEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brandMarketShare")]
		public double BrandMarketShare { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="percentOfBrandSales")]
		public double PercentOfBrandSales { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="percentOfTopSales")]
		public double PercentOfTopSales { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TopModelResp
	{
		
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheTimeLimit")]
		public System.Nullable<System.Int32> CacheTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TopModelEntry[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Days worth of supply left on dealer lots
		/// Average, median, standard deviation, population variance, and whole region average of the
		/// days of supply left on dealer lots for a given brand and region. The average, median, stdDev, and pVar fields are calculated on
		/// a dealer by dealer basis while the whole region average treats the entire region like a single dealership.
		/// The average field may differ from the whole region average, especially when dealers are out of
		/// a given model.
		/// 
		/// The available brand and region names can be retrieved from their respective endpoints.
		/// DaysSupply_daysSupply_get daysSupply
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<GenericResponse> DaysSupply_daysSupply_getAsync(string jwt, string brandName, string regionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "daysSupply?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&brandName=" + (brandName==null? "" : System.Uri.EscapeDataString(brandName))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GenericResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Days a vehicle takes to sell
		/// Average, median, standard deviation, population variance, and whole region average of the
		/// number of days a vehicle spends on dealer lots for a given brand and region. The average, median, stdDev, and pVar fields are calculated on
		/// a dealer by dealer basis while the whole region average treats the entire region like a single dealership.
		/// The average field may differ from the whole region average.
		/// 
		/// The available brand and region names can be retrieved from their respective endpoints.
		/// DaysToSell_daysToSell_get daysToSell
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<GenericResponse> DaysToSell_daysToSell_getAsync(string jwt, string brandName, string regionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "daysToSell?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&brandName=" + (brandName==null? "" : System.Uri.EscapeDataString(brandName))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GenericResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of brand names
		/// Get vehicle brand names.
		/// 
		/// These names are used as arguments for other endpoints. The names are generally not case sensitive
		/// when used with other endpoints, but it is best practice to use the names returned by this endpoint without changes.
		/// GetBrandNames_getBrands_get getBrands
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<BrandResp> GetBrandNames_getBrands_getAsync(string jwt, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getBrands?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BrandResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Premium. Dealers in a zip code.
		/// Premium. Dealership information in a given zip code using the first 4 digits. Returns name, address, state, zipCode, and IDs.
		/// For example a call with the zip code 92701 would return dealers with zip codes in the range [92700, 92709]
		/// GetDealers_getDealers_get getDealers
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<DealershipDataResp> GetDealers_getDealers_getAsync(string jwt, int zipCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getDealers?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&zipCode="+zipCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DealershipDataResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Premium. Dealers by ID
		/// Premium. Dealership information using the internal ID. Returns name, address, state, zipCode, and ID for a single dealer in the same format as the /getDealers endpoint.
		/// Dealer IDs are generally retrieved via the /getDealers or /getDealersByRegion endpoints.
		/// GetDealers_getDealersByID_get getDealersByID
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<DealershipDataResp> GetDealers_getDealersByID_getAsync(string jwt, int dealerID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getDealersByID?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&dealerID="+dealerID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DealershipDataResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Premium. Dealers in a region.
		/// Premium. Dealership information in a given region. Returns name, address, state, zipCode, and IDs. Results are paginated with up to 30 results per page.
		/// GetDealers_getDealersByRegion_get getDealersByRegion
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<DealershipDataPaginatedResp> GetDealers_getDealersByRegion_getAsync(string jwt, string regionName, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getDealersByRegion?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DealershipDataPaginatedResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of model names including discontinued models
		/// Get all model names including discontinued models. Because these models are no longer built, or have very poor market performance
		/// they are not incuded in the normal getModels endpoint. Many users itterate through the model names with our new vehicle sales
		/// endpoints and waste some of their quota making self contradictory requests. This endpoint was created to aleviate the use case where
		/// someone requests information on new vehicle sales for a model that has not been sold new for a long, long, time.
		/// 
		/// These names are used as arguments for other endpoints. The names are generally not case sensitive
		/// when used with other endpoints, but it is best practice to use the names returned by this endpoint without changes.
		/// GetModelNamesAll_getInactiveModels_get getInactiveModels
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<ModelResp> GetModelNamesAll_getInactiveModels_getAsync(string jwt, string brandName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getInactiveModels?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&brandName=" + (brandName==null? "" : System.Uri.EscapeDataString(brandName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of model names
		/// Get brand model names for currently active models. This endpoint does not return model names that have been discontinued or have
		/// sold less than 10 vehicles in the last month and a half.
		/// 
		/// These names are used as arguments for other endpoints. The names are generally not case sensitive
		/// when used with other endpoints, but it is best practice to use the names returned by this endpoint without changes.
		/// GetModelNames_getModels_get getModels
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<ModelResp> GetModelNames_getModels_getAsync(string jwt, string brandName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getModels?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&brandName=" + (brandName==null? "" : System.Uri.EscapeDataString(brandName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Market share of a brand in region
		/// Market share of a given brand in a given region by number of vehicles sold over the last 45 days.
		/// GetRegionBrandMarketShare_getRegionBrandMarketShare_get getRegionBrandMarketShare
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<GenericResponse> GetRegionBrandMarketShare_getRegionBrandMarketShare_getAsync(string jwt, string brandName, string regionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getRegionBrandMarketShare?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&brandName=" + (brandName==null? "" : System.Uri.EscapeDataString(brandName))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GenericResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Market share of all brands in region
		/// Market share of a all brands in a given region by number of vehicles sold over the last 45 days.
		/// GetRegionMarketShare_getRegionMarketShare_get getRegionMarketShare
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<GenericResponse> GetRegionMarketShare_getRegionMarketShare_getAsync(string jwt, string regionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getRegionMarketShare?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GenericResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of region names
		/// Get region names. These names are used as arguments for other endpoints. The names are generally not case sensitive
		/// when used with other endpoints, but it is best practice to use the names returned by this endpoint without changes.
		/// GetRegions_getRegions_get getRegions
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<RegionResp> GetRegions_getRegions_getAsync(string jwt, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getRegions?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RegionResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Sub User Keys associated with your account.
		/// Get a list of your issued SubUser API Keys. Includes active and revoked keys.
		/// GetSubUserKeys_getSubUserKeys_get getSubUserKeys
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<GenericResponse> GetSubUserKeys_getSubUserKeys_getAsync(string apiID, string apiKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getSubUserKeys?apiID=" + (apiID==null? "" : System.Uri.EscapeDataString(apiID))+"&apiKey=" + (apiKey==null? "" : System.Uri.EscapeDataString(apiKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GenericResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a JWT from your API credentials
		/// This is the first function you should call.
		/// 
		/// If you are accessing our API through a third party provider they will handle authenticating to our API for you
		/// and you will not need call this function or retrieve a JSON Web Token.
		/// 
		/// All other functions require the JSON Web Token (JWT) from this function to
		/// be incuded in their arguments. The value of the "token" field is the actual JWT and any other values in the returned JSON
		/// are metadata there for your convenience. Tokens are valid for a default of 1 hour (3600 seconds). If you try calling an
		/// API endpoint with a missing, invalid, or expired JWT it will return a HTTP 403 code. You would then need to call this end point
		/// to get a new token.
		/// MakeToken_getToken_get getToken
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<JSONWebToken> MakeToken_getToken_getAsync(string apiID, string apiKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getToken?apiID=" + (apiID==null? "" : System.Uri.EscapeDataString(apiID))+"&apiKey=" + (apiKey==null? "" : System.Uri.EscapeDataString(apiKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JSONWebToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a JWT from your API credentials
		/// This is the first function you should call.
		/// 
		/// If you are accessing our API through a third party provider they will handle authenticating to our API for you
		/// and you will not need call this function or retrieve a JSON Web Token.
		/// 
		/// All other functions require the JSON Web Token (JWT) from this function to
		/// be incuded in their arguments. The value of the "token" field is the actual JWT and any other values in the returned JSON
		/// are metadata there for your convenience. Tokens are valid for a default of 1 hour (3600 seconds). If you try calling an
		/// API endpoint with a missing, invalid, or expired JWT it will return a HTTP 403 code. You would then need to call this end point
		/// to get a new token.
		/// MakeToken_getToken_post getToken
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<JSONWebToken> MakeToken_getToken_postAsync(string apiID, string apiKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getToken?apiID=" + (apiID==null? "" : System.Uri.EscapeDataString(apiID))+"&apiKey=" + (apiKey==null? "" : System.Uri.EscapeDataString(apiKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JSONWebToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stats on ask price of new vehicles
		/// Average, median, standard deviation, and population variance of the ask price of new vehicles over the last 15 days for a given brand and region.
		/// 
		/// The available brand and region names can be retrieved from their respective endpoints.
		/// GetAvgListPrice_listPrice_get listPrice
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<BasicModelStatsResp> GetAvgListPrice_listPrice_getAsync(string jwt, string brandName, string regionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listPrice?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&brandName=" + (brandName==null? "" : System.Uri.EscapeDataString(brandName))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicModelStatsResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Listings by Dealer ID
		/// See /listings2 endpoint for more flexible listing search.
		/// Returns a dealer's listings over the last 45 days by dealer ID. The ID can be found by calling the /getDealers endpoint.
		/// Listing keys are: vin, askPrice, msrp, isNew, firstSeen, lastSeen, modelName, brandName.
		/// Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD).
		/// GetListingsByDealer_listings_get listings
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<ListingResp> GetListingsByDealer_listings_getAsync(string jwt, int dealerID, int page, bool newCars, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listings?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&dealerID="+dealerID+"&page="+page+"&newCars="+newCars;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListingResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Flexible Listing Search
		/// Generic getter for listings supporting a wide array of selection criteria. This is the new primary listing endpoint and we will phase out the older listing endpoints over time.
		/// The other listing endpoints return the same data, but are more restrictive in the available geographic and vehicle selection criteria and can be replicated by this endpoint.
		/// 
		/// Dealer selection uses the most restrictive criteria supplied. From most restrictive to least: dealerID, gps, zipCode, region. You must provide some dealer selection criteria.
		/// 
		/// It is important to note that the units in the longitude are in degrees east, not degrees west. For example the coordinates 45.53N, 100.41W correspond to Mobridge, SC
		/// but they will be interpreted as 45.53N, 100.41E which corresponds to a point in the Gobi Desert near Jinst, Mongolia. You can fix this by converting the longitiude yourself,
		/// or by supplying a negative value (-100.41). For this example both (X, -100.41) and (X, 259.59) would be the same point. Units on the radius are miles and a smaller radius will
		/// result in a faster response time. Maximum search radius depends on your subscription plan.
		/// 
		/// The radius value is used for GPS searches and (optionally) zipCode searches. It is ignored for searches using other location criteria. If you provide a radius value with a zipCode
		/// search, the zipCode will be mapped to GPS coordinates behind the scenes. If no radius is provided or if the zipCode to GPS mapping fails,
		/// the API will only search for vehicles at dealerships within the provided zipCode.
		/// 
		/// Listing selection logically ANDs all options given.
		/// 
		/// Time interval selection will prefer explicit start and end dates. If only one of startDate/endDate is supplied, this endpoint will use it
		/// as an anchor and look forward or backwards by the daysBack value. If startDate is specified and endDate is not, then endDate will be set to startDate+daysBack.
		/// Conversely if endDate is specified, but startDate is not then startDate will be set at endDate-daysBack.
		/// If neither is supplied endpoint will set endDate to today and startDate to today-daysBack.
		/// 
		/// Maximum time interval is 45 days.
		/// 
		/// Mileage selection uses the provided mileage values and returns vehicles with mileage in the range [mileageLow, mileageHigh].
		/// If mileageLow == mileageHigh (for example both are 0 default) this endpoint will not filter based on mileage. Not all used vehicles have a mileage record available.
		/// 
		/// ExtendedSearch modifies the slice of listings returned. If false (default) it only returns vehicles satisfying lastSeen >= startDate and lastSeen < endDate.
		/// If true it will return vehicles that were in dealer's inventory at any point between startDate and endDate including vehicles that were sold after endDate.
		/// Setting extendedSearch to true will result in a slower response time.
		/// 
		/// For example: If both a region name and dealer ID are supplied the dealer ID will be used because it is the most restrictive.
		/// 
		/// If a brandName of Ford and modelYear of 2019, modelName of F-150, and newCars of False is supplied this endpoint will return
		/// used 2019 model year Ford F-150s. If a contradictory listing selection is supplied (for example Ford + Camry) no listings will be returned
		/// because the request matched no listings.
		/// 
		/// Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD).
		/// GetListings2_listings2_get listings2
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<ListingResp> GetListings2_listings2_getAsync(
					string jwt, 
					int dealerID, 
					int zipCode, 
					double latitude, 
					double longitude, 
					double radius, 
					string regionName, 
					string brandName, 
					string modelName, 
					int modelYear, 
					int mileageLow, 
					int mileageHigh, 
					System.DateOnly startDate, 
					System.DateOnly endDate, 
					int daysBack, 
					int page, 
					bool newCars, 
					bool extendedSearch, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listings2?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&dealerID="+dealerID+"&zipCode="+zipCode+"&latitude="+latitude+"&longitude="+longitude+"&radius="+radius+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName))+"&brandName=" + (brandName==null? "" : System.Uri.EscapeDataString(brandName))+"&modelName=" + (modelName==null? "" : System.Uri.EscapeDataString(modelName))+"&modelYear="+modelYear+"&mileageLow="+mileageLow+"&mileageHigh="+mileageHigh+"&startDate="+startDate+"&endDate="+endDate+"&daysBack="+daysBack+"&page="+page+"&newCars="+newCars+"&extendedSearch="+extendedSearch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListingResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Listings by Dealer ID and Date
		/// See /listings2 endpoint for more flexible listing search.
		/// Returns a dealer's listings over the given timespan by dealer ID. The ID can be found by calling the /getDealers endpoint.
		/// Maximum time interval between startDate and endDate is 45 days.
		/// Listing keys are: vin, askPrice, msrp, isNew, firstSeen, lastSeen, modelName, brandName.
		/// Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD).
		/// GetListingsByDealer_listingsByDate_get listingsByDate
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<ListingResp> GetListingsByDealer_listingsByDate_getAsync(string jwt, int dealerID, System.DateOnly startDate, System.DateOnly endDate, int page, bool newCars, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listingsByDate?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&dealerID="+dealerID+"&startDate="+startDate+"&endDate="+endDate+"&page="+page+"&newCars="+newCars;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListingResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Listings by Region
		/// See /listings2 endpoint for more flexible listing search.
		/// Returns a dealer's listings over up to the last 45 days by region.
		/// Listing keys are: vin, askPrice, msrp, isNew, firstSeen, lastSeen, modelName, brandName.
		/// Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD).
		/// GetListingsByRegion_listingsByRegion_get listingsByRegion
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<ListingResp> GetListingsByRegion_listingsByRegion_getAsync(string jwt, string regionName, string modelName, int daysBack, int page, bool newCars, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listingsByRegion?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName))+"&modelName=" + (modelName==null? "" : System.Uri.EscapeDataString(modelName))+"&daysBack="+daysBack+"&page="+page+"&newCars="+newCars;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListingResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Listings by Region and Date
		/// See /listings2 endpoint for more flexible listing search.
		/// Returns listings active in a region in the given date range [startdate, endDate), or in other words dates that satisfy startDate <= X < endDate. Maximum range is 45 days
		/// Listing keys are: vin, askPrice, msrp, isNew, firstSeen, lastSeen, modelName, brandName.
		/// Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD).
		/// GetListingsByRegionAndDate_listingsByRegionAndDate_get listingsByRegionAndDate
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<ListingResp> GetListingsByRegionAndDate_listingsByRegionAndDate_getAsync(string jwt, string regionName, string modelName, System.DateOnly startDate, System.DateOnly endDate, int page, bool newCars, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listingsByRegionAndDate?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName))+"&modelName=" + (modelName==null? "" : System.Uri.EscapeDataString(modelName))+"&startDate="+startDate+"&endDate="+endDate+"&page="+page+"&newCars="+newCars;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListingResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Listings by ZipCode
		/// See /listings2 endpoint for more flexible listing search.
		/// Returns a dealer's listings over up to the last 45 days in the provided dealerhip's zip code. For example 92701.
		/// Listing keys are: vin, askPrice, msrp, isNew, firstSeen, lastSeen, modelName, brandName.
		/// Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD).
		/// ListingsByZipCode_listingsByZipCode_get listingsByZipCode
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<ListingResp> ListingsByZipCode_listingsByZipCode_getAsync(string jwt, int zipCode, int page, bool newCars, string modelName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listingsByZipCode?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&zipCode="+zipCode+"&page="+page+"&newCars="+newCars+"&modelName=" + (modelName==null? "" : System.Uri.EscapeDataString(modelName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListingResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Listings by ZipCode and Date
		/// See /listings2 endpoint for more flexible listing search.
		/// Returns a dealer's listings over up to the last 45 days in the provided dealership's zip code. For example 92701.
		/// Listing keys are: vin, askPrice, msrp, isNew, firstSeen, lastSeen, modelName, brandName.
		/// Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD).
		/// ListingsByZipCodeAndDate_listingsByZipCodeAndDate_get listingsByZipCodeAndDate
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<ListingResp> ListingsByZipCodeAndDate_listingsByZipCodeAndDate_getAsync(string jwt, int zipCode, System.DateOnly startDate, System.DateOnly endDate, int page, bool newCars, string modelName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listingsByZipCodeAndDate?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&zipCode="+zipCode+"&startDate="+startDate+"&endDate="+endDate+"&page="+page+"&newCars="+newCars+"&modelName=" + (modelName==null? "" : System.Uri.EscapeDataString(modelName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListingResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate a Sub User Key that can be used by your users to make API calls in frontend applications.
		/// This endpoint is only fully available to users with a paid plan. Users on Basic or Trial plans may only create keys valid on the "localhost" domain.
		/// This endpoint creates an API key that can be embedded in frontend applications such as web pages that allow your users to directly make API calls.
		/// The "endpoints" value is an array of strings that name the allowed endpoints that may be called using the Sub User Key. Passing a "*" value in the array will allow
		/// all endpoints that require a JWT (JSON Web Token) to be called by the Sub User Key. The keys are valid for as long as your account is valid or you revoke the Sub User Key.
		/// All API calls made by the Sub User Keys are billed to your account. Additionally you should not call this endpoint or the /revokeSubUserKey endpoint at a combined rate
		/// higher than once per second.
		/// MakeSubUserKey_makeSubUserKey_post makeSubUserKey
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<SubUserJSONWebToken> MakeSubUserKey_makeSubUserKey_postAsync(string apiID, string apiKey, string siteName, EndpointList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "makeSubUserKey?apiID=" + (apiID==null? "" : System.Uri.EscapeDataString(apiID))+"&apiKey=" + (apiKey==null? "" : System.Uri.EscapeDataString(apiKey))+"&siteName=" + (siteName==null? "" : System.Uri.EscapeDataString(siteName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubUserJSONWebToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Used market share of model year by model
		/// Market share of used vehicles over the last 45 days by model and year. All values are relative to vehicles of the same model.
		/// For example: a percentOfMarket value of 25, year of 2017, and modelName of Camry means that 25% of used Camrys on the market
		/// in the given region over the last 45 days were from the 2017 model year.
		/// GetModelUsedDist_modelYearDist_get modelYearDist
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<ModelYearDistResp> GetModelUsedDist_modelYearDist_getAsync(string jwt, string modelName, string brandName, string regionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "modelYearDist?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&modelName=" + (modelName==null? "" : System.Uri.EscapeDataString(modelName))+"&brandName=" + (brandName==null? "" : System.Uri.EscapeDataString(brandName))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelYearDistResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Brand sales by region and Day
		/// Get regional sales by brand and day. Most recent data is typically only 2 days old for this endpoint.
		/// 
		/// The Day field is in YYYY-MM-DD format. For example if you wanted sales data from April 5th of 2020 the day field would be '2020-04-05'
		/// 
		/// Data availability depends on region and goes back up to 2016.
		/// GetDealerSales_regionDailySales_get regionDailySales
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<GenericResponse> GetDealerSales_regionDailySales_getAsync(string jwt, string brandName, string regionName, System.DateOnly day, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "regionDailySales?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&brandName=" + (brandName==null? "" : System.Uri.EscapeDataString(brandName))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName))+"&day="+day;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GenericResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Premium. Brand sales by region and month
		/// Premium. Get regional sales by brand and month, broken down by day. Most recent data is typically only 2 days old for this endpoint.
		/// 
		/// The month field is in YYYY-MM-DD format. For example if you wanted sales data from April of 2020 the month field would be '2020-04-01'
		/// 
		/// Data availability depends on region and goes back up to 2016.
		/// GetDealerSales_regionSales_get regionSales
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<GenericResponse> GetDealerSales_regionSales_getAsync(string jwt, string brandName, string regionName, System.DateOnly month, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "regionSales?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&brandName=" + (brandName==null? "" : System.Uri.EscapeDataString(brandName))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName))+"&month="+month;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GenericResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revoke a Sub User Key associated with your account.
		/// Revoke a SubUser API Key with the given UUID. This action can not be undone.
		/// RevokeSubUserKey_revokeSubUserKey_put revokeSubUserKey
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<GenericResponse> RevokeSubUserKey_revokeSubUserKey_putAsync(string apiID, string apiKey, string subUserKeyUUID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "revokeSubUserKey?apiID=" + (apiID==null? "" : System.Uri.EscapeDataString(apiID))+"&apiKey=" + (apiKey==null? "" : System.Uri.EscapeDataString(apiKey))+"&subUserKeyUUID=" + (subUserKeyUUID==null? "" : System.Uri.EscapeDataString(subUserKeyUUID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GenericResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stats on sale price of new vehicles
		/// Average, median, standard deviation, and population variance of the sale price of new vehicles over the last 15 days for a given brand and region.
		/// 
		/// The available brand and region names can be retrieved from their respective endpoints.
		/// GetAvgSalePrice_salePrice_get salePrice
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<BasicModelStatsResp> GetAvgSalePrice_salePrice_getAsync(string jwt, string brandName, string regionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "salePrice?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&brandName=" + (brandName==null? "" : System.Uri.EscapeDataString(brandName))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicModelStatsResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Histogram of sales price of new vehicles by model
		/// Histogram of the sale price of vehicles over the last 45 days for a given model and region.
		/// Price buckets are grouped in units of $1000
		/// The available brand, model, and region names can be retrieved from their respective endpoints.
		/// GetModelSaleBuckets_salePriceHistogram_get salePriceHistogram
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<BucketResp> GetModelSaleBuckets_salePriceHistogram_getAsync(string jwt, string modelName, string brandName, string regionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "salePriceHistogram?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&modelName=" + (modelName==null? "" : System.Uri.EscapeDataString(modelName))+"&brandName=" + (brandName==null? "" : System.Uri.EscapeDataString(brandName))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BucketResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Premium. Simple Vehicle Market Report
		/// Premium. Provides the average, stdDev, and count, of the sale price and mileage of similar new and used vehicles in a given region based off the provided VIN.
		/// Optionally restricts report to vehicles of the same model year and goes back up to 120 days.
		/// GetMarket3_similarSalePrice_get similarSalePrice
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<SimilarSalePriceResp> GetMarket3_similarSalePrice_getAsync(string jwt, string vin, string regionName, int daysBack, bool sameYear, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "similarSalePrice?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&vin=" + (vin==null? "" : System.Uri.EscapeDataString(vin))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName))+"&daysBack="+daysBack+"&sameYear="+sameYear;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SimilarSalePriceResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Top models in a given region
		/// Sales ranking of different models by region over the last 45 days.
		/// The <strong>percentOfTopSales</strong> value is the percent of the top seller the model represents.
		/// 
		/// For example: a value of 80% means that model sold 8 vehicles for every 10 of the top model sold.
		/// 
		/// The other fields represent the model percent of X. The <strong>brandMarketShare</strong> field is that brand's market share of the region
		/// over the report's time interval.
		/// GetTopModels_topModels_get topModels
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<TopModelResp> GetTopModels_topModels_getAsync(string jwt, string regionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "topModels?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TopModelResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Premium. Simple Vehicle Market Report Over Arbitrary Locations and Vehicles.
		/// Premium. Provides the average, stdDev, and count, of the sale price and mileage of similar new or used vehicles based off the provided VIN
		/// and matching the provided other search criteria. This endpoint can be easily used to determine market values in arbitrary geographic locations (like a city)
		/// for specific vehicles.
		/// See /listings2 endpoint for documentation on location, vehicle, and time search parameters.
		/// Date selection is restricted by your subscription tier, same as with the /listings2 endpoint.
		/// Optionally restricts report to vehicles of the same model year.
		/// GetMarket4_valuation_get valuation
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<SimilarSalePriceResp> GetMarket4_valuation_getAsync(
					string jwt, 
					string vin, 
					int dealerID, 
					int zipCode, 
					double latitude, 
					double longitude, 
					double radius, 
					string regionName, 
					int mileageLow, 
					int mileageHigh, 
					System.DateOnly startDate, 
					System.DateOnly endDate, 
					int daysBack, 
					bool newCars, 
					bool extendedSearch, 
					bool sameYear, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "valuation?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&vin=" + (vin==null? "" : System.Uri.EscapeDataString(vin))+"&dealerID="+dealerID+"&zipCode="+zipCode+"&latitude="+latitude+"&longitude="+longitude+"&radius="+radius+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName))+"&mileageLow="+mileageLow+"&mileageHigh="+mileageHigh+"&startDate="+startDate+"&endDate="+endDate+"&daysBack="+daysBack+"&newCars="+newCars+"&extendedSearch="+extendedSearch+"&sameYear="+sameYear;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SimilarSalePriceResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Premium. Simple Vehicle History Report
		/// Premium. Provides a simple report detailing a vechicle's sales history at dealerships. Data includes the name of the dealership, dates it was for sale,
		/// price, new/used condition, mileage, dealership state, and dealership zip code. Data availability goes back to early 2016.
		/// 
		/// If your use case involves checking if a vehicle has appeared on the open market on or after a given date see
		/// the /vehicleSeen endpoint.
		/// GetHistory2_vehicleHistory_get vehicleHistory
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<HistoryResp> GetHistory2_vehicleHistory_getAsync(string jwt, string vin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vehicleHistory?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&vin=" + (vin==null? "" : System.Uri.EscapeDataString(vin));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HistoryResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks if a VIN appeared on the market on or after a given date.
		/// Checks our database to see if we have data on a VIN that appeared on the open market on or after the given date with a True/False response.
		/// This endpoint is more cost effective than the /vehicleHistory endpoint if your use case
		/// requires searching a large list of vehicles with a low individual likelyhood of appearing on the open market. (For example searching for a specific stolen vehicle).
		/// GetVehicleSeen_vehicleSeen_get vehicleSeen
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<BooleanResp> GetVehicleSeen_vehicleSeen_getAsync(string jwt, string vin, System.DateOnly afterDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vehicleSeen?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&vin=" + (vin==null? "" : System.Uri.EscapeDataString(vin))+"&afterDate="+afterDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BooleanResp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Vin decoder and Recall Info
		/// Decodes the provided North American vin and provides recall information if available.
		/// We require at least the first 12 out of 17 characters in the vin to attempt a decode. The vin is not case sensitive.
		/// If passEmpty (default False) is True we will also include the empty fields in the response json.
		/// If includeRecall (default True) is True we will include recall data reported to the NHTSA. Set False for a faster response.
		/// VinDecode_vinDecode_get vinDecode
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<GenericResponse> VinDecode_vinDecode_getAsync(string jwt, string vin, bool passEmpty, bool includeRecall, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vinDecode?jwt=" + (jwt==null? "" : System.Uri.EscapeDataString(jwt))+"&vin=" + (vin==null? "" : System.Uri.EscapeDataString(vin))+"&passEmpty="+passEmpty+"&includeRecall="+includeRecall;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GenericResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
