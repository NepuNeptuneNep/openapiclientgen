//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AbsenceEntitlement
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AbsenceEntitlementValue[] AbsenceEntitlementValue { get; set; }
	}
	
	public class AbsenceEntitlementValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public AbsenceEntitlementValueAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AbsenceEntitlementValueType> Type { get; set; }
	}
	
	public class AbsenceEntitlementValueAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="entitlement")]
		public System.Nullable<System.Double> Entitlement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AbsenceEntitlementValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimeOffType = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AbsencePeriodResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AbsencePeriodsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttendancePeriodsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attribute
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CostCenters
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CostCentersValue[] CostCentersValue { get; set; }
	}
	
	public class CostCentersValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public CostCentersValueAttributes[] CostCentersValueAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class CostCentersValueAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Double> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTimeOffPeriodRequest
	{
		
		/// <summary>
		/// Optional comment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Employee identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		public int Employee_id { get; set; }
		
		/// <summary>
		/// Absence end date as YYYY-MM-DD
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public System.DateOnly End_date { get; set; }
		
		/// <summary>
		/// Weather the end date is a half-day off
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="half_day_end")]
		public bool Half_day_end { get; set; }
		
		/// <summary>
		/// Weather the start date is a half-day off
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="half_day_start")]
		public bool Half_day_start { get; set; }
		
		/// <summary>
		/// Absence start date as YYYY-MM-DD
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public System.DateOnly Start_date { get; set; }
		
		/// <summary>
		/// Time-off type identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="time_off_type_id")]
		public int Time_off_type_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTimeOffPeriodResponse : Response
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateTimeOffPeriodResponseData Data { get; set; }
	}
	
	public class CreateTimeOffPeriodResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public object Attributes { get; set; }
		
		/// <summary>
		/// Time-off period resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CreateTimeOffPeriodResponseDataType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CreateTimeOffPeriodResponseDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimeOffPeriod = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Department
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DepartmentValue Value { get; set; }
	}
	
	public class DepartmentValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public DepartmentValueAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class DepartmentValueAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetailedErrorResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public DetailedErrorResponseError Error { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public bool Success { get; set; }
	}
	
	public class DetailedErrorResponseError
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailed_message")]
		public DetailedErrorResponseErrorDetailed_message[] DetailedErrorResponseErrorDetailed_message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class DetailedErrorResponseErrorDetailed_message
	{
		
		[System.Runtime.Serialization.DataMember(Name="break")]
		public System.Nullable<System.Int32> Break { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="employee")]
		public System.Nullable<System.Int32> Employee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public string End_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error_msg")]
		public string Error_msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public string Start_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Employee
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public EmployeeAttributes[] EmployeeAttributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class EmployeeAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="absence_entitlement")]
		public AbsenceEntitlement Absence_entitlement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contract_end_date")]
		public Attribute Contract_end_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cost_centers")]
		public CostCenters Cost_centers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public Attribute Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="department")]
		public Department Department { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public Attribute Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="employment_type")]
		public Attribute Employment_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public Attribute First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fix_salary")]
		public Attribute Fix_salary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public Attribute Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hire_date")]
		public Attribute Hire_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="holiday_calendar")]
		public HolidayCalendar Holiday_calendar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hourly_salary")]
		public Attribute Hourly_salary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public Attribute Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public Attribute Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="office")]
		public Office Office { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public Attribute Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="probation_period_end")]
		public Attribute Probation_period_end { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Attribute Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supervisor")]
		public Supervisor Supervisor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="termination_date")]
		public Attribute Termination_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="termination_reason")]
		public Attribute Termination_reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="termination_type")]
		public Attribute Termination_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vacation_day_balance")]
		public Attribute Vacation_day_balance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekly_working_hours")]
		public Attribute Weekly_working_hours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="work_schedule")]
		public WorkSchedule Work_schedule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HolidayCalendar
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public HolidayCalendarValue Value { get; set; }
	}
	
	public class HolidayCalendarValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public HolidayCalendarValueAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class HolidayCalendarValueAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Double> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Office
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OfficeValue Value { get; set; }
	}
	
	public class OfficeValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public OfficeValueAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class OfficeValueAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Supervisor
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Employee Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkSchedule
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WorkScheduleValue Value { get; set; }
	}
	
	public class WorkScheduleValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public WorkScheduleValueAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class WorkScheduleValueAttributes
	{
		
		/// <summary>
		/// Pattern: ^\d\d:\d\d$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friday")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d\d:\d\d$")]
		public string Friday { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Double> Id { get; set; }
		
		/// <summary>
		/// Pattern: ^\d\d:\d\d$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monday")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d\d:\d\d$")]
		public string Monday { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ^\d\d:\d\d$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saturday")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d\d:\d\d$")]
		public string Saturday { get; set; }
		
		/// <summary>
		/// Pattern: ^\d\d:\d\d$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sunday")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d\d:\d\d$")]
		public string Sunday { get; set; }
		
		/// <summary>
		/// Pattern: ^\d\d:\d\d$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thursday")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d\d:\d\d$")]
		public string Thursday { get; set; }
		
		/// <summary>
		/// Pattern: ^\d\d:\d\d$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tuesday")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d\d:\d\d$")]
		public string Tuesday { get; set; }
		
		/// <summary>
		/// Pattern: ^\d\d:\d\d$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wednesday")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d\d:\d\d$")]
		public string Wednesday { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmployeeResponse : Response
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmployeesResponse : Response
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorResponseError Error { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public bool Success { get; set; }
	}
	
	public class ErrorResponseError
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NewAttendancePeriodRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="attendances")]
		public NewAttendancePeriodRequestAttendances[] NewAttendancePeriodRequestAttendances { get; set; }
	}
	
	public class NewAttendancePeriodRequestAttendances
	{
		
		/// <summary>
		/// Break in minutes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="break")]
		public int Break { get; set; }
		
		/// <summary>
		/// Optional comment
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Attendance date as YYYY-MM-DD
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.DateOnly Date { get; set; }
		
		/// <summary>
		/// Employee identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="employee")]
		public int Employee { get; set; }
		
		/// <summary>
		/// End time as HH:MM
		/// Required
		/// Pattern: ^\d\d:\d\d$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d\d:\d\d$")]
		public string End_time { get; set; }
		
		/// <summary>
		/// Start time as HH:MM
		/// Required
		/// Pattern: ^\d\d:\d\d$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d\d:\d\d$")]
		public string Start_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NewAttendancePeriodResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Response
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeOffTypeResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public TimeOffTypeResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Time-off type resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AbsenceEntitlementValueType Type { get; set; }
	}
	
	public class TimeOffTypeResourceAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAttendancePeriodRequest
	{
		
		/// <summary>
		/// Break in minutes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="break")]
		public System.Nullable<System.Int32> Break { get; set; }
		
		/// <summary>
		/// Optional comment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Attendance date as YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// End time as HH:MM
		/// Pattern: ^\d\d:\d\d$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d\d:\d\d$")]
		public string End_time { get; set; }
		
		/// <summary>
		/// Start time as HH:MM
		/// Pattern: ^\d\d:\d\d$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d\d:\d\d$")]
		public string Start_time { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// This endpoint is responsible for fetching attendance data for the company employees. It is possible to paginate results, filter by period, the date and/or time it was updated, and/or specific employees. The result will contain a list of attendance periods, structured as defined here.
		/// CompanyAttendancesGetByStart_dateAndEnd_dateAndUpdated_fromAndUpdated_toAndEmployeesAndLimitAndOffset company/attendances
		/// </summary>
		/// <param name="start_date">First day of the period to be queried. It is inclusive, so the day specified as start_date will also be considered on the results</param>
		/// <param name="end_date">Last day of the period to be queried. It is inclusive, so the day specified as end_date will also be considered on the results.</param>
		/// <param name="updated_from">Datetime from when the queried periods have been updated. Same format as updated_at. It is inclusive, so the day specified as updated_from will also be considered on the results. Can be just the date, or the date and the time, with or without the timezone.</param>
		/// <param name="updated_to">Datetime until when the queried periods have been updated. Same format as updated_at. It is inclusive, so the day specified as updated_to will also be considered on the results. Can be just the date, or the date and the time, with or without the timezone.</param>
		/// <param name="employees">A list of Personio employee identifiers to filter the results. Only those employees specified here will be returned.</param>
		/// <param name="limit">Pagination attribute to limit how many attendances will be returned per page</param>
		/// <param name="offset">Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned.</param>
		public async Task<AttendancePeriodsResponse> CompanyAttendancesGetByStart_dateAndEnd_dateAndUpdated_fromAndUpdated_toAndEmployeesAndLimitAndOffsetAsync(System.DateOnly start_date, System.DateOnly end_date, string updated_from, string updated_to, int[] employees, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "company/attendances?start_date="+start_date+"&end_date="+end_date+"&updated_from=" + (updated_from==null? "" : System.Uri.EscapeDataString(updated_from))+"&updated_to=" + (updated_to==null? "" : System.Uri.EscapeDataString(updated_to))+"&"+string.Join("&", employees.Select(z => $"employees={z}"))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AttendancePeriodsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This endpoint is responsible for adding attendance data for the company employees. It is possible to add attendances for one or many employees at the same time. The payload sent on the request should be a list of attendance periods, in the form of an array containing attendance period objects.
		/// CompanyAttendancesPost company/attendances
		/// </summary>
		/// <param name="requestBody">List of attendance periods to create</param>
		/// <returns>The attendance periods were created successfully</returns>
		public async Task<NewAttendancePeriodResponse> CompanyAttendancesPostAsync(NewAttendancePeriodRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "company/attendances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NewAttendancePeriodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This endpoint is responsible for deleting attendance data for the company employees.
		/// CompanyAttendances_idDelete company/attendances/{id}
		/// </summary>
		/// <param name="id">ID of the attendance period to delete</param>
		/// <returns>Success response</returns>
		public async Task<Response> CompanyAttendances_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "company/attendances/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Response>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This endpoint is responsible for updating attendance data for the company employees. Attributes are not required and if not specified, the current value will be used. It is not possible to change the employee id.
		/// CompanyAttendances_idPatch company/attendances/{id}
		/// </summary>
		/// <param name="id">ID of the attendance period to update</param>
		/// <param name="requestBody">attendance period data to update</param>
		/// <returns>Success response</returns>
		public async Task<Response> CompanyAttendances_idPatchAsync(int id, UpdateAttendancePeriodRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "company/attendances/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Response>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Employees
		/// CompanyEmployeesGet company/employees
		/// </summary>
		public async Task<EmployeesResponse> CompanyEmployeesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "company/employees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EmployeesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show employee by ID
		/// CompanyEmployees_employee_idGet company/employees/{employee_id}
		/// </summary>
		/// <param name="employee_id">Numeric `id` of the employee</param>
		public async Task<EmployeeResponse> CompanyEmployees_employee_idGetAsync(int employee_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "company/employees/"+employee_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EmployeeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show employee profile picture
		/// CompanyEmployees_employee_idProfile_picture_widthGet company/employees/{employee_id}/profile-picture/{width}
		/// </summary>
		/// <param name="employee_id">Numeric `id` of the employee</param>
		/// <param name="width">Width of the image. Default 75x75</param>
		/// <returns>OK</returns>
		public async Task CompanyEmployees_employee_idProfile_picture_widthGetAsync(int employee_id, int width, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "company/employees/"+employee_id+"/profile-picture/"+width;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides a list of available time-off types, for example 'Paid vacation', 'Parental leave' or 'Home office'
		/// CompanyTime_off_typesGetByLimitAndOffset company/time-off-types
		/// </summary>
		/// <param name="limit">Pagination attribute to limit how many records will be returned per page</param>
		/// <param name="offset">Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned.</param>
		public async Task<CompanyTime_off_typesGetByLimitAndOffsetReturn> CompanyTime_off_typesGetByLimitAndOffsetAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "company/time-off-types?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompanyTime_off_typesGetByLimitAndOffsetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This endpoint is responsible for fetching absence data for the company employees. It is possible to paginate results, filter by period and/or specific employees. The result will contain a list of absence periods, structured as defined here.
		/// CompanyTime_offsGetByStart_dateAndEnd_dateAndUpdated_fromAndUpdated_toAndEmployeesAndLimitAndOffset company/time-offs
		/// </summary>
		/// <param name="start_date">First day of the period to be queried. It is inclusive, so the day specified as start_date will also be considered on the results</param>
		/// <param name="end_date">Last day of the period to be queried. It is inclusive, so the day specified as end_date will also be considered on the results.</param>
		/// <param name="updated_from">Datetime from when the queried periods have been updated. It is inclusive, so the day specified as updated_from will also be considered on the results.</param>
		/// <param name="updated_to">Datetime until when the queried periods have been updated. It is inclusive, so the day specified as updated_to will also be considered on the results.</param>
		/// <param name="employees">A list of Personio employee identifiers to filter the results. Only those employees specified here will be returned.</param>
		/// <param name="limit">Pagination attribute to limit how many attendances will be returned per page</param>
		/// <param name="offset">Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned.</param>
		public async Task<AbsencePeriodsResponse> CompanyTime_offsGetByStart_dateAndEnd_dateAndUpdated_fromAndUpdated_toAndEmployeesAndLimitAndOffsetAsync(System.DateOnly start_date, System.DateOnly end_date, string updated_from, string updated_to, int[] employees, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "company/time-offs?start_date="+start_date+"&end_date="+end_date+"&updated_from=" + (updated_from==null? "" : System.Uri.EscapeDataString(updated_from))+"&updated_to=" + (updated_to==null? "" : System.Uri.EscapeDataString(updated_to))+"&"+string.Join("&", employees.Select(z => $"employees={z}"))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AbsencePeriodsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This endpoint is responsible for adding absence data for the company employees.
		/// CompanyTime_offsPost company/time-offs
		/// </summary>
		/// <param name="requestBody">Absence period to create</param>
		public async Task CompanyTime_offsPostAsync(CreateTimeOffPeriodRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "company/time-offs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This endpoint is responsible for deleting absence period data for the company employees.
		/// CompanyTime_offs_idDelete company/time-offs/{id}
		/// </summary>
		/// <param name="id">ID of the absence period to delete</param>
		/// <returns>Success response</returns>
		public async Task<Response> CompanyTime_offs_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "company/time-offs/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Response>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Absence Period
		/// CompanyTime_offs_idGet company/time-offs/{id}
		/// </summary>
		/// <param name="id">Numeric `id` of the absence period</param>
		public async Task<AbsencePeriodResponse> CompanyTime_offs_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "company/time-offs/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AbsencePeriodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CompanyTime_off_typesGetByLimitAndOffsetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TimeOffTypeResource[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
