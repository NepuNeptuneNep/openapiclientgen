//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents locales that are available for a web property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleSearchIdeahubV1alphaAvailableLocale
	{
		
		/// <summary>
		/// A string in BCP 47 format, without a resource prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// A string in BCP 47 format, prefixed with the platform and property name, and "locales/". Format: platforms/{platform}/properties/{property}/locales/{locale}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A single Idea that we want to show the end user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleSearchIdeahubV1alphaIdea
	{
		
		/// <summary>
		/// Unique identifier for the idea. Format: ideas/{ideaId}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ideaâ€™s text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The Topics that match the idea.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topics")]
		public GoogleSearchIdeahubV1alphaTopic[] Topics { get; set; }
	}
	
	/// <summary>
	/// Represents a Topic umbrella for a list of questions that a Creator may want to respond to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleSearchIdeahubV1alphaTopic
	{
		
		/// <summary>
		/// String displayed to the creator indicating the name of the Topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The mID of the topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mid")]
		public string Mid { get; set; }
		
		/// <summary>
		/// Unique identifier for the topic. Format: topics/{topic}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An idea activity entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleSearchIdeahubV1alphaIdeaActivity
	{
		
		/// <summary>
		/// The Idea IDs for this entry. If empty, topics should be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ideas")]
		public string[] Ideas { get; set; }
		
		/// <summary>
		/// Unique identifier for the idea activity. The name is ignored when creating an idea activity. Format: platforms/{platform}/properties/{property}/ideaActivities/{idea_activity}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Topic IDs for this entry. If empty, ideas should be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topics")]
		public string[] Topics { get; set; }
		
		/// <summary>
		/// The type of activity performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GoogleSearchIdeahubV1alphaIdeaActivityType> Type { get; set; }
		
		/// <summary>
		/// The uri the activity relates to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleSearchIdeahubV1alphaIdeaActivityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST_DRAFTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST_PUBLISHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST_DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST_UNPUBLISHED = 4,
	}
	
	/// <summary>
	/// Represents idea state specific to a web property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleSearchIdeahubV1alphaIdeaState
	{
		
		/// <summary>
		/// Whether the idea is dismissed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dismissed")]
		public System.Nullable<System.Boolean> Dismissed { get; set; }
		
		/// <summary>
		/// Unique identifier for the idea state. Format: platforms/{platform}/properties/{property}/ideaStates/{idea_state}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether the idea is saved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saved")]
		public System.Nullable<System.Boolean> Saved { get; set; }
	}
	
	/// <summary>
	/// Response for whether ideas are available for a given web property on a platform, for the currently logged-in user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleSearchIdeahubV1alphaListAvailableLocalesResponse
	{
		
		/// <summary>
		/// Locales for which ideas are available for the given Creator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableLocales")]
		public GoogleSearchIdeahubV1alphaAvailableLocale[] AvailableLocales { get; set; }
		
		/// <summary>
		/// A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleSearchIdeahubV1alphaListIdeasResponse
	{
		
		/// <summary>
		/// Results for the ListIdeasRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ideas")]
		public GoogleSearchIdeahubV1alphaIdea[] Ideas { get; set; }
		
		/// <summary>
		/// Used to fetch the next page in a subsequent request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Represents topic state specific to a web property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleSearchIdeahubV1alphaTopicState
	{
		
		/// <summary>
		/// Whether the topic is dismissed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dismissed")]
		public System.Nullable<System.Boolean> Dismissed { get; set; }
		
		/// <summary>
		/// Unique identifier for the topic state. Format: platforms/{platform}/properties/{property}/topicStates/{topic_state}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether the topic is saved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saved")]
		public System.Nullable<System.Boolean> Saved { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List ideas for a given Creator and filter and sort options.
		/// Ideahub_ideas_list v1alpha/ideas
		/// </summary>
		/// <param name="filter">Allows filtering. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions are implicitly combined, as if the `AND` operator was always used. The `OR` operator is currently unsupported. * Supported functions: - `saved(bool)`: If set to true, fetches only saved ideas. If set to false, fetches all except saved ideas. Can't be simultaneously used with `dismissed(bool)`. - `dismissed(bool)`: If set to true, fetches only dismissed ideas. Can't be simultaneously used with `saved(bool)`. The `false` value is currently unsupported. Examples: * `saved(true)` * `saved(false)` * `dismissed(true)` The length of this field should be no more than 500 characters.</param>
		/// <param name="orderBy">Order semantics described below.</param>
		/// <param name="pageSize">The maximum number of ideas per page. If unspecified, at most 10 ideas will be returned. The maximum value is 2000; values above 2000 will be coerced to 2000.</param>
		/// <param name="pageToken">Used to fetch next page.</param>
		/// <param name="parent">If defined, specifies the creator for which to filter by. Format: publishers/{publisher}/properties/{property}</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleSearchIdeahubV1alphaListIdeasResponse> Ideahub_ideas_listAsync(string filter, string orderBy, int pageSize, string pageToken, string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/ideas?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleSearchIdeahubV1alphaListIdeasResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a topic state resource.
		/// Ideahub_platforms_properties_topicStates_patch v1alpha/{name}
		/// </summary>
		/// <param name="name">Unique identifier for the topic state. Format: platforms/{platform}/properties/{property}/topicStates/{topic_state}</param>
		/// <param name="updateMask">The list of fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleSearchIdeahubV1alphaTopicState> Ideahub_platforms_properties_topicStates_patchAsync(string name, string updateMask, GoogleSearchIdeahubV1alphaTopicState requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleSearchIdeahubV1alphaTopicState>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an idea activity entry.
		/// Ideahub_platforms_properties_ideaActivities_create v1alpha/{parent}/ideaActivities
		/// </summary>
		/// <param name="parent">Required. The parent resource where this idea activity will be created. Format: platforms/{platform}/property/{property}</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleSearchIdeahubV1alphaIdeaActivity> Ideahub_platforms_properties_ideaActivities_createAsync(string parent, GoogleSearchIdeahubV1alphaIdeaActivity requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/ideaActivities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleSearchIdeahubV1alphaIdeaActivity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ideas for a given Creator and filter and sort options.
		/// Ideahub_platforms_properties_ideas_list v1alpha/{parent}/ideas
		/// </summary>
		/// <param name="parent">If defined, specifies the creator for which to filter by. Format: publishers/{publisher}/properties/{property}</param>
		/// <param name="filter">Allows filtering. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions are implicitly combined, as if the `AND` operator was always used. The `OR` operator is currently unsupported. * Supported functions: - `saved(bool)`: If set to true, fetches only saved ideas. If set to false, fetches all except saved ideas. Can't be simultaneously used with `dismissed(bool)`. - `dismissed(bool)`: If set to true, fetches only dismissed ideas. Can't be simultaneously used with `saved(bool)`. The `false` value is currently unsupported. Examples: * `saved(true)` * `saved(false)` * `dismissed(true)` The length of this field should be no more than 500 characters.</param>
		/// <param name="orderBy">Order semantics described below.</param>
		/// <param name="pageSize">The maximum number of ideas per page. If unspecified, at most 10 ideas will be returned. The maximum value is 2000; values above 2000 will be coerced to 2000.</param>
		/// <param name="pageToken">Used to fetch next page.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleSearchIdeahubV1alphaListIdeasResponse> Ideahub_platforms_properties_ideas_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/ideas&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleSearchIdeahubV1alphaListIdeasResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns which locales ideas are available in for a given Creator.
		/// Ideahub_platforms_properties_locales_list v1alpha/{parent}/locales
		/// </summary>
		/// <param name="parent">Required. The web property to check idea availability for Format: platforms/{platform}/property/{property}</param>
		/// <param name="pageSize">The maximum number of locales to return. The service may return fewer than this value. If unspecified, at most 100 locales will be returned. The maximum value is 100; values above 100 will be coerced to 100.</param>
		/// <param name="pageToken">A page token, received from a previous `ListAvailableLocales` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAvailableLocales` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleSearchIdeahubV1alphaListAvailableLocalesResponse> Ideahub_platforms_properties_locales_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/locales&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleSearchIdeahubV1alphaListAvailableLocalesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
