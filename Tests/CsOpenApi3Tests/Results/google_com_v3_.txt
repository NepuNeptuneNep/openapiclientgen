//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An account link. Represents the link between a Google Ads customer and a Hotel Ads (Hotel Center) account. An account link defines the set of hotels under the Hotel Center account that is linked to the Google Ads customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountLink
	{
		
		/// <summary>
		/// Defines whether all properties or a subset of properties in the Hotel Center account can be managed with the linked Google Ads account. If a subset, the specific properties are specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountLinkTarget")]
		public AccountLinkTarget AccountLinkTarget { get; set; }
		
		/// <summary>
		/// Required for CREATE requests. The value representing the Google Ads customer ID in the format `customers/{google_ads_customer_id}`. For example: `customers/0123456789`. Note that the `googleAdsCustomerName` field is not returned in responses to GET requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleAdsCustomerName")]
		public string GoogleAdsCustomerName { get; set; }
		
		/// <summary>
		/// The resource name for the account link in the format `accounts/{account_id}/accountLinks/{account_link_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The current status of the account link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<AccountLinkStatus> Status { get; set; }
	}
	
	/// <summary>
	/// Defines whether all properties or a subset of properties in the Hotel Center account can be managed with the linked Google Ads account. If a subset, the specific properties are specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountLinkTarget
	{
		
		/// <summary>
		/// True if all properties under the Hotel Center account are made available to the account link. The default is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allHotels")]
		public System.Nullable<System.Boolean> AllHotels { get; set; }
		
		/// <summary>
		/// The properties in the Hotel Center account that can be managed with the Google Ads account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotelList")]
		public HotelList HotelList { get; set; }
	}
	
	/// <summary>
	/// The properties in the Hotel Center account that can be managed with the Google Ads account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HotelList
	{
		
		/// <summary>
		/// Hotel IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerHotelIds")]
		public string[] PartnerHotelIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountLinkStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_LINK_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_LINK_STATUS_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUESTED_FROM_HOTEL_CENTER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUESTED_FROM_GOOGLE_ADS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 4,
	}
	
	/// <summary>
	/// Brand-level icon and display name configuration. Once approved, the icon and display name appear in the search results for properties that the partner has assigned to this brand.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Brand
	{
		
		/// <summary>
		/// Output only. The brand's active display names in all provided languages, only present if the display name is approved for all provided languages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeDisplayNames")]
		public LocalizedText[] ActiveDisplayNames { get; set; }
		
		/// <summary>
		/// Output only. The brand's active [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource). The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`. An active icon is one that has been approved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeIcon")]
		public string ActiveIcon { get; set; }
		
		/// <summary>
		/// Output only. URL of the active icon, only present when the icon has been approved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeIconUri")]
		public string ActiveIconUri { get; set; }
		
		/// <summary>
		/// Output only. Display name's disapproval reason. Only applies to display names with the review state 'REJECTED'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayNameDisapprovalReason")]
		public DisplayNameDisapprovalReason[] DisplayNameDisapprovalReason { get; set; }
		
		/// <summary>
		/// Output only. The brand's display names review state, which applies to all display name language entries. If there are both submitted and active display names, this refers to the submitted display names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayNameState")]
		public System.Nullable<BrandDisplayNameState> DisplayNameState { get; set; }
		
		/// <summary>
		/// Input only. The name Google displays for the brand's properties. Setting the display names is only necessary if you want to override the landing page display name or account-level display name for the brand. Google reviews the display names for appropriate content. When there are multiple languages, Google will only show the display names once Google approves all the languages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayNames")]
		public LocalizedText[] DisplayNames { get; set; }
		
		/// <summary>
		/// Input only. The brand's [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource) identifying the brand's icon. The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		/// <summary>
		/// Output only. The icon's disapproval reason(s). Only applies to submitted icons with `REJECTED` state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconDisapprovalReasons")]
		public string[] IconDisapprovalReasons { get; set; }
		
		/// <summary>
		/// Output only. The brand's icon's review state. If there are both submitted and active icons, this refers to the submitted icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconState")]
		public BrandDisplayNameState IconState { get; set; }
		
		/// <summary>
		/// Output only. The resource name for the brand in the format `accounts/{account_id}/brands/{brand_id}`. The `brand_id` corresponds to the partner's brand identifier used for landing page matching and the property-level brand identifier. A default brand is applied to properties that do not have a brand. The `brand_id` of the default brand is `NO_BRAND_ID`. It can be fetched and updated like any configured brand.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The number of properties with the corresponding brand ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyCount")]
		public string PropertyCount { get; set; }
		
		/// <summary>
		/// Output only. The brand's submitted display names in all provided languages, only present if the display name is new or rejected for any language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submittedDisplayNames")]
		public LocalizedText[] SubmittedDisplayNames { get; set; }
		
		/// <summary>
		/// Output only. The brand's submitted [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource). The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`. A submitted icon is one that is new or rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submittedIcon")]
		public string SubmittedIcon { get; set; }
	}
	
	/// <summary>
	/// Localized variant of a text in a particular language.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalizedText
	{
		
		/// <summary>
		/// The text's BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Localized string in the language corresponding to `language_code' below.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Disapproval reason of the display name in a specific language.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisplayNameDisapprovalReason
	{
		
		/// <summary>
		/// Disapproval reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disapprovalReason")]
		public System.Nullable<DisplayNameDisapprovalReasonDisapprovalReason> DisapprovalReason { get; set; }
		
		/// <summary>
		/// Language of the disapproved display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DisplayNameDisapprovalReasonDisapprovalReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISAPPROVAL_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUNCTUATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MARKETING_LANGUAGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANDING_PAGE_NOT_MATCHED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BrandDisplayNameState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_STATE_NEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 3,
	}
	
	/// <summary>
	/// Response message for ReconciliationReportService.CreateReconciliationReport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateReconciliationReportResponse
	{
		
		/// <summary>
		/// Issues that were encountered when validating the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public ReconciliationReportValidationIssue[] Issues { get; set; }
		
		/// <summary>
		/// Reconciliation report (Hotel Ads only). Covers the Reconciliation Reports functionality in pre-v3.0 API versions. Lets you see the status, validate, and upload your Commissions reconciliation reports. This only applies if you are in the Google Hotel Ads Commissions Program (GHACP). For more information about working with reconciliation reports in Hotel Center, refer to [Reconciliation reports](//support.google.com/hotelprices/answer/7019060#sending).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciliationReport")]
		public ReconciliationReport ReconciliationReport { get; set; }
		
		/// <summary>
		/// The number of commission records that were successfully saved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successfulRecordCount")]
		public System.Nullable<System.Int32> SuccessfulRecordCount { get; set; }
	}
	
	/// <summary>
	/// Represents an issue encountered when validating a reconciliation report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReconciliationReportValidationIssue
	{
		
		/// <summary>
		/// Text description of the issue, typically including what was seen and why it was invalid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the invalid field. If no field name is given, this issue applies to the whole line (or file).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldName")]
		public string FieldName { get; set; }
		
		/// <summary>
		/// The line number on which the issue was detected. If this field is 0, the issue applies to the whole file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNum")]
		public System.Nullable<System.Int32> LineNum { get; set; }
	}
	
	/// <summary>
	/// Reconciliation report (Hotel Ads only). Covers the Reconciliation Reports functionality in pre-v3.0 API versions. Lets you see the status, validate, and upload your Commissions reconciliation reports. This only applies if you are in the Google Hotel Ads Commissions Program (GHACP). For more information about working with reconciliation reports in Hotel Center, refer to [Reconciliation reports](//support.google.com/hotelprices/answer/7019060#sending).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReconciliationReport
	{
		
		/// <summary>
		/// Required. The contents of the commission report. Report contents must conform to the requirements specified in [Reconciliation reports] (//support.google.com/hotelprices/answer/7019060#creating).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
		
		/// <summary>
		/// Required. Desired filename of the reconciliation report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// Resource name in the format `accounts/{account_id}/reconciliationReports/{datetime}~{filename}`. The value for `{datetime}` must be from 0001-01-01T00:00:00 to 9999-12-31T23:59:59 inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Details on a data issue in the listing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataIssueDetail
	{
		
		/// <summary>
		/// The severity of the data issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataIssueSeverity")]
		public System.Nullable<DataIssueDetailDataIssueSeverity> DataIssueSeverity { get; set; }
		
		/// <summary>
		/// The type of the data issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataIssueType")]
		public System.Nullable<DataIssueDetailDataIssueType> DataIssueType { get; set; }
		
		/// <summary>
		/// Whether or not the issue is self-resolving. If true, the issue is expected to resolve itself. If false or not set, action is needed to resolve the issue. Refer to documentation on the data issue’s type for further information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSelfResolving")]
		public System.Nullable<System.Boolean> IsSelfResolving { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataIssueDetailDataIssueSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_ISSUE_SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataIssueDetailDataIssueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEED_DATA_ISSUE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEED_DATA_ISSUE_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_DATA_ISSUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_ADDRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_PHYSICAL_STREET_ADDRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_STREET_NAME = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_STREET_NUMBER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_ADDRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_COUNTRY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_POSTAL_CODE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_POSTAL_CODE_SUFFIX = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNEXPECTED_POSTAL_CODE_SUFFIX = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNEXPECTED_POSTAL_CODE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_AMENITIES = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_EMAIL_ADDRESS = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_LATLONG = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATLONG_INCONSISTENT_WITH_ADDRESS = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_LATLONG = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COULD_NOT_GEOCODE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_HOTEL_NAME = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOTEL_NAME_EMPTY = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_HOTEL_NAME = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOTEL_NAME_TOO_LONG = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARSE_ERROR_IN_XML = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNEXPECTED_ATTRIBUTE_IN_XML = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_PHONE_NUMBER = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_PHONE_NUMBER = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_VOICE_PHONE_NUMBER = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_PHONE_NUMBER_FORMAT = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_PHONE_NUMBER = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_PHONE_NUMBER_COUNTRY_CODE = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE_NUMBER_TOO_LONG = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE_NUMBER_TOO_SHORT = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_WEBSITE_URL = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADWORDS_ATTRIBUTE_TOO_LONG = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND_NOT_ALLOWED = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLAGGED_DUE_TO_SUSPICIOUS_METADATA = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_ENOUGH_IMAGES_PROVIDED = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE_PROCESSING_IN_PROGRESS = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANNOT_FETCH_IMAGES = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPATIBLE_IMAGE_SIZE_OR_LOW_QUALITY = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_LANG_IN_RAW_LISTING = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS_HOTEL = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_REQ_ATTR = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_NAME = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_LANG_IN_NAME = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VR_NAME_TOO_LONG = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_PROPERTY = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_VR_ACCOMMODATION_TYPE_BASED_ON_LISTING_NAME = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND_NAME_TOO_LONG = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_BRAND_NAME = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_REVIEW_RATING = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_CHECKIN_FORMAT = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_CHECKOUT_FORMAT = 53,
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// **DEPRECATED:** Use `PropertyPerformanceResult` with `PropertyPerformanceReportService` instead. Represents a result from querying for free booking link stats for an account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FreeBookingLinksResult
	{
		
		/// <summary>
		/// The total number of clicks that were recorded for this result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickCount")]
		public string ClickCount { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// The user’s device type. Only present if `deviceType` is specified in `aggregateBy` in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceType")]
		public System.Nullable<FreeBookingLinksResultDeviceType> DeviceType { get; set; }
		
		/// <summary>
		/// Partner's hotel name. Only present if `partnerHotelDisplayName` is specified in `aggregateBy` in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerHotelDisplayName")]
		public string PartnerHotelDisplayName { get; set; }
		
		/// <summary>
		/// Partner's hotel ID. Only present if `partnerHotelId` is specified in `aggregateBy` in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerHotelId")]
		public string PartnerHotelId { get; set; }
		
		/// <summary>
		/// ISO 3116 region code of the country/region of the user. Only present if `userRegionCode` is specified in `aggregateBy` in the request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRegionCode")]
		public string UserRegionCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FreeBookingLinksResultDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESKTOP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLET = 4,
	}
	
	/// <summary>
	/// Hotel price for a given itinerary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HotelPricePerItinerary
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkinDate")]
		public Date CheckinDate { get; set; }
		
		/// <summary>
		/// Currency for `price`, `taxes`, and `fees`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Fees for this itinerary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fees")]
		public System.Nullable<System.Single> Fees { get; set; }
		
		/// <summary>
		/// Number of nights for the itinerary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lengthOfStayDays")]
		public System.Nullable<System.Int32> LengthOfStayDays { get; set; }
		
		/// <summary>
		/// Hotel price for this itinerary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Single> Price { get; set; }
		
		/// <summary>
		/// Taxes for this itinerary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public System.Nullable<System.Single> Taxes { get; set; }
		
		/// <summary>
		/// Update timestamp for this hotel price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// A hotel view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HotelView
	{
		
		/// <summary>
		/// The type and severity of each data quality issue in the feed. If your feed contains data issues, update the feed and resubmit it. For more information, refer to this article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataIssueDetail")]
		public DataIssueDetail[] DataIssueDetail { get; set; }
		
		/// <summary>
		/// DEPRECATED. Indicates that the hotel has data quality issues. The value of this field indicates the type of error. This has been replaced with the data_issue_detail field. If your feed contains data issues, update the feed and resubmit it. For more information, refer to this article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataIssues")]
		public DataIssueDetailDataIssueType[] DataIssues { get; set; }
		
		/// <summary>
		/// The Google Maps identifier for the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleClusterId")]
		public string GoogleClusterId { get; set; }
		
		/// <summary>
		/// Google's hotel name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleHotelDisplayName")]
		public string GoogleHotelDisplayName { get; set; }
		
		/// <summary>
		/// Google's canonical ID for the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleHotelId")]
		public string GoogleHotelId { get; set; }
		
		/// <summary>
		/// Optional. Whether the hotel appears in Google's hotel booking links. Declaration & behavior to get detection of presence/absence in JSON conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveOnGoogle")]
		public System.Nullable<System.Boolean> LiveOnGoogle { get; set; }
		
		/// <summary>
		/// Current matching status of the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchStatus")]
		public System.Nullable<HotelViewMatchStatus> MatchStatus { get; set; }
		
		/// <summary>
		/// Other hotels with which the hotel is overclustered. If your feed contains overclustered hotels, update the feed and resubmit it. To do this, you can use the manual match tool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overclusteredPartnerHotelIds")]
		public string[] OverclusteredPartnerHotelIds { get; set; }
		
		/// <summary>
		/// Partner's hotel name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerHotelDisplayName")]
		public string PartnerHotelDisplayName { get; set; }
		
		/// <summary>
		/// The unique ID of the hotel that the partner provides in their Hotel List Feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerHotelId")]
		public string PartnerHotelId { get; set; }
		
		/// <summary>
		/// The primary hotel in the overclustered set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryOverclusteredPartnerHotelId")]
		public string PrimaryOverclusteredPartnerHotelId { get; set; }
		
		/// <summary>
		/// Optional. A URL to the property on Google. Only available for properties that are listed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyDetails")]
		public string PropertyDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HotelViewMatchStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATCH_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATCH_STATUS_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_MATCHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATCHED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAP_OVERLAP = 4,
	}
	
	/// <summary>
	/// Information about a partner's icon.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Icon
	{
		
		/// <summary>
		/// Output only. The icon's disapproval reason(s). Only applies to icons with `REJECTED` state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disapprovalReasons")]
		public string[] DisapprovalReasons { get; set; }
		
		/// <summary>
		/// Output only. The approved icon's Google-hosted URI. Only applies to icons with `APPROVED` state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUri")]
		public string IconUri { get; set; }
		
		/// <summary>
		/// Required. Input only. The icon contents, which must be in PNG format, or convertible to PNG.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageData")]
		public string ImageData { get; set; }
		
		/// <summary>
		/// Required. Output only. The resource name for the icon in the format `accounts/{account_id}/icons/{icon_id}`. Google generates the `icon_id` during the `create` operation. Use the `icon_id` to associate the icon with a brand using the [accounts.brands](/hotels/hotel-prices/api-reference/rest/v3/accounts.brands#resource:-brand) API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. Value for tracking the icon. It could be the primary key to your icon in your system, or the icon's filename. Google does not use this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// Output only. The icon's current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<IconState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IconState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 3,
	}
	
	/// <summary>
	/// A single image in a VR Listing. Title and gallery URL are stored per locale. NEXT ID: 4
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Image
	{
		
		/// <summary>
		/// URL that is deeplink to the image in a gallery (or a webpage).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="galleryUri")]
		public LocalizedText[] GalleryUri { get; set; }
		
		/// <summary>
		/// Title of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public LocalizedText[] Title { get; set; }
		
		/// <summary>
		/// URL that points to the binary image content directly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Key of a result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Key
	{
		
		/// <summary>
		/// The number of days in advance the user wants to book the itinerary. If `advanceBookingWindow` is not a value of the `aggregateBy` parameter in the request call, then the `advanceBookingWindow` field is not returned in the `Key`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advanceBookingWindow")]
		public System.Nullable<System.Int32> AdvanceBookingWindow { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkinDate")]
		public Date CheckinDate { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// The user’s device type. If `deviceType` is not a value of the `aggregateBy` parameter in the request call, then the `deviceType` field is not returned in the `Key`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceType")]
		public FreeBookingLinksResultDeviceType DeviceType { get; set; }
		
		/// <summary>
		/// CLDR region code of the country/region of the hotel. If `hotelRegionCode` is not a value of the `aggregateBy` parameter in the request call, then the `hotelRegionCode` field is not returned in the `Key`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotelRegionCode")]
		public string HotelRegionCode { get; set; }
		
		/// <summary>
		/// The number of nights for the itinerary. If `lengthOfStayDays` is not a value of the `aggregateBy` parameter in the request call, then the `lengthOfStayDays` field is not returned in the `Key`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lengthOfStayDays")]
		public System.Nullable<System.Int32> LengthOfStayDays { get; set; }
		
		/// <summary>
		/// The total occupancy of the itinerary. If `occupancy` is not a value of the `aggregateBy` parameter in the request call, then the `occupancy` field is not returned in the `Key`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occupancy")]
		public System.Nullable<System.Int32> Occupancy { get; set; }
		
		/// <summary>
		/// Partner's hotel ID. If `partnerHotelId` is not a value of the `aggregateBy` parameter in the request call, then the `partnerHotelId` field is not returned in the `Key`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerHotelId")]
		public string PartnerHotelId { get; set; }
		
		/// <summary>
		/// ISO 3116 region code of the country/region of the user. If `userRegionCode` is not a value of the `aggregateBy` parameter in the request call, then the `userRegionCode` field is not returned in the `Key`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRegionCode")]
		public string UserRegionCode { get; set; }
	}
	
	/// <summary>
	/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LatLng
	{
		
		/// <summary>
		/// The latitude in degrees. It must be in the range [-90.0, +90.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The longitude in degrees. It must be in the range [-180.0, +180.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// Response message for AccountLinkService.ListAccountLinks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAccountLinksResponse
	{
		
		/// <summary>
		/// A list of all account links associated with the Hotel Center account being queried.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountLinks")]
		public AccountLink[] AccountLinks { get; set; }
	}
	
	/// <summary>
	/// Response message for BrandService.ListBrands.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBrandsResponse
	{
		
		/// <summary>
		/// A list of all brands associated with the Hotel Center account being queried.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brands")]
		public Brand[] Brands { get; set; }
	}
	
	/// <summary>
	/// Response message for HotelViewService.ListHotelViews.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListHotelViewsResponse
	{
		
		/// <summary>
		/// The list of rows that match the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotelViews")]
		public HotelView[] HotelViews { get; set; }
		
		/// <summary>
		/// Pagination token used to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for IconService.ListIcons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIconsResponse
	{
		
		/// <summary>
		/// A list of all icons associated with the queried partner account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icons")]
		public Icon[] Icons { get; set; }
	}
	
	/// <summary>
	/// Response message for PriceAccuracyViewService.ListPriceAccuracyViews.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPriceAccuracyViewsResponse
	{
		
		/// <summary>
		/// The list of rows that match the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceAccuracyViews")]
		public PriceAccuracyView[] PriceAccuracyViews { get; set; }
	}
	
	/// <summary>
	/// A price accuracy view. Covers the price accuracy reports functionality in pre-v3.0 API versions. For more information, refer to [Price Accuracy report](https://support.google.com/hotelprices/answer/6318506).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PriceAccuracyView
	{
		
		/// <summary>
		/// Resource name should be in the format `accounts/{account_id}/priceAccuracyViews/{report_date}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The list of rows that match the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public PriceAccuracyRow[] Results { get; set; }
	}
	
	/// <summary>
	/// A price accuracy row.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PriceAccuracyRow
	{
		
		/// <summary>
		/// The number of adults in the occupancy details of the validation query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adultOccupancy")]
		public System.Nullable<System.Int32> AdultOccupancy { get; set; }
		
		/// <summary>
		/// True if this row affects the placement of a price. This field has been renamed to “Affects placement” in Hotel Center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectsScore")]
		public System.Nullable<System.Boolean> AffectsScore { get; set; }
		
		/// <summary>
		/// A price record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cachedPriceRecord")]
		public PriceRecord CachedPriceRecord { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkinDate")]
		public Date CheckinDate { get; set; }
		
		/// <summary>
		/// The number of children in the occupancy details of the validation query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childOccupancy")]
		public System.Nullable<System.Int32> ChildOccupancy { get; set; }
		
		/// <summary>
		/// Time at which an incorrect price is updated to a correct price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correctionTime")]
		public string CorrectionTime { get; set; }
		
		/// <summary>
		/// The user's device type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceType")]
		public FreeBookingLinksResultDeviceType DeviceType { get; set; }
		
		/// <summary>
		/// A price record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fetchedPriceRecord")]
		public PriceRecord FetchedPriceRecord { get; set; }
		
		/// <summary>
		/// The domain of the final page from which prices are read.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalDomain")]
		public string FinalDomain { get; set; }
		
		/// <summary>
		/// Partner-defined hotel ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotel")]
		public string Hotel { get; set; }
		
		/// <summary>
		/// The country of the hotel (based on address).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotelCountryCode")]
		public string HotelCountryCode { get; set; }
		
		/// <summary>
		/// Length of stay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lengthOfStayDays")]
		public System.Nullable<System.Int32> LengthOfStayDays { get; set; }
		
		/// <summary>
		/// The reason why the fetched price didn't match the cached price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mismatchReason")]
		public System.Nullable<PriceAccuracyRowMismatchReason> MismatchReason { get; set; }
		
		/// <summary>
		/// The rate rule of the advertised price for non-public rates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateRuleId")]
		public string RateRuleId { get; set; }
		
		/// <summary>
		/// Source of the price accuracy signal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signalSource")]
		public System.Nullable<PriceAccuracyRowSignalSource> SignalSource { get; set; }
		
		/// <summary>
		/// Initial URL visited on the partner website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The user's region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRegionCode")]
		public string UserRegionCode { get; set; }
	}
	
	/// <summary>
	/// A price record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PriceRecord
	{
		
		/// <summary>
		/// Base price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basePrice")]
		public System.Nullable<System.Single> BasePrice { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Taxes and fees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxesAndFees")]
		public System.Nullable<System.Single> TaxesAndFees { get; set; }
		
		/// <summary>
		/// Timestamp of this price record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PriceAccuracyRowMismatchReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISMATCH_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISMATCH_REASON_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX_MISMATCH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROOM_UNAVAILABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SITE_ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_FEED_DELAYED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOUNT_MISSING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCORRECT_DISCOUNT_VALUE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRONG_ITINERARY = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PriceAccuracyRowSignalSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_SOURCE_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FETCHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIXEL = 3,
	}
	
	/// <summary>
	/// Response message for PriceCoverageViewService.ListPriceCoverageViews.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPriceCoverageViewsResponse
	{
		
		/// <summary>
		/// Hotel price coverage stats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceCoverageViews")]
		public PriceCoverageView[] PriceCoverageViews { get; set; }
	}
	
	/// <summary>
	/// A price coverage view. Covers the `price_coverage_stats` Scorecard functionality in pre-v3.0 API versions. For more information, refer to Price Coverage for Push and Hint partners.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PriceCoverageView
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculationDate")]
		public Date CalculationDate { get; set; }
		
		/// <summary>
		/// The total number of properties that have prices for the given itineraries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchedPropertyCount")]
		public System.Nullable<System.Int32> MatchedPropertyCount { get; set; }
		
		/// <summary>
		/// The ratio between the number of hotels which have at least one price for the calculation period and `matched_property_count`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceCoverageBinaryPercent")]
		public System.Nullable<System.Double> PriceCoverageBinaryPercent { get; set; }
		
		/// <summary>
		/// Price coverage stats for combinations of advance booking window and length of stay ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceCoverageBuckets")]
		public PriceCoverageBucket[] PriceCoverageBuckets { get; set; }
		
		/// <summary>
		/// The overall price coverage for an account. This value is the ratio between the number of hotel prices for the calculation booking window and length of stay range divided by the number of all possible prices, which is `matched_property_count` times 330 (for advance book window) times 30 (for length of stay).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceCoveragePercent")]
		public System.Nullable<System.Double> PriceCoveragePercent { get; set; }
	}
	
	/// <summary>
	/// Coverage stats for one combination of advance booking window and length of stay.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PriceCoverageBucket
	{
		
		/// <summary>
		/// Advance booking window range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advanceBookingWindowRange")]
		public System.Nullable<PriceCoverageBucketAdvanceBookingWindowRange> AdvanceBookingWindowRange { get; set; }
		
		/// <summary>
		/// Number of prices for this advance booking window bucket and length of stay bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availablePriceCount")]
		public string AvailablePriceCount { get; set; }
		
		/// <summary>
		/// Length of stay range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lengthOfStayRange")]
		public System.Nullable<PriceCoverageBucketLengthOfStayRange> LengthOfStayRange { get; set; }
		
		/// <summary>
		/// The percent of itineraries for which you have coverage for this advance booking window bucket and length of stay bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceCoveragePercent")]
		public System.Nullable<System.Double> PriceCoveragePercent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PriceCoverageBucketAdvanceBookingWindowRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_BOOKING_WINDOW_RANGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_BOOKING_WINDOW_RANGE_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS_0_TO_30 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS_31_TO_60 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS_61_TO_90 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS_91_TO_120 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS_121_TO_150 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS_151_TO_180 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS_181_TO_210 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS_211_TO_240 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS_241_TO_270 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS_271_TO_300 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS_301_TO_330 = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PriceCoverageBucketLengthOfStayRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_STAY_RANGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_STAY_RANGE_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_STAY_1_TO_7 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_STAY_8_TO_14 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_STAY_15_TO_30 = 4,
	}
	
	/// <summary>
	/// Response message for ReconciliationReportService.ListReconciliationReports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReconciliationReportsResponse
	{
		
		/// <summary>
		/// The list of names of reconciliation reports. Note that the `contents` and `fileName` fields of each `ReconciliationReport` object are not returned by this call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciliationReports")]
		public ReconciliationReport[] ReconciliationReports { get; set; }
	}
	
	/// <summary>
	/// Missed participation count broken down by reason.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MissedParticipationCountDetails
	{
		
		/// <summary>
		/// The total number of missed participations due to one or more of your hotels being suspended due to price accuracy violations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotelSuspendedCount")]
		public string HotelSuspendedCount { get; set; }
		
		/// <summary>
		/// The total number of missed participation due to the hotel/itinerary combination being unavailable, or the traveler was ineligible for the rates. To participate in these auctions, you may need to provide more pricing information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noAvailabilityCount")]
		public string NoAvailabilityCount { get; set; }
		
		/// <summary>
		/// No landing page matched the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noLandingPageCount")]
		public string NoLandingPageCount { get; set; }
		
		/// <summary>
		/// The total number of missed participations due to a price not being offered for the requested itinerary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noPriceCount")]
		public string NoPriceCount { get; set; }
		
		/// <summary>
		/// The reasons that contributed to the no price count and the total count for each reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noPriceCountDetails")]
		public NoPriceCountDetails NoPriceCountDetails { get; set; }
		
		/// <summary>
		/// The total number of missed participation due to one or more of your hotels not specifying taxes and fees separately.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noTaxBreakdownCount")]
		public string NoTaxBreakdownCount { get; set; }
		
		/// <summary>
		/// Hotel did not participate for an unknown reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherReasonCount")]
		public string OtherReasonCount { get; set; }
		
		/// <summary>
		/// The total number of missed participations due to either a price not being present in Google's cache or failing to successfully respond to live pricing. Comprised of the following: * Bandwidth depleted * Cache rate missing * Itinerary blocked * Live pricing not set up * Live pricing timeout * Live pricing error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceMissingCount")]
		public string PriceMissingCount { get; set; }
		
		/// <summary>
		/// The reasons that contributed to the price missing count and the total count for each reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceMissingCountDetails")]
		public PriceMissingCountDetails PriceMissingCountDetails { get; set; }
		
		/// <summary>
		/// The total number of missed participation due to an issue with the accuracy of the price provided for the itinerary. Comprised of the following: * Hotel suspended * Price unusually high * Price unusually low * Taxes and feeds missing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceProblemCount")]
		public string PriceProblemCount { get; set; }
		
		/// <summary>
		/// The reasons that contributed to the price problem count and the total count for each reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceProblemCountDetails")]
		public PriceProblemCountDetails PriceProblemCountDetails { get; set; }
		
		/// <summary>
		/// The total number of missed participation due to price listed as unavailable (-1) for the requested itinerary. Comprised of the following: * Price unavailable * Participation not likely * Other
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceUnavailableCount")]
		public string PriceUnavailableCount { get; set; }
		
		/// <summary>
		/// The reasons that contributed to the price unavailable count and the total count for each reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceUnavailableCountDetails")]
		public PriceUnavailableCountDetails PriceUnavailableCountDetails { get; set; }
	}
	
	/// <summary>
	/// The reasons that contributed to the no price count and the total count for each reason.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NoPriceCountDetails
	{
		
		/// <summary>
		/// The total number of missed participation due to live pricing not being triggered for any of the following reasons: * You didn't have live pricing configured for these searches. * You restricted Google from accessing the hotel itinerary in question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livePricingConfigIssueCount")]
		public string LivePricingConfigIssueCount { get; set; }
		
		/// <summary>
		/// The total number of missed participation due to live pricing being unavailable. Live pricing will not be triggered for certain default itineraries or UIs. In this scenario, partners will need a cached price to participate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livePricingNotAvailableCount")]
		public string LivePricingNotAvailableCount { get; set; }
		
		/// <summary>
		/// The total number of missed participation due to live pricing not being triggered for any of the following reasons: * You didn't set a bid. * You didn't have a valid landing page. * There weren't enough prices in the cache.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livePricingNotTriggeredCount")]
		public string LivePricingNotTriggeredCount { get; set; }
		
		/// <summary>
		/// The number of missed participations due to other issues with live pricing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livePricingOtherReasonCount")]
		public string LivePricingOtherReasonCount { get; set; }
		
		/// <summary>
		/// The total number of missed participation due to technical issues with live pricing for any of the following reasons: * You didn’t respond quickly enough and exceeded the response deadline (around 4000 milliseconds). * You returned an error. * Your response was malformed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livePricingTechnicalIssueCount")]
		public string LivePricingTechnicalIssueCount { get; set; }
	}
	
	/// <summary>
	/// The reasons that contributed to the price missing count and the total count for each reason.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PriceMissingCountDetails
	{
		
		/// <summary>
		/// No price was cached for this itinerary, and there was no live query quota remaining.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidthDepletedCount")]
		public string BandwidthDepletedCount { get; set; }
		
		/// <summary>
		/// No price exists in the cache for this itinerary. A live query was not done due to page constraints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheRateMissingCount")]
		public string CacheRateMissingCount { get; set; }
		
		/// <summary>
		/// The itinerary was outside of your basic parameters, so no price was pulled for the itinerary from either live query or cache fill.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itineraryBlockedCount")]
		public string ItineraryBlockedCount { get; set; }
		
		/// <summary>
		/// No price was cached for this itinerary. A live query did not time out, but your system returned an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livePricingErrorCount")]
		public string LivePricingErrorCount { get; set; }
		
		/// <summary>
		/// No price was cached for this itinerary, and live query was not configured for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livePricingNotSetupCount")]
		public string LivePricingNotSetupCount { get; set; }
		
		/// <summary>
		/// No price was cached for this itinerary, and a live query sent to your system timed out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livePricingTimeoutCount")]
		public string LivePricingTimeoutCount { get; set; }
	}
	
	/// <summary>
	/// The reasons that contributed to the price problem count and the total count for each reason.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PriceProblemCountDetails
	{
		
		/// <summary>
		/// The hotel was suspended. This may be due to persistent problems in areas such as incorrect taxes and fees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotelSuspendedCount")]
		public string HotelSuspendedCount { get; set; }
		
		/// <summary>
		/// The price given for this itinerary seemed oddly high compared to regional trends.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceUnusuallyHighCount")]
		public string PriceUnusuallyHighCount { get; set; }
		
		/// <summary>
		/// The price given for this itinerary seemed oddly low compared to regional trends.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceUnusuallyLowCount")]
		public string PriceUnusuallyLowCount { get; set; }
		
		/// <summary>
		/// Taxes and fees were missing from pricing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxesAndFeesMissingCount")]
		public string TaxesAndFeesMissingCount { get; set; }
	}
	
	/// <summary>
	/// The reasons that contributed to the price unavailable count and the total count for each reason.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PriceUnavailableCountDetails
	{
		
		/// <summary>
		/// No price was cached for this itinerary, and no live query was done because your server usually tells us the hotel is unavailable or sold out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="participationNotLikelyCount")]
		public string ParticipationNotLikelyCount { get; set; }
		
		/// <summary>
		/// Hotel did not participate because it wasn't available for the itinerary dates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceUnavailableCount")]
		public string PriceUnavailableCount { get; set; }
	}
	
	/// <summary>
	/// A parsed listing
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParsedListing
	{
		
		/// <summary>
		/// If not empty, it indicates that this listing belongs to a brand of the feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// The partner provided category (accommodation type) of the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public LocalizedText[] Category { get; set; }
		
		/// <summary>
		/// Data issues about this listing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataIssueDetail")]
		public DataIssueDetail[] DataIssueDetail { get; set; }
		
		/// <summary>
		/// Description of the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public LocalizedText[] Description { get; set; }
		
		/// <summary>
		/// Images associated with this listing, localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image[] Image { get; set; }
		
		/// <summary>
		/// Represents the accuracy of the location. The listing can be anywhere within the defined circular area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imprecisionRadiusMeters")]
		public System.Nullable<System.Int32> ImprecisionRadiusMeters { get; set; }
		
		/// <summary>
		/// Whether the listing can be served based on non image data alone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isServed")]
		public System.Nullable<System.Boolean> IsServed { get; set; }
		
		/// <summary>
		/// List of localized names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listingName")]
		public LocalizedText[] ListingName { get; set; }
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public LatLng Location { get; set; }
		
		/// <summary>
		/// The list id on partner lec feed, provided by partner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerListId")]
		public string PartnerListId { get; set; }
		
		/// <summary>
		/// The country code where the listing is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// Reviews associated with this listing. Each review proto has a single language attached to it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="review")]
		public Review[] Review { get; set; }
		
		/// <summary>
		/// VR List attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitAttributes")]
		public System.Collections.Generic.Dictionary<string, string> UnitAttributes { get; set; }
	}
	
	/// <summary>
	/// A single review in a VR Listing. NEXT ID: 10
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Review
	{
		
		/// <summary>
		/// The author of the review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// The body of the review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Language of the review, such as "en", "de", etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// The url of the review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Any ratings associated with this review. This is repeated because reviews can include ratings on different aspects of a listing, e.g. location, cleanliness, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public Rating[] Rating { get; set; }
		
		/// <summary>
		/// Unix timestamp (in seconds) of the review, in UTC+0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewTime")]
		public string ReviewTime { get; set; }
		
		/// <summary>
		/// The title of the review, for example: Great three bedrooms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of the review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ReviewType> Type { get; set; }
		
		/// <summary>
		/// Unix timestamp (in seconds) of when the stay was, in UTC+0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitTime")]
		public string VisitTime { get; set; }
	}
	
	/// <summary>
	/// A rating within a vacation rentals Listing. NEXT ID: 4
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Rating
	{
		
		/// <summary>
		/// Maximum rating possible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratingScale")]
		public System.Nullable<System.Int32> RatingScale { get; set; }
		
		/// <summary>
		/// The rating score. (e.g. 8.5)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
		
		/// <summary>
		/// The type of the rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<RatingType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RatingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERALL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReviewType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDITORIAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 2,
	}
	
	/// <summary>
	/// Represents a result from querying for participation stats for an account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParticipationResult
	{
		
		/// <summary>
		/// Key of a result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public Key Key { get; set; }
		
		/// <summary>
		/// The total number of opportunities **not** eligible for the Google Ads auction process. Comprised of the following: * Landing page missing * Price missing * Price problem * Price unavailable * Other
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="missedParticipationCount")]
		public string MissedParticipationCount { get; set; }
		
		/// <summary>
		/// Missed participation count broken down by reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="missedParticipationCountDetails")]
		public MissedParticipationCountDetails MissedParticipationCountDetails { get; set; }
		
		/// <summary>
		/// For a specific hotel, the total number of opportunities that were available. Opportunities are the total number of instances when a hotel ad could have been displayed to a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opportunityCount")]
		public string OpportunityCount { get; set; }
		
		/// <summary>
		/// The total number of opportunities for which you were eligible to enter in the Google Ads auction process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="participationCount")]
		public string ParticipationCount { get; set; }
		
		/// <summary>
		/// The percentage rate of participation where the number of successfully participated opportunities is divided by the total number of opportunities. For example, if a property was eligible to enter the Google Ads auction 90 times out of 100 opportunities, the participation rate is 90%.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="participationPercent")]
		public System.Nullable<System.Double> ParticipationPercent { get; set; }
		
		/// <summary>
		/// Partner's hotel display name. This field is only populated when the result is aggregated by `partnerHotelId`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerHotelDisplayName")]
		public string PartnerHotelDisplayName { get; set; }
	}
	
	/// <summary>
	/// A price view. Covers the Prices functionality in pre-v3.0 API versions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PriceView
	{
		
		/// <summary>
		/// Resource name in the format `accounts/{account_id}/priceViews/{partner_hotel_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Price for each itinerary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perItineraryPrices")]
		public HotelPricePerItinerary[] PerItineraryPrices { get; set; }
	}
	
	/// <summary>
	/// Represents a result from querying for the property performance report for an account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyPerformanceResult
	{
		
		/// <summary>
		/// The total number of ad clicks that were recorded for this result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adsClickCount")]
		public string AdsClickCount { get; set; }
		
		/// <summary>
		/// Equal to `ads_click_count` divided by `ads_impression_count`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adsClickthroughRate")]
		public System.Nullable<System.Double> AdsClickthroughRate { get; set; }
		
		/// <summary>
		/// The total number of ad impressions that were recorded for this result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adsImpressionCount")]
		public string AdsImpressionCount { get; set; }
		
		/// <summary>
		/// Difference in days between query date and check-in date in property's local timezone. Only present if `advanceBookingWindow` is specified in `aggregateBy` in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advanceBookingWindow")]
		public System.Nullable<PropertyPerformanceResultAdvanceBookingWindow> AdvanceBookingWindow { get; set; }
		
		/// <summary>
		/// Partner-specified brand for the property. Only present if `brand` is specified in `aggregateBy` in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// The total number of free booking link clicks that were recorded for this result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickCount")]
		public string ClickCount { get; set; }
		
		/// <summary>
		/// Equal to `click_count` divided by `impression_count`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickthroughRate")]
		public System.Nullable<System.Double> ClickthroughRate { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// The user’s device type. Only present if `deviceType` is specified in `aggregateBy` in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceType")]
		public FreeBookingLinksResultDeviceType DeviceType { get; set; }
		
		/// <summary>
		/// Whether the user’s query indicated a strong interest in booking. Only present if `highIntentUsers` is specified in `aggregateBy` in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highIntentUsers")]
		public System.Nullable<System.Boolean> HighIntentUsers { get; set; }
		
		/// <summary>
		/// The total number of free booking link impressions that were recorded for this result. This value is rounded to preserve user privacy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionCount")]
		public string ImpressionCount { get; set; }
		
		/// <summary>
		/// Number of nights between check-in and check-out dates specified by user. Only present if `lengthOfStay` is specified in `aggregateBy` in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lengthOfStay")]
		public System.Nullable<PropertyPerformanceResultLengthOfStay> LengthOfStay { get; set; }
		
		/// <summary>
		/// Requested number of people staying at the property. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occupancy")]
		public System.Nullable<PropertyPerformanceResultOccupancy> Occupancy { get; set; }
		
		/// <summary>
		/// Partner's property name. Only present if `partnerPropertyDisplayName` is specified in `aggregateBy` in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerPropertyDisplayName")]
		public string PartnerPropertyDisplayName { get; set; }
		
		/// <summary>
		/// Partner's property ID. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerPropertyId")]
		public string PartnerPropertyId { get; set; }
		
		/// <summary>
		/// ISO 3116 region code of the country/region of the property. Only present if `propertyRegionCode` is specified in `aggregateBy` in the request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyRegionCode")]
		public string PropertyRegionCode { get; set; }
		
		/// <summary>
		/// ISO 3116 region code of the country/region of the user. Only present if `userRegionCode` is specified in `aggregateBy` in the request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRegionCode")]
		public string UserRegionCode { get; set; }
		
		/// <summary>
		/// The total number of clicks on the "Website" button on Google for vacation rentals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vrWebsiteButtonClicks")]
		public string VrWebsiteButtonClicks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PropertyPerformanceResultAdvanceBookingWindow
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_BOOKING_WINDOW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_BOOKING_WINDOW_SAME_DAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_BOOKING_WINDOW_NEXT_DAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_BOOKING_WINDOW_DAYS_2_TO_7 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_BOOKING_WINDOW_DAYS_8_TO_14 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_BOOKING_WINDOW_DAYS_15_TO_30 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_BOOKING_WINDOW_DAYS_31_TO_60 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_BOOKING_WINDOW_DAYS_61_TO_90 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_BOOKING_WINDOW_DAYS_91_TO_120 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_BOOKING_WINDOW_DAYS_121_TO_150 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_BOOKING_WINDOW_DAYS_151_TO_180 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_BOOKING_WINDOW_DAYS_OVER_180 = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PropertyPerformanceResultLengthOfStay
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_STAY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_STAY_NIGHTS_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_STAY_NIGHTS_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_STAY_NIGHTS_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_STAY_NIGHTS_4_TO_7 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_STAY_NIGHTS_8_TO_14 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_STAY_NIGHTS_15_TO_21 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_STAY_NIGHTS_22_TO_30 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LENGTH_OF_STAY_NIGHTS_OVER_30 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PropertyPerformanceResultOccupancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCCUPANCY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCCUPANCY_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCCUPANCY_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCCUPANCY_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCCUPANCY_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCCUPANCY_OVER_4 = 5,
	}
	
	/// <summary>
	/// **DEPRECATED:** Use `QueryPropertyPerformanceReportResponse` with `PropertyPerformanceReportService` instead. Response message for FreeBookingLinksReportService.QueryFreeBookingLinksReport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryFreeBookingLinksReportResponse
	{
		
		/// <summary>
		/// Pagination token used to retrieve the next page of results. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of results that match the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public FreeBookingLinksResult[] Results { get; set; }
	}
	
	/// <summary>
	/// Response message for ParticipationReportService.QueryParticipationReport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryParticipationReportResponse
	{
		
		/// <summary>
		/// Pagination token used to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of results that matches the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ParticipationResult[] Results { get; set; }
	}
	
	/// <summary>
	/// Response message for PropertyPerformanceReportService.QueryPropertyPerformanceReport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryPropertyPerformanceReportResponse
	{
		
		/// <summary>
		/// Pagination token used to retrieve the next page of results. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of results that match the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public PropertyPerformanceResult[] Results { get; set; }
	}
	
	/// <summary>
	/// Request message for HotelService.SetLiveOnGoogle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetLiveOnGoogleRequest
	{
		
		/// <summary>
		/// Required. Whether the property will show on Google. When true, Google will show the properties if their integration is complete and the property is available. When false, Google will never show the properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveOnGoogle")]
		public System.Nullable<System.Boolean> LiveOnGoogle { get; set; }
		
		/// <summary>
		/// Required. Identifies the properties to update with the liveOnGoogle setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerHotelIds")]
		public string[] PartnerHotelIds { get; set; }
	}
	
	/// <summary>
	/// Response message for HotelService.SetLiveOnGoogle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetLiveOnGoogleResponse
	{
		
		/// <summary>
		/// Identifies properties that Google could not update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedHotelIds")]
		public string[] FailedHotelIds { get; set; }
		
		/// <summary>
		/// Identifies the updated properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedHotelIds")]
		public string[] UpdatedHotelIds { get; set; }
	}
	
	/// <summary>
	/// Response message for HotelViewService.SummarizeHotelViews.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SummarizeHotelViewsResponse
	{
		
		/// <summary>
		/// Timestamp of the last hotel feed submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastFeedSubmissionTime")]
		public string LastFeedSubmissionTime { get; set; }
		
		/// <summary>
		/// Timestamp of the last hotel manifest update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastManifestUpdateTime")]
		public string LastManifestUpdateTime { get; set; }
		
		/// <summary>
		/// The number of properties that are Live on Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveOnGooglePropertyCount")]
		public string LiveOnGooglePropertyCount { get; set; }
		
		/// <summary>
		/// The number of properties that match Google's manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchedPropertyCount")]
		public string MatchedPropertyCount { get; set; }
		
		/// <summary>
		/// The number of hotels that are considered overclustered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overclusteredPropertyCount")]
		public string OverclusteredPropertyCount { get; set; }
		
		/// <summary>
		/// The number of overclustered properties that have data-related errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overclusteredPropertyWithErrorsCount")]
		public string OverclusteredPropertyWithErrorsCount { get; set; }
		
		/// <summary>
		/// The number of properties that are considered unmatched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unmatchedPropertyCount")]
		public string UnmatchedPropertyCount { get; set; }
		
		/// <summary>
		/// The number of unmatched properties that have data-related errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unmatchedPropertyWithErrorsCount")]
		public string UnmatchedPropertyWithErrorsCount { get; set; }
	}
	
	/// <summary>
	/// Response message for PriceAccuracyViewService.SummarizePriceAccuracy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SummarizePriceAccuracyResponse
	{
		
		/// <summary>
		/// The current Book on Google price accuracy score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentBookOnGoogleScore")]
		public System.Nullable<SummarizePriceAccuracyResponseCurrentBookOnGoogleScore> CurrentBookOnGoogleScore { get; set; }
		
		/// <summary>
		/// The current price accuracy score combining both website and Book on Google scores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentOverallScore")]
		public SummarizePriceAccuracyResponseCurrentBookOnGoogleScore CurrentOverallScore { get; set; }
		
		/// <summary>
		/// The current price accuracy score. Contains the same value as `current_website_score`. For clarity, use either `current_website_score` or 'current_overall_score` depending upon which is needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentScore")]
		public SummarizePriceAccuracyResponseCurrentBookOnGoogleScore CurrentScore { get; set; }
		
		/// <summary>
		/// The current website price accuracy score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentWebsiteScore")]
		public SummarizePriceAccuracyResponseCurrentBookOnGoogleScore CurrentWebsiteScore { get; set; }
		
		/// <summary>
		/// The predicted Book on Google price accuracy score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedBookOnGoogleScore")]
		public SummarizePriceAccuracyResponseCurrentBookOnGoogleScore PredictedBookOnGoogleScore { get; set; }
		
		/// <summary>
		/// The predicted price accuracy score combining both website and Book on Google scores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedOverallScore")]
		public SummarizePriceAccuracyResponseCurrentBookOnGoogleScore PredictedOverallScore { get; set; }
		
		/// <summary>
		/// The predicted price accuracy score. Contains the same value as `predicted_website_score`. For clarity, use either `predicted_website_score` or 'predicted_overall_score` depending upon which is needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedScore")]
		public SummarizePriceAccuracyResponseCurrentBookOnGoogleScore PredictedScore { get; set; }
		
		/// <summary>
		/// The predicted website price accuracy score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedWebsiteScore")]
		public SummarizePriceAccuracyResponseCurrentBookOnGoogleScore PredictedWebsiteScore { get; set; }
		
		/// <summary>
		/// The update timestamp for the current score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SummarizePriceAccuracyResponseCurrentBookOnGoogleScore
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_ACCURACY_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_ACCURACY_STATE_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCELLENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POOR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT_RISK = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
	}
	
	/// <summary>
	/// Response message for ReconciliationReportService.ValidateReconciliationReport.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidateReconciliationReportResponse
	{
		
		/// <summary>
		/// Issues that were encountered when validating the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public ReconciliationReportValidationIssue[] Issues { get; set; }
		
		/// <summary>
		/// The number of commission records that were successfully validated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successfulRecordCount")]
		public System.Nullable<System.Int32> SuccessfulRecordCount { get; set; }
	}
	
	/// <summary>
	/// Request message for VRPartnerListingVerificationService.VerifyPartnerListings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyListingsRequest
	{
		
		/// <summary>
		/// A listing that follows the XML format specified in https://developers.google.com/hotels/hotel-prices/xml-reference/hotel-list-feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xmlListing")]
		public string XmlListing { get; set; }
	}
	
	/// <summary>
	/// Response message for VRPartnerListingVerificationService.VerifyPartnerListings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyListingsResponse
	{
		
		/// <summary>
		/// A parsed listing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parsedListing")]
		public ParsedListing ParsedListing { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Collection-level custom method to update the Live on Google status for multiple properties. Each call can turn on or off multiple hotels. To turn some hotels on and turn some hotels off, you will have to make multiple calls.
		/// Travelpartner_accounts_hotels_setLiveOnGoogle v3/{account}/hotels:setLiveOnGoogle
		/// </summary>
		/// <param name="account">Required. The resource name of the account. The format is accounts/{account_id}.</param>
		/// <returns>Successful response</returns>
		public async Task<SetLiveOnGoogleResponse> Travelpartner_accounts_hotels_setLiveOnGoogleAsync(string account, SetLiveOnGoogleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (account==null? "" : System.Uri.EscapeDataString(account))+"/hotels:setLiveOnGoogle";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SetLiveOnGoogleResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an account link.
		/// Travelpartner_accounts_accountLinks_delete v3/{name}
		/// </summary>
		/// <param name="name">Required. The resource name of the account link being deleted. The format is `accounts/{account_id}/accountLinks/{account_link_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Travelpartner_accounts_accountLinks_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a reconciliation report.
		/// Travelpartner_accounts_reconciliationReports_get v3/{name}
		/// </summary>
		/// <param name="name">The resource name of the reconciliation report to fetch. The format is `accounts/{account_id}/reconciliationReports/{datetime}~{filename}`.</param>
		/// <param name="includeMatchedPrices">Set to true if matched prices are to be added into the report.</param>
		/// <param name="includeNonScoring">Set to true if non-account impacting rows are to be added into the report.</param>
		/// <param name="includePixels">Set to true if pixel signals are to be added into the report.</param>
		/// <returns>Successful response</returns>
		public async Task<ReconciliationReport> Travelpartner_accounts_reconciliationReports_getAsync(string name, bool includeMatchedPrices, bool includeNonScoring, bool includePixels, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&includeMatchedPrices="+includeMatchedPrices+"&includeNonScoring="+includeNonScoring+"&includePixels="+includePixels;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReconciliationReport>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a brand.
		/// Travelpartner_accounts_brands_patch v3/{name}
		/// </summary>
		/// <param name="name">Output only. The resource name for the brand in the format `accounts/{account_id}/brands/{brand_id}`. The `brand_id` corresponds to the partner's brand identifier used for landing page matching and the property-level brand identifier. A default brand is applied to properties that do not have a brand. The `brand_id` of the default brand is `NO_BRAND_ID`. It can be fetched and updated like any configured brand.</param>
		/// <param name="allowMissing">When true, and the Brand is not found, a new Brand will be created. In this situation, `update_mask` is ignored.</param>
		/// <param name="updateMask">Required. The field to update. Only the `display_names` and `icon` fields can be updated. Use the syntax shown in the example URI below and provide the new value in the request body. Example request URI and request body: ``` PATCH https://travelpartner.googleapis.com/v3/accounts/123456789/ brands/my-brand?update_mask=brand.display_names ``` ``` { "display_names": [{ "language": "en" "text": "Gilles' Gites" }] } ``` The information above is sufficient for forming the URI and request body. The sentence below is auto-generated, supplemental information about the `FieldMask` format in general.</param>
		/// <returns>Successful response</returns>
		public async Task<Brand> Travelpartner_accounts_brands_patchAsync(string name, bool allowMissing, string updateMask, Brand requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&allowMissing="+allowMissing+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Brand>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// **DEPRECATED:** Use PropertyPerformanceReportService.QueryPropertyPerformanceReport, which also has impression reporting, instead. Provides the ability to query (get, filter, and segment) a free booking links report for a specific account.
		/// Travelpartner_accounts_freeBookingLinksReportViews_query v3/{name}/freeBookingLinksReportViews:query
		/// </summary>
		/// <param name="name">The resource name of the account being queried. Format: accounts/{account_id}</param>
		/// <param name="aggregateBy">Specifies how to segment the metrics returned by the query. For example, if `userRegionCode` is specified, the `freeBookingLinksResult` will provide metrics aggregated by user region. The string value is a comma-separated list of fields. Valid fields are: `date`, `userRegionCode`, `deviceType`, `partnerHotelId`, and `partnerHotelDisplayName`. Only fields specified here are included in the FreeBookingLinksResult.</param>
		/// <param name="filter">The conditions (fields and expressions) used to filter the free booking link metrics for the account being queried. The syntax requires spaces surrounding the `in` operator. Otherwise, spaces can be omitted. Conditions can be joined using the `and` operator. The `date` field is required. All other fields are optional. The `date` field values are inclusive and must be in YYYY-MM-DD format. The earliest acceptable date is 2021-03-09; earlier date values will be coerced to 2021-03-09. Values for `partnerHotelDisplayName` are matched case-insensitively. Examples of valid conditions are as follows: * `date = '2021-12-03'` * `date between '2021-12-03' and '2021-12-08'` * `deviceType = 'TABLET'` * `deviceType in ('MOBILE', 'TABLET')` * `partnerHotelId = 'AAA'` * `partnerHotelId in ('AAA', 'BBB')` * `partnerHotelDisplayName = 'hotel A'` * `partnerHotelDisplayName in ('Hotel A', 'HOTEL b')` * `userRegionCode = 'US'` * `userRegionCode in ('US', 'CA')`</param>
		/// <param name="pageSize">The maximum number of participation results to return. The service may return fewer than this value. If unspecified, at most 10,000 results will be returned. The maximum value is 10,000; values above 10,000 will be coerced to 10,000.</param>
		/// <param name="pageToken">A page token, received from a previous QueryParticipationReport request. Provide this to receive the subsequent page. When paginating, all other parameters provided to QueryParticipationReport must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<QueryFreeBookingLinksReportResponse> Travelpartner_accounts_freeBookingLinksReportViews_queryAsync(string name, string aggregateBy, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/freeBookingLinksReportViews:query&aggregateBy=" + (aggregateBy==null? "" : System.Uri.EscapeDataString(aggregateBy))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<QueryFreeBookingLinksReportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides the ability to query (get, filter, and segment) a participation report for a particular account.
		/// Travelpartner_accounts_participationReportViews_query v3/{name}/participationReportViews:query
		/// </summary>
		/// <param name="name">The resource name of the account being queried. The format is `accounts/{account_id}`.</param>
		/// <param name="aggregateBy">Specifies how to segment the metrics returned by the query. For example, if `userRegionCode` is specified as the `aggregate_by` value, the `participationResult` will provide metrics aggregated by user region. The string value is a comma-separated list of fields. Valid fields are: `date`, `userRegionCode`, `deviceType`, `partnerHotelId`, `hotelRegionCode`, `advanceBookingWindow`, `lengthOfStayDays`, `checkinDate`, and `occupancy`. Fields that are not specified are not included in the ParticipationResult. Using an `aggregateBy` specification that produces a large number of rows will cause an error. This is especially true when aggregating by `partnerHotelId` or more than two fields. To reduce the possibiliy of an error, filter by `partnerHotelId` and `date` to only include a select number of hotels and dates. Accounts with a large number of hotels will need to further reduce data with more filtering.</param>
		/// <param name="filter">The conditions (fields and expressions) used to filter the participation metrics for the account being queried. The syntax requires spaces surrounding the `in` operator. Otherwise, spaces can be omitted. Conditions can be joined using the `and` operator. The `date` field is required. All other fields are optional. Examples of valid conditions are as follows: * `advanceBookingWindow = 2` * `advanceBookingWindow >= 0` * `advanceBookingWindow <= 5` * `advanceBookingWindow between 1 and 5` * `checkinDate = '2020-10-01'` * `checkinDate >= '2020-10-01'` * `checkinDate <= '2020-10-01'` * `checkinDate between '2020-10-01' and '2020-10-05'` * `date = '2020-02-04'` * `date between '2020-02-04' and '2020-02-09'` * `deviceType = 'TABLET'` * `deviceType in ('MOBILE', 'TABLET')` * `hotelRegionCode = 'US'` * `hotelRegionCode in ('US', 'CA')` * `lengthOfStayDays = 2` * `lengthOfStayDays >= 0` * `lengthOfStayDays <= 5` * `lengthOfStayDays between 1 and 5` * `occupancy = 2` * `occupancy >= 0` * `occupancy <= 5` * `occupancy between 1 and 5` * `partnerHotelId = 'AAA'` * `partnerHotelId in ('AAA', 'BBB')` * `userRegionCode = 'US'` * `userRegionCode in ('US', 'CA')`</param>
		/// <param name="pageSize">The maximum number of participation results to return. The service may return fewer than this value. If unspecified, at most 10,000 results will be returned. The maximum value is 10,000; values above 10,000 will be coerced to 10,000.</param>
		/// <param name="pageToken">A page token, received from a previous QueryParticipationReport request. Provide this to receive the subsequent page. When paginating, all other parameters provided to QueryParticipationReport must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<QueryParticipationReportResponse> Travelpartner_accounts_participationReportViews_queryAsync(string name, string aggregateBy, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/participationReportViews:query&aggregateBy=" + (aggregateBy==null? "" : System.Uri.EscapeDataString(aggregateBy))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<QueryParticipationReportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides the ability to query (get, filter, and segment) a property performance links report for a specific account.
		/// Travelpartner_accounts_propertyPerformanceReportViews_query v3/{name}/propertyPerformanceReportViews:query
		/// </summary>
		/// <param name="name">The resource name of the account being queried. Format: accounts/{account_id}</param>
		/// <param name="aggregateBy">Specifies how to segment the metrics returned by the query. For example, if `userRegionCode` is specified, the `PropertyPerformanceResult` will provide metrics aggregated by user region. The string value is a comma-separated list of fields. Valid fields are: `advanceBookingWindow`, `brand`, `date`, `deviceType`, `highIntentUsers`, `lengthOfStay`, `propertyRegionCode`, `occupancy`, `partnerPropertyId`, `partnerPropertyDisplayName`, and `userRegionCode`. Only fields specified here are included in the PropertyPerformanceResult.</param>
		/// <param name="filter">The conditions (fields and expressions) used to filter the property performance metrics for the account being queried. The syntax requires spaces surrounding the `in` operator. Otherwise, spaces can be omitted. Conditions can be joined using the `and` operator. The `date` field is required. All other fields are optional. The `date` field values are inclusive and must be in YYYY-MM-DD format. The earliest acceptable date is 2021-03-09; earlier date values will be coerced to 2021-03-09. Values for `partnerPropertyDisplayName` and `brand` are matched case-insensitively. Examples of valid conditions are as follows: * `advanceBookingWindow = 'ADVANCE_BOOKING_WINDOW_SAME_DAY'` * `advanceBookingWindow in ('ADVANCE_BOOKING_WINDOW_SAME_DAY', 'ADVANCE_BOOKING_WINDOW_DAYS_61_TO_90')` * `brand = 'Brand A'` * `brand in ('Brand A', 'brand B')` * `date = '2021-12-03'` * `date between '2021-12-03' and '2021-12-08'` * `deviceType = 'TABLET'` * `deviceType in ('MOBILE', 'TABLET')` * `highIntentUsers = 'TRUE'` * `highIntentUsers = 'FALSE'` * `lengthOfStay = 'LENGTH_OF_STAY_NIGHTS_2'` * `lengthOfStay in ('LENGTH_OF_STAY_NIGHTS_2', 'LENGTH_OF_STAY_NIGHTS_4_TO_7')` * `propertyRegionCode = 'US'` * `propertyRegionCode in ('US', 'CA')` * `occupancy = 'OCCUPANCY_2'` * `occupancy in ('OCCUPANCY_2', 'OCCUPANCY_OVER_4')` * `partnerPropertyId = 'AAA'` * `partnerPropertyId in ('AAA', 'BBB')` * `partnerPropertyDisplayName = 'hotel A'` * `partnerPropertyDisplayName in ('Hotel A', 'HOTEL b')` * `userRegionCode = 'US'` * `userRegionCode in ('US', 'CA')`</param>
		/// <param name="pageSize">The maximum number of participation results to return. The service may return fewer than this value. If unspecified, at most 10,000 results will be returned. The maximum value is 10,000; values above 10,000 will be coerced to 10,000.</param>
		/// <param name="pageToken">A page token, received from a previous QueryParticipationReport request. Provide this to receive the subsequent page. When paginating, all other parameters provided to QueryParticipationReport must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<QueryPropertyPerformanceReportResponse> Travelpartner_accounts_propertyPerformanceReportViews_queryAsync(string name, string aggregateBy, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/propertyPerformanceReportViews:query&aggregateBy=" + (aggregateBy==null? "" : System.Uri.EscapeDataString(aggregateBy))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<QueryPropertyPerformanceReportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the account links for a Hotel Center account.
		/// Travelpartner_accounts_accountLinks_list v3/{parent}/accountLinks
		/// </summary>
		/// <param name="parent">The resource name of the account being queried. The format is `accounts/{account_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAccountLinksResponse> Travelpartner_accounts_accountLinks_listAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/accountLinks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAccountLinksResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new account link between a Hotel Center account and a Google Ads account.
		/// Travelpartner_accounts_accountLinks_create v3/{parent}/accountLinks
		/// </summary>
		/// <param name="parent">The resource name of the Hotel Center account being queried. The format is `accounts/{account_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<AccountLink> Travelpartner_accounts_accountLinks_createAsync(string parent, AccountLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/accountLinks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountLink>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the brands for a partner account.
		/// Travelpartner_accounts_brands_list v3/{parent}/brands
		/// </summary>
		/// <param name="parent">Required. The resource name of the account being queried. The format is `accounts/{account_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBrandsResponse> Travelpartner_accounts_brands_listAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/brands";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBrandsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new brand. Because Google detects brands from your existing properties, you only need this operation when you want to configure a brand before you send its properties to Google. Note that it might take a couple of days after your listing feed first provides a brand for the brand to appear.
		/// Travelpartner_accounts_brands_create v3/{parent}/brands
		/// </summary>
		/// <param name="parent">Required. The resource name of the Hotel Center account being queried. The format is `accounts/{account_id}`.</param>
		/// <param name="brandId">Required. The partner-determined brand identifier.</param>
		/// <returns>Successful response</returns>
		public async Task<Brand> Travelpartner_accounts_brands_createAsync(string parent, string brandId, Brand requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/brands&brandId=" + (brandId==null? "" : System.Uri.EscapeDataString(brandId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Brand>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the list of hotel views.
		/// Travelpartner_accounts_hotelViews_list v3/{parent}/hotelViews
		/// </summary>
		/// <param name="parent">The resource name of the account being queried. The format is `accounts/{account_id}`.</param>
		/// <param name="filter">Optional. The conditions (fields and expressions) used to filter HotelViews. The syntax requires spaces surrounding the `in` operator. Otherwise, spaces can be omitted. Conditions cannot be joined. The `hotelId` field can be used to select specific hotels. The `liveOnGoogle` field can select properties that Google shows, or properties that are omitted in google search results. The `matchStatus` field can be used to filter the list of HotelViews returned for the account. Examples of valid conditions and their syntax are as follows: * `hotelId = 'hotel_ABC'` * `hotelId in ('hotel_ABC', 'hotel_XYZ')` * `liveOnGoogle = 'TRUE'` * `liveOnGoogle = 'FALSE'` * `matchStatus = 'NOT_MATCHED'` * `matchStatus in ('NOT_MATCHED', 'MATCHED', 'MAP_OVERLAP')`</param>
		/// <param name="pageSize">Number of elements to retrieve in a single page.</param>
		/// <param name="pageToken">Token of the page to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<ListHotelViewsResponse> Travelpartner_accounts_hotelViews_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/hotelViews&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListHotelViewsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns summarized information about hotels.
		/// Travelpartner_accounts_hotelViews_summarize v3/{parent}/hotelViews:summarize
		/// </summary>
		/// <param name="parent">The resource name of the account being queried. The format is `accounts/{account_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<SummarizeHotelViewsResponse> Travelpartner_accounts_hotelViews_summarizeAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/hotelViews:summarize";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SummarizeHotelViewsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the `Icon`s for a partner account.
		/// Travelpartner_accounts_icons_list v3/{parent}/icons
		/// </summary>
		/// <param name="parent">Required. The resource name of the queried partner account. The format is `accounts/{account_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<ListIconsResponse> Travelpartner_accounts_icons_listAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/icons";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListIconsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads a new icon and starts its review process. Generates an `icon_id` and includes it in the icon's resource name, which is the format `accounts/{account_id}/icons/{icon_id}` Returns HTTP status 400 and doesn't trigger the review process if the icon has any of these conditions: * Image is not in PNG format, or not convertible to PNG format. * Size less than 72 pixels * Size greater than 1200 pixels * Aspect ratio other than 1:1
		/// Travelpartner_accounts_icons_create v3/{parent}/icons
		/// </summary>
		/// <param name="parent">Required. The resource name of the partner account owning the icon. The format is `accounts/{account_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<Icon> Travelpartner_accounts_icons_createAsync(string parent, Icon requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/icons";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Icon>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns verified listings with data issues and serving eligibilities
		/// Travelpartner_accounts_listings_verify v3/{parent}/listings:verify
		/// </summary>
		/// <param name="parent">The resource name of the account being queried. The format is `accounts/{account_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<VerifyListingsResponse> Travelpartner_accounts_listings_verifyAsync(string parent, VerifyListingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/listings:verify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VerifyListingsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the available price accuracy views.
		/// Travelpartner_accounts_priceAccuracyViews_list v3/{parent}/priceAccuracyViews
		/// </summary>
		/// <param name="parent">The resource name of the account being queried. The format is `accounts/{account_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPriceAccuracyViewsResponse> Travelpartner_accounts_priceAccuracyViews_listAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/priceAccuracyViews";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPriceAccuracyViewsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the price accuracy summary.
		/// Travelpartner_accounts_priceAccuracyViews_summarize v3/{parent}/priceAccuracyViews:summarize
		/// </summary>
		/// <param name="parent">The resource name of the account that is being queried. The format is `accounts/{account_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<SummarizePriceAccuracyResponse> Travelpartner_accounts_priceAccuracyViews_summarizeAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/priceAccuracyViews:summarize";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SummarizePriceAccuracyResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the entire price coverage history.
		/// Travelpartner_accounts_priceCoverageViews_list v3/{parent}/priceCoverageViews
		/// </summary>
		/// <param name="parent">The resource name of the account being queried. The format is `accounts/{account_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPriceCoverageViewsResponse> Travelpartner_accounts_priceCoverageViews_listAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/priceCoverageViews";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPriceCoverageViewsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the latest price coverage view in full detail.
		/// Travelpartner_accounts_priceCoverageViews_getLatest v3/{parent}/priceCoverageViews:latest
		/// </summary>
		/// <param name="parent">The resource name of the account being queried. The format is `accounts/{account_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<PriceCoverageView> Travelpartner_accounts_priceCoverageViews_getLatestAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/priceCoverageViews:latest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PriceCoverageView>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the names of created reconciliation reports.
		/// Travelpartner_accounts_reconciliationReports_list v3/{parent}/reconciliationReports
		/// </summary>
		/// <param name="parent">The resource name of the account being queried. The format is `accounts/{account_id}`.</param>
		/// <param name="endDate">End of date range to fetch files for. Format is yyyy-mm-dd[THH[:MM[:SS]]]. If empty, reports until the end of time are fetched.</param>
		/// <param name="startDate">Beginning of date range to fetch files for. Format is yyyy-MM-dd[THH[:mm[:SS]]]. If empty, reports from the beginning of time onwards are fetched.</param>
		/// <returns>Successful response</returns>
		public async Task<ListReconciliationReportsResponse> Travelpartner_accounts_reconciliationReports_listAsync(string parent, string endDate, string startDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/reconciliationReports&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListReconciliationReportsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a reconciliation report and uploads it to Google.
		/// Travelpartner_accounts_reconciliationReports_create v3/{parent}/reconciliationReports
		/// </summary>
		/// <param name="parent">The resource name of the account being queried. The format is `accounts/{account_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<CreateReconciliationReportResponse> Travelpartner_accounts_reconciliationReports_createAsync(string parent, ReconciliationReport requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/reconciliationReports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateReconciliationReportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates a reconciliation report.
		/// Travelpartner_accounts_reconciliationReports_validate v3/{parent}/reconciliationReports:validate
		/// </summary>
		/// <param name="parent">The resource name of the account being queried. The format is `accounts/{account_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<ValidateReconciliationReportResponse> Travelpartner_accounts_reconciliationReports_validateAsync(string parent, ReconciliationReport requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/reconciliationReports:validate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ValidateReconciliationReportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
