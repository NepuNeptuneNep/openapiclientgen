//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The output for the BulkPublish operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkPublishResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityPoolId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotAuthorizedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidParameterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalErrorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DuplicateRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlreadyStreamedException
	{
	}
	
	/// <summary>
	/// Response to a successful DeleteDataset request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDatasetResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Dataset Dataset { get; set; }
	}
	
	/// <summary>
	/// A collection of data for an identity pool. An identity pool can have multiple datasets. A dataset is per identity and can be general or associated with a particular entity in an application (like a saved game). Datasets are automatically created if they don't exist. Data is synced by dataset, and a dataset can hold up to 1MB of key-value pairs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dataset
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DataStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumRecords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TooManyRequestsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceConflictException
	{
	}
	
	/// <summary>
	/// Response to a successful DescribeDataset request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDatasetResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Dataset Dataset { get; set; }
	}
	
	/// <summary>
	/// Response to a successful DescribeIdentityPoolUsage request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeIdentityPoolUsageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityPoolUsage IdentityPoolUsage { get; set; }
	}
	
	/// <summary>
	/// Usage information for the identity pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentityPoolUsage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SyncSessionsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DataStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
	}
	
	/// <summary>
	/// The response to a successful DescribeIdentityUsage request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeIdentityUsageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityUsage IdentityUsage { get; set; }
	}
	
	/// <summary>
	/// Usage information for the identity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentityUsage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DatasetCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DataStorage { get; set; }
	}
	
	/// <summary>
	/// The output for the GetBulkPublishDetails operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBulkPublishDetailsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset BulkPublishStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset BulkPublishCompleteTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BulkPublishStatus BulkPublishStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BulkPublishStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 3,
	}
	
	/// <summary>
	/// The response from the GetCognitoEvents request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCognitoEventsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Events Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Events
	{
	}
	
	/// <summary>
	/// The output for the GetIdentityPoolConfiguration operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIdentityPoolConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PushSync PushSync { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CognitoStreams CognitoStreams { get; set; }
	}
	
	/// <summary>
	/// Configuration options to be applied to the identity pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PushSync
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ApplicationArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Configuration options for configure Cognito streams.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CognitoStreams
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamingStatus StreamingStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StreamingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Returned for a successful ListDatasets request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatasetsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Dataset[] Datasets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returned for a successful ListIdentityPoolUsage request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIdentityPoolUsageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityPoolUsage[] IdentityPoolUsages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returned for a successful ListRecordsRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRecordsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Record[] Records { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DatasetSyncCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MergedDatasetNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DatasetExists { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DatasetDeletedAfterRequestedSyncCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SyncSessionToken { get; set; }
	}
	
	/// <summary>
	/// The basic data structure of a dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Record
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SyncCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeviceLastModifiedDate { get; set; }
	}
	
	/// <summary>
	/// Response to a RegisterDevice request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidConfigurationException
	{
	}
	
	/// <summary>
	/// The output for the SetIdentityPoolConfiguration operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetIdentityPoolConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PushSync PushSync { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CognitoStreams CognitoStreams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConcurrentModificationException
	{
	}
	
	/// <summary>
	/// Response to a SubscribeToDataset request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscribeToDatasetResponse
	{
	}
	
	/// <summary>
	/// Response to an UnsubscribeFromDataset request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnsubscribeFromDatasetResponse
	{
	}
	
	/// <summary>
	/// Returned for a successful UpdateRecordsRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRecordsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Record[] Records { get; set; }
	}
	
	/// <summary>
	/// An update operation for a record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecordPatch
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Operation Op { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SyncCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeviceLastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Operation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		replace = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		remove = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidLambdaFunctionOutputException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaThrottledException
	{
	}
	
	/// <summary>
	/// The input for the BulkPublish operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkPublishRequest
	{
	}
	
	/// <summary>
	/// A request to delete the specific dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDatasetRequest
	{
	}
	
	/// <summary>
	/// A request for meta data about a dataset (creation date, number of records, size) by owner and dataset name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDatasetRequest
	{
	}
	
	/// <summary>
	/// A request for usage information about the identity pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeIdentityPoolUsageRequest
	{
	}
	
	/// <summary>
	/// A request for information about the usage of an identity pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeIdentityUsageRequest
	{
	}
	
	/// <summary>
	/// The input for the GetBulkPublishDetails operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBulkPublishDetailsRequest
	{
	}
	
	/// <summary>
	/// A request for a list of the configured Cognito Events
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCognitoEventsRequest
	{
	}
	
	/// <summary>
	/// The input for the GetIdentityPoolConfiguration operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIdentityPoolConfigurationRequest
	{
	}
	
	/// <summary>
	/// Request for a list of datasets for an identity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatasetsRequest
	{
	}
	
	/// <summary>
	/// A request for usage information on an identity pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIdentityPoolUsageRequest
	{
	}
	
	/// <summary>
	/// A request for a list of records.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRecordsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Platform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APNS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APNS_SANDBOX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GCM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADM = 3,
	}
	
	/// <summary>
	/// A request to RegisterDevice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterDeviceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Platform Platform { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// <p>A request to configure Cognito Events"</p>"
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetCognitoEventsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Events Events { get; set; }
	}
	
	/// <summary>
	/// The input for the SetIdentityPoolConfiguration operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetIdentityPoolConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PushSync PushSync { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CognitoStreams CognitoStreams { get; set; }
	}
	
	/// <summary>
	/// A request to SubscribeToDatasetRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscribeToDatasetRequest
	{
	}
	
	/// <summary>
	/// A request to UnsubscribeFromDataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnsubscribeFromDatasetRequest
	{
	}
	
	/// <summary>
	/// A request to post updates to records or add and delete records for a dataset and user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRecordsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecordPatch[] RecordPatches { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SyncSessionToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Initiates a bulk publish of all existing datasets for an Identity Pool to the configured stream. Customers are limited to one successful bulk publish per 24 hours. Bulk publish is an asynchronous request, customers can see the status of the request via the GetBulkPublishDetails operation.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
		/// BulkPublish identitypools/{IdentityPoolId}/bulkpublish
		/// </summary>
		/// <param name="IdentityPoolId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <returns>Success</returns>
		public async Task<BulkPublishResponse> BulkPublishAsync(string IdentityPoolId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/bulkpublish";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BulkPublishResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specific dataset. The dataset will be deleted permanently, and the action can't be undone. Datasets that this dataset was merged with will no longer report the merge. Any subsequent operation on this dataset will result in a ResourceNotFoundException.</p> <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials.</p>
		/// DeleteDataset identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}
		/// </summary>
		/// <param name="IdentityPoolId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="IdentityId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="DatasetName">A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteDatasetResponse> DeleteDatasetAsync(string IdentityPoolId, string IdentityId, string DatasetName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/identities/"+ (IdentityId==null? "" : System.Uri.EscapeDataString(IdentityId))+"/datasets/"+ (DatasetName==null? "" : System.Uri.EscapeDataString(DatasetName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDatasetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets meta data about a dataset by identity and dataset name. With Amazon Cognito Sync, each identity has access only to its own data. Thus, the credentials used to make this API call need to have access to the identity data.</p> <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials. You should use Cognito Identity credentials to make this API call.</p>
		/// DescribeDataset identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}
		/// </summary>
		/// <param name="IdentityPoolId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="IdentityId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="DatasetName">A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeDatasetResponse> DescribeDatasetAsync(string IdentityPoolId, string IdentityId, string DatasetName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/identities/"+ (IdentityId==null? "" : System.Uri.EscapeDataString(IdentityId))+"/datasets/"+ (DatasetName==null? "" : System.Uri.EscapeDataString(DatasetName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDatasetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Posts updates to records and adds and deletes records for a dataset and user.</p> <p>The sync count in the record patch is your last known sync count for that record. The server will reject an UpdateRecords request with a ResourceConflictException if you try to patch a record with a new value but a stale sync count.</p><p>For example, if the sync count on the server is 5 for a key called highScore and you try and submit a new highScore with sync count of 4, the request will be rejected. To obtain the current sync count for a record, call ListRecords. On a successful update of the record, the response returns the new sync count for that record. You should present that sync count the next time you try to update that same record. When the record does not exist, specify the sync count as 0.</p> <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials.</p>
		/// UpdateRecords identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}
		/// </summary>
		/// <param name="IdentityPoolId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="IdentityId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="DatasetName">A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateRecordsResponse> UpdateRecordsAsync(string IdentityPoolId, string IdentityId, string DatasetName, UpdateRecordsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/identities/"+ (IdentityId==null? "" : System.Uri.EscapeDataString(IdentityId))+"/datasets/"+ (DatasetName==null? "" : System.Uri.EscapeDataString(DatasetName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateRecordsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets usage details (for example, data storage) about a particular identity pool.</p> <p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
		/// DescribeIdentityPoolUsage identitypools/{IdentityPoolId}
		/// </summary>
		/// <param name="IdentityPoolId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeIdentityPoolUsageResponse> DescribeIdentityPoolUsageAsync(string IdentityPoolId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeIdentityPoolUsageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets usage information for an identity, including number of datasets and data usage.</p> <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials.</p>
		/// DescribeIdentityUsage identitypools/{IdentityPoolId}/identities/{IdentityId}
		/// </summary>
		/// <param name="IdentityPoolId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="IdentityId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeIdentityUsageResponse> DescribeIdentityUsageAsync(string IdentityPoolId, string IdentityId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/identities/"+ (IdentityId==null? "" : System.Uri.EscapeDataString(IdentityId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeIdentityUsageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Get the status of the last BulkPublish operation for an identity pool.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
		/// GetBulkPublishDetails identitypools/{IdentityPoolId}/getBulkPublishDetails
		/// </summary>
		/// <param name="IdentityPoolId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <returns>Success</returns>
		public async Task<GetBulkPublishDetailsResponse> GetBulkPublishDetailsAsync(string IdentityPoolId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/getBulkPublishDetails";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBulkPublishDetailsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the events and the corresponding Lambda functions associated with an identity pool.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
		/// GetCognitoEvents identitypools/{IdentityPoolId}/events
		/// </summary>
		/// <param name="IdentityPoolId">The Cognito Identity Pool ID for the request
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <returns>Success</returns>
		public async Task<GetCognitoEventsResponse> GetCognitoEventsAsync(string IdentityPoolId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCognitoEventsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the AWS Lambda function for a given event type for an identity pool. This request only updates the key/value pair specified. Other key/values pairs are not updated. To remove a key value pair, pass a empty value for the particular key.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
		/// SetCognitoEvents identitypools/{IdentityPoolId}/events
		/// </summary>
		/// <param name="IdentityPoolId">The Cognito Identity Pool to use when configuring Cognito Events
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <returns>Success</returns>
		public async Task SetCognitoEventsAsync(string IdentityPoolId, SetCognitoEventsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the configuration settings of an identity pool.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
		/// GetIdentityPoolConfiguration identitypools/{IdentityPoolId}/configuration
		/// </summary>
		/// <param name="IdentityPoolId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. This is the ID of the pool for which to return a configuration.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <returns>Success</returns>
		public async Task<GetIdentityPoolConfigurationResponse> GetIdentityPoolConfigurationAsync(string IdentityPoolId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetIdentityPoolConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the necessary configuration for push sync.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
		/// SetIdentityPoolConfiguration identitypools/{IdentityPoolId}/configuration
		/// </summary>
		/// <param name="IdentityPoolId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. This is the ID of the pool to modify.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <returns>Success</returns>
		public async Task<SetIdentityPoolConfigurationResponse> SetIdentityPoolConfigurationAsync(string IdentityPoolId, SetIdentityPoolConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetIdentityPoolConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists datasets for an identity. With Amazon Cognito Sync, each identity has access only to its own data. Thus, the credentials used to make this API call need to have access to the identity data.</p> <p>ListDatasets can be called with temporary user credentials provided by Cognito Identity or with developer credentials. You should use the Cognito Identity credentials to make this API call.</p>
		/// ListDatasets identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets
		/// </summary>
		/// <param name="IdentityPoolId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="IdentityId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="nextToken">A pagination token for obtaining the next page of results.</param>
		/// <param name="maxResults">The maximum number of results to be returned.</param>
		/// <returns>Success</returns>
		public async Task<ListDatasetsResponse> ListDatasetsAsync(string IdentityPoolId, string IdentityId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/identities/"+ (IdentityId==null? "" : System.Uri.EscapeDataString(IdentityId))+"/datasets&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDatasetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a list of identity pools registered with Cognito.</p> <p>ListIdentityPoolUsage can only be called with developer credentials. You cannot make this API call with the temporary user credentials provided by Cognito Identity.</p>
		/// ListIdentityPoolUsage identitypools
		/// </summary>
		/// <param name="nextToken">A pagination token for obtaining the next page of results.</param>
		/// <param name="maxResults">The maximum number of results to be returned.</param>
		/// <returns>Success</returns>
		public async Task<ListIdentityPoolUsageResponse> ListIdentityPoolUsageAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListIdentityPoolUsageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets paginated records, optionally changed after a particular sync count for a dataset and identity. With Amazon Cognito Sync, each identity has access only to its own data. Thus, the credentials used to make this API call need to have access to the identity data.</p> <p>ListRecords can be called with temporary user credentials provided by Cognito Identity or with developer credentials. You should use Cognito Identity credentials to make this API call.</p>
		/// ListRecords identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records
		/// </summary>
		/// <param name="IdentityPoolId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="IdentityId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="DatasetName">A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="lastSyncCount">The last server sync count for this record.</param>
		/// <param name="nextToken">A pagination token for obtaining the next page of results.</param>
		/// <param name="maxResults">The maximum number of results to be returned.</param>
		/// <param name="syncSessionToken">A token containing a session ID, identity ID, and expiration.</param>
		/// <returns>Success</returns>
		public async Task<ListRecordsResponse> ListRecordsAsync(string IdentityPoolId, string IdentityId, string DatasetName, int lastSyncCount, string nextToken, int maxResults, string syncSessionToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/identities/"+ (IdentityId==null? "" : System.Uri.EscapeDataString(IdentityId))+"/datasets/"+ (DatasetName==null? "" : System.Uri.EscapeDataString(DatasetName))+"/records&lastSyncCount="+lastSyncCount+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&syncSessionToken=" + (syncSessionToken==null? "" : System.Uri.EscapeDataString(syncSessionToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRecordsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Registers a device to receive push sync notifications.</p><p>This API can only be called with temporary credentials provided by Cognito Identity. You cannot call this API with developer credentials.</p>
		/// RegisterDevice identitypools/{IdentityPoolId}/identity/{IdentityId}/device
		/// </summary>
		/// <param name="IdentityPoolId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. Here, the ID of the pool that the identity belongs to.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="IdentityId">The unique ID for this identity.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <returns>Success</returns>
		public async Task<RegisterDeviceResponse> RegisterDeviceAsync(string IdentityPoolId, string IdentityId, RegisterDevicePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/identity/"+ (IdentityId==null? "" : System.Uri.EscapeDataString(IdentityId))+"/device";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Subscribes to receive notifications when a dataset is modified by another device.</p><p>This API can only be called with temporary credentials provided by Cognito Identity. You cannot call this API with developer credentials.</p>
		/// SubscribeToDataset identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}
		/// </summary>
		/// <param name="IdentityPoolId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. The ID of the pool to which the identity belongs.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="IdentityId">Unique ID for this identity.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="DatasetName">The name of the dataset to subcribe to.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="DeviceId">The unique ID generated for this device by Cognito.
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<SubscribeToDatasetResponse> SubscribeToDatasetAsync(string IdentityPoolId, string IdentityId, string DatasetName, string DeviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/identities/"+ (IdentityId==null? "" : System.Uri.EscapeDataString(IdentityId))+"/datasets/"+ (DatasetName==null? "" : System.Uri.EscapeDataString(DatasetName))+"/subscriptions/"+ (DeviceId==null? "" : System.Uri.EscapeDataString(DeviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubscribeToDatasetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Unsubscribes from receiving notifications when a dataset is modified by another device.</p><p>This API can only be called with temporary credentials provided by Cognito Identity. You cannot call this API with developer credentials.</p>
		/// UnsubscribeFromDataset identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}
		/// </summary>
		/// <param name="IdentityPoolId">A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. The ID of the pool to which this identity belongs.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="IdentityId">Unique ID for this identity.
		/// Min length: 1
		/// Max length: 55
		// </param>
		/// <param name="DatasetName">The name of the dataset from which to unsubcribe.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="DeviceId">The unique ID generated for this device by Cognito.
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<UnsubscribeFromDatasetResponse> UnsubscribeFromDatasetAsync(string IdentityPoolId, string IdentityId, string DatasetName, string DeviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "identitypools/"+ (IdentityPoolId==null? "" : System.Uri.EscapeDataString(IdentityPoolId))+"/identities/"+ (IdentityId==null? "" : System.Uri.EscapeDataString(IdentityId))+"/datasets/"+ (DatasetName==null? "" : System.Uri.EscapeDataString(DatasetName))+"/subscriptions/"+ (DeviceId==null? "" : System.Uri.EscapeDataString(DeviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UnsubscribeFromDatasetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class UpdateRecordsPostBody
	{
		
		/// <summary>
		/// The unique ID generated for this device by Cognito.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// A list of patch operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecordPatch[] RecordPatches { get; set; }
		
		/// <summary>
		/// The SyncSessionToken returned by a previous call to ListRecords for this dataset and identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SyncSessionToken { get; set; }
	}
	
	public class SetCognitoEventsPostBody
	{
		
		/// <summary>
		/// The events to configure
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Events { get; set; }
	}
	
	public class SetIdentityPoolConfigurationPostBody
	{
		
		/// <summary>
		/// Configuration options to be applied to the identity pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SetIdentityPoolConfigurationPostBodyPushSync PushSync { get; set; }
		
		/// <summary>
		/// Configuration options for configure Cognito streams.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SetIdentityPoolConfigurationPostBodyCognitoStreams CognitoStreams { get; set; }
	}
	
	public class SetIdentityPoolConfigurationPostBodyPushSync
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ApplicationArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	public class SetIdentityPoolConfigurationPostBodyCognitoStreams
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamingStatus StreamingStatus { get; set; }
	}
	
	public class RegisterDevicePostBody
	{
		
		/// <summary>
		/// The SNS platform type (e.g. GCM, SDM, APNS, APNS_SANDBOX).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Platform Platform { get; set; }
		
		/// <summary>
		/// The push token.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Token { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
