//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Tax rates by Country Code
		/// Get request. This method returns all tax rates for country discovered based on country code. The country code must be 2 letters ISO 3166-1 alfa-2 country code (see <a href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes">here</a> for more information). You can use 'filter' parameter to narrow results to selected type of tax
		/// <p>For US sales tax you can filter the tax rate you want for each state or zip code with one of the following: (they are case sensitive)</p>
		/// <ul>
		/// <li>CombinedRate</li>
		/// <li>StateRate</li>
		/// <li>CountyRate</li>
		/// <li>CityRate</li>
		/// <li>SpecialRate</li>
		/// </ul>
		/// <pre><code class="js">var taxrates_endpoint = 'tax/countrycode';
		/// var taxrates_params = {'domain':'api.taxrates.io', 'country_code':'IE', 'product_code':'C010'};
		/// var taxrates_url = '/api/v1/';
		/// if ( localStorage.getItem("Taxrates_API_Client_Secret") ){
		/// jQuery.support.cors = true;
		/// jQuery.ajax({
		/// url: taxrates_url+taxrates_endpoint,
		/// type: 'get',
		/// method: 'get',
		/// dataType: "json",
		/// data: taxrates_params,
		/// beforeSend: function (request) {
		/// request.withCredentials = true;
		/// request.setRequestHeader("Authorization", "Apikey " + localStorage.getItem("Taxrates_API_Client_Secret"));
		/// },
		/// headers: {
		/// "accept": "application/json"
		/// },
		/// contentType: 'application/json; charset=utf-8',
		/// success: function (data) {
		/// //Maintain errors inside success because the API may return 200 in general, but different code inside
		/// if(data.ErrorCode=='404' || data.ErrorCode=='500'){
		/// //Maintain errors here
		/// console.log(data.ErrorMessage);
		/// return false;
		/// }else{
		/// var rates = [];
		/// var i=0;
		/// jQuery.each(data, function(k, v) {
		/// if(v.hasOwnProperty("taxes")){
		/// jQuery.each(v.taxes, function(m, w) {
		/// rates[i] = [];
		/// //Only showing standard rate type
		/// if( w.Type == "standard" ){
		/// rates[i][0] = w.Country;
		/// rates[i][1] = w.Type;
		/// rates[i][2] = w.data_value;
		/// i++;
		/// }
		/// });
		/// }
		/// //Now you have all your rates inside rates variable.
		/// }).fail(function(xhr) {
		/// //Maintain your errors here
		/// return false;
		/// });
		/// return true;
		/// }else{
		/// //Not logged into taxrates.io
		/// //Maintain your errors here
		/// return false;
		/// }</code></pre>
		/// 
		/// TaxRatesByCountryCode v1/tax/countrycode
		/// </summary>
		/// <param name="domain">Domain name: api.taxrates.io</param>
		/// <param name="country_code">Country code alpha 2</param>
		/// <param name="filter">You can filter your taxes by one of following types: 'standard', 'reduced', 'second reduced', 'third reduced' and 'super reduced'.</param>
		/// <param name="zip">You must provide a zip code if one of your selected countries is United States and you've had selected a state on your Taxrates.io member's dashboard.</param>
		/// <param name="product_codes_">Use one or many product code/s.</param>
		/// <param name="province ">Use for Canada</param>
		/// <returns>Success</returns>
		public async Task<TaxRatesByCountryCodeReturn> TaxRatesByCountryCodeAsync(string domain, string country_code, string filter, string zip, string product_codes_, string province , string date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tax/countrycode?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&country_code=" + (country_code==null? "" : System.Uri.EscapeDataString(country_code))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&zip=" + (zip==null? "" : System.Uri.EscapeDataString(zip))+"&product_codes[]=" + (product_codes_==null? "" : System.Uri.EscapeDataString(product_codes_))+"&province =" + (province ==null? "" : System.Uri.EscapeDataString(province ))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TaxRatesByCountryCodeReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tax rates by IP address
		/// Get request. This method returns all tax rates for country discovered on either your IP address or IP address param. The IP param is not required. When empty, the taxrates.io will try to discover your IP address and based on this will retrieve the tax rates. You can use 'filter' parameter to narrow results to selected type of tax
		/// <p>For US sales tax you can filter the tax rate you want for each state or zip code with one of the following: (they are case sensitive)</p>
		/// <ul>
		/// <li>CombinedRate</li>
		/// <li>StateRate</li>
		/// <li>CountyRate</li>
		/// <li>CityRate</li>
		/// <li>SpecialRate</li>
		/// </ul>
		/// <pre><code class="js">var taxrates_endpoint = 'tax/ip';
		/// var taxrates_params = {'domain':'api.taxrates.io', 'ip':'208.80.152.201', 'product_code':'C010'};
		/// var taxrates_url = '/api/v1/';
		/// if ( localStorage.getItem("Taxrates_API_Client_Secret") ){
		/// jQuery.support.cors = true;
		/// jQuery.ajax({
		/// url: taxrates_url+taxrates_endpoint,
		/// type: 'get',
		/// method: 'get',
		/// dataType: "json",
		/// data: taxrates_params,
		/// beforeSend: function (request) {
		/// request.withCredentials = true;
		/// request.setRequestHeader("Authorization", "Apikey " + localStorage.getItem("Taxrates_API_Client_Secret"));
		/// },
		/// headers: {
		/// "accept": "application/json"
		/// },
		/// contentType: 'application/json; charset=utf-8',
		/// success: function (data) {
		/// //Maintain errors inside success because the API may return 200 in general, but different code inside
		/// if(data.ErrorCode=='404' || data.ErrorCode=='500'){
		/// //Maintain errors here
		/// console.log(data.ErrorMessage);
		/// return false;
		/// }else{
		/// var rates = [];
		/// var i=0;
		/// jQuery.each(data, function(k, v) {
		/// if(v.hasOwnProperty("taxes")){
		/// jQuery.each(v.taxes, function(m, w) {
		/// rates[i] = [];
		/// //Only showing standard rate type
		/// if( w.Type == "standard" ){
		/// rates[i][0] = w.Country;
		/// rates[i][1] = w.Type;
		/// rates[i][2] = w.data_value;
		/// i++;
		/// }
		/// });
		/// }
		/// //Now you have all your rates inside rates variable.
		/// }).fail(function(xhr) {
		/// //Maintain your errors here
		/// return false;
		/// });
		/// return true;
		/// }else{
		/// //Not logged into taxrates.io
		/// //Maintain your errors here
		/// return false;
		/// }</code></pre>
		/// 
		/// TaxRatesByIpAddress v1/tax/ip
		/// </summary>
		/// <param name="domain">Domain name: api.taxrates.io</param>
		/// <param name="ip">Customer's IP address</param>
		/// <param name="filter">For US sales tax you can filter the tax type</param>
		/// <param name="zip">For US sales tax a Zipcode must be proivded</param>
		/// <param name="product_code">Your can filter your taxes by product code</param>
		/// <returns>An array of tax rates for VAT, GST & TAX</returns>
		public async Task<TaxRatesByIpAddressReturn[]> TaxRatesByIpAddressAsync(string domain, string ip, string filter, string zip, string product_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tax/ip?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&ip=" + (ip==null? "" : System.Uri.EscapeDataString(ip))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&zip=" + (zip==null? "" : System.Uri.EscapeDataString(zip))+"&product_code=" + (product_code==null? "" : System.Uri.EscapeDataString(product_code));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TaxRatesByIpAddressReturn[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All tax rates
		/// <p>Get request. This method returns all tax rates configured on your account. Based on your country selection the endpoint will return all taxes for all countries. You can use the 'filter' parameter to narrow results to selected type of tax. Use 'zip' parameter when you have selected the United States.</p>
		/// <p>We have development an easy to use scheduler so you can call the API to get the rates every hour or day. Please click on the following link to see the <a href="https://gist.github.com/gregbird/cd904ff230cdf86253716aa351154edb">code on Github</a>.</p>
		/// <p><b>Please note</b> in cases when a US state doesn't have sales tax and when a product is tax exempt for a zip code or for a state the API response will be "null"</p>
		/// <p>To get a response you need to have selected a product code in your Taxrates.io dashboard, please see the Introduction section above for description of the different types of product codes.</p>
		/// <p>For US sales tax you can filter the tax rate you want for each state or zip code with one of the following: (they are case sensitive)</p>
		/// <ul>
		/// <li>CombinedRate</li>
		/// <li>StateRate</li>
		/// <li>CountyRate</li>
		/// <li>CityRate</li>
		/// <li>SpecialRate</li>
		/// </ul>
		/// <pre><code class="js">
		/// var taxrates_endpoint = 'tax/rates';
		/// var taxrates_params = {'domain':'api.taxrates.io'};
		/// var taxrates_url = '/api/v3/';
		/// if ( localStorage.getItem("Taxrates_API_Client_Secret") ){
		/// jQuery.support.cors = true;
		/// jQuery.ajax({
		/// url: taxrates_url+taxrates_endpoint,
		/// type: 'get',
		/// method: 'get',
		/// dataType: "json",
		/// data: taxrates_params,
		/// beforeSend: function (request) {
		/// request.withCredentials = true;
		/// request.setRequestHeader("Authorization", "Apikey " + localStorage.getItem("Taxrates_API_Client_Secret"));
		/// },
		/// headers: {
		/// "accept": "application/json"
		/// },
		/// contentType: 'application/json; charset=utf-8',
		/// success: function (data, textStatus, jqXHR) {
		/// //Maintain errors inside success because the API may return 200 in general, but different code inside
		/// if(data.ErrorCode=='404' || data.ErrorCode=='500'){
		/// //Maintain errors here
		/// console.log(data.ErrorMessage);
		/// return false;
		/// }else{
		/// var rates = [];
		/// var i=0;
		/// var taxrates_range = '';
		/// jQuery.each(data, function(k, v) {
		/// if(v.hasOwnProperty("rates")){
		/// jQuery.each(v.rates, function(m, w) {
		/// rates[i] = [];
		/// //Only showing standard rate type
		/// if( w.Type == "standard" ){
		/// rates[i][0] = w.Type;
		/// rates[i][1] = w.data_value;
		/// rates[i][2] = w.product_code;
		/// i++;
		/// }
		/// });
		/// }
		/// }).fail(function(xhr) {
		/// //Maintain your errors here
		/// return false;
		/// });
		/// var cursor = jqXHR.getResponseHeader('X-Cursor-Next');
		/// if (cursor) {
		/// // get next page...
		/// }
		/// return true;
		/// }else{
		/// //Not logged into taxrates.io
		/// //Maintain your errors here
		/// return false;
		/// }</code></pre>
		/// 
		/// AllTaxRates v3/tax/rates
		/// </summary>
		/// <param name="domain">Domain name: api.taxrates.io</param>
		/// <param name="filter">You can filter your taxes by one of following types: 'standard', 'CombinedRate', 'CountyRate', 'CityRate', 'SPDRate' and 'MTARate'.</param>
		/// <param name="cursor">Cursor shows from which record you want to get information. Default value is 0, next value can be retrieved from X-Cursor-Next header.</param>
		/// <returns>An array of locations with tax rates</returns>
		public async Task<AllTaxRatesReturn[]> AllTaxRatesAsync(string domain, string filter, string cursor, string Product_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/tax/rates?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&Product_code=" + (Product_code==null? "" : System.Uri.EscapeDataString(Product_code));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AllTaxRatesReturn[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class TaxRatesByCountryCodeReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="country_name")]
		public string Country_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public TaxRatesByCountryCodeReturnTaxes[] TaxRatesByCountryCodeReturnTaxes { get; set; }
	}
	
	public class TaxRatesByCountryCodeReturnTaxes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data_name")]
		public string Data_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data_value")]
		public string Data_value { get; set; }
	}
	
	public class TaxRatesByIpAddressReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="country_name")]
		public string Country_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public TaxRatesByIpAddressReturnTaxes[] TaxRatesByIpAddressReturnTaxes { get; set; }
	}
	
	public class TaxRatesByIpAddressReturnTaxes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data_name")]
		public string Data_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data_value")]
		public string Data_value { get; set; }
	}
	
	public class AllTaxRatesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rates")]
		public AllTaxRatesReturnRates[] AllTaxRatesReturnRates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	public class AllTaxRatesReturnRates
	{
		
		[System.Runtime.Serialization.DataMember(Name="data_name")]
		public string Data_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data_value")]
		public string Data_value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_code")]
		public string Product_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
