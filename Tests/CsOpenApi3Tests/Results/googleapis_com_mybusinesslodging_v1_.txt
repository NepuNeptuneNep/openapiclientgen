//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Physical adaptations made to the property in consideration of varying levels of human physical ability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Accessibility
	{
		
		/// <summary>
		/// Mobility accessible. Throughout the property there are physical adaptations to ease the stay of a person in a wheelchair, such as auto-opening doors, wide elevators, wide bathrooms or ramps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessible")]
		public System.Nullable<System.Boolean> MobilityAccessible { get; set; }
		
		/// <summary>
		/// Mobility accessible elevator. A lift that transports people from one level to another and is built to accommodate a wheelchair-using passenger owing to the width of its doors and placement of call buttons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleElevator")]
		public System.Nullable<System.Boolean> MobilityAccessibleElevator { get; set; }
		
		/// <summary>
		/// Mobility accessible elevator exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleElevatorException")]
		public System.Nullable<AccessibilityMobilityAccessibleElevatorException> MobilityAccessibleElevatorException { get; set; }
		
		/// <summary>
		/// Mobility accessible exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleException")]
		public AccessibilityMobilityAccessibleElevatorException MobilityAccessibleException { get; set; }
		
		/// <summary>
		/// Mobility accessible parking. The presence of a marked, designated area of prescribed size in which only registered, labeled vehicles transporting a person with physical challenges may park.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleParking")]
		public System.Nullable<System.Boolean> MobilityAccessibleParking { get; set; }
		
		/// <summary>
		/// Mobility accessible parking exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleParkingException")]
		public AccessibilityMobilityAccessibleElevatorException MobilityAccessibleParkingException { get; set; }
		
		/// <summary>
		/// Mobility accessible pool. A swimming pool equipped with a mechanical chair that can be lowered and raised for the purpose of moving physically challenged guests into and out of the pool. May be powered by electricity or water. Also known as pool lift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessiblePool")]
		public System.Nullable<System.Boolean> MobilityAccessiblePool { get; set; }
		
		/// <summary>
		/// Mobility accessible pool exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessiblePoolException")]
		public AccessibilityMobilityAccessibleElevatorException MobilityAccessiblePoolException { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccessibilityMobilityAccessibleElevatorException
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCEPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDER_CONSTRUCTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPENDENT_ON_SEASON = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPENDENT_ON_DAY_OF_WEEK = 3,
	}
	
	/// <summary>
	/// Amenities and features related to leisure and play.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Activities
	{
		
		/// <summary>
		/// Beach access. The hotel property is in close proximity to a beach and offers a way to get to that beach. This can include a route to the beach such as stairs down if hotel is on a bluff, or a short trail. Not the same as beachfront (with beach access, the hotel's proximity is close to but not right on the beach).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beachAccess")]
		public System.Nullable<System.Boolean> BeachAccess { get; set; }
		
		/// <summary>
		/// Beach access exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beachAccessException")]
		public AccessibilityMobilityAccessibleElevatorException BeachAccessException { get; set; }
		
		/// <summary>
		/// Breach front. The hotel property is physically located on the beach alongside an ocean, sea, gulf, or bay. It is not on a lake, river, stream, or pond. The hotel is not separated from the beach by a public road allowing vehicular, pedestrian, or bicycle traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beachFront")]
		public System.Nullable<System.Boolean> BeachFront { get; set; }
		
		/// <summary>
		/// Beach front exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beachFrontException")]
		public AccessibilityMobilityAccessibleElevatorException BeachFrontException { get; set; }
		
		/// <summary>
		/// Bicycle rental. The hotel owns bicycles that it permits guests to borrow and use. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bicycleRental")]
		public System.Nullable<System.Boolean> BicycleRental { get; set; }
		
		/// <summary>
		/// Bicycle rental exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bicycleRentalException")]
		public AccessibilityMobilityAccessibleElevatorException BicycleRentalException { get; set; }
		
		/// <summary>
		/// Boutique stores. There are stores selling clothing, jewelry, art and decor either on hotel premises or very close by. Does not refer to the hotel gift shop or convenience store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boutiqueStores")]
		public System.Nullable<System.Boolean> BoutiqueStores { get; set; }
		
		/// <summary>
		/// Boutique stores exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boutiqueStoresException")]
		public AccessibilityMobilityAccessibleElevatorException BoutiqueStoresException { get; set; }
		
		/// <summary>
		/// Casino. A space designated for gambling and gaming featuring croupier-run table and card games, as well as electronic slot machines. May be on hotel premises or located nearby.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="casino")]
		public System.Nullable<System.Boolean> Casino { get; set; }
		
		/// <summary>
		/// Casino exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="casinoException")]
		public AccessibilityMobilityAccessibleElevatorException CasinoException { get; set; }
		
		/// <summary>
		/// Free bicycle rental. The hotel owns bicycles that it permits guests to borrow and use for free.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeBicycleRental")]
		public System.Nullable<System.Boolean> FreeBicycleRental { get; set; }
		
		/// <summary>
		/// Free bicycle rental exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeBicycleRentalException")]
		public AccessibilityMobilityAccessibleElevatorException FreeBicycleRentalException { get; set; }
		
		/// <summary>
		/// Free watercraft rental. The hotel owns watercraft that it permits guests to borrow and use for free.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeWatercraftRental")]
		public System.Nullable<System.Boolean> FreeWatercraftRental { get; set; }
		
		/// <summary>
		/// Free Watercraft rental exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeWatercraftRentalException")]
		public AccessibilityMobilityAccessibleElevatorException FreeWatercraftRentalException { get; set; }
		
		/// <summary>
		/// Game room. There is a room at the hotel containing electronic machines for play such as pinball, prize machines, driving simulators, and other items commonly found at a family fun center or arcade. May also include non-electronic games like pool, foosball, darts, and more. May or may not be designed for children. Also known as arcade, fun room, or family fun center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gameRoom")]
		public System.Nullable<System.Boolean> GameRoom { get; set; }
		
		/// <summary>
		/// Game room exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gameRoomException")]
		public AccessibilityMobilityAccessibleElevatorException GameRoomException { get; set; }
		
		/// <summary>
		/// Golf. There is a golf course on hotel grounds or there is a nearby, independently run golf course that allows use by hotel guests. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="golf")]
		public System.Nullable<System.Boolean> Golf { get; set; }
		
		/// <summary>
		/// Golf exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="golfException")]
		public AccessibilityMobilityAccessibleElevatorException GolfException { get; set; }
		
		/// <summary>
		/// Horseback riding. The hotel has a horse barn onsite or an affiliation with a nearby barn to allow for guests to sit astride a horse and direct it to walk, trot, cantor, gallop and/or jump. Can be in a riding ring, on designated paths, or in the wilderness. May or may not involve instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horsebackRiding")]
		public System.Nullable<System.Boolean> HorsebackRiding { get; set; }
		
		/// <summary>
		/// Horseback riding exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horsebackRidingException")]
		public AccessibilityMobilityAccessibleElevatorException HorsebackRidingException { get; set; }
		
		/// <summary>
		/// Nightclub. There is a room at the hotel with a bar, a dance floor, and seating where designated staffers play dance music. There may also be a designated area for the performance of live music, singing and comedy acts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nightclub")]
		public System.Nullable<System.Boolean> Nightclub { get; set; }
		
		/// <summary>
		/// Nightclub exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nightclubException")]
		public AccessibilityMobilityAccessibleElevatorException NightclubException { get; set; }
		
		/// <summary>
		/// Private beach. The beach which is in close proximity to the hotel is open only to guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateBeach")]
		public System.Nullable<System.Boolean> PrivateBeach { get; set; }
		
		/// <summary>
		/// Private beach exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateBeachException")]
		public AccessibilityMobilityAccessibleElevatorException PrivateBeachException { get; set; }
		
		/// <summary>
		/// Scuba. The provision for guests to dive under naturally occurring water fitted with a self-contained underwater breathing apparatus (SCUBA) for the purpose of exploring underwater life. Apparatus consists of a tank providing oxygen to the diver through a mask. Requires certification of the diver and supervision. The hotel may have the activity at its own waterfront or have an affiliation with a nearby facility. Required equipment is most often supplied to guests. Can be free or for a fee. Not snorkeling. Not done in a swimming pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scuba")]
		public System.Nullable<System.Boolean> Scuba { get; set; }
		
		/// <summary>
		/// Scuba exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scubaException")]
		public AccessibilityMobilityAccessibleElevatorException ScubaException { get; set; }
		
		/// <summary>
		/// Snorkeling. The provision for guests to participate in a recreational water activity in which swimmers wear a diving mask, a simple, shaped breathing tube and flippers/swim fins for the purpose of exploring below the surface of an ocean, gulf or lake. Does not usually require user certification or professional supervision. Equipment may or may not be available for rent or purchase. Not scuba diving.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snorkeling")]
		public System.Nullable<System.Boolean> Snorkeling { get; set; }
		
		/// <summary>
		/// Snorkeling exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snorkelingException")]
		public AccessibilityMobilityAccessibleElevatorException SnorkelingException { get; set; }
		
		/// <summary>
		/// Tennis. The hotel has the requisite court(s) on site or has an affiliation with a nearby facility for the purpose of providing guests with the opportunity to play a two-sided court-based game in which players use a stringed racquet to hit a ball across a net to the side of the opposing player. The court can be indoors or outdoors. Instructors, racquets and balls may or may not be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tennis")]
		public System.Nullable<System.Boolean> Tennis { get; set; }
		
		/// <summary>
		/// Tennis exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tennisException")]
		public AccessibilityMobilityAccessibleElevatorException TennisException { get; set; }
		
		/// <summary>
		/// Water skiing. The provision of giving guests the opportunity to be pulled across naturally occurring water while standing on skis and holding a tow rope attached to a motorboat. Can occur on hotel premises or at a nearby waterfront. Most often performed in a lake or ocean.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterSkiing")]
		public System.Nullable<System.Boolean> WaterSkiing { get; set; }
		
		/// <summary>
		/// Water skiing exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterSkiingException")]
		public AccessibilityMobilityAccessibleElevatorException WaterSkiingException { get; set; }
		
		/// <summary>
		/// Watercraft rental. The hotel owns water vessels that it permits guests to borrow and use. Can be free or for a fee. Watercraft may include boats, pedal boats, rowboats, sailboats, powerboats, canoes, kayaks, or personal watercraft (such as a Jet Ski).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watercraftRental")]
		public System.Nullable<System.Boolean> WatercraftRental { get; set; }
		
		/// <summary>
		/// Watercraft rental exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watercraftRentalException")]
		public AccessibilityMobilityAccessibleElevatorException WatercraftRentalException { get; set; }
	}
	
	/// <summary>
	/// Features of the property of specific interest to the business traveler.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Business
	{
		
		/// <summary>
		/// Business center. A designated room at the hotel with one or more desks and equipped with guest-use computers, printers, fax machines and/or photocopiers. May or may not be open 24/7. May or may not require a key to access. Not a meeting room or conference room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessCenter")]
		public System.Nullable<System.Boolean> BusinessCenter { get; set; }
		
		/// <summary>
		/// Business center exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessCenterException")]
		public AccessibilityMobilityAccessibleElevatorException BusinessCenterException { get; set; }
		
		/// <summary>
		/// Meeting rooms. Rooms at the hotel designated for business-related gatherings. Rooms are usually equipped with tables or desks, office chairs and audio/visual facilities to allow for presentations and conference calls. Also known as conference rooms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetingRooms")]
		public System.Nullable<System.Boolean> MeetingRooms { get; set; }
		
		/// <summary>
		/// Meeting rooms count. The number of meeting rooms at the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetingRoomsCount")]
		public System.Nullable<System.Int32> MeetingRoomsCount { get; set; }
		
		/// <summary>
		/// Meeting rooms count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetingRoomsCountException")]
		public AccessibilityMobilityAccessibleElevatorException MeetingRoomsCountException { get; set; }
		
		/// <summary>
		/// Meeting rooms exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetingRoomsException")]
		public AccessibilityMobilityAccessibleElevatorException MeetingRoomsException { get; set; }
	}
	
	/// <summary>
	/// The ways in which the property provides guests with the ability to access the internet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Connectivity
	{
		
		/// <summary>
		/// Free wifi. The hotel offers guests wifi for free.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeWifi")]
		public System.Nullable<System.Boolean> FreeWifi { get; set; }
		
		/// <summary>
		/// Free wifi exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeWifiException")]
		public AccessibilityMobilityAccessibleElevatorException FreeWifiException { get; set; }
		
		/// <summary>
		/// Public area wifi available. Guests have the ability to wirelessly connect to the internet in the areas of the hotel accessible to anyone. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicAreaWifiAvailable")]
		public System.Nullable<System.Boolean> PublicAreaWifiAvailable { get; set; }
		
		/// <summary>
		/// Public area wifi available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicAreaWifiAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException PublicAreaWifiAvailableException { get; set; }
		
		/// <summary>
		/// Public internet terminal. An area of the hotel supplied with computers and designated for the purpose of providing guests with the ability to access the internet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicInternetTerminal")]
		public System.Nullable<System.Boolean> PublicInternetTerminal { get; set; }
		
		/// <summary>
		/// Public internet terminal exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicInternetTerminalException")]
		public AccessibilityMobilityAccessibleElevatorException PublicInternetTerminalException { get; set; }
		
		/// <summary>
		/// Wifi available. The hotel provides the ability for guests to wirelessly connect to the internet. Can be in the public areas of the hotel and/or in the guest rooms. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wifiAvailable")]
		public System.Nullable<System.Boolean> WifiAvailable { get; set; }
		
		/// <summary>
		/// Wifi available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wifiAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException WifiAvailableException { get; set; }
	}
	
	/// <summary>
	/// An eco certificate awarded to the hotel. Deprecated: this message is no longer populated. All certification data is now provided by BeCause.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EcoCertification
	{
		
		/// <summary>
		/// Whether the eco certificate was awarded or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="awarded")]
		public System.Nullable<System.Boolean> Awarded { get; set; }
		
		/// <summary>
		/// Awarded exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="awardedException")]
		public AccessibilityMobilityAccessibleElevatorException AwardedException { get; set; }
		
		/// <summary>
		/// Required. The eco certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ecoCertificate")]
		public System.Nullable<EcoCertificationEcoCertificate> EcoCertificate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EcoCertificationEcoCertificate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECO_CERTIFICATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISO14001 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISO50001 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASIAN_ECOTOURISM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIOSPHERE_RESPOSNIBLE_TOURISM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUREAU_VERITAS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTROL_UNION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EARTHCHECK = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECO_CERTIFICATION_MALTA = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECOTOURISM_AUSTRALIAS_ECO = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREAT_GREEN_DEAL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN_GLOBE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN_GROWTH2050 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN_KEY = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN_KEY_ECO_RATING = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN_SEAL = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN_STAR = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN_TOURISM_ACTIVE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HILTON_LIGHTSTAY = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOSTELLING_INTERNATIONALS_QUALITY_AND_SUSTAINABILITY = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOTELES_MAS_VERDES = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORDIC_SWAN_ECOLABEL = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFERRED_BY_NATURE_SUSTAINABLE_TOURISM = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSTAINABLE_TRAVEL_IRELAND = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOF_TIGERS_INITITIVES_PUG = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAVELIFE = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNITED_CERTIFICATION_SYSTEMS_LIMITED = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIREO_SRL = 27,
	}
	
	/// <summary>
	/// Energy efficiency practices implemented at the hotel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnergyEfficiency
	{
		
		/// <summary>
		/// Carbon free energy sources. Property sources carbon-free electricity via at least one of the following methods: on-site clean energy generation, power purchase agreement(s) with clean energy generators, green power provided by electricity supplier, or purchases of Energy Attribute Certificates (such as Renewable Energy Certificates or Guarantees of Origin).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carbonFreeEnergySources")]
		public System.Nullable<System.Boolean> CarbonFreeEnergySources { get; set; }
		
		/// <summary>
		/// Carbon free energy sources exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carbonFreeEnergySourcesException")]
		public AccessibilityMobilityAccessibleElevatorException CarbonFreeEnergySourcesException { get; set; }
		
		/// <summary>
		/// Energy conservation program. The property tracks corporate-level Scope 1 and 2 GHG emissions, and Scope 3 emissions if available. The property has a commitment to implement initiatives that reduce GHG emissions year over year. The property has shown an absolute reduction in emissions for at least 2 years. Emissions are either verfied by a third-party and/or published in external communications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyConservationProgram")]
		public System.Nullable<System.Boolean> EnergyConservationProgram { get; set; }
		
		/// <summary>
		/// Energy conservation program exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyConservationProgramException")]
		public AccessibilityMobilityAccessibleElevatorException EnergyConservationProgramException { get; set; }
		
		/// <summary>
		/// Energy efficient heating and cooling systems. The property doesn't use chlorofluorocarbon (CFC)-based refrigerants in heating, ventilating, and air-conditioning systems unless a third-party audit shows it's not economically feasible. The CFC-based refrigerants which are used should have a Global Warming Potential (GWP) ≤ 10. The property uses occupancy sensors on HVAC systems in back-of-house spaces, meeting rooms, and other low-traffic areas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyEfficientHeatingAndCoolingSystems")]
		public System.Nullable<System.Boolean> EnergyEfficientHeatingAndCoolingSystems { get; set; }
		
		/// <summary>
		/// Energy efficient heating and cooling systems exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyEfficientHeatingAndCoolingSystemsException")]
		public AccessibilityMobilityAccessibleElevatorException EnergyEfficientHeatingAndCoolingSystemsException { get; set; }
		
		/// <summary>
		/// Energy efficient lighting. At least 75% of the property's lighting is energy efficient, using lighting that is more than 45 lumens per watt – typically LED or CFL lightbulbs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyEfficientLighting")]
		public System.Nullable<System.Boolean> EnergyEfficientLighting { get; set; }
		
		/// <summary>
		/// Energy efficient lighting exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyEfficientLightingException")]
		public AccessibilityMobilityAccessibleElevatorException EnergyEfficientLightingException { get; set; }
		
		/// <summary>
		/// Energy saving thermostats. The property installed energy-saving thermostats throughout the building to conserve energy when rooms or areas are not in use. Energy-saving thermostats are devices that control heating/cooling in the building by learning temperature preferences and automatically adjusting to energy-saving temperatures as the default. The thermostats are automatically set to a temperature between 68-78 degrees F (20-26 °C), depending on seasonality. In the winter, set the thermostat to 68°F (20°C) when the room is occupied, lowering room temperature when unoccupied. In the summer, set the thermostat to 78°F (26°C) when the room is occupied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energySavingThermostats")]
		public System.Nullable<System.Boolean> EnergySavingThermostats { get; set; }
		
		/// <summary>
		/// Energy saving thermostats exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energySavingThermostatsException")]
		public AccessibilityMobilityAccessibleElevatorException EnergySavingThermostatsException { get; set; }
		
		/// <summary>
		/// Output only. Green building design. True if the property has been awarded a relevant certification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="greenBuildingDesign")]
		public System.Nullable<System.Boolean> GreenBuildingDesign { get; set; }
		
		/// <summary>
		/// Output only. Green building design exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="greenBuildingDesignException")]
		public AccessibilityMobilityAccessibleElevatorException GreenBuildingDesignException { get; set; }
		
		/// <summary>
		/// Independent organization audits energy use. The property conducts an energy audit at least every 5 years, the results of which are either verified by a third-party and/or published in external communications. An energy audit is a detailed assessment of the facility which provides recommendations to existing operations and procedures to improve energy efficiency, available incentives or rebates,and opportunities for improvements through renovations or upgrades. Examples of organizations that conduct credible third party audits include: Engie Impact, DNV GL (EU), Dexma, and local utility providers (they often provide energy and water audits).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="independentOrganizationAuditsEnergyUse")]
		public System.Nullable<System.Boolean> IndependentOrganizationAuditsEnergyUse { get; set; }
		
		/// <summary>
		/// Independent organization audits energy use exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="independentOrganizationAuditsEnergyUseException")]
		public AccessibilityMobilityAccessibleElevatorException IndependentOrganizationAuditsEnergyUseException { get; set; }
	}
	
	/// <summary>
	/// Enhanced cleaning measures implemented by the hotel during COVID-19.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnhancedCleaning
	{
		
		/// <summary>
		/// Commercial-grade disinfectant used to clean the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commercialGradeDisinfectantCleaning")]
		public System.Nullable<System.Boolean> CommercialGradeDisinfectantCleaning { get; set; }
		
		/// <summary>
		/// Commercial grade disinfectant cleaning exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commercialGradeDisinfectantCleaningException")]
		public AccessibilityMobilityAccessibleElevatorException CommercialGradeDisinfectantCleaningException { get; set; }
		
		/// <summary>
		/// Enhanced cleaning of common areas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonAreasEnhancedCleaning")]
		public System.Nullable<System.Boolean> CommonAreasEnhancedCleaning { get; set; }
		
		/// <summary>
		/// Common areas enhanced cleaning exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonAreasEnhancedCleaningException")]
		public AccessibilityMobilityAccessibleElevatorException CommonAreasEnhancedCleaningException { get; set; }
		
		/// <summary>
		/// Employees trained in COVID-19 cleaning procedures.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeesTrainedCleaningProcedures")]
		public System.Nullable<System.Boolean> EmployeesTrainedCleaningProcedures { get; set; }
		
		/// <summary>
		/// Employees trained cleaning procedures exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeesTrainedCleaningProceduresException")]
		public AccessibilityMobilityAccessibleElevatorException EmployeesTrainedCleaningProceduresException { get; set; }
		
		/// <summary>
		/// Employees trained in thorough hand-washing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeesTrainedThoroughHandWashing")]
		public System.Nullable<System.Boolean> EmployeesTrainedThoroughHandWashing { get; set; }
		
		/// <summary>
		/// Employees trained thorough hand washing exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeesTrainedThoroughHandWashingException")]
		public AccessibilityMobilityAccessibleElevatorException EmployeesTrainedThoroughHandWashingException { get; set; }
		
		/// <summary>
		/// Employees wear masks, face shields, and/or gloves.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeesWearProtectiveEquipment")]
		public System.Nullable<System.Boolean> EmployeesWearProtectiveEquipment { get; set; }
		
		/// <summary>
		/// Employees wear protective equipment exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeesWearProtectiveEquipmentException")]
		public AccessibilityMobilityAccessibleElevatorException EmployeesWearProtectiveEquipmentException { get; set; }
		
		/// <summary>
		/// Enhanced cleaning of guest rooms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestRoomsEnhancedCleaning")]
		public System.Nullable<System.Boolean> GuestRoomsEnhancedCleaning { get; set; }
		
		/// <summary>
		/// Guest rooms enhanced cleaning exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestRoomsEnhancedCleaningException")]
		public AccessibilityMobilityAccessibleElevatorException GuestRoomsEnhancedCleaningException { get; set; }
	}
	
	/// <summary>
	/// Services and amenities for families and young guests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Families
	{
		
		/// <summary>
		/// Babysitting. Child care that is offered by hotel staffers or coordinated by hotel staffers with local child care professionals. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="babysitting")]
		public System.Nullable<System.Boolean> Babysitting { get; set; }
		
		/// <summary>
		/// Babysitting exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="babysittingException")]
		public AccessibilityMobilityAccessibleElevatorException BabysittingException { get; set; }
		
		/// <summary>
		/// Kids activities. Recreational options such as sports, films, crafts and games designed for the enjoyment of children and offered at the hotel. May or may not be supervised. May or may not be at a designated time or place. Cab be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kidsActivities")]
		public System.Nullable<System.Boolean> KidsActivities { get; set; }
		
		/// <summary>
		/// Kids activities exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kidsActivitiesException")]
		public AccessibilityMobilityAccessibleElevatorException KidsActivitiesException { get; set; }
		
		/// <summary>
		/// Kids club. An organized program of group activities held at the hotel and designed for the enjoyment of children. Facilitated by hotel staff (or staff procured by the hotel) in an area(s) designated for the purpose of entertaining children without their parents. May include games, outings, water sports, team sports, arts and crafts, and films. Usually has set hours. Can be free or for a fee. Also known as Kids Camp or Kids program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kidsClub")]
		public System.Nullable<System.Boolean> KidsClub { get; set; }
		
		/// <summary>
		/// Kids club exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kidsClubException")]
		public AccessibilityMobilityAccessibleElevatorException KidsClubException { get; set; }
		
		/// <summary>
		/// Kids friendly. The hotel has one or more special features for families with children, such as reduced rates, child-sized beds, kids' club, babysitting service, or suitable place to play on premises.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kidsFriendly")]
		public System.Nullable<System.Boolean> KidsFriendly { get; set; }
		
		/// <summary>
		/// Kids friendly exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kidsFriendlyException")]
		public AccessibilityMobilityAccessibleElevatorException KidsFriendlyException { get; set; }
	}
	
	/// <summary>
	/// Meals, snacks, and beverages available at the property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FoodAndDrink
	{
		
		/// <summary>
		/// Bar. A designated room, lounge or area of an on-site restaurant with seating at a counter behind which a hotel staffer takes the guest's order and provides the requested alcoholic drink. Can be indoors or outdoors. Also known as Pub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bar")]
		public System.Nullable<System.Boolean> Bar { get; set; }
		
		/// <summary>
		/// Bar exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="barException")]
		public AccessibilityMobilityAccessibleElevatorException BarException { get; set; }
		
		/// <summary>
		/// Breakfast available. The morning meal is offered to all guests. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakfastAvailable")]
		public System.Nullable<System.Boolean> BreakfastAvailable { get; set; }
		
		/// <summary>
		/// Breakfast available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakfastAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException BreakfastAvailableException { get; set; }
		
		/// <summary>
		/// Breakfast buffet. Breakfast meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakfastBuffet")]
		public System.Nullable<System.Boolean> BreakfastBuffet { get; set; }
		
		/// <summary>
		/// Breakfast buffet exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakfastBuffetException")]
		public AccessibilityMobilityAccessibleElevatorException BreakfastBuffetException { get; set; }
		
		/// <summary>
		/// Buffet. A type of meal where guests serve themselves from a variety of dishes/foods that are put out on a table. Includes lunch and/or dinner meals. A breakfast-only buffet is not sufficient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buffet")]
		public System.Nullable<System.Boolean> Buffet { get; set; }
		
		/// <summary>
		/// Buffet exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buffetException")]
		public AccessibilityMobilityAccessibleElevatorException BuffetException { get; set; }
		
		/// <summary>
		/// Dinner buffet. Dinner meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dinnerBuffet")]
		public System.Nullable<System.Boolean> DinnerBuffet { get; set; }
		
		/// <summary>
		/// Dinner buffet exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dinnerBuffetException")]
		public AccessibilityMobilityAccessibleElevatorException DinnerBuffetException { get; set; }
		
		/// <summary>
		/// Free breakfast. Breakfast is offered for free to all guests. Does not apply if limited to certain room packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeBreakfast")]
		public System.Nullable<System.Boolean> FreeBreakfast { get; set; }
		
		/// <summary>
		/// Free breakfast exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeBreakfastException")]
		public AccessibilityMobilityAccessibleElevatorException FreeBreakfastException { get; set; }
		
		/// <summary>
		/// Restaurant. A business onsite at the hotel that is open to the public as well as guests, and offers meals and beverages to consume at tables or counters. May or may not include table service. Also known as cafe, buffet, eatery. A "breakfast room" where the hotel serves breakfast only to guests (not the general public) does not count as a restaurant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restaurant")]
		public System.Nullable<System.Boolean> Restaurant { get; set; }
		
		/// <summary>
		/// Restaurant exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restaurantException")]
		public AccessibilityMobilityAccessibleElevatorException RestaurantException { get; set; }
		
		/// <summary>
		/// Restaurants count. The number of restaurants at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restaurantsCount")]
		public System.Nullable<System.Int32> RestaurantsCount { get; set; }
		
		/// <summary>
		/// Restaurants count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restaurantsCountException")]
		public AccessibilityMobilityAccessibleElevatorException RestaurantsCountException { get; set; }
		
		/// <summary>
		/// Room service. A hotel staffer delivers meals prepared onsite to a guest's room as per their request. May or may not be available during specific hours. Services should be available to all guests (not based on rate/room booked/reward program, etc).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roomService")]
		public System.Nullable<System.Boolean> RoomService { get; set; }
		
		/// <summary>
		/// Room service exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roomServiceException")]
		public AccessibilityMobilityAccessibleElevatorException RoomServiceException { get; set; }
		
		/// <summary>
		/// Table service. A restaurant in which a staff member is assigned to a guest's table to take their order, deliver and clear away food, and deliver the bill, if applicable. Also known as sit-down restaurant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableService")]
		public System.Nullable<System.Boolean> TableService { get; set; }
		
		/// <summary>
		/// Table service exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableServiceException")]
		public AccessibilityMobilityAccessibleElevatorException TableServiceException { get; set; }
		
		/// <summary>
		/// 24hr room service. Room service is available 24 hours a day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twentyFourHourRoomService")]
		public System.Nullable<System.Boolean> TwentyFourHourRoomService { get; set; }
		
		/// <summary>
		/// 24hr room service exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twentyFourHourRoomServiceException")]
		public AccessibilityMobilityAccessibleElevatorException TwentyFourHourRoomServiceException { get; set; }
		
		/// <summary>
		/// Vending machine. A glass-fronted mechanized cabinet displaying and dispensing snacks and beverages for purchase by coins, paper money and/or credit cards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendingMachine")]
		public System.Nullable<System.Boolean> VendingMachine { get; set; }
		
		/// <summary>
		/// Vending machine exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendingMachineException")]
		public AccessibilityMobilityAccessibleElevatorException VendingMachineException { get; set; }
	}
	
	/// <summary>
	/// Response message for LodgingService.GetGoogleUpdatedLodging
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetGoogleUpdatedLodgingResponse
	{
		
		/// <summary>
		/// Required. The fields in the Lodging that have been updated by Google. Repeated field items are not individually specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffMask")]
		public string DiffMask { get; set; }
		
		/// <summary>
		/// Lodging of a location that provides accomodations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lodging")]
		public Lodging Lodging { get; set; }
	}
	
	/// <summary>
	/// Lodging of a location that provides accomodations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Lodging
	{
		
		/// <summary>
		/// Physical adaptations made to the property in consideration of varying levels of human physical ability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessibility")]
		public Accessibility Accessibility { get; set; }
		
		/// <summary>
		/// Amenities and features related to leisure and play.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public Activities Activities { get; set; }
		
		/// <summary>
		/// Features and available amenities in the guest unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allUnits")]
		public GuestUnitFeatures AllUnits { get; set; }
		
		/// <summary>
		/// Features of the property of specific interest to the business traveler.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="business")]
		public Business Business { get; set; }
		
		/// <summary>
		/// An individual room, such as kitchen, bathroom, bedroom, within a bookable guest unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonLivingArea")]
		public LivingArea CommonLivingArea { get; set; }
		
		/// <summary>
		/// The ways in which the property provides guests with the ability to access the internet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectivity")]
		public Connectivity Connectivity { get; set; }
		
		/// <summary>
		/// Services and amenities for families and young guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="families")]
		public Families Families { get; set; }
		
		/// <summary>
		/// Meals, snacks, and beverages available at the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foodAndDrink")]
		public FoodAndDrink FoodAndDrink { get; set; }
		
		/// <summary>
		/// Individual GuestUnitTypes that are available in this Lodging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestUnits")]
		public GuestUnitType[] GuestUnits { get; set; }
		
		/// <summary>
		/// Health and safety measures implemented by the hotel during COVID-19.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthAndSafety")]
		public HealthAndSafety HealthAndSafety { get; set; }
		
		/// <summary>
		/// Conveniences provided in guest units to facilitate an easier, more comfortable stay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="housekeeping")]
		public Housekeeping Housekeeping { get; set; }
		
		/// <summary>
		/// Metadata for the Lodging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public LodgingMetadata Metadata { get; set; }
		
		/// <summary>
		/// Required. Google identifier for this location in the form: `locations/{location_id}/lodging`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parking options at the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parking")]
		public Parking Parking { get; set; }
		
		/// <summary>
		/// Policies regarding guest-owned animals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pets")]
		public Pets Pets { get; set; }
		
		/// <summary>
		/// Property rules that impact guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public Policies Policies { get; set; }
		
		/// <summary>
		/// Swimming pool or recreational water facilities available at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pools")]
		public Pools Pools { get; set; }
		
		/// <summary>
		/// General factual information about the property's physical structure and important dates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="property")]
		public Property Property { get; set; }
		
		/// <summary>
		/// Conveniences or help provided by the property to facilitate an easier, more comfortable stay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public Services Services { get; set; }
		
		/// <summary>
		/// Features and available amenities in the guest unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="someUnits")]
		public GuestUnitFeatures SomeUnits { get; set; }
		
		/// <summary>
		/// Sustainability practices implemented at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sustainability")]
		public Sustainability Sustainability { get; set; }
		
		/// <summary>
		/// Vehicles or vehicular services facilitated or owned by the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transportation")]
		public Transportation Transportation { get; set; }
		
		/// <summary>
		/// Guest facilities at the property to promote or maintain health, beauty, and fitness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wellness")]
		public Wellness Wellness { get; set; }
	}
	
	/// <summary>
	/// Features and available amenities in the guest unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GuestUnitFeatures
	{
		
		/// <summary>
		/// Bungalow or villa. An independent structure that is part of a hotel or resort that is rented to one party for a vacation stay. The hotel or resort may be completely comprised of bungalows or villas, or they may be one of several guestroom options. Guests in the bungalows or villas most often have the same, if not more, amenities and services offered to guests in other guestroom types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungalowOrVilla")]
		public System.Nullable<System.Boolean> BungalowOrVilla { get; set; }
		
		/// <summary>
		/// Bungalow or villa exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungalowOrVillaException")]
		public AccessibilityMobilityAccessibleElevatorException BungalowOrVillaException { get; set; }
		
		/// <summary>
		/// Connecting unit available. A guestroom type that features access to an adjacent guestroom for the purpose of booking both rooms. Most often used by families who need more than one room to accommodate the number of people in their group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectingUnitAvailable")]
		public System.Nullable<System.Boolean> ConnectingUnitAvailable { get; set; }
		
		/// <summary>
		/// Connecting unit available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectingUnitAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException ConnectingUnitAvailableException { get; set; }
		
		/// <summary>
		/// Executive floor. A floor of the hotel where the guestrooms are only bookable by members of the hotel's frequent guest membership program. Benefits of this room class include access to a designated lounge which may or may not feature free breakfast, cocktails or other perks specific to members of the program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executiveFloor")]
		public System.Nullable<System.Boolean> ExecutiveFloor { get; set; }
		
		/// <summary>
		/// Executive floor exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executiveFloorException")]
		public AccessibilityMobilityAccessibleElevatorException ExecutiveFloorException { get; set; }
		
		/// <summary>
		/// Max adult occupants count. The total number of adult guests allowed to stay overnight in the guestroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAdultOccupantsCount")]
		public System.Nullable<System.Int32> MaxAdultOccupantsCount { get; set; }
		
		/// <summary>
		/// Max adult occupants count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAdultOccupantsCountException")]
		public AccessibilityMobilityAccessibleElevatorException MaxAdultOccupantsCountException { get; set; }
		
		/// <summary>
		/// Max child occupants count. The total number of children allowed to stay overnight in the room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxChildOccupantsCount")]
		public System.Nullable<System.Int32> MaxChildOccupantsCount { get; set; }
		
		/// <summary>
		/// Max child occupants count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxChildOccupantsCountException")]
		public AccessibilityMobilityAccessibleElevatorException MaxChildOccupantsCountException { get; set; }
		
		/// <summary>
		/// Max occupants count. The total number of guests allowed to stay overnight in the guestroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxOccupantsCount")]
		public System.Nullable<System.Int32> MaxOccupantsCount { get; set; }
		
		/// <summary>
		/// Max occupants count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxOccupantsCountException")]
		public AccessibilityMobilityAccessibleElevatorException MaxOccupantsCountException { get; set; }
		
		/// <summary>
		/// Private home. A privately owned home (house, townhouse, apartment, cabin, bungalow etc) that may or not serve as the owner's residence, but is rented out in its entirety or by the room(s) to paying guest(s) for vacation stays. Not for lease-based, long-term residency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateHome")]
		public System.Nullable<System.Boolean> PrivateHome { get; set; }
		
		/// <summary>
		/// Private home exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateHomeException")]
		public AccessibilityMobilityAccessibleElevatorException PrivateHomeException { get; set; }
		
		/// <summary>
		/// Suite. A guestroom category that implies both a bedroom area and a separate living area. There may or may not be full walls and doors separating the two areas, but regardless, they are very distinct. Does not mean a couch or chair in a bedroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suite")]
		public System.Nullable<System.Boolean> Suite { get; set; }
		
		/// <summary>
		/// Suite exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suiteException")]
		public AccessibilityMobilityAccessibleElevatorException SuiteException { get; set; }
		
		/// <summary>
		/// Tier. Classification of the unit based on available features/amenities. A non-standard tier is only permitted if at least one other unit type falls under the standard tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<GuestUnitFeaturesTier> Tier { get; set; }
		
		/// <summary>
		/// Tier exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tierException")]
		public AccessibilityMobilityAccessibleElevatorException TierException { get; set; }
		
		/// <summary>
		/// An individual room, such as kitchen, bathroom, bedroom, within a bookable guest unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalLivingAreas")]
		public LivingArea TotalLivingAreas { get; set; }
		
		/// <summary>
		/// Views available from the guest unit itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="views")]
		public ViewsFromUnit Views { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GuestUnitFeaturesTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIT_TIER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_UNIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELUXE_UNIT = 2,
	}
	
	/// <summary>
	/// An individual room, such as kitchen, bathroom, bedroom, within a bookable guest unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LivingArea
	{
		
		/// <summary>
		/// Accessibility features of the living area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessibility")]
		public LivingAreaAccessibility Accessibility { get; set; }
		
		/// <summary>
		/// Information about eating features in the living area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eating")]
		public LivingAreaEating Eating { get; set; }
		
		/// <summary>
		/// Features in the living area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public LivingAreaFeatures Features { get; set; }
		
		/// <summary>
		/// Information about the layout of the living area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layout")]
		public LivingAreaLayout Layout { get; set; }
		
		/// <summary>
		/// Information about sleeping features in the living area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sleeping")]
		public LivingAreaSleeping Sleeping { get; set; }
	}
	
	/// <summary>
	/// Accessibility features of the living area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LivingAreaAccessibility
	{
		
		/// <summary>
		/// ADA compliant unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues, as determined by legislative policy. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adaCompliantUnit")]
		public System.Nullable<System.Boolean> AdaCompliantUnit { get; set; }
		
		/// <summary>
		/// ADA compliant unit exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adaCompliantUnitException")]
		public AccessibilityMobilityAccessibleElevatorException AdaCompliantUnitException { get; set; }
		
		/// <summary>
		/// Hearing-accessible doorbell. A visual indicator(s) of a knock or ring at the door.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearingAccessibleDoorbell")]
		public System.Nullable<System.Boolean> HearingAccessibleDoorbell { get; set; }
		
		/// <summary>
		/// Hearing-accessible doorbell exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearingAccessibleDoorbellException")]
		public AccessibilityMobilityAccessibleElevatorException HearingAccessibleDoorbellException { get; set; }
		
		/// <summary>
		/// Hearing-accessible fire alarm. A device that gives warning of a fire through flashing lights.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearingAccessibleFireAlarm")]
		public System.Nullable<System.Boolean> HearingAccessibleFireAlarm { get; set; }
		
		/// <summary>
		/// Hearing-accessible fire alarm exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearingAccessibleFireAlarmException")]
		public AccessibilityMobilityAccessibleElevatorException HearingAccessibleFireAlarmException { get; set; }
		
		/// <summary>
		/// Hearing-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with auditory issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearingAccessibleUnit")]
		public System.Nullable<System.Boolean> HearingAccessibleUnit { get; set; }
		
		/// <summary>
		/// Hearing-accessible unit exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearingAccessibleUnitException")]
		public AccessibilityMobilityAccessibleElevatorException HearingAccessibleUnitException { get; set; }
		
		/// <summary>
		/// Mobility-accessible bathtub. A bathtub that accomodates the physically challenged with additional railings or hand grips, a transfer seat or lift, and/or a door to enable walking into the tub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleBathtub")]
		public System.Nullable<System.Boolean> MobilityAccessibleBathtub { get; set; }
		
		/// <summary>
		/// Mobility-accessible bathtub exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleBathtubException")]
		public AccessibilityMobilityAccessibleElevatorException MobilityAccessibleBathtubException { get; set; }
		
		/// <summary>
		/// Mobility-accessible shower. A shower with an enlarged door or access point to accommodate a wheelchair or a waterproof seat for the physically challenged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleShower")]
		public System.Nullable<System.Boolean> MobilityAccessibleShower { get; set; }
		
		/// <summary>
		/// Mobility-accessible shower exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleShowerException")]
		public AccessibilityMobilityAccessibleElevatorException MobilityAccessibleShowerException { get; set; }
		
		/// <summary>
		/// Mobility-accessible toilet. A toilet with a higher seat, grab bars, and/or a larger area around it to accommodate the physically challenged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleToilet")]
		public System.Nullable<System.Boolean> MobilityAccessibleToilet { get; set; }
		
		/// <summary>
		/// Mobility-accessible toilet exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleToiletException")]
		public AccessibilityMobilityAccessibleElevatorException MobilityAccessibleToiletException { get; set; }
		
		/// <summary>
		/// Mobility-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleUnit")]
		public System.Nullable<System.Boolean> MobilityAccessibleUnit { get; set; }
		
		/// <summary>
		/// Mobility-accessible unit exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleUnitException")]
		public AccessibilityMobilityAccessibleElevatorException MobilityAccessibleUnitException { get; set; }
	}
	
	/// <summary>
	/// Information about eating features in the living area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LivingAreaEating
	{
		
		/// <summary>
		/// Coffee maker. An electric appliance that brews coffee by heating and forcing water through ground coffee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coffeeMaker")]
		public System.Nullable<System.Boolean> CoffeeMaker { get; set; }
		
		/// <summary>
		/// Coffee maker exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coffeeMakerException")]
		public AccessibilityMobilityAccessibleElevatorException CoffeeMakerException { get; set; }
		
		/// <summary>
		/// Cookware. Kitchen pots, pans and utensils used in connection with the preparation of food.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookware")]
		public System.Nullable<System.Boolean> Cookware { get; set; }
		
		/// <summary>
		/// Cookware exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookwareException")]
		public AccessibilityMobilityAccessibleElevatorException CookwareException { get; set; }
		
		/// <summary>
		/// Dishwasher. A counter-height electrical cabinet containing racks for dirty dishware, cookware and cutlery, and a dispenser for soap built into the pull-down door. The cabinet is attached to the plumbing system to facilitate the automatic cleaning of its contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dishwasher")]
		public System.Nullable<System.Boolean> Dishwasher { get; set; }
		
		/// <summary>
		/// Dishwasher exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dishwasherException")]
		public AccessibilityMobilityAccessibleElevatorException DishwasherException { get; set; }
		
		/// <summary>
		/// Indoor grill. Metal grates built into an indoor cooktop on which food is cooked over an open flame or electric heat source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indoorGrill")]
		public System.Nullable<System.Boolean> IndoorGrill { get; set; }
		
		/// <summary>
		/// Indoor grill exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indoorGrillException")]
		public AccessibilityMobilityAccessibleElevatorException IndoorGrillException { get; set; }
		
		/// <summary>
		/// Kettle. A covered container with a handle and a spout used for boiling water.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kettle")]
		public System.Nullable<System.Boolean> Kettle { get; set; }
		
		/// <summary>
		/// Kettle exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kettleException")]
		public AccessibilityMobilityAccessibleElevatorException KettleException { get; set; }
		
		/// <summary>
		/// Kitchen available. An area of the guestroom designated for the preparation and storage of food via the presence of a refrigerator, cook top, oven and sink, as well as cutlery, dishes and cookware. Usually includes small appliances such a coffee maker and a microwave. May or may not include an automatic dishwasher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kitchenAvailable")]
		public System.Nullable<System.Boolean> KitchenAvailable { get; set; }
		
		/// <summary>
		/// Kitchen available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kitchenAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException KitchenAvailableException { get; set; }
		
		/// <summary>
		/// Microwave. An electric oven that quickly cooks and heats food by microwave energy. Smaller than a standing or wall mounted oven. Usually placed on a kitchen counter, a shelf or tabletop or mounted above a cooktop.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microwave")]
		public System.Nullable<System.Boolean> Microwave { get; set; }
		
		/// <summary>
		/// Microwave exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microwaveException")]
		public AccessibilityMobilityAccessibleElevatorException MicrowaveException { get; set; }
		
		/// <summary>
		/// Minibar. A small refrigerated cabinet in the guestroom containing bottles/cans of soft drinks, mini bottles of alcohol, and snacks. The items are most commonly available for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minibar")]
		public System.Nullable<System.Boolean> Minibar { get; set; }
		
		/// <summary>
		/// Minibar exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minibarException")]
		public AccessibilityMobilityAccessibleElevatorException MinibarException { get; set; }
		
		/// <summary>
		/// Outdoor grill. Metal grates on which food is cooked over an open flame or electric heat source. Part of an outdoor apparatus that supports the grates. Also known as barbecue grill or barbecue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outdoorGrill")]
		public System.Nullable<System.Boolean> OutdoorGrill { get; set; }
		
		/// <summary>
		/// Outdoor grill exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outdoorGrillException")]
		public AccessibilityMobilityAccessibleElevatorException OutdoorGrillException { get; set; }
		
		/// <summary>
		/// Oven. A temperature controlled, heated metal cabinet powered by gas or electricity in which food is placed for the purpose of cooking or reheating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oven")]
		public System.Nullable<System.Boolean> Oven { get; set; }
		
		/// <summary>
		/// Oven exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ovenException")]
		public AccessibilityMobilityAccessibleElevatorException OvenException { get; set; }
		
		/// <summary>
		/// Refrigerator. A large, climate-controlled electrical cabinet with vertical doors. Built for the purpose of chilling and storing perishable foods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refrigerator")]
		public System.Nullable<System.Boolean> Refrigerator { get; set; }
		
		/// <summary>
		/// Refrigerator exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refrigeratorException")]
		public AccessibilityMobilityAccessibleElevatorException RefrigeratorException { get; set; }
		
		/// <summary>
		/// Sink. A basin with a faucet attached to a water source and used for the purpose of washing and rinsing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sink")]
		public System.Nullable<System.Boolean> Sink { get; set; }
		
		/// <summary>
		/// Sink exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sinkException")]
		public AccessibilityMobilityAccessibleElevatorException SinkException { get; set; }
		
		/// <summary>
		/// Snackbar. A small cabinet in the guestroom containing snacks. The items are most commonly available for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snackbar")]
		public System.Nullable<System.Boolean> Snackbar { get; set; }
		
		/// <summary>
		/// Snackbar exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snackbarException")]
		public AccessibilityMobilityAccessibleElevatorException SnackbarException { get; set; }
		
		/// <summary>
		/// Stove. A kitchen appliance powered by gas or electricity for the purpose of creating a flame or hot surface on which pots of food can be cooked. Also known as cooktop or hob.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stove")]
		public System.Nullable<System.Boolean> Stove { get; set; }
		
		/// <summary>
		/// Stove exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stoveException")]
		public AccessibilityMobilityAccessibleElevatorException StoveException { get; set; }
		
		/// <summary>
		/// Tea station. A small area with the supplies needed to heat water and make tea.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teaStation")]
		public System.Nullable<System.Boolean> TeaStation { get; set; }
		
		/// <summary>
		/// Tea station exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teaStationException")]
		public AccessibilityMobilityAccessibleElevatorException TeaStationException { get; set; }
		
		/// <summary>
		/// Toaster. A small, temperature controlled electric appliance with rectangular slots at the top that are lined with heated coils for the purpose of browning slices of bread products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toaster")]
		public System.Nullable<System.Boolean> Toaster { get; set; }
		
		/// <summary>
		/// Toaster exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toasterException")]
		public AccessibilityMobilityAccessibleElevatorException ToasterException { get; set; }
	}
	
	/// <summary>
	/// Features in the living area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LivingAreaFeatures
	{
		
		/// <summary>
		/// Air conditioning. An electrical machine used to cool the temperature of the guestroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airConditioning")]
		public System.Nullable<System.Boolean> AirConditioning { get; set; }
		
		/// <summary>
		/// Air conditioning exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airConditioningException")]
		public AccessibilityMobilityAccessibleElevatorException AirConditioningException { get; set; }
		
		/// <summary>
		/// Bathtub. A fixed plumbing feature set on the floor and consisting of a large container that accommodates the body of an adult for the purpose of seated bathing. Includes knobs or fixtures to control the temperature of the water, a faucet through which the water flows, and a drain that can be closed for filling and opened for draining.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bathtub")]
		public System.Nullable<System.Boolean> Bathtub { get; set; }
		
		/// <summary>
		/// Bathtub exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bathtubException")]
		public AccessibilityMobilityAccessibleElevatorException BathtubException { get; set; }
		
		/// <summary>
		/// Bidet. A plumbing fixture attached to a toilet or a low, fixed sink designed for the purpose of washing after toilet use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidet")]
		public System.Nullable<System.Boolean> Bidet { get; set; }
		
		/// <summary>
		/// Bidet exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidetException")]
		public AccessibilityMobilityAccessibleElevatorException BidetException { get; set; }
		
		/// <summary>
		/// Dryer. An electrical machine designed to dry clothing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dryer")]
		public System.Nullable<System.Boolean> Dryer { get; set; }
		
		/// <summary>
		/// Dryer exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dryerException")]
		public AccessibilityMobilityAccessibleElevatorException DryerException { get; set; }
		
		/// <summary>
		/// Electronic room key. A card coded by the check-in computer that is read by the lock on the hotel guestroom door to allow for entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electronicRoomKey")]
		public System.Nullable<System.Boolean> ElectronicRoomKey { get; set; }
		
		/// <summary>
		/// Electronic room key exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electronicRoomKeyException")]
		public AccessibilityMobilityAccessibleElevatorException ElectronicRoomKeyException { get; set; }
		
		/// <summary>
		/// Fireplace. A framed opening (aka hearth) at the base of a chimney in which logs or an electrical fire feature are burned to provide a relaxing ambiance or to heat the room. Often made of bricks or stone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fireplace")]
		public System.Nullable<System.Boolean> Fireplace { get; set; }
		
		/// <summary>
		/// Fireplace exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fireplaceException")]
		public AccessibilityMobilityAccessibleElevatorException FireplaceException { get; set; }
		
		/// <summary>
		/// Hairdryer. A handheld electric appliance that blows temperature-controlled air for the purpose of drying wet hair. Can be mounted to a bathroom wall or a freestanding device stored in the guestroom's bathroom or closet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hairdryer")]
		public System.Nullable<System.Boolean> Hairdryer { get; set; }
		
		/// <summary>
		/// Hairdryer exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hairdryerException")]
		public AccessibilityMobilityAccessibleElevatorException HairdryerException { get; set; }
		
		/// <summary>
		/// Heating. An electrical machine used to warm the temperature of the guestroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heating")]
		public System.Nullable<System.Boolean> Heating { get; set; }
		
		/// <summary>
		/// Heating exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingException")]
		public AccessibilityMobilityAccessibleElevatorException HeatingException { get; set; }
		
		/// <summary>
		/// In-unit safe. A strong fireproof cabinet with a programmable lock, used for the protected storage of valuables in a guestroom. Often built into a closet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inunitSafe")]
		public System.Nullable<System.Boolean> InunitSafe { get; set; }
		
		/// <summary>
		/// In-unit safe exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inunitSafeException")]
		public AccessibilityMobilityAccessibleElevatorException InunitSafeException { get; set; }
		
		/// <summary>
		/// In-unit Wifi available. Guests can wirelessly connect to the Internet in the guestroom. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inunitWifiAvailable")]
		public System.Nullable<System.Boolean> InunitWifiAvailable { get; set; }
		
		/// <summary>
		/// In-unit Wifi available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inunitWifiAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException InunitWifiAvailableException { get; set; }
		
		/// <summary>
		/// Ironing equipment. A device, usually with a flat metal base, that is heated to smooth, finish, or press clothes and a flat, padded, cloth-covered surface on which the clothes are worked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ironingEquipment")]
		public System.Nullable<System.Boolean> IroningEquipment { get; set; }
		
		/// <summary>
		/// Ironing equipment exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ironingEquipmentException")]
		public AccessibilityMobilityAccessibleElevatorException IroningEquipmentException { get; set; }
		
		/// <summary>
		/// Pay per view movies. Televisions with channels that offer films that can be viewed for a fee, and have an interface to allow the viewer to accept the terms and approve payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payPerViewMovies")]
		public System.Nullable<System.Boolean> PayPerViewMovies { get; set; }
		
		/// <summary>
		/// Pay per view movies exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payPerViewMoviesException")]
		public AccessibilityMobilityAccessibleElevatorException PayPerViewMoviesException { get; set; }
		
		/// <summary>
		/// Private bathroom. A bathroom designated for the express use of the guests staying in a specific guestroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateBathroom")]
		public System.Nullable<System.Boolean> PrivateBathroom { get; set; }
		
		/// <summary>
		/// Private bathroom exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateBathroomException")]
		public AccessibilityMobilityAccessibleElevatorException PrivateBathroomException { get; set; }
		
		/// <summary>
		/// Shower. A fixed plumbing fixture for standing bathing that features a tall spray spout or faucet through which water flows, a knob or knobs that control the water's temperature, and a drain in the floor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shower")]
		public System.Nullable<System.Boolean> Shower { get; set; }
		
		/// <summary>
		/// Shower exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showerException")]
		public AccessibilityMobilityAccessibleElevatorException ShowerException { get; set; }
		
		/// <summary>
		/// Toilet. A fixed bathroom feature connected to a sewer or septic system and consisting of a water-flushed bowl with a seat, as well as a device that elicites the water-flushing action. Used for the process and disposal of human waste.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toilet")]
		public System.Nullable<System.Boolean> Toilet { get; set; }
		
		/// <summary>
		/// Toilet exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toiletException")]
		public AccessibilityMobilityAccessibleElevatorException ToiletException { get; set; }
		
		/// <summary>
		/// TV. A television is available in the guestroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tv")]
		public System.Nullable<System.Boolean> Tv { get; set; }
		
		/// <summary>
		/// TV casting. A television equipped with a device through which the video entertainment accessed on a personal computer, phone or tablet can be wirelessly delivered to and viewed on the guestroom's television.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tvCasting")]
		public System.Nullable<System.Boolean> TvCasting { get; set; }
		
		/// <summary>
		/// TV exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tvCastingException")]
		public AccessibilityMobilityAccessibleElevatorException TvCastingException { get; set; }
		
		/// <summary>
		/// TV exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tvException")]
		public AccessibilityMobilityAccessibleElevatorException TvException { get; set; }
		
		/// <summary>
		/// TV streaming. Televisions that embed a range of web-based apps to allow for watching media from those apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tvStreaming")]
		public System.Nullable<System.Boolean> TvStreaming { get; set; }
		
		/// <summary>
		/// TV streaming exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tvStreamingException")]
		public AccessibilityMobilityAccessibleElevatorException TvStreamingException { get; set; }
		
		/// <summary>
		/// Universal power adapters. A power supply for electronic devices which plugs into a wall for the purpose of converting AC to a single DC voltage. Also know as AC adapter or charger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="universalPowerAdapters")]
		public System.Nullable<System.Boolean> UniversalPowerAdapters { get; set; }
		
		/// <summary>
		/// Universal power adapters exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="universalPowerAdaptersException")]
		public AccessibilityMobilityAccessibleElevatorException UniversalPowerAdaptersException { get; set; }
		
		/// <summary>
		/// Washer. An electrical machine connected to a running water source designed to launder clothing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="washer")]
		public System.Nullable<System.Boolean> Washer { get; set; }
		
		/// <summary>
		/// Washer exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="washerException")]
		public AccessibilityMobilityAccessibleElevatorException WasherException { get; set; }
	}
	
	/// <summary>
	/// Information about the layout of the living area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LivingAreaLayout
	{
		
		/// <summary>
		/// Balcony. An outdoor platform attached to a building and surrounded by a short wall, fence or other safety railing. The balcony is accessed through a door in a guestroom or suite and is for use by the guest staying in that room. May or may not include seating or outdoor furniture. Is not located on the ground floor. Also lanai.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balcony")]
		public System.Nullable<System.Boolean> Balcony { get; set; }
		
		/// <summary>
		/// Balcony exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balconyException")]
		public AccessibilityMobilityAccessibleElevatorException BalconyException { get; set; }
		
		/// <summary>
		/// Living area sq meters. The measurement in meters of the area of a guestroom's living space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livingAreaSqMeters")]
		public System.Nullable<System.Single> LivingAreaSqMeters { get; set; }
		
		/// <summary>
		/// Living area sq meters exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livingAreaSqMetersException")]
		public AccessibilityMobilityAccessibleElevatorException LivingAreaSqMetersException { get; set; }
		
		/// <summary>
		/// Loft. A three-walled upper area accessed by stairs or a ladder that overlooks the lower area of a room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loft")]
		public System.Nullable<System.Boolean> Loft { get; set; }
		
		/// <summary>
		/// Loft exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loftException")]
		public AccessibilityMobilityAccessibleElevatorException LoftException { get; set; }
		
		/// <summary>
		/// Non smoking. A guestroom in which the smoking of cigarettes, cigars and pipes is prohibited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonSmoking")]
		public System.Nullable<System.Boolean> NonSmoking { get; set; }
		
		/// <summary>
		/// Non smoking exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonSmokingException")]
		public AccessibilityMobilityAccessibleElevatorException NonSmokingException { get; set; }
		
		/// <summary>
		/// Patio. A paved, outdoor area with seating attached to and accessed through a ground-floor guestroom for use by the occupants of the guestroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patio")]
		public System.Nullable<System.Boolean> Patio { get; set; }
		
		/// <summary>
		/// Patio exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patioException")]
		public AccessibilityMobilityAccessibleElevatorException PatioException { get; set; }
		
		/// <summary>
		/// Stairs. There are steps leading from one level or story to another in the unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stairs")]
		public System.Nullable<System.Boolean> Stairs { get; set; }
		
		/// <summary>
		/// Stairs exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stairsException")]
		public AccessibilityMobilityAccessibleElevatorException StairsException { get; set; }
	}
	
	/// <summary>
	/// Information about sleeping features in the living area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LivingAreaSleeping
	{
		
		/// <summary>
		/// Beds count. The number of permanent beds present in a guestroom. Does not include rollaway beds, cribs or sofabeds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bedsCount")]
		public System.Nullable<System.Int32> BedsCount { get; set; }
		
		/// <summary>
		/// Beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException BedsCountException { get; set; }
		
		/// <summary>
		/// Bunk beds count. The number of furniture pieces in which one framed mattress is fixed directly above another by means of a physical frame. This allows one person(s) to sleep in the bottom bunk and one person(s) to sleep in the top bunk. Also known as double decker bed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bunkBedsCount")]
		public System.Nullable<System.Int32> BunkBedsCount { get; set; }
		
		/// <summary>
		/// Bunk beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bunkBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException BunkBedsCountException { get; set; }
		
		/// <summary>
		/// Cribs count. The number of small beds for an infant or toddler that the guestroom can obtain. The bed is surrounded by a high railing to prevent the child from falling or climbing out of the bed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cribsCount")]
		public System.Nullable<System.Int32> CribsCount { get; set; }
		
		/// <summary>
		/// Cribs count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cribsCountException")]
		public AccessibilityMobilityAccessibleElevatorException CribsCountException { get; set; }
		
		/// <summary>
		/// Double beds count. The number of medium beds measuring 53"W x 75"L (135cm x 191cm). Also known as full size bed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleBedsCount")]
		public System.Nullable<System.Int32> DoubleBedsCount { get; set; }
		
		/// <summary>
		/// Double beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException DoubleBedsCountException { get; set; }
		
		/// <summary>
		/// Feather pillows. The option for guests to obtain bed pillows that are stuffed with the feathers and down of ducks or geese.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featherPillows")]
		public System.Nullable<System.Boolean> FeatherPillows { get; set; }
		
		/// <summary>
		/// Feather pillows exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featherPillowsException")]
		public AccessibilityMobilityAccessibleElevatorException FeatherPillowsException { get; set; }
		
		/// <summary>
		/// Hypoallergenic bedding. Bedding such as linens, pillows, mattress covers and/or mattresses that are made of materials known to be resistant to allergens such as mold, dust and dander.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hypoallergenicBedding")]
		public System.Nullable<System.Boolean> HypoallergenicBedding { get; set; }
		
		/// <summary>
		/// Hypoallergenic bedding exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hypoallergenicBeddingException")]
		public AccessibilityMobilityAccessibleElevatorException HypoallergenicBeddingException { get; set; }
		
		/// <summary>
		/// King beds count. The number of large beds measuring 76"W x 80"L (193cm x 102cm). Most often meant to accompany two people. Includes California king and super king.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kingBedsCount")]
		public System.Nullable<System.Int32> KingBedsCount { get; set; }
		
		/// <summary>
		/// King beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kingBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException KingBedsCountException { get; set; }
		
		/// <summary>
		/// Memory foam pillows. The option for guests to obtain bed pillows that are stuffed with a man-made foam that responds to body heat by conforming to the body closely, and then recovers its shape when the pillow cools down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryFoamPillows")]
		public System.Nullable<System.Boolean> MemoryFoamPillows { get; set; }
		
		/// <summary>
		/// Memory foam pillows exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryFoamPillowsException")]
		public AccessibilityMobilityAccessibleElevatorException MemoryFoamPillowsException { get; set; }
		
		/// <summary>
		/// Other beds count. The number of beds that are not standard mattress and boxspring setups such as Japanese tatami mats, trundle beds, air mattresses and cots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherBedsCount")]
		public System.Nullable<System.Int32> OtherBedsCount { get; set; }
		
		/// <summary>
		/// Other beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException OtherBedsCountException { get; set; }
		
		/// <summary>
		/// Queen beds count. The number of medium-large beds measuring 60"W x 80"L (152cm x 102cm).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queenBedsCount")]
		public System.Nullable<System.Int32> QueenBedsCount { get; set; }
		
		/// <summary>
		/// Queen beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queenBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException QueenBedsCountException { get; set; }
		
		/// <summary>
		/// Roll away beds count. The number of mattresses on wheeled frames that can be folded in half and rolled away for easy storage that the guestroom can obtain upon request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rollAwayBedsCount")]
		public System.Nullable<System.Int32> RollAwayBedsCount { get; set; }
		
		/// <summary>
		/// Roll away beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rollAwayBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException RollAwayBedsCountException { get; set; }
		
		/// <summary>
		/// Single or twin count beds. The number of smaller beds measuring 38"W x 75"L (97cm x 191cm) that can accommodate one adult.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleOrTwinBedsCount")]
		public System.Nullable<System.Int32> SingleOrTwinBedsCount { get; set; }
		
		/// <summary>
		/// Single or twin beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleOrTwinBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException SingleOrTwinBedsCountException { get; set; }
		
		/// <summary>
		/// Sofa beds count. The number of specially designed sofas that can be made to serve as a bed by lowering its hinged upholstered back to horizontal position or by pulling out a concealed mattress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sofaBedsCount")]
		public System.Nullable<System.Int32> SofaBedsCount { get; set; }
		
		/// <summary>
		/// Sofa beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sofaBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException SofaBedsCountException { get; set; }
		
		/// <summary>
		/// Synthetic pillows. The option for guests to obtain bed pillows stuffed with polyester material crafted to reproduce the feel of a pillow stuffed with down and feathers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syntheticPillows")]
		public System.Nullable<System.Boolean> SyntheticPillows { get; set; }
		
		/// <summary>
		/// Synthetic pillows exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syntheticPillowsException")]
		public AccessibilityMobilityAccessibleElevatorException SyntheticPillowsException { get; set; }
	}
	
	/// <summary>
	/// Views available from the guest unit itself.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ViewsFromUnit
	{
		
		/// <summary>
		/// Beach view. A guestroom that features a window through which guests can see the beach.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beachView")]
		public System.Nullable<System.Boolean> BeachView { get; set; }
		
		/// <summary>
		/// Beach view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beachViewException")]
		public AccessibilityMobilityAccessibleElevatorException BeachViewException { get; set; }
		
		/// <summary>
		/// City view. A guestroom that features a window through which guests can see the buildings, parks and/or streets of the city.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cityView")]
		public System.Nullable<System.Boolean> CityView { get; set; }
		
		/// <summary>
		/// City view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cityViewException")]
		public AccessibilityMobilityAccessibleElevatorException CityViewException { get; set; }
		
		/// <summary>
		/// Garden view. A guestroom that features a window through which guests can see a garden.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gardenView")]
		public System.Nullable<System.Boolean> GardenView { get; set; }
		
		/// <summary>
		/// Garden view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gardenViewException")]
		public AccessibilityMobilityAccessibleElevatorException GardenViewException { get; set; }
		
		/// <summary>
		/// Lake view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lakeView")]
		public System.Nullable<System.Boolean> LakeView { get; set; }
		
		/// <summary>
		/// Lake view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lakeViewException")]
		public AccessibilityMobilityAccessibleElevatorException LakeViewException { get; set; }
		
		/// <summary>
		/// Landmark view. A guestroom that features a window through which guests can see a landmark such as the countryside, a golf course, the forest, a park, a rain forst, a mountain or a slope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="landmarkView")]
		public System.Nullable<System.Boolean> LandmarkView { get; set; }
		
		/// <summary>
		/// Landmark view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="landmarkViewException")]
		public AccessibilityMobilityAccessibleElevatorException LandmarkViewException { get; set; }
		
		/// <summary>
		/// Ocean view. A guestroom that features a window through which guests can see the ocean.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oceanView")]
		public System.Nullable<System.Boolean> OceanView { get; set; }
		
		/// <summary>
		/// Ocean view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oceanViewException")]
		public AccessibilityMobilityAccessibleElevatorException OceanViewException { get; set; }
		
		/// <summary>
		/// Pool view. A guestroom that features a window through which guests can see the hotel's swimming pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolView")]
		public System.Nullable<System.Boolean> PoolView { get; set; }
		
		/// <summary>
		/// Pool view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolViewException")]
		public AccessibilityMobilityAccessibleElevatorException PoolViewException { get; set; }
		
		/// <summary>
		/// Valley view. A guestroom that features a window through which guests can see over a valley.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valleyView")]
		public System.Nullable<System.Boolean> ValleyView { get; set; }
		
		/// <summary>
		/// Valley view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valleyViewException")]
		public AccessibilityMobilityAccessibleElevatorException ValleyViewException { get; set; }
	}
	
	/// <summary>
	/// A specific type of unit primarily defined by its features.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GuestUnitType
	{
		
		/// <summary>
		/// Required. Unit or room code identifiers for a single GuestUnitType. Each code must be unique within a Lodging instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codes")]
		public string[] Codes { get; set; }
		
		/// <summary>
		/// Features and available amenities in the guest unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public GuestUnitFeatures Features { get; set; }
		
		/// <summary>
		/// Required. Short, English label or name of the GuestUnitType. Target <50 chars.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	/// <summary>
	/// Health and safety measures implemented by the hotel during COVID-19.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HealthAndSafety
	{
		
		/// <summary>
		/// Enhanced cleaning measures implemented by the hotel during COVID-19.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enhancedCleaning")]
		public EnhancedCleaning EnhancedCleaning { get; set; }
		
		/// <summary>
		/// Increased food safety measures implemented by the hotel during COVID-19.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="increasedFoodSafety")]
		public IncreasedFoodSafety IncreasedFoodSafety { get; set; }
		
		/// <summary>
		/// Minimized contact measures implemented by the hotel during COVID-19.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimizedContact")]
		public MinimizedContact MinimizedContact { get; set; }
		
		/// <summary>
		/// Personal protection measures implemented by the hotel during COVID-19.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalProtection")]
		public PersonalProtection PersonalProtection { get; set; }
		
		/// <summary>
		/// Physical distancing measures implemented by the hotel during COVID-19.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physicalDistancing")]
		public PhysicalDistancing PhysicalDistancing { get; set; }
	}
	
	/// <summary>
	/// Increased food safety measures implemented by the hotel during COVID-19.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IncreasedFoodSafety
	{
		
		/// <summary>
		/// Additional sanitation in dining areas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diningAreasAdditionalSanitation")]
		public System.Nullable<System.Boolean> DiningAreasAdditionalSanitation { get; set; }
		
		/// <summary>
		/// Dining areas additional sanitation exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diningAreasAdditionalSanitationException")]
		public AccessibilityMobilityAccessibleElevatorException DiningAreasAdditionalSanitationException { get; set; }
		
		/// <summary>
		/// Disposable flatware.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disposableFlatware")]
		public System.Nullable<System.Boolean> DisposableFlatware { get; set; }
		
		/// <summary>
		/// Disposable flatware exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disposableFlatwareException")]
		public AccessibilityMobilityAccessibleElevatorException DisposableFlatwareException { get; set; }
		
		/// <summary>
		/// Additional safety measures during food prep and serving.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foodPreparationAndServingAdditionalSafety")]
		public System.Nullable<System.Boolean> FoodPreparationAndServingAdditionalSafety { get; set; }
		
		/// <summary>
		/// Food preparation and serving additional safety exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foodPreparationAndServingAdditionalSafetyException")]
		public AccessibilityMobilityAccessibleElevatorException FoodPreparationAndServingAdditionalSafetyException { get; set; }
		
		/// <summary>
		/// Individually-packaged meals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualPackagedMeals")]
		public System.Nullable<System.Boolean> IndividualPackagedMeals { get; set; }
		
		/// <summary>
		/// Individual packaged meals exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualPackagedMealsException")]
		public AccessibilityMobilityAccessibleElevatorException IndividualPackagedMealsException { get; set; }
		
		/// <summary>
		/// Single-use menus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleUseFoodMenus")]
		public System.Nullable<System.Boolean> SingleUseFoodMenus { get; set; }
		
		/// <summary>
		/// Single use food menus exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleUseFoodMenusException")]
		public AccessibilityMobilityAccessibleElevatorException SingleUseFoodMenusException { get; set; }
	}
	
	/// <summary>
	/// Minimized contact measures implemented by the hotel during COVID-19.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MinimizedContact
	{
		
		/// <summary>
		/// No-contact check-in and check-out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactlessCheckinCheckout")]
		public System.Nullable<System.Boolean> ContactlessCheckinCheckout { get; set; }
		
		/// <summary>
		/// Contactless check-in check-out exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactlessCheckinCheckoutException")]
		public AccessibilityMobilityAccessibleElevatorException ContactlessCheckinCheckoutException { get; set; }
		
		/// <summary>
		/// Keyless mobile entry to guest rooms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digitalGuestRoomKeys")]
		public System.Nullable<System.Boolean> DigitalGuestRoomKeys { get; set; }
		
		/// <summary>
		/// Digital guest room keys exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digitalGuestRoomKeysException")]
		public AccessibilityMobilityAccessibleElevatorException DigitalGuestRoomKeysException { get; set; }
		
		/// <summary>
		/// Housekeeping scheduled by request only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="housekeepingScheduledRequestOnly")]
		public System.Nullable<System.Boolean> HousekeepingScheduledRequestOnly { get; set; }
		
		/// <summary>
		/// Housekeeping scheduled request only exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="housekeepingScheduledRequestOnlyException")]
		public AccessibilityMobilityAccessibleElevatorException HousekeepingScheduledRequestOnlyException { get; set; }
		
		/// <summary>
		/// High-touch items, such as magazines, removed from common areas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noHighTouchItemsCommonAreas")]
		public System.Nullable<System.Boolean> NoHighTouchItemsCommonAreas { get; set; }
		
		/// <summary>
		/// No high touch items common areas exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noHighTouchItemsCommonAreasException")]
		public AccessibilityMobilityAccessibleElevatorException NoHighTouchItemsCommonAreasException { get; set; }
		
		/// <summary>
		/// High-touch items, such as decorative pillows, removed from guest rooms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noHighTouchItemsGuestRooms")]
		public System.Nullable<System.Boolean> NoHighTouchItemsGuestRooms { get; set; }
		
		/// <summary>
		/// No high touch items guest rooms exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noHighTouchItemsGuestRoomsException")]
		public AccessibilityMobilityAccessibleElevatorException NoHighTouchItemsGuestRoomsException { get; set; }
		
		/// <summary>
		/// Plastic key cards are disinfected or discarded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plasticKeycardsDisinfected")]
		public System.Nullable<System.Boolean> PlasticKeycardsDisinfected { get; set; }
		
		/// <summary>
		/// Plastic keycards disinfected exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plasticKeycardsDisinfectedException")]
		public AccessibilityMobilityAccessibleElevatorException PlasticKeycardsDisinfectedException { get; set; }
		
		/// <summary>
		/// Buffer maintained between room bookings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roomBookingsBuffer")]
		public System.Nullable<System.Boolean> RoomBookingsBuffer { get; set; }
		
		/// <summary>
		/// Room bookings buffer exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roomBookingsBufferException")]
		public AccessibilityMobilityAccessibleElevatorException RoomBookingsBufferException { get; set; }
	}
	
	/// <summary>
	/// Personal protection measures implemented by the hotel during COVID-19.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalProtection
	{
		
		/// <summary>
		/// Hand-sanitizer and/or sanitizing wipes are offered in common areas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonAreasOfferSanitizingItems")]
		public System.Nullable<System.Boolean> CommonAreasOfferSanitizingItems { get; set; }
		
		/// <summary>
		/// Common areas offer sanitizing items exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonAreasOfferSanitizingItemsException")]
		public AccessibilityMobilityAccessibleElevatorException CommonAreasOfferSanitizingItemsException { get; set; }
		
		/// <summary>
		/// Masks required on the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="faceMaskRequired")]
		public System.Nullable<System.Boolean> FaceMaskRequired { get; set; }
		
		/// <summary>
		/// Face mask required exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="faceMaskRequiredException")]
		public AccessibilityMobilityAccessibleElevatorException FaceMaskRequiredException { get; set; }
		
		/// <summary>
		/// In-room hygiene kits with masks, hand sanitizer, and/or antibacterial wipes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestRoomHygieneKitsAvailable")]
		public System.Nullable<System.Boolean> GuestRoomHygieneKitsAvailable { get; set; }
		
		/// <summary>
		/// Guest room hygiene kits available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestRoomHygieneKitsAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException GuestRoomHygieneKitsAvailableException { get; set; }
		
		/// <summary>
		/// Masks and/or gloves available for guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectiveEquipmentAvailable")]
		public System.Nullable<System.Boolean> ProtectiveEquipmentAvailable { get; set; }
		
		/// <summary>
		/// Protective equipment available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectiveEquipmentAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException ProtectiveEquipmentAvailableException { get; set; }
	}
	
	/// <summary>
	/// Physical distancing measures implemented by the hotel during COVID-19.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhysicalDistancing
	{
		
		/// <summary>
		/// Common areas arranged to maintain physical distancing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonAreasPhysicalDistancingArranged")]
		public System.Nullable<System.Boolean> CommonAreasPhysicalDistancingArranged { get; set; }
		
		/// <summary>
		/// Common areas physical distancing arranged exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonAreasPhysicalDistancingArrangedException")]
		public AccessibilityMobilityAccessibleElevatorException CommonAreasPhysicalDistancingArrangedException { get; set; }
		
		/// <summary>
		/// Physical distancing required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physicalDistancingRequired")]
		public System.Nullable<System.Boolean> PhysicalDistancingRequired { get; set; }
		
		/// <summary>
		/// Physical distancing required exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physicalDistancingRequiredException")]
		public AccessibilityMobilityAccessibleElevatorException PhysicalDistancingRequiredException { get; set; }
		
		/// <summary>
		/// Safety dividers at front desk and other locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safetyDividers")]
		public System.Nullable<System.Boolean> SafetyDividers { get; set; }
		
		/// <summary>
		/// Safety dividers exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safetyDividersException")]
		public AccessibilityMobilityAccessibleElevatorException SafetyDividersException { get; set; }
		
		/// <summary>
		/// Guest occupancy limited within shared facilities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedAreasLimitedOccupancy")]
		public System.Nullable<System.Boolean> SharedAreasLimitedOccupancy { get; set; }
		
		/// <summary>
		/// Shared areas limited occupancy exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedAreasLimitedOccupancyException")]
		public AccessibilityMobilityAccessibleElevatorException SharedAreasLimitedOccupancyException { get; set; }
		
		/// <summary>
		/// Private spaces designated in spa and wellness areas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wellnessAreasHavePrivateSpaces")]
		public System.Nullable<System.Boolean> WellnessAreasHavePrivateSpaces { get; set; }
		
		/// <summary>
		/// Wellness areas have private spaces exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wellnessAreasHavePrivateSpacesException")]
		public AccessibilityMobilityAccessibleElevatorException WellnessAreasHavePrivateSpacesException { get; set; }
	}
	
	/// <summary>
	/// Conveniences provided in guest units to facilitate an easier, more comfortable stay.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Housekeeping
	{
		
		/// <summary>
		/// Daily housekeeping. Guest units are cleaned by hotel staff daily during guest's stay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyHousekeeping")]
		public System.Nullable<System.Boolean> DailyHousekeeping { get; set; }
		
		/// <summary>
		/// Daily housekeeping exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyHousekeepingException")]
		public AccessibilityMobilityAccessibleElevatorException DailyHousekeepingException { get; set; }
		
		/// <summary>
		/// Housekeeping available. Guest units are cleaned by hotel staff during guest's stay. Schedule may vary from daily, weekly, or specific days of the week.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="housekeepingAvailable")]
		public System.Nullable<System.Boolean> HousekeepingAvailable { get; set; }
		
		/// <summary>
		/// Housekeeping available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="housekeepingAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException HousekeepingAvailableException { get; set; }
		
		/// <summary>
		/// Turndown service. Hotel staff enters guest units to prepare the bed for sleep use. May or may not include some light housekeeping. May or may not include an evening snack or candy. Also known as evening service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="turndownService")]
		public System.Nullable<System.Boolean> TurndownService { get; set; }
		
		/// <summary>
		/// Turndown service exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="turndownServiceException")]
		public AccessibilityMobilityAccessibleElevatorException TurndownServiceException { get; set; }
	}
	
	/// <summary>
	/// Metadata for the Lodging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LodgingMetadata
	{
		
		/// <summary>
		/// Required. The latest time at which the Lodging data is asserted to be true in the real world. This is not necessarily the time at which the request is made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Parking options at the property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Parking
	{
		
		/// <summary>
		/// Electric car charging stations. Electric power stations, usually located outdoors, into which guests plug their electric cars to receive a charge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electricCarChargingStations")]
		public System.Nullable<System.Boolean> ElectricCarChargingStations { get; set; }
		
		/// <summary>
		/// Electric car charging stations exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electricCarChargingStationsException")]
		public AccessibilityMobilityAccessibleElevatorException ElectricCarChargingStationsException { get; set; }
		
		/// <summary>
		/// Free parking. The hotel allows the cars of guests to be parked for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff. Free parking must be available to all guests (limited conditions does not apply).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeParking")]
		public System.Nullable<System.Boolean> FreeParking { get; set; }
		
		/// <summary>
		/// Free parking exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeParkingException")]
		public AccessibilityMobilityAccessibleElevatorException FreeParkingException { get; set; }
		
		/// <summary>
		/// Free self parking. Guests park their own cars for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeSelfParking")]
		public System.Nullable<System.Boolean> FreeSelfParking { get; set; }
		
		/// <summary>
		/// Free self parking exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeSelfParkingException")]
		public AccessibilityMobilityAccessibleElevatorException FreeSelfParkingException { get; set; }
		
		/// <summary>
		/// Free valet parking. Hotel staff member parks the cars of guests. Parking with this service is free.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeValetParking")]
		public System.Nullable<System.Boolean> FreeValetParking { get; set; }
		
		/// <summary>
		/// Free valet parking exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeValetParkingException")]
		public AccessibilityMobilityAccessibleElevatorException FreeValetParkingException { get; set; }
		
		/// <summary>
		/// Parking available. The hotel allows the cars of guests to be parked. Can be free or for a fee. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parkingAvailable")]
		public System.Nullable<System.Boolean> ParkingAvailable { get; set; }
		
		/// <summary>
		/// Parking available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parkingAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException ParkingAvailableException { get; set; }
		
		/// <summary>
		/// Self parking available. Guests park their own cars. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfParkingAvailable")]
		public System.Nullable<System.Boolean> SelfParkingAvailable { get; set; }
		
		/// <summary>
		/// Self parking available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfParkingAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException SelfParkingAvailableException { get; set; }
		
		/// <summary>
		/// Valet parking available. Hotel staff member parks the cars of guests. Parking with this service can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valetParkingAvailable")]
		public System.Nullable<System.Boolean> ValetParkingAvailable { get; set; }
		
		/// <summary>
		/// Valet parking available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valetParkingAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException ValetParkingAvailableException { get; set; }
	}
	
	/// <summary>
	/// Policies regarding guest-owned animals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Pets
	{
		
		/// <summary>
		/// Cats allowed. Domesticated felines are permitted at the property and allowed to stay in the guest room of their owner. May or may not require a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catsAllowed")]
		public System.Nullable<System.Boolean> CatsAllowed { get; set; }
		
		/// <summary>
		/// Cats allowed exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catsAllowedException")]
		public AccessibilityMobilityAccessibleElevatorException CatsAllowedException { get; set; }
		
		/// <summary>
		/// Dogs allowed. Domesticated canines are permitted at the property and allowed to stay in the guest room of their owner. May or may not require a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dogsAllowed")]
		public System.Nullable<System.Boolean> DogsAllowed { get; set; }
		
		/// <summary>
		/// Dogs allowed exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dogsAllowedException")]
		public AccessibilityMobilityAccessibleElevatorException DogsAllowedException { get; set; }
		
		/// <summary>
		/// Pets allowed. Household animals are allowed at the property and in the specific guest room of their owner. May or may not include dogs, cats, reptiles and/or fish. May or may not require a fee. Service animals are not considered to be pets, so not governed by this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="petsAllowed")]
		public System.Nullable<System.Boolean> PetsAllowed { get; set; }
		
		/// <summary>
		/// Pets allowed exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="petsAllowedException")]
		public AccessibilityMobilityAccessibleElevatorException PetsAllowedException { get; set; }
		
		/// <summary>
		/// Pets allowed free. Household animals are allowed at the property and in the specific guest room of their owner for free. May or may not include dogs, cats, reptiles, and/or fish.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="petsAllowedFree")]
		public System.Nullable<System.Boolean> PetsAllowedFree { get; set; }
		
		/// <summary>
		/// Pets allowed free exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="petsAllowedFreeException")]
		public AccessibilityMobilityAccessibleElevatorException PetsAllowedFreeException { get; set; }
	}
	
	/// <summary>
	/// Property rules that impact guests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Policies
	{
		
		/// <summary>
		/// All inclusive available. The hotel offers a rate option that includes the cost of the room, meals, activities, and other amenities that might otherwise be charged separately.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allInclusiveAvailable")]
		public System.Nullable<System.Boolean> AllInclusiveAvailable { get; set; }
		
		/// <summary>
		/// All inclusive available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allInclusiveAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException AllInclusiveAvailableException { get; set; }
		
		/// <summary>
		/// All inclusive only. The only rate option offered by the hotel is a rate that includes the cost of the room, meals, activities and other amenities that might otherwise be charged separately.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allInclusiveOnly")]
		public System.Nullable<System.Boolean> AllInclusiveOnly { get; set; }
		
		/// <summary>
		/// All inclusive only exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allInclusiveOnlyException")]
		public AccessibilityMobilityAccessibleElevatorException AllInclusiveOnlyException { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkinTime")]
		public TimeOfDay CheckinTime { get; set; }
		
		/// <summary>
		/// Check-in time exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkinTimeException")]
		public AccessibilityMobilityAccessibleElevatorException CheckinTimeException { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkoutTime")]
		public TimeOfDay CheckoutTime { get; set; }
		
		/// <summary>
		/// Check-out time exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkoutTimeException")]
		public AccessibilityMobilityAccessibleElevatorException CheckoutTimeException { get; set; }
		
		/// <summary>
		/// Kids stay free. The children of guests are allowed to stay in the room/suite of a parent or adult without an additional fee. The policy may or may not stipulate a limit of the child's age or the overall number of children allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kidsStayFree")]
		public System.Nullable<System.Boolean> KidsStayFree { get; set; }
		
		/// <summary>
		/// Kids stay free exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kidsStayFreeException")]
		public AccessibilityMobilityAccessibleElevatorException KidsStayFreeException { get; set; }
		
		/// <summary>
		/// Max child age. The hotel allows children up to a certain age to stay in the room/suite of a parent or adult without an additional fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxChildAge")]
		public System.Nullable<System.Int32> MaxChildAge { get; set; }
		
		/// <summary>
		/// Max child age exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxChildAgeException")]
		public AccessibilityMobilityAccessibleElevatorException MaxChildAgeException { get; set; }
		
		/// <summary>
		/// Max kids stay free count. The hotel allows a specific, defined number of children to stay in the room/suite of a parent or adult without an additional fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxKidsStayFreeCount")]
		public System.Nullable<System.Int32> MaxKidsStayFreeCount { get; set; }
		
		/// <summary>
		/// Max kids stay free count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxKidsStayFreeCountException")]
		public AccessibilityMobilityAccessibleElevatorException MaxKidsStayFreeCountException { get; set; }
		
		/// <summary>
		/// Forms of payment accepted at the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentOptions")]
		public PaymentOptions PaymentOptions { get; set; }
		
		/// <summary>
		/// Smoke free property. Smoking is not allowed inside the building, on balconies, or in outside spaces. Hotels that offer a designated area for guests to smoke are not considered smoke-free properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smokeFreeProperty")]
		public System.Nullable<System.Boolean> SmokeFreeProperty { get; set; }
		
		/// <summary>
		/// Smoke free property exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smokeFreePropertyException")]
		public AccessibilityMobilityAccessibleElevatorException SmokeFreePropertyException { get; set; }
	}
	
	/// <summary>
	/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeOfDay
	{
		
		/// <summary>
		/// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// Minutes of hour of day. Must be from 0 to 59.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
		
		/// <summary>
		/// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}
	
	/// <summary>
	/// Forms of payment accepted at the property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentOptions
	{
		
		/// <summary>
		/// Cash. The hotel accepts payment by paper/coin currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash")]
		public System.Nullable<System.Boolean> Cash { get; set; }
		
		/// <summary>
		/// Cash exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashException")]
		public AccessibilityMobilityAccessibleElevatorException CashException { get; set; }
		
		/// <summary>
		/// Cheque. The hotel accepts a printed document issued by the guest's bank in the guest's name as a form of payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cheque")]
		public System.Nullable<System.Boolean> Cheque { get; set; }
		
		/// <summary>
		/// Cheque exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chequeException")]
		public AccessibilityMobilityAccessibleElevatorException ChequeException { get; set; }
		
		/// <summary>
		/// Credit card. The hotel accepts payment by a card issued by a bank or credit card company. Also known as charge card, debit card, bank card, or charge plate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditCard")]
		public System.Nullable<System.Boolean> CreditCard { get; set; }
		
		/// <summary>
		/// Credit card exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditCardException")]
		public AccessibilityMobilityAccessibleElevatorException CreditCardException { get; set; }
		
		/// <summary>
		/// Debit card. The hotel accepts a bank-issued card that immediately deducts the charged funds from the guest's bank account upon processing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debitCard")]
		public System.Nullable<System.Boolean> DebitCard { get; set; }
		
		/// <summary>
		/// Debit card exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debitCardException")]
		public AccessibilityMobilityAccessibleElevatorException DebitCardException { get; set; }
		
		/// <summary>
		/// Mobile nfc. The hotel has the compatible computer hardware terminal that reads and charges a payment app on the guest's smartphone without requiring the two devices to make physical contact. Also known as Apple Pay, Google Pay, Samsung Pay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileNfc")]
		public System.Nullable<System.Boolean> MobileNfc { get; set; }
		
		/// <summary>
		/// Mobile nfc exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileNfcException")]
		public AccessibilityMobilityAccessibleElevatorException MobileNfcException { get; set; }
	}
	
	/// <summary>
	/// Swimming pool or recreational water facilities available at the hotel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Pools
	{
		
		/// <summary>
		/// Adult pool. A pool restricted for use by adults only. Can be indoors or outdoors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adultPool")]
		public System.Nullable<System.Boolean> AdultPool { get; set; }
		
		/// <summary>
		/// Adult pool exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adultPoolException")]
		public AccessibilityMobilityAccessibleElevatorException AdultPoolException { get; set; }
		
		/// <summary>
		/// Hot tub. A man-made pool containing bubbling water maintained at a higher temperature and circulated by aerating jets for the purpose of soaking, relaxation and hydrotherapy. Can be indoors or outdoors. Not used for active swimming. Also known as Jacuzzi. Hot tub must be in a common area where all guests can access it. Does not apply to room-specific hot tubs that are only accessible to guest occupying that room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotTub")]
		public System.Nullable<System.Boolean> HotTub { get; set; }
		
		/// <summary>
		/// Hot tub exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotTubException")]
		public AccessibilityMobilityAccessibleElevatorException HotTubException { get; set; }
		
		/// <summary>
		/// Indoor pool. A pool located inside the hotel and available for guests to use for swimming and/or soaking. Use may or may not be restricted to adults and/or children.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indoorPool")]
		public System.Nullable<System.Boolean> IndoorPool { get; set; }
		
		/// <summary>
		/// Indoor pool exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indoorPoolException")]
		public AccessibilityMobilityAccessibleElevatorException IndoorPoolException { get; set; }
		
		/// <summary>
		/// Indoor pools count. The sum of all indoor pools at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indoorPoolsCount")]
		public System.Nullable<System.Int32> IndoorPoolsCount { get; set; }
		
		/// <summary>
		/// Indoor pools count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indoorPoolsCountException")]
		public AccessibilityMobilityAccessibleElevatorException IndoorPoolsCountException { get; set; }
		
		/// <summary>
		/// Lazy river. A man-made pool or several interconnected recreational pools built to mimic the shape and current of a winding river where guests float in the water on inflated rubber tubes. Can be indoors or outdoors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lazyRiver")]
		public System.Nullable<System.Boolean> LazyRiver { get; set; }
		
		/// <summary>
		/// Lazy river exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lazyRiverException")]
		public AccessibilityMobilityAccessibleElevatorException LazyRiverException { get; set; }
		
		/// <summary>
		/// Lifeguard. A trained member of the hotel staff stationed by the hotel's indoor or outdoor swimming area and responsible for the safety of swimming guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifeguard")]
		public System.Nullable<System.Boolean> Lifeguard { get; set; }
		
		/// <summary>
		/// Lifeguard exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifeguardException")]
		public AccessibilityMobilityAccessibleElevatorException LifeguardException { get; set; }
		
		/// <summary>
		/// Outdoor pool. A pool located outside on the grounds of the hotel and available for guests to use for swimming, soaking or recreation. Use may or may not be restricted to adults and/or children.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outdoorPool")]
		public System.Nullable<System.Boolean> OutdoorPool { get; set; }
		
		/// <summary>
		/// Outdoor pool exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outdoorPoolException")]
		public AccessibilityMobilityAccessibleElevatorException OutdoorPoolException { get; set; }
		
		/// <summary>
		/// Outdoor pools count. The sum of all outdoor pools at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outdoorPoolsCount")]
		public System.Nullable<System.Int32> OutdoorPoolsCount { get; set; }
		
		/// <summary>
		/// Outdoor pools count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outdoorPoolsCountException")]
		public AccessibilityMobilityAccessibleElevatorException OutdoorPoolsCountException { get; set; }
		
		/// <summary>
		/// Pool. The presence of a pool, either indoors or outdoors, for guests to use for swimming and/or soaking. Use may or may not be restricted to adults and/or children.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pool")]
		public System.Nullable<System.Boolean> Pool { get; set; }
		
		/// <summary>
		/// Pool exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolException")]
		public AccessibilityMobilityAccessibleElevatorException PoolException { get; set; }
		
		/// <summary>
		/// Pools count. The sum of all pools at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolsCount")]
		public System.Nullable<System.Int32> PoolsCount { get; set; }
		
		/// <summary>
		/// Pools count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolsCountException")]
		public AccessibilityMobilityAccessibleElevatorException PoolsCountException { get; set; }
		
		/// <summary>
		/// Wading pool. A shallow pool designed for small children to play in. Can be indoors or outdoors. Also known as kiddie pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wadingPool")]
		public System.Nullable<System.Boolean> WadingPool { get; set; }
		
		/// <summary>
		/// Wading pool exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wadingPoolException")]
		public AccessibilityMobilityAccessibleElevatorException WadingPoolException { get; set; }
		
		/// <summary>
		/// Water park. An aquatic recreation area with a large pool or series of pools that has features such as a water slide or tube, wavepool, fountains, rope swings, and/or obstacle course. Can be indoors or outdoors. Also known as adventure pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterPark")]
		public System.Nullable<System.Boolean> WaterPark { get; set; }
		
		/// <summary>
		/// Water park exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterParkException")]
		public AccessibilityMobilityAccessibleElevatorException WaterParkException { get; set; }
		
		/// <summary>
		/// Waterslide. A continuously wetted chute positioned by an indoor or outdoor pool which people slide down into the water.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterslide")]
		public System.Nullable<System.Boolean> Waterslide { get; set; }
		
		/// <summary>
		/// Waterslide exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterslideException")]
		public AccessibilityMobilityAccessibleElevatorException WaterslideException { get; set; }
		
		/// <summary>
		/// Wave pool. A large indoor or outdoor pool with a machine that produces water currents to mimic the ocean's crests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wavePool")]
		public System.Nullable<System.Boolean> WavePool { get; set; }
		
		/// <summary>
		/// Wave pool exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wavePoolException")]
		public AccessibilityMobilityAccessibleElevatorException WavePoolException { get; set; }
	}
	
	/// <summary>
	/// General factual information about the property's physical structure and important dates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Property
	{
		
		/// <summary>
		/// Built year. The year that construction of the property was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="builtYear")]
		public System.Nullable<System.Int32> BuiltYear { get; set; }
		
		/// <summary>
		/// Built year exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="builtYearException")]
		public AccessibilityMobilityAccessibleElevatorException BuiltYearException { get; set; }
		
		/// <summary>
		/// Floors count. The number of stories the building has from the ground floor to the top floor that are accessible to guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floorsCount")]
		public System.Nullable<System.Int32> FloorsCount { get; set; }
		
		/// <summary>
		/// Floors count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floorsCountException")]
		public AccessibilityMobilityAccessibleElevatorException FloorsCountException { get; set; }
		
		/// <summary>
		/// Last renovated year. The year when the most recent renovation of the property was completed. Renovation may include all or any combination of the following: the units, the public spaces, the exterior, or the interior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRenovatedYear")]
		public System.Nullable<System.Int32> LastRenovatedYear { get; set; }
		
		/// <summary>
		/// Last renovated year exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRenovatedYearException")]
		public AccessibilityMobilityAccessibleElevatorException LastRenovatedYearException { get; set; }
		
		/// <summary>
		/// Rooms count. The total number of rooms and suites bookable by guests for an overnight stay. Does not include event space, public spaces, conference rooms, fitness rooms, business centers, spa, salon, restaurants/bars, or shops.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roomsCount")]
		public System.Nullable<System.Int32> RoomsCount { get; set; }
		
		/// <summary>
		/// Rooms count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roomsCountException")]
		public AccessibilityMobilityAccessibleElevatorException RoomsCountException { get; set; }
	}
	
	/// <summary>
	/// Conveniences or help provided by the property to facilitate an easier, more comfortable stay.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Services
	{
		
		/// <summary>
		/// Baggage storage. A provision for guests to leave their bags at the hotel when they arrive for their stay before the official check-in time. May or may not apply for guests who wish to leave their bags after check-out and before departing the locale. Also known as bag dropoff.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baggageStorage")]
		public System.Nullable<System.Boolean> BaggageStorage { get; set; }
		
		/// <summary>
		/// Baggage storage exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baggageStorageException")]
		public AccessibilityMobilityAccessibleElevatorException BaggageStorageException { get; set; }
		
		/// <summary>
		/// Concierge. Hotel staff member(s) responsible for facilitating an easy, comfortable stay through making reservations for meals, sourcing theater tickets, arranging tours, finding a doctor, making recommendations, and answering questions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concierge")]
		public System.Nullable<System.Boolean> Concierge { get; set; }
		
		/// <summary>
		/// Concierge exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conciergeException")]
		public AccessibilityMobilityAccessibleElevatorException ConciergeException { get; set; }
		
		/// <summary>
		/// Convenience store. A shop at the hotel primarily selling snacks, drinks, non-prescription medicines, health and beauty aids, magazines and newspapers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convenienceStore")]
		public System.Nullable<System.Boolean> ConvenienceStore { get; set; }
		
		/// <summary>
		/// Convenience store exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convenienceStoreException")]
		public AccessibilityMobilityAccessibleElevatorException ConvenienceStoreException { get; set; }
		
		/// <summary>
		/// Currency exchange. A staff member or automated machine tasked with the transaction of providing the native currency of the hotel's locale in exchange for the foreign currency provided by a guest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyExchange")]
		public System.Nullable<System.Boolean> CurrencyExchange { get; set; }
		
		/// <summary>
		/// Currency exchange exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyExchangeException")]
		public AccessibilityMobilityAccessibleElevatorException CurrencyExchangeException { get; set; }
		
		/// <summary>
		/// Elevator. A passenger elevator that transports guests from one story to another. Also known as lift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elevator")]
		public System.Nullable<System.Boolean> Elevator { get; set; }
		
		/// <summary>
		/// Elevator exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elevatorException")]
		public AccessibilityMobilityAccessibleElevatorException ElevatorException { get; set; }
		
		/// <summary>
		/// Front desk. A counter or desk in the lobby or the immediate interior of the hotel where a member of the staff greets guests and processes the information related to their stay (including check-in and check-out). May or may not be manned and open 24/7.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frontDesk")]
		public System.Nullable<System.Boolean> FrontDesk { get; set; }
		
		/// <summary>
		/// Front desk exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frontDeskException")]
		public AccessibilityMobilityAccessibleElevatorException FrontDeskException { get; set; }
		
		/// <summary>
		/// Full service laundry. Laundry and dry cleaning facilitated and handled by the hotel on behalf of the guest. Does not include the provision for guests to do their own laundry in on-site machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullServiceLaundry")]
		public System.Nullable<System.Boolean> FullServiceLaundry { get; set; }
		
		/// <summary>
		/// Full service laundry exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullServiceLaundryException")]
		public AccessibilityMobilityAccessibleElevatorException FullServiceLaundryException { get; set; }
		
		/// <summary>
		/// Gift shop. An on-site store primarily selling souvenirs, mementos and other gift items. May or may not also sell sundries, magazines and newspapers, clothing, or snacks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftShop")]
		public System.Nullable<System.Boolean> GiftShop { get; set; }
		
		/// <summary>
		/// Gift shop exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftShopException")]
		public AccessibilityMobilityAccessibleElevatorException GiftShopException { get; set; }
		
		/// <summary>
		/// Languages spoken by at least one staff member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languagesSpoken")]
		public LanguageSpoken[] LanguagesSpoken { get; set; }
		
		/// <summary>
		/// Self service laundry. On-site clothes washers and dryers accessible to guests for the purpose of washing and drying their own clothes. May or may not require payment to use the machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfServiceLaundry")]
		public System.Nullable<System.Boolean> SelfServiceLaundry { get; set; }
		
		/// <summary>
		/// Self service laundry exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfServiceLaundryException")]
		public AccessibilityMobilityAccessibleElevatorException SelfServiceLaundryException { get; set; }
		
		/// <summary>
		/// Social hour. A reception with complimentary soft drinks, tea, coffee, wine and/or cocktails in the afternoon or evening. Can be hosted by hotel staff or guests may serve themselves. Also known as wine hour. The availability of coffee/tea in the lobby throughout the day does not constitute a social or wine hour.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socialHour")]
		public System.Nullable<System.Boolean> SocialHour { get; set; }
		
		/// <summary>
		/// Social hour exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socialHourException")]
		public AccessibilityMobilityAccessibleElevatorException SocialHourException { get; set; }
		
		/// <summary>
		/// 24hr front desk. Front desk is staffed 24 hours a day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twentyFourHourFrontDesk")]
		public System.Nullable<System.Boolean> TwentyFourHourFrontDesk { get; set; }
		
		/// <summary>
		/// 24hr front desk exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twentyFourHourFrontDeskException")]
		public AccessibilityMobilityAccessibleElevatorException TwentyFourHourFrontDeskException { get; set; }
		
		/// <summary>
		/// Wake up calls. By direction of the guest, a hotel staff member will phone the guest unit at the requested hour. Also known as morning call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wakeUpCalls")]
		public System.Nullable<System.Boolean> WakeUpCalls { get; set; }
		
		/// <summary>
		/// Wake up calls exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wakeUpCallsException")]
		public AccessibilityMobilityAccessibleElevatorException WakeUpCallsException { get; set; }
	}
	
	/// <summary>
	/// Language spoken by at least one staff member.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LanguageSpoken
	{
		
		/// <summary>
		/// Required. The BCP-47 language code for the spoken language. Currently accepted codes: ar, de, en, es, fil, fr, hi, id, it, ja, ko, nl, pt, ru, vi, yue, zh.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// At least one member of the staff can speak the language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spoken")]
		public System.Nullable<System.Boolean> Spoken { get; set; }
		
		/// <summary>
		/// Spoken exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spokenException")]
		public AccessibilityMobilityAccessibleElevatorException SpokenException { get; set; }
	}
	
	/// <summary>
	/// Sustainability practices implemented at the hotel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sustainability
	{
		
		/// <summary>
		/// Energy efficiency practices implemented at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyEfficiency")]
		public EnergyEfficiency EnergyEfficiency { get; set; }
		
		/// <summary>
		/// Sustainability certifications the hotel has been awarded. Deprecated: this message is no longer populated. All certification data is now provided by BeCause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sustainabilityCertifications")]
		public SustainabilityCertifications SustainabilityCertifications { get; set; }
		
		/// <summary>
		/// Sustainable sourcing practices implemented at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sustainableSourcing")]
		public SustainableSourcing SustainableSourcing { get; set; }
		
		/// <summary>
		/// Waste reduction practices implemented at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wasteReduction")]
		public WasteReduction WasteReduction { get; set; }
		
		/// <summary>
		/// Water conservation practices implemented at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterConservation")]
		public WaterConservation WaterConservation { get; set; }
	}
	
	/// <summary>
	/// Sustainability certifications the hotel has been awarded. Deprecated: this message is no longer populated. All certification data is now provided by BeCause.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SustainabilityCertifications
	{
		
		/// <summary>
		/// BREEAM certification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breeamCertification")]
		public System.Nullable<SustainabilityCertificationsBreeamCertification> BreeamCertification { get; set; }
		
		/// <summary>
		/// BREEAM certification exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breeamCertificationException")]
		public AccessibilityMobilityAccessibleElevatorException BreeamCertificationException { get; set; }
		
		/// <summary>
		/// The eco certificates awarded to the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ecoCertifications")]
		public EcoCertification[] EcoCertifications { get; set; }
		
		/// <summary>
		/// LEED certification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leedCertification")]
		public System.Nullable<SustainabilityCertificationsLeedCertification> LeedCertification { get; set; }
		
		/// <summary>
		/// LEED certification exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leedCertificationException")]
		public AccessibilityMobilityAccessibleElevatorException LeedCertificationException { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SustainabilityCertificationsBreeamCertification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREEAM_CERTIFICATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_BREEAM_CERTIFICATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREEAM_PASS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREEAM_GOOD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREEAM_VERY_GOOD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREEAM_EXCELLENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREEAM_OUTSTANDING = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SustainabilityCertificationsLeedCertification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEED_CERTIFICATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LEED_CERTIFICATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEED_CERTIFIED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEED_SILVER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEED_GOLD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEED_PLATINUM = 5,
	}
	
	/// <summary>
	/// Sustainable sourcing practices implemented at the hotel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SustainableSourcing
	{
		
		/// <summary>
		/// Eco friendly toiletries. Soap, shampoo, lotion, and other toiletries provided for guests have a nationally or internationally recognized sustainability certification, such as USDA Organic, EU Organic, or cruelty-free.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ecoFriendlyToiletries")]
		public System.Nullable<System.Boolean> EcoFriendlyToiletries { get; set; }
		
		/// <summary>
		/// Eco friendly toiletries exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ecoFriendlyToiletriesException")]
		public AccessibilityMobilityAccessibleElevatorException EcoFriendlyToiletriesException { get; set; }
		
		/// <summary>
		/// Locally sourced food and beverages. Property sources locally in order to lower the environmental footprint from reduced transportation and to stimulate the local economy. Products produced less than 62 miles from the establishment are normally considered as locally produced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locallySourcedFoodAndBeverages")]
		public System.Nullable<System.Boolean> LocallySourcedFoodAndBeverages { get; set; }
		
		/// <summary>
		/// Locally sourced food and beverages exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locallySourcedFoodAndBeveragesException")]
		public AccessibilityMobilityAccessibleElevatorException LocallySourcedFoodAndBeveragesException { get; set; }
		
		/// <summary>
		/// Organic cage free eggs. The property sources 100% certified organic and cage-free eggs (shell, liquid, and egg products). Cage-free means hens are able to walk, spread their wings and lay their eggs in nests).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organicCageFreeEggs")]
		public System.Nullable<System.Boolean> OrganicCageFreeEggs { get; set; }
		
		/// <summary>
		/// Organic cage free eggs exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organicCageFreeEggsException")]
		public AccessibilityMobilityAccessibleElevatorException OrganicCageFreeEggsException { get; set; }
		
		/// <summary>
		/// Organic food and beverages. At least 25% of food and beverages, by spend, are certified organic. Organic means products that are certified to one of the organic standard listed in the IFOAM family of standards. Qualifying certifications include USDA Organic and EU Organic, among others.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organicFoodAndBeverages")]
		public System.Nullable<System.Boolean> OrganicFoodAndBeverages { get; set; }
		
		/// <summary>
		/// Organic food and beverages exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organicFoodAndBeveragesException")]
		public AccessibilityMobilityAccessibleElevatorException OrganicFoodAndBeveragesException { get; set; }
		
		/// <summary>
		/// Responsible purchasing policy. The property has a responsible procurement policy in place. Responsible means integration of social, ethical, and/or environmental performance factors into the procurement process when selecting suppliers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsiblePurchasingPolicy")]
		public System.Nullable<System.Boolean> ResponsiblePurchasingPolicy { get; set; }
		
		/// <summary>
		/// Responsible purchasing policy exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsiblePurchasingPolicyException")]
		public AccessibilityMobilityAccessibleElevatorException ResponsiblePurchasingPolicyException { get; set; }
		
		/// <summary>
		/// Responsibly sources seafood. The property does not source seafood from the Monterey Bay Aquarium Seafood Watch "avoid" list, and must sustainably source seafood listed as "good alternative," "eco-certified," and "best choice". The property has a policy outlining a commitment to source Marine Stewardship Council (MSC) and/or Aquaculture Stewardship Council (ASC) Chain of Custody certified seafood.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsiblySourcesSeafood")]
		public System.Nullable<System.Boolean> ResponsiblySourcesSeafood { get; set; }
		
		/// <summary>
		/// Responsibly sources seafood exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsiblySourcesSeafoodException")]
		public AccessibilityMobilityAccessibleElevatorException ResponsiblySourcesSeafoodException { get; set; }
		
		/// <summary>
		/// Vegan meals. The property provides vegan menu options for guests. Vegan food does not contain animal products or byproducts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="veganMeals")]
		public System.Nullable<System.Boolean> VeganMeals { get; set; }
		
		/// <summary>
		/// Vegan meals exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="veganMealsException")]
		public AccessibilityMobilityAccessibleElevatorException VeganMealsException { get; set; }
		
		/// <summary>
		/// Vegetarian meals. The property provides vegetarian menu options for guests. Vegetarian food does not contain meat, poultry, fish, or seafood.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vegetarianMeals")]
		public System.Nullable<System.Boolean> VegetarianMeals { get; set; }
		
		/// <summary>
		/// Vegetarian meals exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vegetarianMealsException")]
		public AccessibilityMobilityAccessibleElevatorException VegetarianMealsException { get; set; }
	}
	
	/// <summary>
	/// Waste reduction practices implemented at the hotel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WasteReduction
	{
		
		/// <summary>
		/// Compostable food containers and cutlery. 100% of food service containers and to-go cutlery are compostable, and reusable utensils are offered wherever possible. Compostable materials are capable of undergoing biological decomposition in a compost site, such that material is not visually distinguishable and breaks down into carbon dioxide, water, inorganic compounds, and biomass.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compostableFoodContainersAndCutlery")]
		public System.Nullable<System.Boolean> CompostableFoodContainersAndCutlery { get; set; }
		
		/// <summary>
		/// Compostable food containers and cutlery exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compostableFoodContainersAndCutleryException")]
		public AccessibilityMobilityAccessibleElevatorException CompostableFoodContainersAndCutleryException { get; set; }
		
		/// <summary>
		/// Composts excess food. The property has a program and/or policy for diverting waste from landfill by composting food and yard waste, either through compost collection and off-site processing or on-site compost processing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compostsExcessFood")]
		public System.Nullable<System.Boolean> CompostsExcessFood { get; set; }
		
		/// <summary>
		/// Composts excess food exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compostsExcessFoodException")]
		public AccessibilityMobilityAccessibleElevatorException CompostsExcessFoodException { get; set; }
		
		/// <summary>
		/// Donates excess food. The property has a program and/or policy for diverting waste from landfill that may include efforts to donate for human consumption or divert food for animal feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="donatesExcessFood")]
		public System.Nullable<System.Boolean> DonatesExcessFood { get; set; }
		
		/// <summary>
		/// Donates excess food exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="donatesExcessFoodException")]
		public AccessibilityMobilityAccessibleElevatorException DonatesExcessFoodException { get; set; }
		
		/// <summary>
		/// Food waste reduction program. The property has established a food waste reduction and donation program, aiming to reduce food waste by half. These programs typically use tools such as the Hotel Kitchen Toolkit and others to track waste and measure progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foodWasteReductionProgram")]
		public System.Nullable<System.Boolean> FoodWasteReductionProgram { get; set; }
		
		/// <summary>
		/// Food waste reduction program exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foodWasteReductionProgramException")]
		public AccessibilityMobilityAccessibleElevatorException FoodWasteReductionProgramException { get; set; }
		
		/// <summary>
		/// No single use plastic straws. The property bans single-use plastic straws.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noSingleUsePlasticStraws")]
		public System.Nullable<System.Boolean> NoSingleUsePlasticStraws { get; set; }
		
		/// <summary>
		/// No single use plastic straws exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noSingleUsePlasticStrawsException")]
		public AccessibilityMobilityAccessibleElevatorException NoSingleUsePlasticStrawsException { get; set; }
		
		/// <summary>
		/// No single use plastic water bottles. The property bans single-use plastic water bottles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noSingleUsePlasticWaterBottles")]
		public System.Nullable<System.Boolean> NoSingleUsePlasticWaterBottles { get; set; }
		
		/// <summary>
		/// No single use plastic water bottles exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noSingleUsePlasticWaterBottlesException")]
		public AccessibilityMobilityAccessibleElevatorException NoSingleUsePlasticWaterBottlesException { get; set; }
		
		/// <summary>
		/// No styrofoam food containers. The property eliminates the use of Styrofoam in disposable food service items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noStyrofoamFoodContainers")]
		public System.Nullable<System.Boolean> NoStyrofoamFoodContainers { get; set; }
		
		/// <summary>
		/// No styrofoam food containers exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noStyrofoamFoodContainersException")]
		public AccessibilityMobilityAccessibleElevatorException NoStyrofoamFoodContainersException { get; set; }
		
		/// <summary>
		/// Recycling program. The property has a recycling program, aligned with LEED waste requirements, and a policy outlining efforts to send less than 50% of waste to landfill. The recycling program includes storage locations for recyclable materials, including mixed paper, corrugated cardboard, glass, plastics, and metals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recyclingProgram")]
		public System.Nullable<System.Boolean> RecyclingProgram { get; set; }
		
		/// <summary>
		/// Recycling program exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recyclingProgramException")]
		public AccessibilityMobilityAccessibleElevatorException RecyclingProgramException { get; set; }
		
		/// <summary>
		/// Refillable toiletry containers. The property has replaced miniature individual containers with refillable amenity dispensers for shampoo, conditioner, soap, and lotion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refillableToiletryContainers")]
		public System.Nullable<System.Boolean> RefillableToiletryContainers { get; set; }
		
		/// <summary>
		/// Refillable toiletry containers exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refillableToiletryContainersException")]
		public AccessibilityMobilityAccessibleElevatorException RefillableToiletryContainersException { get; set; }
		
		/// <summary>
		/// Safely disposes batteries. The property safely stores and disposes batteries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safelyDisposesBatteries")]
		public System.Nullable<System.Boolean> SafelyDisposesBatteries { get; set; }
		
		/// <summary>
		/// Safely disposes batteries exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safelyDisposesBatteriesException")]
		public AccessibilityMobilityAccessibleElevatorException SafelyDisposesBatteriesException { get; set; }
		
		/// <summary>
		/// Safely disposes electronics. The property has a reputable recycling program that keeps hazardous electronic parts and chemical compounds out of landfills, dumps and other unauthorized abandonment sites, and recycles/reuses applicable materials. (e.g. certified electronics recyclers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safelyDisposesElectronics")]
		public System.Nullable<System.Boolean> SafelyDisposesElectronics { get; set; }
		
		/// <summary>
		/// Safely disposes electronics exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safelyDisposesElectronicsException")]
		public AccessibilityMobilityAccessibleElevatorException SafelyDisposesElectronicsException { get; set; }
		
		/// <summary>
		/// Safely disposes lightbulbs. The property safely stores and disposes lightbulbs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safelyDisposesLightbulbs")]
		public System.Nullable<System.Boolean> SafelyDisposesLightbulbs { get; set; }
		
		/// <summary>
		/// Safely disposes lightbulbs exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safelyDisposesLightbulbsException")]
		public AccessibilityMobilityAccessibleElevatorException SafelyDisposesLightbulbsException { get; set; }
		
		/// <summary>
		/// Safely handles hazardous substances. The property has a hazardous waste management program aligned wit GreenSeal and LEED requirements, and meets all regulatory requirements for hazardous waste disposal and recycling. Hazardous means substances that are classified as "hazardous" by an authoritative body (such as OSHA or DOT), are labeled with signal words such as "Danger," "Caution," "Warning," or are flammable, corrosive, or ignitable. Requirements include: - The property shall maintain records of the efforts it has made to replace the hazardous substances it uses with less hazardous alternatives. - An inventory of the hazardous materials stored on-site. - Products intended for cleaning, dishwashing, laundry, and pool maintenance shall be stored in clearly labeled containers. These containers shall be checked regularly for leaks, and replaced a necessary. - Spill containment devices shall be installed to collect spills, drips, or leaching of chemicals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safelyHandlesHazardousSubstances")]
		public System.Nullable<System.Boolean> SafelyHandlesHazardousSubstances { get; set; }
		
		/// <summary>
		/// Safely handles hazardous substances exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safelyHandlesHazardousSubstancesException")]
		public AccessibilityMobilityAccessibleElevatorException SafelyHandlesHazardousSubstancesException { get; set; }
		
		/// <summary>
		/// Soap donation program. The property participates in a soap donation program such as Clean the World or something similar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="soapDonationProgram")]
		public System.Nullable<System.Boolean> SoapDonationProgram { get; set; }
		
		/// <summary>
		/// Soap donation program exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="soapDonationProgramException")]
		public AccessibilityMobilityAccessibleElevatorException SoapDonationProgramException { get; set; }
		
		/// <summary>
		/// Toiletry donation program. The property participates in a toiletry donation program such as Clean the World or something similar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toiletryDonationProgram")]
		public System.Nullable<System.Boolean> ToiletryDonationProgram { get; set; }
		
		/// <summary>
		/// Toiletry donation program exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toiletryDonationProgramException")]
		public AccessibilityMobilityAccessibleElevatorException ToiletryDonationProgramException { get; set; }
		
		/// <summary>
		/// Water bottle filling stations. The property offers water stations throughout the building for guest use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterBottleFillingStations")]
		public System.Nullable<System.Boolean> WaterBottleFillingStations { get; set; }
		
		/// <summary>
		/// Water bottle filling stations exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterBottleFillingStationsException")]
		public AccessibilityMobilityAccessibleElevatorException WaterBottleFillingStationsException { get; set; }
	}
	
	/// <summary>
	/// Water conservation practices implemented at the hotel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WaterConservation
	{
		
		/// <summary>
		/// Independent organization audits water use. The property conducts a water conservation audit every 5 years, the results of which are either verified by a third-party and/or published in external communications. A water conservation audit is a detailed assessment of the facility, providing recommendations to existing operations and procedures to improve water efficiency, available incentives or rebates, and opportunities for improvements through renovations or upgrades. Examples of organizations who conduct credible third party audits include: Engie Impact, and local utility providers (they often provide energy and water audits).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="independentOrganizationAuditsWaterUse")]
		public System.Nullable<System.Boolean> IndependentOrganizationAuditsWaterUse { get; set; }
		
		/// <summary>
		/// Independent organization audits water use exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="independentOrganizationAuditsWaterUseException")]
		public AccessibilityMobilityAccessibleElevatorException IndependentOrganizationAuditsWaterUseException { get; set; }
		
		/// <summary>
		/// Linen reuse program. The property offers a linen reuse program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linenReuseProgram")]
		public System.Nullable<System.Boolean> LinenReuseProgram { get; set; }
		
		/// <summary>
		/// Linen reuse program exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linenReuseProgramException")]
		public AccessibilityMobilityAccessibleElevatorException LinenReuseProgramException { get; set; }
		
		/// <summary>
		/// Towel reuse program. The property offers a towel reuse program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="towelReuseProgram")]
		public System.Nullable<System.Boolean> TowelReuseProgram { get; set; }
		
		/// <summary>
		/// Towel reuse program exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="towelReuseProgramException")]
		public AccessibilityMobilityAccessibleElevatorException TowelReuseProgramException { get; set; }
		
		/// <summary>
		/// Water saving showers. All of the property's guest rooms have shower heads that use no more than 2.0 gallons per minute (gpm).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterSavingShowers")]
		public System.Nullable<System.Boolean> WaterSavingShowers { get; set; }
		
		/// <summary>
		/// Water saving showers exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterSavingShowersException")]
		public AccessibilityMobilityAccessibleElevatorException WaterSavingShowersException { get; set; }
		
		/// <summary>
		/// Water saving sinks. All of the property's guest rooms have bathroom faucets that use a maximum of 1.5 gallons per minute (gpm), public restroom faucets do not exceed 0.5 gpm, and kitchen faucets (excluding faucets used exclusively for filling operations) do not exceed 2.2 gpm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterSavingSinks")]
		public System.Nullable<System.Boolean> WaterSavingSinks { get; set; }
		
		/// <summary>
		/// Water saving sinks exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterSavingSinksException")]
		public AccessibilityMobilityAccessibleElevatorException WaterSavingSinksException { get; set; }
		
		/// <summary>
		/// Water saving toilets. All of the property's toilets use 1.6 gallons per flush, or less.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterSavingToilets")]
		public System.Nullable<System.Boolean> WaterSavingToilets { get; set; }
		
		/// <summary>
		/// Water saving toilets exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterSavingToiletsException")]
		public AccessibilityMobilityAccessibleElevatorException WaterSavingToiletsException { get; set; }
	}
	
	/// <summary>
	/// Vehicles or vehicular services facilitated or owned by the property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Transportation
	{
		
		/// <summary>
		/// Airport shuttle. The hotel provides guests with a chauffeured van or bus to and from the airport. Can be free or for a fee. Guests may share the vehicle with other guests unknown to them. Applies if the hotel has a third-party shuttle service (office/desk etc.) within the hotel. As long as hotel provides this service, it doesn't matter if it's directly with them or a third party they work with. Does not apply if guest has to coordinate with an entity outside/other than the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airportShuttle")]
		public System.Nullable<System.Boolean> AirportShuttle { get; set; }
		
		/// <summary>
		/// Airport shuttle exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airportShuttleException")]
		public AccessibilityMobilityAccessibleElevatorException AirportShuttleException { get; set; }
		
		/// <summary>
		/// Car rental on property. A branch of a rental car company with a processing desk in the hotel. Available cars for rent may be awaiting at the hotel or in a nearby lot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carRentalOnProperty")]
		public System.Nullable<System.Boolean> CarRentalOnProperty { get; set; }
		
		/// <summary>
		/// Car rental on property exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carRentalOnPropertyException")]
		public AccessibilityMobilityAccessibleElevatorException CarRentalOnPropertyException { get; set; }
		
		/// <summary>
		/// Free airport shuttle. Airport shuttle is free to guests. Must be free to all guests without any conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeAirportShuttle")]
		public System.Nullable<System.Boolean> FreeAirportShuttle { get; set; }
		
		/// <summary>
		/// Free airport shuttle exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeAirportShuttleException")]
		public AccessibilityMobilityAccessibleElevatorException FreeAirportShuttleException { get; set; }
		
		/// <summary>
		/// Free private car service. Private chauffeured car service is free to guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freePrivateCarService")]
		public System.Nullable<System.Boolean> FreePrivateCarService { get; set; }
		
		/// <summary>
		/// Free private car service exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freePrivateCarServiceException")]
		public AccessibilityMobilityAccessibleElevatorException FreePrivateCarServiceException { get; set; }
		
		/// <summary>
		/// Local shuttle. A car, van or bus provided by the hotel to transport guests to destinations within a specified range of distance around the hotel. Usually shopping and/or convention centers, downtown districts, or beaches. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localShuttle")]
		public System.Nullable<System.Boolean> LocalShuttle { get; set; }
		
		/// <summary>
		/// Local shuttle exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localShuttleException")]
		public AccessibilityMobilityAccessibleElevatorException LocalShuttleException { get; set; }
		
		/// <summary>
		/// Private car service. Hotel provides a private chauffeured car to transport guests to destinations. Passengers in the car are either alone or are known to one another and have requested the car together. Service can be free or for a fee and travel distance is usually limited to a specific range. Not a taxi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateCarService")]
		public System.Nullable<System.Boolean> PrivateCarService { get; set; }
		
		/// <summary>
		/// Private car service exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateCarServiceException")]
		public AccessibilityMobilityAccessibleElevatorException PrivateCarServiceException { get; set; }
		
		/// <summary>
		/// Transfer. Hotel provides a shuttle service or car service to take guests to and from the nearest airport or train station. Can be free or for a fee. Guests may share the vehicle with other guests unknown to them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfer")]
		public System.Nullable<System.Boolean> Transfer { get; set; }
		
		/// <summary>
		/// Transfer exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferException")]
		public AccessibilityMobilityAccessibleElevatorException TransferException { get; set; }
	}
	
	/// <summary>
	/// Guest facilities at the property to promote or maintain health, beauty, and fitness.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Wellness
	{
		
		/// <summary>
		/// Doctor on call. The hotel has a contract with a medical professional who provides services to hotel guests should they fall ill during their stay. The doctor may or may not have an on-site office or be at the hotel at all times.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doctorOnCall")]
		public System.Nullable<System.Boolean> DoctorOnCall { get; set; }
		
		/// <summary>
		/// Doctor on call exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doctorOnCallException")]
		public AccessibilityMobilityAccessibleElevatorException DoctorOnCallException { get; set; }
		
		/// <summary>
		/// Elliptical machine. An electric, stationary fitness machine with pedals that simulates climbing, walking or running and provides a user-controlled range of speeds and tensions. May not have arm-controlled levers to work out the upper body as well. Commonly found in a gym, fitness room, health center, or health club.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ellipticalMachine")]
		public System.Nullable<System.Boolean> EllipticalMachine { get; set; }
		
		/// <summary>
		/// Elliptical machine exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ellipticalMachineException")]
		public AccessibilityMobilityAccessibleElevatorException EllipticalMachineException { get; set; }
		
		/// <summary>
		/// Fitness center. A room or building at the hotel containing equipment to promote physical activity, such as treadmills, elliptical machines, stationary bikes, weight machines, free weights, and/or stretching mats. Use of the fitness center can be free or for a fee. May or may not be staffed. May or may not offer instructor-led classes in various styles of physical conditioning. May or may not be open 24/7. May or may not include locker rooms and showers. Also known as health club, gym, fitness room, health center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fitnessCenter")]
		public System.Nullable<System.Boolean> FitnessCenter { get; set; }
		
		/// <summary>
		/// Fitness center exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fitnessCenterException")]
		public AccessibilityMobilityAccessibleElevatorException FitnessCenterException { get; set; }
		
		/// <summary>
		/// Free fitness center. Guests may use the fitness center for free.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeFitnessCenter")]
		public System.Nullable<System.Boolean> FreeFitnessCenter { get; set; }
		
		/// <summary>
		/// Free fitness center exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeFitnessCenterException")]
		public AccessibilityMobilityAccessibleElevatorException FreeFitnessCenterException { get; set; }
		
		/// <summary>
		/// Free weights. Individual handheld fitness equipment of varied weights used for upper body strength training or bodybuilding. Also known as barbells, dumbbells, or kettlebells. Often stored on a rack with the weights arranged from light to heavy. Commonly found in a gym, fitness room, health center, or health club.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeWeights")]
		public System.Nullable<System.Boolean> FreeWeights { get; set; }
		
		/// <summary>
		/// Free weights exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeWeightsException")]
		public AccessibilityMobilityAccessibleElevatorException FreeWeightsException { get; set; }
		
		/// <summary>
		/// Massage. A service provided by a trained massage therapist involving the physical manipulation of a guest's muscles in order to achieve relaxation or pain relief.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="massage")]
		public System.Nullable<System.Boolean> Massage { get; set; }
		
		/// <summary>
		/// Massage exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="massageException")]
		public AccessibilityMobilityAccessibleElevatorException MassageException { get; set; }
		
		/// <summary>
		/// Salon. A room at the hotel where professionals provide hair styling services such as shampooing, blow drying, hair dos, hair cutting and hair coloring. Also known as hairdresser or beauty salon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salon")]
		public System.Nullable<System.Boolean> Salon { get; set; }
		
		/// <summary>
		/// Salon exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salonException")]
		public AccessibilityMobilityAccessibleElevatorException SalonException { get; set; }
		
		/// <summary>
		/// Sauna. A wood-paneled room heated to a high temperature where guests sit on built-in wood benches for the purpose of perspiring and relaxing their muscles. Can be dry or slightly wet heat. Not a steam room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sauna")]
		public System.Nullable<System.Boolean> Sauna { get; set; }
		
		/// <summary>
		/// Sauna exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saunaException")]
		public AccessibilityMobilityAccessibleElevatorException SaunaException { get; set; }
		
		/// <summary>
		/// Spa. A designated area, room or building at the hotel offering health and beauty treatment through such means as steam baths, exercise equipment, and massage. May also offer facials, nail care, and hair care. Services are usually available by appointment and for an additional fee. Does not apply if hotel only offers a steam room; must offer other beauty and/or health treatments as well.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spa")]
		public System.Nullable<System.Boolean> Spa { get; set; }
		
		/// <summary>
		/// Spa exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaException")]
		public AccessibilityMobilityAccessibleElevatorException SpaException { get; set; }
		
		/// <summary>
		/// Treadmill. An electric stationary fitness machine that simulates a moving path to promote walking or running within a range of user-controlled speeds and inclines. Also known as running machine. Commonly found in a gym, fitness room, health center, or health club.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treadmill")]
		public System.Nullable<System.Boolean> Treadmill { get; set; }
		
		/// <summary>
		/// Treadmill exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treadmillException")]
		public AccessibilityMobilityAccessibleElevatorException TreadmillException { get; set; }
		
		/// <summary>
		/// Weight machine. Non-electronic fitness equipment designed for the user to target the exertion of different muscles. Usually incorporates a padded seat, a stack of flat weights and various bars and pulleys. May be designed for toning a specific part of the body or may involve different user-controlled settings, hardware and pulleys so as to provide an overall workout in one machine. Commonly found in a gym, fitness center, fitness room, or health club.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weightMachine")]
		public System.Nullable<System.Boolean> WeightMachine { get; set; }
		
		/// <summary>
		/// Weight machine exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weightMachineException")]
		public AccessibilityMobilityAccessibleElevatorException WeightMachineException { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns the Lodging of a specific location.
		/// Mybusinesslodging_locations_getLodging v1/{name}
		/// </summary>
		/// <param name="name">Required. Google identifier for this location in the form: `locations/{location_id}/lodging`</param>
		/// <param name="readMask">Required. The specific fields to return. Use "*" to include all fields. Repeated field items cannot be individually specified.</param>
		/// <returns>Successful response</returns>
		public async Task<Lodging> Mybusinesslodging_locations_getLodgingAsync(string name, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Lodging>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Lodging of a specific location.
		/// Mybusinesslodging_locations_updateLodging v1/{name}
		/// </summary>
		/// <param name="name">Required. Google identifier for this location in the form: `locations/{location_id}/lodging`</param>
		/// <param name="updateMask">Required. The specific fields to update. Use "*" to update all fields, which may include unsetting empty fields in the request. Repeated field items cannot be individually updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Lodging> Mybusinesslodging_locations_updateLodgingAsync(string name, string updateMask, Lodging requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Lodging>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the Google updated Lodging of a specific location.
		/// Mybusinesslodging_locations_lodging_getGoogleUpdated v1/{name}:getGoogleUpdated
		/// </summary>
		/// <param name="name">Required. Google identifier for this location in the form: `locations/{location_id}/lodging`</param>
		/// <param name="readMask">Required. The specific fields to return. Use "*" to include all fields. Repeated field items cannot be individually specified.</param>
		/// <returns>Successful response</returns>
		public async Task<GetGoogleUpdatedLodgingResponse> Mybusinesslodging_locations_lodging_getGoogleUpdatedAsync(string name, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":getGoogleUpdated&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetGoogleUpdatedLodgingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
