//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMigrationWorkflowResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adsApplicationConfigurationId")]
		public string AdsApplicationConfigurationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowInputs")]
		public StepInputParameters WorkflowInputs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepTargets")]
		public string[] StepTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MigrationWorkflowStatusEnum Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public StringMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StepInputParameters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MigrationWorkflowStatusEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_STARTED")]
		NOT_STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATION_FAILED")]
		CREATION_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STARTING")]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WORKFLOW_FAILED")]
		WORKFLOW_FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAUSED")]
		PAUSED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAUSING")]
		PAUSING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAUSING_FAILED")]
		PAUSING_FAILED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USER_ATTENTION_REQUIRED")]
		USER_ATTENTION_REQUIRED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETION_FAILED")]
		DELETION_FAILED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StringMap
	{
	}
	
	/// <summary>
	/// A map of key value pairs that is generated when you create a migration workflow. The key value pairs will differ based on your selection of the template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StepInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="integerValue")]
		public System.Nullable<System.Int32> IntegerValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listOfStringsValue")]
		public string[] ListOfStringsValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapOfStringValue")]
		public StringMap MapOfStringValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkflowStepResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepGroupId")]
		public string StepGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The script location for a particular operating system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlatformScriptKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="linux")]
		public string Linux { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="windows")]
		public string Windows { get; set; }
	}
	
	/// <summary>
	/// Command to be run on a particular operating system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlatformCommand
	{
		
		[System.Runtime.Serialization.DataMember(Name="linux")]
		public string Linux { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="windows")]
		public string Windows { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RunEnvironment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS")]
		AWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ONPREMISE")]
		ONPREMISE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SINGLE")]
		SINGLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 2,
	}
	
	/// <summary>
	/// The output of a step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkflowStepOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public DataType DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WorkflowStepOutputUnion Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRING")]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTEGER")]
		INTEGER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRINGLIST")]
		STRINGLIST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRINGMAP")]
		STRINGMAP = 3,
	}
	
	/// <summary>
	/// A structure to hold multiple values of an output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkflowStepOutputUnion
	{
		
		[System.Runtime.Serialization.DataMember(Name="integerValue")]
		public System.Nullable<System.Int32> IntegerValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listOfStringValue")]
		public string[] ListOfStringValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkflowStepGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tools")]
		public Tool[] Tools { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	/// <summary>
	/// List of AWS services utilized in a migration workflow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tool
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMigrationWorkflowResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MigrationWorkflowStatusEnum Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWorkflowStepResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWorkflowStepGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMigrationWorkflowTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public TemplateInput[] Inputs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tools")]
		public Tool[] Tools { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TemplateStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	/// <summary>
	/// The input parameters of a template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="inputName")]
		public string InputName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public DataType DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TemplateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATED")]
		CREATED = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTemplateStepResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepGroupId")]
		public string StepGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepActionType")]
		public StepActionType StepActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public StepOutput[] Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepAutomationConfiguration")]
		public StepAutomationConfiguration StepAutomationConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StepActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANUAL")]
		MANUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTOMATED")]
		AUTOMATED = 1,
	}
	
	/// <summary>
	/// The output of the step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StepOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public DataType DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
	}
	
	/// <summary>
	/// The custom script to run tests on source or target environments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StepAutomationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="scriptLocationS3Bucket")]
		public string ScriptLocationS3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptLocationS3Key")]
		public PlatformScriptKey ScriptLocationS3Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="command")]
		public PlatformCommand Command { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runEnvironment")]
		public RunEnvironment RunEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetType")]
		public TargetType TargetType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTemplateStepGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StepGroupStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tools")]
		public Tool[] Tools { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StepGroupStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWAITING_DEPENDENCIES")]
		AWAITING_DEPENDENCIES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READY")]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAUSED")]
		PAUSED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAUSING")]
		PAUSING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USER_ATTENTION_REQUIRED")]
		USER_ATTENTION_REQUIRED = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMigrationWorkflowResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adsApplicationConfigurationId")]
		public string AdsApplicationConfigurationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adsApplicationName")]
		public string AdsApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MigrationWorkflowStatusEnum Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStartTime")]
		public System.DateTimeOffset LastStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStopTime")]
		public System.DateTimeOffset LastStopTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tools")]
		public Tool[] Tools { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalSteps")]
		public System.Nullable<System.Int32> TotalSteps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completedSteps")]
		public System.Nullable<System.Int32> CompletedSteps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowInputs")]
		public StepInputParameters WorkflowInputs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public StringMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowBucket")]
		public string WorkflowBucket { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWorkflowStepResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepGroupId")]
		public string StepGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepId")]
		public string StepId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepActionType")]
		public StepActionType StepActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Owner Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowStepAutomationConfiguration")]
		public WorkflowStepAutomationConfiguration WorkflowStepAutomationConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepTarget")]
		public string[] StepTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public WorkflowStepOutput[] Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StepStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptOutputLocation")]
		public string ScriptOutputLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStartTime")]
		public System.DateTimeOffset LastStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noOfSrvCompleted")]
		public System.Nullable<System.Int32> NoOfSrvCompleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noOfSrvFailed")]
		public System.Nullable<System.Int32> NoOfSrvFailed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalNoOfSrv")]
		public System.Nullable<System.Int32> TotalNoOfSrv { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Owner
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_MANAGED")]
		AWS_MANAGED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM")]
		CUSTOM = 1,
	}
	
	/// <summary>
	/// The custom script to run tests on source or target environments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkflowStepAutomationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="scriptLocationS3Bucket")]
		public string ScriptLocationS3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptLocationS3Key")]
		public PlatformScriptKey ScriptLocationS3Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="command")]
		public PlatformCommand Command { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runEnvironment")]
		public RunEnvironment RunEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetType")]
		public TargetType TargetType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StepStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWAITING_DEPENDENCIES")]
		AWAITING_DEPENDENCIES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READY")]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAUSED")]
		PAUSED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USER_ATTENTION_REQUIRED")]
		USER_ATTENTION_REQUIRED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWorkflowStepGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StepGroupStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Owner Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tools")]
		public Tool[] Tools { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPluginsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plugins")]
		public PluginSummary[] Plugins { get; set; }
	}
	
	/// <summary>
	/// The summary of the Migration Hub Orchestrator plugin.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PluginSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="pluginId")]
		public string PluginId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PluginHealth Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registeredTime")]
		public string RegisteredTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PluginHealth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEALTHY")]
		HEALTHY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNHEALTHY")]
		UNHEALTHY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTemplateStepGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateStepGroupSummary")]
		public TemplateStepGroupSummary[] TemplateStepGroupSummary { get; set; }
	}
	
	/// <summary>
	/// The summary of the step group in the template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateStepGroupSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTemplateStepsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateStepSummaryList")]
		public TemplateStepSummary[] TemplateStepSummaryList { get; set; }
	}
	
	/// <summary>
	/// The summary of the step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateStepSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepGroupId")]
		public string StepGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepActionType")]
		public StepActionType StepActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetType")]
		public TargetType TargetType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Owner Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMigrationWorkflowTemplatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateSummary")]
		public TemplateSummary[] TemplateSummary { get; set; }
	}
	
	/// <summary>
	/// The summary of the template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkflowStepGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowStepGroupsSummary")]
		public WorkflowStepGroupSummary[] WorkflowStepGroupsSummary { get; set; }
	}
	
	/// <summary>
	/// The summary of a step group in a workflow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkflowStepGroupSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Owner Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StepGroupStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkflowStepsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowStepsSummary")]
		public WorkflowStepSummary[] WorkflowStepsSummary { get; set; }
	}
	
	/// <summary>
	/// The summary of the step in a migration workflow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkflowStepSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="stepId")]
		public string StepId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepActionType")]
		public StepActionType StepActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Owner Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StepStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noOfSrvCompleted")]
		public System.Nullable<System.Int32> NoOfSrvCompleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noOfSrvFailed")]
		public System.Nullable<System.Int32> NoOfSrvFailed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalNoOfSrv")]
		public System.Nullable<System.Int32> TotalNoOfSrv { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptLocation")]
		public string ScriptLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMigrationWorkflowsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="migrationWorkflowSummary")]
		public MigrationWorkflowSummary[] MigrationWorkflowSummary { get; set; }
	}
	
	/// <summary>
	/// The summary of a migration workflow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MigrationWorkflowSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adsApplicationConfigurationName")]
		public string AdsApplicationConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MigrationWorkflowStatusEnum Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completedSteps")]
		public System.Nullable<System.Int32> CompletedSteps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalSteps")]
		public System.Nullable<System.Int32> TotalSteps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetryWorkflowStepResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="stepGroupId")]
		public string StepGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StepStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartMigrationWorkflowResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MigrationWorkflowStatusEnum Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStartTime")]
		public System.DateTimeOffset LastStartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopMigrationWorkflowResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MigrationWorkflowStatusEnum Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStopTime")]
		public System.DateTimeOffset LastStopTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMigrationWorkflowResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adsApplicationConfigurationId")]
		public string AdsApplicationConfigurationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowInputs")]
		public StepInputParameters WorkflowInputs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepTargets")]
		public string[] StepTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MigrationWorkflowStatusEnum Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public StringMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkflowStepResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepGroupId")]
		public string StepGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkflowStepGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tools")]
		public Tool[] Tools { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMigrationWorkflowRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		public string TemplateId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationConfigurationId")]
		public string ApplicationConfigurationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputParameters")]
		public StepInputParameters InputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepTargets")]
		public string[] StepTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public StringMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkflowStepGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkflowStepRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stepGroupId")]
		public string StepGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stepActionType")]
		public StepActionType StepActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowStepAutomationConfiguration")]
		public WorkflowStepAutomationConfiguration WorkflowStepAutomationConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepTarget")]
		public string[] StepTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public WorkflowStepOutput[] Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMigrationWorkflowRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWorkflowStepGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWorkflowStepRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMigrationWorkflowRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMigrationWorkflowTemplateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTemplateStepGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTemplateStepRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWorkflowStepGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWorkflowStepRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMigrationWorkflowTemplatesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMigrationWorkflowsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPluginsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTemplateStepGroupsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTemplateStepsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkflowStepGroupsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkflowStepsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetryWorkflowStepRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartMigrationWorkflowRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopMigrationWorkflowRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMigrationWorkflowRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputParameters")]
		public StepInputParameters InputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepTargets")]
		public string[] StepTargets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkflowStepGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkflowStepRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stepGroupId")]
		public string StepGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepActionType")]
		public StepActionType StepActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowStepAutomationConfiguration")]
		public WorkflowStepAutomationConfiguration WorkflowStepAutomationConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepTarget")]
		public string[] StepTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public WorkflowStepOutput[] Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StepStatus Status { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create a workflow to orchestrate your migrations.
		/// CreateWorkflow migrationworkflow/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateMigrationWorkflowResponse> CreateWorkflowAsync(CreateWorkflowPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "migrationworkflow/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateMigrationWorkflowResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a step in the migration workflow.
		/// CreateWorkflowStep workflowstep
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateWorkflowStepResponse> CreateWorkflowStepAsync(CreateWorkflowStepPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflowstep";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateWorkflowStepResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a step group in a migration workflow.
		/// CreateWorkflowStepGroup workflowstepgroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateWorkflowStepGroupResponse> CreateWorkflowStepGroupAsync(CreateWorkflowStepGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflowstepgroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateWorkflowStepGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a migration workflow. You must pause a running workflow in Migration Hub Orchestrator console to delete it.
		/// DeleteWorkflow migrationworkflow/{id}
		/// </summary>
		/// <param name="id">The ID of the migration workflow you want to delete.</param>
		public async Task DeleteWorkflowAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "migrationworkflow/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get migration workflow.
		/// GetWorkflow migrationworkflow/{id}
		/// </summary>
		/// <param name="id">The ID of the migration workflow.</param>
		/// <returns>Success</returns>
		public async Task<GetMigrationWorkflowResponse> GetWorkflowAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "migrationworkflow/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMigrationWorkflowResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a migration workflow.
		/// UpdateWorkflow migrationworkflow/{id}
		/// </summary>
		/// <param name="id">The ID of the migration workflow.</param>
		/// <returns>Success</returns>
		public async Task<UpdateMigrationWorkflowResponse> UpdateWorkflowAsync(string id, UpdateWorkflowPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "migrationworkflow/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateMigrationWorkflowResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a step in a migration workflow. Pause the workflow to delete a running step.
		/// DeleteWorkflowStep workflowstep/{id}#stepGroupId&workflowId
		/// </summary>
		/// <param name="id">The ID of the step you want to delete.</param>
		/// <param name="stepGroupId">The ID of the step group that contains the step you want to delete.</param>
		/// <param name="workflowId">The ID of the migration workflow.</param>
		/// <returns>Success</returns>
		public async Task<DeleteWorkflowStepResponse> DeleteWorkflowStepAsync(string id, string stepGroupId, string workflowId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflowstep/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"#stepGroupId&workflowId&stepGroupId=" + (stepGroupId==null? "" : System.Uri.EscapeDataString(stepGroupId))+"&workflowId=" + (workflowId==null? "" : System.Uri.EscapeDataString(workflowId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteWorkflowStepResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a step group in a migration workflow.
		/// DeleteWorkflowStepGroup workflowstepgroup/{id}#workflowId
		/// </summary>
		/// <param name="workflowId">The ID of the migration workflow.</param>
		/// <param name="id">The ID of the step group you want to delete.</param>
		public async Task DeleteWorkflowStepGroupAsync(string workflowId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflowstepgroup/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"#workflowId?workflowId=" + (workflowId==null? "" : System.Uri.EscapeDataString(workflowId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the step group of a migration workflow.
		/// GetWorkflowStepGroup workflowstepgroup/{id}#workflowId
		/// </summary>
		/// <param name="id">The ID of the step group.</param>
		/// <param name="workflowId">The ID of the migration workflow.</param>
		/// <returns>Success</returns>
		public async Task<GetWorkflowStepGroupResponse> GetWorkflowStepGroupAsync(string id, string workflowId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflowstepgroup/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"#workflowId&workflowId=" + (workflowId==null? "" : System.Uri.EscapeDataString(workflowId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWorkflowStepGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the step group in a migration workflow.
		/// UpdateWorkflowStepGroup workflowstepgroup/{id}#workflowId
		/// </summary>
		/// <param name="workflowId">The ID of the migration workflow.</param>
		/// <param name="id">The ID of the step group.</param>
		public async Task UpdateWorkflowStepGroupAsync(string workflowId, string id, UpdateWorkflowStepGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflowstepgroup/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"#workflowId?workflowId=" + (workflowId==null? "" : System.Uri.EscapeDataString(workflowId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the template you want to use for creating a migration workflow.
		/// GetTemplate migrationworkflowtemplate/{id}
		/// </summary>
		/// <param name="id">The ID of the template.</param>
		/// <returns>Success</returns>
		public async Task<GetMigrationWorkflowTemplateResponse> GetTemplateAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "migrationworkflowtemplate/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMigrationWorkflowTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific step in a template.
		/// GetTemplateStep templatestep/{id}#templateId&stepGroupId
		/// </summary>
		/// <param name="id">The ID of the step.</param>
		/// <param name="templateId">The ID of the template.</param>
		/// <param name="stepGroupId">The ID of the step group.</param>
		/// <returns>Success</returns>
		public async Task<GetTemplateStepResponse> GetTemplateStepAsync(string id, string templateId, string stepGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templatestep/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"#templateId&stepGroupId&templateId=" + (templateId==null? "" : System.Uri.EscapeDataString(templateId))+"&stepGroupId=" + (stepGroupId==null? "" : System.Uri.EscapeDataString(stepGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTemplateStepResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a step group in a template.
		/// GetTemplateStepGroup templates/{templateId}/stepgroups/{id}
		/// </summary>
		/// <param name="templateId">The ID of the template.</param>
		/// <param name="id">The ID of the step group.</param>
		/// <returns>Success</returns>
		public async Task<GetTemplateStepGroupResponse> GetTemplateStepGroupAsync(string templateId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId))+"/stepgroups/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTemplateStepGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a step in the migration workflow.
		/// GetWorkflowStep workflowstep/{id}#workflowId&stepGroupId
		/// </summary>
		/// <param name="workflowId">The ID of the migration workflow.</param>
		/// <param name="stepGroupId">desThe ID of the step group.</param>
		/// <param name="id">The ID of the step.</param>
		/// <returns>Success</returns>
		public async Task<GetWorkflowStepResponse> GetWorkflowStepAsync(string workflowId, string stepGroupId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflowstep/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"#workflowId&stepGroupId?workflowId=" + (workflowId==null? "" : System.Uri.EscapeDataString(workflowId))+"&stepGroupId=" + (stepGroupId==null? "" : System.Uri.EscapeDataString(stepGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWorkflowStepResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List AWS Migration Hub Orchestrator plugins.
		/// ListPlugins plugins
		/// </summary>
		/// <param name="maxResults">The maximum number of plugins that can be returned.</param>
		/// <param name="nextToken">The pagination token.</param>
		/// <returns>Success</returns>
		public async Task<ListPluginsResponse> ListPluginsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "plugins?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPluginsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the tags added to a resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tag a resource by specifying its Amazon Resource Name (ARN).
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource to which you want to add tags.</param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the step groups in a template.
		/// ListTemplateStepGroups templatestepgroups/{templateId}
		/// </summary>
		/// <param name="maxResults">The maximum number of results that can be returned.</param>
		/// <param name="nextToken">The pagination token.</param>
		/// <param name="templateId">The ID of the template.</param>
		/// <returns>Success</returns>
		public async Task<ListTemplateStepGroupsResponse> ListTemplateStepGroupsAsync(int maxResults, string nextToken, string templateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templatestepgroups/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId))+"?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTemplateStepGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the steps in a template.
		/// ListTemplateSteps templatesteps#templateId&stepGroupId
		/// </summary>
		/// <param name="maxResults">The maximum number of results that can be returned.</param>
		/// <param name="nextToken">The pagination token.</param>
		/// <param name="templateId">The ID of the template.</param>
		/// <param name="stepGroupId">The ID of the step group.</param>
		/// <returns>Success</returns>
		public async Task<ListTemplateStepsResponse> ListTemplateStepsAsync(int maxResults, string nextToken, string templateId, string stepGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templatesteps#templateId&stepGroupId?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&templateId=" + (templateId==null? "" : System.Uri.EscapeDataString(templateId))+"&stepGroupId=" + (stepGroupId==null? "" : System.Uri.EscapeDataString(stepGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTemplateStepsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the templates available in Migration Hub Orchestrator to create a migration workflow.
		/// ListTemplates migrationworkflowtemplates
		/// </summary>
		/// <param name="maxResults">The maximum number of results that can be returned.</param>
		/// <param name="nextToken">The pagination token.</param>
		/// <param name="name">The name of the template.</param>
		/// <returns>Success</returns>
		public async Task<ListMigrationWorkflowTemplatesResponse> ListTemplatesAsync(int maxResults, string nextToken, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "migrationworkflowtemplates?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMigrationWorkflowTemplatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the step groups in a migration workflow.
		/// ListWorkflowStepGroups workflowstepgroups#workflowId
		/// </summary>
		/// <param name="nextToken">The pagination token.</param>
		/// <param name="maxResults">The maximum number of results that can be returned.</param>
		/// <param name="workflowId">The ID of the migration workflow.</param>
		/// <returns>Success</returns>
		public async Task<ListWorkflowStepGroupsResponse> ListWorkflowStepGroupsAsync(string nextToken, int maxResults, string workflowId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflowstepgroups#workflowId?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&workflowId=" + (workflowId==null? "" : System.Uri.EscapeDataString(workflowId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWorkflowStepGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the steps in a workflow.
		/// ListWorkflowSteps workflow/{workflowId}/workflowstepgroups/{stepGroupId}/workflowsteps
		/// </summary>
		/// <param name="nextToken">The pagination token.</param>
		/// <param name="maxResults">The maximum number of results that can be returned.</param>
		/// <param name="workflowId">The ID of the migration workflow.</param>
		/// <param name="stepGroupId">The ID of the step group.</param>
		/// <returns>Success</returns>
		public async Task<ListWorkflowStepsResponse> ListWorkflowStepsAsync(string nextToken, int maxResults, string workflowId, string stepGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflow/"+ (workflowId==null? "" : System.Uri.EscapeDataString(workflowId))+"/workflowstepgroups/"+ (stepGroupId==null? "" : System.Uri.EscapeDataString(stepGroupId))+"/workflowsteps?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWorkflowStepsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the migration workflows.
		/// ListWorkflows migrationworkflows
		/// </summary>
		/// <param name="maxResults">The maximum number of results that can be returned.</param>
		/// <param name="nextToken">The pagination token.</param>
		/// <param name="templateId">The ID of the template.</param>
		/// <param name="adsApplicationConfigurationName">The name of the application configured in Application Discovery Service.</param>
		/// <param name="status">The status of the migration workflow.</param>
		/// <param name="name">The name of the migration workflow.</param>
		/// <returns>Success</returns>
		public async Task<ListMigrationWorkflowsResponse> ListWorkflowsAsync(int maxResults, string nextToken, string templateId, string adsApplicationConfigurationName, MigrationWorkflowStatusEnum status, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "migrationworkflows?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&templateId=" + (templateId==null? "" : System.Uri.EscapeDataString(templateId))+"&adsApplicationConfigurationName=" + (adsApplicationConfigurationName==null? "" : System.Uri.EscapeDataString(adsApplicationConfigurationName))+"&status=" + status+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMigrationWorkflowsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retry a failed step in a migration workflow.
		/// RetryWorkflowStep retryworkflowstep/{id}#workflowId&stepGroupId
		/// </summary>
		/// <param name="workflowId">The ID of the migration workflow.</param>
		/// <param name="stepGroupId">The ID of the step group.</param>
		/// <param name="id">The ID of the step.</param>
		/// <returns>Success</returns>
		public async Task<RetryWorkflowStepResponse> RetryWorkflowStepAsync(string workflowId, string stepGroupId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "retryworkflowstep/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"#workflowId&stepGroupId?workflowId=" + (workflowId==null? "" : System.Uri.EscapeDataString(workflowId))+"&stepGroupId=" + (stepGroupId==null? "" : System.Uri.EscapeDataString(stepGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetryWorkflowStepResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start a migration workflow.
		/// StartWorkflow migrationworkflow/{id}/start
		/// </summary>
		/// <param name="id">The ID of the migration workflow.</param>
		/// <returns>Success</returns>
		public async Task<StartMigrationWorkflowResponse> StartWorkflowAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "migrationworkflow/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartMigrationWorkflowResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop an ongoing migration workflow.
		/// StopWorkflow migrationworkflow/{id}/stop
		/// </summary>
		/// <param name="id">The ID of the migration workflow.</param>
		/// <returns>Success</returns>
		public async Task<StopMigrationWorkflowResponse> StopWorkflowAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "migrationworkflow/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopMigrationWorkflowResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the tags for a resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource from which you want to remove tags.</param>
		/// <param name="tagKeys">One or more tag keys. Specify only the tag keys, not the tag values.</param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a step in a migration workflow.
		/// UpdateWorkflowStep workflowstep/{id}
		/// </summary>
		/// <param name="id">The ID of the step.</param>
		/// <returns>Success</returns>
		public async Task<UpdateWorkflowStepResponse> UpdateWorkflowStepAsync(string id, UpdateWorkflowStepPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflowstep/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateWorkflowStepResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CreateWorkflowPostBody
	{
		
		/// <summary>
		/// The name of the migration workflow.
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the migration workflow.
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [-a-zA-Z0-9_.+, ]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-a-zA-Z0-9_.+, ]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The ID of the template.
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*")]
		public string TemplateId { get; set; }
		
		/// <summary>
		/// The configuration ID of the application configured in Application Discovery Service.
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationConfigurationId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*")]
		public string ApplicationConfigurationId { get; set; }
		
		/// <summary>
		/// The input parameters required to create a migration workflow.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputParameters")]
		public System.Collections.Generic.Dictionary<string, StepInput> InputParameters { get; set; }
		
		/// <summary>
		/// The servers on which a step will be run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepTargets")]
		public string[] StepTargets { get; set; }
		
		/// <summary>
		/// The tags to add on a migration workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateWorkflowStepPostBody
	{
		
		/// <summary>
		/// The name of the step.
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the step group.
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stepGroupId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-]+")]
		public string StepGroupId { get; set; }
		
		/// <summary>
		/// The ID of the migration workflow.
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-]+")]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stepActionType")]
		public StepActionType StepActionType { get; set; }
		
		/// <summary>
		/// The description of the step.
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [-a-zA-Z0-9_.+, ]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-a-zA-Z0-9_.+, ]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The custom script to run tests on source or target environments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflowStepAutomationConfiguration")]
		public CreateWorkflowStepPostBodyWorkflowStepAutomationConfiguration WorkflowStepAutomationConfiguration { get; set; }
		
		/// <summary>
		/// The servers on which a step will be run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepTarget")]
		public string[] StepTarget { get; set; }
		
		/// <summary>
		/// The key value pairs added for the expected output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public WorkflowStepOutput[] Outputs { get; set; }
		
		/// <summary>
		/// The previous step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
		
		/// <summary>
		/// The next step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
	}
	
	public class CreateWorkflowStepPostBodyWorkflowStepAutomationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="scriptLocationS3Bucket")]
		public string ScriptLocationS3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptLocationS3Key")]
		public PlatformScriptKey ScriptLocationS3Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="command")]
		public PlatformCommand Command { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runEnvironment")]
		public RunEnvironment RunEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetType")]
		public TargetType TargetType { get; set; }
	}
	
	public class CreateWorkflowStepGroupPostBody
	{
		
		/// <summary>
		/// The ID of the migration workflow that will contain the step group.
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-]+")]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// The name of the step group.
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the step group.
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [-a-zA-Z0-9_.+, ]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-a-zA-Z0-9_.+, ]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The next step group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
		
		/// <summary>
		/// The previous step group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
	}
	
	public class UpdateWorkflowPostBody
	{
		
		/// <summary>
		/// The name of the migration workflow.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the migration workflow.
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [-a-zA-Z0-9_.+, ]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-a-zA-Z0-9_.+, ]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The input parameters required to update a migration workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputParameters")]
		public System.Collections.Generic.Dictionary<string, StepInput> InputParameters { get; set; }
		
		/// <summary>
		/// The servers on which a step will be run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepTargets")]
		public string[] StepTargets { get; set; }
	}
	
	public class UpdateWorkflowStepGroupPostBody
	{
		
		/// <summary>
		/// The name of the step group.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the step group.
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [-a-zA-Z0-9_.+, ]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-a-zA-Z0-9_.+, ]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The next step group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
		
		/// <summary>
		/// The previous step group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// A collection of labels, in the form of key:value pairs, that apply to this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UpdateWorkflowStepPostBody
	{
		
		/// <summary>
		/// The ID of the step group.
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stepGroupId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-]+")]
		public string StepGroupId { get; set; }
		
		/// <summary>
		/// The ID of the migration workflow.
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-]+")]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// The name of the step.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-a-zA-Z0-9_.+]+[-a-zA-Z0-9_.+ ]*")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the step.
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [-a-zA-Z0-9_.+, ]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-a-zA-Z0-9_.+, ]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepActionType")]
		public StepActionType StepActionType { get; set; }
		
		/// <summary>
		/// The custom script to run tests on source or target environments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflowStepAutomationConfiguration")]
		public UpdateWorkflowStepPostBodyWorkflowStepAutomationConfiguration WorkflowStepAutomationConfiguration { get; set; }
		
		/// <summary>
		/// The servers on which a step will be run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepTarget")]
		public string[] StepTarget { get; set; }
		
		/// <summary>
		/// The outputs of a step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public WorkflowStepOutput[] Outputs { get; set; }
		
		/// <summary>
		/// The previous step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string[] Previous { get; set; }
		
		/// <summary>
		/// The next step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string[] Next { get; set; }
		
		/// <summary>
		/// The status of the step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StepStatus Status { get; set; }
	}
	
	public class UpdateWorkflowStepPostBodyWorkflowStepAutomationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="scriptLocationS3Bucket")]
		public string ScriptLocationS3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptLocationS3Key")]
		public PlatformScriptKey ScriptLocationS3Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="command")]
		public PlatformCommand Command { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runEnvironment")]
		public RunEnvironment RunEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetType")]
		public TargetType TargetType { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
