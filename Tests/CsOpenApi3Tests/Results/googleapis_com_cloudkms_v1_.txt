//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Request message for KeyManagementService.AsymmetricDecrypt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AsymmetricDecryptRequest
	{
		
		/// <summary>
		/// Required. The data encrypted with the named CryptoKeyVersion's public key using OAEP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ciphertext")]
		public string Ciphertext { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the AsymmetricDecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received AsymmetricDecryptRequest.ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(AsymmetricDecryptRequest.ciphertext) is equal to AsymmetricDecryptRequest.ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ciphertextCrc32c")]
		public string CiphertextCrc32c { get; set; }
	}
	
	/// <summary>
	/// Response message for KeyManagementService.AsymmetricDecrypt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AsymmetricDecryptResponse
	{
		
		/// <summary>
		/// The decrypted data originally encrypted with the matching public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plaintext")]
		public string Plaintext { get; set; }
		
		/// <summary>
		/// Integrity verification field. A CRC32C checksum of the returned AsymmetricDecryptResponse.plaintext. An integrity check of AsymmetricDecryptResponse.plaintext can be performed by computing the CRC32C checksum of AsymmetricDecryptResponse.plaintext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plaintextCrc32c")]
		public string PlaintextCrc32c { get; set; }
		
		/// <summary>
		/// The ProtectionLevel of the CryptoKeyVersion used in decryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectionLevel")]
		public System.Nullable<AsymmetricDecryptResponseProtectionLevel> ProtectionLevel { get; set; }
		
		/// <summary>
		/// Integrity verification field. A flag indicating whether AsymmetricDecryptRequest.ciphertext_crc32c was received by KeyManagementService and used for the integrity verification of the ciphertext. A false value of this field indicates either that AsymmetricDecryptRequest.ciphertext_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set AsymmetricDecryptRequest.ciphertext_crc32c but this field is still false, discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedCiphertextCrc32c")]
		public System.Nullable<System.Boolean> VerifiedCiphertextCrc32c { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AsymmetricDecryptResponseProtectionLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROTECTION_LEVEL_UNSPECIFIED")]
		PROTECTION_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOFTWARE")]
		SOFTWARE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HSM")]
		HSM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXTERNAL")]
		EXTERNAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXTERNAL_VPC")]
		EXTERNAL_VPC = 4,
	}
	
	/// <summary>
	/// Request message for KeyManagementService.AsymmetricSign.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AsymmetricSignRequest
	{
		
		/// <summary>
		/// Optional. The data to sign. It can't be supplied if AsymmetricSignRequest.digest is supplied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the AsymmetricSignRequest.data. If specified, KeyManagementService will verify the integrity of the received AsymmetricSignRequest.data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(AsymmetricSignRequest.data) is equal to AsymmetricSignRequest.data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataCrc32c")]
		public string DataCrc32c { get; set; }
		
		/// <summary>
		/// A Digest holds a cryptographic message digest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public Digest Digest { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the AsymmetricSignRequest.digest. If specified, KeyManagementService will verify the integrity of the received AsymmetricSignRequest.digest using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(AsymmetricSignRequest.digest) is equal to AsymmetricSignRequest.digest_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digestCrc32c")]
		public string DigestCrc32c { get; set; }
	}
	
	/// <summary>
	/// A Digest holds a cryptographic message digest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Digest
	{
		
		/// <summary>
		/// A message digest produced with the SHA-256 algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
		
		/// <summary>
		/// A message digest produced with the SHA-384 algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha384")]
		public string Sha384 { get; set; }
		
		/// <summary>
		/// A message digest produced with the SHA-512 algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha512")]
		public string Sha512 { get; set; }
	}
	
	/// <summary>
	/// Response message for KeyManagementService.AsymmetricSign.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AsymmetricSignResponse
	{
		
		/// <summary>
		/// The resource name of the CryptoKeyVersion used for signing. Check this field to verify that the intended resource was used for signing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ProtectionLevel of the CryptoKeyVersion used for signing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectionLevel")]
		public AsymmetricDecryptResponseProtectionLevel ProtectionLevel { get; set; }
		
		/// <summary>
		/// The created signature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature { get; set; }
		
		/// <summary>
		/// Integrity verification field. A CRC32C checksum of the returned AsymmetricSignResponse.signature. An integrity check of AsymmetricSignResponse.signature can be performed by computing the CRC32C checksum of AsymmetricSignResponse.signature and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatureCrc32c")]
		public string SignatureCrc32c { get; set; }
		
		/// <summary>
		/// Integrity verification field. A flag indicating whether AsymmetricSignRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that AsymmetricSignRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set AsymmetricSignRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedDataCrc32c")]
		public System.Nullable<System.Boolean> VerifiedDataCrc32c { get; set; }
		
		/// <summary>
		/// Integrity verification field. A flag indicating whether AsymmetricSignRequest.digest_crc32c was received by KeyManagementService and used for the integrity verification of the digest. A false value of this field indicates either that AsymmetricSignRequest.digest_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set AsymmetricSignRequest.digest_crc32c but this field is still false, discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedDigestCrc32c")]
		public System.Nullable<System.Boolean> VerifiedDigestCrc32c { get; set; }
	}
	
	/// <summary>
	/// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditConfig
	{
		
		/// <summary>
		/// The configuration for logging of each type of permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditLogConfigs")]
		public AuditLogConfig[] AuditLogConfigs { get; set; }
		
		/// <summary>
		/// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditLogConfig
	{
		
		/// <summary>
		/// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptedMembers")]
		public string[] ExemptedMembers { get; set; }
		
		/// <summary>
		/// The log type that this config enables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public System.Nullable<AuditLogConfigLogType> LogType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuditLogConfigLogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOG_TYPE_UNSPECIFIED")]
		LOG_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADMIN_READ")]
		ADMIN_READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA_WRITE")]
		DATA_WRITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA_READ")]
		DATA_READ = 3,
	}
	
	/// <summary>
	/// Associates `members`, or principals, with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// A Certificate represents an X.509 certificate used to authenticate HTTPS connections to EKM replicas.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Certificate
	{
		
		/// <summary>
		/// Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		/// <summary>
		/// Output only. The certificate is not valid after this time. Only present if parsed is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notAfterTime")]
		public string NotAfterTime { get; set; }
		
		/// <summary>
		/// Output only. The certificate is not valid before this time. Only present if parsed is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notBeforeTime")]
		public string NotBeforeTime { get; set; }
		
		/// <summary>
		/// Output only. True if the certificate was parsed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parsed")]
		public System.Nullable<System.Boolean> Parsed { get; set; }
		
		/// <summary>
		/// Required. The raw certificate bytes in DER format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawDer")]
		public string RawDer { get; set; }
		
		/// <summary>
		/// Output only. The certificate serial number as a hex string. Only present if parsed is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256Fingerprint")]
		public string Sha256Fingerprint { get; set; }
		
		/// <summary>
		/// Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		/// <summary>
		/// Output only. The subject Alternative DNS names. Only present if parsed is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectAlternativeDnsNames")]
		public string[] SubjectAlternativeDnsNames { get; set; }
	}
	
	/// <summary>
	/// Certificate chains needed to verify the attestation. Certificates in chains are PEM-encoded and are ordered based on https://tools.ietf.org/html/rfc5246#section-7.4.2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateChains
	{
		
		/// <summary>
		/// Cavium certificate chain corresponding to the attestation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caviumCerts")]
		public string[] CaviumCerts { get; set; }
		
		/// <summary>
		/// Google card certificate chain corresponding to the attestation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleCardCerts")]
		public string[] GoogleCardCerts { get; set; }
		
		/// <summary>
		/// Google partition certificate chain corresponding to the attestation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googlePartitionCerts")]
		public string[] GooglePartitionCerts { get; set; }
	}
	
	/// <summary>
	/// A CryptoKey represents a logical key that can be used for cryptographic operations. A CryptoKey is made up of zero or more versions, which represent the actual key material used in cryptographic operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CryptoKey
	{
		
		/// <summary>
		/// Output only. The time at which this CryptoKey was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*/locations/*/ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cryptoKeyBackend")]
		public string CryptoKeyBackend { get; set; }
		
		/// <summary>
		/// Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destroyScheduledDuration")]
		public string DestroyScheduledDuration { get; set; }
		
		/// <summary>
		/// Immutable. Whether this key may contain imported versions only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importOnly")]
		public System.Nullable<System.Boolean> ImportOnly { get; set; }
		
		/// <summary>
		/// Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. The resource name for this CryptoKey in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextRotationTime")]
		public string NextRotationTime { get; set; }
		
		/// <summary>
		/// A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public CryptoKeyVersion Primary { get; set; }
		
		/// <summary>
		/// Immutable. The immutable purpose of this CryptoKey.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public System.Nullable<CryptoKeyPurpose> Purpose { get; set; }
		
		/// <summary>
		/// next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotationPeriod")]
		public string RotationPeriod { get; set; }
		
		/// <summary>
		/// A CryptoKeyVersionTemplate specifies the properties to use when creating a new CryptoKeyVersion, either manually with CreateCryptoKeyVersion or automatically as a result of auto-rotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionTemplate")]
		public CryptoKeyVersionTemplate VersionTemplate { get; set; }
	}
	
	/// <summary>
	/// A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CryptoKeyVersion
	{
		
		/// <summary>
		/// Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public System.Nullable<CryptoKeyVersionAlgorithm> Algorithm { get; set; }
		
		/// <summary>
		/// Contains an HSM-generated attestation about a key operation. For more information, see [Verifying attestations] (https://cloud.google.com/kms/docs/attest-key).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attestation")]
		public KeyOperationAttestation Attestation { get; set; }
		
		/// <summary>
		/// Output only. The time at which this CryptoKeyVersion was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destroyEventTime")]
		public string DestroyEventTime { get; set; }
		
		/// <summary>
		/// Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destroyTime")]
		public string DestroyTime { get; set; }
		
		/// <summary>
		/// Output only. The root cause of the most recent external destruction failure. Only present if state is EXTERNAL_DESTRUCTION_FAILED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalDestructionFailureReason")]
		public string ExternalDestructionFailureReason { get; set; }
		
		/// <summary>
		/// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalProtectionLevelOptions")]
		public ExternalProtectionLevelOptions ExternalProtectionLevelOptions { get; set; }
		
		/// <summary>
		/// Output only. The time this CryptoKeyVersion's key material was generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generateTime")]
		public string GenerateTime { get; set; }
		
		/// <summary>
		/// Output only. The root cause of the most recent generation failure. Only present if state is GENERATION_FAILED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generationFailureReason")]
		public string GenerationFailureReason { get; set; }
		
		/// <summary>
		/// Output only. The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importFailureReason")]
		public string ImportFailureReason { get; set; }
		
		/// <summary>
		/// Output only. The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importJob")]
		public string ImportJob { get; set; }
		
		/// <summary>
		/// Output only. The time at which this CryptoKeyVersion's key material was most recently imported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importTime")]
		public string ImportTime { get; set; }
		
		/// <summary>
		/// Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectionLevel")]
		public AsymmetricDecryptResponseProtectionLevel ProtectionLevel { get; set; }
		
		/// <summary>
		/// Output only. Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reimportEligible")]
		public System.Nullable<System.Boolean> ReimportEligible { get; set; }
		
		/// <summary>
		/// The current state of the CryptoKeyVersion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CryptoKeyVersionState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CryptoKeyVersionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED")]
		CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GOOGLE_SYMMETRIC_ENCRYPTION")]
		GOOGLE_SYMMETRIC_ENCRYPTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AES_128_GCM")]
		AES_128_GCM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AES_256_GCM")]
		AES_256_GCM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AES_128_CBC")]
		AES_128_CBC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AES_256_CBC")]
		AES_256_CBC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AES_128_CTR")]
		AES_128_CTR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AES_256_CTR")]
		AES_256_CTR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_SIGN_PSS_2048_SHA256")]
		RSA_SIGN_PSS_2048_SHA256 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_SIGN_PSS_3072_SHA256")]
		RSA_SIGN_PSS_3072_SHA256 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_SIGN_PSS_4096_SHA256")]
		RSA_SIGN_PSS_4096_SHA256 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_SIGN_PSS_4096_SHA512")]
		RSA_SIGN_PSS_4096_SHA512 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_SIGN_PKCS1_2048_SHA256")]
		RSA_SIGN_PKCS1_2048_SHA256 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_SIGN_PKCS1_3072_SHA256")]
		RSA_SIGN_PKCS1_3072_SHA256 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_SIGN_PKCS1_4096_SHA256")]
		RSA_SIGN_PKCS1_4096_SHA256 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_SIGN_PKCS1_4096_SHA512")]
		RSA_SIGN_PKCS1_4096_SHA512 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_SIGN_RAW_PKCS1_2048")]
		RSA_SIGN_RAW_PKCS1_2048 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_SIGN_RAW_PKCS1_3072")]
		RSA_SIGN_RAW_PKCS1_3072 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_SIGN_RAW_PKCS1_4096")]
		RSA_SIGN_RAW_PKCS1_4096 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_DECRYPT_OAEP_2048_SHA256")]
		RSA_DECRYPT_OAEP_2048_SHA256 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_DECRYPT_OAEP_3072_SHA256")]
		RSA_DECRYPT_OAEP_3072_SHA256 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_DECRYPT_OAEP_4096_SHA256")]
		RSA_DECRYPT_OAEP_4096_SHA256 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_DECRYPT_OAEP_4096_SHA512")]
		RSA_DECRYPT_OAEP_4096_SHA512 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_DECRYPT_OAEP_2048_SHA1")]
		RSA_DECRYPT_OAEP_2048_SHA1 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_DECRYPT_OAEP_3072_SHA1")]
		RSA_DECRYPT_OAEP_3072_SHA1 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_DECRYPT_OAEP_4096_SHA1")]
		RSA_DECRYPT_OAEP_4096_SHA1 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EC_SIGN_P256_SHA256")]
		EC_SIGN_P256_SHA256 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EC_SIGN_P384_SHA384")]
		EC_SIGN_P384_SHA384 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EC_SIGN_SECP256K1_SHA256")]
		EC_SIGN_SECP256K1_SHA256 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HMAC_SHA256")]
		HMAC_SHA256 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HMAC_SHA1")]
		HMAC_SHA1 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HMAC_SHA384")]
		HMAC_SHA384 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HMAC_SHA512")]
		HMAC_SHA512 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HMAC_SHA224")]
		HMAC_SHA224 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXTERNAL_SYMMETRIC_ENCRYPTION")]
		EXTERNAL_SYMMETRIC_ENCRYPTION = 34,
	}
	
	/// <summary>
	/// Contains an HSM-generated attestation about a key operation. For more information, see [Verifying attestations] (https://cloud.google.com/kms/docs/attest-key).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyOperationAttestation
	{
		
		/// <summary>
		/// Certificate chains needed to verify the attestation. Certificates in chains are PEM-encoded and are ordered based on https://tools.ietf.org/html/rfc5246#section-7.4.2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certChains")]
		public CertificateChains CertChains { get; set; }
		
		/// <summary>
		/// Output only. The attestation data provided by the HSM when the key operation was performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Output only. The format of the attestation data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<KeyOperationAttestationFormat> Format { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KeyOperationAttestationFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTESTATION_FORMAT_UNSPECIFIED")]
		ATTESTATION_FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAVIUM_V1_COMPRESSED")]
		CAVIUM_V1_COMPRESSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAVIUM_V2_COMPRESSED")]
		CAVIUM_V2_COMPRESSED = 2,
	}
	
	/// <summary>
	/// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExternalProtectionLevelOptions
	{
		
		/// <summary>
		/// The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of external_key_uri when using an EkmConnection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ekmConnectionKeyPath")]
		public string EkmConnectionKeyPath { get; set; }
		
		/// <summary>
		/// The URI for an external resource that this CryptoKeyVersion represents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalKeyUri")]
		public string ExternalKeyUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CryptoKeyVersionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CRYPTO_KEY_VERSION_STATE_UNSPECIFIED")]
		CRYPTO_KEY_VERSION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_GENERATION")]
		PENDING_GENERATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESTROYED")]
		DESTROYED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESTROY_SCHEDULED")]
		DESTROY_SCHEDULED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_IMPORT")]
		PENDING_IMPORT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORT_FAILED")]
		IMPORT_FAILED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERATION_FAILED")]
		GENERATION_FAILED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_EXTERNAL_DESTRUCTION")]
		PENDING_EXTERNAL_DESTRUCTION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXTERNAL_DESTRUCTION_FAILED")]
		EXTERNAL_DESTRUCTION_FAILED = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CryptoKeyPurpose
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CRYPTO_KEY_PURPOSE_UNSPECIFIED")]
		CRYPTO_KEY_PURPOSE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENCRYPT_DECRYPT")]
		ENCRYPT_DECRYPT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASYMMETRIC_SIGN")]
		ASYMMETRIC_SIGN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASYMMETRIC_DECRYPT")]
		ASYMMETRIC_DECRYPT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RAW_ENCRYPT_DECRYPT")]
		RAW_ENCRYPT_DECRYPT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAC")]
		MAC = 5,
	}
	
	/// <summary>
	/// A CryptoKeyVersionTemplate specifies the properties to use when creating a new CryptoKeyVersion, either manually with CreateCryptoKeyVersion or automatically as a result of auto-rotation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CryptoKeyVersionTemplate
	{
		
		/// <summary>
		/// Required. Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public CryptoKeyVersionAlgorithm Algorithm { get; set; }
		
		/// <summary>
		/// ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectionLevel")]
		public AsymmetricDecryptResponseProtectionLevel ProtectionLevel { get; set; }
	}
	
	/// <summary>
	/// Request message for KeyManagementService.Decrypt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DecryptRequest
	{
		
		/// <summary>
		/// Optional. Optional data that must match the data originally supplied in EncryptRequest.additional_authenticated_data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalAuthenticatedData")]
		public string AdditionalAuthenticatedData { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the DecryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received DecryptRequest.additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(DecryptRequest.additional_authenticated_data) is equal to DecryptRequest.additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalAuthenticatedDataCrc32c")]
		public string AdditionalAuthenticatedDataCrc32c { get; set; }
		
		/// <summary>
		/// Required. The encrypted data originally returned in EncryptResponse.ciphertext.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ciphertext")]
		public string Ciphertext { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the DecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received DecryptRequest.ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(DecryptRequest.ciphertext) is equal to DecryptRequest.ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ciphertextCrc32c")]
		public string CiphertextCrc32c { get; set; }
	}
	
	/// <summary>
	/// Response message for KeyManagementService.Decrypt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DecryptResponse
	{
		
		/// <summary>
		/// The decrypted data originally supplied in EncryptRequest.plaintext.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plaintext")]
		public string Plaintext { get; set; }
		
		/// <summary>
		/// Integrity verification field. A CRC32C checksum of the returned DecryptResponse.plaintext. An integrity check of DecryptResponse.plaintext can be performed by computing the CRC32C checksum of DecryptResponse.plaintext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: receiving this response message indicates that KeyManagementService is able to successfully decrypt the ciphertext. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plaintextCrc32c")]
		public string PlaintextCrc32c { get; set; }
		
		/// <summary>
		/// The ProtectionLevel of the CryptoKeyVersion used in decryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectionLevel")]
		public AsymmetricDecryptResponseProtectionLevel ProtectionLevel { get; set; }
		
		/// <summary>
		/// Whether the Decryption was performed using the primary key version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usedPrimary")]
		public System.Nullable<System.Boolean> UsedPrimary { get; set; }
	}
	
	/// <summary>
	/// Request message for KeyManagementService.DestroyCryptoKeyVersion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestroyCryptoKeyVersionRequest
	{
	}
	
	/// <summary>
	/// An EkmConfig is a singleton resource that represents configuration parameters that apply to all CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC in a given project and location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EkmConfig
	{
		
		/// <summary>
		/// Optional. Resource name of the default EkmConnection. Setting this field to the empty string removes the default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultEkmConnection")]
		public string DefaultEkmConnection { get; set; }
		
		/// <summary>
		/// Output only. The resource name for the EkmConfig in the format `projects/*/locations/*/ekmConfig`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EkmConnection
	{
		
		/// <summary>
		/// Output only. The time at which the EkmConnection was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cryptoSpacePath")]
		public string CryptoSpacePath { get; set; }
		
		/// <summary>
		/// Optional. Etag of the currently stored EkmConnection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyManagementMode")]
		public System.Nullable<EkmConnectionKeyManagementMode> KeyManagementMode { get; set; }
		
		/// <summary>
		/// Output only. The resource name for the EkmConnection in the format `projects/*/locations/*/ekmConnections/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceResolvers")]
		public ServiceResolver[] ServiceResolvers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EkmConnectionKeyManagementMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KEY_MANAGEMENT_MODE_UNSPECIFIED")]
		KEY_MANAGEMENT_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANUAL")]
		MANUAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOUD_KMS")]
		CLOUD_KMS = 2,
	}
	
	/// <summary>
	/// A ServiceResolver represents an EKM replica that can be reached within an EkmConnection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceResolver
	{
		
		/// <summary>
		/// Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointFilter")]
		public string EndpointFilter { get; set; }
		
		/// <summary>
		/// Required. The hostname of the EKM replica used at TLS and HTTP layers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		/// <summary>
		/// Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverCertificates")]
		public Certificate[] ServerCertificates { get; set; }
		
		/// <summary>
		/// Required. The resource name of the Service Directory service pointing to an EKM replica, in the format `projects/*/locations/*/namespaces/*/services/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDirectoryService")]
		public string ServiceDirectoryService { get; set; }
	}
	
	/// <summary>
	/// Request message for KeyManagementService.Encrypt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncryptRequest
	{
		
		/// <summary>
		/// Optional. Optional data that, if specified, must also be provided during decryption through DecryptRequest.additional_authenticated_data. The maximum size depends on the key version's protection_level. For SOFTWARE, EXTERNAL, and EXTERNAL_VPC keys the AAD must be no larger than 64KiB. For HSM keys, the combined length of the plaintext and additional_authenticated_data fields must be no larger than 8KiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalAuthenticatedData")]
		public string AdditionalAuthenticatedData { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the EncryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received EncryptRequest.additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(EncryptRequest.additional_authenticated_data) is equal to EncryptRequest.additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalAuthenticatedDataCrc32c")]
		public string AdditionalAuthenticatedDataCrc32c { get; set; }
		
		/// <summary>
		/// Required. The data to encrypt. Must be no larger than 64KiB. The maximum size depends on the key version's protection_level. For SOFTWARE, EXTERNAL, and EXTERNAL_VPC keys, the plaintext must be no larger than 64KiB. For HSM keys, the combined length of the plaintext and additional_authenticated_data fields must be no larger than 8KiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plaintext")]
		public string Plaintext { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the EncryptRequest.plaintext. If specified, KeyManagementService will verify the integrity of the received EncryptRequest.plaintext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(EncryptRequest.plaintext) is equal to EncryptRequest.plaintext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plaintextCrc32c")]
		public string PlaintextCrc32c { get; set; }
	}
	
	/// <summary>
	/// Response message for KeyManagementService.Encrypt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncryptResponse
	{
		
		/// <summary>
		/// The encrypted data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ciphertext")]
		public string Ciphertext { get; set; }
		
		/// <summary>
		/// Integrity verification field. A CRC32C checksum of the returned EncryptResponse.ciphertext. An integrity check of EncryptResponse.ciphertext can be performed by computing the CRC32C checksum of EncryptResponse.ciphertext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ciphertextCrc32c")]
		public string CiphertextCrc32c { get; set; }
		
		/// <summary>
		/// The resource name of the CryptoKeyVersion used in encryption. Check this field to verify that the intended resource was used for encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ProtectionLevel of the CryptoKeyVersion used in encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectionLevel")]
		public AsymmetricDecryptResponseProtectionLevel ProtectionLevel { get; set; }
		
		/// <summary>
		/// Integrity verification field. A flag indicating whether EncryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of the AAD. A false value of this field indicates either that EncryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set EncryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedAdditionalAuthenticatedDataCrc32c")]
		public System.Nullable<System.Boolean> VerifiedAdditionalAuthenticatedDataCrc32c { get; set; }
		
		/// <summary>
		/// Integrity verification field. A flag indicating whether EncryptRequest.plaintext_crc32c was received by KeyManagementService and used for the integrity verification of the plaintext. A false value of this field indicates either that EncryptRequest.plaintext_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set EncryptRequest.plaintext_crc32c but this field is still false, discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedPlaintextCrc32c")]
		public System.Nullable<System.Boolean> VerifiedPlaintextCrc32c { get; set; }
	}
	
	/// <summary>
	/// Request message for KeyManagementService.GenerateRandomBytes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateRandomBytesRequest
	{
		
		/// <summary>
		/// The length in bytes of the amount of randomness to retrieve. Minimum 8 bytes, maximum 1024 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lengthBytes")]
		public System.Nullable<System.Int32> LengthBytes { get; set; }
		
		/// <summary>
		/// The ProtectionLevel to use when generating the random data. Currently, only HSM protection level is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectionLevel")]
		public AsymmetricDecryptResponseProtectionLevel ProtectionLevel { get; set; }
	}
	
	/// <summary>
	/// Response message for KeyManagementService.GenerateRandomBytes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateRandomBytesResponse
	{
		
		/// <summary>
		/// The generated data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Integrity verification field. A CRC32C checksum of the returned GenerateRandomBytesResponse.data. An integrity check of GenerateRandomBytesResponse.data can be performed by computing the CRC32C checksum of GenerateRandomBytesResponse.data and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataCrc32c")]
		public string DataCrc32c { get; set; }
	}
	
	/// <summary>
	/// Request message for KeyManagementService.ImportCryptoKeyVersion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportCryptoKeyVersionRequest
	{
		
		/// <summary>
		/// Required. The algorithm of the key being imported. This does not need to match the version_template of the CryptoKey this version imports into.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public CryptoKeyVersionAlgorithm Algorithm { get; set; }
		
		/// <summary>
		/// Optional. The optional name of an existing CryptoKeyVersion to target for an import operation. If this field is not present, a new CryptoKeyVersion containing the supplied key material is created. If this field is present, the supplied key material is imported into the existing CryptoKeyVersion. To import into an existing CryptoKeyVersion, the CryptoKeyVersion must be a child of ImportCryptoKeyVersionRequest.parent, have been previously created via ImportCryptoKeyVersion, and be in DESTROYED or IMPORT_FAILED state. The key material and algorithm must match the previous CryptoKeyVersion exactly if the CryptoKeyVersion has ever contained key material.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cryptoKeyVersion")]
		public string CryptoKeyVersion { get; set; }
		
		/// <summary>
		/// Required. The name of the ImportJob that was used to wrap this key material.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importJob")]
		public string ImportJob { get; set; }
		
		/// <summary>
		/// Optional. This field has the same meaning as wrapped_key. Prefer to use that field in new work. Either that field or this field (but not both) must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rsaAesWrappedKey")]
		public string RsaAesWrappedKey { get; set; }
		
		/// <summary>
		/// Optional. The wrapped key material to import. Before wrapping, key material must be formatted. If importing symmetric key material, the expected key material format is plain bytes. If importing asymmetric key material, the expected key material format is PKCS#8-encoded DER (the PrivateKeyInfo structure from RFC 5208). When wrapping with import methods (RSA_OAEP_3072_SHA1_AES_256 or RSA_OAEP_4096_SHA1_AES_256 or RSA_OAEP_3072_SHA256_AES_256 or RSA_OAEP_4096_SHA256_AES_256), this field must contain the concatenation of: 1. An ephemeral AES-256 wrapping key wrapped with the public_key using RSAES-OAEP with SHA-1/SHA-256, MGF1 with SHA-1/SHA-256, and an empty label. 2. The formatted key to be imported, wrapped with the ephemeral AES-256 key using AES-KWP (RFC 5649). This format is the same as the format produced by PKCS#11 mechanism CKM_RSA_AES_KEY_WRAP. When wrapping with import methods (RSA_OAEP_3072_SHA256 or RSA_OAEP_4096_SHA256), this field must contain the formatted key to be imported, wrapped with the public_key using RSAES-OAEP with SHA-256, MGF1 with SHA-256, and an empty label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wrappedKey")]
		public string WrappedKey { get; set; }
	}
	
	/// <summary>
	/// An ImportJob can be used to create CryptoKeys and CryptoKeyVersions using pre-existing key material, generated outside of Cloud KMS. When an ImportJob is created, Cloud KMS will generate a "wrapping key", which is a public/private key pair. You use the wrapping key to encrypt (also known as wrap) the pre-existing key material to protect it during the import process. The nature of the wrapping key depends on the choice of import_method. When the wrapping key generation is complete, the state will be set to ACTIVE and the public_key can be fetched. The fetched public key can then be used to wrap your pre-existing key material. Once the key material is wrapped, it can be imported into a new CryptoKeyVersion in an existing CryptoKey by calling ImportCryptoKeyVersion. Multiple CryptoKeyVersions can be imported with a single ImportJob. Cloud KMS uses the private key portion of the wrapping key to unwrap the key material. Only Cloud KMS has access to the private key. An ImportJob expires 3 days after it is created. Once expired, Cloud KMS will no longer be able to import or unwrap any key material that was wrapped with the ImportJob's public key. For more information, see [Importing a key](https://cloud.google.com/kms/docs/importing-a-key).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportJob
	{
		
		/// <summary>
		/// Contains an HSM-generated attestation about a key operation. For more information, see [Verifying attestations] (https://cloud.google.com/kms/docs/attest-key).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attestation")]
		public KeyOperationAttestation Attestation { get; set; }
		
		/// <summary>
		/// Output only. The time at which this ImportJob was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time this ImportJob expired. Only present if state is EXPIRED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireEventTime")]
		public string ExpireEventTime { get; set; }
		
		/// <summary>
		/// Output only. The time at which this ImportJob is scheduled for expiration and can no longer be used to import key material.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// Output only. The time this ImportJob's key material was generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generateTime")]
		public string GenerateTime { get; set; }
		
		/// <summary>
		/// Required. Immutable. The wrapping method to be used for incoming key material.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importMethod")]
		public System.Nullable<ImportJobImportMethod> ImportMethod { get; set; }
		
		/// <summary>
		/// Output only. The resource name for this ImportJob in the format `projects/*/locations/*/keyRings/*/importJobs/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectionLevel")]
		public AsymmetricDecryptResponseProtectionLevel ProtectionLevel { get; set; }
		
		/// <summary>
		/// The public key component of the wrapping key. For details of the type of key this public key corresponds to, see the ImportMethod.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public WrappingPublicKey PublicKey { get; set; }
		
		/// <summary>
		/// Output only. The current state of the ImportJob, indicating if it can be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ImportJobState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImportJobImportMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORT_METHOD_UNSPECIFIED")]
		IMPORT_METHOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_OAEP_3072_SHA1_AES_256")]
		RSA_OAEP_3072_SHA1_AES_256 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_OAEP_4096_SHA1_AES_256")]
		RSA_OAEP_4096_SHA1_AES_256 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_OAEP_3072_SHA256_AES_256")]
		RSA_OAEP_3072_SHA256_AES_256 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_OAEP_4096_SHA256_AES_256")]
		RSA_OAEP_4096_SHA256_AES_256 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_OAEP_3072_SHA256")]
		RSA_OAEP_3072_SHA256 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA_OAEP_4096_SHA256")]
		RSA_OAEP_4096_SHA256 = 6,
	}
	
	/// <summary>
	/// The public key component of the wrapping key. For details of the type of key this public key corresponds to, see the ImportMethod.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WrappingPublicKey
	{
		
		/// <summary>
		/// The public key, encoded in PEM format. For more information, see the [RFC 7468](https://tools.ietf.org/html/rfc7468) sections for [General Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual Encoding of Subject Public Key Info] (https://tools.ietf.org/html/rfc7468#section-13).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pem")]
		public string Pem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImportJobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORT_JOB_STATE_UNSPECIFIED")]
		IMPORT_JOB_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_GENERATION")]
		PENDING_GENERATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 3,
	}
	
	/// <summary>
	/// A KeyRing is a toplevel logical grouping of CryptoKeys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyRing
	{
		
		/// <summary>
		/// Output only. The time at which this KeyRing was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The resource name for the KeyRing in the format `projects/*/locations/*/keyRings/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Response message for KeyManagementService.ListCryptoKeyVersions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCryptoKeyVersionsResponse
	{
		
		/// <summary>
		/// The list of CryptoKeyVersions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cryptoKeyVersions")]
		public CryptoKeyVersion[] CryptoKeyVersions { get; set; }
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this value in ListCryptoKeyVersionsRequest.page_token to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total number of CryptoKeyVersions that matched the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Response message for KeyManagementService.ListCryptoKeys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCryptoKeysResponse
	{
		
		/// <summary>
		/// The list of CryptoKeys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cryptoKeys")]
		public CryptoKey[] CryptoKeys { get; set; }
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this value in ListCryptoKeysRequest.page_token to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total number of CryptoKeys that matched the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Response message for EkmService.ListEkmConnections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEkmConnectionsResponse
	{
		
		/// <summary>
		/// The list of EkmConnections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ekmConnections")]
		public EkmConnection[] EkmConnections { get; set; }
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this value in ListEkmConnectionsRequest.page_token to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total number of EkmConnections that matched the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Response message for KeyManagementService.ListImportJobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImportJobsResponse
	{
		
		/// <summary>
		/// The list of ImportJobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importJobs")]
		public ImportJob[] ImportJobs { get; set; }
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this value in ListImportJobsRequest.page_token to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total number of ImportJobs that matched the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Response message for KeyManagementService.ListKeyRings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKeyRingsResponse
	{
		
		/// <summary>
		/// The list of KeyRings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyRings")]
		public KeyRing[] KeyRings { get; set; }
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this value in ListKeyRingsRequest.page_token to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total number of KeyRings that matched the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Cloud KMS metadata for the given google.cloud.location.Location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationMetadata
	{
		
		/// <summary>
		/// Indicates whether CryptoKeys with protection_level EXTERNAL can be created in this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ekmAvailable")]
		public System.Nullable<System.Boolean> EkmAvailable { get; set; }
		
		/// <summary>
		/// Indicates whether CryptoKeys with protection_level HSM can be created in this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hsmAvailable")]
		public System.Nullable<System.Boolean> HsmAvailable { get; set; }
	}
	
	/// <summary>
	/// Request message for KeyManagementService.MacSign.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MacSignRequest
	{
		
		/// <summary>
		/// Required. The data to sign. The MAC tag is computed over this data field based on the specific algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the MacSignRequest.data. If specified, KeyManagementService will verify the integrity of the received MacSignRequest.data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacSignRequest.data) is equal to MacSignRequest.data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataCrc32c")]
		public string DataCrc32c { get; set; }
	}
	
	/// <summary>
	/// Response message for KeyManagementService.MacSign.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MacSignResponse
	{
		
		/// <summary>
		/// The created signature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mac")]
		public string Mac { get; set; }
		
		/// <summary>
		/// Integrity verification field. A CRC32C checksum of the returned MacSignResponse.mac. An integrity check of MacSignResponse.mac can be performed by computing the CRC32C checksum of MacSignResponse.mac and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macCrc32c")]
		public string MacCrc32c { get; set; }
		
		/// <summary>
		/// The resource name of the CryptoKeyVersion used for signing. Check this field to verify that the intended resource was used for signing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ProtectionLevel of the CryptoKeyVersion used for signing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectionLevel")]
		public AsymmetricDecryptResponseProtectionLevel ProtectionLevel { get; set; }
		
		/// <summary>
		/// Integrity verification field. A flag indicating whether MacSignRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacSignRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set MacSignRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedDataCrc32c")]
		public System.Nullable<System.Boolean> VerifiedDataCrc32c { get; set; }
	}
	
	/// <summary>
	/// Request message for KeyManagementService.MacVerify.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MacVerifyRequest
	{
		
		/// <summary>
		/// Required. The data used previously as a MacSignRequest.data to generate the MAC tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the MacVerifyRequest.data. If specified, KeyManagementService will verify the integrity of the received MacVerifyRequest.data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacVerifyRequest.data) is equal to MacVerifyRequest.data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataCrc32c")]
		public string DataCrc32c { get; set; }
		
		/// <summary>
		/// Required. The signature to verify.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mac")]
		public string Mac { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the MacVerifyRequest.mac. If specified, KeyManagementService will verify the integrity of the received MacVerifyRequest.mac using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacVerifyRequest.tag) is equal to MacVerifyRequest.mac_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macCrc32c")]
		public string MacCrc32c { get; set; }
	}
	
	/// <summary>
	/// Response message for KeyManagementService.MacVerify.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MacVerifyResponse
	{
		
		/// <summary>
		/// The resource name of the CryptoKeyVersion used for verification. Check this field to verify that the intended resource was used for verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ProtectionLevel of the CryptoKeyVersion used for verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectionLevel")]
		public AsymmetricDecryptResponseProtectionLevel ProtectionLevel { get; set; }
		
		/// <summary>
		/// This field indicates whether or not the verification operation for MacVerifyRequest.mac over MacVerifyRequest.data was successful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
		
		/// <summary>
		/// Integrity verification field. A flag indicating whether MacVerifyRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacVerifyRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set MacVerifyRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedDataCrc32c")]
		public System.Nullable<System.Boolean> VerifiedDataCrc32c { get; set; }
		
		/// <summary>
		/// Integrity verification field. A flag indicating whether MacVerifyRequest.mac_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacVerifyRequest.mac_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set MacVerifyRequest.mac_crc32c but this field is still false, discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedMacCrc32c")]
		public System.Nullable<System.Boolean> VerifiedMacCrc32c { get; set; }
		
		/// <summary>
		/// Integrity verification field. This value is used for the integrity verification of [MacVerifyResponse.success]. If the value of this field contradicts the value of [MacVerifyResponse.success], discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedSuccessIntegrity")]
		public System.Nullable<System.Boolean> VerifiedSuccessIntegrity { get; set; }
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Policy
	{
		
		/// <summary>
		/// Specifies cloud audit logging configuration for this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditConfigs")]
		public AuditConfig[] AuditConfigs { get; set; }
		
		/// <summary>
		/// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// The public keys for a given CryptoKeyVersion. Obtained via GetPublicKey.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicKey
	{
		
		/// <summary>
		/// The Algorithm associated with this key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public CryptoKeyVersionAlgorithm Algorithm { get; set; }
		
		/// <summary>
		/// The name of the CryptoKeyVersion public key. Provided here for verification. NOTE: This field is in Beta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A public key encoded in PEM format, populated only when GetPublicKey returns one key. For more information, see the [RFC 7468](https://tools.ietf.org/html/rfc7468) sections for [General Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual Encoding of Subject Public Key Info] (https://tools.ietf.org/html/rfc7468#section-13).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pem")]
		public string Pem { get; set; }
		
		/// <summary>
		/// Integrity verification field: A CRC32C checksum of the returned PublicKey.pem. It is only populated when GetPublicKey returns one key. An integrity check of PublicKey.pem can be performed by computing the CRC32C checksum of PublicKey.pem and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type. NOTE: This field is in Beta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pemCrc32c")]
		public string PemCrc32c { get; set; }
		
		/// <summary>
		/// The ProtectionLevel of the CryptoKeyVersion public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectionLevel")]
		public AsymmetricDecryptResponseProtectionLevel ProtectionLevel { get; set; }
	}
	
	/// <summary>
	/// Request message for KeyManagementService.RawDecrypt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RawDecryptRequest
	{
		
		/// <summary>
		/// Optional. Optional data that must match the data originally supplied in RawEncryptRequest.additional_authenticated_data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalAuthenticatedData")]
		public string AdditionalAuthenticatedData { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the RawDecryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(additional_authenticated_data) is equal to additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalAuthenticatedDataCrc32c")]
		public string AdditionalAuthenticatedDataCrc32c { get; set; }
		
		/// <summary>
		/// Required. The encrypted data originally returned in RawEncryptResponse.ciphertext.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ciphertext")]
		public string Ciphertext { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the RawDecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(ciphertext) is equal to ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ciphertextCrc32c")]
		public string CiphertextCrc32c { get; set; }
		
		/// <summary>
		/// Required. The initialization vector (IV) used during encryption, which must match the data originally provided in RawEncryptResponse.initialization_vector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initializationVector")]
		public string InitializationVector { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the RawDecryptRequest.initialization_vector. If specified, KeyManagementService will verify the integrity of the received initialization_vector using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(initialization_vector) is equal to initialization_vector_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initializationVectorCrc32c")]
		public string InitializationVectorCrc32c { get; set; }
		
		/// <summary>
		/// The length of the authentication tag that is appended to the end of the ciphertext. If unspecified (0), the default value for the key's algorithm will be used (for AES-GCM, the default value is 16).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagLength")]
		public System.Nullable<System.Int32> TagLength { get; set; }
	}
	
	/// <summary>
	/// Response message for KeyManagementService.RawDecrypt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RawDecryptResponse
	{
		
		/// <summary>
		/// The decrypted data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plaintext")]
		public string Plaintext { get; set; }
		
		/// <summary>
		/// Integrity verification field. A CRC32C checksum of the returned RawDecryptResponse.plaintext. An integrity check of plaintext can be performed by computing the CRC32C checksum of plaintext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: receiving this response message indicates that KeyManagementService is able to successfully decrypt the ciphertext. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plaintextCrc32c")]
		public string PlaintextCrc32c { get; set; }
		
		/// <summary>
		/// The ProtectionLevel of the CryptoKeyVersion used in decryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectionLevel")]
		public AsymmetricDecryptResponseProtectionLevel ProtectionLevel { get; set; }
		
		/// <summary>
		/// Integrity verification field. A flag indicating whether RawDecryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of additional_authenticated_data. A false value of this field indicates either that // RawDecryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawDecryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedAdditionalAuthenticatedDataCrc32c")]
		public System.Nullable<System.Boolean> VerifiedAdditionalAuthenticatedDataCrc32c { get; set; }
		
		/// <summary>
		/// Integrity verification field. A flag indicating whether RawDecryptRequest.ciphertext_crc32c was received by KeyManagementService and used for the integrity verification of the ciphertext. A false value of this field indicates either that RawDecryptRequest.ciphertext_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawDecryptRequest.ciphertext_crc32c but this field is still false, discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedCiphertextCrc32c")]
		public System.Nullable<System.Boolean> VerifiedCiphertextCrc32c { get; set; }
		
		/// <summary>
		/// Integrity verification field. A flag indicating whether RawDecryptRequest.initialization_vector_crc32c was received by KeyManagementService and used for the integrity verification of initialization_vector. A false value of this field indicates either that RawDecryptRequest.initialization_vector_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawDecryptRequest.initialization_vector_crc32c but this field is still false, discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedInitializationVectorCrc32c")]
		public System.Nullable<System.Boolean> VerifiedInitializationVectorCrc32c { get; set; }
	}
	
	/// <summary>
	/// Request message for KeyManagementService.RawEncrypt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RawEncryptRequest
	{
		
		/// <summary>
		/// Optional. Optional data that, if specified, must also be provided during decryption through RawDecryptRequest.additional_authenticated_data. This field may only be used in conjunction with an algorithm that accepts additional authenticated data (for example, AES-GCM). The maximum size depends on the key version's protection_level. For SOFTWARE keys, the plaintext must be no larger than 64KiB. For HSM keys, the combined length of the plaintext and additional_authenticated_data fields must be no larger than 8KiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalAuthenticatedData")]
		public string AdditionalAuthenticatedData { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the RawEncryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(additional_authenticated_data) is equal to additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalAuthenticatedDataCrc32c")]
		public string AdditionalAuthenticatedDataCrc32c { get; set; }
		
		/// <summary>
		/// Optional. A customer-supplied initialization vector that will be used for encryption. If it is not provided for AES-CBC and AES-CTR, one will be generated. It will be returned in RawEncryptResponse.initialization_vector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initializationVector")]
		public string InitializationVector { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the RawEncryptRequest.initialization_vector. If specified, KeyManagementService will verify the integrity of the received initialization_vector using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(initialization_vector) is equal to initialization_vector_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initializationVectorCrc32c")]
		public string InitializationVectorCrc32c { get; set; }
		
		/// <summary>
		/// Required. The data to encrypt. Must be no larger than 64KiB. The maximum size depends on the key version's protection_level. For SOFTWARE keys, the plaintext must be no larger than 64KiB. For HSM keys, the combined length of the plaintext and additional_authenticated_data fields must be no larger than 8KiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plaintext")]
		public string Plaintext { get; set; }
		
		/// <summary>
		/// Optional. An optional CRC32C checksum of the RawEncryptRequest.plaintext. If specified, KeyManagementService will verify the integrity of the received plaintext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(plaintext) is equal to plaintext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plaintextCrc32c")]
		public string PlaintextCrc32c { get; set; }
	}
	
	/// <summary>
	/// Response message for KeyManagementService.RawEncrypt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RawEncryptResponse
	{
		
		/// <summary>
		/// The encrypted data. In the case of AES-GCM, the authentication tag is the tag_length bytes at the end of this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ciphertext")]
		public string Ciphertext { get; set; }
		
		/// <summary>
		/// Integrity verification field. A CRC32C checksum of the returned RawEncryptResponse.ciphertext. An integrity check of ciphertext can be performed by computing the CRC32C checksum of ciphertext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ciphertextCrc32c")]
		public string CiphertextCrc32c { get; set; }
		
		/// <summary>
		/// The initialization vector (IV) generated by the service during encryption. This value must be stored and provided in RawDecryptRequest.initialization_vector at decryption time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initializationVector")]
		public string InitializationVector { get; set; }
		
		/// <summary>
		/// Integrity verification field. A CRC32C checksum of the returned RawEncryptResponse.initialization_vector. An integrity check of initialization_vector can be performed by computing the CRC32C checksum of initialization_vector and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initializationVectorCrc32c")]
		public string InitializationVectorCrc32c { get; set; }
		
		/// <summary>
		/// The resource name of the CryptoKeyVersion used in encryption. Check this field to verify that the intended resource was used for encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ProtectionLevel of the CryptoKeyVersion used in encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectionLevel")]
		public AsymmetricDecryptResponseProtectionLevel ProtectionLevel { get; set; }
		
		/// <summary>
		/// The length of the authentication tag that is appended to the end of the ciphertext.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagLength")]
		public System.Nullable<System.Int32> TagLength { get; set; }
		
		/// <summary>
		/// Integrity verification field. A flag indicating whether RawEncryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of additional_authenticated_data. A false value of this field indicates either that // RawEncryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawEncryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedAdditionalAuthenticatedDataCrc32c")]
		public System.Nullable<System.Boolean> VerifiedAdditionalAuthenticatedDataCrc32c { get; set; }
		
		/// <summary>
		/// Integrity verification field. A flag indicating whether RawEncryptRequest.initialization_vector_crc32c was received by KeyManagementService and used for the integrity verification of initialization_vector. A false value of this field indicates either that RawEncryptRequest.initialization_vector_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawEncryptRequest.initialization_vector_crc32c but this field is still false, discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedInitializationVectorCrc32c")]
		public System.Nullable<System.Boolean> VerifiedInitializationVectorCrc32c { get; set; }
		
		/// <summary>
		/// Integrity verification field. A flag indicating whether RawEncryptRequest.plaintext_crc32c was received by KeyManagementService and used for the integrity verification of the plaintext. A false value of this field indicates either that RawEncryptRequest.plaintext_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawEncryptRequest.plaintext_crc32c but this field is still false, discard the response and perform a limited number of retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedPlaintextCrc32c")]
		public System.Nullable<System.Boolean> VerifiedPlaintextCrc32c { get; set; }
	}
	
	/// <summary>
	/// Request message for KeyManagementService.RestoreCryptoKeyVersion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestoreCryptoKeyVersionRequest
	{
	}
	
	/// <summary>
	/// Request message for `SetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
		
		/// <summary>
		/// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Request message for KeyManagementService.UpdateCryptoKeyPrimaryVersion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCryptoKeyPrimaryVersionRequest
	{
		
		/// <summary>
		/// Required. The id of the child CryptoKeyVersion to use as primary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cryptoKeyVersionId")]
		public string CryptoKeyVersionId { get; set; }
	}
	
	/// <summary>
	/// Response message for EkmService.VerifyConnectivity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VerifyConnectivityResponse
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Generate random bytes using the Cloud KMS randomness source in the provided location.
		/// Cloudkms_projects_locations_generateRandomBytes v1/{location}:generateRandomBytes
		/// </summary>
		/// <param name="location">The project-specific location in which to generate random bytes. For example, "projects/my-project/locations/us-central1".</param>
		/// <returns>Successful response</returns>
		public async Task<GenerateRandomBytesResponse> Cloudkms_projects_locations_generateRandomBytesAsync(string location, GenerateRandomBytesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (location==null? "" : System.Uri.EscapeDataString(location))+":generateRandomBytes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenerateRandomBytesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns metadata for a given ImportJob.
		/// Cloudkms_projects_locations_keyRings_importJobs_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the ImportJob to get.</param>
		/// <returns>Successful response</returns>
		public async Task<ImportJob> Cloudkms_projects_locations_keyRings_importJobs_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportJob>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a CryptoKeyVersion's metadata. state may be changed between ENABLED and DISABLED using this method. See DestroyCryptoKeyVersion and RestoreCryptoKeyVersion to move between other states.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_patch v1/{name}
		/// </summary>
		/// <param name="name">Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.</param>
		/// <param name="updateMask">Required. List of fields to be updated in this request.</param>
		/// <returns>Successful response</returns>
		public async Task<CryptoKeyVersion> Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_patchAsync(string name, string updateMask, CryptoKeyVersion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CryptoKeyVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Cloudkms_projects_locations_list v1/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Cloudkms_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the public key for the given CryptoKeyVersion. The CryptoKey.purpose must be ASYMMETRIC_SIGN or ASYMMETRIC_DECRYPT.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_getPublicKey v1/{name}/publicKey
		/// </summary>
		/// <param name="name">Required. The name of the CryptoKeyVersion public key to get.</param>
		/// <returns>Successful response</returns>
		public async Task<PublicKey> Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_getPublicKeyAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/publicKey";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublicKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Decrypts data that was encrypted with a public key retrieved from GetPublicKey corresponding to a CryptoKeyVersion with CryptoKey.purpose ASYMMETRIC_DECRYPT.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricDecrypt v1/{name}:asymmetricDecrypt
		/// </summary>
		/// <param name="name">Required. The resource name of the CryptoKeyVersion to use for decryption.</param>
		/// <returns>Successful response</returns>
		public async Task<AsymmetricDecryptResponse> Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricDecryptAsync(string name, AsymmetricDecryptRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":asymmetricDecrypt";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AsymmetricDecryptResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Signs data using a CryptoKeyVersion with CryptoKey.purpose ASYMMETRIC_SIGN, producing a signature that can be verified with the public key retrieved from GetPublicKey.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricSign v1/{name}:asymmetricSign
		/// </summary>
		/// <param name="name">Required. The resource name of the CryptoKeyVersion to use for signing.</param>
		/// <returns>Successful response</returns>
		public async Task<AsymmetricSignResponse> Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricSignAsync(string name, AsymmetricSignRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":asymmetricSign";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AsymmetricSignResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Decrypts data that was protected by Encrypt. The CryptoKey.purpose must be ENCRYPT_DECRYPT.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_decrypt v1/{name}:decrypt
		/// </summary>
		/// <param name="name">Required. The resource name of the CryptoKey to use for decryption. The server will choose the appropriate version.</param>
		/// <returns>Successful response</returns>
		public async Task<DecryptResponse> Cloudkms_projects_locations_keyRings_cryptoKeys_decryptAsync(string name, DecryptRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":decrypt";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DecryptResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Schedule a CryptoKeyVersion for destruction. Upon calling this method, CryptoKeyVersion.state will be set to DESTROY_SCHEDULED, and destroy_time will be set to the time destroy_scheduled_duration in the future. At that time, the state will automatically change to DESTROYED, and the key material will be irrevocably destroyed. Before the destroy_time is reached, RestoreCryptoKeyVersion may be called to reverse the process.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_destroy v1/{name}:destroy
		/// </summary>
		/// <param name="name">Required. The resource name of the CryptoKeyVersion to destroy.</param>
		/// <returns>Successful response</returns>
		public async Task<CryptoKeyVersion> Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_destroyAsync(string name, DestroyCryptoKeyVersionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":destroy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CryptoKeyVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Encrypts data, so that it can only be recovered by a call to Decrypt. The CryptoKey.purpose must be ENCRYPT_DECRYPT.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_encrypt v1/{name}:encrypt
		/// </summary>
		/// <param name="name">Required. The resource name of the CryptoKey or CryptoKeyVersion to use for encryption. If a CryptoKey is specified, the server will use its primary version.</param>
		/// <returns>Successful response</returns>
		public async Task<EncryptResponse> Cloudkms_projects_locations_keyRings_cryptoKeys_encryptAsync(string name, EncryptRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":encrypt";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EncryptResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Signs data using a CryptoKeyVersion with CryptoKey.purpose MAC, producing a tag that can be verified by another source with the same key.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macSign v1/{name}:macSign
		/// </summary>
		/// <param name="name">Required. The resource name of the CryptoKeyVersion to use for signing.</param>
		/// <returns>Successful response</returns>
		public async Task<MacSignResponse> Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macSignAsync(string name, MacSignRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":macSign";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MacSignResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verifies MAC tag using a CryptoKeyVersion with CryptoKey.purpose MAC, and returns a response that indicates whether or not the verification was successful.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macVerify v1/{name}:macVerify
		/// </summary>
		/// <param name="name">Required. The resource name of the CryptoKeyVersion to use for verification.</param>
		/// <returns>Successful response</returns>
		public async Task<MacVerifyResponse> Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macVerifyAsync(string name, MacVerifyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":macVerify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MacVerifyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Decrypts data that was originally encrypted using a raw cryptographic mechanism. The CryptoKey.purpose must be RAW_ENCRYPT_DECRYPT.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawDecrypt v1/{name}:rawDecrypt
		/// </summary>
		/// <param name="name">Required. The resource name of the CryptoKeyVersion to use for decryption.</param>
		/// <returns>Successful response</returns>
		public async Task<RawDecryptResponse> Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawDecryptAsync(string name, RawDecryptRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":rawDecrypt";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RawDecryptResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Encrypts data using portable cryptographic primitives. Most users should choose Encrypt and Decrypt rather than their raw counterparts. The CryptoKey.purpose must be RAW_ENCRYPT_DECRYPT.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawEncrypt v1/{name}:rawEncrypt
		/// </summary>
		/// <param name="name">Required. The resource name of the CryptoKeyVersion to use for encryption.</param>
		/// <returns>Successful response</returns>
		public async Task<RawEncryptResponse> Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawEncryptAsync(string name, RawEncryptRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":rawEncrypt";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RawEncryptResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Restore a CryptoKeyVersion in the DESTROY_SCHEDULED state. Upon restoration of the CryptoKeyVersion, state will be set to DISABLED, and destroy_time will be cleared.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_restore v1/{name}:restore
		/// </summary>
		/// <param name="name">Required. The resource name of the CryptoKeyVersion to restore.</param>
		/// <returns>Successful response</returns>
		public async Task<CryptoKeyVersion> Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_restoreAsync(string name, RestoreCryptoKeyVersionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":restore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CryptoKeyVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the version of a CryptoKey that will be used in Encrypt. Returns an error if called on a key whose purpose is not ENCRYPT_DECRYPT.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_updatePrimaryVersion v1/{name}:updatePrimaryVersion
		/// </summary>
		/// <param name="name">Required. The resource name of the CryptoKey to update.</param>
		/// <returns>Successful response</returns>
		public async Task<CryptoKey> Cloudkms_projects_locations_keyRings_cryptoKeys_updatePrimaryVersionAsync(string name, UpdateCryptoKeyPrimaryVersionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":updatePrimaryVersion";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CryptoKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verifies that Cloud KMS can successfully connect to the external key manager specified by an EkmConnection. If there is an error connecting to the EKM, this method returns a FAILED_PRECONDITION status containing structured information as described at https://cloud.google.com/kms/docs/reference/ekm_errors.
		/// Cloudkms_projects_locations_ekmConnections_verifyConnectivity v1/{name}:verifyConnectivity
		/// </summary>
		/// <param name="name">Required. The name of the EkmConnection to verify.</param>
		/// <returns>Successful response</returns>
		public async Task<VerifyConnectivityResponse> Cloudkms_projects_locations_ekmConnections_verifyConnectivityAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":verifyConnectivity";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VerifyConnectivityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists CryptoKeyVersions.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_list v1/{parent}/cryptoKeyVersions
		/// </summary>
		/// <param name="parent">Required. The resource name of the CryptoKey to list, in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*`.</param>
		/// <param name="filter">Optional. Only include resources that match the filter in the response. For more information, see [Sorting and filtering list results](https://cloud.google.com/kms/docs/sorting-and-filtering).</param>
		/// <param name="orderBy">Optional. Specify how the results should be sorted. If not specified, the results will be sorted in the default order. For more information, see [Sorting and filtering list results](https://cloud.google.com/kms/docs/sorting-and-filtering).</param>
		/// <param name="pageSize">Optional. Optional limit on the number of CryptoKeyVersions to include in the response. Further CryptoKeyVersions can subsequently be obtained by including the ListCryptoKeyVersionsResponse.next_page_token in a subsequent request. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">Optional. Optional pagination token, returned earlier via ListCryptoKeyVersionsResponse.next_page_token.</param>
		/// <param name="view">The fields to include in the response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCryptoKeyVersionsResponse> Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/cryptoKeyVersions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCryptoKeyVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new CryptoKeyVersion in a CryptoKey. The server will assign the next sequential id. If unset, state will be set to ENABLED.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_create v1/{parent}/cryptoKeyVersions
		/// </summary>
		/// <param name="parent">Required. The name of the CryptoKey associated with the CryptoKeyVersions.</param>
		/// <returns>Successful response</returns>
		public async Task<CryptoKeyVersion> Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_createAsync(string parent, CryptoKeyVersion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/cryptoKeyVersions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CryptoKeyVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Import wrapped key material into a CryptoKeyVersion. All requests must specify a CryptoKey. If a CryptoKeyVersion is additionally specified in the request, key material will be reimported into that version. Otherwise, a new version will be created, and will be assigned the next sequential id within the CryptoKey.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_import v1/{parent}/cryptoKeyVersions:import
		/// </summary>
		/// <param name="parent">Required. The name of the CryptoKey to be imported into. The create permission is only required on this key when creating a new CryptoKeyVersion.</param>
		/// <returns>Successful response</returns>
		public async Task<CryptoKeyVersion> Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_importAsync(string parent, ImportCryptoKeyVersionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/cryptoKeyVersions:import";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CryptoKeyVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists CryptoKeys.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_list v1/{parent}/cryptoKeys
		/// </summary>
		/// <param name="parent">Required. The resource name of the KeyRing to list, in the format `projects/*/locations/*/keyRings/*`.</param>
		/// <param name="filter">Optional. Only include resources that match the filter in the response. For more information, see [Sorting and filtering list results](https://cloud.google.com/kms/docs/sorting-and-filtering).</param>
		/// <param name="orderBy">Optional. Specify how the results should be sorted. If not specified, the results will be sorted in the default order. For more information, see [Sorting and filtering list results](https://cloud.google.com/kms/docs/sorting-and-filtering).</param>
		/// <param name="pageSize">Optional. Optional limit on the number of CryptoKeys to include in the response. Further CryptoKeys can subsequently be obtained by including the ListCryptoKeysResponse.next_page_token in a subsequent request. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">Optional. Optional pagination token, returned earlier via ListCryptoKeysResponse.next_page_token.</param>
		/// <param name="versionView">The fields of the primary version to include in the response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCryptoKeysResponse> Cloudkms_projects_locations_keyRings_cryptoKeys_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_listView versionView, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/cryptoKeys&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&versionView=" + versionView;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCryptoKeysResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new CryptoKey within a KeyRing. CryptoKey.purpose and CryptoKey.version_template.algorithm are required.
		/// Cloudkms_projects_locations_keyRings_cryptoKeys_create v1/{parent}/cryptoKeys
		/// </summary>
		/// <param name="parent">Required. The name of the KeyRing associated with the CryptoKeys.</param>
		/// <param name="cryptoKeyId">Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`</param>
		/// <param name="skipInitialVersionCreation">If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must manually call CreateCryptoKeyVersion or ImportCryptoKeyVersion before you can use this CryptoKey.</param>
		/// <returns>Successful response</returns>
		public async Task<CryptoKey> Cloudkms_projects_locations_keyRings_cryptoKeys_createAsync(string parent, string cryptoKeyId, bool skipInitialVersionCreation, CryptoKey requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/cryptoKeys&cryptoKeyId=" + (cryptoKeyId==null? "" : System.Uri.EscapeDataString(cryptoKeyId))+"&skipInitialVersionCreation="+skipInitialVersionCreation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CryptoKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists EkmConnections.
		/// Cloudkms_projects_locations_ekmConnections_list v1/{parent}/ekmConnections
		/// </summary>
		/// <param name="parent">Required. The resource name of the location associated with the EkmConnections to list, in the format `projects/*/locations/*`.</param>
		/// <param name="filter">Optional. Only include resources that match the filter in the response. For more information, see [Sorting and filtering list results](https://cloud.google.com/kms/docs/sorting-and-filtering).</param>
		/// <param name="orderBy">Optional. Specify how the results should be sorted. If not specified, the results will be sorted in the default order. For more information, see [Sorting and filtering list results](https://cloud.google.com/kms/docs/sorting-and-filtering).</param>
		/// <param name="pageSize">Optional. Optional limit on the number of EkmConnections to include in the response. Further EkmConnections can subsequently be obtained by including the ListEkmConnectionsResponse.next_page_token in a subsequent request. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">Optional. Optional pagination token, returned earlier via ListEkmConnectionsResponse.next_page_token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListEkmConnectionsResponse> Cloudkms_projects_locations_ekmConnections_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/ekmConnections&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEkmConnectionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new EkmConnection in a given Project and Location.
		/// Cloudkms_projects_locations_ekmConnections_create v1/{parent}/ekmConnections
		/// </summary>
		/// <param name="parent">Required. The resource name of the location associated with the EkmConnection, in the format `projects/*/locations/*`.</param>
		/// <param name="ekmConnectionId">Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`.</param>
		/// <returns>Successful response</returns>
		public async Task<EkmConnection> Cloudkms_projects_locations_ekmConnections_createAsync(string parent, string ekmConnectionId, EkmConnection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/ekmConnections&ekmConnectionId=" + (ekmConnectionId==null? "" : System.Uri.EscapeDataString(ekmConnectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EkmConnection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists ImportJobs.
		/// Cloudkms_projects_locations_keyRings_importJobs_list v1/{parent}/importJobs
		/// </summary>
		/// <param name="parent">Required. The resource name of the KeyRing to list, in the format `projects/*/locations/*/keyRings/*`.</param>
		/// <param name="filter">Optional. Only include resources that match the filter in the response. For more information, see [Sorting and filtering list results](https://cloud.google.com/kms/docs/sorting-and-filtering).</param>
		/// <param name="orderBy">Optional. Specify how the results should be sorted. If not specified, the results will be sorted in the default order. For more information, see [Sorting and filtering list results](https://cloud.google.com/kms/docs/sorting-and-filtering).</param>
		/// <param name="pageSize">Optional. Optional limit on the number of ImportJobs to include in the response. Further ImportJobs can subsequently be obtained by including the ListImportJobsResponse.next_page_token in a subsequent request. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">Optional. Optional pagination token, returned earlier via ListImportJobsResponse.next_page_token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListImportJobsResponse> Cloudkms_projects_locations_keyRings_importJobs_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/importJobs&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImportJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new ImportJob within a KeyRing. ImportJob.import_method is required.
		/// Cloudkms_projects_locations_keyRings_importJobs_create v1/{parent}/importJobs
		/// </summary>
		/// <param name="parent">Required. The name of the KeyRing associated with the ImportJobs.</param>
		/// <param name="importJobId">Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`</param>
		/// <returns>Successful response</returns>
		public async Task<ImportJob> Cloudkms_projects_locations_keyRings_importJobs_createAsync(string parent, string importJobId, ImportJob requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/importJobs&importJobId=" + (importJobId==null? "" : System.Uri.EscapeDataString(importJobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportJob>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists KeyRings.
		/// Cloudkms_projects_locations_keyRings_list v1/{parent}/keyRings
		/// </summary>
		/// <param name="parent">Required. The resource name of the location associated with the KeyRings, in the format `projects/*/locations/*`.</param>
		/// <param name="filter">Optional. Only include resources that match the filter in the response. For more information, see [Sorting and filtering list results](https://cloud.google.com/kms/docs/sorting-and-filtering).</param>
		/// <param name="orderBy">Optional. Specify how the results should be sorted. If not specified, the results will be sorted in the default order. For more information, see [Sorting and filtering list results](https://cloud.google.com/kms/docs/sorting-and-filtering).</param>
		/// <param name="pageSize">Optional. Optional limit on the number of KeyRings to include in the response. Further KeyRings can subsequently be obtained by including the ListKeyRingsResponse.next_page_token in a subsequent request. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">Optional. Optional pagination token, returned earlier via ListKeyRingsResponse.next_page_token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListKeyRingsResponse> Cloudkms_projects_locations_keyRings_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/keyRings&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListKeyRingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new KeyRing in a given Project and Location.
		/// Cloudkms_projects_locations_keyRings_create v1/{parent}/keyRings
		/// </summary>
		/// <param name="parent">Required. The resource name of the location associated with the KeyRings, in the format `projects/*/locations/*`.</param>
		/// <param name="keyRingId">Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`</param>
		/// <returns>Successful response</returns>
		public async Task<KeyRing> Cloudkms_projects_locations_keyRings_createAsync(string parent, string keyRingId, KeyRing requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/keyRings&keyRingId=" + (keyRingId==null? "" : System.Uri.EscapeDataString(keyRingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeyRing>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
		/// Cloudkms_projects_locations_keyRings_importJobs_getIamPolicy v1/{resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <param name="options_requestedPolicyVersion">Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Cloudkms_projects_locations_keyRings_importJobs_getIamPolicyAsync(string resource, int options_requestedPolicyVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy&options.requestedPolicyVersion="+options_requestedPolicyVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
		/// Cloudkms_projects_locations_keyRings_importJobs_setIamPolicy v1/{resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Cloudkms_projects_locations_keyRings_importJobs_setIamPolicyAsync(string resource, SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
		/// Cloudkms_projects_locations_keyRings_importJobs_testIamPermissions v1/{resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Cloudkms_projects_locations_keyRings_importJobs_testIamPermissionsAsync(string resource, TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestIamPermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_listView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CRYPTO_KEY_VERSION_VIEW_UNSPECIFIED")]
		CRYPTO_KEY_VERSION_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FULL")]
		FULL = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
