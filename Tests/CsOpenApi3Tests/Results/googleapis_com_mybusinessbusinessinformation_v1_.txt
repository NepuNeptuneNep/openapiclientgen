//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Additional information that is surfaced in AdWords.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdWordsLocationExtensions
	{
		
		/// <summary>
		/// Required. An alternate phone number to display on AdWords location extensions instead of the location's primary phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adPhone")]
		public string AdPhone { get; set; }
	}
	
	/// <summary>
	/// A location attribute. Attributes provide additional information about a location. The attributes that can be set on a location may vary based on the properties of that location (for example, category). Available attributes are determined by Google and may be added and removed without API changes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attribute
	{
		
		/// <summary>
		/// Required. The resource name for this attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Values for an attribute with a `value_type` of REPEATED_ENUM. This consists of two lists of value IDs: those that are set (true) and those that are unset (false). Values absent are considered unknown. At least one value must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeatedEnumValue")]
		public RepeatedEnumAttributeValue RepeatedEnumValue { get; set; }
		
		/// <summary>
		/// When the attribute value type is URL, this field contains the value(s) for this attribute, and the other values fields must be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uriValues")]
		public UriAttributeValue[] UriValues { get; set; }
		
		/// <summary>
		/// Output only. The type of value that this attribute contains. This should be used to determine how to interpret the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueType")]
		public System.Nullable<AttributeValueType> ValueType { get; set; }
		
		/// <summary>
		/// The values for this attribute. The type of the values supplied must match that expected for that attribute. This is a repeated field where multiple attribute values may be provided. Attribute types only support one value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// Values for an attribute with a `value_type` of REPEATED_ENUM. This consists of two lists of value IDs: those that are set (true) and those that are unset (false). Values absent are considered unknown. At least one value must be specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepeatedEnumAttributeValue
	{
		
		/// <summary>
		/// Enum values that are set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setValues")]
		public string[] SetValues { get; set; }
		
		/// <summary>
		/// Enum values that are unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsetValues")]
		public string[] UnsetValues { get; set; }
	}
	
	/// <summary>
	/// Values for an attribute with a `value_type` of URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UriAttributeValue
	{
		
		/// <summary>
		/// Required. The proposed URI value for this attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AttributeValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTRIBUTE_VALUE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPEATED_ENUM = 4,
	}
	
	/// <summary>
	/// Metadata for an attribute. Contains display information for the attribute, including a localized name and a heading for grouping related attributes together.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttributeMetadata
	{
		
		/// <summary>
		/// If true, the attribute is deprecated and should no longer be used. If deprecated, updating this attribute will not result in an error, but updates will not be saved. At some point after being deprecated, the attribute will be removed entirely and it will become an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecated")]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		/// <summary>
		/// The localized display name for the attribute, if available; otherwise, the English display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The localized display name of the group that contains this attribute, if available; otherwise, the English group name. Related attributes are collected into a group and should be displayed together under the heading given here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupDisplayName")]
		public string GroupDisplayName { get; set; }
		
		/// <summary>
		/// The unique identifier for the attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// If true, the attribute supports multiple values. If false, only a single value should be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeatable")]
		public System.Nullable<System.Boolean> Repeatable { get; set; }
		
		/// <summary>
		/// For some types of attributes (for example, enums), a list of supported values and corresponding display names for those values is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueMetadata")]
		public AttributeValueMetadata[] ValueMetadata { get; set; }
		
		/// <summary>
		/// The value type for the attribute. Values set and retrieved should be expected to be of this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueType")]
		public AttributeValueType ValueType { get; set; }
	}
	
	/// <summary>
	/// Metadata for supported attribute values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttributeValueMetadata
	{
		
		/// <summary>
		/// The display name for this value, localized where available; otherwise, in English. The value display name is intended to be used in context with the attribute display name. For example, for a "WiFi" enum attribute, this could contain "Paid" to represent paid Wi-Fi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The attribute value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	/// <summary>
	/// A container for all the attributes for a given location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attributes
	{
		
		/// <summary>
		/// A collection of attributes that need to be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attribute[] Attributes1 { get; set; }
		
		/// <summary>
		/// Required. Google identifier for this location in the form of `locations/{location_id}/attributes`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Response message for BusinessCategories.BatchGetBusinessCategories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetCategoriesResponse
	{
		
		/// <summary>
		/// Categories that match the GConcept ids provided in the request. They will not come in the same order as category ids in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
	}
	
	/// <summary>
	/// A category describing what this business is (not what it does). For a list of valid category IDs, and the mappings to their human-readable names, see `categories.list`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Category
	{
		
		/// <summary>
		/// Output only. The human-readable name of the category. This is set when reading the location. When modifying the location, `category_id` must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. More hours types that are available for this business category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moreHoursTypes")]
		public MoreHoursType[] MoreHoursTypes { get; set; }
		
		/// <summary>
		/// Required. A stable ID (provided by Google) for this category. The value must be specified when modifying the category (when creating or updating a location).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. A list of all the service types that are available for this business category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceTypes")]
		public ServiceType[] ServiceTypes { get; set; }
	}
	
	/// <summary>
	/// More hours types that a business can offers, in addition to its regular hours.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MoreHoursType
	{
		
		/// <summary>
		/// Output only. The human-readable English display name for the hours type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. A stable ID provided by Google for this hours type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hoursTypeId")]
		public string HoursTypeId { get; set; }
		
		/// <summary>
		/// Output only. The human-readable localized display name for the hours type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedDisplayName")]
		public string LocalizedDisplayName { get; set; }
	}
	
	/// <summary>
	/// A message describing a service type that the business offers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceType
	{
		
		/// <summary>
		/// Output only. The human-readable display name for the service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. A stable ID (provided by Google) for this service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceTypeId")]
		public string ServiceTypeId { get; set; }
	}
	
	/// <summary>
	/// Represents the time periods that this location is open for business. Holds a collection of TimePeriod instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessHours
	{
		
		/// <summary>
		/// Required. A collection of times that this location is open for business. Each period represents a range of hours when the location is open during the week.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periods")]
		public TimePeriod[] Periods { get; set; }
	}
	
	/// <summary>
	/// Represents a span of time that the business is open, starting on the specified open day/time and closing on the specified close day/time. The closing time must occur after the opening time, for example later in the same day, or on a subsequent day.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimePeriod
	{
		
		/// <summary>
		/// Required. Indicates the day of the week this period ends on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closeDay")]
		public System.Nullable<TimePeriodCloseDay> CloseDay { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closeTime")]
		public TimeOfDay CloseTime { get; set; }
		
		/// <summary>
		/// Required. Indicates the day of the week this period starts on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openDay")]
		public TimePeriodCloseDay OpenDay { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openTime")]
		public TimeOfDay OpenTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TimePeriodCloseDay
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_WEEK_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUESDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDNESDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THURSDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRIDAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SATURDAY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUNDAY = 7,
	}
	
	/// <summary>
	/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeOfDay
	{
		
		/// <summary>
		/// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// Minutes of hour of day. Must be from 0 to 59.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
		
		/// <summary>
		/// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}
	
	/// <summary>
	/// A collection of categories that describes the business. During updates, both fields must be set. Clients are prohibited from individually updating the primary or additional categories using the update mask.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Categories
	{
		
		/// <summary>
		/// Optional. Additional categories to describe your business. Categories help your customers find accurate, specific results for services they're interested in. To keep your business information accurate and live, make sure that you use as few categories as possible to describe your overall core business. Choose categories that are as specific as possible, but representative of your main business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalCategories")]
		public Category[] AdditionalCategories { get; set; }
		
		/// <summary>
		/// A category describing what this business is (not what it does). For a list of valid category IDs, and the mappings to their human-readable names, see `categories.list`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryCategory")]
		public Category PrimaryCategory { get; set; }
	}
	
	/// <summary>
	/// A chain is a brand that your business's locations can be affiliated with.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Chain
	{
		
		/// <summary>
		/// Names of the chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chainNames")]
		public ChainName[] ChainNames { get; set; }
		
		/// <summary>
		/// Number of locations that are part of this chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationCount")]
		public System.Nullable<System.Int32> LocationCount { get; set; }
		
		/// <summary>
		/// Required. The chain's resource name, in the format `chains/{chain_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Websites of the chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websites")]
		public ChainUri[] Websites { get; set; }
	}
	
	/// <summary>
	/// Name to be used when displaying the chain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChainName
	{
		
		/// <summary>
		/// The display name for this chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The BCP 47 code of language of the name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
	}
	
	/// <summary>
	/// Url to be used when displaying the chain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChainUri
	{
		
		/// <summary>
		/// The uri for this chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// Represents a free-form service offered by the merchant. These are services that are not exposed as part of our structure service data. The merchant manually enters the names for of such services via a geomerchant surface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FreeFormServiceItem
	{
		
		/// <summary>
		/// Required. This field represents the category name (i.e. the category's stable ID). The `category` and `service_type_id` should match the possible combinations provided in the `Category` message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Label to be used when displaying the price list, section, or item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public Label Label { get; set; }
	}
	
	/// <summary>
	/// Label to be used when displaying the price list, section, or item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Label
	{
		
		/// <summary>
		/// Optional. Description of the price list, section, or item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. Display name for the price list, section, or item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Optional. The BCP-47 language code that these strings apply for. Only one set of labels may be set per language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
	}
	
	/// <summary>
	/// Represents a Location that is present on Google. This can be a location that has been claimed by the user, someone else, or could be unclaimed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleLocation
	{
		
		/// <summary>
		/// A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// Resource name of this GoogleLocation, in the format `googleLocations/{googleLocationId}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A URL that will redirect the user to the request admin rights UI. This field is only present if the location has already been claimed by any user, including the current user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAdminRightsUri")]
		public string RequestAdminRightsUri { get; set; }
	}
	
	/// <summary>
	/// A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// Additional information that is surfaced in AdWords.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adWordsLocationExtensions")]
		public AdWordsLocationExtensions AdWordsLocationExtensions { get; set; }
		
		/// <summary>
		/// A collection of categories that describes the business. During updates, both fields must be set. Clients are prohibited from individually updating the primary or additional categories using the update mask.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Categories Categories { get; set; }
		
		/// <summary>
		/// Optional. A collection of free-form strings to allow you to tag your business. These labels are NOT user facing; only you can see them. Must be between 1-255 characters per label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// Immutable. The language of the location. Set during creation and not updateable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latlng")]
		public LatLng Latlng { get; set; }
		
		/// <summary>
		/// Additional non-user-editable information about the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata Metadata { get; set; }
		
		/// <summary>
		/// Optional. More hours for a business's different departments or specific customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moreHours")]
		public MoreHours[] MoreHours { get; set; }
		
		/// <summary>
		/// Google identifier for this location in the form: `locations/{location_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Information related to the opening state of the business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openInfo")]
		public OpenInfo OpenInfo { get; set; }
		
		/// <summary>
		/// A collection of phone numbers for the business. During updates, both fields must be set. Clients may not update just the primary or additional phone numbers using the update mask. International phone format is preferred, such as "+1 415 555 0132", see more in (https://developers.google.com/style/phone-numbers#international-phone-numbers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumbers")]
		public PhoneNumbers PhoneNumbers { get; set; }
		
		/// <summary>
		/// All information pertaining to the location's profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public Profile Profile { get; set; }
		
		/// <summary>
		/// Represents the time periods that this location is open for business. Holds a collection of TimePeriod instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regularHours")]
		public BusinessHours RegularHours { get; set; }
		
		/// <summary>
		/// Information of all parent and children locations related to this one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationshipData")]
		public RelationshipData RelationshipData { get; set; }
		
		/// <summary>
		/// Service area businesses provide their service at the customer's location (for example, a locksmith or plumber).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceArea")]
		public ServiceAreaBusiness ServiceArea { get; set; }
		
		/// <summary>
		/// Optional. List of services supported by merchants. A service can be haircut, install water heater, etc. Duplicated service items will be removed automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceItems")]
		public ServiceItem[] ServiceItems { get; set; }
		
		/// <summary>
		/// Represents a set of time periods when a location's operational hours differ from its normal business hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialHours")]
		public SpecialHours SpecialHours { get; set; }
		
		/// <summary>
		/// Optional. External identifier for this location, which must be unique within a given account. This is a means of associating the location with your own records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storefrontAddress")]
		public PostalAddress StorefrontAddress { get; set; }
		
		/// <summary>
		/// Required. Location name should reflect your business's real-world name, as used consistently on your storefront, website, and stationery, and as known to customers. Any additional information, when relevant, can be included in other fields of the resource (for example, `Address`, `Categories`). Don't add unnecessary information to your name (for example, prefer "Google" over "Google Inc. - Mountain View Corporate Headquarters"). Don't include marketing taglines, store codes, special characters, hours or closed/open status, phone numbers, website URLs, service/product information, location/address or directions, or containment information (for example, "Chase ATM in Duane Reade").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Optional. A URL for this business. If possible, use a URL that represents this individual business location instead of a generic website/URL that represents all locations, or the brand.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteUri")]
		public string WebsiteUri { get; set; }
	}
	
	/// <summary>
	/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LatLng
	{
		
		/// <summary>
		/// The latitude in degrees. It must be in the range [-90.0, +90.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The longitude in degrees. It must be in the range [-180.0, +180.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// Additional non-user-editable information about the location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Metadata
	{
		
		/// <summary>
		/// Output only. Indicates whether the location can be deleted using the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDelete")]
		public System.Nullable<System.Boolean> CanDelete { get; set; }
		
		/// <summary>
		/// Output only. Indicates if the listing is eligible for business calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canHaveBusinessCalls")]
		public System.Nullable<System.Boolean> CanHaveBusinessCalls { get; set; }
		
		/// <summary>
		/// Output only. Indicates if the listing is eligible for food menu.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canHaveFoodMenus")]
		public System.Nullable<System.Boolean> CanHaveFoodMenus { get; set; }
		
		/// <summary>
		/// Output only. Indicates if the listing can modify the service list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canModifyServiceList")]
		public System.Nullable<System.Boolean> CanModifyServiceList { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the location can operate on Health data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canOperateHealthData")]
		public System.Nullable<System.Boolean> CanOperateHealthData { get; set; }
		
		/// <summary>
		/// Output only. Indicates if the listing can manage local posts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canOperateLocalPost")]
		public System.Nullable<System.Boolean> CanOperateLocalPost { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the location can operate on Lodging data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canOperateLodgingData")]
		public System.Nullable<System.Boolean> CanOperateLodgingData { get; set; }
		
		/// <summary>
		/// Output only. The location resource that this location duplicates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateLocation")]
		public string DuplicateLocation { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the place ID associated with this location has updates that need to be updated or rejected by the client. If this boolean is set, you should call the `getGoogleUpdated` method to lookup information that's needs to be verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasGoogleUpdated")]
		public System.Nullable<System.Boolean> HasGoogleUpdated { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether any of this Location's properties are in the edit pending state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasPendingEdits")]
		public System.Nullable<System.Boolean> HasPendingEdits { get; set; }
		
		/// <summary>
		/// Output only. Indicates if the listing has Voice of Merchant. If this boolean is false, you should call the locations.getVoiceOfMerchantState API to get details as to why they do not have Voice of Merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasVoiceOfMerchant")]
		public System.Nullable<System.Boolean> HasVoiceOfMerchant { get; set; }
		
		/// <summary>
		/// Output only. A link to the location on Maps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mapsUri")]
		public string MapsUri { get; set; }
		
		/// <summary>
		/// Output only. A link to the page on Google Search where a customer can leave a review for the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newReviewUri")]
		public string NewReviewUri { get; set; }
		
		/// <summary>
		/// Output only. If this locationappears on Google Maps, this field is populated with the place ID for the location. This ID can be used in various Places APIs. This field can be set during Create calls, but not for Update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeId")]
		public string PlaceId { get; set; }
	}
	
	/// <summary>
	/// The time periods during which a location is open for certain types of business.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MoreHours
	{
		
		/// <summary>
		/// Required. Type of hours. Clients should call {#link businessCategories:BatchGet} to get supported hours types for categories of their locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hoursTypeId")]
		public string HoursTypeId { get; set; }
		
		/// <summary>
		/// Required. A collection of times that this location is open. Each period represents a range of hours when the location is open during the week.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periods")]
		public TimePeriod[] Periods { get; set; }
	}
	
	/// <summary>
	/// Information related to the opening state of the business.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpenInfo
	{
		
		/// <summary>
		/// Output only. Indicates whether this business is eligible for re-open.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReopen")]
		public System.Nullable<System.Boolean> CanReopen { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openingDate")]
		public Date OpeningDate { get; set; }
		
		/// <summary>
		/// Required. Indicates whether or not the Location is currently open for business. All locations are open by default, unless updated to be closed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OpenInfoStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OpenInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_FOR_BUSINESS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED_PERMANENTLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED_TEMPORARILY = 3,
	}
	
	/// <summary>
	/// A collection of phone numbers for the business. During updates, both fields must be set. Clients may not update just the primary or additional phone numbers using the update mask. International phone format is preferred, such as "+1 415 555 0132", see more in (https://developers.google.com/style/phone-numbers#international-phone-numbers).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneNumbers
	{
		
		/// <summary>
		/// Optional. Up to two phone numbers (mobile or landline, no fax) at which your business can be called, in addition to your primary phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalPhones")]
		public string[] AdditionalPhones { get; set; }
		
		/// <summary>
		/// Required. A phone number that connects to your individual business location as directly as possible. Use a local phone number instead of a central, call center helpline number whenever possible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryPhone")]
		public string PrimaryPhone { get; set; }
	}
	
	/// <summary>
	/// All information pertaining to the location's profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Profile
	{
		
		/// <summary>
		/// Required. Description of the location in your own voice, not editable by anyone else.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Information of all parent and children locations related to this one.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelationshipData
	{
		
		/// <summary>
		/// The list of children locations that this location has relations with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childrenLocations")]
		public RelevantLocation[] ChildrenLocations { get; set; }
		
		/// <summary>
		/// The resource name of the Chain that this location is member of. How to find Chain ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentChain")]
		public string ParentChain { get; set; }
		
		/// <summary>
		/// Information about another location that is related to current one. The relation can be any one of DEPARTMENT_OF or INDEPENDENT_ESTABLISHMENT_OF, and the location specified here can be on either side (parent/child) of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentLocation")]
		public RelevantLocation ParentLocation { get; set; }
	}
	
	/// <summary>
	/// Information about another location that is related to current one. The relation can be any one of DEPARTMENT_OF or INDEPENDENT_ESTABLISHMENT_OF, and the location specified here can be on either side (parent/child) of the location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelevantLocation
	{
		
		/// <summary>
		/// Required. Specify the location that is on the other side of the relation by its placeID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeId")]
		public string PlaceId { get; set; }
		
		/// <summary>
		/// Required. The type of the relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationType")]
		public System.Nullable<RelevantLocationRelationType> RelationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RelevantLocationRelationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPARTMENT_OF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INDEPENDENT_ESTABLISHMENT_IN = 2,
	}
	
	/// <summary>
	/// Service area businesses provide their service at the customer's location (for example, a locksmith or plumber).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceAreaBusiness
	{
		
		/// <summary>
		/// Required. Indicates the type of the service area business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessType")]
		public System.Nullable<ServiceAreaBusinessBusinessType> BusinessType { get; set; }
		
		/// <summary>
		/// Defines the union of areas represented by a set of places.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="places")]
		public Places Places { get; set; }
		
		/// <summary>
		/// Immutable. CLDR region code of the country/region that this service area business is based in. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland. This field is required for CUSTOMER_LOCATION_ONLY businesses, and is ignored otherwise. The region specified here can be different from regions for the areas that this business serves (e.g. service area businesses that provide services in regions other than the one that they are based in). If this location requires verification after creation, the address provided for verification purposes *must* be located within this region, and the business owner or their authorized representative *must* be able to receive postal mail at the provided verification address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ServiceAreaBusinessBusinessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_LOCATION_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_AND_BUSINESS_LOCATION = 2,
	}
	
	/// <summary>
	/// Defines the union of areas represented by a set of places.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Places
	{
		
		/// <summary>
		/// The areas represented by place IDs. Limited to a maximum of 20 places.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeInfos")]
		public PlaceInfo[] PlaceInfos { get; set; }
	}
	
	/// <summary>
	/// Defines an area that's represented by a place ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaceInfo
	{
		
		/// <summary>
		/// Required. The ID of the place. Must correspond to a region. (https://developers.google.com/places/web-service/supported_types#table3)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeId")]
		public string PlaceId { get; set; }
		
		/// <summary>
		/// Required. The localized name of the place. For example, `Scottsdale, AZ`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeName")]
		public string PlaceName { get; set; }
	}
	
	/// <summary>
	/// A message that describes a single service item. It is used to describe the type of service that the merchant provides. For example, haircut can be a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceItem
	{
		
		/// <summary>
		/// Represents a free-form service offered by the merchant. These are services that are not exposed as part of our structure service data. The merchant manually enters the names for of such services via a geomerchant surface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeFormServiceItem")]
		public FreeFormServiceItem FreeFormServiceItem { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Money Price { get; set; }
		
		/// <summary>
		/// Represents a structured service offered by the merchant. For eg: toilet_installation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredServiceItem")]
		public StructuredServiceItem StructuredServiceItem { get; set; }
	}
	
	/// <summary>
	/// Represents an amount of money with its currency type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Money
	{
		
		/// <summary>
		/// The three-letter currency code defined in ISO 4217.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	/// <summary>
	/// Represents a structured service offered by the merchant. For eg: toilet_installation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StructuredServiceItem
	{
		
		/// <summary>
		/// Optional. Description of structured service item. The character limit is 300.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. The `service_type_id` field is a Google provided unique ID that can be found in `ServiceType`. This information is provided by `BatchGetCategories` rpc service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceTypeId")]
		public string ServiceTypeId { get; set; }
	}
	
	/// <summary>
	/// Represents a set of time periods when a location's operational hours differ from its normal business hours.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpecialHours
	{
		
		/// <summary>
		/// Required. A list of exceptions to the business's regular hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialHourPeriods")]
		public SpecialHourPeriod[] SpecialHourPeriods { get; set; }
	}
	
	/// <summary>
	/// Represents a single time period when a location's operational hours differ from its normal business hours. A special hour period must represent a range of less than 24 hours. The `open_time` and `start_date` must predate the `close_time` and `end_date`. The `close_time` and `end_date` can extend to 11:59 a.m. on the day after the specified `start_date`. For example, the following inputs are valid: start_date=2015-11-23, open_time=08:00, close_time=18:00 start_date=2015-11-23, end_date=2015-11-23, open_time=08:00, close_time=18:00 start_date=2015-11-23, end_date=2015-11-24, open_time=13:00, close_time=11:59 The following inputs are not valid: start_date=2015-11-23, open_time=13:00, close_time=11:59 start_date=2015-11-23, end_date=2015-11-24, open_time=13:00, close_time=12:00 start_date=2015-11-23, end_date=2015-11-25, open_time=08:00, close_time=18:00
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpecialHourPeriod
	{
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closeTime")]
		public TimeOfDay CloseTime { get; set; }
		
		/// <summary>
		/// Optional. If true, `end_date`, `open_time`, and `close_time` are ignored, and the date specified in `start_date` is treated as the location being closed for the entire day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closed")]
		public System.Nullable<System.Boolean> Closed { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public Date EndDate { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openTime")]
		public TimeOfDay OpenTime { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public Date StartDate { get; set; }
	}
	
	/// <summary>
	/// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostalAddress
	{
		
		/// <summary>
		/// Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLines")]
		public string[] AddressLines { get; set; }
		
		/// <summary>
		/// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrativeArea")]
		public string AdministrativeArea { get; set; }
		
		/// <summary>
		/// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Optional. The name of the organization at the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public string[] Recipients { get; set; }
		
		/// <summary>
		/// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortingCode")]
		public string SortingCode { get; set; }
		
		/// <summary>
		/// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sublocality")]
		public string Sublocality { get; set; }
	}
	
	/// <summary>
	/// Represents a location that was modified by Google.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleUpdatedLocation
	{
		
		/// <summary>
		/// The fields that Google updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffMask")]
		public string DiffMask { get; set; }
		
		/// <summary>
		/// A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// The fields that have pending edits that haven't yet been pushed to Maps and Search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingMask")]
		public string PendingMask { get; set; }
	}
	
	/// <summary>
	/// Response for AttributesService.ListAttributeMetadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAttributeMetadataResponse
	{
		
		/// <summary>
		/// A collection of attribute metadata for the available attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeMetadata")]
		public AttributeMetadata[] AttributeMetadata { get; set; }
		
		/// <summary>
		/// If the number of attributes exceeded the requested page size, this field will be populated with a token to fetch the next page of attributes on a subsequent call to `attributes.list`. If there are no more attributes, this field will not be present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for BusinessCategories.ListCategories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCategoriesResponse
	{
		
		/// <summary>
		/// The matching categories based on the requested parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// If the number of categories exceeded the requested page size, this field will be populated with a token to fetch the next page of categories on a subsequent call to `ListCategories`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// The locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// If the number of locations exceeded the requested page size, this field is populated with a token to fetch the next page of locations on a subsequent call to `ListLocations`. If there are no more locations, this field is not present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The approximate number of Locations in the list irrespective of pagination. This field will only be returned if `filter` is used as a query parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Response message for Locations.SearchChains.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchChainsResponse
	{
		
		/// <summary>
		/// Chains that match the queried chain_display_name in SearchChainsRequest. If there are no matches, this field will be empty. Results are listed in order of relevance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chains")]
		public Chain[] Chains { get; set; }
	}
	
	/// <summary>
	/// Request message for GoogleLocations.SearchGoogleLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchGoogleLocationsRequest
	{
		
		/// <summary>
		/// A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// The number of matches to return. The default value is 3, with a maximum of 10. Note that latency may increase if more are requested. There is no pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// Text query to search for. The search results from a query string will be less accurate than if providing an exact location, but can provide more inexact matches.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
	}
	
	/// <summary>
	/// Response message for GoogleLocations.SearchGoogleLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchGoogleLocationsResponse
	{
		
		/// <summary>
		/// A collection of GoogleLocations that are potential matches to the specified request, listed in order from most to least accuracy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleLocations")]
		public GoogleLocation[] GoogleLocations { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns the list of attributes that would be available for a location with the given primary category and country.
		/// Mybusinessbusinessinformation_attributes_list v1/attributes
		/// </summary>
		/// <param name="categoryName">The primary category stable ID to find available attributes. Must be of the format categories/{category_id}.</param>
		/// <param name="languageCode">The BCP 47 code of language to get attribute display names in. If this language is not available, they will be provided in English.</param>
		/// <param name="pageSize">How many attributes to include per page. Default is 200, minimum is 1.</param>
		/// <param name="pageToken">If specified, the next page of attribute metadata is retrieved.</param>
		/// <param name="parent">Resource name of the location to look up available attributes. If this field is set, category_name, region_code, language_code and show_all are not required and must not be set.</param>
		/// <param name="regionCode">The ISO 3166-1 alpha-2 country code to find available attributes.</param>
		/// <param name="showAll">Metadata for all available attributes are returned when this field is set to true, disregarding parent and category_name fields. language_code and region_code are required when show_all is set to true.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAttributeMetadataResponse> Mybusinessbusinessinformation_attributes_listAsync(string categoryName, string languageCode, int pageSize, string pageToken, string parent, string regionCode, bool showAll, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/attributes?categoryName=" + (categoryName==null? "" : System.Uri.EscapeDataString(categoryName))+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent))+"&regionCode=" + (regionCode==null? "" : System.Uri.EscapeDataString(regionCode))+"&showAll="+showAll;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAttributeMetadataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of business categories. Search will match the category name but not the category ID. Search only matches the front of a category name (that is, 'food' may return 'Food Court' but not 'Fast Food Restaurant').
		/// Mybusinessbusinessinformation_categories_list v1/categories
		/// </summary>
		/// <param name="filter">Optional. Filter string from user. The only field that supported is `displayName`. Eg: `filter=displayName=foo`.</param>
		/// <param name="languageCode">Required. The BCP 47 code of language.</param>
		/// <param name="pageSize">Optional. How many categories to fetch per page. Default is 100, minimum is 1, and maximum page size is 100.</param>
		/// <param name="pageToken">Optional. If specified, the next page of categories will be fetched.</param>
		/// <param name="regionCode">Required. The ISO 3166-1 alpha-2 country code.</param>
		/// <param name="view">Required. Specifies which parts to the Category resource should be returned in the response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCategoriesResponse> Mybusinessbusinessinformation_categories_listAsync(string filter, string languageCode, int pageSize, string pageToken, string regionCode, Mybusinessbusinessinformation_categories_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/categories?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&regionCode=" + (regionCode==null? "" : System.Uri.EscapeDataString(regionCode))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCategoriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of business categories for the provided language and GConcept ids.
		/// Mybusinessbusinessinformation_categories_batchGet v1/categories:batchGet
		/// </summary>
		/// <param name="languageCode">Required. The BCP 47 code of language that the category names should be returned in.</param>
		/// <param name="names">Required. At least one name must be set. The GConcept ids the localized category names should be returned for. To return details for more than one category, repeat this parameter in the request.</param>
		/// <param name="regionCode">Optional. The ISO 3166-1 alpha-2 country code used to infer non-standard language.</param>
		/// <param name="view">Required. Specifies which parts to the Category resource should be returned in the response.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchGetCategoriesResponse> Mybusinessbusinessinformation_categories_batchGetAsync(string languageCode, string[] names, string regionCode, Mybusinessbusinessinformation_categories_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/categories:batchGet?languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&"+string.Join("&", names.Select(z => $"names={System.Uri.EscapeDataString(z.ToString())}"))+"&regionCode=" + (regionCode==null? "" : System.Uri.EscapeDataString(regionCode))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetCategoriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches the chain based on chain name.
		/// Mybusinessbusinessinformation_chains_search v1/chains:search
		/// </summary>
		/// <param name="chainName">Required. Search for a chain by its name. Exact/partial/fuzzy/related queries are supported. Examples: "walmart", "wal-mart", "walmmmart", "沃尔玛"</param>
		/// <param name="pageSize">The maximum number of matched chains to return from this query. The default is 10. The maximum possible value is 500.</param>
		/// <returns>Successful response</returns>
		public async Task<SearchChainsResponse> Mybusinessbusinessinformation_chains_searchAsync(string chainName, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/chains:search?chainName=" + (chainName==null? "" : System.Uri.EscapeDataString(chainName))+"&pageSize="+pageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchChainsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search all of the possible locations that are a match to the specified request.
		/// Mybusinessbusinessinformation_googleLocations_search v1/googleLocations:search
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SearchGoogleLocationsResponse> Mybusinessbusinessinformation_googleLocations_searchAsync(SearchGoogleLocationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/googleLocations:search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchGoogleLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a location. If this location cannot be deleted using the API and it is marked so in the `google.mybusiness.businessinformation.v1.LocationState`, use the [Google Business Profile](https://business.google.com/manage/) website.
		/// Mybusinessbusinessinformation_locations_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the location to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Mybusinessbusinessinformation_locations_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Looks up all the attributes set for a given location.
		/// Mybusinessbusinessinformation_locations_getAttributes v1/{name}
		/// </summary>
		/// <param name="name">Required. Google identifier for this location in the form of `locations/{location_id}/attributes`.</param>
		/// <returns>Successful response</returns>
		public async Task<Attributes> Mybusinessbusinessinformation_locations_getAttributesAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attributes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update attributes for a given location.
		/// Mybusinessbusinessinformation_locations_updateAttributes v1/{name}
		/// </summary>
		/// <param name="name">Required. Google identifier for this location in the form of `locations/{location_id}/attributes`.</param>
		/// <param name="attributeMask">Required. Attribute name of attributes that you'd like to update. Represented by `attributes/{attribute}`. Updates: All attributes provided in the attributes field that you would like to update must be set in the `attribute_mask`. Attributes set in the above list but not in the `attribute_mask` will be ignored. Deletes: If you'd like to delete certain attributes, they must be specified in the `attribute_mask` with no matching entry in the attributes list. If you'd like to delete all attributes set on a location, you should look up all the applicable attributes for the location and then add them to the `attribute_mask` with an empty attributes field.</param>
		/// <returns>Successful response</returns>
		public async Task<Attributes> Mybusinessbusinessinformation_locations_updateAttributesAsync(string name, string attributeMask, Attributes requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&attributeMask=" + (attributeMask==null? "" : System.Uri.EscapeDataString(attributeMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attributes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the Google-updated version of the specified location.
		/// Mybusinessbusinessinformation_locations_attributes_getGoogleUpdated v1/{name}:getGoogleUpdated
		/// </summary>
		/// <param name="name">Required. Google identifier for this location in the form of `locations/{location_id}/attributes`.</param>
		/// <param name="readMask">Required. Read mask to specify what fields will be returned in the response.</param>
		/// <returns>Successful response</returns>
		public async Task<Attributes> Mybusinessbusinessinformation_locations_attributes_getGoogleUpdatedAsync(string name, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":getGoogleUpdated&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attributes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the locations for the specified account.
		/// Mybusinessbusinessinformation_accounts_locations_list v1/{parent}/locations
		/// </summary>
		/// <param name="parent">Required. The name of the account to fetch locations from. If the parent Account is of AccountType PERSONAL, only Locations that are directly owned by the Account are returned, otherwise it will return all accessible locations from the Account, either directly or indirectly.</param>
		/// <param name="filter">Optional. A filter constraining the locations to return. The response includes only entries that match the filter. If `filter` is empty, then constraints are applied and all locations (paginated) are retrieved for the requested account. For more information about valid fields and example usage, see [Work with Location Data Guide](https://developers.google.com/my-business/content/location-data#filter_results_when_you_list_locations).</param>
		/// <param name="orderBy">Optional. Sorting order for the request. Multiple fields should be comma-separated, following SQL syntax. The default sorting order is ascending. To specify descending order, a suffix " desc" should be added. Valid fields to order_by are title and store_code. For example: "title, store_code desc" or "title" or "store_code desc"</param>
		/// <param name="pageSize">Optional. How many locations to fetch per page. Default value is 10 if not set. Minimum is 1, and maximum page size is 100.</param>
		/// <param name="pageToken">Optional. If specified, it fetches the next `page` of locations. The page token is returned by previous calls to `ListLocations` when there were more locations than could fit in the requested page size.</param>
		/// <param name="readMask">Required. Read mask to specify what fields will be returned in the response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Mybusinessbusinessinformation_accounts_locations_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Location that will be owned by the logged in user.
		/// Mybusinessbusinessinformation_accounts_locations_create v1/{parent}/locations
		/// </summary>
		/// <param name="parent">Required. The name of the account in which to create this location.</param>
		/// <param name="requestId">Optional. A unique request ID for the server to detect duplicated requests. We recommend using UUIDs. Max length is 50 characters.</param>
		/// <param name="validateOnly">Optional. If true, the request is validated without actually creating the location.</param>
		/// <returns>Successful response</returns>
		public async Task<Location> Mybusinessbusinessinformation_accounts_locations_createAsync(string parent, string requestId, bool validateOnly, Location requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/locations&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Location>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Mybusinessbusinessinformation_categories_listView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATEGORY_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
