//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents a single datapoint, where each datapoint is a DailyMetric-DailySubEntityType-TimeSeries tuple.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DailyMetricTimeSeries
	{
		
		/// <summary>
		/// The DailyMetric that the TimeSeries represents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyMetric")]
		public System.Nullable<DailyMetricTimeSeriesDailyMetric> DailyMetric { get; set; }
		
		/// <summary>
		/// Represents all possible subentity types that are associated with DailyMetrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailySubEntityType")]
		public DailySubEntityType DailySubEntityType { get; set; }
		
		/// <summary>
		/// Represents a timeseries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeries")]
		public TimeSeries TimeSeries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DailyMetricTimeSeriesDailyMetric
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY_METRIC_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_IMPRESSIONS_DESKTOP_MAPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_IMPRESSIONS_DESKTOP_SEARCH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_IMPRESSIONS_MOBILE_MAPS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_IMPRESSIONS_MOBILE_SEARCH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_CONVERSATIONS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_DIRECTION_REQUESTS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALL_CLICKS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBSITE_CLICKS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_BOOKINGS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_FOOD_ORDERS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_FOOD_MENU_CLICKS = 11,
	}
	
	/// <summary>
	/// Represents all possible subentity types that are associated with DailyMetrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DailySubEntityType
	{
		
		/// <summary>
		/// Represents the day of the week. Eg: MONDAY. Currently supported DailyMetrics = NONE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public System.Nullable<DailySubEntityTypeDayOfWeek> DayOfWeek { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeOfDay")]
		public TimeOfDay TimeOfDay { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DailySubEntityTypeDayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_WEEK_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUESDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDNESDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THURSDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRIDAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SATURDAY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUNDAY = 7,
	}
	
	/// <summary>
	/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeOfDay
	{
		
		/// <summary>
		/// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// Minutes of hour of day. Must be from 0 to 59.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
		
		/// <summary>
		/// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}
	
	/// <summary>
	/// Represents a timeseries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeSeries
	{
		
		/// <summary>
		/// List of datapoints in the timeseries, where each datapoint is a date-value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datedValues")]
		public DatedValue[] DatedValues { get; set; }
	}
	
	/// <summary>
	/// Represents a single datapoint in the timeseries, where each datapoint is a date-value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatedValue
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// The value of the datapoint. This will not be present when the value is zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// Represents the response for FetchMultiDailyMetricsTimeSeries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchMultiDailyMetricsTimeSeriesResponse
	{
		
		/// <summary>
		/// DailyMetrics and their corresponding time series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiDailyMetricTimeSeries")]
		public MultiDailyMetricTimeSeries[] MultiDailyMetricTimeSeries { get; set; }
	}
	
	/// <summary>
	/// Represents a list of tuples of DailyMetric-DailySubEntityType-TimeSeries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultiDailyMetricTimeSeries
	{
		
		/// <summary>
		/// List of DailyMetric-TimeSeries pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyMetricTimeSeries")]
		public DailyMetricTimeSeries[] DailyMetricTimeSeries { get; set; }
	}
	
	/// <summary>
	/// Represents the response for GetDailyMetricsTimeSeries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDailyMetricsTimeSeriesResponse
	{
		
		/// <summary>
		/// Represents a timeseries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeries")]
		public TimeSeries TimeSeries { get; set; }
	}
	
	/// <summary>
	/// Represents an insights value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsightsValue
	{
		
		/// <summary>
		/// Represents the threshold below which the actual value falls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public string Threshold { get; set; }
		
		/// <summary>
		/// Represents the actual value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents the response for ListSearchKeywordImpressionsMonthly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSearchKeywordImpressionsMonthlyResponse
	{
		
		/// <summary>
		/// A token indicating the last paginated result returned. This can be used by succeeding requests to get the next "page" of keywords. It will only be present when there are more results to be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Search terms which have been used to find a business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchKeywordsCounts")]
		public SearchKeywordCount[] SearchKeywordsCounts { get; set; }
	}
	
	/// <summary>
	/// Represents a single search keyword and its value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchKeywordCount
	{
		
		/// <summary>
		/// Represents an insights value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insightsValue")]
		public InsightsValue InsightsValue { get; set; }
		
		/// <summary>
		/// The lower-cased string that the user entered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchKeyword")]
		public string SearchKeyword { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns the values for each date from a given time range and optionally the sub entity type, where applicable, that are associated with the specific daily metrics. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345:fetchMultiDailyMetricsTimeSeries?dailyMetrics=WEBSITE_CLICKS&dailyMetrics=CALL_CLICKS&daily_range.start_date.year=2022&daily_range.start_date.month=1&daily_range.start_date.day=1&daily_range.end_date.year=2022&daily_range.end_date.month=3&daily_range.end_date.day=31`
		/// Businessprofileperformance_locations_fetchMultiDailyMetricsTimeSeries v1/{location}:fetchMultiDailyMetricsTimeSeries
		/// </summary>
		/// <param name="location">Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id.</param>
		/// <param name="dailyMetrics">Required. The metrics to retrieve time series for.</param>
		/// <param name="dailyRange_endDate_day">Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.</param>
		/// <param name="dailyRange_endDate_month">Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.</param>
		/// <param name="dailyRange_endDate_year">Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.</param>
		/// <param name="dailyRange_startDate_day">Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.</param>
		/// <param name="dailyRange_startDate_month">Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.</param>
		/// <param name="dailyRange_startDate_year">Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.</param>
		/// <returns>Successful response</returns>
		public async Task<FetchMultiDailyMetricsTimeSeriesResponse> Businessprofileperformance_locations_fetchMultiDailyMetricsTimeSeriesAsync(string location, DailyMetricTimeSeriesDailyMetric[] dailyMetrics, int dailyRange_endDate_day, int dailyRange_endDate_month, int dailyRange_endDate_year, int dailyRange_startDate_day, int dailyRange_startDate_month, int dailyRange_startDate_year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (location==null? "" : System.Uri.EscapeDataString(location))+":fetchMultiDailyMetricsTimeSeries&"+string.Join("&", dailyMetrics.Select(z => $"dailyMetrics={z}"))+"&dailyRange.endDate.day="+dailyRange_endDate_day+"&dailyRange.endDate.month="+dailyRange_endDate_month+"&dailyRange.endDate.year="+dailyRange_endDate_year+"&dailyRange.startDate.day="+dailyRange_startDate_day+"&dailyRange.startDate.month="+dailyRange_startDate_month+"&dailyRange.startDate.year="+dailyRange_startDate_year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FetchMultiDailyMetricsTimeSeriesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the values for each date from a given time range that are associated with the specific daily metric. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345:getDailyMetricsTimeSeries?dailyMetric=WEBSITE_CLICKS&daily_range.start_date.year=2022&daily_range.start_date.month=1&daily_range.start_date.day=1&daily_range.end_date.year=2022&daily_range.end_date.month=3&daily_range.end_date.day=31`
		/// Businessprofileperformance_locations_getDailyMetricsTimeSeries v1/{name}:getDailyMetricsTimeSeries
		/// </summary>
		/// <param name="name">Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id.</param>
		/// <param name="dailyMetric">Required. The metric to retrieve time series.</param>
		/// <param name="dailyRange_endDate_day">Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.</param>
		/// <param name="dailyRange_endDate_month">Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.</param>
		/// <param name="dailyRange_endDate_year">Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.</param>
		/// <param name="dailyRange_startDate_day">Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.</param>
		/// <param name="dailyRange_startDate_month">Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.</param>
		/// <param name="dailyRange_startDate_year">Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.</param>
		/// <param name="dailySubEntityType_dayOfWeek">Represents the day of the week. Eg: MONDAY. Currently supported DailyMetrics = NONE.</param>
		/// <param name="dailySubEntityType_timeOfDay_hours">Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.</param>
		/// <param name="dailySubEntityType_timeOfDay_minutes">Minutes of hour of day. Must be from 0 to 59.</param>
		/// <param name="dailySubEntityType_timeOfDay_nanos">Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.</param>
		/// <param name="dailySubEntityType_timeOfDay_seconds">Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.</param>
		/// <returns>Successful response</returns>
		public async Task<GetDailyMetricsTimeSeriesResponse> Businessprofileperformance_locations_getDailyMetricsTimeSeriesAsync(string name, DailyMetricTimeSeriesDailyMetric dailyMetric, int dailyRange_endDate_day, int dailyRange_endDate_month, int dailyRange_endDate_year, int dailyRange_startDate_day, int dailyRange_startDate_month, int dailyRange_startDate_year, DailySubEntityTypeDayOfWeek dailySubEntityType_dayOfWeek, int dailySubEntityType_timeOfDay_hours, int dailySubEntityType_timeOfDay_minutes, int dailySubEntityType_timeOfDay_nanos, int dailySubEntityType_timeOfDay_seconds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":getDailyMetricsTimeSeries&dailyMetric=" + dailyMetric+"&dailyRange.endDate.day="+dailyRange_endDate_day+"&dailyRange.endDate.month="+dailyRange_endDate_month+"&dailyRange.endDate.year="+dailyRange_endDate_year+"&dailyRange.startDate.day="+dailyRange_startDate_day+"&dailyRange.startDate.month="+dailyRange_startDate_month+"&dailyRange.startDate.year="+dailyRange_startDate_year+"&dailySubEntityType.dayOfWeek=" + dailySubEntityType_dayOfWeek+"&dailySubEntityType.timeOfDay.hours="+dailySubEntityType_timeOfDay_hours+"&dailySubEntityType.timeOfDay.minutes="+dailySubEntityType_timeOfDay_minutes+"&dailySubEntityType.timeOfDay.nanos="+dailySubEntityType_timeOfDay_nanos+"&dailySubEntityType.timeOfDay.seconds="+dailySubEntityType_timeOfDay_seconds;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetDailyMetricsTimeSeriesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the search keywords used to find a business in search or maps. Each search keyword is accompanied by impressions which are aggregated on a monthly basis. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345/searchkeywords/impressions/monthly?monthly_range.start_month.year=2022&monthly_range.start_month.month=1&monthly_range.end_month.year=2022&monthly_range.end_month.month=3`
		/// Businessprofileperformance_locations_searchkeywords_impressions_monthly_list v1/{parent}/searchkeywords/impressions/monthly
		/// </summary>
		/// <param name="parent">Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id.</param>
		/// <param name="monthlyRange_endMonth_day">Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.</param>
		/// <param name="monthlyRange_endMonth_month">Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.</param>
		/// <param name="monthlyRange_endMonth_year">Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.</param>
		/// <param name="monthlyRange_startMonth_day">Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.</param>
		/// <param name="monthlyRange_startMonth_month">Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.</param>
		/// <param name="monthlyRange_startMonth_year">Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.</param>
		/// <param name="pageSize">Optional. The number of results requested. The default page size is 100. Page size can be set to a maximum of 100.</param>
		/// <param name="pageToken">Optional. A token indicating the next paginated result to be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSearchKeywordImpressionsMonthlyResponse> Businessprofileperformance_locations_searchkeywords_impressions_monthly_listAsync(string parent, int monthlyRange_endMonth_day, int monthlyRange_endMonth_month, int monthlyRange_endMonth_year, int monthlyRange_startMonth_day, int monthlyRange_startMonth_month, int monthlyRange_startMonth_year, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/searchkeywords/impressions/monthly&monthlyRange.endMonth.day="+monthlyRange_endMonth_day+"&monthlyRange.endMonth.month="+monthlyRange_endMonth_month+"&monthlyRange.endMonth.year="+monthlyRange_endMonth_year+"&monthlyRange.startMonth.day="+monthlyRange_startMonth_day+"&monthlyRange.startMonth.month="+monthlyRange_startMonth_month+"&monthlyRange.startMonth.year="+monthlyRange_startMonth_year+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSearchKeywordImpressionsMonthlyResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
