//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Assignment details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Assignment
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public MediaAttachment[] Attachments { get; set; }
		
		/// <summary>
		/// A Canvas LMS assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canvas")]
		public AssignmentCanvas Canvas { get; set; }
		
		/// <summary>
		/// The unique identifier of the class where this assignment was posted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classroom")]
		public string Classroom { get; set; }
		
		/// <summary>
		/// The URL of the cover to display
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cover")]
		public string Cover { get; set; }
		
		/// <summary>
		/// The id of the cover to display
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverFile")]
		public string CoverFile { get; set; }
		
		/// <summary>
		/// The creation date of this assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The User unique identifier of the creator of this assignment
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public string Creator { get; set; }
		
		/// <summary>
		/// Description and content of the assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The due date of this assignment, late submissions will be marked as
		///paste due.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		/// <summary>
		/// A coursework on Google Classroom
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleClassroom")]
		public GoogleClassroomCoursework GoogleClassroom { get; set; }
		
		/// <summary>
		/// An LTI assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lti")]
		public AssignmentLti Lti { get; set; }
		
		/// <summary>
		/// If set, the grading will be enabled for the assignement
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPoints")]
		public System.Nullable<System.Double> MaxPoints { get; set; }
		
		/// <summary>
		/// A MusicFirst Classroom assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mfc")]
		public AssignmentMfc Mfc { get; set; }
		
		/// <summary>
		/// A Microsoft Teams asignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microsoftGraph")]
		public MicrosoftGraphAssignment MicrosoftGraph { get; set; }
		
		/// <summary>
		/// The publication (scheduled) date of the assignment.
		///If this one is specified, the assignment will only be listed to the teachers of the class.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledDate")]
		public System.Nullable<System.DateTimeOffset> ScheduledDate { get; set; }
		
		/// <summary>
		/// State of the assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AssignmentState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="submissions")]
		public AssignmentSubmission[] Submissions { get; set; }
		
		/// <summary>
		/// Title of the assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Type of the assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AssignmentType> Type { get; set; }
	}
	
	/// <summary>
	/// Media attachment. The API will automatically resolve the details, oEmbed,
	///and media available if possible and return them in this object
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaAttachment
	{
		
		/// <summary>
		/// The resolved author name of the attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorName")]
		public string AuthorName { get; set; }
		
		/// <summary>
		/// The resolved author url of the attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorUrl")]
		public string AuthorUrl { get; set; }
		
		/// <summary>
		/// The resolved description of the attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The ID of the Google Drive File
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleDriveFileId")]
		public string GoogleDriveFileId { get; set; }
		
		/// <summary>
		/// If the attachment type is `rich` or `video`, the HTML code of the
		///media to display
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html")]
		public string Html { get; set; }
		
		/// <summary>
		/// If the `html` is available, the height of the widget
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlHeight")]
		public string HtmlHeight { get; set; }
		
		/// <summary>
		/// If the `html` is available, the width of the widget
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlWidth")]
		public string HtmlWidth { get; set; }
		
		/// <summary>
		/// The URL of the icon
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUrl")]
		public string IconUrl { get; set; }
		
		/// <summary>
		/// To be used with a score attached in `sharingMode` `copy` (score used as template). If true, students won't be able to change the original notes of the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockScoreTemplate")]
		public System.Nullable<System.Boolean> LockScoreTemplate { get; set; }
		
		/// <summary>
		/// The mine type of the file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// An unique revision identifier of a score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		/// <summary>
		/// An unique Flat score identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public string Score { get; set; }
		
		/// <summary>
		/// The sharing mode of the score for classes post and assignments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharingMode")]
		public System.Nullable<MediaAttachmentSharingMode> SharingMode { get; set; }
		
		/// <summary>
		/// If the `thumbnailUrl` is available, the width of the thumbnail
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailHeight")]
		public System.Nullable<System.Int32> ThumbnailHeight { get; set; }
		
		/// <summary>
		/// If the attachment type is `rich`, `video`, `photo` or `link`, a
		///displayable thumbnail for this attachment
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
		
		/// <summary>
		/// If the `thumbnailUrl` is available, the width of the thumbnail
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailWidth")]
		public System.Nullable<System.Int32> ThumbnailWidth { get; set; }
		
		/// <summary>
		/// The resolved title of the attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// A unique track identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track")]
		public string Track { get; set; }
		
		/// <summary>
		/// The type of the assignment resolved:
		///* `rich`, `photo`, `video` are attachment types that are automatically resolved from a `link` attachment.
		///* A `flat` attachment is a score document where the unique identifier will be specified in the `score` property. Its sharing mode will be provided in the `sharingMode` property.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<MediaAttachmentType> Type { get; set; }
		
		/// <summary>
		/// The url of the attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// An unique worksheet identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="worksheet")]
		public string Worksheet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MediaAttachmentSharingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		read = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		write = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		copy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		performance = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MediaAttachmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rich = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		photo = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		video = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		link = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		flat = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		googleDrive = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		worksheet = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		performance = 7,
	}
	
	public class AssignmentCanvas
	{
		
		/// <summary>
		/// Link to Canvas assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// Unique identifier of the course on Canvas assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// A coursework on Google Classroom
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleClassroomCoursework
	{
		
		/// <summary>
		/// Absolute link to this coursework in the Classroom web UI
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// Identifier of the coursework assigned by Classroom
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// State of the coursework
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Identifier of the topic where the assignment is created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicId")]
		public string TopicId { get; set; }
	}
	
	public class AssignmentLti
	{
		
		/// <summary>
		/// Resource ID in the LMS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class AssignmentMfc
	{
		
		/// <summary>
		/// Link to MusicFirst Classroom task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// Unique identifier of the course on MusicFirst Task
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// A Microsoft Teams asignment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MicrosoftGraphAssignment
	{
		
		/// <summary>
		/// Absolute link to this assignement in the Microsoft Teams web UI
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// List of categories where this assignment is published under
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// Identifier of the assignement assigned by Microsoft Teams
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// State of the assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AssignmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		archived = 2,
	}
	
	/// <summary>
	/// Assignment Submission
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssignmentSubmission
	{
		
		/// <summary>
		/// Unique identifier of the assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignment")]
		public string Assignment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public MediaAttachment[] Attachments { get; set; }
		
		/// <summary>
		/// Unique identifier of the classroom where the assignment was posted
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classroom")]
		public string Classroom { get; set; }
		
		/// <summary>
		/// The date when the submission was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public string CreationDate { get; set; }
		
		/// <summary>
		/// The User identifier of the student who created the submission
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public string Creator { get; set; }
		
		/// <summary>
		/// Optional grade. If unset, no grade was set. This value is only visible by the teacher, and we will be set to `grade` once the teacher returns the submission
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="draftGrade")]
		public System.Nullable<System.Double> DraftGrade { get; set; }
		
		/// <summary>
		/// A coursework submission on Google Classroom
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleClassroom")]
		public GoogleClassroomSubmission GoogleClassroom { get; set; }
		
		/// <summary>
		/// Optional grade. If unset, no grade was set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grade")]
		public System.Nullable<System.Double> Grade { get; set; }
		
		/// <summary>
		/// Unique identifier of the submission
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Optional max points for the grade. If set, a corresponding `draftGrade` or `grade` will be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPoints")]
		public System.Nullable<System.Double> MaxPoints { get; set; }
		
		/// <summary>
		/// A Microsoft Teams submission
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microsoftGraph")]
		public MicrosoftGraphSubmission MicrosoftGraph { get; set; }
		
		/// <summary>
		/// The User unique identifier of the teacher who returned the submission
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnCreator")]
		public string ReturnCreator { get; set; }
		
		/// <summary>
		/// The date when the teacher returned the work
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnDate")]
		public string ReturnDate { get; set; }
		
		/// <summary>
		/// State of the submission
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AssignmentSubmissionState> State { get; set; }
		
		/// <summary>
		/// The date when the student submitted his work
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submissionDate")]
		public string SubmissionDate { get; set; }
	}
	
	/// <summary>
	/// A coursework submission on Google Classroom
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleClassroomSubmission
	{
		
		/// <summary>
		/// Absolute link to this coursework in the Classroom web UI
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// Identifier of the coursework submission assigned by Classroom
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// State of the submission on Google Classroom
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	/// <summary>
	/// A Microsoft Teams submission
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MicrosoftGraphSubmission
	{
		
		/// <summary>
		/// Absolute link to this submission in the Microsoft Teams web UI
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// Identifier of the submission assigned by Microsoft Teams
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// State of the submission
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AssignmentSubmissionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		turnedIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		returned = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AssignmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		newScore = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scoreTemplate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sharedWriting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		worksheet = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		performance = 5,
	}
	
	/// <summary>
	/// Assignment copy operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssignmentCopy
	{
		
		/// <summary>
		/// An optional destination assignment where the original assignement will be copied. Must be a draft.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignment")]
		public string Assignment { get; set; }
		
		/// <summary>
		/// The destination classroom where the assignment will be copied
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classroom")]
		public string Classroom { get; set; }
		
		/// <summary>
		/// The publication (scheduled) date of the assignment.
		///If this one is specified, the assignment will only be listed to the teachers of the class.
		///Alternatively the existing `scheduledDate` from the copied assignment will be used.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledDate")]
		public System.Nullable<System.DateTimeOffset> ScheduledDate { get; set; }
	}
	
	/// <summary>
	/// Assignment creation details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssignmentCreation
	{
		
		/// <summary>
		/// Identifiers for the students that have access to the assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedStudents")]
		public string[] AssignedStudents { get; set; }
		
		/// <summary>
		/// Possible modes of assigning assignments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assigneeMode")]
		public System.Nullable<AssignmentCreationAssigneeMode> AssigneeMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public ClassAttachmentCreation[] Attachments { get; set; }
		
		/// <summary>
		/// The URL of the cover to display
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cover")]
		public string Cover { get; set; }
		
		/// <summary>
		/// The id of the cover to display
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverFile")]
		public string CoverFile { get; set; }
		
		/// <summary>
		/// Description and content of the assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The due date of this assignment, late submissions will be marked as paste due. If not set, the assignment won't have a due date.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		/// <summary>
		/// Google Classroom options for this assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleClassroom")]
		public AssignmentCreationGoogleClassroom GoogleClassroom { get; set; }
		
		/// <summary>
		/// If set, the grading will be enabled for the assignement with this value as the maximum of points
		///
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPoints")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> MaxPoints { get; set; }
		
		/// <summary>
		/// Microsoft Graph options for this assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microsoftGraph")]
		public AssignmentCreationMicrosoftGraph MicrosoftGraph { get; set; }
		
		/// <summary>
		/// The number of playback authorized on the scores of the assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nbPlaybackAuthorized")]
		public System.Nullable<System.Double> NbPlaybackAuthorized { get; set; }
		
		/// <summary>
		/// The publication (scheduled) date of the assignment.
		///If this one is specified, the assignment will only be listed to the teachers of the class.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledDate")]
		public System.Nullable<System.DateTimeOffset> ScheduledDate { get; set; }
		
		/// <summary>
		/// State of the assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AssignmentCreationState> State { get; set; }
		
		/// <summary>
		/// Title of the assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The id of the associated toolset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toolset")]
		public string Toolset { get; set; }
		
		/// <summary>
		/// Type of the assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AssignmentType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AssignmentCreationAssigneeMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		everyone = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		selected = 1,
	}
	
	/// <summary>
	/// Attachment creation for an assignment or stream post.
	///This attachment must contain a `score` or an `url`, all the details of this one will be resolved and returned as `ClassAttachment` once the assignment or stream post is created.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClassAttachmentCreation
	{
		
		/// <summary>
		/// The ID of the Google Drive File
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleDriveFileId")]
		public string GoogleDriveFileId { get; set; }
		
		/// <summary>
		/// To be used with a score attached in `sharingMode` `copy` (score used as template). If true, students won't be able to change the original notes of the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockScoreTemplate")]
		public System.Nullable<System.Boolean> LockScoreTemplate { get; set; }
		
		/// <summary>
		/// A unique Flat score identifier. The user creating the assignment must at least have read access to the document. If the user has admin rights, new group permissions will be automatically added for the
		///teachers and students of the class.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public string Score { get; set; }
		
		/// <summary>
		/// The sharing mode of the score for classes post and assignments
		/// </summary>
		[System.ComponentModel.DefaultValue(MediaAttachmentSharingMode.read)]
		[System.Runtime.Serialization.DataMember(Name="sharingMode")]
		public MediaAttachmentSharingMode SharingMode { get; set; } = MediaAttachmentSharingMode.read;
		
		/// <summary>
		/// The type of the attachment posted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ClassAttachmentCreationType> Type { get; set; }
		
		/// <summary>
		/// The URL of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// An unique worksheet identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="worksheet")]
		public string Worksheet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ClassAttachmentCreationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		flat = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		link = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		googleDrive = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		worksheet = 3,
	}
	
	public class AssignmentCreationGoogleClassroom
	{
		
		/// <summary>
		/// Identifier of the topic where the assignment is created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicId")]
		public string TopicId { get; set; }
	}
	
	public class AssignmentCreationMicrosoftGraph
	{
		
		/// <summary>
		/// List of categories this assignment belongs to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AssignmentCreationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 1,
	}
	
	/// <summary>
	/// Feedback comment added to an assignment submission
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssignmentSubmissionComment
	{
		
		/// <summary>
		/// The comment text
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// The date when the comment was posted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// The comment unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The date of the last comment modification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modificationDate")]
		public System.Nullable<System.DateTimeOffset> ModificationDate { get; set; }
		
		/// <summary>
		/// The submission unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submission")]
		public string Submission { get; set; }
		
		/// <summary>
		/// True if the comment is unread by the current user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unread")]
		public System.Nullable<System.Boolean> Unread { get; set; }
		
		/// <summary>
		/// The author unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	/// <summary>
	/// Creation of a assignment submission comment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssignmentSubmissionCommentCreation
	{
		
		/// <summary>
		/// The comment text
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
	}
	
	/// <summary>
	/// History item of the submission
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssignmentSubmissionHistory
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachment")]
		public AssignmentSubmissionHistoryAttachment Attachment { get; set; }
		
		/// <summary>
		/// The date when the submission was changed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// The numerator of the grade at this time in the submission grade history
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="draftGrade")]
		public System.Nullable<System.Double> DraftGrade { get; set; }
		
		/// <summary>
		/// The numerator of the grade at this time in the submission grade history
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grade")]
		public System.Nullable<System.Double> Grade { get; set; }
		
		/// <summary>
		/// The denominator of the grade at this time in the submission grade history
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPoints")]
		public System.Nullable<System.Double> MaxPoints { get; set; }
		
		/// <summary>
		/// State of the submission
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public AssignmentSubmissionState State { get; set; }
		
		/// <summary>
		/// The user(s) unique identifier(s) who made the change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public string[] Users { get; set; }
	}
	
	public class AssignmentSubmissionHistoryAttachment
	{
		
		/// <summary>
		/// The revision identifier that changed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		/// <summary>
		/// The score identifier that changed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public string Score { get; set; }
	}
	
	/// <summary>
	/// Assignment Submission creation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssignmentSubmissionUpdate
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public ClassAttachmentCreation[] Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public AssignmentSubmissionUpdateComments Comments { get; set; }
		
		/// <summary>
		/// Optional grade. If unset, no grade was set. This value is only visible by the teacher, and we will be set to `grade` once the teacher returns the submission
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="draftGrade")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> DraftGrade { get; set; }
		
		/// <summary>
		/// Optional grade. If unset, no grade was set.
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grade")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Grade { get; set; }
		
		/// <summary>
		/// If `true`, the submission will be marked as done
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="return")]
		public System.Nullable<System.Boolean> Return { get; set; }
		
		/// <summary>
		/// If `true`, the submission will be marked as done
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submit")]
		public System.Nullable<System.Boolean> Submit { get; set; }
	}
	
	public class AssignmentSubmissionUpdateComments
	{
		
		/// <summary>
		/// The total number of comments added to the submission
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// The number of unread comments for the current user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unread")]
		public System.Nullable<System.Double> Unread { get; set; }
	}
	
	/// <summary>
	/// Creation of a classroom
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClassCreation
	{
		
		/// <summary>
		/// The name of the new class
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The section of the new class
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="section")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Section { get; set; }
	}
	
	/// <summary>
	/// A classroom
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClassDetails
	{
		
		/// <summary>
		/// The number of assignments created in the class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignmentsCount")]
		public System.Nullable<System.Double> AssignmentsCount { get; set; }
		
		/// <summary>
		/// Meta information provided by Canvs LMS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canvas")]
		public ClassDetailsCanvas Canvas { get; set; }
		
		/// <summary>
		/// Clever.com section-related information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clever")]
		public ClassDetailsClever Clever { get; set; }
		
		/// <summary>
		/// The date when the class was create
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// An optionnal description for this class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// [Teachers only] The enrollment code that can be used by the students to join the class
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrollmentCode")]
		public string EnrollmentCode { get; set; }
		
		/// <summary>
		/// Google Classroom course-related information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleClassroom")]
		public ClassDetailsGoogleClassroom GoogleClassroom { get; set; }
		
		/// <summary>
		/// Google Drive course-related information provided by Google Classroom
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleDrive")]
		public ClassDetailsGoogleDrive GoogleDrive { get; set; }
		
		/// <summary>
		/// The unique identifier of the class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Detected issues for this class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public ClassDetailsIssues Issues { get; set; }
		
		/// <summary>
		/// Meta information provided by the LTI consumer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lti")]
		public ClassDetailsLti Lti { get; set; }
		
		/// <summary>
		/// Meta information provided by Canvs LMS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mfc")]
		public ClassDetailsMfc Mfc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="microsoftGraph")]
		public ClassDetailsMicrosoftGraph MicrosoftGraph { get; set; }
		
		/// <summary>
		/// The name of the class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique identifier of the Organization owning this class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// The unique identifier of the User owning this class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// The section of the class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="section")]
		public string Section { get; set; }
		
		/// <summary>
		/// The state of a classroom
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ClassDetailsState> State { get; set; }
		
		/// <summary>
		/// The details of a group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="studentsGroup")]
		public GroupDetails StudentsGroup { get; set; }
		
		/// <summary>
		/// The details of a group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teachersGroup")]
		public GroupDetails TeachersGroup { get; set; }
		
		/// <summary>
		/// The theme identifier using in Flat User Interface
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public string Theme { get; set; }
	}
	
	public class ClassDetailsCanvas
	{
		
		/// <summary>
		/// Canvas instance domain (e.g. "canvas.instructure.com")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Unique identifier of the course on Canvas
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class ClassDetailsClever
	{
		
		/// <summary>
		/// The creation date of the section on clever
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Clever section unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last modification date of the section on clever
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modificationDate")]
		public System.Nullable<System.DateTimeOffset> ModificationDate { get; set; }
		
		/// <summary>
		/// Normalized subject of the course
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public System.Nullable<ClassDetailsCleverSubject> Subject { get; set; }
		
		/// <summary>
		/// End date of the term
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termEndDate")]
		public System.Nullable<System.DateTimeOffset> TermEndDate { get; set; }
		
		/// <summary>
		/// Name of the term when this course happens
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termName")]
		public string TermName { get; set; }
		
		/// <summary>
		/// Beginning date of the term
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termStartDate")]
		public System.Nullable<System.DateTimeOffset> TermStartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ClassDetailsCleverSubject
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="english/language arts")]
		english_language_arts = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		math = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		science = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="social studies")]
		social_studies = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		language = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="homeroom/advisory")]
		homeroom_advisory = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="interventions/online learning")]
		interventions_online_learning = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="technology and engineering")]
		technology_and_engineering = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PE and health")]
		PE_and_health = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="arts and music")]
		arts_and_music = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 10,
	}
	
	public class ClassDetailsGoogleClassroom
	{
		
		/// <summary>
		/// Absolute link to this course in the Classroom web UI
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// The course identifier on Google Classroom
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class ClassDetailsGoogleDrive
	{
		
		/// <summary>
		/// [Teachers only] The Drive URL of the teachers' folder
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teacherFolderAlternateLink")]
		public string TeacherFolderAlternateLink { get; set; }
		
		/// <summary>
		/// [Teachers only] The Drive directory identifier of the teachers' folder
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teacherFolderId")]
		public string TeacherFolderId { get; set; }
	}
	
	public class ClassDetailsIssues
	{
		
		/// <summary>
		/// Synchronization issues for the class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sync")]
		public ClassDetailsIssuesSync[] ClassDetailsIssuesSync { get; set; }
	}
	
	public class ClassDetailsIssuesSync
	{
		
		/// <summary>
		/// The email address of the user concerned by this sync issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The account user identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The reason why the account cannot be synced
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<ClassDetailsIssuesSyncReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ClassDetailsIssuesSyncReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		otherOrgnanization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		personalSubscription = 1,
	}
	
	public class ClassDetailsLti
	{
		
		/// <summary>
		/// Unique context identifier provided
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contextId")]
		public string ContextId { get; set; }
		
		/// <summary>
		/// Context label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contextLabel")]
		public string ContextLabel { get; set; }
		
		/// <summary>
		/// Context title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contextTitle")]
		public string ContextTitle { get; set; }
	}
	
	public class ClassDetailsMfc
	{
		
		/// <summary>
		/// Link to MusicFirst Classroom class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// Unique identifier of the course on MusicFirst Classroom
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class ClassDetailsMicrosoftGraph
	{
		
		/// <summary>
		/// The course identifier on Microsoft Graph
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ClassDetailsState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inactive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		archived = 2,
	}
	
	/// <summary>
	/// The details of a group
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupDetails
	{
		
		/// <summary>
		/// The date when the group was create
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The unique identifier of the group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The displayable name of the group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique identifier of the Organization owning the group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// `true` if the properties and members of this group are in in read-only
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// The type of the group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GroupDetailsType> Type { get; set; }
		
		/// <summary>
		/// The number of students in this group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usersCount")]
		public System.Nullable<System.Double> UsersCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GroupDetailsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		generic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		classTeachers = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		classStudents = 2,
	}
	
	/// <summary>
	/// User's Class Role (for Edu users only)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ClassRoles
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		teacher = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		student = 1,
	}
	
	/// <summary>
	/// The state of a classroom
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ClassState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inactive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		archived = 2,
	}
	
	/// <summary>
	/// Update of a classroom
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClassUpdate
	{
		
		/// <summary>
		/// The name of the class
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The section of the class
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="section")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Section { get; set; }
	}
	
	/// <summary>
	/// Collection of scores
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Collection
	{
		
		/// <summary>
		/// If this directory is dedicated to an app, the unique idenfier of this app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="app")]
		public string App { get; set; }
		
		/// <summary>
		/// Capabilities the current user has on this collection. Each capability corresponds to a fine-grained action that a user may take.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public CollectionCapabilities Capabilities { get; set; }
		
		/// <summary>
		/// The list of the collaborators of the collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collaborators")]
		public ResourceCollaborator[] Collaborators { get; set; }
		
		/// <summary>
		/// The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collections")]
		public string[] Collections { get; set; }
		
		/// <summary>
		/// The date when the collection was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The url where the collection can be viewed in a web browser
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlUrl")]
		public string HtmlUrl { get; set; }
		
		/// <summary>
		/// Unique identifier of the collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The collection main privacy mode.
		///- `private`: The collection is private and can be only accessed, modified and administred by specified collaborators users.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<CollectionPrivacy> Privacy { get; set; }
		
		/// <summary>
		/// The rights of the current user on a score or collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rights")]
		public ResourceRights Rights { get; set; }
		
		/// <summary>
		/// The private sharing key of the collection (available when the `privacy` mode is set to `privateLink`)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharingKey")]
		public string SharingKey { get; set; }
		
		/// <summary>
		/// The title of the collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Type of the collection.
		///The type will influence the capabilitied available on the collections and how this collection is/can be populated.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CollectionType> Type { get; set; }
		
		/// <summary>
		/// Public User details summary
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserPublicSummary User { get; set; }
	}
	
	public class CollectionCapabilities
	{
		
		/// <summary>
		/// Whether the current user can add scores to the collection
		///
		///If this collection has the `type` `trash`, this property will be set to `false`. Use `DELETE /v2/scores/{score}` to trash a score.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canAddScores")]
		public System.Nullable<System.Boolean> CanAddScores { get; set; }
		
		/// <summary>
		/// Whether the current user can delete the collection
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDelete")]
		public System.Nullable<System.Boolean> CanDelete { get; set; }
		
		/// <summary>
		/// Whether the current user can delete scores from the collection
		///
		///If this collection has the `type` `trash`, this property will be set to `false`. Use `POST /v2/scores/{score}/untrash` to restore a score.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDeleteScores")]
		public System.Nullable<System.Boolean> CanDeleteScores { get; set; }
		
		/// <summary>
		/// Whether the current user can modify the metadata for the collection
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canEdit")]
		public System.Nullable<System.Boolean> CanEdit { get; set; }
		
		/// <summary>
		/// Whether the current user can modify the sharing settings for the collection
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canShare")]
		public System.Nullable<System.Boolean> CanShare { get; set; }
	}
	
	/// <summary>
	/// A collaborator of a score. The `userEmail` and `group` are only available if the requesting user is a collaborator of the related score (in this case these permissions will eventualy not be listed and exposed publicly).
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceCollaborator : ResourceRights
	{
		
		/// <summary>
		/// If this object is a permission of a collection, this property will contain the unique identifier of the collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public string Collection { get; set; }
		
		/// <summary>
		/// A group of users
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public Group Group { get; set; }
		
		/// <summary>
		/// The unique identifier of the permission
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If this property is `true`, this is still a pending invitation
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invited")]
		public System.Nullable<System.Boolean> Invited { get; set; }
		
		/// <summary>
		/// If this object is a permission of a score, this property will contain the unique identifier of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public string Score { get; set; }
		
		/// <summary>
		/// Public User details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserPublic User { get; set; }
		
		/// <summary>
		/// If the collaborator is not a user of Flat yet, this field will contain his email.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
	}
	
	/// <summary>
	/// A group of users
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Group
	{
		
		/// <summary>
		/// The creation date of the group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The unique identifier of the group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The display name of the group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If the group is related to an organization, this field will contain
		///the unique identifier of the organization
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// `True` if the group is set in read-only
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// The type of the group:
		///* `generic`: A group created by a Flat user
		///* `classTeachers`: A group created automaticaly by Flat that contains
		///  the teachers of a class
		///* `classStudents`: A group created automaticaly by Flat that contains
		///  the studnets of a class
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GroupDetailsType Type { get; set; }
		
		/// <summary>
		/// The number of users in this group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usersCount")]
		public System.Nullable<System.Double> UsersCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CollectionPrivacy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 0,
	}
	
	/// <summary>
	/// The rights of the current user on a score or collection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceRights
	{
		
		/// <summary>
		/// `True` if the current user can manage the current document (i.e. share, delete)
		///
		///If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aclAdmin")]
		public System.Nullable<System.Boolean> AclAdmin { get; set; }
		
		/// <summary>
		/// `True` if the current user can read the current document
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aclRead")]
		public System.Nullable<System.Boolean> AclRead { get; set; }
		
		/// <summary>
		/// `True` if the current user can modify the current document.
		///
		///If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aclWrite")]
		public System.Nullable<System.Boolean> AclWrite { get; set; }
		
		/// <summary>
		/// `True` if the current user is a collaborator of the current document (direct or via group).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCollaborator")]
		public System.Nullable<System.Boolean> IsCollaborator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CollectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		root = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		regular = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sharedWithMe = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sharedWithGroup = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		trash = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectionCreation
	{
		
		/// <summary>
		/// The collection main privacy mode.
		///- `private`: The collection is private and can be only accessed, modified and administred by specified collaborators users.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public CollectionCreationPrivacy Privacy { get; set; }
		
		/// <summary>
		/// The title of the collection
		/// Required
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CollectionCreationPrivacy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 0,
	}
	
	/// <summary>
	/// Edit the collection metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectionModification
	{
		
		/// <summary>
		/// The collection main privacy mode.
		///- `private`: The collection is private and can be only accessed, modified and administred by specified collaborators users.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<CollectionModificationPrivacy> Privacy { get; set; }
		
		/// <summary>
		/// The title of the collection
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CollectionModificationPrivacy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 0,
	}
	
	/// <summary>
	/// An API Error response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlatErrorResponse
	{
		
		/// <summary>
		/// A corresponding code for this error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// An unique error identifier generated for the request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A printable message for this message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The related parameter that caused the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="param")]
		public string Param { get; set; }
	}
	
	/// <summary>
	/// The user language
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FlatLocales
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pl = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR")]
		ptMinusBR = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ro = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sv = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-Hans")]
		zhMinusHans = 16,
	}
	
	/// <summary>
	/// The type of the group
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		generic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		classTeachers = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		classStudents = 2,
	}
	
	/// <summary>
	/// Mode of the license
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LicenseMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		credit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		site = 1,
	}
	
	/// <summary>
	/// Source of the license
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LicenseSources
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		order = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		trial = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		voucher = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		distributor = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subscription = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		appStore = 5,
	}
	
	/// <summary>
	/// LMS name
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LmsName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		canvas = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		moodle = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		schoology = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blackboard = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desire2learn = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sakai = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		schoolbox = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 7,
	}
	
	/// <summary>
	/// A couple of LTI 1.x OAuth credentials
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LtiCredentials
	{
		
		/// <summary>
		/// OAuth 1 Consumer Key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerKey")]
		public string ConsumerKey { get; set; }
		
		/// <summary>
		/// OAuth 1 Consumer Secret
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerSecret")]
		public string ConsumerSecret { get; set; }
		
		/// <summary>
		/// The creation date of thse credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Unique identifier of the user who created these credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public string Creator { get; set; }
		
		/// <summary>
		/// The unique identifier of this couple of credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last time these credentials were used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUsage")]
		public System.Nullable<System.DateTimeOffset> LastUsage { get; set; }
		
		/// <summary>
		/// LMS name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lms")]
		public LmsName Lms { get; set; }
		
		/// <summary>
		/// Name of the couple of credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique identifier of the Organization associated to these credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
	}
	
	/// <summary>
	/// Creation of a couple of LTI 1.x OAuth credentials
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LtiCredentialsCreation
	{
		
		/// <summary>
		/// LMS name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lms")]
		public LmsName Lms { get; set; }
		
		/// <summary>
		/// Name of the couple of credentials
		/// Required
		/// Max length: 300
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The sharing mode of the score for classes post and assignments
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MediaScoreSharingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		read = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		write = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		copy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		performance = 3,
	}
	
	/// <summary>
	/// Details of an invitation to join an organization
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationInvitation
	{
		
		/// <summary>
		/// Enrollment code to use when joining this organization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customCode")]
		public string CustomCode { get; set; }
		
		/// <summary>
		/// The email address this invitation was sent to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The invitation unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The unique identifier of the User who created this invitation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitedBy")]
		public string InvitedBy { get; set; }
		
		/// <summary>
		/// The unique identifier of the Organization owning this class
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// User's Organization Role (for Edu users only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationRole")]
		public System.Nullable<OrganizationInvitationOrganizationRole> OrganizationRole { get; set; }
		
		/// <summary>
		/// The unique identifier of the User who used this invitation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usedBy")]
		public string UsedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrganizationInvitationOrganizationRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		admin = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		billing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		teacher = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 3,
	}
	
	/// <summary>
	/// The parameters to create an organization invitation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationInvitationCreation
	{
		
		/// <summary>
		/// The email address you want to send the invitation to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// User's Organization Role (for Edu users only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationRole")]
		public OrganizationInvitationOrganizationRole OrganizationRole { get; set; }
	}
	
	/// <summary>
	/// User's Organization Role (for Edu users only)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrganizationRoles
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		admin = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		billing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		teacher = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 3,
	}
	
	/// <summary>
	/// Add a collaborator to a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceCollaboratorCreation
	{
		
		/// <summary>
		/// `True` if the related user can can manage the current document, i.e. changing the document permissions and deleting the document
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aclAdmin")]
		public System.Nullable<System.Boolean> AclAdmin { get; set; }
		
		/// <summary>
		/// `True` if the related user can read the score. (probably true if the user has a permission on the document).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aclRead")]
		public System.Nullable<System.Boolean> AclRead { get; set; }
		
		/// <summary>
		/// `True` if the related user can modify the score.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aclWrite")]
		public System.Nullable<System.Boolean> AclWrite { get; set; }
		
		/// <summary>
		/// The unique identifier of a Flat group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public string Group { get; set; }
		
		/// <summary>
		/// The unique identifier of a Flat user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
		
		/// <summary>
		/// Fill this field to invite an individual user by email.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
		
		/// <summary>
		/// Token received in an invitation to join the score.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userToken")]
		public string UserToken { get; set; }
	}
	
	/// <summary>
	/// Comment added on a sheet music
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreComment
	{
		
		/// <summary>
		/// The comment text that can includes mentions using the following
		///format: `@[id:username]`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public ScoreCommentContext Context { get; set; }
		
		/// <summary>
		/// The date when the comment was posted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// The comment unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The list of user identifier mentioned on the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mentions")]
		public string[] Mentions { get; set; }
		
		/// <summary>
		/// The date of the last comment modification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modificationDate")]
		public System.Nullable<System.DateTimeOffset> ModificationDate { get; set; }
		
		/// <summary>
		/// A raw version of the comment, that can be displayed without parsing
		///the mentions.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawComment")]
		public string RawComment { get; set; }
		
		/// <summary>
		/// When the comment is a reply to another comment, the unique identifier of the parent comment
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replyTo")]
		public string ReplyTo { get; set; }
		
		/// <summary>
		/// For inline comments, the comment can be marked as resolved and will be hidden in the future responses
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolved")]
		public System.Nullable<System.Boolean> Resolved { get; set; }
		
		/// <summary>
		/// If the user is marked as resolved, this will contain the unique identifier of the User who marked this comment as resolved
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedBy")]
		public string ResolvedBy { get; set; }
		
		/// <summary>
		/// The unique identifier of revision the comment was posted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		/// <summary>
		/// The unique identifier of the score where the comment was posted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public string Score { get; set; }
		
		/// <summary>
		/// `true  if the message has been detected as spam and hidden from other users
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spam")]
		public System.Nullable<System.Boolean> Spam { get; set; }
		
		/// <summary>
		/// The type of the comment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ScoreCommentType> Type { get; set; }
		
		/// <summary>
		/// The author unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	/// <summary>
	/// The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position).
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreCommentContext
	{
		
		/// <summary>
		/// The list of measure UUIds
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="measureUuids")]
		public string[] MeasureUuids { get; set; }
		
		/// <summary>
		/// The unique identifier (UUID) of the score part
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partUuid")]
		public string PartUuid { get; set; }
		
		/// <summary>
		/// (Deprecated, use `staffUuid`) The identififer of the staff
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staffIdx")]
		public System.Nullable<System.Double> StaffIdx { get; set; }
		
		/// <summary>
		/// The unique identififer (UUID) of the staff
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staffUuid")]
		public string StaffUuid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDpq")]
		public double StartDpq { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTimePos")]
		public double StartTimePos { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stopDpq")]
		public double StopDpq { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stopTimePos")]
		public double StopTimePos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScoreCommentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		document = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inline = 1,
	}
	
	/// <summary>
	/// Creation of a comment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreCommentCreation
	{
		
		/// <summary>
		/// The comment text that can includes mentions using the following format: `@[id:username]`.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public ScoreCommentContext Context { get; set; }
		
		/// <summary>
		/// The list of user identifiers mentioned in this comment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mentions")]
		public string[] Mentions { get; set; }
		
		/// <summary>
		/// A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawComment")]
		public string RawComment { get; set; }
		
		/// <summary>
		/// When the comment is a reply to another comment, the unique identifier of the parent comment
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replyTo")]
		public string ReplyTo { get; set; }
		
		/// <summary>
		/// The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains "last", the API will automatically take the last revision created.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
	}
	
	/// <summary>
	/// Update of a comment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreCommentUpdate
	{
		
		/// <summary>
		/// The comment text that can includes mentions using the following format: `@[id:username]`.
		///
		/// Max length: 10000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string Comment { get; set; }
		
		/// <summary>
		/// The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public ScoreCommentContext Context { get; set; }
		
		/// <summary>
		/// A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set.
		///
		/// Max length: 10000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawComment")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string RawComment { get; set; }
		
		/// <summary>
		/// The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains "last", the API will automatically take the last revision created.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
	}
	
	/// <summary>
	/// A computed version of the total, unique, weekly and monthly number of
	///comments added on the documents (this doesn't include inline comments).
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreCommentsCounts
	{
		
		/// <summary>
		/// The monthly unique number of comments added to the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthly")]
		public System.Nullable<System.Double> Monthly { get; set; }
		
		/// <summary>
		/// The total number of comments added to the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// The unique (1/user) number of comments added to the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unique")]
		public System.Nullable<System.Double> Unique { get; set; }
		
		/// <summary>
		/// The weekly unique number of comments added to the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weekly")]
		public System.Nullable<System.Double> Weekly { get; set; }
	}
	
	/// <summary>
	/// A new created score
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreCreation
	{
		
		/// <summary>
		/// Unique identifier of a collection where the score will be created.
		///If no collection identifier is provided, the score will be stored in the `root` directory.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public string Collection { get; set; }
		
		/// <summary>
		/// The data of the score file. It must be a MusicXML 3 file (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI file (`audio/midi`) or a Flat.json (aka Adagio.json) file.
		///Binary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be encoded in Base64, in this case the `dataEncoding` property must match the encoding used for the API request.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// The optional encoding of the score data. This property must match the encoding used for the `data` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataEncoding")]
		public System.Nullable<ScoreCreationDataEncoding> DataEncoding { get; set; }
		
		/// <summary>
		/// If this is an imported file, its filename
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// If the user uses Google Drive and this properties is specified, the file will be created in this directory. The currently user creating the file must be granted to write in this directory.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleDriveFolder")]
		public string GoogleDriveFolder { get; set; }
		
		/// <summary>
		/// The score main privacy mode.
		///
		///- `public`: The score is public on the Internet. This one can be accessible at the url `https://flat.io/score/{score}` and can be modified and administred by specified collaborators users.
		///- `private`: The score is private and can be only accessed, modified and administred by specified collaborators users.
		///- `privateLink`: The score is private but can be accessed using a private link `htmlUrl` or the private key in the property `sharingKey`.
		///- `organizationPublic`: _Available only with [Flat for Education](https://flat.io/edu)._ The score is public in the organization: users of the same organization can access to this one. The score can be modified and administred by specified collaborators users.
		///
		///The score can also be individually shared to a set of users or groups using the different collaborators API methods.
		///
		///When a file is synchronized from an external source (e.g. Google Drive) and the sharing options are changed on the source, Flat will chose the best privacy mode for the file.
		///
		///When using a [Flat for Education](https://flat.io/edu) account, some of the modes may not be available if disabled by an administrator of the organization (e.g. by default the `public` mode is not available).
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public ScoreCreationPrivacy Privacy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ScoreSource Source { get; set; }
		
		/// <summary>
		/// The title of the new score. If the title is too long, the API may trim this one.
		///
		///If this title is not specified, the API will try to (in this order):
		///  - Use the title contained in the file (e.g. [`movement-title`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-movement-title.htm) or [`credit-words`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-credit-words.htm) for [MusicXML](http://www.musicxml.com/) files).
		///  - Use the name of the file for files from a specified `source` (e.g. Google Drive) or the one in the `filename` property
		///  - Set a default title (e.g. "New Music Score")
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScoreCreationDataEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		base64 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScoreCreationPrivacy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		organizationPublic = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		privateLink = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreSource
	{
		
		/// <summary>
		/// If the score is a file on Google Drive, this field property must contain its identifier. To use this method, the Drive file must be public or the Flat Drive App must have access to the file.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleDrive")]
		public string GoogleDrive { get; set; }
	}
	
	/// <summary>
	/// The type of creation (an orginal, an arrangement)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScoreCreationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		original = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		arrangement = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 2,
	}
	
	/// <summary>
	/// The score and all its details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreDetails : ScoreSummary
	{
		
		/// <summary>
		/// Arranger of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arranger")]
		public string Arranger { get; set; }
		
		/// <summary>
		/// The list of the collaborators of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collaborators")]
		public ResourceCollaborator[] Collaborators { get; set; }
		
		/// <summary>
		/// The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collections")]
		public string[] Collections { get; set; }
		
		/// <summary>
		/// A computed version of the total, unique, weekly and monthly number of
		///comments added on the documents (this doesn't include inline comments).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public ScoreCommentsCounts Comments { get; set; }
		
		/// <summary>
		/// Composer of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="composer")]
		public string Composer { get; set; }
		
		/// <summary>
		/// The date when the score was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The type of creation (an orginal, an arrangement)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationType")]
		public ScoreCreationType CreationType { get; set; }
		
		/// <summary>
		/// Description of the creation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// In seconds, an approximative duration of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationTime")]
		public System.Nullable<System.Double> DurationTime { get; set; }
		
		/// <summary>
		/// If the user uses Google Drive and the score exists on Google Drive, this field will contain the unique identifier of the Flat score on Google Drive. You can access the document using the url: `https://drive.google.com/open?id={googleDriveFileId}`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleDriveFileId")]
		public string GoogleDriveFileId { get; set; }
		
		/// <summary>
		/// An array of the instrument identifiers used in the last version of the score. This is mainly used to display a list of the instruments in the Flat's UI or instruments icons. The format of the strings is `{instrument-group}.{instrument-id}`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instruments")]
		public string[] Instruments { get; set; }
		
		/// <summary>
		/// License of the creation. Read more about the Creative Commons licenses on https://creativecommons.org/licenses/
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license")]
		public System.Nullable<ScoreDetailsLicense> License { get; set; }
		
		/// <summary>
		/// Additional license text written on the exported/printed score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenseText")]
		public string LicenseText { get; set; }
		
		/// <summary>
		/// A computed version of the weekly, monthly and total of number of likes
		///for a score
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="likes")]
		public ScoreLikesCounts Likes { get; set; }
		
		/// <summary>
		/// Lyricist of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lyricist")]
		public string Lyricist { get; set; }
		
		/// <summary>
		/// The main tempo of the score (in QPM)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainTempoQpm")]
		public System.Nullable<System.Double> MainTempoQpm { get; set; }
		
		/// <summary>
		/// The date of the last revision of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modificationDate")]
		public System.Nullable<System.DateTimeOffset> ModificationDate { get; set; }
		
		/// <summary>
		/// The number of measures in the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberMeasures")]
		public System.Nullable<System.Int32> NumberMeasures { get; set; }
		
		/// <summary>
		/// If the score has been created in an organization, the identifier of this organization. This property is especially used with the score privacy `organizationPublic`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// If the score has been forked, the unique identifier of the parent score.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentScore")]
		public string ParentScore { get; set; }
		
		/// <summary>
		/// A computed version of the total, weekly, and monthly number of plays of
		///the score
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plays")]
		public ScorePlaysCounts Plays { get; set; }
		
		/// <summary>
		/// The date when the score was published on Flat
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicationDate")]
		public System.Nullable<System.DateTimeOffset> PublicationDate { get; set; }
		
		/// <summary>
		/// The rights of the current user on a score or collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rights")]
		public ResourceRights Rights { get; set; }
		
		/// <summary>
		/// An array of the audio samples identifiers used the different score parts.
		///The format of the strings is `{instrument-group}.{sample-id}`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samples")]
		public string[] Samples { get; set; }
		
		/// <summary>
		/// Subtitle of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		/// <summary>
		/// Tags describing the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// A computed version of the total, weekly, and monthly number of views of
		///the score
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="views")]
		public ScoreViewsCounts Views { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScoreDetailsLicense
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		copyright = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cc0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by")]
		ccMinusby = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-sa")]
		ccMinusbyMinussa = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-nd")]
		ccMinusbyMinusnd = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-nc")]
		ccMinusbyMinusnc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-nc-sa")]
		ccMinusbyMinusncMinussa = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-nc-nd")]
		ccMinusbyMinusncMinusnd = 7,
	}
	
	/// <summary>
	/// A computed version of the weekly, monthly and total of number of likes
	///for a score
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreLikesCounts
	{
		
		/// <summary>
		/// The number of new likes during the last month
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthly")]
		public System.Nullable<System.Double> Monthly { get; set; }
		
		/// <summary>
		/// The total number of likes of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// The number of new likes during the last week
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weekly")]
		public System.Nullable<System.Double> Weekly { get; set; }
	}
	
	/// <summary>
	/// A computed version of the total, weekly, and monthly number of plays of
	///the score
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScorePlaysCounts
	{
		
		/// <summary>
		/// The monthly number of plays of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthly")]
		public System.Nullable<System.Double> Monthly { get; set; }
		
		/// <summary>
		/// The total number of plays of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// The weekly number of plays of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weekly")]
		public System.Nullable<System.Double> Weekly { get; set; }
	}
	
	/// <summary>
	/// A computed version of the total, weekly, and monthly number of views of
	///the score
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreViewsCounts
	{
		
		/// <summary>
		/// The monthly number of views of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthly")]
		public System.Nullable<System.Double> Monthly { get; set; }
		
		/// <summary>
		/// The total number of views of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// The weekly number of views of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weekly")]
		public System.Nullable<System.Double> Weekly { get; set; }
	}
	
	/// <summary>
	/// Options to fork the score
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreFork
	{
		
		/// <summary>
		/// Unique identifier of a collection where the score will be copied.
		///If no collection identifier is provided, the score will be stored in the `root` directory.
		///
		/// </summary>
		[System.ComponentModel.DefaultValue("root")]
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public string Collection { get; set; } = "root";
	}
	
	/// <summary>
	/// License of the creation. Read more about the Creative Commons licenses on https://creativecommons.org/licenses/
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScoreLicense
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		copyright = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cc0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by")]
		ccMinusby = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-sa")]
		ccMinusbyMinussa = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-nd")]
		ccMinusbyMinusnd = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-nc")]
		ccMinusbyMinusnc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-nc-sa")]
		ccMinusbyMinusncMinussa = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-nc-nd")]
		ccMinusbyMinusncMinusnd = 7,
	}
	
	/// <summary>
	/// Edit the score metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreModification
	{
		
		/// <summary>
		/// The arranger of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arranger")]
		public string Arranger { get; set; }
		
		/// <summary>
		/// The composer of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="composer")]
		public string Composer { get; set; }
		
		/// <summary>
		/// The type of creation (an orginal, an arrangement)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationType")]
		public ScoreCreationType CreationType { get; set; }
		
		/// <summary>
		/// Description of the creation
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string Description { get; set; }
		
		/// <summary>
		/// License of the creation. Read more about the Creative Commons licenses on https://creativecommons.org/licenses/
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license")]
		public System.Nullable<ScoreModificationLicense> License { get; set; }
		
		/// <summary>
		/// The rights info written on the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenseText")]
		public string LicenseText { get; set; }
		
		/// <summary>
		/// The lyricist of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lyricist")]
		public string Lyricist { get; set; }
		
		/// <summary>
		/// The score main privacy mode.
		///
		///- `public`: The score is public on the Internet. This one can be accessible at the url `https://flat.io/score/{score}` and can be modified and administred by specified collaborators users.
		///- `private`: The score is private and can be only accessed, modified and administred by specified collaborators users.
		///- `privateLink`: The score is private but can be accessed using a private link `htmlUrl` or the private key in the property `sharingKey`.
		///- `organizationPublic`: _Available only with [Flat for Education](https://flat.io/edu)._ The score is public in the organization: users of the same organization can access to this one. The score can be modified and administred by specified collaborators users.
		///
		///The score can also be individually shared to a set of users or groups using the different collaborators API methods.
		///
		///When a file is synchronized from an external source (e.g. Google Drive) and the sharing options are changed on the source, Flat will chose the best privacy mode for the file.
		///
		///When using a [Flat for Education](https://flat.io/edu) account, some of the modes may not be available if disabled by an administrator of the organization (e.g. by default the `public` mode is not available).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<ScoreModificationPrivacy> Privacy { get; set; }
		
		/// <summary>
		/// When using the `privacy` mode `privateLink`, this property can be used to set a custom sharing key, otherwise a new key will be generated.
		/// Pattern: ^[a-f0-9]{128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharingKey")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-f0-9]{128}$")]
		public string SharingKey { get; set; }
		
		/// <summary>
		/// The subtitle of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		/// <summary>
		/// Tags describing the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// The title of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScoreModificationLicense
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		copyright = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cc0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by")]
		ccMinusby = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-sa")]
		ccMinusbyMinussa = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-nd")]
		ccMinusbyMinusnd = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-nc")]
		ccMinusbyMinusnc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-nc-sa")]
		ccMinusbyMinusncMinussa = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cc-by-nc-nd")]
		ccMinusbyMinusncMinusnd = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScoreModificationPrivacy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		organizationPublic = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		privateLink = 3,
	}
	
	/// <summary>
	/// The score main privacy mode.
	///
	///- `public`: The score is public on the Internet. This one can be accessible at the url `https://flat.io/score/{score}` and can be modified and administred by specified collaborators users.
	///- `private`: The score is private and can be only accessed, modified and administred by specified collaborators users.
	///- `privateLink`: The score is private but can be accessed using a private link `htmlUrl` or the private key in the property `sharingKey`.
	///- `organizationPublic`: _Available only with [Flat for Education](https://flat.io/edu)._ The score is public in the organization: users of the same organization can access to this one. The score can be modified and administred by specified collaborators users.
	///
	///The score can also be individually shared to a set of users or groups using the different collaborators API methods.
	///
	///When a file is synchronized from an external source (e.g. Google Drive) and the sharing options are changed on the source, Flat will chose the best privacy mode for the file.
	///
	///When using a [Flat for Education](https://flat.io/edu) account, some of the modes may not be available if disabled by an administrator of the organization (e.g. by default the `public` mode is not available).
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScorePrivacy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		organizationPublic = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		privateLink = 3,
	}
	
	/// <summary>
	/// A score revision metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreRevision
	{
		
		/// <summary>
		/// True if this revision was automatically generated by Flat and not on
		///purpose by the user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autosave")]
		public System.Nullable<System.Boolean> Autosave { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collaborators")]
		public string[] Collaborators { get; set; }
		
		/// <summary>
		/// The date when this revision was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// A description associated to the revision
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The last event (action id) of the revision
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public string Event { get; set; }
		
		/// <summary>
		/// The unique identifier of the revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The statistics related to the score revision (additions and deletions)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public ScoreRevisionStatistics Statistics { get; set; }
		
		/// <summary>
		/// The user identifier who created the revision
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	/// <summary>
	/// The statistics related to the score revision (additions and deletions)
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreRevisionStatistics
	{
		
		/// <summary>
		/// The number of additions operations in the last revision
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additions")]
		public System.Nullable<System.Double> Additions { get; set; }
		
		/// <summary>
		/// The number of deletions operations in the last revision
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletions")]
		public System.Nullable<System.Double> Deletions { get; set; }
	}
	
	/// <summary>
	/// A new created revision
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreRevisionCreation
	{
		
		/// <summary>
		/// Must be set to `true` if the revision was created automatically.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autosave")]
		public System.Nullable<System.Boolean> Autosave { get; set; }
		
		/// <summary>
		/// The data of the score file. It must be a MusicXML 3 file (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI file (`audio/midi`) or a Flat.json (aka Adagio.json) file.
		///Binary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be encoded in Base64, in this case the `dataEncoding` property must match the encoding used for the API request.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// The optional encoding of the score data. This property must match the encoding used for the `data` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataEncoding")]
		public ScoreCreationDataEncoding DataEncoding { get; set; }
		
		/// <summary>
		/// A description associated to the revision
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// A summary of the score details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreSummary
	{
		
		/// <summary>
		/// The url where the score can be viewed in a web browser
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlUrl")]
		public string HtmlUrl { get; set; }
		
		/// <summary>
		/// The unique identifier of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The score main privacy mode.
		///
		///- `public`: The score is public on the Internet. This one can be accessible at the url `https://flat.io/score/{score}` and can be modified and administred by specified collaborators users.
		///- `private`: The score is private and can be only accessed, modified and administred by specified collaborators users.
		///- `privateLink`: The score is private but can be accessed using a private link `htmlUrl` or the private key in the property `sharingKey`.
		///- `organizationPublic`: _Available only with [Flat for Education](https://flat.io/edu)._ The score is public in the organization: users of the same organization can access to this one. The score can be modified and administred by specified collaborators users.
		///
		///The score can also be individually shared to a set of users or groups using the different collaborators API methods.
		///
		///When a file is synchronized from an external source (e.g. Google Drive) and the sharing options are changed on the source, Flat will chose the best privacy mode for the file.
		///
		///When using a [Flat for Education](https://flat.io/edu) account, some of the modes may not be available if disabled by an administrator of the organization (e.g. by default the `public` mode is not available).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<ScoreSummaryPrivacy> Privacy { get; set; }
		
		/// <summary>
		/// The private sharing key of the score (available when the `privacy` mode is set to `privateLink`)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharingKey")]
		public string SharingKey { get; set; }
		
		/// <summary>
		/// The title of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Public User details summary
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserPublicSummary User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScoreSummaryPrivacy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		organizationPublic = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		privateLink = 3,
	}
	
	/// <summary>
	/// An audio track for a score
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreTrack
	{
		
		/// <summary>
		/// The creation date of the track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The unique identifier of the track creator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public string Creator { get; set; }
		
		/// <summary>
		/// True if the track should be used as default audio source
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		/// <summary>
		/// The unique identifier of the score track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The unique identifier of the track when hosted on an external service.
		///For example, if the url is `https://www.youtube.com/watch?v=dQw4w9WgXcQ`, `mediaId` will be `dQw4w9WgXcQ`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaId")]
		public string MediaId { get; set; }
		
		/// <summary>
		/// The modification date of the track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modificationDate")]
		public System.Nullable<System.DateTimeOffset> ModificationDate { get; set; }
		
		/// <summary>
		/// The unique identifier of the score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public string Score { get; set; }
		
		/// <summary>
		/// State of the track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ScoreTrackState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="synchronizationPoints")]
		public ScoreTrackPoint[] SynchronizationPoints { get; set; }
		
		/// <summary>
		/// Title of the track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of an audio track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ScoreTrackType> Type { get; set; }
		
		/// <summary>
		/// The URL of the track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScoreTrackState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 2,
	}
	
	/// <summary>
	/// A track synchronization point
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreTrackPoint
	{
		
		/// <summary>
		/// The measure unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measureUuid")]
		public string MeasureUuid { get; set; }
		
		/// <summary>
		/// The corresponding time in seconds
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="time")]
		public double Time { get; set; }
		
		/// <summary>
		/// The type of the synchronization point. If the type is `measure`, the measure uuid must be present in `measureUuid`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ScoreTrackPointType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScoreTrackPointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		measure = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		end = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScoreTrackType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		audio = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		soundcloud = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		youtube = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vimeo = 3,
	}
	
	/// <summary>
	/// Creation of a new track. This one must contain the URL of the track or the corresponding file
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreTrackCreation
	{
		
		/// <summary>
		/// True if the track should be used as default audio source
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		/// <summary>
		/// State of the track
		/// </summary>
		[System.ComponentModel.DefaultValue(ScoreTrackState.draft)]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ScoreTrackState State { get; set; } = ScoreTrackState.draft;
		
		[System.Runtime.Serialization.DataMember(Name="synchronizationPoints")]
		public ScoreTrackPoint[] SynchronizationPoints { get; set; }
		
		/// <summary>
		/// Title of the track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The URL of the track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Update an existing track.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScoreTrackUpdate
	{
		
		/// <summary>
		/// True if the track should be used as default audio source
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		/// <summary>
		/// State of the track
		/// </summary>
		[System.ComponentModel.DefaultValue(ScoreTrackState.draft)]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ScoreTrackState State { get; set; } = ScoreTrackState.draft;
		
		[System.Runtime.Serialization.DataMember(Name="synchronizationPoints")]
		public ScoreTrackPoint[] SynchronizationPoints { get; set; }
		
		/// <summary>
		/// Title of the track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// User update as an organization admin
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserAdminUpdate
	{
		
		/// <summary>
		/// Email of the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// First name of the user
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Firstname { get; set; }
		
		/// <summary>
		/// Last name of the user
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Lastname { get; set; }
		
		/// <summary>
		/// User's Organization Role (for Edu users only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationRole")]
		public OrganizationInvitationOrganizationRole OrganizationRole { get; set; }
		
		/// <summary>
		/// Password of the account
		/// Max length: 1000
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Password { get; set; }
		
		/// <summary>
		/// Username of the account
		/// Max length: 30
		/// Min length: 1
		/// Pattern: ^[A-Za-z0-9\-_.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9\-_.]+$")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserBasics
	{
		
		/// <summary>
		/// Firstname of the user (for education users)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		/// <summary>
		/// The user unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Will be 'true' if user is part of the Flat Team
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFlatTeam")]
		public System.Nullable<System.Boolean> IsFlatTeam { get; set; }
		
		/// <summary>
		/// User license status. 'true' if user is an individual Power user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPowerUser")]
		public System.Nullable<System.Boolean> IsPowerUser { get; set; }
		
		/// <summary>
		/// Lastname of the user (for education users)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		/// <summary>
		/// A displayable name for the user (for consumer users)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL of the picture to display
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public string Picture { get; set; }
		
		/// <summary>
		/// The name that can be directly printed (name, firstname & lastname, or username)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printableName")]
		public string PrintableName { get; set; }
		
		/// <summary>
		/// The type of user account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<UserBasicsType> Type { get; set; }
		
		/// <summary>
		/// The user name (unique for the organization)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserBasicsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		guest = 1,
	}
	
	/// <summary>
	/// User creation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserCreation
	{
		
		/// <summary>
		/// Email of the new account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// First name of the user
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Firstname { get; set; }
		
		/// <summary>
		/// Last name of the user
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Lastname { get; set; }
		
		/// <summary>
		/// The user language
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public System.Nullable<UserCreationLocale> Locale { get; set; }
		
		/// <summary>
		/// Password of the new account
		/// Required
		/// Max length: 1000
		/// Min length: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Password { get; set; }
		
		/// <summary>
		/// Username of the new account
		/// Required
		/// Max length: 30
		/// Min length: 1
		/// Pattern: ^[A-Za-z0-9\-_.]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9\-_.]+$")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserCreationLocale
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pl = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR")]
		ptMinusBR = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ro = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sv = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-Hans")]
		zhMinusHans = 16,
	}
	
	/// <summary>
	/// User details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserDetails : UserPublic
	{
		
		/// <summary>
		/// The ID of the user profile cover picture
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverPictureFile")]
		public string CoverPictureFile { get; set; }
		
		/// <summary>
		/// Identifier of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The user language
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public System.Nullable<UserDetailsLocale> Locale { get; set; }
		
		/// <summary>
		/// The ID of the user profile picture
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pictureFile")]
		public string PictureFile { get; set; }
		
		/// <summary>
		/// Tell either this user profile is private or not (individual accounts only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateProfile")]
		public System.Nullable<System.Boolean> PrivateProfile { get; set; }
		
		/// <summary>
		/// The type of account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public UserBasicsType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserDetailsLocale
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pl = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR")]
		ptMinusBR = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ro = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sv = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-Hans")]
		zhMinusHans = 16,
	}
	
	/// <summary>
	/// User details (view for organization teacher / admin)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserDetailsAdmin : UserPublicSummary
	{
		
		/// <summary>
		/// Email of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Date of the last user activity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastActivityDate")]
		public System.Nullable<System.DateTimeOffset> LastActivityDate { get; set; }
		
		/// <summary>
		/// Current active license of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license")]
		public UserDetailsAdminLicense License { get; set; }
	}
	
	public class UserDetailsAdminLicense
	{
		
		/// <summary>
		/// ID of the current license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Date when the license expires
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// ID of the current license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Mode of the license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public LicenseMode Mode { get; set; }
		
		/// <summary>
		/// Source of the license
		/// </summary>
		[System.ComponentModel.DefaultValue(LicenseSources.order)]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public LicenseSources Source { get; set; } = LicenseSources.order;
	}
	
	/// <summary>
	/// Public User details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserPublic : UserPublicSummary
	{
		
		/// <summary>
		/// User's biography
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bio")]
		public string Bio { get; set; }
		
		/// <summary>
		/// Cover picture (backgroud) for the profile
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverPicture")]
		public string CoverPicture { get; set; }
		
		/// <summary>
		/// Number of followers the user have
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followersCount")]
		public System.Nullable<System.Int32> FollowersCount { get; set; }
		
		/// <summary>
		/// Number of people the user follow
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followingCount")]
		public System.Nullable<System.Int32> FollowingCount { get; set; }
		
		/// <summary>
		/// An array of the instrument identifiers.
		///The format of the strings is `{instrument-group}.{instrument-id}`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instruments")]
		public string[] Instruments { get; set; }
		
		/// <summary>
		/// Number of the scores liked by the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="likedScoresCount")]
		public System.Nullable<System.Int32> LikedScoresCount { get; set; }
		
		/// <summary>
		/// Number of public scores the user have
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownedPublicScoresCount")]
		public System.Nullable<System.Int32> OwnedPublicScoresCount { get; set; }
		
		/// <summary>
		/// Theme (background) for the profile
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileTheme")]
		public string ProfileTheme { get; set; }
		
		/// <summary>
		/// Date the user signed up
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registrationDate")]
		public System.Nullable<System.DateTimeOffset> RegistrationDate { get; set; }
	}
	
	/// <summary>
	/// Public User details summary
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserPublicSummary : UserBasics
	{
		
		/// <summary>
		/// User's Class Role (for Edu users only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classRole")]
		public ClassRoles ClassRole { get; set; }
		
		/// <summary>
		/// Link to user profile (for Indiv. users only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlUrl")]
		public string HtmlUrl { get; set; }
		
		/// <summary>
		/// Organization ID (for Edu users only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// User's Organization Role (for Edu users only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationRole")]
		public OrganizationInvitationOrganizationRole OrganizationRole { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List the classes available for the current user
		/// ListClasses classes
		/// </summary>
		/// <param name="state">Filter the classes by state</param>
		/// <returns>The list of classes</returns>
		public async Task<ClassDetails[]> ListClassesAsync(ClassDetailsState state, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes?state=" + state;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClassDetails[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new class
		/// Classrooms on Flat allow you to create activities with assignments and post content to a specific group.
		/// 
		/// When creating a class, Flat automatically creates two groups: one for the teachers of the course, one for the students. The creator of this class is automatically added to the teachers group.
		/// 
		/// If the classsroom is synchronized with another application like Google Classroom, some of the meta information will automatically be updated.
		/// 
		/// You can add users to this class using `PUT /classes/{class}/users/{user}`, they will automatically added to the group based on their role on Flat. Users can also enroll themselves to this class using `POST /classes/enroll/{enrollmentCode}` and the `enrollmentCode` returned in the `ClassDetails` response.
		/// 
		/// CreateClass classes
		/// </summary>
		/// <returns>The new class details</returns>
		public async Task<ClassDetails> CreateClassAsync(ClassCreation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClassDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Join a class
		/// Use this method to join a class using an enrollment code given one of the teacher of this class. This code is also available in the `ClassDetails` returned to the teachers when creating the class or listing / fetching a specific class.
		/// 
		/// Flat will automatically add the user to the corresponding class group based on this role in the organization.
		/// 
		/// EnrollClass classes/enroll/{enrollmentCode}
		/// </summary>
		/// <returns>The new class details</returns>
		public async Task<ClassDetails> EnrollClassAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/enroll/{enrollmentCode}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClassDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the details of a single class
		/// GetClass classes/{class}
		/// </summary>
		/// <returns>The new class details</returns>
		public async Task<ClassDetails> GetClassAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClassDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the class
		/// Update the meta information of the class
		/// 
		/// UpdateClass classes/{class}
		/// </summary>
		/// <param name="requestBody">Details of the Class</param>
		/// <returns>The new class details</returns>
		public async Task<ClassDetails> UpdateClassAsync(ClassUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClassDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Activate the class
		/// Mark the class as `active`. This is mainly used for classes synchronized from Clever that are initially with an `inactive` state and hidden in the UI.
		/// 
		/// ActivateClass classes/{class}/activate
		/// </summary>
		/// <returns>The class details</returns>
		public async Task<ClassDetails> ActivateClassAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/activate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClassDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unarchive the class
		/// Mark the class as `active`. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated.
		/// 
		/// UnarchiveClass classes/{class}/archive
		/// </summary>
		/// <returns>The class details</returns>
		public async Task<ClassDetails> UnarchiveClassAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/archive";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClassDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Archive the class
		/// Mark the class as `archived`. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated.
		/// 
		/// ArchiveClass classes/{class}/archive
		/// </summary>
		/// <returns>The class details</returns>
		public async Task<ClassDetails> ArchiveClassAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/archive";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClassDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assignments listing
		/// ListAssignments classes/{class}/assignments
		/// </summary>
		/// <returns>List of assignments for the class</returns>
		public async Task<Assignment[]> ListAssignmentsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Assignment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assignment creation
		/// Use this method as a teacher to create and post a new assignment to a class.
		/// 
		/// If the class is synchronized with Google Classroom, the assignment will be automatically posted to your Classroom course.
		/// 
		/// CreateAssignment classes/{class}/assignments
		/// </summary>
		/// <returns>The assignment has been created</returns>
		public async Task<Assignment> CreateAssignmentAsync(AssignmentCreation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Assignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unarchive the assignment.
		/// Mark the assignment as `active`.
		/// 
		/// UnarchiveAssignment classes/{class}/assignments/{assignment}/archive
		/// </summary>
		/// <returns>The assignment details</returns>
		public async Task<Assignment> UnarchiveAssignmentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/{assignment}/archive";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Assignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Archive the assignment
		/// Archive the assignment
		/// 
		/// ArchiveAssignment classes/{class}/assignments/{assignment}/archive
		/// </summary>
		/// <returns>The assignment details</returns>
		public async Task<Assignment> ArchiveAssignmentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/{assignment}/archive";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Assignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Copy an assignment
		/// Copy an assignment to a specified class.
		/// 
		/// If the original assignment has a due date in the past, this new assingment will be created without a due date.
		/// 
		/// If the new class is synchronized with an external app (e.g. Google Classroom), the copied assignment will also be posted on the external app.
		/// 
		/// CopyAssignment classes/{class}/assignments/{assignment}/copy
		/// </summary>
		/// <returns>The new created assingment</returns>
		public async Task<Assignment> CopyAssignmentAsync(AssignmentCopy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/{assignment}/copy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Assignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the students' submissions
		/// GetSubmissions classes/{class}/assignments/{assignment}/submissions
		/// </summary>
		/// <returns>The submissions</returns>
		public async Task<AssignmentSubmission[]> GetSubmissionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/{assignment}/submissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssignmentSubmission[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or edit a submission
		/// Use this method as a student to create, update and submit a submission related to an assignment.
		/// Students can only set `attachments` and `submit`.
		/// Teachers can use `PUT /classes/{class}/assignments/{assignment}/submissions/{submission}` to update a submission by id.
		/// 
		/// CreateSubmission classes/{class}/assignments/{assignment}/submissions
		/// </summary>
		/// <returns>The submission</returns>
		public async Task<AssignmentSubmission> CreateSubmissionAsync(AssignmentSubmissionUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/{assignment}/submissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssignmentSubmission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CSV Grades exports
		/// Export list of submissions grades to a CSV file
		/// ExportSubmissionsReviewsAsCsv classes/{class}/assignments/{assignment}/submissions/csv
		/// </summary>
		/// <returns>List of submissions</returns>
		public async Task ExportSubmissionsReviewsAsCsvAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/{assignment}/submissions/csv";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Excel Grades exports
		/// Export list of submissions grades to an Excel file
		/// ExportSubmissionsReviewsAsExcel classes/{class}/assignments/{assignment}/submissions/excel
		/// </summary>
		/// <returns>List of submissions</returns>
		public async Task ExportSubmissionsReviewsAsExcelAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/{assignment}/submissions/excel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a submission
		/// Use this method as a teacher to delete a submission and allow student to start over the assignment
		/// 
		/// DeleteSubmission classes/{class}/assignments/{assignment}/submissions/{submission}
		/// </summary>
		/// <param name="_class">Unique identifier of the class</param>
		/// <param name="assignment">Unique identifier of the assignment</param>
		/// <param name="submission">Unique identifier of the submission</param>
		public async Task DeleteSubmissionAsync(string _class, string assignment, string submission, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/"+ (assignment==null? "" : System.Uri.EscapeDataString(assignment))+"/submissions/"+ (submission==null? "" : System.Uri.EscapeDataString(submission));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a student submission
		/// GetSubmission classes/{class}/assignments/{assignment}/submissions/{submission}
		/// </summary>
		/// <returns>A submission</returns>
		public async Task<AssignmentSubmission> GetSubmissionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/{assignment}/submissions/{submission}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssignmentSubmission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit a submission
		/// Use this method as a teacher to update the different submission and give feedback.
		/// Teachers can only set `return`, `draftGrade` and `grade`
		/// 
		/// EditSubmission classes/{class}/assignments/{assignment}/submissions/{submission}
		/// </summary>
		/// <returns>The submission</returns>
		public async Task<AssignmentSubmission> EditSubmissionAsync(AssignmentSubmissionUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/{assignment}/submissions/{submission}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssignmentSubmission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the feedback comments of a submission
		/// GetSubmissionComments classes/{class}/assignments/{assignment}/submissions/{submission}/comments
		/// </summary>
		/// <returns>The comments of the score</returns>
		public async Task<AssignmentSubmissionComment[]> GetSubmissionCommentsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/{assignment}/submissions/{submission}/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssignmentSubmissionComment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a feedback comment to a submission
		/// PostSubmissionComment classes/{class}/assignments/{assignment}/submissions/{submission}/comments
		/// </summary>
		/// <returns>The comment</returns>
		public async Task<AssignmentSubmissionComment> PostSubmissionCommentAsync(AssignmentSubmissionCommentCreation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/{assignment}/submissions/{submission}/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssignmentSubmissionComment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a feedback comment to a submission
		/// DeleteSubmissionComment classes/{class}/assignments/{assignment}/submissions/{submission}/comments/{comment}
		/// </summary>
		public async Task DeleteSubmissionCommentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/{assignment}/submissions/{submission}/comments/{comment}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a feedback comment to a submission
		/// UpdateSubmissionComment classes/{class}/assignments/{assignment}/submissions/{submission}/comments/{comment}
		/// </summary>
		/// <returns>The comment</returns>
		public async Task<AssignmentSubmissionComment> UpdateSubmissionCommentAsync(AssignmentSubmissionCommentCreation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/{assignment}/submissions/{submission}/comments/{comment}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssignmentSubmissionComment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the history of the submission
		/// For teachers only. Returns a detailed history of the submission. This currently includes state and grade histories.
		/// 
		/// GetSubmissionHistory classes/{class}/assignments/{assignment}/submissions/{submission}/history
		/// </summary>
		/// <returns>The history of the submission</returns>
		public async Task<AssignmentSubmissionHistory[]> GetSubmissionHistoryAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/assignments/{assignment}/submissions/{submission}/history";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssignmentSubmissionHistory[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the submissions for a student
		/// Use this method as a teacher to list all the assignment submissions sent by a student of the class
		/// 
		/// ListClassStudentSubmissions classes/{class}/students/{user}/submissions
		/// </summary>
		/// <returns>The list of submissions</returns>
		public async Task<AssignmentSubmission[]> ListClassStudentSubmissionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/students/{user}/submissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssignmentSubmission[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a user from the class
		/// This method can be used by a teacher to remove a user from the class, or by a student to leave the classroom.
		/// 
		/// Warning: Removing a user from the class will remove the associated resources, including the submissions and feedback related to these submissions.
		/// 
		/// DeleteClassUser classes/{class}/users/{user}
		/// </summary>
		public async Task DeleteClassUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/users/{user}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a user to the class
		/// This method can be used by a teacher of the class to enroll another Flat user into the class.
		/// 
		/// Only users that are part of your Organization can be enrolled in a class of this same Organization.
		/// 
		/// When enrolling a user in the class, Flat will automatically add this user to the corresponding Class group, based on this role in the Organization.
		/// 
		/// AddClassUser classes/{class}/users/{user}
		/// </summary>
		public async Task AddClassUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classes/{class}/users/{user}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the collections
		/// Use this method to list the user's collections contained in `parent` (by default in the `root` collection).
		/// If no sort option is provided, the collections are sorted by `creationDate` `desc`.
		/// 
		/// Note that this method will not include the `parent` collection in the listing.
		/// For example, if you need the details of the `root` collection, you can use `GET /v2/collections/root`.
		/// 
		/// ListCollections collections
		/// </summary>
		/// <param name="parent">List the collection contained in this `parent` collection.
		///
		///This option doesn't provide a complete multi-level collection support.
		///When sharing a collection with someone, this one will have as `parent` `sharedWithMe`.
		///</param>
		/// <param name="sort">Sort</param>
		/// <param name="direction">Sort direction</param>
		/// <param name="limit">This is the maximum number of objects that may be returned</param>
		/// <param name="next">An opaque string cursor to fetch the next page of data.
		///The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
		///</param>
		/// <param name="previous">An opaque string cursor to fetch the previous page of data.
		///The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
		///</param>
		/// <returns>List of collections</returns>
		public async Task<Collection[]> ListCollectionsAsync(string parent, ListCollectionsSort sort, ListCollectionsDirection direction, int limit, string next, string previous, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections?parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent))+"&sort=" + sort+"&direction=" + direction+"&limit="+limit+"&next=" + (next==null? "" : System.Uri.EscapeDataString(next))+"&previous=" + (previous==null? "" : System.Uri.EscapeDataString(previous));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Collection[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new collection
		/// This method will create a new collection and add it to your `root` collection.
		/// 
		/// CreateCollection collections
		/// </summary>
		/// <returns>Collection created</returns>
		public async Task<Collection> CreateCollectionAsync(CollectionCreation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Collection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the collection
		/// This method will schedule the deletion of the collection. Until deleted, the collection will be available in the `trash`.
		/// 
		/// DeleteCollection collections/{collection}
		/// </summary>
		public async Task DeleteCollectionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/{collection}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get collection details
		/// GetCollection collections/{collection}
		/// </summary>
		/// <param name="sharingKey">This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.
		///</param>
		/// <returns>Collection details</returns>
		public async Task<Collection> GetCollectionAsync(string sharingKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/{collection}?sharingKey=" + (sharingKey==null? "" : System.Uri.EscapeDataString(sharingKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Collection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a collection's metadata
		/// EditCollection collections/{collection}
		/// </summary>
		/// <returns>Collection details</returns>
		public async Task<Collection> EditCollectionAsync(CollectionModification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/{collection}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Collection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the scores contained in a collection
		/// Use this method to list the scores contained in a collection.
		/// If no sort option is provided, the scores are sorted by `modificationDate` `desc`.
		/// 
		/// ListCollectionScores collections/{collection}/scores
		/// </summary>
		/// <param name="sort">Sort</param>
		/// <param name="direction">Sort direction</param>
		/// <param name="limit">This is the maximum number of objects that may be returned</param>
		/// <param name="next">An opaque string cursor to fetch the next page of data.
		///The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
		///</param>
		/// <param name="previous">An opaque string cursor to fetch the previous page of data.
		///The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
		///</param>
		/// <returns>List of scores</returns>
		public async Task<ScoreDetails[]> ListCollectionScoresAsync(ListCollectionScoresSort sort, ListCollectionsDirection direction, int limit, string next, string previous, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/{collection}/scores?sort=" + sort+"&direction=" + direction+"&limit="+limit+"&next=" + (next==null? "" : System.Uri.EscapeDataString(next))+"&previous=" + (previous==null? "" : System.Uri.EscapeDataString(previous));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreDetails[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a score from the collection
		/// This method will delete a score from the collection. Unlike [`DELETE /scores/{score}`](#operation/deleteScore), this score will not remove the score from your account, but only from the collection.
		/// This can be used to *move* a score from one collection to another, or simply remove a score from one collection when this one is contained in multiple collections.
		/// 
		/// DeleteScoreFromCollection collections/{collection}/scores/{score}
		/// </summary>
		public async Task DeleteScoreFromCollectionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/{collection}/scores/{score}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a score to the collection
		/// This operation will add a score to a collection. The default behavior will make the score available across multiple collections.
		/// You must have the capability `canAddScores` on the provided `collection` to perform the action.
		/// 
		/// AddScoreToCollection collections/{collection}/scores/{score}
		/// </summary>
		/// <returns>Score details</returns>
		public async Task<ScoreDetails> AddScoreToCollectionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/{collection}/scores/{score}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Untrash a collection
		/// This method will restore the collection by removing it from the `trash` and add it back to the `root` collection.
		/// 
		/// UntrashCollection collections/{collection}/untrash
		/// </summary>
		public async Task UntrashCollectionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/{collection}/untrash";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get group information
		/// GetGroupDetails groups/{group}
		/// </summary>
		/// <returns>The group details</returns>
		public async Task<GroupDetails> GetGroupDetailsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/{group}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GroupDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List group's scores
		/// Get the list of scores shared with a group.
		/// 
		/// GetGroupScores groups/{group}/scores
		/// </summary>
		/// <param name="parent">Filter the score forked from the score id `parent`</param>
		/// <returns>The group's scores</returns>
		public async Task<ScoreDetails[]> GetGroupScoresAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/{group}/scores?parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreDetails[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List group's users
		/// ListGroupUsers groups/{group}/users
		/// </summary>
		/// <param name="source">Filter the users by their source
		///</param>
		/// <returns>The list of users member of the group</returns>
		public async Task<UserPublic[]> ListGroupUsersAsync(ListGroupUsersSource source, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/{group}/users?source=" + source;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserPublic[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get current user profile
		/// Get details about the current authenticated User.
		/// 
		/// GetAuthenticatedUser me
		/// </summary>
		/// <param name="onlyId">Only return the user id</param>
		/// <returns>Current user details</returns>
		public async Task<UserDetails> GetAuthenticatedUserAsync(bool onlyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me?onlyId="+onlyId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the organization invitations
		/// ListOrganizationInvitations organizations/invitations
		/// </summary>
		/// <param name="role">Filter users by role</param>
		/// <param name="limit">This is the maximum number of objects that may be returned</param>
		/// <param name="next">An opaque string cursor to fetch the next page of data.
		///The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
		///</param>
		/// <param name="previous">An opaque string cursor to fetch the previous page of data.
		///The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
		///</param>
		/// <returns>List of invitations</returns>
		public async Task<OrganizationInvitation[]> ListOrganizationInvitationsAsync(ListOrganizationInvitationsRole role, int limit, string next, string previous, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/invitations?role=" + role+"&limit="+limit+"&next=" + (next==null? "" : System.Uri.EscapeDataString(next))+"&previous=" + (previous==null? "" : System.Uri.EscapeDataString(previous));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrganizationInvitation[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new invitation to join the organization
		/// This method creates and sends invitation for teachers and admins.
		/// 
		/// Invitations can only be used by new Flat users or users who are not part of the organization yet.
		/// 
		/// If the email of the user is already associated to a user of your organization, the API will simply update the role of the existing user and won't send an invitation. In this case, the property `usedBy` will be directly filled with the uniquer identifier of the corresponding user.
		/// 
		/// CreateOrganizationInvitation organizations/invitations
		/// </summary>
		/// <returns>New invitation created</returns>
		public async Task<OrganizationInvitation> CreateOrganizationInvitationAsync(OrganizationInvitationCreation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/invitations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrganizationInvitation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove an organization invitation
		/// RemoveOrganizationInvitation organizations/invitations/{invitation}
		/// </summary>
		public async Task RemoveOrganizationInvitationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/invitations/{invitation}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List LTI 1.x credentials
		/// ListLtiCredentials organizations/lti/credentials
		/// </summary>
		/// <returns>The list of LTI Credentials</returns>
		public async Task<LtiCredentials[]> ListLtiCredentialsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/lti/credentials";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LtiCredentials[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new couple of LTI 1.x credentials
		/// Flat for Education is a Certified LTI Provider. You can use these API methods to automate the creation of LTI credentials. You can read more about our LTI implementation, supported components and LTI Endpoints in our [Developer Documentation](https://flat.io/developers/docs/lti/).
		/// 
		/// CreateLtiCredentials organizations/lti/credentials
		/// </summary>
		/// <returns>The LTI Credentials</returns>
		public async Task<LtiCredentials> CreateLtiCredentialsAsync(LtiCredentialsCreation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/lti/credentials";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LtiCredentials>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Revoke LTI 1.x credentials
		/// RevokeLtiCredentials organizations/lti/credentials/{credentials}
		/// </summary>
		public async Task RevokeLtiCredentialsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/lti/credentials/{credentials}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the organization users
		/// ListOrganizationUsers organizations/users
		/// </summary>
		/// <param name="sort">The order to sort the user list</param>
		/// <param name="direction">Sort direction</param>
		/// <param name="next">An opaque string cursor to fetch the next page of data.
		///The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
		///</param>
		/// <param name="previous">An opaque string cursor to fetch the previous page of data.
		///The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
		///</param>
		/// <param name="role">Filter users by role</param>
		/// <param name="q">The query to search</param>
		/// <param name="group">Filter users by group</param>
		/// <param name="noActiveLicense">Filter users who don't have an active license</param>
		/// <param name="licenseExpirationDate">Filter users by license expiration date or `active` / `notActive`</param>
		/// <param name="onlyIds">Return only user ids</param>
		/// <param name="limit">This is the maximum number of objects that may be returned</param>
		/// <returns>List of users</returns>
		public async Task<UserDetailsAdmin[]> ListOrganizationUsersAsync(string sort, ListCollectionsDirection direction, string next, string previous, ListOrganizationInvitationsRole[] role, string q, string[] group, bool noActiveLicense, string[] licenseExpirationDate, bool onlyIds, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/users?sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&direction=" + direction+"&next=" + (next==null? "" : System.Uri.EscapeDataString(next))+"&previous=" + (previous==null? "" : System.Uri.EscapeDataString(previous))+"&"+string.Join("&", role.Select(z => $"role={z}"))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&"+string.Join("&", group.Select(z => $"group={System.Uri.EscapeDataString(z.ToString())}"))+"&noActiveLicense="+noActiveLicense+"&"+string.Join("&", licenseExpirationDate.Select(z => $"licenseExpirationDate={System.Uri.EscapeDataString(z.ToString())}"))+"&onlyIds="+onlyIds+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserDetailsAdmin[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new user account
		/// CreateOrganizationUser organizations/users
		/// </summary>
		/// <returns>New user created</returns>
		public async Task<UserDetailsAdmin> CreateOrganizationUserAsync(UserCreation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserDetailsAdmin>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Count the organization users using the provided filters
		/// CountOrgaUsers organizations/users/count
		/// </summary>
		/// <param name="role">Filter users by role</param>
		/// <param name="q">The query to search</param>
		/// <param name="group">Filter users by group</param>
		/// <param name="noActiveLicense">Filter users who don't have an active license</param>
		/// <returns>Number of users</returns>
		public async Task<int> CountOrgaUsersAsync(ListOrganizationInvitationsRole[] role, string q, string[] group, bool noActiveLicense, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/users/count?"+string.Join("&", role.Select(z => $"role={z}"))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&"+string.Join("&", group.Select(z => $"group={System.Uri.EscapeDataString(z.ToString())}"))+"&noActiveLicense="+noActiveLicense;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove an account from Flat
		/// This operation removes an account from Flat and its data, including:
		/// * The music scores created by this user (documents, history, comments, collaboration information)
		/// * Education related data (assignments and classroom information)
		/// 
		/// RemoveOrganizationUser organizations/users/{user}
		/// </summary>
		/// <param name="convertToIndividual">If `true`, the account will be only removed from the organization and converted into an individual account on our public website, https://flat.io.
		///This operation will remove the education-related data from the account.
		///Before realizing this operation, you need to be sure that the user is at least 13 years old and that this one has read and agreed to the Individual Terms of Services of Flat available on https://flat.io/legal.
		///</param>
		public async Task RemoveOrganizationUserAsync(bool convertToIndividual, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/users/{user}?convertToIndividual="+convertToIndividual;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update account information
		/// UpdateOrganizationUser organizations/users/{user}
		/// </summary>
		/// <returns>User updated</returns>
		public async Task<UserDetailsAdmin> UpdateOrganizationUserAsync(UserAdminUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/users/{user}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserDetailsAdmin>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a new score
		/// Use this API method to **create a new music score in the current User account**. You will need a MusicXML 3 (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI (`audio/midi`), Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar, or MuseScore file to create the new Flat document.
		/// 
		/// This API call will automatically create the first revision of the document, the score can be modified by the using our web application or by uploading a new revision of this file (`POST /v2/scores/{score}/revisions/{revision}`).
		/// 
		/// The currently authenticated user will be granted owner of the file and will be able to add other collaborators (users and groups).
		/// 
		/// If no `collection` is specified, the API will create the score in the most appropriate collection. This can be the `root` collection or a different collection based on the user's settings or API authentication method.
		/// If a `collection` is specified and this one has more public privacy settings than the score (e.g. `public` vs `private` for the score), the privacy settings of the created score will be adjusted to the collection ones.
		/// You can check the adjusted privacy settings in the returned score `privacy`, and optionally adjust these settings if needed using `PUT /scores/{score}`.
		/// 
		/// CreateScore scores
		/// </summary>
		/// <returns>Score created</returns>
		public async Task<ScoreDetails> CreateScoreAsync(ScoreCreation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a score
		/// This method can be used by the owner/admin (`aclAdmin` rights) of a score as well as regular collaborators.
		/// 
		/// When called by an owner/admin, it will schedule the deletion of the score, its revisions, and complete history.
		/// The score won't be accessible anymore after calling this method and the user's quota will directly be updated.
		/// 
		/// When called by a regular collaborator (`aclRead` / `aclWrite`), the score will be unshared (i.e. removed from the account & own collections).
		/// 
		/// DeleteScore scores/{score}
		/// </summary>
		/// <param name="now">If `true`, the score deletion will be scheduled to be done ASAP</param>
		public async Task DeleteScoreAsync(bool now, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}?now="+now;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a score's metadata
		/// Get the details of a score identified by the `score` parameter in the URL.
		/// The currently authenticated user must have at least a read access to the document to use this API call.
		/// 
		/// GetScore scores/{score}
		/// </summary>
		/// <param name="sharingKey">This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.
		///</param>
		/// <returns>Score details</returns>
		public async Task<ScoreDetails> GetScoreAsync(string sharingKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}?sharingKey=" + (sharingKey==null? "" : System.Uri.EscapeDataString(sharingKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit a score's metadata
		/// This API method allows you to change the metadata of a score document (e.g. its `title` or `privacy`), all the properties are optional.
		/// 
		/// To edit the file itself, create a new revision using the appropriate method (`POST /v2/scores/{score}/revisions/{revision}`).
		/// 
		/// When editing the `title`, `subtitle`, `composer`, `lyricist`, `arranger` or `licenseText`, the metadatas will be instantly be updated, and a real-time action will be pushed to update the document lazily.
		/// This pending document modification will be automatically be saved as a new version by either a connected client or our internal versioning service.
		/// 
		/// EditScore scores/{score}
		/// </summary>
		/// <returns>Score details</returns>
		public async Task<ScoreDetails> EditScoreAsync(ScoreModification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the collaborators
		/// This API call will list the different collaborators of a score and their rights on the document. The returned list will at least contain the owner of the document.
		/// 
		/// Collaborators can be a single user (the object `user` will be populated) or a group (the object `group` will be populated).
		/// 
		/// GetScoreCollaborators scores/{score}/collaborators
		/// </summary>
		/// <param name="sharingKey">This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.
		///</param>
		/// <returns>List of collaborators</returns>
		public async Task<ResourceCollaborator[]> GetScoreCollaboratorsAsync(string sharingKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/collaborators?sharingKey=" + (sharingKey==null? "" : System.Uri.EscapeDataString(sharingKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceCollaborator[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new collaborator
		/// Share a score with a single user or a group. This API call allows to add, invite and update the collaborators of a resource.
		/// - To add an existing Flat user to the resource, specify its unique identifier in the `user` property.
		/// - To invite an external user to the resource, specify its email in the `userEmail` property.
		/// - To add a Flat group to the resource, specify its unique identifier in the `group` property.
		/// - To update an existing collaborator, process the same request with different rights.
		/// 
		/// AddScoreCollaborator scores/{score}/collaborators
		/// </summary>
		/// <returns>The newly added collaborator metadata</returns>
		public async Task<ResourceCollaborator> AddScoreCollaboratorAsync(ResourceCollaboratorCreation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/collaborators";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceCollaborator>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a collaborator
		/// Remove the specified collaborator from the score
		/// 
		/// RemoveScoreCollaborator scores/{score}/collaborators/{collaborator}
		/// </summary>
		public async Task RemoveScoreCollaboratorAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/collaborators/{collaborator}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a collaborator
		/// Get the information about a collaborator (User or Group).
		/// 
		/// GetScoreCollaborator scores/{score}/collaborators/{collaborator}
		/// </summary>
		/// <param name="sharingKey">This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.
		///</param>
		/// <returns>Collaborator information</returns>
		public async Task<ResourceCollaborator> GetScoreCollaboratorAsync(string sharingKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/collaborators/{collaborator}?sharingKey=" + (sharingKey==null? "" : System.Uri.EscapeDataString(sharingKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceCollaborator>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List comments
		/// This method lists the different comments added on a music score (documents and inline) sorted by their post dates.
		/// GetScoreComments scores/{score}/comments
		/// </summary>
		/// <param name="type">Filter the comments by type</param>
		/// <param name="sort">Sort</param>
		/// <param name="direction">Sort direction</param>
		/// <returns>The comments of the score</returns>
		public async Task<ScoreComment[]> GetScoreCommentsAsync(ScoreCommentType type, GetScoreCommentsSort sort, ListCollectionsDirection direction, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/comments?type=" + type+"&sort=" + sort+"&direction=" + direction;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreComment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post a new comment
		/// Post a document or a contextualized comment on a document.
		/// 
		/// Please note that this method includes an anti-spam system for public scores. We don't guarantee that your comments will be accepted and displayed to end-user. Comments are be blocked by returning a `403` HTTP error and hidden from other users when the `spam` property is `true`.
		/// 
		/// PostScoreComment scores/{score}/comments
		/// </summary>
		/// <returns>The new comment</returns>
		public async Task<ScoreComment> PostScoreCommentAsync(ScoreCommentCreation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreComment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a comment
		/// DeleteScoreComment scores/{score}/comments/{comment}
		/// </summary>
		public async Task DeleteScoreCommentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/comments/{comment}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing comment
		/// UpdateScoreComment scores/{score}/comments/{comment}
		/// </summary>
		/// <returns>The edited comment</returns>
		public async Task<ScoreComment> UpdateScoreCommentAsync(ScoreCommentUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/comments/{comment}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreComment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Mark the comment as unresolved
		/// MarkScoreCommentUnresolved scores/{score}/comments/{comment}/resolved
		/// </summary>
		/// <param name="sharingKey">This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.
		///</param>
		public async Task MarkScoreCommentUnresolvedAsync(string sharingKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/comments/{comment}/resolved?sharingKey=" + (sharingKey==null? "" : System.Uri.EscapeDataString(sharingKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Mark the comment as resolved
		/// MarkScoreCommentResolved scores/{score}/comments/{comment}/resolved
		/// </summary>
		public async Task MarkScoreCommentResolvedAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/comments/{comment}/resolved";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fork a score
		/// This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to `private`.
		/// 
		/// When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document.
		/// 
		/// ForkScore scores/{score}/fork
		/// </summary>
		/// <param name="sharingKey">This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.
		///</param>
		/// <returns>Score details</returns>
		public async Task<ScoreDetails> ForkScoreAsync(string sharingKey, ScoreFork requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/fork?sharingKey=" + (sharingKey==null? "" : System.Uri.EscapeDataString(sharingKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the revisions
		/// When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to list all of them, sorted by last modification.
		/// 
		/// Depending the plan of the account, this list can be trunked to the few last revisions.
		/// 
		/// GetScoreRevisions scores/{score}/revisions
		/// </summary>
		/// <param name="sharingKey">This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.
		///</param>
		/// <returns>List of revisions</returns>
		public async Task<ScoreRevision[]> GetScoreRevisionsAsync(string sharingKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/revisions?sharingKey=" + (sharingKey==null? "" : System.Uri.EscapeDataString(sharingKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreRevision[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new revision
		/// Update a score by uploading a new revision for this one.
		/// 
		/// CreateScoreRevision scores/{score}/revisions
		/// </summary>
		/// <returns>The new created revision metadata</returns>
		public async Task<ScoreRevision> CreateScoreRevisionAsync(ScoreRevisionCreation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/revisions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreRevision>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a score revision
		/// When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to get a specific
		/// revision metadata.
		/// 
		/// GetScoreRevision scores/{score}/revisions/{revision}
		/// </summary>
		/// <returns>Revision metadata</returns>
		public async Task<ScoreRevision> GetScoreRevisionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/revisions/{revision}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreRevision>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a score revision data
		/// Retrieve the file corresponding to a score revision (the following formats are available): Flat JSON/Adagio JSON `json`, MusicXML
		/// `mxl`/`xml`, MP3 `mp3`, WAV `wav`, MIDI `midi`, a tumbnail of the first page `thumbnail.png` or auto sync points `synchronizationPoints`.
		/// 
		/// GetScoreRevisionData scores/{score}/revisions/{revision}/{format}
		/// </summary>
		/// <param name="sharingKey">This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.
		///</param>
		/// <param name="parts">An optional a set of parts uuid to be exported. This parameter must be composed of parts uuids
		///separated by commas. For example "59df645f-bb1c-f1b4-b573-d2afc4491f94,34ef645f-1aef-f3bc-1564-34cca4492b87".
		///</param>
		/// <param name="onlyCached">Only return files already generated and cached in Flat's production
		///cache. If the file is not availabe, a 404 will be returned
		///</param>
		/// <param name="url">Returns a json with the `url` in it instead of redirecting
		///</param>
		/// <returns>Revision data</returns>
		public async Task<string> GetScoreRevisionDataAsync(string sharingKey, string parts, bool onlyCached, bool url, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/revisions/{revision}/{format}?sharingKey=" + (sharingKey==null? "" : System.Uri.EscapeDataString(sharingKey))+"&parts=" + (parts==null? "" : System.Uri.EscapeDataString(parts))+"&onlyCached="+onlyCached+"&url="+url;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List submissions related to the score
		/// This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document.
		/// 
		/// GetScoreSubmissions scores/{score}/submissions
		/// </summary>
		/// <returns>List of submissions</returns>
		public async Task<AssignmentSubmission[]> GetScoreSubmissionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/submissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssignmentSubmission[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the audio or video tracks linked to a score
		/// ListScoreTracks scores/{score}/tracks
		/// </summary>
		/// <param name="sharingKey">This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.
		///</param>
		/// <param name="assignment">An assignment id with which all the tracks returned will be related to
		///</param>
		/// <param name="listAutoTrack">If true, and if available, return last automatically synchronized Flat's mp3 export as an additional track
		///</param>
		/// <returns>List of tracks</returns>
		public async Task<ScoreTrack[]> ListScoreTracksAsync(string sharingKey, string assignment, bool listAutoTrack, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/tracks?sharingKey=" + (sharingKey==null? "" : System.Uri.EscapeDataString(sharingKey))+"&assignment=" + (assignment==null? "" : System.Uri.EscapeDataString(assignment))+"&listAutoTrack="+listAutoTrack;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreTrack[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new video or audio track to the score
		/// Use this method to add new track to the score. This track can then be played on flat.io or in an embedded score.
		/// This API method support medias hosted on SoundCloud, YouTube and Vimeo.
		/// 
		/// AddScoreTrack scores/{score}/tracks
		/// </summary>
		/// <returns>Created track</returns>
		public async Task<ScoreTrack> AddScoreTrackAsync(ScoreTrackCreation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/tracks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreTrack>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove an audio or video track linked to the score
		/// DeleteScoreTrack scores/{score}/tracks/{track}
		/// </summary>
		public async Task DeleteScoreTrackAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/tracks/{track}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the details of an audio or video track linked to a score
		/// GetScoreTrack scores/{score}/tracks/{track}
		/// </summary>
		/// <param name="sharingKey">This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.
		///</param>
		/// <returns>Track details</returns>
		public async Task<ScoreTrack> GetScoreTrackAsync(string sharingKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/tracks/{track}?sharingKey=" + (sharingKey==null? "" : System.Uri.EscapeDataString(sharingKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreTrack>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an audio or video track linked to a score
		/// UpdateScoreTrack scores/{score}/tracks/{track}
		/// </summary>
		/// <returns>Updated track</returns>
		public async Task<ScoreTrack> UpdateScoreTrackAsync(ScoreTrackUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/tracks/{track}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreTrack>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Untrash a score
		/// This method will remove the score from the `trash` collection and from the deletion queue, and add it back to the original collections.
		/// 
		/// UntrashScore scores/{score}/untrash
		/// </summary>
		public async Task UntrashScoreAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scores/{score}/untrash";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a public user profile
		/// Get a public profile of a Flat User.
		/// 
		/// GetUser users/{user}
		/// </summary>
		/// <returns>The user public details</returns>
		public async Task<UserPublic> GetUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{user}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserPublic>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List liked scores
		/// GerUserLikes users/{user}/likes
		/// </summary>
		/// <param name="ids">Return only the identifiers of the scores</param>
		/// <returns>List of liked scores</returns>
		public async Task<ScoreDetails[]> GerUserLikesAsync(bool ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{user}/likes?ids="+ids;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreDetails[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List user's scores
		/// Get the list of public scores owned by a User.
		/// 
		/// **DEPRECATED**: Please note that the current behavior will be deprecrated on **2019-01-01**.
		/// This method will no longer list private and shared scores, but only public scores of a Flat account.
		/// If you want to access to private scores, please use the [Collections API](#tag/Collection) instead.
		/// 
		/// GetUserScores users/{user}/scores
		/// </summary>
		/// <param name="parent">Filter the score forked from the score id `parent`</param>
		/// <returns>The user scores</returns>
		public async Task<ScoreDetails[]> GetUserScoresAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{user}/scores?parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScoreDetails[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ListCollectionsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creationDate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		title = 1,
	}
	
	public enum ListCollectionsDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	public enum ListCollectionScoresSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creationDate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modificationDate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		title = 2,
	}
	
	public enum ListGroupUsersSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		googleClassroom = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		microsoftGraph = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		clever = 2,
	}
	
	public enum ListOrganizationInvitationsRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		teacher = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		admin = 2,
	}
	
	public enum GetScoreCommentsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
