//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all fire.com Accounts
		/// Returns all your fire.com Accounts. Ordered by Alias ascending. Can be paginated.
		/// GetAccounts v1/accounts
		/// </summary>
		/// <returns>An array of account objects.</returns>
		public async Task<GetAccountsReturn> GetAccountsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetAccountsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a new account
		/// Creates a new fire.com account.
		/// 
		/// **Please note there is a charge associated with creating a new account.**
		/// 
		/// AddAccount v1/accounts
		/// </summary>
		/// <param name="requestBody">Details of the new account</param>
		public async Task AddAccountAsync(AddAccountPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve the details of a fire.com Account
		/// You can retrieve the details of a fire.com Account by its `ican`.
		/// GetAccountById v1/accounts/{ican}
		/// </summary>
		/// <returns>An array of account objects.</returns>
		public async Task<GetAccountByIdReturn> GetAccountByIdAsync(long ican, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ican;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetAccountByIdReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List transactions for an account (v1)
		/// Retrieve a list of transactions against an account. Recommended to use the v3 endpoint instead.
		/// GetTransactionsByAccountIdv1 v1/accounts/{ican}/transactions
		/// </summary>
		/// <returns>An array of transaction objects for the account with a count (`total`).</returns>
		public async Task<GetTransactionsByAccountIdv1Return> GetTransactionsByAccountIdv1Async(long ican, long limit, long offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ican+"/transactions?limit="+limit+"&offset="+offset;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetTransactionsByAccountIdv1Return>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Filtered list of transactions for an account (v1)
		/// Retrieve a filtered list of transactions against an account. Recommended to use the v3 endpoint instead.
		/// * `dateRangeFrom` - A millisecond epoch time specifying the date range start date.
		/// * `dateRangeTo` - A millisecond epoch time specifying the date range end date.
		/// * `searchKeyword` - Search term to filter by from the reference field (`myRef`).
		/// * `transactionTypes` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types.
		/// * `offset` - The page offset. Defaults to 0. This is the record number that the returned list will start at. E.g. offset = 40 and limit = 20 will return records 40 to 59.
		/// 
		/// GetTransactionsByAccountIdFiltered v1/accounts/{ican}/transactions/filter
		/// </summary>
		/// <returns>An array of transaction objects for the account with a count (`total`) filtered by the specified query parameter.</returns>
		public async Task<GetTransactionsByAccountIdFilteredReturn> GetTransactionsByAccountIdFilteredAsync(long ican, long dateRangeFrom, long dateRangeTo, string searchKeyword, string[] transactionTypes, long offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accounts/"+ican+"/transactions/filter?dateRangeFrom="+dateRangeFrom+"&dateRangeTo="+dateRangeTo+"&searchKeyword=" + (searchKeyword==null? "" : System.Uri.EscapeDataString(searchKeyword))+"&"+string.Join("&", transactionTypes.Select(z => $"transactionTypes={System.Uri.EscapeDataString(z.ToString())}"))+"&offset="+offset;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetTransactionsByAccountIdFilteredReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new API Application
		/// Create a new API Application with specified permissions
		/// CreateApiApplication v1/apps
		/// </summary>
		/// <param name="requestBody">Details of the new API Application</param>
		/// <returns>API Application created successfully</returns>
		public async Task<CreateApiApplicationReturn> CreateApiApplicationAsync(CreateApiApplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/apps";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateApiApplicationReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Authenticate with the API.
		/// Access to the API is by Bearer Tokens. The process is somewhat similar to OAuth2.0, but with some changes to improve security.
		/// 
		/// 1. You must first log into the firework online application and create a new Application in the Profile > API page. (You will need your PIN digits and 2-Factor Authentication device).
		/// 
		/// 2. Give your application a Name and select the scope/permissions you need the application to have (more on Scopes below).
		/// 
		/// 3. You will be provided with three pieces of information - the App Refresh Token, Client ID and Client Key. You need to take note of the Client Key when it is displayed - it will not be shown again.
		/// 
		/// 
		/// You now use these pieces of data to retrieve a short-term Access Token which you can use to access the API. The Access Token expires within a relatively short time, so even if it is compromised, the attacker will not have long to use it. The Client Key is the most important piece of information to keep secret. This should only ever be stored on a backend server, and never in a front end client or mobile app.
		/// 
		/// 
		/// **If you ever accidentally reveal the Client Key (or accidentally commit it to Github for instance) it is vital that you log into firework online and delete/recreate the App Tokens as soon as possible. Anyone who has these three pieces of data can access the API to view your data and set up payments from your account (depending on the scope of the tokens).**
		/// 
		/// 
		/// Once you have the access token, pass it as a header for every call, like so:
		/// 
		/// `Authorization: Bearer $ACCESS_TOKEN`
		/// 
		/// Whenever it expires, create a new nonce and get a new access token again.
		/// 
		/// Authenticate v1/apps/accesstokens
		/// </summary>
		/// <param name="requestBody">Authentication data</param>
		/// <returns>Successfully authenticated</returns>
		public async Task<AuthenticateReturn> AuthenticateAsync(AuthenticatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/apps/accesstokens";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AuthenticateReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get list of ASPSPs / Banks
		/// Returns all ASPSPs (Account Servicing Payment Service Provider) / banks. The list can be filtered by currency. You will need to enable the `PERM_BUSINESS_GET_ASPSPS` permission to use this endpoint.
		/// ***This endpoint is only required if you intend to host the “Select ASPSP / bank” page yourself.***
		/// 
		/// GetListOfAspsps v1/aspsps
		/// </summary>
		/// <param name="currency">The three letter code for the currency - either `EUR` or `GBP`. Use this to filter the list for banks that can be used to pay in a certain currency.</param>
		/// <returns>A list of ASPSPs the customers can use to pay a payment.
		///</returns>
		public async Task<GetListOfAspspsReturn> GetListOfAspspsAsync(string currency, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/aspsps?currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetListOfAspspsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List batches
		/// Returns the list of batch with the specified types and statuses.
		/// 
		/// GetBatches v1/batches
		/// </summary>
		/// <returns>List all batches.</returns>
		public async Task<GetBatchesReturn> GetBatchesAsync(GetBatchesBatchStatus batchStatus, GetBatchesBatchTypes batchTypes, GetBatchesOrderBy orderBy, GetBatchesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/batches?batchStatus=" + batchStatus+"&batchTypes=" + batchTypes+"&orderBy=" + orderBy+"&order=" + order;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetBatchesReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new batch of payments
		/// The fire.com API allows businesses to automate payments between their accounts or to third parties across the UK and Europe.
		/// 
		/// For added security, the API can only set up the payments in batches. These batches must be approved by an authorised user via the firework mobile app.
		/// 
		/// 
		/// The process is as follows:
		/// 
		/// **1.**Create a new batch
		/// 
		/// **2.**Add payments to the batch
		/// 
		/// **3.**Submit the batch for approval
		/// 
		/// Once the batch is submitted, the authorised users will receive notifications to their firework mobile apps. They can review the contents of the batch and then approve or reject it. If approved, the batch is then processed. You can avail of enhanced security by using Dual Authorisation to verify payments if you wish. Dual Authorisation can be enabled by you when setting up your API application in firework online.
		/// 
		/// **Batch Life Cycle Events**
		/// 
		/// A batch webhook can be specified to receive details of all the payments as they are processed. This webhook receives notifications for every event in the batch lifecycle.
		/// 
		/// The following events are triggered during a batch:
		/// 
		/// **batch.opened:** Contains the details of the batch opened. Checks that the callback URL exists - unless a HTTP 200 response is returned, the callback URL will not be configured.
		/// 
		/// **batch.item-added:** Details of the item added to the batch
		/// 
		/// **batch.item-removed:** Details of the item removed from the batch
		/// 
		/// **batch.cancelled:** Notifies that the batch was cancelled.
		/// 
		/// **batch.submitted:** Notifes that the batch was submitted
		/// 
		/// **batch.approved:** Notifies that the batch was approved.
		/// 
		/// **batch.rejected:** Notifies that the batch was rejected.
		/// 
		/// **batch.failed:** Notifies that the batch failed - includes the details of the failure (insufficient funds etc)
		/// 
		/// **batch.completed:** Notifies that the batch completed successfully. Includes a summary.
		/// 
		/// Push notifications are sent to the firework mobile app for many of these events too - these can be configured from within the app.
		/// 
		/// This is the first step in creating a batch payment.
		/// 
		/// CreateBatchPayment v1/batches
		/// </summary>
		/// <param name="requestBody">Details of the batch payment</param>
		/// <returns>Batch created successfully</returns>
		public async Task<CreateBatchPaymentReturn> CreateBatchPaymentAsync(CreateBatchPaymentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/batches";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateBatchPaymentReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancel a batch
		/// Cancels the Batch. You can only cancel a batch before it is submitted for approval (while it is in the OPEN state).
		/// CancelBatchPayment v1/batches/{batchUuid}
		/// </summary>
		/// <returns>Batch payment deleted successfully.</returns>
		public async Task CancelBatchPaymentAsync(string batchUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/batches/"+ (batchUuid==null? "" : System.Uri.EscapeDataString(batchUuid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get details of a single Batch
		/// Returns the details of the batch specified in the API endpoint - {batchUuid}.
		/// GetDetailsSingleBatch v1/batches/{batchUuid}
		/// </summary>
		/// <returns>Returns the details of the batch specified in the API endpoint - {batchUuid}.</returns>
		public async Task<GetDetailsSingleBatchReturn> GetDetailsSingleBatchAsync(string batchUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/batches/"+ (batchUuid==null? "" : System.Uri.EscapeDataString(batchUuid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDetailsSingleBatchReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Submit a batch for approval
		/// Submits the Batch (for approval in the case of a **BANK_TRANSFER** or **INTERNATIONAL_TRANSFER**). If this is an **INTERNAL_TRANSFER** batch, the transfers are immediately queued for processing. If this is a **BANK_TRANSFER** or **INTERNATIONAL_TRANSFER** batch, this will trigger requests for approval to the firework mobile apps of authorised users. Once those users approve the batch, it is queued for processing.
		/// 
		/// You can only submit a batch while it is in the OPEN state.
		/// 
		/// SubmitBatch v1/batches/{batchUuid}
		/// </summary>
		public async Task SubmitBatchAsync(string batchUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/batches/"+ (batchUuid==null? "" : System.Uri.EscapeDataString(batchUuid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Approvers for a Batch
		/// Returns a list of approvers for this batch.
		/// GetListofApproversForBatch v1/batches/{batchUuid}/approvals
		/// </summary>
		/// <returns>A list of approvers for this batch.</returns>
		public async Task<GetListofApproversForBatchReturn> GetListofApproversForBatchAsync(string batchUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/batches/"+ (batchUuid==null? "" : System.Uri.EscapeDataString(batchUuid))+"/approvals";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetListofApproversForBatchReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List items in a Batch (Bank Transfers)
		/// Returns a paginated list of items in the specified batch.
		/// GetItemsBatchBankTransfer v1/batches/{batchUuid}/banktransfers
		/// </summary>
		/// <returns>A fire.com list object of Batch Items (Internal transfers or Bank transfers).</returns>
		public async Task<GetItemsBatchBankTransferReturn> GetItemsBatchBankTransferAsync(string batchUuid, long offset, long limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/batches/"+ (batchUuid==null? "" : System.Uri.EscapeDataString(batchUuid))+"/banktransfers&offset="+offset+"&limit="+limit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetItemsBatchBankTransferReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a bank transfer payment to the batch.
		/// There are two ways to process bank transfers - by Payee ID (**Mode 1**) or by Payee Account Details (**Mode 2**).
		/// 
		/// **Mode 1:** Use the payee IDs of existing approved payees set up against your account. These batches can be approved in the normal manner.
		/// 
		/// **Mode 2:** Use the account details of the payee. In the event that these details correspond to an existing approved payee, the batch can be approved as normal. If the account details are new, a batch of New Payees will automatically be created. This batch will need to be approved before the Payment batch can be approved. These payees will then exist as approved payees for future batches.
		/// 
		/// AddBankTransferBatchPayment v1/batches/{batchUuid}/banktransfers
		/// </summary>
		/// <param name="requestBody">Details of **Mode 1** & **Mode 2**.</param>
		/// <returns>Batch payment added successfully. **Note*** Please use batchUuid when submitting a batch, not batchItemUuid.</returns>
		public async Task<AddBankTransferBatchPaymentReturn> AddBankTransferBatchPaymentAsync(string batchUuid, AddBankTransferBatchPaymentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/batches/"+ (batchUuid==null? "" : System.Uri.EscapeDataString(batchUuid))+"/banktransfers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AddBankTransferBatchPaymentReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove a Payment from the Batch (Bank Transfers)
		/// Removes a Payment from the Batch (Bank Transfers). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
		/// DeleteBankTransferBatchPayment v1/batches/{batchUuid}/banktransfers/{itemUuid}
		/// </summary>
		/// <returns>Batch payment deleted successfully.</returns>
		public async Task DeleteBankTransferBatchPaymentAsync(string batchUuid, string itemUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/batches/"+ (batchUuid==null? "" : System.Uri.EscapeDataString(batchUuid))+"/banktransfers/"+ (itemUuid==null? "" : System.Uri.EscapeDataString(itemUuid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List items in a Batch (Internal Transfers)
		/// Returns a paginated list of items in the specified batch.
		/// GetItemsBatchInternalTrasnfer v1/batches/{batchUuid}/internaltransfers
		/// </summary>
		/// <returns>A fire.com list object of Batch Items (Internal transfers or Bank transfers).</returns>
		public async Task<GetItemsBatchInternalTrasnferReturn> GetItemsBatchInternalTrasnferAsync(string batchUuid, long offset, long limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/batches/"+ (batchUuid==null? "" : System.Uri.EscapeDataString(batchUuid))+"/internaltransfers&offset="+offset+"&limit="+limit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetItemsBatchInternalTrasnferReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add an internal transfer payment to the batch
		/// Simply specify the source account, destination account, amount and a reference.
		/// AddInternalTransferBatchPayment v1/batches/{batchUuid}/internaltransfers
		/// </summary>
		/// <param name="requestBody">Details of the source account, destination account, amount and a reference.</param>
		/// <returns>Batch payment added successfully. Note* Please use batchUuid when submitting a batch, not batchItemUuid.</returns>
		public async Task<AddInternalTransferBatchPaymentReturn> AddInternalTransferBatchPaymentAsync(string batchUuid, AddInternalTransferBatchPaymentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/batches/"+ (batchUuid==null? "" : System.Uri.EscapeDataString(batchUuid))+"/internaltransfers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AddInternalTransferBatchPaymentReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove a Payment from the Batch (Internal Transfer)
		/// Removes a Payment from the Batch (Internal Transfer). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
		/// DeleteInternalTransferBatchPayment v1/batches/{batchUuid}/internaltransfers/{itemUuid}
		/// </summary>
		/// <returns>Batch payment deleted successfully.</returns>
		public async Task DeleteInternalTransferBatchPaymentAsync(string batchUuid, string itemUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/batches/"+ (batchUuid==null? "" : System.Uri.EscapeDataString(batchUuid))+"/internaltransfers/"+ (itemUuid==null? "" : System.Uri.EscapeDataString(itemUuid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// View List of Cards.
		/// Returns a list of cards related to your fire.com account.
		/// GetListofCards v1/cards
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GetListofCardsReturn> GetListofCardsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cards";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetListofCardsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new debit card.
		/// You can create multiple debit cards which can be linked to your fire.com accounts.
		/// CreateNewCard v1/cards
		/// </summary>
		/// <param name="requestBody">Details of the new card</param>
		/// <returns>Card created successfully</returns>
		public async Task<CreateNewCardReturn> CreateNewCardAsync(CreateNewCardPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cards";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateNewCardReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Block a card
		/// Updates status of an existing card to block which prevents any transactions being carried out with that card.
		/// BlockCard v1/cards/{cardId}/block
		/// </summary>
		public async Task BlockCardAsync(long cardId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cards/"+cardId+"/block";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Card Transactions.
		/// Returns a list of cards transactions related to your fire.com card.
		/// GetListofCardTransactions v1/cards/{cardId}/transactions
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GetListofCardTransactionsReturn[]> GetListofCardTransactionsAsync(long cardId, long limit, long offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cards/"+cardId+"/transactions?limit="+limit+"&offset="+offset;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetListofCardTransactionsReturn[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Unblock a card
		/// Updates status of an existing card to unblock which means that transactions can be carried out with that card.
		/// UnblockCard v1/cards/{cardId}/unblock
		/// </summary>
		public async Task UnblockCardAsync(long cardId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cards/"+cardId+"/unblock";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all DD payments associated with a direct debit mandate
		/// Retrieve all direct debit payments associated with a direct debit mandate.
		/// The permision needed to access this endpoint is PERM_BUSINESS_GET_DIRECT_DEBITS
		/// 
		/// GetDirectDebitsForMandateUuid v1/directdebits
		/// </summary>
		/// <param name="mandateUuid">The mandate UUID to retrieve</param>
		/// <returns>Retrieve all direct debit payments associated with a direct debit mandate.</returns>
		public async Task<GetDirectDebitsForMandateUuidReturn> GetDirectDebitsForMandateUuidAsync(string mandateUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/directdebits?mandateUuid=" + (mandateUuid==null? "" : System.Uri.EscapeDataString(mandateUuid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDirectDebitsForMandateUuidReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the details of a direct debit
		/// Retrieve all details of a single direct debit collection/payment, whether successful or not.
		/// The permision needed to access this endpoint is **PERM_BUSINESS_GET_DIRECT_DEBIT**
		/// 
		/// GetDirectDebitByUuid v1/directdebits/{directDebitUuid}
		/// </summary>
		/// <returns>Retrieve all details of a single direct debit collection/payment</returns>
		public async Task<GetDirectDebitByUuidReturn> GetDirectDebitByUuidAsync(string directDebitUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/directdebits/"+ (directDebitUuid==null? "" : System.Uri.EscapeDataString(directDebitUuid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDirectDebitByUuidReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Reject a direct debit payment
		/// This endpoint allows you to reject a direct debit payment where the status is still set to RECEIVED.
		/// Permission name PERM_BUSINESS_POST_DIRECT_DEBIT_REJECT
		/// 
		/// RejectDirectDebit v1/directdebits/{directDebitUuid}/reject
		/// </summary>
		public async Task RejectDirectDebitAsync(string directDebitUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/directdebits/"+ (directDebitUuid==null? "" : System.Uri.EscapeDataString(directDebitUuid))+"/reject";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all direct debit mandates
		/// The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATES
		/// 
		/// GetDirectDebitMandates v1/mandates
		/// </summary>
		/// <returns>List all direct debit mandates.</returns>
		public async Task<GetDirectDebitMandatesReturn> GetDirectDebitMandatesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/mandates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDirectDebitMandatesReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get direct debit mandate details
		/// Retrieve all details for a direct debit mandate.
		/// The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATE
		/// 
		/// GetMandate v1/mandates/{mandateUuid}
		/// </summary>
		/// <returns>Retrieve all details for a direct debit mandate.</returns>
		public async Task<GetMandateReturn> GetMandateAsync(string mandateUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/mandates/"+ (mandateUuid==null? "" : System.Uri.EscapeDataString(mandateUuid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetMandateReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a direct debit mandate alias
		/// Update Direct Debit Mandate Alias
		/// The permision needed to access this endpoint is PERM_BUSINESS_PUT_MANDATE
		/// 
		/// UpdateMandateAlias v1/mandates/{mandateUuid}
		/// </summary>
		public async Task UpdateMandateAliasAsync(string mandateUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/mandates/"+ (mandateUuid==null? "" : System.Uri.EscapeDataString(mandateUuid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Activate a direct debit mandate
		/// This endpoint can only be used to activate a direct debit mandate when it is in the status REJECT_REQUESTED (even if the account has direct debits disabled). This action will also enable the account for direct debits if it was previously set to be disabled.
		/// The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_ACTIVATE
		/// 
		/// ActivateMandate v1/mandates/{mandateUuid}/activate
		/// </summary>
		public async Task ActivateMandateAsync(string mandateUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/mandates/"+ (mandateUuid==null? "" : System.Uri.EscapeDataString(mandateUuid))+"/activate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancel a direct debit mandate
		/// This endpoint allows you to cancel a direct debit mandate.
		/// The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_CANCEL
		/// 
		/// CancelMandateByUuid v1/mandates/{mandateUuid}/cancel
		/// </summary>
		public async Task CancelMandateByUuidAsync(string mandateUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/mandates/"+ (mandateUuid==null? "" : System.Uri.EscapeDataString(mandateUuid))+"/cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all Payee Bank Accounts
		/// Returns all your payee bank accounts.
		/// 
		/// Ordered by payee name ascending.
		/// 
		/// Can be paginated.
		/// 
		/// GetPayees v1/payees
		/// </summary>
		/// <returns>An array of Payee Bank Accounts</returns>
		public async Task<GetPayeesReturn> GetPayeesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payees";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetPayeesReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a Fire Open Payment request
		/// Fire Open Payments is a feature of the fire.com business account that leverages Open Banking to allow your customers to pay you via bank transfer and to reconcile those payments as they are received into your fire.com GBP or EUR account.
		/// 
		/// To set up each Fire Open Payment you first need to create a payment request. This contains the details of the payment such as the amount, destination account, description as well as various other specific fields that you want to associate with the payment. The payment request is represented as a URL with a unique code which can then be incorporated into an eCommerce shopping cart as an alternative form of payment. For example, you can put “Pay by Bank” on your website along with “Pay by Card” and “Pay by PayPal”. It can also be distributed by a variety of means such as by email, SMS, WhatsApp, encoded as a QR code, NFC tag, etc.
		/// 
		/// Consumers confirm the payment details such as the amount are correct, select their bank and authorise the payment. Payments can be made from all major UK banks.
		/// 
		/// The funds are settled into your fire.com account, fully reconciled, with your specified fields provided.
		/// 
		/// There are two implementation options you can use to display payment pages with Fire Open Payments.
		/// 1. **Hosted Payment Pages:** fire.com hosts the payment pages - this option allows you to re-direct your customer to the hosted fire.com payment pages displaying the payment details confirmation, bank selection, consent and response pages.
		/// 2. **Integrated Payment Pages:** You host the payments page yourself - this option allows you to have control of the UI and UX for displaying the payment details confirmation, bank selection and response pages. Once the response is received, fire.com can re-direct the payer back to your website.
		/// 
		/// ## Hosted Payment Pages Option
		/// ![Image](https://fire.com/docs/images/fop-hosted-flow.png)
		/// 
		/// The payer is brought through 5 stages to complete the payment:
		/// 1. **View Payment Details page:** The payer must first be clear on the amount of the payment, who they are paying and the reason for the payment.
		/// 2. **Select Bank / Account Provider page:** The payer then selects their bank. Again this step is offered as part of the fire.com payment UI.
		/// 3. **Consent page:**  The payer must provide consent to the PISP (fire.com) prior to authorising the payment. This is a regulatory requirement, this page must be hosted by fire.com.
		/// 4. **Authenticate and Authorise Payment:** The payer will be redirected to their bank’s online site or mobile banking app. After authenticating, the details of the payment will be displayed, and the payer will authorise the payment.
		/// 5. **Response page:** It is a regulatory requirement that the PISP (fire.com) display the results of the payment and provide the same information that would be provided if the payer had made the payment via their banking application. fire.com must display this page, before optionally redirecting the payer back to your website.
		/// 
		/// To implement the hosted Fire Open Payments option you need to do the following:
		/// 1. You can create a new Fire Open Payment request either within Firework Online or via the API.
		/// 2. Create your new API application with the appropriate permissions required in Firework Online, as outlined in the “Authentication” steps. The permissions needed are:
		/// - “Create a Payment Request”
		/// - “Get Payment Details”
		/// 
		/// 3. Use the Refresh Token, Client ID and Client Key to create an access token as outlined in the “Authentication” steps.
		/// 4. On your website, create a “Pay by Bank” button alongside your other available payment methods, such as Cards and PayPal.
		/// 5. After the user clicks on “Pay by Bank”, you need to create a new Fire Open Payment request as outlined in the “Create a Fire Open Payment” steps. The Create a Fire Open Payment request endpoint returns a unique code for the payment request.
		/// 6. Create a URL using the code returned in this format: `https://payments.fire.com/{code}` and redirect your customer to this page.
		/// 7. fire.com will host all the pages that the customer needs to review and authorise the payment. fire.com will will return the paymentUUID of the successful or failed transaction to the returnUrl that you supplied when creating the Fire Open Payment request. fire.com can also optionally send a “webhook” to your website notifying you of the transaction’s outcome.
		/// 8. Once fire.com responds with the paymentUUID and/or the webhook to your website, you need to call the “Get Payment Details” endpoint to get the details of the transaction. This will let you know whether the transaction was successful or not. You can set up the “Payment Request Payment Authorised” webhook to notify you once the payment is authorised or cancelled.
		/// 9. The funds will be received into your GBP or EUR account. Funding will typically be within 6 business hours.
		/// 
		/// Once the code is returned the payment can be viewed and paid by going to the following URL: `https://payments.fire.com/{code}`
		/// 
		/// This request creates a new Fire Open Payment Payment. A code is returned that can be shared to your customers as a URL by any channel you wish.
		/// You will need to enable the `PERM_BUSINESS_POST_PAYMENT_REQUEST` permission to use this endpoint.
		/// 
		/// NewPaymentRequest v1/paymentrequests
		/// </summary>
		/// <param name="requestBody">Details of the new payment request</param>
		/// <returns>Payment Request created successfully</returns>
		public async Task<NewPaymentRequestReturn> NewPaymentRequestAsync(NewPaymentRequestPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/paymentrequests";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<NewPaymentRequestReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Payment Details
		/// Returns the details of a specific payment.
		/// 
		/// As the customer goes through the process of making the payment the status of the payment will change.
		/// 
		/// * `AWAITING_AUTHORISATION` -This is the initial status of all your payments.
		/// * `AUTHORISED` - This is the status that your payment is set to after the customer has authorised the payment with their ASPSP / bank.
		/// * `AWAITING_MULTI_AUTHORISATION` - Some business accounts such as charities require dual authorisation.
		/// * `NOT_AUTHORISED` - Either your customer clicked on cancel or the payment was rejected by their ASPSP / bank.
		/// * `PENDING` - This is the status that your payment is set to after the customer has authorised the payment with their ASPSP / bank but the bank may want to carry out another check before funding the transaction.
		/// * `PAID` - Funds were received into your fire.com GBP or EUR account from your customer’s ASPSP / bank.
		/// 
		/// 
		/// You will need to enable the `PERM_BUSINESS_GET_PAYMENT` permission to use this endpoint.
		/// 
		/// GetPaymentDetails v1/payments/{paymentUuid}
		/// </summary>
		/// <returns>The Payment Request details object</returns>
		public async Task<GetPaymentDetailsReturn> GetPaymentDetailsAsync(string paymentUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payments/"+ (paymentUuid==null? "" : System.Uri.EscapeDataString(paymentUuid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetPaymentDetailsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns details of a specific fire.com user.
		/// You can retrieve the details of a specific fire.com user
		/// GetUser v1/user/{userId}
		/// </summary>
		/// <returns>Unique information about a User.</returns>
		public async Task<GetUserReturn> GetUserAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/user/"+userId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetUserReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns list of all users on your fire.com account
		/// You can retrieve the details of all fire.com users on your acount.
		/// GetUsers v1/users
		/// </summary>
		/// <returns>List of all Users.</returns>
		public async Task<GetUsersReturn[]> GetUsersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetUsersReturn[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List items in a Batch (International Transfers)
		/// Returns a paginated list of items in the specified batch.
		/// GetItemsBatchInternationalTransfer v2/batches/{batchUuid}/internationaltransfers
		/// </summary>
		/// <returns>A fire.com list object of Batch Items (Internal transfers, Bank transfers or International transfers).</returns>
		public async Task<GetItemsBatchInternationalTransferReturn> GetItemsBatchInternationalTransferAsync(string batchUuid, long offset, long limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/batches/"+ (batchUuid==null? "" : System.Uri.EscapeDataString(batchUuid))+"/internationaltransfers&offset="+offset+"&limit="+limit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetItemsBatchInternationalTransferReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add an international transfer payment to the batch.
		/// International transfers must be added to a batch using the Payee ID (**Mode 1**). Payees must be set up using the web application.
		/// 
		/// **Mode 1:** Use the payee IDs of existing approved payees set up against your account. These batches can be approved in the normal manner.
		/// 
		/// AddInternationalTransferBatchPayment v2/batches/{batchUuid}/internationaltransfers
		/// </summary>
		/// <param name="requestBody">Details of **Mode 1**</param>
		/// <returns>Batch payment added successfully. **Note*** Please use batchUuid when submitting a batch, not batchItemUuid.</returns>
		public async Task<AddInternationalTransferBatchPaymentReturn> AddInternationalTransferBatchPaymentAsync(string batchUuid, AddInternationalTransferBatchPaymentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/batches/"+ (batchUuid==null? "" : System.Uri.EscapeDataString(batchUuid))+"/internationaltransfers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AddInternationalTransferBatchPaymentReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove a Payment from the Batch (International Transfers)
		/// Removes a Payment from the Batch (International Transfers). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
		/// DeleteInternationalTransferBatchPayment v2/batches/{batchUuid}/internationaltransfers/{itemUuid}
		/// </summary>
		/// <returns>Batch payment deleted successfully.</returns>
		public async Task DeleteInternationalTransferBatchPaymentAsync(string batchUuid, string itemUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/batches/"+ (batchUuid==null? "" : System.Uri.EscapeDataString(batchUuid))+"/internationaltransfers/"+ (itemUuid==null? "" : System.Uri.EscapeDataString(itemUuid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List transactions for an account (v3)
		/// Retrieve a list of transactions against an account. Initially, use the optional `limit`, `dateRangeFrom` and `dateRangeTo` query params to limit your query, then use the embedded `next` or `prev` links in the response to get newer or older pages.
		/// 
		/// GetTransactionsByAccountIdv3 v3/accounts/{ican}/transactions
		/// </summary>
		/// <returns>An array of transaction objects for the account with a count (`total`).</returns>
		public async Task<GetTransactionsByAccountIdv3Return> GetTransactionsByAccountIdv3Async(long ican, long limit, long dateRangeFrom, long dateRangeTo, string startAfter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/accounts/"+ican+"/transactions?limit="+limit+"&dateRangeFrom="+dateRangeFrom+"&dateRangeTo="+dateRangeTo+"&startAfter=" + (startAfter==null? "" : System.Uri.EscapeDataString(startAfter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetTransactionsByAccountIdv3Return>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class GetAccountsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public GetAccountsReturnAccounts[] GetAccountsReturnAccounts { get; set; }
	}
	
	public class GetAccountsReturnAccounts
	{
		
		/// <summary>
		/// the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int64> Balance { get; set; }
		
		/// <summary>
		/// the BIC of the account (provided if currency is EUR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cbic")]
		public string Cbic { get; set; }
		
		/// <summary>
		/// the Account Number of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ccan")]
		public string Ccan { get; set; }
		
		/// <summary>
		/// the IBAN of the account (provided if currency is EUR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ciban")]
		public string Ciban { get; set; }
		
		/// <summary>
		/// the Sort Code of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cnsc")]
		public string Cnsc { get; set; }
		
		/// <summary>
		/// Internal Use
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colour")]
		public string Colour { get; set; }
		
		/// <summary>
		/// The currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetAccountsReturnAccountsCurrency Currency { get; set; }
		
		/// <summary>
		/// true if this is the default account for this currency. This will be the account that general fees are taken from (as opposed to per-transaction fees).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultAccount")]
		public System.Nullable<System.Boolean> DefaultAccount { get; set; }
		
		/// <summary>
		/// Whether or not direct debits can be set up on this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitsAllowed")]
		public System.Nullable<System.Boolean> DirectDebitsAllowed { get; set; }
		
		/// <summary>
		/// Indicates that this account is for collecting Fire Open Payments only. All other payments to this account will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fopOnly")]
		public System.Nullable<System.Boolean> FopOnly { get; set; }
		
		/// <summary>
		/// identifier for the fire.com account (assigned by fire.com)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ican")]
		public System.Nullable<System.Int64> Ican { get; set; }
		
		/// <summary>
		/// the name the user gives to the account to help them identify it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Live accounts can be used as normal. Migrated accounts were used before Brexit and are read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GetAccountsReturnAccountsStatus> Status { get; set; }
	}
	
	public class GetAccountsReturnAccountsCurrency
	{
		
		/// <summary>
		/// The three letter code for the currency - either `EUR` or `GBP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<GetAccountsReturnAccountsCurrencyCode> Code { get; set; }
		
		/// <summary>
		/// The name of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetAccountsReturnAccountsCurrencyCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GBP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetAccountsReturnAccountsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREXIT_MIGRATED = 1,
	}
	
	public class AddAccountPostBody
	{
		
		/// <summary>
		/// a field to indicate you accept the fee for a new account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptFeesAndCharges")]
		public System.Nullable<System.Boolean> AcceptFeesAndCharges { get; set; }
		
		/// <summary>
		/// Name to give the new account
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The currency of the new account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetAccountsReturnAccountsCurrencyCode Currency { get; set; }
	}
	
	public class GetAccountByIdReturn
	{
		
		/// <summary>
		/// the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int64> Balance { get; set; }
		
		/// <summary>
		/// the BIC of the account (provided if currency is EUR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cbic")]
		public string Cbic { get; set; }
		
		/// <summary>
		/// the Account Number of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ccan")]
		public string Ccan { get; set; }
		
		/// <summary>
		/// the IBAN of the account (provided if currency is EUR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ciban")]
		public string Ciban { get; set; }
		
		/// <summary>
		/// the Sort Code of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cnsc")]
		public string Cnsc { get; set; }
		
		/// <summary>
		/// Internal Use
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colour")]
		public string Colour { get; set; }
		
		/// <summary>
		/// The currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetAccountByIdReturnCurrency Currency { get; set; }
		
		/// <summary>
		/// true if this is the default account for this currency. This will be the account that general fees are taken from (as opposed to per-transaction fees).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultAccount")]
		public System.Nullable<System.Boolean> DefaultAccount { get; set; }
		
		/// <summary>
		/// Whether or not direct debits can be set up on this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitsAllowed")]
		public System.Nullable<System.Boolean> DirectDebitsAllowed { get; set; }
		
		/// <summary>
		/// Indicates that this account is for collecting Fire Open Payments only. All other payments to this account will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fopOnly")]
		public System.Nullable<System.Boolean> FopOnly { get; set; }
		
		/// <summary>
		/// identifier for the fire.com account (assigned by fire.com)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ican")]
		public System.Nullable<System.Int64> Ican { get; set; }
		
		/// <summary>
		/// the name the user gives to the account to help them identify it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Live accounts can be used as normal. Migrated accounts were used before Brexit and are read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public GetAccountsReturnAccountsStatus Status { get; set; }
	}
	
	public class GetAccountByIdReturnCurrency
	{
		
		/// <summary>
		/// The three letter code for the currency - either `EUR` or `GBP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public GetAccountsReturnAccountsCurrencyCode Code { get; set; }
		
		/// <summary>
		/// The name of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class GetTransactionsByAccountIdv1Return
	{
		
		/// <summary>
		/// milisecond timestamp of date range to value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRangeTo")]
		public System.Nullable<System.Int64> DateRangeTo { get; set; }
		
		/// <summary>
		/// The total number of card transactions in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public GetTransactionsByAccountIdv1ReturnTransactions[] GetTransactionsByAccountIdv1ReturnTransactions { get; set; }
	}
	
	public class GetTransactionsByAccountIdv1ReturnTransactions
	{
		
		/// <summary>
		/// Net amount lodged or taken from the account after fees and charges were applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountAfterCharges")]
		public System.Nullable<System.Int64> AmountAfterCharges { get; set; }
		
		/// <summary>
		/// Amount of the transaction before the fees and taxes were applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountBeforeCharges")]
		public System.Nullable<System.Int64> AmountBeforeCharges { get; set; }
		
		/// <summary>
		/// the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int64> Balance { get; set; }
		
		/// <summary>
		/// Details of the batch run if this transaction was part of a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemDetails")]
		public GetTransactionsByAccountIdv1ReturnTransactionsBatchItemDetails BatchItemDetails { get; set; }
		
		/// <summary>
		/// Details of the card used (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public GetTransactionsByAccountIdv1ReturnTransactionsCard Card { get; set; }
		
		/// <summary>
		/// The currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetTransactionsByAccountIdv1ReturnTransactionsCurrency Currency { get; set; }
		
		/// <summary>
		/// Date of the transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateAcknowledged")]
		public System.Nullable<System.DateTimeOffset> DateAcknowledged { get; set; }
		
		/// <summary>
		/// Details of the direct debit (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitDetails")]
		public GetTransactionsByAccountIdv1ReturnTransactionsDirectDebitDetails DirectDebitDetails { get; set; }
		
		/// <summary>
		/// An internal Fire reference for the transaction (UUID)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventUuid")]
		public string EventUuid { get; set; }
		
		/// <summary>
		/// The amount of the fee, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feeAmount")]
		public System.Nullable<System.Int64> FeeAmount { get; set; }
		
		/// <summary>
		/// Details of the FX trade (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fxTradeDetails")]
		public GetTransactionsByAccountIdv1ReturnTransactionsFxTradeDetails FxTradeDetails { get; set; }
		
		/// <summary>
		/// identifier for the fire.com account (assigned by fire.com) This field is only used in the condensed version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ican")]
		public System.Nullable<System.Int64> Ican { get; set; }
		
		/// <summary>
		/// The comment/reference on the transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="myRef")]
		public string MyRef { get; set; }
		
		/// <summary>
		/// (FOP payments only) The FOP Payment Code that was used to make this payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentRequestPublicCode")]
		public string PaymentRequestPublicCode { get; set; }
		
		/// <summary>
		/// Extra details about the transaction based on the scheme used to make the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proprietarySchemeDetails")]
		public GetTransactionsByAccountIdv1ReturnTransactionsProprietarySchemeDetails[] GetTransactionsByAccountIdv1ReturnTransactionsProprietarySchemeDetails { get; set; }
		
		/// <summary>
		/// The id of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public System.Nullable<System.Int64> RefId { get; set; }
		
		/// <summary>
		/// Details of the related third party involved in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedParty")]
		public GetTransactionsByAccountIdv1ReturnTransactionsRelatedParty RelatedParty { get; set; }
		
		/// <summary>
		/// The amount of the tax, if any (e.g. Stamp duty for ATM transactions)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public System.Nullable<System.Int64> TaxAmount { get; set; }
		
		/// <summary>
		/// The id of this side of the transaction (each transaction has two sides - a to and a from). This is used to get the details of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public System.Nullable<System.Int64> TxnId { get; set; }
		
		/// <summary>
		/// The type of the transaction:
		///* `LODGEMENT` - Bank Transfer received
		///* `PIS_LODGEMENT` - Fire Open Payments Lodgement received
		///* `MANUAL_TRANSFER` - Manual Transfer to
		///* `WITHDRAWAL` - Bank Transfer sent
		///* `REVERSAL` - Credit Reversal
		///* `DIRECT_DEBIT` - A direct debit.
		///* `DIRECT_DEBIT_REPRESENTED` - A Direct Debit that was requested again after initially failing.
		///* `DIRECT_DEBIT_REFUND` - A refund of a Direct debit.
		///* `INTERNAL_TRANSFER_TO` - Internal Transfer sent (between two of my accounts of the same currency)
		///* `INTERNAL_TRANSFER_FROM` - Internal Transfer received (between two of my accounts of the same currency)
		///* `WITHDRAWAL_RETURNED` - Bank Transfer sent returned
		///* `LODGEMENT_REVERSED` - Bank Transfer received returned
		///* `FX_INTERNAL_TRANSFER_FROM` - FX Internal Transfer received (between two of my accounts of different currency)
		///* `FX_INTERNAL_TRANSFER_TO` - FX Internal Transfer sent (between two of my accounts of different currency)
		///* `CREATE_CARD` - The fee taken when a debit card is issued.
		///* `ADD_ACCOUNT` - The fee taken when an account is created.
		///* `CREATE_ADDITIONAL_USER` - The fee taken when an additional user is created.       
		///* `CARD_POS_CONTACT_DEBIT` - Card used in store; read by magnetic stripe or pin
		///* `CARD_POS_CONTACT_CREDIT` - Card used in store; read by magnetic stripe or pin
		///* `CARD_POS_CONTACTLESS_DEBIT` - Card used in store; read by NFC
		///* `CARD_POS_CONTACTLESS_CREDIT` - Card used in store; read by NFC
		///* `CARD_ECOMMERCE_DEBIT` - Card used on the internet
		///* `CARD_ECOMMERCE_CREDIT` - Card used on the internet
		///* `CARD_ATM_DEBIT` - Card used in an ATM
		///* `CARD_ATM_CREDIT` - Card used in an ATM
		///* `CARD_INTERNATIONAL_POS_CONTACT_DEBIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
		///* `CARD_INTERNATIONAL_POS_CONTACT_CREDIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT` - Card used in store in non-processing currency; read by NFC
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT` - Card used in store in non-processing currency; read by NFC
		///* `CARD_INTERNATIONAL_ECOMMERCE_DEBIT	` - Card used on the internet in non-processing currency
		///* `CARD_INTERNATIONAL_ECOMMERCE_CREDIT` - Card used on the internet in non-processing currency
		///* `CARD_INTERNATIONAL_ATM_DEBIT` - Card used in an ATM in non-processing currency
		///* `CARD_INTERNATIONAL_ATM_CREDIT` - Card used in an ATM in non-processing currency
		///* `CARD_POS_CONTACT_DEBIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
		///* `CARD_POS_CONTACT_CREDIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
		///* `CARD_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store; read by NFC - reversed
		///* `CARD_POS_CONTACTLESS_CREDIT_REVERSAL` - Card used in store; read by NFC - reversed
		///* `CARD_ECOMMERCE_DEBIT_REVERSAL	` - Card used on the internet - reversed
		///* `CARD_ECOMMERCE_CREDIT_REVERSAL` - Card used on the internet - reversed
		///* `CARD_ATM_DEBIT_REVERSAL` - Card used in an ATM - reversed
		///* `CARD_ATM_CREDIT_REVERSAL` - Card used in an ATM - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACT_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACT_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT_REVERSAL` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types.
		///* `CARD_INTERNATIONAL_ECOMMERCE_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
		///* `CARD_INTERNATIONAL_ECOMMERCE_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
		///* `CARD_INTERNATIONAL_ATM_DEBIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
		///* `CARD_INTERNATIONAL_ATM_CREDIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The comment/reference on the transaction that appears on the recipients statement. Only for withdrawals
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yourRef")]
		public string YourRef { get; set; }
	}
	
	public class GetTransactionsByAccountIdv1ReturnTransactionsBatchItemDetails
	{
		
		/// <summary>
		/// The UUID for this item in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemPublicUuid")]
		public string BatchItemPublicUuid { get; set; }
		
		/// <summary>
		/// The optional name given to the batch at creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchName")]
		public string BatchName { get; set; }
		
		/// <summary>
		/// The UUID for this batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchPublicUuid")]
		public string BatchPublicUuid { get; set; }
		
		/// <summary>
		/// The optional job number given to the batch to link it to your own system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobNumber")]
		public string JobNumber { get; set; }
	}
	
	public class GetTransactionsByAccountIdv1ReturnTransactionsCard
	{
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cardId")]
		public System.Nullable<System.Int64> CardId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="embossBusinessName")]
		public string EmbossBusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="embossCardName")]
		public string EmbossCardName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiryDate")]
		public System.Nullable<System.DateTimeOffset> ExpiryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maskedPan")]
		public string MaskedPan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
	}
	
	public class GetTransactionsByAccountIdv1ReturnTransactionsCurrency
	{
		
		/// <summary>
		/// The three letter code for the currency - either `EUR` or `GBP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public GetAccountsReturnAccountsCurrencyCode Code { get; set; }
		
		/// <summary>
		/// The name of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class GetTransactionsByAccountIdv1ReturnTransactionsDirectDebitDetails
	{
		
		/// <summary>
		/// The direct debit reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitReference")]
		public string DirectDebitReference { get; set; }
		
		/// <summary>
		/// The UUID for the direct debit payment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitUuid")]
		public string DirectDebitUuid { get; set; }
		
		/// <summary>
		/// the reference of the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateReference")]
		public string MandateReference { get; set; }
		
		/// <summary>
		/// The UUID for the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateUUid")]
		public string MandateUUid { get; set; }
		
		/// <summary>
		/// The UUID for the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateUuid")]
		public string MandateUuid { get; set; }
		
		/// <summary>
		/// The Alias of the party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorAlias")]
		public string OriginatorAlias { get; set; }
		
		/// <summary>
		/// URL pointing to a large version of the Originator Logo (if available)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorLogoUrlLarge")]
		public string OriginatorLogoUrlLarge { get; set; }
		
		/// <summary>
		/// URL pointing to a small version of the Originator Logo (if available)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorLogoUrlSmall")]
		public string OriginatorLogoUrlSmall { get; set; }
		
		/// <summary>
		/// The creator of the party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorName")]
		public string OriginatorName { get; set; }
		
		/// <summary>
		/// Set by party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorReference")]
		public string OriginatorReference { get; set; }
	}
	
	public class GetTransactionsByAccountIdv1ReturnTransactionsFxTradeDetails
	{
		
		/// <summary>
		/// amount of buyCurrency being bought
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyAmount")]
		public System.Nullable<System.Int64> BuyAmount { get; set; }
		
		/// <summary>
		/// currency which is being bought
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyCurrency")]
		public string BuyCurrency { get; set; }
		
		/// <summary>
		/// type of trade - BUY or SELL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedSide")]
		public string FixedSide { get; set; }
		
		/// <summary>
		/// The FX provider used to make the trade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// exchange rate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate4d")]
		public System.Nullable<System.Int64> Rate4d { get; set; }
		
		/// <summary>
		/// amount of sellCurrency being sold
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellAmount")]
		public System.Nullable<System.Int64> SellAmount { get; set; }
		
		/// <summary>
		/// currency which is being sold
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellCurrency")]
		public string SellCurrency { get; set; }
	}
	
	public class GetTransactionsByAccountIdv1ReturnTransactionsProprietarySchemeDetails
	{
		
		/// <summary>
		/// the scheme proprietary data - key pairs separated by | and key/values separated by ^
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// the type of proprietary scheme - SCT for SEPA, FPS for Faster Payments etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class GetTransactionsByAccountIdv1ReturnTransactionsRelatedParty
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public GetTransactionsByAccountIdv1ReturnTransactionsRelatedPartyAccount Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GetTransactionsByAccountIdv1ReturnTransactionsRelatedPartyType> Type { get; set; }
	}
	
	public class GetTransactionsByAccountIdv1ReturnTransactionsRelatedPartyAccount
	{
		
		/// <summary>
		/// the Account Number of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// the name the user gives to the account to help them identify it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// the BIC of the account (provided if currency is EUR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bic")]
		public string Bic { get; set; }
		
		/// <summary>
		/// the IBAN of the account (provided if currency is EUR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iban")]
		public string Iban { get; set; }
		
		/// <summary>
		/// identifier for the fire.com account (assigned by fire.com)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// the Sort Code of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nsc")]
		public string Nsc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetTransactionsByAccountIdv1ReturnTransactionsRelatedPartyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRE_ACCOUNT = 0,
	}
	
	public class GetTransactionsByAccountIdFilteredReturn
	{
		
		/// <summary>
		/// milisecond timestamp of date range to value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRangeTo")]
		public System.Nullable<System.Int64> DateRangeTo { get; set; }
		
		/// <summary>
		/// The total number of card transactions in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public GetTransactionsByAccountIdFilteredReturnTransactions[] GetTransactionsByAccountIdFilteredReturnTransactions { get; set; }
	}
	
	public class GetTransactionsByAccountIdFilteredReturnTransactions
	{
		
		/// <summary>
		/// Net amount lodged or taken from the account after fees and charges were applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountAfterCharges")]
		public System.Nullable<System.Int64> AmountAfterCharges { get; set; }
		
		/// <summary>
		/// Amount of the transaction before the fees and taxes were applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountBeforeCharges")]
		public System.Nullable<System.Int64> AmountBeforeCharges { get; set; }
		
		/// <summary>
		/// the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int64> Balance { get; set; }
		
		/// <summary>
		/// Details of the batch run if this transaction was part of a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemDetails")]
		public GetTransactionsByAccountIdFilteredReturnTransactionsBatchItemDetails BatchItemDetails { get; set; }
		
		/// <summary>
		/// Details of the card used (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public GetTransactionsByAccountIdFilteredReturnTransactionsCard Card { get; set; }
		
		/// <summary>
		/// The currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetTransactionsByAccountIdFilteredReturnTransactionsCurrency Currency { get; set; }
		
		/// <summary>
		/// Date of the transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateAcknowledged")]
		public System.Nullable<System.DateTimeOffset> DateAcknowledged { get; set; }
		
		/// <summary>
		/// Details of the direct debit (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitDetails")]
		public GetTransactionsByAccountIdFilteredReturnTransactionsDirectDebitDetails DirectDebitDetails { get; set; }
		
		/// <summary>
		/// An internal Fire reference for the transaction (UUID)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventUuid")]
		public string EventUuid { get; set; }
		
		/// <summary>
		/// The amount of the fee, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feeAmount")]
		public System.Nullable<System.Int64> FeeAmount { get; set; }
		
		/// <summary>
		/// Details of the FX trade (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fxTradeDetails")]
		public GetTransactionsByAccountIdFilteredReturnTransactionsFxTradeDetails FxTradeDetails { get; set; }
		
		/// <summary>
		/// identifier for the fire.com account (assigned by fire.com) This field is only used in the condensed version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ican")]
		public System.Nullable<System.Int64> Ican { get; set; }
		
		/// <summary>
		/// The comment/reference on the transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="myRef")]
		public string MyRef { get; set; }
		
		/// <summary>
		/// (FOP payments only) The FOP Payment Code that was used to make this payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentRequestPublicCode")]
		public string PaymentRequestPublicCode { get; set; }
		
		/// <summary>
		/// Extra details about the transaction based on the scheme used to make the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proprietarySchemeDetails")]
		public GetTransactionsByAccountIdFilteredReturnTransactionsProprietarySchemeDetails[] GetTransactionsByAccountIdFilteredReturnTransactionsProprietarySchemeDetails { get; set; }
		
		/// <summary>
		/// The id of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public System.Nullable<System.Int64> RefId { get; set; }
		
		/// <summary>
		/// Details of the related third party involved in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedParty")]
		public GetTransactionsByAccountIdFilteredReturnTransactionsRelatedParty RelatedParty { get; set; }
		
		/// <summary>
		/// The amount of the tax, if any (e.g. Stamp duty for ATM transactions)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public System.Nullable<System.Int64> TaxAmount { get; set; }
		
		/// <summary>
		/// The id of this side of the transaction (each transaction has two sides - a to and a from). This is used to get the details of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public System.Nullable<System.Int64> TxnId { get; set; }
		
		/// <summary>
		/// The type of the transaction:
		///* `LODGEMENT` - Bank Transfer received
		///* `PIS_LODGEMENT` - Fire Open Payments Lodgement received
		///* `MANUAL_TRANSFER` - Manual Transfer to
		///* `WITHDRAWAL` - Bank Transfer sent
		///* `REVERSAL` - Credit Reversal
		///* `DIRECT_DEBIT` - A direct debit.
		///* `DIRECT_DEBIT_REPRESENTED` - A Direct Debit that was requested again after initially failing.
		///* `DIRECT_DEBIT_REFUND` - A refund of a Direct debit.
		///* `INTERNAL_TRANSFER_TO` - Internal Transfer sent (between two of my accounts of the same currency)
		///* `INTERNAL_TRANSFER_FROM` - Internal Transfer received (between two of my accounts of the same currency)
		///* `WITHDRAWAL_RETURNED` - Bank Transfer sent returned
		///* `LODGEMENT_REVERSED` - Bank Transfer received returned
		///* `FX_INTERNAL_TRANSFER_FROM` - FX Internal Transfer received (between two of my accounts of different currency)
		///* `FX_INTERNAL_TRANSFER_TO` - FX Internal Transfer sent (between two of my accounts of different currency)
		///* `CREATE_CARD` - The fee taken when a debit card is issued.
		///* `ADD_ACCOUNT` - The fee taken when an account is created.
		///* `CREATE_ADDITIONAL_USER` - The fee taken when an additional user is created.       
		///* `CARD_POS_CONTACT_DEBIT` - Card used in store; read by magnetic stripe or pin
		///* `CARD_POS_CONTACT_CREDIT` - Card used in store; read by magnetic stripe or pin
		///* `CARD_POS_CONTACTLESS_DEBIT` - Card used in store; read by NFC
		///* `CARD_POS_CONTACTLESS_CREDIT` - Card used in store; read by NFC
		///* `CARD_ECOMMERCE_DEBIT` - Card used on the internet
		///* `CARD_ECOMMERCE_CREDIT` - Card used on the internet
		///* `CARD_ATM_DEBIT` - Card used in an ATM
		///* `CARD_ATM_CREDIT` - Card used in an ATM
		///* `CARD_INTERNATIONAL_POS_CONTACT_DEBIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
		///* `CARD_INTERNATIONAL_POS_CONTACT_CREDIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT` - Card used in store in non-processing currency; read by NFC
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT` - Card used in store in non-processing currency; read by NFC
		///* `CARD_INTERNATIONAL_ECOMMERCE_DEBIT	` - Card used on the internet in non-processing currency
		///* `CARD_INTERNATIONAL_ECOMMERCE_CREDIT` - Card used on the internet in non-processing currency
		///* `CARD_INTERNATIONAL_ATM_DEBIT` - Card used in an ATM in non-processing currency
		///* `CARD_INTERNATIONAL_ATM_CREDIT` - Card used in an ATM in non-processing currency
		///* `CARD_POS_CONTACT_DEBIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
		///* `CARD_POS_CONTACT_CREDIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
		///* `CARD_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store; read by NFC - reversed
		///* `CARD_POS_CONTACTLESS_CREDIT_REVERSAL` - Card used in store; read by NFC - reversed
		///* `CARD_ECOMMERCE_DEBIT_REVERSAL	` - Card used on the internet - reversed
		///* `CARD_ECOMMERCE_CREDIT_REVERSAL` - Card used on the internet - reversed
		///* `CARD_ATM_DEBIT_REVERSAL` - Card used in an ATM - reversed
		///* `CARD_ATM_CREDIT_REVERSAL` - Card used in an ATM - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACT_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACT_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT_REVERSAL` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types.
		///* `CARD_INTERNATIONAL_ECOMMERCE_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
		///* `CARD_INTERNATIONAL_ECOMMERCE_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
		///* `CARD_INTERNATIONAL_ATM_DEBIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
		///* `CARD_INTERNATIONAL_ATM_CREDIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The comment/reference on the transaction that appears on the recipients statement. Only for withdrawals
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yourRef")]
		public string YourRef { get; set; }
	}
	
	public class GetTransactionsByAccountIdFilteredReturnTransactionsBatchItemDetails
	{
		
		/// <summary>
		/// The UUID for this item in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemPublicUuid")]
		public string BatchItemPublicUuid { get; set; }
		
		/// <summary>
		/// The optional name given to the batch at creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchName")]
		public string BatchName { get; set; }
		
		/// <summary>
		/// The UUID for this batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchPublicUuid")]
		public string BatchPublicUuid { get; set; }
		
		/// <summary>
		/// The optional job number given to the batch to link it to your own system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobNumber")]
		public string JobNumber { get; set; }
	}
	
	public class GetTransactionsByAccountIdFilteredReturnTransactionsCard
	{
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cardId")]
		public System.Nullable<System.Int64> CardId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="embossBusinessName")]
		public string EmbossBusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="embossCardName")]
		public string EmbossCardName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiryDate")]
		public System.Nullable<System.DateTimeOffset> ExpiryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maskedPan")]
		public string MaskedPan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
	}
	
	public class GetTransactionsByAccountIdFilteredReturnTransactionsCurrency
	{
		
		/// <summary>
		/// The three letter code for the currency - either `EUR` or `GBP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public GetAccountsReturnAccountsCurrencyCode Code { get; set; }
		
		/// <summary>
		/// The name of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class GetTransactionsByAccountIdFilteredReturnTransactionsDirectDebitDetails
	{
		
		/// <summary>
		/// The direct debit reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitReference")]
		public string DirectDebitReference { get; set; }
		
		/// <summary>
		/// The UUID for the direct debit payment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitUuid")]
		public string DirectDebitUuid { get; set; }
		
		/// <summary>
		/// the reference of the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateReference")]
		public string MandateReference { get; set; }
		
		/// <summary>
		/// The UUID for the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateUUid")]
		public string MandateUUid { get; set; }
		
		/// <summary>
		/// The UUID for the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateUuid")]
		public string MandateUuid { get; set; }
		
		/// <summary>
		/// The Alias of the party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorAlias")]
		public string OriginatorAlias { get; set; }
		
		/// <summary>
		/// URL pointing to a large version of the Originator Logo (if available)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorLogoUrlLarge")]
		public string OriginatorLogoUrlLarge { get; set; }
		
		/// <summary>
		/// URL pointing to a small version of the Originator Logo (if available)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorLogoUrlSmall")]
		public string OriginatorLogoUrlSmall { get; set; }
		
		/// <summary>
		/// The creator of the party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorName")]
		public string OriginatorName { get; set; }
		
		/// <summary>
		/// Set by party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorReference")]
		public string OriginatorReference { get; set; }
	}
	
	public class GetTransactionsByAccountIdFilteredReturnTransactionsFxTradeDetails
	{
		
		/// <summary>
		/// amount of buyCurrency being bought
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyAmount")]
		public System.Nullable<System.Int64> BuyAmount { get; set; }
		
		/// <summary>
		/// currency which is being bought
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyCurrency")]
		public string BuyCurrency { get; set; }
		
		/// <summary>
		/// type of trade - BUY or SELL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedSide")]
		public string FixedSide { get; set; }
		
		/// <summary>
		/// The FX provider used to make the trade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// exchange rate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate4d")]
		public System.Nullable<System.Int64> Rate4d { get; set; }
		
		/// <summary>
		/// amount of sellCurrency being sold
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellAmount")]
		public System.Nullable<System.Int64> SellAmount { get; set; }
		
		/// <summary>
		/// currency which is being sold
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellCurrency")]
		public string SellCurrency { get; set; }
	}
	
	public class GetTransactionsByAccountIdFilteredReturnTransactionsProprietarySchemeDetails
	{
		
		/// <summary>
		/// the scheme proprietary data - key pairs separated by | and key/values separated by ^
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// the type of proprietary scheme - SCT for SEPA, FPS for Faster Payments etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class GetTransactionsByAccountIdFilteredReturnTransactionsRelatedParty
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public GetTransactionsByAccountIdFilteredReturnTransactionsRelatedPartyAccount Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GetTransactionsByAccountIdv1ReturnTransactionsRelatedPartyType Type { get; set; }
	}
	
	public class GetTransactionsByAccountIdFilteredReturnTransactionsRelatedPartyAccount
	{
		
		/// <summary>
		/// the Account Number of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// the name the user gives to the account to help them identify it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// the BIC of the account (provided if currency is EUR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bic")]
		public string Bic { get; set; }
		
		/// <summary>
		/// the IBAN of the account (provided if currency is EUR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iban")]
		public string Iban { get; set; }
		
		/// <summary>
		/// identifier for the fire.com account (assigned by fire.com)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// the Sort Code of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nsc")]
		public string Nsc { get; set; }
	}
	
	public class CreateApiApplicationPostBody
	{
		
		/// <summary>
		/// A name for the API Application to help you identify it
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Whether or not this API Application can be used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The date that this API Application can no longer be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		public System.Nullable<System.DateTimeOffset> Expiry { get; set; }
		
		/// <summary>
		/// The ICAN of one of your Fire accounts. Restrict this API Application to a certan account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ican")]
		public System.Nullable<System.Int64> Ican { get; set; }
		
		/// <summary>
		/// Number of approvals required to create a payee in a batch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfPayeeApprovalsRequired")]
		public System.Nullable<System.Int32> NumberOfPayeeApprovalsRequired { get; set; }
		
		/// <summary>
		/// Number of approvals required to process a payment in a batch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfPaymentApprovalsRequired")]
		public System.Nullable<System.Int32> NumberOfPaymentApprovalsRequired { get; set; }
		
		/// <summary>
		/// The list of permissions required
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	public class CreateApiApplicationReturn
	{
		
		/// <summary>
		/// The ID of the API Application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public System.Nullable<System.Int64> ApplicationId { get; set; }
		
		/// <summary>
		/// The Client ID of the new API Application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The Client Key of the new API Application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientKey")]
		public string ClientKey { get; set; }
		
		/// <summary>
		/// Whether or not this API Application can be used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The date that this API Application can no longer be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		public System.Nullable<System.DateTimeOffset> Expiry { get; set; }
		
		/// <summary>
		/// The ICAN of one of your Fire accounts. Restrict this API Application to a certan account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ican")]
		public System.Nullable<System.Int64> Ican { get; set; }
		
		/// <summary>
		/// Number of approvals required to create a payee in a batch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfPayeeApprovalsRequired")]
		public System.Nullable<System.Int32> NumberOfPayeeApprovalsRequired { get; set; }
		
		/// <summary>
		/// Number of approvals required to process a payment in a batch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfPaymentApprovalsRequired")]
		public System.Nullable<System.Int32> NumberOfPaymentApprovalsRequired { get; set; }
		
		/// <summary>
		/// The Refresh Token of the new API Application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
	}
	
	public class AuthenticatePostBody
	{
		
		/// <summary>
		/// The Client ID for this API Application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The SHA256 hash of the nonce above and the app’s Client Key. The Client Key will only be shown to you when you create the app, so don’t forget to save it somewhere safe. SECRET=( `/bin/echo -n $NONCE$CLIENT_KEY | sha256sum` ).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Always `AccessToken`. (This will change to `refresh_token` in a future release.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grantType")]
		public System.Nullable<AuthenticatePostBodyGrantType> GrantType { get; set; }
		
		/// <summary>
		/// A random non-repeating number used as a salt for the `clientSecret` below. The simplest nonce is a unix time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonce")]
		public System.Nullable<System.Int64> Nonce { get; set; }
		
		/// <summary>
		/// The Refresh Token for this API Application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuthenticatePostBodyGrantType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccessToken = 0,
	}
	
	public class AuthenticateReturn
	{
		
		/// <summary>
		/// The App Bearer Access Token you can use in further API calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// The ID of the application you are using.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiApplicationId")]
		public System.Nullable<System.Int64> ApiApplicationId { get; set; }
		
		/// <summary>
		/// The business ID for the business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessId")]
		public System.Nullable<System.Int64> BusinessId { get; set; }
		
		/// <summary>
		/// The expiry date and time for this token (ISO-8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		public System.Nullable<System.DateTimeOffset> Expiry { get; set; }
		
		/// <summary>
		/// The permissions assigned to the Access Token as an array of strings. This provides information on what API access it is allowed. See the section on Scope below.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	public class GetListOfAspspsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="aspsps")]
		public GetListOfAspspsReturnAspsps[] GetListOfAspspsReturnAspsps { get; set; }
		
		/// <summary>
		/// The total number of ASPSPs in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class GetListOfAspspsReturnAspsps
	{
		
		/// <summary>
		/// The name of the ASPSP / bank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// The UUID associated with the ASPSP / bank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aspspUuid")]
		public string AspspUuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public GetListOfAspspsReturnAspspsCountry Country { get; set; }
		
		/// <summary>
		/// The currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetListOfAspspsReturnAspspsCurrency Currency { get; set; }
		
		/// <summary>
		/// The date the ASPSP / bank was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// The date the ASPSP / bank was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// A link to the ASPSP / bank's logo in SVG format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logoUrl")]
		public string LogoUrl { get; set; }
	}
	
	public class GetListOfAspspsReturnAspspsCountry
	{
		
		/// <summary>
		/// The 2-letter code for the country - e.g. `IE`, `GP`...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The name of the country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class GetListOfAspspsReturnAspspsCurrency
	{
		
		/// <summary>
		/// The three letter code for the currency - either `EUR` or `GBP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public GetAccountsReturnAccountsCurrencyCode Code { get; set; }
		
		/// <summary>
		/// The name of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public enum GetBatchesBatchStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	public enum GetBatchesBatchTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_TRANSFER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_TRANSFER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNATIONAL_TRANSFER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_PAYEE = 3,
	}
	
	public enum GetBatchesOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 0,
	}
	
	public enum GetBatchesOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 1,
	}
	
	public class GetBatchesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public GetBatchesReturnItems[] GetBatchesReturnItems { get; set; }
		
		/// <summary>
		/// total number of batches returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
	}
	
	public class GetBatchesReturnItems
	{
		
		/// <summary>
		/// The amount of funds to send. In cent or pence
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// The amount of the transfer after fees and taxes. in pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountAfterCharges")]
		public System.Nullable<System.Int64> AmountAfterCharges { get; set; }
		
		/// <summary>
		/// A UUID for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemUuid")]
		public string BatchItemUuid { get; set; }
		
		/// <summary>
		/// The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// The fee charged by fire.com for the payment. In pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feeAmount")]
		public System.Nullable<System.Int64> FeeAmount { get; set; }
		
		/// <summary>
		/// The Fire account ID of the source account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icanFrom")]
		public System.Nullable<System.Int64> IcanFrom { get; set; }
		
		/// <summary>
		/// The Fire account ID for the fire.com account the funds are sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icanTo")]
		public System.Nullable<System.Int64> IcanTo { get; set; }
		
		/// <summary>
		/// The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// The reference on the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// The ID of the resulting payment in your account. Can be used to retrieve the transaction using the https://api.fire.com/business/v1/accounts/{accountId}/transactions/{refId} endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public System.Nullable<System.Int64> RefId { get; set; }
		
		/// <summary>
		/// The outcome of the attempted transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public GetBatchesReturnItemsResult Result { get; set; }
		
		/// <summary>
		/// status of the batch if internal trasnfer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public GetBatchesBatchStatus Status { get; set; }
		
		/// <summary>
		/// Any taxes/duty collected by fire.com for this payments (e.g. stamp duty etc). In pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public System.Nullable<System.Int64> TaxAmount { get; set; }
	}
	
	public class GetBatchesReturnItemsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int64> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateBatchPaymentPostBody
	{
		
		/// <summary>
		/// An optional name you give to the batch at creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchName")]
		public string BatchName { get; set; }
		
		/// <summary>
		/// An optional POST URL that all events for this batch will be sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callbackUrl")]
		public string CallbackUrl { get; set; }
		
		/// <summary>
		/// 3 digit ISO code for the currency you wish to send - GBP, EUR, USD, CAD, etc...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// An optional job number you can give to the batch to help link it to your own system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobNumber")]
		public string JobNumber { get; set; }
		
		/// <summary>
		/// The type of the batch - can be one of the listed 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CreateBatchPaymentPostBodyType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateBatchPaymentPostBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_TRANSFER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_TRANSFER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNATIONAL_TRANSFER = 2,
	}
	
	public class CreateBatchPaymentReturn
	{
		
		/// <summary>
		/// A UUID for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchUuid")]
		public string BatchUuid { get; set; }
	}
	
	public class GetDetailsSingleBatchReturn
	{
		
		/// <summary>
		/// An optional name you give to the batch at creation time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchName")]
		public string BatchName { get; set; }
		
		/// <summary>
		/// A UUID for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchUuid")]
		public string BatchUuid { get; set; }
		
		/// <summary>
		/// An optional POST URL that all events for this batch will be sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callbackUrl")]
		public string CallbackUrl { get; set; }
		
		/// <summary>
		/// All payments in the batch must be the same currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// An optional job number you can give to the batch to help link it to your own system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobNumber")]
		public string JobNumber { get; set; }
		
		/// <summary>
		/// The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// Once processed, a count of the number of items that didn’t process successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfItemsFailed")]
		public System.Nullable<System.Int64> NumberOfItemsFailed { get; set; }
		
		/// <summary>
		/// A count of the number of items in the batch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfItemsSubmitted")]
		public System.Nullable<System.Int64> NumberOfItemsSubmitted { get; set; }
		
		/// <summary>
		/// Once processed, a count of the number of items that processed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfItemsSucceeded")]
		public System.Nullable<System.Int64> NumberOfItemsSucceeded { get; set; }
		
		/// <summary>
		/// A string describing where the batch originated - for instance the name of the API token that was used, or showing that the batch was automatically created by fire.com (in the case of a new payee batch).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceName")]
		public string SourceName { get; set; }
		
		/// <summary>
		/// status of the batch object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GetDetailsSingleBatchReturnStatus> Status { get; set; }
		
		/// <summary>
		/// The type of the batch - can be one of the listed enums
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GetBatchesBatchTypes Type { get; set; }
		
		/// <summary>
		/// Once processed, a sum of the value of items that didn’t process successfully. Specified in pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueOfItemsFailed")]
		public System.Nullable<System.Int64> ValueOfItemsFailed { get; set; }
		
		/// <summary>
		/// A sum of the value of items in the batch. Specified in pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueOfItemsSubmitted")]
		public System.Nullable<System.Int64> ValueOfItemsSubmitted { get; set; }
		
		/// <summary>
		/// Once processed, a sum of the value of items that processed successfully. Specified in pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueOfItemsSucceeded")]
		public System.Nullable<System.Int64> ValueOfItemsSucceeded { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetDetailsSingleBatchReturnStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_APPROVAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_PARENT_BATCH_APPROVAL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_FOR_PROCESSING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 7,
	}
	
	public class GetListofApproversForBatchReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="approvals")]
		public GetListofApproversForBatchReturnApprovals[] GetListofApproversForBatchReturnApprovals { get; set; }
	}
	
	public class GetListofApproversForBatchReturnApprovals
	{
		
		/// <summary>
		/// User email address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// User id assigned by fire.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	public class GetItemsBatchBankTransferReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public GetItemsBatchBankTransferReturnItems[] GetItemsBatchBankTransferReturnItems { get; set; }
		
		/// <summary>
		/// total number of batches returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
	}
	
	public class GetItemsBatchBankTransferReturnItems
	{
		
		/// <summary>
		/// The amount of funds to send. In cent or pence
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// The amount of the transfer after fees and taxes. in pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountAfterCharges")]
		public System.Nullable<System.Int64> AmountAfterCharges { get; set; }
		
		/// <summary>
		/// A UUID for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemUuid")]
		public string BatchItemUuid { get; set; }
		
		/// <summary>
		/// The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// The fee charged by fire.com for the payment. In pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feeAmount")]
		public System.Nullable<System.Int64> FeeAmount { get; set; }
		
		/// <summary>
		/// The Fire account ID of the source account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icanFrom")]
		public System.Nullable<System.Int64> IcanFrom { get; set; }
		
		/// <summary>
		/// The Fire account ID for the fire.com account the funds are sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icanTo")]
		public System.Nullable<System.Int64> IcanTo { get; set; }
		
		/// <summary>
		/// The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// The reference on the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// The ID of the resulting payment in your account. Can be used to retrieve the transaction using the https://api.fire.com/business/v1/accounts/{accountId}/transactions/{refId} endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public System.Nullable<System.Int64> RefId { get; set; }
		
		/// <summary>
		/// The outcome of the attempted transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public GetItemsBatchBankTransferReturnItemsResult Result { get; set; }
		
		/// <summary>
		/// status of the batch if internal trasnfer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public GetBatchesBatchStatus Status { get; set; }
		
		/// <summary>
		/// Any taxes/duty collected by fire.com for this payments (e.g. stamp duty etc). In pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public System.Nullable<System.Int64> TaxAmount { get; set; }
	}
	
	public class GetItemsBatchBankTransferReturnItemsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int64> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class AddBankTransferBatchPaymentPostBody
	{
		
		/// <summary>
		/// The value of the transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// The destination account holder name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destAccountHolderName")]
		public string DestAccountHolderName { get; set; }
		
		/// <summary>
		/// The destination Account Number if a GBP bank transfer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destAccountNumber")]
		public string DestAccountNumber { get; set; }
		
		/// <summary>
		/// The destination IBAN if a Euro Bank transfer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destIban")]
		public string DestIban { get; set; }
		
		/// <summary>
		/// The destination Nsc if a GBP bank transfer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destNsc")]
		public string DestNsc { get; set; }
		
		/// <summary>
		/// The Fire account ID for the fire.com account the funds are taken from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icanFrom")]
		public System.Nullable<System.Int64> IcanFrom { get; set; }
		
		/// <summary>
		/// The reference on the transaction for your records - not shown to the beneficiary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="myRef")]
		public string MyRef { get; set; }
		
		/// <summary>
		/// Use ACCOUNT_DETAILS if you are providing account numbers/sort codes/IBANs (Mode 2). Specify the account details in the destIban, destAccountHolderName, destNsc or destAccountNumber fields as appropriate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeType")]
		public System.Nullable<AddBankTransferBatchPaymentPostBodyPayeeType> PayeeType { get; set; }
		
		/// <summary>
		/// The reference on the transaction - displayed on the beneficiary bank statement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yourRef")]
		public string YourRef { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AddBankTransferBatchPaymentPostBodyPayeeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_DETAILS = 0,
	}
	
	public class AddBankTransferBatchPaymentReturn
	{
		
		/// <summary>
		/// A Batch Item UUID for this item. Note* Do not confuse this for BatchUuid when submitting a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemUuid")]
		public string BatchItemUuid { get; set; }
	}
	
	public class GetItemsBatchInternalTrasnferReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public GetItemsBatchInternalTrasnferReturnItems[] GetItemsBatchInternalTrasnferReturnItems { get; set; }
		
		/// <summary>
		/// total number of batches returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
	}
	
	public class GetItemsBatchInternalTrasnferReturnItems
	{
		
		/// <summary>
		/// The amount of funds to send. In cent or pence
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// The amount of the transfer after fees and taxes. in pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountAfterCharges")]
		public System.Nullable<System.Int64> AmountAfterCharges { get; set; }
		
		/// <summary>
		/// A UUID for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemUuid")]
		public string BatchItemUuid { get; set; }
		
		/// <summary>
		/// The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// The fee charged by fire.com for the payment. In pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feeAmount")]
		public System.Nullable<System.Int64> FeeAmount { get; set; }
		
		/// <summary>
		/// The Fire account ID of the source account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icanFrom")]
		public System.Nullable<System.Int64> IcanFrom { get; set; }
		
		/// <summary>
		/// The Fire account ID for the fire.com account the funds are sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icanTo")]
		public System.Nullable<System.Int64> IcanTo { get; set; }
		
		/// <summary>
		/// The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// The reference on the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// The ID of the resulting payment in your account. Can be used to retrieve the transaction using the https://api.fire.com/business/v1/accounts/{accountId}/transactions/{refId} endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public System.Nullable<System.Int64> RefId { get; set; }
		
		/// <summary>
		/// The outcome of the attempted transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public GetItemsBatchInternalTrasnferReturnItemsResult Result { get; set; }
		
		/// <summary>
		/// status of the batch if internal trasnfer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public GetBatchesBatchStatus Status { get; set; }
		
		/// <summary>
		/// Any taxes/duty collected by fire.com for this payments (e.g. stamp duty etc). In pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public System.Nullable<System.Int64> TaxAmount { get; set; }
	}
	
	public class GetItemsBatchInternalTrasnferReturnItemsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int64> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class AddInternalTransferBatchPaymentPostBody
	{
		
		/// <summary>
		/// amount of funds to be transfered
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// The account ID for the fire.com account the funds are taken from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icanFrom")]
		public System.Nullable<System.Int64> IcanFrom { get; set; }
		
		/// <summary>
		/// The account ID for the fire.com account the funds are directed to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icanTo")]
		public System.Nullable<System.Int64> IcanTo { get; set; }
		
		/// <summary>
		/// The reference on the transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
	}
	
	public class AddInternalTransferBatchPaymentReturn
	{
		
		/// <summary>
		/// A Batch Item UUID for this item. Note* Do not confuse this for BatchUuid when submitting a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemUuid")]
		public string BatchItemUuid { get; set; }
	}
	
	public class GetListofCardsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="cards")]
		public GetListofCardsReturnCards[] GetListofCardsReturnCards { get; set; }
	}
	
	public class GetListofCardsReturnCards
	{
		
		/// <summary>
		/// Whether the card is blocked or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blocked")]
		public System.Nullable<System.Boolean> Blocked { get; set; }
		
		/// <summary>
		/// card id assigned by fire.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardId")]
		public System.Nullable<System.Int64> CardId { get; set; }
		
		/// <summary>
		/// The date-time the card was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// card user email address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// identifier for the eur fire.com account (assigned by fire.com)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eurIcan")]
		public System.Nullable<System.Int64> EurIcan { get; set; }
		
		/// <summary>
		/// card expiry date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryDate")]
		public System.Nullable<System.DateTimeOffset> ExpiryDate { get; set; }
		
		/// <summary>
		/// card user first name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// identifier for the gbp fire.com account (assigned by fire.com)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gbpIcan")]
		public System.Nullable<System.Int64> GbpIcan { get; set; }
		
		/// <summary>
		/// card user last name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// card number (masked)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maskedPan")]
		public string MaskedPan { get; set; }
		
		/// <summary>
		/// card provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public System.Nullable<GetListofCardsReturnCardsProvider> Provider { get; set; }
		
		/// <summary>
		/// card status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GetListofCardsReturnCardsStatus> Status { get; set; }
		
		/// <summary>
		/// reason for card status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public System.Nullable<GetListofCardsReturnCardsStatusReason> StatusReason { get; set; }
		
		/// <summary>
		/// card user id assigned by fire.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetListofCardsReturnCardsProvider
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTERCARD = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetListofCardsReturnCardsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED_ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED_INACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEACTIVATED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetListofCardsReturnCardsStatusReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOST_CARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOLEN_CARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARD_DESTROYED = 2,
	}
	
	public class CreateNewCardPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="acceptFeesAndCharges")]
		public System.Nullable<System.Boolean> AcceptFeesAndCharges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public System.Nullable<CreateNewCardPostBodyAddressType> AddressType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cardPin")]
		public string CardPin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eurIcan")]
		public System.Nullable<System.Int64> EurIcan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gbpIcan")]
		public System.Nullable<System.Int64> GbpIcan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateNewCardPostBodyAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS = 1,
	}
	
	public class CreateNewCardReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="cardId")]
		public System.Nullable<System.Int64> CardId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiryDate")]
		public System.Nullable<System.DateTimeOffset> ExpiryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maskedPan")]
		public string MaskedPan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<CreateNewCardReturnStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateNewCardReturnStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED_ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED_INACTIVE = 1,
	}
	
	public class GetListofCardTransactionsReturn
	{
		
		/// <summary>
		/// milisecond timestamp of date range to value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRangeTo")]
		public System.Nullable<System.Int64> DateRangeTo { get; set; }
		
		/// <summary>
		/// The total number of card transactions in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public GetListofCardTransactionsReturnTransactions[] GetListofCardTransactionsReturnTransactions { get; set; }
	}
	
	public class GetListofCardTransactionsReturnTransactions
	{
		
		/// <summary>
		/// Net amount lodged or taken from the account after fees and charges were applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountAfterCharges")]
		public System.Nullable<System.Int64> AmountAfterCharges { get; set; }
		
		/// <summary>
		/// Amount of the transaction before the fees and taxes were applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountBeforeCharges")]
		public System.Nullable<System.Int64> AmountBeforeCharges { get; set; }
		
		/// <summary>
		/// the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int64> Balance { get; set; }
		
		/// <summary>
		/// Details of the batch run if this transaction was part of a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemDetails")]
		public GetListofCardTransactionsReturnTransactionsBatchItemDetails BatchItemDetails { get; set; }
		
		/// <summary>
		/// Details of the card used (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public GetListofCardTransactionsReturnTransactionsCard Card { get; set; }
		
		/// <summary>
		/// The currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetListofCardTransactionsReturnTransactionsCurrency Currency { get; set; }
		
		/// <summary>
		/// Date of the transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateAcknowledged")]
		public System.Nullable<System.DateTimeOffset> DateAcknowledged { get; set; }
		
		/// <summary>
		/// Details of the direct debit (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitDetails")]
		public GetListofCardTransactionsReturnTransactionsDirectDebitDetails DirectDebitDetails { get; set; }
		
		/// <summary>
		/// An internal Fire reference for the transaction (UUID)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventUuid")]
		public string EventUuid { get; set; }
		
		/// <summary>
		/// The amount of the fee, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feeAmount")]
		public System.Nullable<System.Int64> FeeAmount { get; set; }
		
		/// <summary>
		/// Details of the FX trade (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fxTradeDetails")]
		public GetListofCardTransactionsReturnTransactionsFxTradeDetails FxTradeDetails { get; set; }
		
		/// <summary>
		/// identifier for the fire.com account (assigned by fire.com) This field is only used in the condensed version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ican")]
		public System.Nullable<System.Int64> Ican { get; set; }
		
		/// <summary>
		/// The comment/reference on the transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="myRef")]
		public string MyRef { get; set; }
		
		/// <summary>
		/// (FOP payments only) The FOP Payment Code that was used to make this payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentRequestPublicCode")]
		public string PaymentRequestPublicCode { get; set; }
		
		/// <summary>
		/// Extra details about the transaction based on the scheme used to make the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proprietarySchemeDetails")]
		public GetListofCardTransactionsReturnTransactionsProprietarySchemeDetails[] GetListofCardTransactionsReturnTransactionsProprietarySchemeDetails { get; set; }
		
		/// <summary>
		/// The id of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public System.Nullable<System.Int64> RefId { get; set; }
		
		/// <summary>
		/// Details of the related third party involved in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedParty")]
		public GetListofCardTransactionsReturnTransactionsRelatedParty RelatedParty { get; set; }
		
		/// <summary>
		/// The amount of the tax, if any (e.g. Stamp duty for ATM transactions)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public System.Nullable<System.Int64> TaxAmount { get; set; }
		
		/// <summary>
		/// The id of this side of the transaction (each transaction has two sides - a to and a from). This is used to get the details of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public System.Nullable<System.Int64> TxnId { get; set; }
		
		/// <summary>
		/// The type of the transaction:
		///* `LODGEMENT` - Bank Transfer received
		///* `PIS_LODGEMENT` - Fire Open Payments Lodgement received
		///* `MANUAL_TRANSFER` - Manual Transfer to
		///* `WITHDRAWAL` - Bank Transfer sent
		///* `REVERSAL` - Credit Reversal
		///* `DIRECT_DEBIT` - A direct debit.
		///* `DIRECT_DEBIT_REPRESENTED` - A Direct Debit that was requested again after initially failing.
		///* `DIRECT_DEBIT_REFUND` - A refund of a Direct debit.
		///* `INTERNAL_TRANSFER_TO` - Internal Transfer sent (between two of my accounts of the same currency)
		///* `INTERNAL_TRANSFER_FROM` - Internal Transfer received (between two of my accounts of the same currency)
		///* `WITHDRAWAL_RETURNED` - Bank Transfer sent returned
		///* `LODGEMENT_REVERSED` - Bank Transfer received returned
		///* `FX_INTERNAL_TRANSFER_FROM` - FX Internal Transfer received (between two of my accounts of different currency)
		///* `FX_INTERNAL_TRANSFER_TO` - FX Internal Transfer sent (between two of my accounts of different currency)
		///* `CREATE_CARD` - The fee taken when a debit card is issued.
		///* `ADD_ACCOUNT` - The fee taken when an account is created.
		///* `CREATE_ADDITIONAL_USER` - The fee taken when an additional user is created.       
		///* `CARD_POS_CONTACT_DEBIT` - Card used in store; read by magnetic stripe or pin
		///* `CARD_POS_CONTACT_CREDIT` - Card used in store; read by magnetic stripe or pin
		///* `CARD_POS_CONTACTLESS_DEBIT` - Card used in store; read by NFC
		///* `CARD_POS_CONTACTLESS_CREDIT` - Card used in store; read by NFC
		///* `CARD_ECOMMERCE_DEBIT` - Card used on the internet
		///* `CARD_ECOMMERCE_CREDIT` - Card used on the internet
		///* `CARD_ATM_DEBIT` - Card used in an ATM
		///* `CARD_ATM_CREDIT` - Card used in an ATM
		///* `CARD_INTERNATIONAL_POS_CONTACT_DEBIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
		///* `CARD_INTERNATIONAL_POS_CONTACT_CREDIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT` - Card used in store in non-processing currency; read by NFC
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT` - Card used in store in non-processing currency; read by NFC
		///* `CARD_INTERNATIONAL_ECOMMERCE_DEBIT	` - Card used on the internet in non-processing currency
		///* `CARD_INTERNATIONAL_ECOMMERCE_CREDIT` - Card used on the internet in non-processing currency
		///* `CARD_INTERNATIONAL_ATM_DEBIT` - Card used in an ATM in non-processing currency
		///* `CARD_INTERNATIONAL_ATM_CREDIT` - Card used in an ATM in non-processing currency
		///* `CARD_POS_CONTACT_DEBIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
		///* `CARD_POS_CONTACT_CREDIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
		///* `CARD_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store; read by NFC - reversed
		///* `CARD_POS_CONTACTLESS_CREDIT_REVERSAL` - Card used in store; read by NFC - reversed
		///* `CARD_ECOMMERCE_DEBIT_REVERSAL	` - Card used on the internet - reversed
		///* `CARD_ECOMMERCE_CREDIT_REVERSAL` - Card used on the internet - reversed
		///* `CARD_ATM_DEBIT_REVERSAL` - Card used in an ATM - reversed
		///* `CARD_ATM_CREDIT_REVERSAL` - Card used in an ATM - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACT_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACT_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT_REVERSAL` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types.
		///* `CARD_INTERNATIONAL_ECOMMERCE_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
		///* `CARD_INTERNATIONAL_ECOMMERCE_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
		///* `CARD_INTERNATIONAL_ATM_DEBIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
		///* `CARD_INTERNATIONAL_ATM_CREDIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The comment/reference on the transaction that appears on the recipients statement. Only for withdrawals
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yourRef")]
		public string YourRef { get; set; }
	}
	
	public class GetListofCardTransactionsReturnTransactionsBatchItemDetails
	{
		
		/// <summary>
		/// The UUID for this item in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemPublicUuid")]
		public string BatchItemPublicUuid { get; set; }
		
		/// <summary>
		/// The optional name given to the batch at creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchName")]
		public string BatchName { get; set; }
		
		/// <summary>
		/// The UUID for this batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchPublicUuid")]
		public string BatchPublicUuid { get; set; }
		
		/// <summary>
		/// The optional job number given to the batch to link it to your own system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobNumber")]
		public string JobNumber { get; set; }
	}
	
	public class GetListofCardTransactionsReturnTransactionsCard
	{
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cardId")]
		public System.Nullable<System.Int64> CardId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="embossBusinessName")]
		public string EmbossBusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="embossCardName")]
		public string EmbossCardName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiryDate")]
		public System.Nullable<System.DateTimeOffset> ExpiryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maskedPan")]
		public string MaskedPan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
	}
	
	public class GetListofCardTransactionsReturnTransactionsCurrency
	{
		
		/// <summary>
		/// The three letter code for the currency - either `EUR` or `GBP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public GetAccountsReturnAccountsCurrencyCode Code { get; set; }
		
		/// <summary>
		/// The name of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class GetListofCardTransactionsReturnTransactionsDirectDebitDetails
	{
		
		/// <summary>
		/// The direct debit reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitReference")]
		public string DirectDebitReference { get; set; }
		
		/// <summary>
		/// The UUID for the direct debit payment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitUuid")]
		public string DirectDebitUuid { get; set; }
		
		/// <summary>
		/// the reference of the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateReference")]
		public string MandateReference { get; set; }
		
		/// <summary>
		/// The UUID for the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateUUid")]
		public string MandateUUid { get; set; }
		
		/// <summary>
		/// The UUID for the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateUuid")]
		public string MandateUuid { get; set; }
		
		/// <summary>
		/// The Alias of the party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorAlias")]
		public string OriginatorAlias { get; set; }
		
		/// <summary>
		/// URL pointing to a large version of the Originator Logo (if available)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorLogoUrlLarge")]
		public string OriginatorLogoUrlLarge { get; set; }
		
		/// <summary>
		/// URL pointing to a small version of the Originator Logo (if available)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorLogoUrlSmall")]
		public string OriginatorLogoUrlSmall { get; set; }
		
		/// <summary>
		/// The creator of the party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorName")]
		public string OriginatorName { get; set; }
		
		/// <summary>
		/// Set by party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorReference")]
		public string OriginatorReference { get; set; }
	}
	
	public class GetListofCardTransactionsReturnTransactionsFxTradeDetails
	{
		
		/// <summary>
		/// amount of buyCurrency being bought
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyAmount")]
		public System.Nullable<System.Int64> BuyAmount { get; set; }
		
		/// <summary>
		/// currency which is being bought
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyCurrency")]
		public string BuyCurrency { get; set; }
		
		/// <summary>
		/// type of trade - BUY or SELL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedSide")]
		public string FixedSide { get; set; }
		
		/// <summary>
		/// The FX provider used to make the trade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// exchange rate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate4d")]
		public System.Nullable<System.Int64> Rate4d { get; set; }
		
		/// <summary>
		/// amount of sellCurrency being sold
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellAmount")]
		public System.Nullable<System.Int64> SellAmount { get; set; }
		
		/// <summary>
		/// currency which is being sold
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellCurrency")]
		public string SellCurrency { get; set; }
	}
	
	public class GetListofCardTransactionsReturnTransactionsProprietarySchemeDetails
	{
		
		/// <summary>
		/// the scheme proprietary data - key pairs separated by | and key/values separated by ^
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// the type of proprietary scheme - SCT for SEPA, FPS for Faster Payments etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class GetListofCardTransactionsReturnTransactionsRelatedParty
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public GetListofCardTransactionsReturnTransactionsRelatedPartyAccount Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GetTransactionsByAccountIdv1ReturnTransactionsRelatedPartyType Type { get; set; }
	}
	
	public class GetListofCardTransactionsReturnTransactionsRelatedPartyAccount
	{
		
		/// <summary>
		/// the Account Number of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// the name the user gives to the account to help them identify it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// the BIC of the account (provided if currency is EUR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bic")]
		public string Bic { get; set; }
		
		/// <summary>
		/// the IBAN of the account (provided if currency is EUR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iban")]
		public string Iban { get; set; }
		
		/// <summary>
		/// identifier for the fire.com account (assigned by fire.com)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// the Sort Code of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nsc")]
		public string Nsc { get; set; }
	}
	
	public class GetDirectDebitsForMandateUuidReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="directdebits")]
		public GetDirectDebitsForMandateUuidReturnDirectdebits[] GetDirectDebitsForMandateUuidReturnDirectdebits { get; set; }
		
		/// <summary>
		/// Number of direct debits found
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
	}
	
	public class GetDirectDebitsForMandateUuidReturnDirectdebits
	{
		
		/// <summary>
		/// Value of the payment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// The currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetDirectDebitsForMandateUuidReturnDirectdebitsCurrency Currency { get; set; }
		
		/// <summary>
		/// Date the direct debit was created. Milliseconds since the epoch (1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// The direct debit reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitReference")]
		public string DirectDebitReference { get; set; }
		
		/// <summary>
		/// The UUID for the direct debit payment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitUuid")]
		public string DirectDebitUuid { get; set; }
		
		/// <summary>
		/// DDIC is a Direct Debit Indemnity Claim (i.e.a refund). If if the DD is requested to be refunded it is marked isDDIC true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDDIC")]
		public System.Nullable<System.Boolean> IsDDIC { get; set; }
		
		/// <summary>
		/// Date the direct debit was last updated. Milliseconds since the epoch (1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// The UUID for the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateUUid")]
		public string MandateUUid { get; set; }
		
		/// <summary>
		/// The Alias of the party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorAlias")]
		public string OriginatorAlias { get; set; }
		
		/// <summary>
		/// The creator of the party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorName")]
		public string OriginatorName { get; set; }
		
		/// <summary>
		/// Set by party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorReference")]
		public string OriginatorReference { get; set; }
		
		/// <summary>
		/// Reason why rejected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemeRejectReason")]
		public string SchemeRejectReason { get; set; }
		
		/// <summary>
		/// The reject code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemeRejectReasonCode")]
		public System.Nullable<GetDirectDebitsForMandateUuidReturnDirectdebitsSchemeRejectReasonCode> SchemeRejectReasonCode { get; set; }
		
		/// <summary>
		/// The statuses of the direct debit payments associated with the mandate.
		///* 'RECIEVED' - Direct Debit has been recieved
		///* 'REJECT_REQUESTED' - The direct debit has a rejected request associated with it
		///* 'REJECT_READY_FOR_PROCESSING' 
		///* 'REJECT_RECORD_IN_PROGRESS'
		///* 'REJECT_RECORDED'
		///* 'REJECT_FILE_CREATED'
		///* 'REJECT_FILE_SENT'
		///* 'COLLECTED' - Direct debit collected
		///* 'REFUND_REQUESTED' - Refund requested on direct debit
		///* 'REFUND_RECORD_IN_PROGRESS' - Refund in progress on direct debit
		///* 'REFUND_RECORDED'
		///* 'REFUND_FILE_CREATED'
		///* 'REFUND_FILE_SENT' 
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GetDirectDebitsForMandateUuidReturnDirectdebitsStatus> Status { get; set; }
		
		/// <summary>
		/// The ican of your fire account that the money was taken from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetIcan")]
		public System.Nullable<System.Int64> TargetIcan { get; set; }
		
		/// <summary>
		/// The payee that was created when the DD was processed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetPayeeId")]
		public System.Nullable<System.Int64> TargetPayeeId { get; set; }
		
		/// <summary>
		/// The type of the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GetDirectDebitsForMandateUuidReturnDirectdebitsType> Type { get; set; }
	}
	
	public class GetDirectDebitsForMandateUuidReturnDirectdebitsCurrency
	{
		
		/// <summary>
		/// The three letter code for the currency - either `EUR` or `GBP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public GetAccountsReturnAccountsCurrencyCode Code { get; set; }
		
		/// <summary>
		/// The name of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetDirectDebitsForMandateUuidReturnDirectdebitsSchemeRejectReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		B = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetDirectDebitsForMandateUuidReturnDirectdebitsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECIEVED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_REQUESTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_READY_FOR_PROCESSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_RECORD_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_RECORDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_FILE_CREATED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_FILE_SENT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLLECTED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND_REQUESTED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND_RECORD_IN_PROGRESS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND_RECORDED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND_FILE_CREATED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND_FILE_SENT = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetDirectDebitsForMandateUuidReturnDirectdebitsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST_COLLECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONGOING_COLLECTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPRESENTED_COLLECTION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINAL_COLLECTION = 3,
	}
	
	public class GetDirectDebitByUuidReturn
	{
		
		/// <summary>
		/// Value of the payment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// The currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetDirectDebitByUuidReturnCurrency Currency { get; set; }
		
		/// <summary>
		/// Date the direct debit was created. Milliseconds since the epoch (1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// The direct debit reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitReference")]
		public string DirectDebitReference { get; set; }
		
		/// <summary>
		/// The UUID for the direct debit payment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitUuid")]
		public string DirectDebitUuid { get; set; }
		
		/// <summary>
		/// DDIC is a Direct Debit Indemnity Claim (i.e.a refund). If if the DD is requested to be refunded it is marked isDDIC true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDDIC")]
		public System.Nullable<System.Boolean> IsDDIC { get; set; }
		
		/// <summary>
		/// Date the direct debit was last updated. Milliseconds since the epoch (1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// The UUID for the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateUUid")]
		public string MandateUUid { get; set; }
		
		/// <summary>
		/// The Alias of the party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorAlias")]
		public string OriginatorAlias { get; set; }
		
		/// <summary>
		/// The creator of the party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorName")]
		public string OriginatorName { get; set; }
		
		/// <summary>
		/// Set by party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorReference")]
		public string OriginatorReference { get; set; }
		
		/// <summary>
		/// Reason why rejected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemeRejectReason")]
		public string SchemeRejectReason { get; set; }
		
		/// <summary>
		/// The reject code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemeRejectReasonCode")]
		public System.Nullable<GetDirectDebitByUuidReturnSchemeRejectReasonCode> SchemeRejectReasonCode { get; set; }
		
		/// <summary>
		/// The statuses of the direct debit payments associated with the mandate.
		///* 'RECIEVED' - Direct Debit has been recieved
		///* 'REJECT_REQUESTED' - The direct debit has a rejected request associated with it
		///* 'REJECT_READY_FOR_PROCESSING' 
		///* 'REJECT_RECORD_IN_PROGRESS'
		///* 'REJECT_RECORDED'
		///* 'REJECT_FILE_CREATED'
		///* 'REJECT_FILE_SENT'
		///* 'COLLECTED' - Direct debit collected
		///* 'REFUND_REQUESTED' - Refund requested on direct debit
		///* 'REFUND_RECORD_IN_PROGRESS' - Refund in progress on direct debit
		///* 'REFUND_RECORDED'
		///* 'REFUND_FILE_CREATED'
		///* 'REFUND_FILE_SENT' 
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public GetDirectDebitsForMandateUuidReturnDirectdebitsStatus Status { get; set; }
		
		/// <summary>
		/// The ican of your fire account that the money was taken from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetIcan")]
		public System.Nullable<System.Int64> TargetIcan { get; set; }
		
		/// <summary>
		/// The payee that was created when the DD was processed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetPayeeId")]
		public System.Nullable<System.Int64> TargetPayeeId { get; set; }
		
		/// <summary>
		/// The type of the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GetDirectDebitsForMandateUuidReturnDirectdebitsType Type { get; set; }
	}
	
	public class GetDirectDebitByUuidReturnCurrency
	{
		
		/// <summary>
		/// The three letter code for the currency - either `EUR` or `GBP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public GetAccountsReturnAccountsCurrencyCode Code { get; set; }
		
		/// <summary>
		/// The name of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetDirectDebitByUuidReturnSchemeRejectReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		B = 11,
	}
	
	public class GetDirectDebitMandatesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="mandates")]
		public GetDirectDebitMandatesReturnMandates[] GetDirectDebitMandatesReturnMandates { get; set; }
		
		/// <summary>
		/// Number of direct debits found
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
	}
	
	public class GetDirectDebitMandatesReturnMandates
	{
		
		/// <summary>
		/// The name of the alias
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// The currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetDirectDebitMandatesReturnMandatesCurrency Currency { get; set; }
		
		/// <summary>
		/// Date the direct debit was canceled. Milliseconds since the epoch (1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCancelled")]
		public System.Nullable<System.DateTimeOffset> DateCancelled { get; set; }
		
		/// <summary>
		/// Date the direct debit was completed. Milliseconds since the epoch (1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCompleted")]
		public System.Nullable<System.DateTimeOffset> DateCompleted { get; set; }
		
		/// <summary>
		/// Date the direct debit was created. Milliseconds since the epoch (1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// Rejection reason if transaction is rejected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fireRejectionReason")]
		public System.Nullable<GetDirectDebitMandatesReturnMandatesFireRejectionReason> FireRejectionReason { get; set; }
		
		/// <summary>
		/// Date the direct debit was last updated. Milliseconds since the epoch (1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// The value of largest direct debit collected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestDirectDebitAmount")]
		public System.Nullable<System.Int64> LatestDirectDebitAmount { get; set; }
		
		/// <summary>
		/// The date of latest direct debit collected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestDirectDebitDate")]
		public System.Nullable<System.DateTimeOffset> LatestDirectDebitDate { get; set; }
		
		/// <summary>
		/// the reference of the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateReference")]
		public string MandateReference { get; set; }
		
		/// <summary>
		/// The UUID for the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateUuid")]
		public string MandateUuid { get; set; }
		
		/// <summary>
		/// The number of direct debits collected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfDirectDebitCollected")]
		public System.Nullable<System.Int64> NumberOfDirectDebitCollected { get; set; }
		
		/// <summary>
		/// The name of the alias
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorAlias")]
		public string OriginatorAlias { get; set; }
		
		/// <summary>
		/// Logo url from party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorLogoUrlLarge")]
		public string OriginatorLogoUrlLarge { get; set; }
		
		/// <summary>
		/// Logo url from party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorLogoUrlSmall")]
		public string OriginatorLogoUrlSmall { get; set; }
		
		/// <summary>
		/// The creator of the party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorName")]
		public string OriginatorName { get; set; }
		
		/// <summary>
		/// Set by party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorReference")]
		public string OriginatorReference { get; set; }
		
		/// <summary>
		/// Reason for cancelation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemeCancelReason")]
		public string SchemeCancelReason { get; set; }
		
		/// <summary>
		/// The cancelation code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemeCancelReasonCode")]
		public string SchemeCancelReasonCode { get; set; }
		
		/// <summary>
		/// The status of the mandate.
		///* 'CREATED'
		///* 'LIVE'
		///* 'REJECT_REQUESTED'
		///* 'REJECT_RECORD_IN_PROGRESS'
		///* 'REJECT_RECORDED'
		///* 'REJECT_FILE_CREATED'
		///* 'REJECT_FILE_SENT'
		///* 'CANCEL_REQUESTED'
		///* 'CANCEL_RECORD_IN_PROGRESS'
		///* 'CANCEL_RECORDED'
		///* 'CANCEL_FILE_CREATED'
		///* 'CANCEL_FILE_SENT'
		///* 'COMPLETE'
		///* 'DORMANT'
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GetDirectDebitMandatesReturnMandatesStatus> Status { get; set; }
		
		/// <summary>
		/// Identifier for the fire.com account (assigned by fire.com)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetIcan")]
		public System.Nullable<System.Int64> TargetIcan { get; set; }
		
		/// <summary>
		/// The value of direct debits collected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueOfDirectDebitCollected")]
		public System.Nullable<System.Int64> ValueOfDirectDebitCollected { get; set; }
	}
	
	public class GetDirectDebitMandatesReturnMandatesCurrency
	{
		
		/// <summary>
		/// The three letter code for the currency - either `EUR` or `GBP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public GetAccountsReturnAccountsCurrencyCode Code { get; set; }
		
		/// <summary>
		/// The name of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetDirectDebitMandatesReturnMandatesFireRejectionReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_DOES_NOT_ACCEPT_DIRECT_DEBITS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DDIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_NOT_FOUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_NOT_LIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_NOT_FOUND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_NOT_LIVE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_NOT_FULL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL_USER_NOT_LIVE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL_USER_NOT_FULL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANDATE_ALREADY_EXISTS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANDATE_WITH_DIFERENT_ACCOUNT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NULL_MANDATE_REFERENCE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ACCOUNT_CURRENCY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_MANDATE_REFERENCE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUESTED_BY_CUSTOMER_VIA_SUPPORT = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_ACCOUNT_CLOSED = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_DECEASED = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_TRANSFERRED = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANDATE_NOT_FOUND = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_TRANSFERRED_TO_DIFFERENT_ACCOUNT = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ACCOUNT_TYPE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANDATE_EXPIRED = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANDATE_CANCELLED = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUESTED_BY_CUSTOMER = 23,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetDirectDebitMandatesReturnMandatesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_REQUESTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_RECORD_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_RECORDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_FILE_CREATED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_FILE_SENT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_REQUESTED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_RECORD_IN_PROGRESS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_RECORDED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_FILE_CREATED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_FILE_SENT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DORMANT = 13,
	}
	
	public class GetMandateReturn
	{
		
		/// <summary>
		/// The name of the alias
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// The currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetMandateReturnCurrency Currency { get; set; }
		
		/// <summary>
		/// Date the direct debit was canceled. Milliseconds since the epoch (1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCancelled")]
		public System.Nullable<System.DateTimeOffset> DateCancelled { get; set; }
		
		/// <summary>
		/// Date the direct debit was completed. Milliseconds since the epoch (1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCompleted")]
		public System.Nullable<System.DateTimeOffset> DateCompleted { get; set; }
		
		/// <summary>
		/// Date the direct debit was created. Milliseconds since the epoch (1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// Rejection reason if transaction is rejected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fireRejectionReason")]
		public GetDirectDebitMandatesReturnMandatesFireRejectionReason FireRejectionReason { get; set; }
		
		/// <summary>
		/// Date the direct debit was last updated. Milliseconds since the epoch (1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// The value of largest direct debit collected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestDirectDebitAmount")]
		public System.Nullable<System.Int64> LatestDirectDebitAmount { get; set; }
		
		/// <summary>
		/// The date of latest direct debit collected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestDirectDebitDate")]
		public System.Nullable<System.DateTimeOffset> LatestDirectDebitDate { get; set; }
		
		/// <summary>
		/// the reference of the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateReference")]
		public string MandateReference { get; set; }
		
		/// <summary>
		/// The UUID for the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateUuid")]
		public string MandateUuid { get; set; }
		
		/// <summary>
		/// The number of direct debits collected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfDirectDebitCollected")]
		public System.Nullable<System.Int64> NumberOfDirectDebitCollected { get; set; }
		
		/// <summary>
		/// The name of the alias
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorAlias")]
		public string OriginatorAlias { get; set; }
		
		/// <summary>
		/// Logo url from party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorLogoUrlLarge")]
		public string OriginatorLogoUrlLarge { get; set; }
		
		/// <summary>
		/// Logo url from party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorLogoUrlSmall")]
		public string OriginatorLogoUrlSmall { get; set; }
		
		/// <summary>
		/// The creator of the party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorName")]
		public string OriginatorName { get; set; }
		
		/// <summary>
		/// Set by party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorReference")]
		public string OriginatorReference { get; set; }
		
		/// <summary>
		/// Reason for cancelation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemeCancelReason")]
		public string SchemeCancelReason { get; set; }
		
		/// <summary>
		/// The cancelation code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemeCancelReasonCode")]
		public string SchemeCancelReasonCode { get; set; }
		
		/// <summary>
		/// The status of the mandate.
		///* 'CREATED'
		///* 'LIVE'
		///* 'REJECT_REQUESTED'
		///* 'REJECT_RECORD_IN_PROGRESS'
		///* 'REJECT_RECORDED'
		///* 'REJECT_FILE_CREATED'
		///* 'REJECT_FILE_SENT'
		///* 'CANCEL_REQUESTED'
		///* 'CANCEL_RECORD_IN_PROGRESS'
		///* 'CANCEL_RECORDED'
		///* 'CANCEL_FILE_CREATED'
		///* 'CANCEL_FILE_SENT'
		///* 'COMPLETE'
		///* 'DORMANT'
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public GetDirectDebitMandatesReturnMandatesStatus Status { get; set; }
		
		/// <summary>
		/// Identifier for the fire.com account (assigned by fire.com)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetIcan")]
		public System.Nullable<System.Int64> TargetIcan { get; set; }
		
		/// <summary>
		/// The value of direct debits collected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueOfDirectDebitCollected")]
		public System.Nullable<System.Int64> ValueOfDirectDebitCollected { get; set; }
	}
	
	public class GetMandateReturnCurrency
	{
		
		/// <summary>
		/// The three letter code for the currency - either `EUR` or `GBP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public GetAccountsReturnAccountsCurrencyCode Code { get; set; }
		
		/// <summary>
		/// The name of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class GetPayeesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="fundingSources")]
		public GetPayeesReturnFundingSources[] GetPayeesReturnFundingSources { get; set; }
		
		/// <summary>
		/// The total number of payees in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class GetPayeesReturnFundingSources
	{
		
		/// <summary>
		/// The name on the payee bank account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountHolderName")]
		public string AccountHolderName { get; set; }
		
		/// <summary>
		/// The alias attributed to the payee, usually set by the user when creating the payee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The Account Number of the account if currency is GBP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The BIC of the account if currency is EUR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bic")]
		public string Bic { get; set; }
		
		/// <summary>
		/// The creation source of the payee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public System.Nullable<GetPayeesReturnFundingSourcesCreatedBy> CreatedBy { get; set; }
		
		/// <summary>
		/// The currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetPayeesReturnFundingSourcesCurrency Currency { get; set; }
		
		/// <summary>
		/// The date the payee was created. ISO Date Time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// The IBAN of the account if currency is EUR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iban")]
		public string Iban { get; set; }
		
		/// <summary>
		/// Identifier for the fire.com payee bank account (assigned by fire.com).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// The Sort Code of the account if currency is GBP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nsc")]
		public string Nsc { get; set; }
		
		/// <summary>
		/// The status of the payee. Only payees in LIVE status can be selected as a destination account for an outgoing payment.
		///  * 'CREATED' - The payee has been set-up via Bank Transfer Received, Direct Debit, or Open Banking. This payee must be converted to LIVE status to select as a destination account for an outgoing payment.
		///  * 'LIVE' - The payee can be selected as a destination account for an outgoing payment.
		///  * 'CLOSED'
		///  * 'ARCHIVED' - The payee has been deleted and must be added again to be selected as a destination account for an outgoing payment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GetPayeesReturnFundingSourcesStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetPayeesReturnFundingSourcesCreatedBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LODGEMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIRECT DEBIT")]
		DIRECT_DEBIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPEN BANKING")]
		OPEN_BANKING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIRE OPEN PAYMENT")]
		FIRE_OPEN_PAYMENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIRE DIRECT")]
		FIRE_DIRECT = 5,
	}
	
	public class GetPayeesReturnFundingSourcesCurrency
	{
		
		/// <summary>
		/// The three letter code for the currency - either `EUR` or `GBP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public GetAccountsReturnAccountsCurrencyCode Code { get; set; }
		
		/// <summary>
		/// The name of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetPayeesReturnFundingSourcesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 3,
	}
	
	public class NewPaymentRequestPostBody
	{
		
		/// <summary>
		/// These fields will be dispalyed to the payer when using the hosted option. You can choose to display any of `ORDER_ID`, `PRODUCT_ID`, `CUSTOMER_ID`, `CUSTOMER_NUMBER` and `COMMENT2` to the payer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalFields")]
		public string AdditionalFields { get; set; }
		
		/// <summary>
		/// The requested amount to pay. Note the last two digits represent pennies/cents, (e.g., £1.00 = 100).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// For the hosted option, the payer will be asked to fill in these fields but they will not be mandatory. You can choose to collect any of the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectFields")]
		public string CollectFields { get; set; }
		
		/// <summary>
		/// Either `EUR` or `GBP`, and must correspond to the currency of the account the funds are being lodged into in the `icanTo`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetAccountsReturnAccountsCurrencyCode Currency { get; set; }
		
		/// <summary>
		/// A public facing description of the request. This will be shown to the user when they tap or scan the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// This is the expiry of the payment request. After this time, the payment cannot be paid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		public System.Nullable<System.DateTimeOffset> Expiry { get; set; }
		
		/// <summary>
		/// The ican of the account to collect the funds into. Must be one of your fire.com Accounts.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="icanTo")]
		public long IcanTo { get; set; }
		
		/// <summary>
		/// For the hosted option, these fields will be madatory for the payer to fill in on the hosted payment page. You can choose to collect any the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandatoryFields")]
		public string MandatoryFields { get; set; }
		
		/// <summary>
		/// The max number of people who can pay this request. Must be set to 1 for the ECOMMERCE_GOODS and ECOMMERCE_SERVICES types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxNumberPayments")]
		public System.Nullable<System.Int32> MaxNumberPayments { get; set; }
		
		/// <summary>
		/// An internal description of the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="myRef")]
		public string MyRef { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderDetails")]
		public NewPaymentRequestPostBodyOrderDetails OrderDetails { get; set; }
		
		/// <summary>
		/// The merchant return URL where the customer will be re-directed to with the result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnUrl")]
		public string ReturnUrl { get; set; }
		
		/// <summary>
		/// The type of Fire Open Payment that was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public NewPaymentRequestPostBodyType Type { get; set; }
	}
	
	public class NewPaymentRequestPostBodyOrderDetails
	{
		
		/// <summary>
		/// This is your own comment for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment1")]
		public string Comment1 { get; set; }
		
		/// <summary>
		/// This is your own comment for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment2")]
		public string Comment2 { get; set; }
		
		/// <summary>
		/// Use this field to store a customer number for the transaction (for example).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerNumber")]
		public string CustomerNumber { get; set; }
		
		/// <summary>
		/// The first line of the delivery address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryAddressLine1")]
		public string DeliveryAddressLine1 { get; set; }
		
		/// <summary>
		/// The second line of the delivery address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryAddressLine2")]
		public string DeliveryAddressLine2 { get; set; }
		
		/// <summary>
		/// Delivery address city
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryCity")]
		public string DeliveryCity { get; set; }
		
		/// <summary>
		/// 2-digit code for the country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryCountry")]
		public string DeliveryCountry { get; set; }
		
		/// <summary>
		/// Delivery address post code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryPostCode")]
		public string DeliveryPostCode { get; set; }
		
		/// <summary>
		/// This is a reference you use to uniquely identify each of your customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantCustomerIdentification")]
		public string MerchantCustomerIdentification { get; set; }
		
		/// <summary>
		/// Your Merchant Number (if applicable).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantNumber")]
		public string MerchantNumber { get; set; }
		
		/// <summary>
		/// Use this field to store the order id for the transaction. The Order Id cannot be set unless the `maxNumberPayments` is 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// Use this field to store a product id for the transaction (for example).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Use this field to store any other reference for the transaction (for example, a phone number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variableReference")]
		public string VariableReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NewPaymentRequestPostBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 0,
	}
	
	public class NewPaymentRequestReturn
	{
		
		/// <summary>
		/// The code for this request. Create a URL in this format: `https://payments.fire.com/{code}` and share to your customers.
		///
		/// Min length: 8
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string Code { get; set; }
		
		/// <summary>
		/// The type of Fire Open Payment that was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public NewPaymentRequestPostBodyType Type { get; set; }
	}
	
	public class GetPaymentDetailsReturn
	{
		
		/// <summary>
		/// These fields will be dispalyed to the payer when using the hosted option. You can choose to display any of `ORDER_ID`, `PRODUCT_ID`, `CUSTOMER_ID`, `CUSTOMER_NUMBER` and `COMMENT2` to the payer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalFields")]
		public string AdditionalFields { get; set; }
		
		/// <summary>
		/// The requested amount to pay. Note the last two digits represent pennies/cents, (e.g., £1.00 = 100).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// For the hosted option, the payer will be asked to fill in these fields but they will not be mandatory. You can choose to collect any of the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectFields")]
		public string CollectFields { get; set; }
		
		/// <summary>
		/// The currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetPaymentDetailsReturnCurrency Currency { get; set; }
		
		/// <summary>
		/// A public facing description of the request. This will be shown to the user when they tap or scan the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// This is the expiry of the payment request. After this time, the payment cannot be paid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		public System.Nullable<System.DateTimeOffset> Expiry { get; set; }
		
		/// <summary>
		/// The ican of the account to collect the funds into. Must be one of your fire.com Accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icanTo")]
		public System.Nullable<System.Int64> IcanTo { get; set; }
		
		/// <summary>
		/// For the hosted option, these fields will be madatory for the payer to fill in on the hosted payment page. You can choose to collect any the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandatoryFields")]
		public string MandatoryFields { get; set; }
		
		/// <summary>
		/// The max number of people who can pay this request. Must be set to 1 for the ECOMMERCE_GOODS and ECOMMERCE_SERVICES types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxNumberPayments")]
		public System.Nullable<System.Int32> MaxNumberPayments { get; set; }
		
		/// <summary>
		/// An internal description of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="myRef")]
		public string MyRef { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderDetails")]
		public GetPaymentDetailsReturnOrderDetails OrderDetails { get; set; }
		
		/// <summary>
		/// The code that was returned when you created the payment request.
		/// Min length: 8
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentRequestCode")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string PaymentRequestCode { get; set; }
		
		/// <summary>
		/// A unique id for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentUuid")]
		public string PaymentUuid { get; set; }
		
		/// <summary>
		/// The merchant return URL where the customer will be re-directed to with the result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnUrl")]
		public string ReturnUrl { get; set; }
		
		/// <summary>
		/// The status of the transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GetPaymentDetailsReturnStatus> Status { get; set; }
		
		/// <summary>
		/// The type of payment request payment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionType")]
		public System.Nullable<GetPaymentDetailsReturnTransactionType> TransactionType { get; set; }
		
		/// <summary>
		/// The type of Fire Open Payment that was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public NewPaymentRequestPostBodyType Type { get; set; }
		
		/// <summary>
		/// A URL to be called in the background with the details of the payment after the payment is complete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookUrl")]
		public string WebhookUrl { get; set; }
	}
	
	public class GetPaymentDetailsReturnCurrency
	{
		
		/// <summary>
		/// The three letter code for the currency - either `EUR` or `GBP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public GetAccountsReturnAccountsCurrencyCode Code { get; set; }
		
		/// <summary>
		/// The name of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class GetPaymentDetailsReturnOrderDetails
	{
		
		/// <summary>
		/// This is your own comment for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment1")]
		public string Comment1 { get; set; }
		
		/// <summary>
		/// This is your own comment for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment2")]
		public string Comment2 { get; set; }
		
		/// <summary>
		/// Use this field to store a customer number for the transaction (for example).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerNumber")]
		public string CustomerNumber { get; set; }
		
		/// <summary>
		/// The first line of the delivery address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryAddressLine1")]
		public string DeliveryAddressLine1 { get; set; }
		
		/// <summary>
		/// The second line of the delivery address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryAddressLine2")]
		public string DeliveryAddressLine2 { get; set; }
		
		/// <summary>
		/// Delivery address city
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryCity")]
		public string DeliveryCity { get; set; }
		
		/// <summary>
		/// 2-digit code for the country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryCountry")]
		public string DeliveryCountry { get; set; }
		
		/// <summary>
		/// Delivery address post code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryPostCode")]
		public string DeliveryPostCode { get; set; }
		
		/// <summary>
		/// This is a reference you use to uniquely identify each of your customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantCustomerIdentification")]
		public string MerchantCustomerIdentification { get; set; }
		
		/// <summary>
		/// Your Merchant Number (if applicable).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantNumber")]
		public string MerchantNumber { get; set; }
		
		/// <summary>
		/// Use this field to store the order id for the transaction. The Order Id cannot be set unless the `maxNumberPayments` is 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// Use this field to store a product id for the transaction (for example).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Use this field to store any other reference for the transaction (for example, a phone number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variableReference")]
		public string VariableReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetPaymentDetailsReturnStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWAITING_AUTHORISATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORISED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWAITING_MULTI_AUTHORISATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_AUTHORISED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAID = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECEIVED = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetPaymentDetailsReturnTransactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND_REQUEST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT = 1,
	}
	
	public class GetUserReturn
	{
		
		/// <summary>
		/// email address for user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// User first name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The User ID for this User
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// User second name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Timestamp on when user last logged in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastlogin")]
		public string Lastlogin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileApplicationDetails")]
		public GetUserReturnMobileApplicationDetails MobileApplicationDetails { get; set; }
		
		/// <summary>
		/// User mobile number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		/// <summary>
		/// User role
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<GetUserReturnRole> Role { get; set; }
		
		/// <summary>
		/// Status of user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GetUserReturnStatus> Status { get; set; }
		
		/// <summary>
		/// Users Cvl type ID (shows up when status is LIVE)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userCvl")]
		public string UserCvl { get; set; }
	}
	
	public class GetUserReturnMobileApplicationDetails
	{
		
		/// <summary>
		/// Operating system of device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<GetUserReturnMobileApplicationDetailsOS> OS { get; set; }
		
		/// <summary>
		/// Business user ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessUserId")]
		public System.Nullable<System.Int64> BusinessUserId { get; set; }
		
		/// <summary>
		/// Client ID of user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientID")]
		public string ClientID { get; set; }
		
		/// <summary>
		/// type of device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public System.Nullable<GetUserReturnMobileApplicationDetailsDeviceName> DeviceName { get; set; }
		
		/// <summary>
		/// OS version for device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceOSVersion")]
		public string DeviceOSVersion { get; set; }
		
		/// <summary>
		/// Mobile application id for user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileApplicationId")]
		public System.Nullable<System.Int64> MobileApplicationId { get; set; }
		
		/// <summary>
		/// Status of user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GetUserReturnMobileApplicationDetailsStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetUserReturnMobileApplicationDetailsOS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Android = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetUserReturnMobileApplicationDetailsDeviceName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		iPhone = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Android = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetUserReturnMobileApplicationDetailsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCKED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS_SENT = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetUserReturnRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_USER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_ONLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARD_ONLY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetUserReturnStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FROZEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVITE_SENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS_CODE_SENT = 4,
	}
	
	public class GetUsersReturn
	{
		
		/// <summary>
		/// email address for user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// User first name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The User ID for this User
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// User second name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Timestamp on when user last logged in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastlogin")]
		public string Lastlogin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileApplicationDetails")]
		public GetUsersReturnMobileApplicationDetails MobileApplicationDetails { get; set; }
		
		/// <summary>
		/// User mobile number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		/// <summary>
		/// User role
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public GetUserReturnRole Role { get; set; }
		
		/// <summary>
		/// Status of user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public GetUserReturnStatus Status { get; set; }
		
		/// <summary>
		/// Users Cvl type ID (shows up when status is LIVE)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userCvl")]
		public string UserCvl { get; set; }
	}
	
	public class GetUsersReturnMobileApplicationDetails
	{
		
		/// <summary>
		/// Operating system of device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GetUserReturnMobileApplicationDetailsOS OS { get; set; }
		
		/// <summary>
		/// Business user ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessUserId")]
		public System.Nullable<System.Int64> BusinessUserId { get; set; }
		
		/// <summary>
		/// Client ID of user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientID")]
		public string ClientID { get; set; }
		
		/// <summary>
		/// type of device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public GetUserReturnMobileApplicationDetailsDeviceName DeviceName { get; set; }
		
		/// <summary>
		/// OS version for device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceOSVersion")]
		public string DeviceOSVersion { get; set; }
		
		/// <summary>
		/// Mobile application id for user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileApplicationId")]
		public System.Nullable<System.Int64> MobileApplicationId { get; set; }
		
		/// <summary>
		/// Status of user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public GetUserReturnMobileApplicationDetailsStatus Status { get; set; }
	}
	
	public class GetItemsBatchInternationalTransferReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public GetItemsBatchInternationalTransferReturnItems[] GetItemsBatchInternationalTransferReturnItems { get; set; }
		
		/// <summary>
		/// total number of batches returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
	}
	
	public class GetItemsBatchInternationalTransferReturnItems
	{
		
		/// <summary>
		/// The amount of funds to send. In cent or pence
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// The amount of the transfer after fees and taxes. in pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountAfterCharges")]
		public System.Nullable<System.Int64> AmountAfterCharges { get; set; }
		
		/// <summary>
		/// A UUID for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemUuid")]
		public string BatchItemUuid { get; set; }
		
		/// <summary>
		/// The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// The fee charged by fire.com for the payment. In pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feeAmount")]
		public System.Nullable<System.Int64> FeeAmount { get; set; }
		
		/// <summary>
		/// The Fire account ID of the source account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icanFrom")]
		public System.Nullable<System.Int64> IcanFrom { get; set; }
		
		/// <summary>
		/// The Fire account ID for the fire.com account the funds are sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icanTo")]
		public System.Nullable<System.Int64> IcanTo { get; set; }
		
		/// <summary>
		/// The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// The reference on the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// The ID of the resulting payment in your account. Can be used to retrieve the transaction using the https://api.fire.com/business/v1/accounts/{accountId}/transactions/{refId} endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public System.Nullable<System.Int64> RefId { get; set; }
		
		/// <summary>
		/// The outcome of the attempted transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public GetItemsBatchInternationalTransferReturnItemsResult Result { get; set; }
		
		/// <summary>
		/// status of the batch if internal trasnfer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public GetBatchesBatchStatus Status { get; set; }
		
		/// <summary>
		/// Any taxes/duty collected by fire.com for this payments (e.g. stamp duty etc). In pence or cent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public System.Nullable<System.Int64> TaxAmount { get; set; }
	}
	
	public class GetItemsBatchInternationalTransferReturnItemsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int64> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class AddInternationalTransferBatchPaymentPostBody
	{
		
		/// <summary>
		/// The value of the payment in the beneficiary currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// The Fire account ID for the fire.com account the funds are taken from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icanFrom")]
		public System.Nullable<System.Int64> IcanFrom { get; set; }
		
		/// <summary>
		/// The reference on the transaction for your records - not shown to the beneficiary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="myRef")]
		public string MyRef { get; set; }
		
		/// <summary>
		/// The ID of the existing payee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public System.Nullable<System.Int64> PayeeId { get; set; }
		
		/// <summary>
		/// The reason for the payment, used for transaction monitoring purposes. Must be one of Invoice Payment|Salary/Dividend Payment|Expenses|Savings|Other
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentReason")]
		public string PaymentReason { get; set; }
		
		/// <summary>
		/// The reference on the transaction - displayed on the beneficiary bank statement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yourRef")]
		public string YourRef { get; set; }
	}
	
	public class AddInternationalTransferBatchPaymentReturn
	{
		
		/// <summary>
		/// A Batch Item UUID for this item. Note* Do not confuse this for BatchUuid when submitting a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemUuid")]
		public string BatchItemUuid { get; set; }
	}
	
	public class GetTransactionsByAccountIdv3Return
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public GetTransactionsByAccountIdv3ReturnContent[] GetTransactionsByAccountIdv3ReturnContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public GetTransactionsByAccountIdv3ReturnLinks[] GetTransactionsByAccountIdv3ReturnLinks { get; set; }
	}
	
	public class GetTransactionsByAccountIdv3ReturnContent
	{
		
		/// <summary>
		/// Net amount lodged or taken from the account after fees and charges were applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountAfterCharges")]
		public System.Nullable<System.Int64> AmountAfterCharges { get; set; }
		
		/// <summary>
		/// Amount of the transaction before the fees and taxes were applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountBeforeCharges")]
		public System.Nullable<System.Int64> AmountBeforeCharges { get; set; }
		
		/// <summary>
		/// the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int64> Balance { get; set; }
		
		/// <summary>
		/// Details of the batch run if this transaction was part of a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemDetails")]
		public GetTransactionsByAccountIdv3ReturnContentBatchItemDetails BatchItemDetails { get; set; }
		
		/// <summary>
		/// Details of the card used (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public GetTransactionsByAccountIdv3ReturnContentCard Card { get; set; }
		
		/// <summary>
		/// The currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public GetTransactionsByAccountIdv3ReturnContentCurrency Currency { get; set; }
		
		/// <summary>
		/// Date of the transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateAcknowledged")]
		public System.Nullable<System.DateTimeOffset> DateAcknowledged { get; set; }
		
		/// <summary>
		/// Details of the direct debit (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitDetails")]
		public GetTransactionsByAccountIdv3ReturnContentDirectDebitDetails DirectDebitDetails { get; set; }
		
		/// <summary>
		/// An internal Fire reference for the transaction (UUID)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventUuid")]
		public string EventUuid { get; set; }
		
		/// <summary>
		/// The amount of the fee, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feeAmount")]
		public System.Nullable<System.Int64> FeeAmount { get; set; }
		
		/// <summary>
		/// Details of the FX trade (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fxTradeDetails")]
		public GetTransactionsByAccountIdv3ReturnContentFxTradeDetails FxTradeDetails { get; set; }
		
		/// <summary>
		/// identifier for the fire.com account (assigned by fire.com) This field is only used in the condensed version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ican")]
		public System.Nullable<System.Int64> Ican { get; set; }
		
		/// <summary>
		/// The comment/reference on the transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="myRef")]
		public string MyRef { get; set; }
		
		/// <summary>
		/// (FOP payments only) The FOP Payment Code that was used to make this payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentRequestPublicCode")]
		public string PaymentRequestPublicCode { get; set; }
		
		/// <summary>
		/// Extra details about the transaction based on the scheme used to make the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proprietarySchemeDetails")]
		public GetTransactionsByAccountIdv3ReturnContentProprietarySchemeDetails[] GetTransactionsByAccountIdv3ReturnContentProprietarySchemeDetails { get; set; }
		
		/// <summary>
		/// The id of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refId")]
		public System.Nullable<System.Int64> RefId { get; set; }
		
		/// <summary>
		/// Details of the related third party involved in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedParty")]
		public GetTransactionsByAccountIdv3ReturnContentRelatedParty RelatedParty { get; set; }
		
		/// <summary>
		/// The amount of the tax, if any (e.g. Stamp duty for ATM transactions)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxAmount")]
		public System.Nullable<System.Int64> TaxAmount { get; set; }
		
		/// <summary>
		/// The id of this side of the transaction (each transaction has two sides - a to and a from). This is used to get the details of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public System.Nullable<System.Int64> TxnId { get; set; }
		
		/// <summary>
		/// The type of the transaction:
		///* `LODGEMENT` - Bank Transfer received
		///* `PIS_LODGEMENT` - Fire Open Payments Lodgement received
		///* `MANUAL_TRANSFER` - Manual Transfer to
		///* `WITHDRAWAL` - Bank Transfer sent
		///* `REVERSAL` - Credit Reversal
		///* `DIRECT_DEBIT` - A direct debit.
		///* `DIRECT_DEBIT_REPRESENTED` - A Direct Debit that was requested again after initially failing.
		///* `DIRECT_DEBIT_REFUND` - A refund of a Direct debit.
		///* `INTERNAL_TRANSFER_TO` - Internal Transfer sent (between two of my accounts of the same currency)
		///* `INTERNAL_TRANSFER_FROM` - Internal Transfer received (between two of my accounts of the same currency)
		///* `WITHDRAWAL_RETURNED` - Bank Transfer sent returned
		///* `LODGEMENT_REVERSED` - Bank Transfer received returned
		///* `FX_INTERNAL_TRANSFER_FROM` - FX Internal Transfer received (between two of my accounts of different currency)
		///* `FX_INTERNAL_TRANSFER_TO` - FX Internal Transfer sent (between two of my accounts of different currency)
		///* `CREATE_CARD` - The fee taken when a debit card is issued.
		///* `ADD_ACCOUNT` - The fee taken when an account is created.
		///* `CREATE_ADDITIONAL_USER` - The fee taken when an additional user is created.       
		///* `CARD_POS_CONTACT_DEBIT` - Card used in store; read by magnetic stripe or pin
		///* `CARD_POS_CONTACT_CREDIT` - Card used in store; read by magnetic stripe or pin
		///* `CARD_POS_CONTACTLESS_DEBIT` - Card used in store; read by NFC
		///* `CARD_POS_CONTACTLESS_CREDIT` - Card used in store; read by NFC
		///* `CARD_ECOMMERCE_DEBIT` - Card used on the internet
		///* `CARD_ECOMMERCE_CREDIT` - Card used on the internet
		///* `CARD_ATM_DEBIT` - Card used in an ATM
		///* `CARD_ATM_CREDIT` - Card used in an ATM
		///* `CARD_INTERNATIONAL_POS_CONTACT_DEBIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
		///* `CARD_INTERNATIONAL_POS_CONTACT_CREDIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT` - Card used in store in non-processing currency; read by NFC
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT` - Card used in store in non-processing currency; read by NFC
		///* `CARD_INTERNATIONAL_ECOMMERCE_DEBIT	` - Card used on the internet in non-processing currency
		///* `CARD_INTERNATIONAL_ECOMMERCE_CREDIT` - Card used on the internet in non-processing currency
		///* `CARD_INTERNATIONAL_ATM_DEBIT` - Card used in an ATM in non-processing currency
		///* `CARD_INTERNATIONAL_ATM_CREDIT` - Card used in an ATM in non-processing currency
		///* `CARD_POS_CONTACT_DEBIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
		///* `CARD_POS_CONTACT_CREDIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
		///* `CARD_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store; read by NFC - reversed
		///* `CARD_POS_CONTACTLESS_CREDIT_REVERSAL` - Card used in store; read by NFC - reversed
		///* `CARD_ECOMMERCE_DEBIT_REVERSAL	` - Card used on the internet - reversed
		///* `CARD_ECOMMERCE_CREDIT_REVERSAL` - Card used on the internet - reversed
		///* `CARD_ATM_DEBIT_REVERSAL` - Card used in an ATM - reversed
		///* `CARD_ATM_CREDIT_REVERSAL` - Card used in an ATM - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACT_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACT_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
		///* `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT_REVERSAL` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types.
		///* `CARD_INTERNATIONAL_ECOMMERCE_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
		///* `CARD_INTERNATIONAL_ECOMMERCE_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
		///* `CARD_INTERNATIONAL_ATM_DEBIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
		///* `CARD_INTERNATIONAL_ATM_CREDIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The comment/reference on the transaction that appears on the recipients statement. Only for withdrawals
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yourRef")]
		public string YourRef { get; set; }
	}
	
	public class GetTransactionsByAccountIdv3ReturnContentBatchItemDetails
	{
		
		/// <summary>
		/// The UUID for this item in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchItemPublicUuid")]
		public string BatchItemPublicUuid { get; set; }
		
		/// <summary>
		/// The optional name given to the batch at creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchName")]
		public string BatchName { get; set; }
		
		/// <summary>
		/// The UUID for this batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchPublicUuid")]
		public string BatchPublicUuid { get; set; }
		
		/// <summary>
		/// The optional job number given to the batch to link it to your own system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobNumber")]
		public string JobNumber { get; set; }
	}
	
	public class GetTransactionsByAccountIdv3ReturnContentCard
	{
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cardId")]
		public System.Nullable<System.Int64> CardId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="embossBusinessName")]
		public string EmbossBusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="embossCardName")]
		public string EmbossCardName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiryDate")]
		public System.Nullable<System.DateTimeOffset> ExpiryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maskedPan")]
		public string MaskedPan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
	}
	
	public class GetTransactionsByAccountIdv3ReturnContentCurrency
	{
		
		/// <summary>
		/// The three letter code for the currency - either `EUR` or `GBP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public GetAccountsReturnAccountsCurrencyCode Code { get; set; }
		
		/// <summary>
		/// The name of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class GetTransactionsByAccountIdv3ReturnContentDirectDebitDetails
	{
		
		/// <summary>
		/// The direct debit reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitReference")]
		public string DirectDebitReference { get; set; }
		
		/// <summary>
		/// The UUID for the direct debit payment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDebitUuid")]
		public string DirectDebitUuid { get; set; }
		
		/// <summary>
		/// the reference of the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateReference")]
		public string MandateReference { get; set; }
		
		/// <summary>
		/// The UUID for the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateUUid")]
		public string MandateUUid { get; set; }
		
		/// <summary>
		/// The UUID for the mandate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandateUuid")]
		public string MandateUuid { get; set; }
		
		/// <summary>
		/// The Alias of the party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorAlias")]
		public string OriginatorAlias { get; set; }
		
		/// <summary>
		/// URL pointing to a large version of the Originator Logo (if available)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorLogoUrlLarge")]
		public string OriginatorLogoUrlLarge { get; set; }
		
		/// <summary>
		/// URL pointing to a small version of the Originator Logo (if available)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorLogoUrlSmall")]
		public string OriginatorLogoUrlSmall { get; set; }
		
		/// <summary>
		/// The creator of the party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorName")]
		public string OriginatorName { get; set; }
		
		/// <summary>
		/// Set by party who sets up the direct debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originatorReference")]
		public string OriginatorReference { get; set; }
	}
	
	public class GetTransactionsByAccountIdv3ReturnContentFxTradeDetails
	{
		
		/// <summary>
		/// amount of buyCurrency being bought
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyAmount")]
		public System.Nullable<System.Int64> BuyAmount { get; set; }
		
		/// <summary>
		/// currency which is being bought
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyCurrency")]
		public string BuyCurrency { get; set; }
		
		/// <summary>
		/// type of trade - BUY or SELL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedSide")]
		public string FixedSide { get; set; }
		
		/// <summary>
		/// The FX provider used to make the trade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// exchange rate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate4d")]
		public System.Nullable<System.Int64> Rate4d { get; set; }
		
		/// <summary>
		/// amount of sellCurrency being sold
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellAmount")]
		public System.Nullable<System.Int64> SellAmount { get; set; }
		
		/// <summary>
		/// currency which is being sold
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellCurrency")]
		public string SellCurrency { get; set; }
	}
	
	public class GetTransactionsByAccountIdv3ReturnContentProprietarySchemeDetails
	{
		
		/// <summary>
		/// the scheme proprietary data - key pairs separated by | and key/values separated by ^
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// the type of proprietary scheme - SCT for SEPA, FPS for Faster Payments etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class GetTransactionsByAccountIdv3ReturnContentRelatedParty
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public GetTransactionsByAccountIdv3ReturnContentRelatedPartyAccount Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GetTransactionsByAccountIdv1ReturnTransactionsRelatedPartyType Type { get; set; }
	}
	
	public class GetTransactionsByAccountIdv3ReturnContentRelatedPartyAccount
	{
		
		/// <summary>
		/// the Account Number of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// the name the user gives to the account to help them identify it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// the BIC of the account (provided if currency is EUR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bic")]
		public string Bic { get; set; }
		
		/// <summary>
		/// the IBAN of the account (provided if currency is EUR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iban")]
		public string Iban { get; set; }
		
		/// <summary>
		/// identifier for the fire.com account (assigned by fire.com)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// the Sort Code of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nsc")]
		public string Nsc { get; set; }
	}
	
	public class GetTransactionsByAccountIdv3ReturnLinks
	{
		
		/// <summary>
		/// https://api.fire.com/business/v3/accounts/1/transactions?startAfter=eyJpY2F
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The relationship of this link to the current object - self, next, prev page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
