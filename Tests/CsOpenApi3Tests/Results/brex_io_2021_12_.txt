//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves announcement data
		/// Request full announcement data identified by announcement id
		/// CompanyAnnouncement api/v1/company/announcement/{id}
		/// </summary>
		/// <param name="id">announcement hex ID</param>
		/// <returns>List of announcements</returns>
		public async Task<CompanyAnnouncementReturn[]> CompanyAnnouncementAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/announcement/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompanyAnnouncementReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of companies
		/// Lookup companies identified by a LEI (Legal Entity Identifier) number. Search is forwarded to a provider.
		/// CompanyDeepsearchLEI api/v1/company/deepsearch/lei/{number}
		/// </summary>
		/// <param name="number">lei number</param>
		/// <param name="page">Pagination for the ISIN number results (1000 numbers per page)</param>
		/// <returns>Result of a lookup by LEI number</returns>
		public async Task<object> CompanyDeepsearchLEIAsync(string number, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/deepsearch/lei/"+ (number==null? "" : System.Uri.EscapeDataString(number))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of companies from the official business register
		/// Search for companies with a certain name. Search is forwarded to the respective business register of the country.
		/// CompanyDeepsearchName api/v1/company/deepsearch/name/{country}/{name}
		/// </summary>
		/// <param name="country">ISO_3166-1_alpha-2 representation of a country name - 2 chars</param>
		/// <param name="name">company name</param>
		public async Task CompanyDeepsearchNameAsync(string country, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/deepsearch/name/"+ (country==null? "" : System.Uri.EscapeDataString(country))+"/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of companies from the official business register
		/// Search for companies with a certain register number. Search is forwarded to the respective business register of the country.
		/// CompanyDeepsearchNumber api/v1/company/deepsearch/number/{country}/{number}
		/// </summary>
		/// <param name="country">ISO_3166-1_alpha-2 representation of a country name - 2 chars</param>
		/// <param name="number">company registration number</param>
		public async Task CompanyDeepsearchNumberAsync(string country, string number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/deepsearch/number/"+ (country==null? "" : System.Uri.EscapeDataString(country))+"/"+ (number==null? "" : System.Uri.EscapeDataString(number));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get available ChangeTypes
		/// Get current list of available ChangeTypes to subscribe to
		/// CompanyMonitorChangeTypesList api/v1/company/monitoring/changeTypes
		/// </summary>
		/// <returns>List of ChangeTypes</returns>
		public async Task<string[]> CompanyMonitorChangeTypesListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/monitoring/changeTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of registered monitors
		/// Query list of all registered monitors for logged in user
		/// CompanyMonitorList api/v1/company/monitoring/list
		/// </summary>
		public async Task CompanyMonitorListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/monitoring/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get monitor status for specific company id
		/// Query status of registered monitors for a specific company identified by a company id
		/// CompanyMonitorId api/v1/company/monitoring/list/{id}
		/// </summary>
		/// <param name="id">Company Hex ID</param>
		public async Task CompanyMonitorIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/monitoring/list/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deactivates an active notification
		/// Deactivate a previously registered company monitor identified by the notifier id
		/// CompanyMonitorUnregister api/v1/company/monitoring/unregister/{id}
		/// </summary>
		/// <param name="id">Registration id of monitoring request record</param>
		/// <returns>Empty response body</returns>
		public async Task CompanyMonitorUnregisterAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/monitoring/unregister/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of registered notifications
		/// Query list of registered callback URLs for logged in user
		/// CompanyNotificationList api/v1/company/notification/list
		/// </summary>
		public async Task CompanyNotificationListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/notification/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of registered notifications
		/// Query list of registered notifications for a specific company identified by a company id
		/// CompanyNotificationId api/v1/company/notification/list/{id}
		/// </summary>
		/// <param name="id">Company Hex ID</param>
		/// <returns>List of monitor webhooks</returns>
		public async Task<string[]> CompanyNotificationIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/notification/list/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unregister a company from Monitoring
		/// Deactivate a previously registered company monitor identified by the notifier id
		/// CompanyNotificationUnregister api/v1/company/notification/unregister/{id}
		/// </summary>
		/// <param name="id">Registration id of monitoring request record</param>
		/// <returns>Empty response body</returns>
		public async Task CompanyNotificationUnregisterAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/notification/unregister/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of companies from the KYC API company index
		/// KYC API company index lookup for companies with a certain name in a country.
		/// CompanySearchName api/v1/company/search/name/{country}/{name}
		/// </summary>
		/// <param name="country">ISO_3166-1_alpha-2 representation of a country name - 2 chars</param>
		/// <param name="name">company name</param>
		/// <param name="limit">number of search results</param>
		/// <returns>List of companies</returns>
		public async Task<CompanySearchNameReturn[]> CompanySearchNameAsync(string country, string name, long limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/search/name/"+ (country==null? "" : System.Uri.EscapeDataString(country))+"/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompanySearchNameReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of companies from the KYC API company index
		/// KYC API company index lookup for companies with a certain register number in a country.
		/// CompanySearchNumber api/v1/company/search/number/{country}/{number}
		/// </summary>
		/// <param name="country">ISO_3166-1_alpha-2 representation of a country name - 2 chars</param>
		/// <param name="number">company registration number</param>
		/// <param name="limit">number of search results</param>
		public async Task CompanySearchNumberAsync(string country, string number, long limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/search/number/"+ (country==null? "" : System.Uri.EscapeDataString(country))+"/"+ (number==null? "" : System.Uri.EscapeDataString(number))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves company announcements
		/// Search announcements filed to the business register from a company identified by an id
		/// CompanyIdAnnouncements api/v1/company/{id}/announcements
		/// </summary>
		/// <param name="id">company hex ID</param>
		/// <param name="limit">limit of announcements in response (default 10)</param>
		/// <param name="offset">to paginate through results (default 0)</param>
		/// <param name="data">If this parameter is set to false, you will only receive ids, and no additional data about announcements and no hits to the metric will be counted. (and potentially minimizing your costs)</param>
		public async Task CompanyIdAnnouncementsAsync(string id, int limit, int offset, bool data, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/announcements&limit="+limit+"&offset="+offset+"&data="+data;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves structured data extracted from a company document
		/// Request company superdata identified by company id
		/// CompanyIdSuper api/v1/company/{id}/super/{country}
		/// </summary>
		/// <param name="id">company superdata by id</param>
		/// <param name="country">ISO_3166-1_alpha-2 representation of a country name - 2 chars</param>
		/// <param name="lang">Optional data translation (only available in limited jurisdictions)</param>
		public async Task CompanyIdSuperAsync(string id, string country, CompanyIdSuperLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/super/"+ (country==null? "" : System.Uri.EscapeDataString(country))+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves company details
		/// Get company details by id. The level of details is defined by the dataset parameter
		/// CompanyIdDataset api/v1/company/{id}/{dataset}
		/// </summary>
		/// <param name="id">company master data by id</param>
		/// <param name="check_stock_listing">Try to retrieve additional stock information for this company. (Only available on refresh)</param>
		/// <param name="dataset">company master data by id</param>
		/// <param name="lang">Optional data translation (only available in limited jurisdictions)</param>
		public async Task CompanyIdDatasetAsync(string id, bool check_stock_listing, CompanyIdDatasetDataset dataset, CompanyIdDatasetLang lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/company/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/"+dataset+"&check_stock_listing="+check_stock_listing+"&lang=" + lang;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verifies an EIN number
		/// Performs a basic verification check of a given EIN tax number.
		/// EinVerificationBasic api/v1/ein-verification/basic-check
		/// </summary>
		/// <param name="ein">Nine letter EIN number with or without hyphens</param>
		/// <returns>Result of a basic EIN number verification</returns>
		public async Task<object> EinVerificationBasicAsync(string ein, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/ein-verification/basic-check?ein=" + (ein==null? "" : System.Uri.EscapeDataString(ein));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verifies EIN number and retrieves company data
		/// Comprehensive verification of a given EIN number. Additionally to the basic verification it will lookup company details
		/// EinVerificationComprehensive api/v1/ein-verification/comprehensive-check
		/// </summary>
		/// <param name="ein">Nine letter EIN number with or without hyphens</param>
		/// <returns>Result of a comprehensive EIN number verification</returns>
		public async Task<object> EinVerificationComprehensiveAsync(string ein, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/ein-verification/comprehensive-check?ein=" + (ein==null? "" : System.Uri.EscapeDataString(ein));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of EIN numbers
		/// Lookup EIN number for a company by its company name
		/// EinVerificationLookup api/v1/ein-verification/lookup
		/// </summary>
		/// <param name="name">Business name of the company</param>
		/// <param name="state">Optional state parameter to improve results. (Two letter code for example CA or US-CA for California)</param>
		/// <param name="zip">Optional zip code parameter to improve results. (Zip is preferred over state)</param>
		/// <param name="tight">Optional parameter to do tight matching. (Only the best match will be returned rather then the top 5)</param>
		/// <returns>Result of a EIN reverse lookup</returns>
		public async Task<object> EinVerificationLookupAsync(string name, string state, string zip, bool tight, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/ein-verification/lookup?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&zip=" + (zip==null? "" : System.Uri.EscapeDataString(zip))+"&tight="+tight;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of monitor entries
		/// Retrieve a list of all active Pep Sanction Report monitors for this account
		/// PepMonitorList api/v1/pepsanction/monitor/list
		/// </summary>
		/// <returns>View Pep Sanction Report monitors</returns>
		public async Task<string[]> PepMonitorListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/pepsanction/monitor/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deactive a pep sanction monitor
		/// Unregister a previously created Pep Sanction Report Monitor
		/// PepMonitorUnregister api/v1/pepsanction/monitor/unregister/{id}
		/// </summary>
		/// <param name="id">The identifier of the Monitor</param>
		public async Task PepMonitorUnregisterAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/pepsanction/monitor/unregister/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a json or pdf report
		/// Retrieve a completed Pep Sanction check structured or in pdf depending on given accept header
		/// PepRetrieve api/v1/pepsanction/retrieve/{id}
		/// </summary>
		/// <param name="id">The id of the ordered Pep Sanction Check (id as returned by orderPepSanction call)</param>
		/// <returns>Result of a PEP and sanctions list check</returns>
		public async Task<object> PepRetrieveAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/pepsanction/retrieve/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a document availability result
		/// Check availability and valid options for a particular product for a particular company identfied by its id
		/// ProductAvailability api/v1/product/availability/{sku}/{subjectId}
		/// </summary>
		/// <param name="sku">SKU - 9 character value from a Product object</param>
		/// <param name="subjectId">Subject (e.g. Company) ID - 32 character hex value</param>
		/// <returns>Product details</returns>
		public async Task<object> ProductAvailabilityAsync(string sku, string subjectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/product/availability/"+ (sku==null? "" : System.Uri.EscapeDataString(sku))+"/"+ (subjectId==null? "" : System.Uri.EscapeDataString(subjectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a catalog of products
		/// Returns a catalog of purchasable products available with some metadata for a particular country
		/// ProductCatalog api/v1/product/catalog/{country}
		/// </summary>
		/// <param name="country">two letter country code in upper case</param>
		/// <returns>Product with details like URI to purchase it</returns>
		public async Task<object> ProductCatalogAsync(string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/product/catalog/"+ (country==null? "" : System.Uri.EscapeDataString(country));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns metadata for a notifier
		/// Queries and returns all metadata associated with a notifier identified by its notifer id
		/// ProductNotifier api/v1/product/notifier/{notifierId}
		/// </summary>
		/// <param name="notifierId">ID of the ProductOrderNotifier as returned from a /notifier POST call - 32 character hex value</param>
		public async Task ProductNotifierAsync(string notifierId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/product/notifier/"+ (notifierId==null? "" : System.Uri.EscapeDataString(notifierId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a notifier for an order
		/// Create a notifier for a particular order. Parameters can be supplied in the path
		/// ProductNotifierCreate api/v1/product/notifier/{orderId}/{type}/{uri}
		/// </summary>
		/// <param name="orderId">ID of the ProductOrder as returned from a /product/buy call - 32 character hex value</param>
		/// <param name="type">Type of the notifier - indicates the action the notifier will perform. Currently GET and POST are supported which performs an http(s) GET/POST to the supplied uri with appended notifierId= and orderId= parameters when the order processing is completed. Upon the POST request the order object is sent as a JSON body</param>
		/// <param name="uri">URI of the notifier for the 'complete' action. Currently only a GET method HTTP(s) URL is supported. 1 to 250 characters long. Every slash in the URI must be replaced by a ~</param>
		/// <returns>Details of configured product order notification</returns>
		public async Task<object> ProductNotifierCreateAsync(string orderId, string type, string uri, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/product/notifier/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+"/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (uri==null? "" : System.Uri.EscapeDataString(uri));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Places a product order
		/// Place an order for a particular product identified by its SKU with a particular option for a particular company identified by its id
		/// ProductOrderWithOption api/v1/product/order/{sku}/{option}/{subjectId}
		/// </summary>
		/// <param name="sku">SKU - 9 character value from a Product object</param>
		/// <param name="option">Product option (e.g. Accounts year) from a previous Availability call</param>
		/// <param name="subjectId">Subject (e.g. Company) ID - 32 character hex value</param>
		public async Task ProductOrderWithOptionAsync(string sku, string option, string subjectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/product/order/"+ (sku==null? "" : System.Uri.EscapeDataString(sku))+"/"+ (option==null? "" : System.Uri.EscapeDataString(option))+"/"+ (subjectId==null? "" : System.Uri.EscapeDataString(subjectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Places a product order
		/// Place an order for a particular product identified by its SKU for a particular company identified by its id
		/// ProductOrder api/v1/product/order/{sku}/{subjectId}
		/// </summary>
		/// <param name="sku">SKU - 9 character value from a Product object</param>
		/// <param name="subjectId">Subject (e.g. Company) ID - 32 character hex value</param>
		/// <returns>Product order details</returns>
		public async Task<object> ProductOrderAsync(string sku, string subjectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/product/order/"+ (sku==null? "" : System.Uri.EscapeDataString(sku))+"/"+ (subjectId==null? "" : System.Uri.EscapeDataString(subjectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of products
		/// Search for possible products for a particular company identified by its id
		/// ProductSearch api/v1/product/search/{subjectId}
		/// </summary>
		/// <param name="subjectId">Subject (e.g. Company) ID - 32 character hex value</param>
		/// <returns>List of products</returns>
		public async Task<ProductSearchReturn[]> ProductSearchAsync(string subjectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/product/search/"+ (subjectId==null? "" : System.Uri.EscapeDataString(subjectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductSearchReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns metadata for a order
		/// Retrieve the current status of an order identified by its order id
		/// ProductStatus api/v1/product/status/{orderId}
		/// </summary>
		/// <param name="orderId">ID of the ProductOrder as returned from a /product/buy call - 32 character hex value</param>
		public async Task ProductStatusAsync(string orderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/product/status/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the result of an order
		/// Retrieves the document or structured data associated with a completed order identified with its order id
		/// ProductRetrieve api/v1/product/{orderId}
		/// </summary>
		/// <param name="orderId">ID of the ProductOrder as returned from a /product/buy call - 32 character hex value</param>
		/// <returns>Details for retrieval of a delivered product</returns>
		public async Task<object> ProductRetrieveAsync(string orderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/product/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of countries
		/// Retrieve the list of all currently enabled countries
		/// SystemCountries api/v1/system/countries
		/// </summary>
		/// <returns>List of countries</returns>
		public async Task<SystemCountriesReturn[]> SystemCountriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/system/countries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemCountriesReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the health information for the official business registers based on usage.
		/// Returns the health information for the official business registers based on usage.
		/// HealthCheck api/v1/system/health
		/// </summary>
		/// <returns>List of the commercial registers and their health data</returns>
		public async Task<HealthCheckReturn[]> HealthCheckAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/system/health";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HealthCheckReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of products with prices
		/// Retrieve pricing rules for your subscription plan
		/// SystemPricelist api/v1/system/pricelist
		/// </summary>
		/// <returns>List of pricing rules</returns>
		public async Task<SystemPricelistReturn[]> SystemPricelistAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/system/pricelist";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemPricelistReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verifies a TIN number
		/// Performs a basic verification check of a given TIN number and name.
		/// TinVerificationBasicCheck api/v1/tin-verification/basic-check
		/// </summary>
		/// <param name="tin">Nine letter TIN number with or without hyphens</param>
		/// <param name="name">Company Name</param>
		/// <returns>Result of a basic TIN number check with company name</returns>
		public async Task<object> TinVerificationBasicCheckAsync(string tin, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tin-verification/basic-check?tin=" + (tin==null? "" : System.Uri.EscapeDataString(tin))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// EIN Name Lookup with TIN number and retrieves company data
		/// Performs an EIN name match using provided TIN Number. Additionally to the name lookup it will lookup company details
		/// TinVerificationComprehensiveCheck api/v1/tin-verification/comprehensive-check
		/// </summary>
		/// <param name="tin">Nine letter TIN number with or without hyphens</param>
		/// <param name="name">Company Name</param>
		/// <param name="threshold">The percentage of minimum similarity threshold for company matching (optional, default: 70%)</param>
		/// <returns>Result of a basic TIN number check with company name and the list of matched companies</returns>
		public async Task<object> TinVerificationComprehensiveCheckAsync(string tin, string name, long threshold, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tin-verification/comprehensive-check?tin=" + (tin==null? "" : System.Uri.EscapeDataString(tin))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&threshold="+threshold;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// EIN Name Lookup with TIN number
		/// Performs an EIN name match using provided TIN Number
		/// TinVerificationNameLookup api/v1/tin-verification/name-lookup
		/// </summary>
		/// <param name="tin">Nine letter TIN number with or without hyphens</param>
		/// <returns>Result of a EIN name lookup with TIN number</returns>
		public async Task<object> TinVerificationNameLookupAsync(string tin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tin-verification/name-lookup?tin=" + (tin==null? "" : System.Uri.EscapeDataString(tin));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CompanyAnnouncementReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationNumber")]
		public string RegistrationNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="structured")]
		public string Structured { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateOnly> Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class CompanySearchNameReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string[] Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateOfIncorporation")]
		public string DateOfIncorporation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extraData")]
		public string ExtraData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formattedAddress")]
		public string[] FormattedAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legalForm")]
		public string LegalForm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="managingDirectors")]
		public string[] ManagingDirectors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationNumber")]
		public string RegistrationNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestTime")]
		public System.Nullable<System.Int32> RequestTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secretaries")]
		public string[] Secretaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sicNaceCodes")]
		public string[] SicNaceCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public enum CompanyIdSuperLang
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EN = 2,
	}
	
	public enum CompanyIdDatasetDataset
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mini = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		master = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		full = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		refresh = 4,
	}
	
	public enum CompanyIdDatasetLang
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FR = 3,
	}
	
	public enum PepOrderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		B = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P = 2,
	}
	
	public enum PepRetrieveAccept
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/pdf")]
		application_pdf = 1,
	}
	
	public class ProductSearchReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasOptions")]
		public System.Nullable<System.Boolean> HasOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Single> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class SystemCountriesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country_name")]
		public string Country_name { get; set; }
	}
	
	public class HealthCheckReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class SystemPricelistReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="cost_per_unit")]
		public string Cost_per_unit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="max")]
		public string Max { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metric_id")]
		public string Metric_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="min")]
		public string Min { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
