//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Display data for verifications through postcard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddressVerificationData
	{
		
		/// <summary>
		/// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PostalAddress Address { get; set; }
		
		/// <summary>
		/// Merchant's business name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="business")]
		public string Business { get; set; }
		
		/// <summary>
		/// Expected number of days it takes to deliver a postcard to the address's region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedDeliveryDaysRegion")]
		public System.Nullable<System.Int32> ExpectedDeliveryDaysRegion { get; set; }
	}
	
	/// <summary>
	/// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostalAddress
	{
		
		/// <summary>
		/// Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLines")]
		public string[] AddressLines { get; set; }
		
		/// <summary>
		/// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrativeArea")]
		public string AdministrativeArea { get; set; }
		
		/// <summary>
		/// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Optional. The name of the organization at the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public string[] Recipients { get; set; }
		
		/// <summary>
		/// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. CÃ´te d'Ivoire).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortingCode")]
		public string SortingCode { get; set; }
		
		/// <summary>
		/// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sublocality")]
		public string Sublocality { get; set; }
	}
	
	/// <summary>
	/// Request message for Verifications.CompleteVerificationAction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteVerificationRequest
	{
		
		/// <summary>
		/// Required. PIN code received by the merchant to complete the verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pin")]
		public string Pin { get; set; }
	}
	
	/// <summary>
	/// Response message for Verifications.CompleteVerificationAction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteVerificationResponse
	{
		
		/// <summary>
		/// A verification represents a verification attempt on a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification")]
		public Verification Verification { get; set; }
	}
	
	/// <summary>
	/// A verification represents a verification attempt on a location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Verification
	{
		
		/// <summary>
		/// Optional. Response announcement set only if the method is VETTED_PARTNER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="announcement")]
		public string Announcement { get; set; }
		
		/// <summary>
		/// The timestamp when the verification is requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The method of the verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public System.Nullable<VerificationMethod> Method { get; set; }
		
		/// <summary>
		/// Resource name of the verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The state of the verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<VerificationState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VerificationMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFICATION_METHOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE_CALL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VETTED_PARTNER = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VerificationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// Indicates that the location fails to comply with our [guidelines](https://support.google.com/business/answer/3038177).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComplyWithGuidelines
	{
		
		/// <summary>
		/// The reason why the location is being recommended to comply with guidelines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendationReason")]
		public System.Nullable<ComplyWithGuidelinesRecommendationReason> RecommendationReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ComplyWithGuidelinesRecommendationReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOMMENDATION_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_LOCATION_SUSPENDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_LOCATION_DISABLED = 2,
	}
	
	/// <summary>
	/// Display data for verifications through email.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmailVerificationData
	{
		
		/// <summary>
		/// Domain name in the email address. e.g. "gmail.com" in foo@gmail.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Whether client is allowed to provide a different user name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUserNameEditable")]
		public System.Nullable<System.Boolean> IsUserNameEditable { get; set; }
		
		/// <summary>
		/// User name in the email address. e.g. "foo" in foo@gmail.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	/// <summary>
	/// Request message for Verifications.FetchVerificationOptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchVerificationOptionsRequest
	{
		
		/// <summary>
		/// Additional data for service business verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public ServiceBusinessContext Context { get; set; }
		
		/// <summary>
		/// Required. The BCP 47 language code representing the language that is to be used for the verification process. Available options vary by language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
	}
	
	/// <summary>
	/// Additional data for service business verification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceBusinessContext
	{
		
		/// <summary>
		/// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PostalAddress Address { get; set; }
	}
	
	/// <summary>
	/// Response message for Verifications.FetchVerificationOptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchVerificationOptionsResponse
	{
		
		/// <summary>
		/// The available verification options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public VerificationOption[] Options { get; set; }
	}
	
	/// <summary>
	/// The verification option represents how to verify the location (indicated by verification method) and where the verification will be sent to (indicated by display data).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerificationOption
	{
		
		/// <summary>
		/// Display data for verifications through postcard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressData")]
		public AddressVerificationData AddressData { get; set; }
		
		/// <summary>
		/// Set only if the method is VETTED_PARTNER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="announcement")]
		public string Announcement { get; set; }
		
		/// <summary>
		/// Display data for verifications through email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailData")]
		public EmailVerificationData EmailData { get; set; }
		
		/// <summary>
		/// Set only if the method is PHONE_CALL or SMS. Phone number that the PIN will be sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Method to verify the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationMethod")]
		public VerificationMethod VerificationMethod { get; set; }
	}
	
	/// <summary>
	/// Response message for Verifications.ListVerifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVerificationsResponse
	{
		
		/// <summary>
		/// If the number of verifications exceeded the requested page size, this field will be populated with a token to fetch the next page of verification on a subsequent call. If there are no more attributes, this field will not be present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of the verifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifications")]
		public Verification[] Verifications { get; set; }
	}
	
	/// <summary>
	/// Indicates that the location duplicates another location that is in good standing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResolveOwnershipConflict
	{
	}
	
	/// <summary>
	/// Token generated by a vetted [partner](https://support.google.com/business/answer/7674102).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerificationToken
	{
		
		/// <summary>
		/// The token string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenString")]
		public string TokenString { get; set; }
	}
	
	/// <summary>
	/// Indicates that the location requires verification. Contains information about the current verification actions performed on the location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Verify
	{
		
		/// <summary>
		/// Indicates whether a verification process has already started, and can be completed by the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasPendingVerification")]
		public System.Nullable<System.Boolean> HasPendingVerification { get; set; }
	}
	
	/// <summary>
	/// Request message for Verifications.VerifyLocation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyLocationRequest
	{
		
		/// <summary>
		/// Additional data for service business verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public ServiceBusinessContext Context { get; set; }
		
		/// <summary>
		/// Optional. The input for EMAIL method. Email address where the PIN should be sent to. An email address is accepted only if it is one of the addresses provided by FetchVerificationOptions. If the EmailVerificationData has is_user_name_editable set to true, the client may specify a different user name (local-part) but must match the domain name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Optional. The BCP 47 language code representing the language that is to be used for the verification process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Optional. The input for ADDRESS method. Contact name the mail should be sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mailerContact")]
		public string MailerContact { get; set; }
		
		/// <summary>
		/// Required. Verification method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public VerificationMethod Method { get; set; }
		
		/// <summary>
		/// Optional. The input for PHONE_CALL/SMS method The phone number that should be called or be sent SMS to. It must be one of the phone numbers in the eligible options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Token generated by a vetted [partner](https://support.google.com/business/answer/7674102).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public VerificationToken Token { get; set; }
	}
	
	/// <summary>
	/// Response message for Verifications.VerifyLocation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyLocationResponse
	{
		
		/// <summary>
		/// A verification represents a verification attempt on a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification")]
		public Verification Verification { get; set; }
	}
	
	/// <summary>
	/// Response message for VoiceOfMerchant.GetVoiceOfMerchantState.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VoiceOfMerchantState
	{
		
		/// <summary>
		/// Indicates that the location fails to comply with our [guidelines](https://support.google.com/business/answer/3038177).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complyWithGuidelines")]
		public ComplyWithGuidelines ComplyWithGuidelines { get; set; }
		
		/// <summary>
		/// Indicates whether the location has the authority (ownership) over the business on Google. If true, another location cannot take over and become the dominant listing on Maps. However, edits will not become live unless Voice of Merchant is gained (i.e. has_voice_of_merchant is true).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasBusinessAuthority")]
		public System.Nullable<System.Boolean> HasBusinessAuthority { get; set; }
		
		/// <summary>
		/// Indicates whether the location is in good standing and has control over the business on Google. Any edits made to the location will propagate to Maps after passing the review phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasVoiceOfMerchant")]
		public System.Nullable<System.Boolean> HasVoiceOfMerchant { get; set; }
		
		/// <summary>
		/// Indicates that the location duplicates another location that is in good standing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolveOwnershipConflict")]
		public ResolveOwnershipConflict ResolveOwnershipConflict { get; set; }
		
		/// <summary>
		/// Indicates that the location requires verification. Contains information about the current verification actions performed on the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verify")]
		public Verify Verify { get; set; }
		
		/// <summary>
		/// Indicates that the location will gain voice of merchant after passing review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitForVoiceOfMerchant")]
		public WaitForVoiceOfMerchant WaitForVoiceOfMerchant { get; set; }
	}
	
	/// <summary>
	/// Indicates that the location will gain voice of merchant after passing review.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WaitForVoiceOfMerchant
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Reports all eligible verification options for a location in a specific language.
		/// Mybusinessverifications_locations_fetchVerificationOptions v1/{location}:fetchVerificationOptions
		/// </summary>
		/// <param name="location">Required. The location to verify.</param>
		/// <returns>Successful response</returns>
		public async Task<FetchVerificationOptionsResponse> Mybusinessverifications_locations_fetchVerificationOptionsAsync(string location, FetchVerificationOptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (location==null? "" : System.Uri.EscapeDataString(location))+":fetchVerificationOptions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FetchVerificationOptionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the VoiceOfMerchant state.
		/// Mybusinessverifications_locations_getVoiceOfMerchantState v1/{name}/VoiceOfMerchantState
		/// </summary>
		/// <param name="name">Required. Resource name of the location.</param>
		/// <returns>Successful response</returns>
		public async Task<VoiceOfMerchantState> Mybusinessverifications_locations_getVoiceOfMerchantStateAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/VoiceOfMerchantState";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VoiceOfMerchantState>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Completes a `PENDING` verification. It is only necessary for non `AUTO` verification methods. `AUTO` verification request is instantly `VERIFIED` upon creation.
		/// Mybusinessverifications_locations_verifications_complete v1/{name}:complete
		/// </summary>
		/// <param name="name">Required. Resource name of the verification to complete.</param>
		/// <returns>Successful response</returns>
		public async Task<CompleteVerificationResponse> Mybusinessverifications_locations_verifications_completeAsync(string name, CompleteVerificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":complete";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CompleteVerificationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts the verification process for a location.
		/// Mybusinessverifications_locations_verify v1/{name}:verify
		/// </summary>
		/// <param name="name">Required. Resource name of the location to verify.</param>
		/// <returns>Successful response</returns>
		public async Task<VerifyLocationResponse> Mybusinessverifications_locations_verifyAsync(string name, VerifyLocationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":verify";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VerifyLocationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List verifications of a location, ordered by create time.
		/// Mybusinessverifications_locations_verifications_list v1/{parent}/verifications
		/// </summary>
		/// <param name="parent">Required. Resource name of the location that verification requests belong to.</param>
		/// <param name="pageSize">How many verification to include per page. Minimum is 1, and the default and maximum page size is 100.</param>
		/// <param name="pageToken">If specified, returns the next page of verifications.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVerificationsResponse> Mybusinessverifications_locations_verifications_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/verifications&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListVerificationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
