//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAwsLogSourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public string[] Failed { get; set; }
	}
	
	/// <summary>
	/// The Security Lake logs source configuration file describes the information needed to generate Security Lake logs. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwsLogSourceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public string[] Accounts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public string[] Regions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceName")]
		public AwsLogSourceName SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public string SourceVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AwsLogSourceName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ROUTE53")]
		ROUTE53 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VPC_FLOW")]
		VPC_FLOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SH_FINDINGS")]
		SH_FINDINGS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOUD_TRAIL_MGMT")]
		CLOUD_TRAIL_MGMT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAMBDA_EXECUTION")]
		LAMBDA_EXECUTION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S3_DATA")]
		S3_DATA = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomLogSourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public CustomLogSourceResource Source { get; set; }
	}
	
	/// <summary>
	/// Amazon Security Lake can collect logs and events from third-party custom sources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomLogSourceResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public CustomLogSourceAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public CustomLogSourceProvider Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceName")]
		public string SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public string SourceVersion { get; set; }
	}
	
	/// <summary>
	/// The attributes of a third-party custom source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomLogSourceAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="crawlerArn")]
		public string CrawlerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="databaseArn")]
		public string DatabaseArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableArn")]
		public string TableArn { get; set; }
	}
	
	/// <summary>
	/// The details of the log provider for a third-party custom source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomLogSourceProvider
	{
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// The configuration for the Glue Crawler for the third-party custom source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomLogSourceCrawlerConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// The AWS identity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwsIdentity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDataLakeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataLakes")]
		public DataLakeResource[] DataLakes { get; set; }
	}
	
	/// <summary>
	/// Provides details of Amazon Security Lake object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataLakeResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="createStatus")]
		public DataLakeStatus CreateStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataLakeArn")]
		public string DataLakeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionConfiguration")]
		public DataLakeEncryptionConfiguration EncryptionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycleConfiguration")]
		public DataLakeLifecycleConfiguration LifecycleConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationConfiguration")]
		public DataLakeReplicationConfiguration ReplicationConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3BucketArn")]
		public string S3BucketArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateStatus")]
		public DataLakeUpdateStatus UpdateStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataLakeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INITIALIZED")]
		INITIALIZED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
	}
	
	/// <summary>
	/// Provides encryption details of Amazon Security Lake object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataLakeEncryptionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
	}
	
	/// <summary>
	/// Provides lifecycle details of Amazon Security Lake object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataLakeLifecycleConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public DataLakeLifecycleExpiration Expiration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transitions")]
		public DataLakeLifecycleTransition[] Transitions { get; set; }
	}
	
	/// <summary>
	/// Provide expiration lifecycle details of Amazon Security Lake object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataLakeLifecycleExpiration
	{
		
		[System.Runtime.Serialization.DataMember(Name="days")]
		public System.Nullable<System.Int32> Days { get; set; }
	}
	
	/// <summary>
	/// Provide transition lifecycle details of Amazon Security Lake object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataLakeLifecycleTransition
	{
		
		[System.Runtime.Serialization.DataMember(Name="days")]
		public System.Nullable<System.Int32> Days { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageClass")]
		public string StorageClass { get; set; }
	}
	
	/// <summary>
	/// Provides replication details of Amazon Security Lake object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataLakeReplicationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public string[] Regions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// The status of the last <code>UpdateDataLake</code> or <code>DeleteDataLake</code> API request. This is set to Completed after the configuration is updated, or removed if deletion of the data lake is successful.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataLakeUpdateStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="exception")]
		public DataLakeUpdateException Exception { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DataLakeStatus Status { get; set; }
	}
	
	/// <summary>
	/// The details of the last <code>UpdateDataLake</code> or <code>DeleteDataLake</code> API request which failed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataLakeUpdateException
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Provides details of Amazon Security Lake object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataLakeConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="encryptionConfiguration")]
		public DataLakeEncryptionConfiguration EncryptionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycleConfiguration")]
		public DataLakeLifecycleConfiguration LifecycleConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationConfiguration")]
		public DataLakeReplicationConfiguration ReplicationConfiguration { get; set; }
	}
	
	/// <summary>
	/// <p>A <i>tag</i> is a label that you can define and associate with Amazon Web Services resources, including certain types of Amazon Security Lake resources. Tags can help you identify, categorize, and manage resources in different ways, such as by owner, environment, or other criteria. You can associate tags with the following types of Security Lake resources: subscribers, and the data lake configuration for your Amazon Web Services account in individual Amazon Web Services Regions.</p> <p>A resource can have up to 50 tags. Each tag consists of a required <i>tag key</i> and an associated <i>tag value</i>. A <i>tag key</i> is a general label that acts as a category for a more specific tag value. Each tag key must be unique and it can have only one tag value. A <i>tag value</i> acts as a descriptor for a tag key. Tag keys and values are case sensitive. They can contain letters, numbers, spaces, or the following symbols: _ . : / = + @ -</p> <p>For more information, see <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/tagging-resources.html">Tagging Amazon Security Lake resources</a> in the <i>Amazon Security Lake User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDataLakeExceptionSubscriptionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDataLakeOrganizationConfigurationResponse
	{
	}
	
	/// <summary>
	/// Automatically enable new organization accounts as member accounts from an Amazon Security Lake administrator account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataLakeAutoEnableNewAccountConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public AwsLogSourceResource[] Sources { get; set; }
	}
	
	/// <summary>
	/// Amazon Security Lake can collect logs and events from natively-supported Amazon Web Services services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwsLogSourceResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceName")]
		public AwsLogSourceName SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public string SourceVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSubscriberResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="subscriber")]
		public SubscriberResource Subscriber { get; set; }
	}
	
	/// <summary>
	/// Provides details about the Amazon Security Lake account subscription. Subscribers are notified of new objects for a source as the data is written to your Amazon S3 bucket for Security Lake.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriberResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessTypes")]
		public AccessType[] AccessTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceShareArn")]
		public string ResourceShareArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceShareName")]
		public string ResourceShareName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3BucketArn")]
		public string S3BucketArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public LogSourceResource[] Sources { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriberArn")]
		public string SubscriberArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriberDescription")]
		public string SubscriberDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriberEndpoint")]
		public string SubscriberEndpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriberId")]
		public string SubscriberId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriberIdentity")]
		public AwsIdentity SubscriberIdentity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriberName")]
		public string SubscriberName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriberStatus")]
		public SubscriberStatus SubscriberStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAKEFORMATION")]
		LAKEFORMATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S3")]
		S3 = 1,
	}
	
	/// <summary>
	/// The supported source types from which logs and events are collected in Amazon Security Lake. For a list of supported Amazon Web Services, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html">Amazon Security Lake User Guide</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogSourceResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsLogSource")]
		public AwsLogSourceResource AwsLogSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customLogSource")]
		public CustomLogSourceResource CustomLogSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SubscriberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEACTIVATED")]
		DEACTIVATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READY")]
		READY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSubscriberNotificationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="subscriberEndpoint")]
		public string SubscriberEndpoint { get; set; }
	}
	
	/// <summary>
	/// The configurations for HTTPS subscriber notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpsNotificationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizationApiKeyName")]
		public string AuthorizationApiKeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorizationApiKeyValue")]
		public string AuthorizationApiKeyValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpMethod")]
		public HttpMethod_ HttpMethod { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetRoleArn")]
		public string TargetRoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HttpMethod_
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POST")]
		POST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUT")]
		PUT = 1,
	}
	
	/// <summary>
	/// The configurations for SQS subscriber notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SqsNotificationConfiguration
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAwsLogSourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public string[] Failed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCustomLogSourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDataLakeResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDataLakeExceptionSubscriptionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDataLakeOrganizationConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSubscriberResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSubscriberNotificationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterDataLakeDelegatedAdministratorResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDataLakeExceptionSubscriptionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="exceptionTimeToLive")]
		public System.Nullable<System.Int32> ExceptionTimeToLive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationEndpoint")]
		public string NotificationEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionProtocol")]
		public string SubscriptionProtocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDataLakeOrganizationConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoEnableNewAccount")]
		public DataLakeAutoEnableNewAccountConfiguration[] AutoEnableNewAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDataLakeSourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataLakeArn")]
		public string DataLakeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataLakeSources")]
		public DataLakeSource[] DataLakeSources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Amazon Security Lake collects logs and events from supported Amazon Web Services and custom sources. For the list of supported Amazon Web Services, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html">Amazon Security Lake User Guide</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataLakeSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventClasses")]
		public string[] EventClasses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceName")]
		public string SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceStatuses")]
		public DataLakeSourceStatus[] SourceStatuses { get; set; }
	}
	
	/// <summary>
	/// Retrieves the Logs status for the Amazon Security Lake account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataLakeSourceStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public SourceCollectionStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SourceCollectionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COLLECTING")]
		COLLECTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MISCONFIGURED")]
		MISCONFIGURED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_COLLECTING")]
		NOT_COLLECTING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSubscriberResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="subscriber")]
		public SubscriberResource Subscriber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDataLakeExceptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="exceptions")]
		public DataLakeException[] Exceptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The details for an Amazon Security Lake exception.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataLakeException
	{
		
		[System.Runtime.Serialization.DataMember(Name="exception")]
		public string Exception { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remediation")]
		public string Remediation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDataLakesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataLakes")]
		public DataLakeResource[] DataLakes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLogSourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public LogSource[] Sources { get; set; }
	}
	
	/// <summary>
	/// Amazon Security Lake can collect logs and events from natively-supported Amazon Web Services services and custom sources. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public LogSourceResource[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSubscribersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscribers")]
		public SubscriberResource[] Subscribers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterDataLakeDelegatedAdministratorResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDataLakeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataLakes")]
		public DataLakeResource[] DataLakes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDataLakeExceptionSubscriptionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSubscriberResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="subscriber")]
		public SubscriberResource Subscriber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSubscriberNotificationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="subscriberEndpoint")]
		public string SubscriberEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAwsLogSourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public AwsLogSourceConfiguration[] Sources { get; set; }
	}
	
	/// <summary>
	/// The configuration for the third-party custom source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomLogSourceConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="crawlerConfiguration")]
		public CustomLogSourceCrawlerConfiguration CrawlerConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="providerIdentity")]
		public AwsIdentity ProviderIdentity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomLogSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public CustomLogSourceConfiguration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventClasses")]
		public string[] EventClasses { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceName")]
		public string SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public string SourceVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDataLakeExceptionSubscriptionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="exceptionTimeToLive")]
		public System.Nullable<System.Int32> ExceptionTimeToLive { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notificationEndpoint")]
		public string NotificationEndpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionProtocol")]
		public string SubscriptionProtocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDataLakeOrganizationConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="autoEnableNewAccount")]
		public DataLakeAutoEnableNewAccountConfiguration[] AutoEnableNewAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDataLakeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configurations")]
		public DataLakeConfiguration[] Configurations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metaStoreManagerRoleArn")]
		public string MetaStoreManagerRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Specify the configurations you want to use for subscriber notification to notify the subscriber when new data is written to the data lake for sources that the subscriber consumes in Security Lake. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpsNotificationConfiguration")]
		public HttpsNotificationConfiguration HttpsNotificationConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sqsNotificationConfiguration")]
		public SqsNotificationConfiguration SqsNotificationConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSubscriberNotificationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public NotificationConfiguration Configuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSubscriberRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessTypes")]
		public AccessType[] AccessTypes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public LogSourceResource[] Sources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriberDescription")]
		public string SubscriberDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriberIdentity")]
		public AwsIdentity SubscriberIdentity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriberName")]
		public string SubscriberName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAwsLogSourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public AwsLogSourceConfiguration[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCustomLogSourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDataLakeExceptionSubscriptionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDataLakeOrganizationConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="autoEnableNewAccount")]
		public DataLakeAutoEnableNewAccountConfiguration[] AutoEnableNewAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDataLakeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public string[] Regions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSubscriberNotificationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSubscriberRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterDataLakeDelegatedAdministratorRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDataLakeExceptionSubscriptionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDataLakeOrganizationConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDataLakeSourcesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public string[] Accounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSubscriberRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDataLakeExceptionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public string[] Regions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDataLakesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLogSourcesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public string[] Accounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public string[] Regions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public LogSourceResource[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSubscribersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterDataLakeDelegatedAdministratorRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDataLakeExceptionSubscriptionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="exceptionTimeToLive")]
		public System.Nullable<System.Int32> ExceptionTimeToLive { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notificationEndpoint")]
		public string NotificationEndpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionProtocol")]
		public string SubscriptionProtocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDataLakeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configurations")]
		public DataLakeConfiguration[] Configurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSubscriberNotificationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public NotificationConfiguration Configuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSubscriberRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public LogSourceResource[] Sources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriberDescription")]
		public string SubscriberDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriberIdentity")]
		public AwsIdentity SubscriberIdentity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriberName")]
		public string SubscriberName { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Adds a natively supported Amazon Web Service as an Amazon Security Lake source. Enables source types for member accounts in required Amazon Web Services Regions, based on the parameters you specify. You can choose any source type in any Region for either accounts that are part of a trusted organization or standalone accounts. Once you add an Amazon Web Service as a source, Security Lake starts collecting logs and events from it.</p> <p>You can use this API only to enable natively supported Amazon Web Services as a source. Use <code>CreateCustomLogSource</code> to enable data collection from a custom source.</p>
		/// CreateAwsLogSource v1/datalake/logsources/aws
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAwsLogSourceResponse> CreateAwsLogSourceAsync(CreateAwsLogSourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/logsources/aws";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAwsLogSourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a third-party custom source in Amazon Security Lake, from the Amazon Web Services Region where you want to create a custom source. Security Lake can collect logs and events from third-party custom sources. After creating the appropriate IAM role to invoke Glue crawler, use this API to add a custom source name in Security Lake. This operation creates a partition in the Amazon S3 bucket for Security Lake as the target location for log files from the custom source. In addition, this operation also creates an associated Glue table and an Glue crawler.
		/// CreateCustomLogSource v1/datalake/logsources/custom
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateCustomLogSourceResponse> CreateCustomLogSourceAsync(CreateCustomLogSourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/logsources/custom";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCustomLogSourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Initializes an Amazon Security Lake instance with the provided (or default) configuration. You can enable Security Lake in Amazon Web Services Regions with customized settings before enabling log collection in Regions. To specify particular Regions, configure these Regions using the <code>configurations</code> parameter. If you have already enabled Security Lake in a Region when you call this command, the command will update the Region if you provide new configuration parameters. If you have not already enabled Security Lake in the Region when you call this API, it will set up the data lake in the Region with the specified configurations.</p> <p>When you enable Security Lake, it starts ingesting security data after the <code>CreateAwsLogSource</code> call. This includes ingesting security data from sources, storing data, and making data accessible to subscribers. Security Lake also enables all the existing settings and resources that it stores or maintains for your Amazon Web Services account in the current Region, including security log and event data. For more information, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/what-is-security-lake.html">Amazon Security Lake User Guide</a>.</p>
		/// CreateDataLake v1/datalake
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDataLakeResponse> CreateDataLakeAsync(CreateDataLakePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDataLakeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Specifies where to store your security data and for how long. You can add a rollup Region to consolidate data from multiple Amazon Web Services Regions.
		/// UpdateDataLake v1/datalake
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDataLakeResponse> UpdateDataLakeAsync(UpdateDataLakePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDataLakeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates the specified notification subscription in Amazon Security Lake for the organization you specify.
		/// CreateDataLakeExceptionSubscription v1/datalake/exceptions/subscription
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDataLakeExceptionSubscriptionResponse> CreateDataLakeExceptionSubscriptionAsync(CreateDataLakeExceptionSubscriptionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/exceptions/subscription";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDataLakeExceptionSubscriptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified notification subscription in Amazon Security Lake for the organization you specify.
		/// DeleteDataLakeExceptionSubscription v1/datalake/exceptions/subscription
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDataLakeExceptionSubscriptionResponse> DeleteDataLakeExceptionSubscriptionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/exceptions/subscription";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDataLakeExceptionSubscriptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the details of exception notifications for the account in Amazon Security Lake.
		/// GetDataLakeExceptionSubscription v1/datalake/exceptions/subscription
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDataLakeExceptionSubscriptionResponse> GetDataLakeExceptionSubscriptionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/exceptions/subscription";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDataLakeExceptionSubscriptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified notification subscription in Amazon Security Lake for the organization you specify.
		/// UpdateDataLakeExceptionSubscription v1/datalake/exceptions/subscription
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDataLakeExceptionSubscriptionResponse> UpdateDataLakeExceptionSubscriptionAsync(UpdateDataLakeExceptionSubscriptionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/exceptions/subscription";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDataLakeExceptionSubscriptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Automatically enables Amazon Security Lake for new member accounts in your organization. Security Lake is not automatically enabled for any existing member accounts in your organization.
		/// CreateDataLakeOrganizationConfiguration v1/datalake/organization/configuration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDataLakeOrganizationConfigurationResponse> CreateDataLakeOrganizationConfigurationAsync(CreateDataLakeOrganizationConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/organization/configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDataLakeOrganizationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the configuration that will be automatically set up for accounts added to the organization after the organization has onboarded to Amazon Security Lake. This API does not take input parameters.
		/// GetDataLakeOrganizationConfiguration v1/datalake/organization/configuration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDataLakeOrganizationConfigurationResponse> GetDataLakeOrganizationConfigurationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/organization/configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDataLakeOrganizationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a subscription permission for accounts that are already enabled in Amazon Security Lake. You can create a subscriber with access to data in the current Amazon Web Services Region.
		/// CreateSubscriber v1/subscribers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSubscriberResponse> CreateSubscriberAsync(CreateSubscriberPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscribers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateSubscriberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all subscribers for the specific Amazon Security Lake account ID. You can retrieve a list of subscriptions associated with a specific organization or Amazon Web Services account.
		/// ListSubscribers v1/subscribers
		/// </summary>
		/// <param name="maxResults">The maximum number of accounts for which the configuration is displayed.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">If nextToken is returned, there are more results available. You can repeat the call using the returned token to retrieve the next page.</param>
		/// <returns>Success</returns>
		public async Task<ListSubscribersResponse> ListSubscribersAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscribers?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSubscribersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Notifies the subscriber when new data is written to the data lake for the sources that the subscriber consumes in Security Lake. You can create only one subscriber notification per subscriber.
		/// CreateSubscriberNotification v1/subscribers/{subscriberId}/notification
		/// </summary>
		/// <param name="subscriberId">The subscriber ID for the notification subscription.</param>
		/// <returns>Success</returns>
		public async Task<CreateSubscriberNotificationResponse> CreateSubscriberNotificationAsync(string subscriberId, CreateSubscriberNotificationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscribers/"+ (subscriberId==null? "" : System.Uri.EscapeDataString(subscriberId))+"/notification";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateSubscriberNotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified notification subscription in Amazon Security Lake for the organization you specify.
		/// DeleteSubscriberNotification v1/subscribers/{subscriberId}/notification
		/// </summary>
		/// <param name="subscriberId">The ID of the Security Lake subscriber account.</param>
		/// <returns>Success</returns>
		public async Task<DeleteSubscriberNotificationResponse> DeleteSubscriberNotificationAsync(string subscriberId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscribers/"+ (subscriberId==null? "" : System.Uri.EscapeDataString(subscriberId))+"/notification";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSubscriberNotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing notification method for the subscription (SQS or HTTPs endpoint) or switches the notification subscription endpoint for a subscriber.
		/// UpdateSubscriberNotification v1/subscribers/{subscriberId}/notification
		/// </summary>
		/// <param name="subscriberId">The subscription ID for which the subscription notification is specified.</param>
		/// <returns>Success</returns>
		public async Task<UpdateSubscriberNotificationResponse> UpdateSubscriberNotificationAsync(string subscriberId, UpdateSubscriberNotificationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscribers/"+ (subscriberId==null? "" : System.Uri.EscapeDataString(subscriberId))+"/notification";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSubscriberNotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Removes a natively supported Amazon Web Service as an Amazon Security Lake source. You can remove a source for one or more Regions. When you remove the source, Security Lake stops collecting data from that source in the specified Regions and accounts, and subscribers can no longer consume new data from the source. However, subscribers can still consume data that Security Lake collected from the source before removal.</p> <p>You can choose any source type in any Amazon Web Services Region for either accounts that are part of a trusted organization or standalone accounts. </p>
		/// DeleteAwsLogSource v1/datalake/logsources/aws/delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAwsLogSourceResponse> DeleteAwsLogSourceAsync(DeleteAwsLogSourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/logsources/aws/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAwsLogSourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a custom log source from Amazon Security Lake, to stop sending data from the custom source to Security Lake.
		/// DeleteCustomLogSource v1/datalake/logsources/custom/{sourceName}
		/// </summary>
		/// <param name="sourceName">The source name of custom log source that you want to delete.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="sourceVersion">The source version for the third-party custom source. You can limit the custom source removal to the specified source version.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteCustomLogSourceResponse> DeleteCustomLogSourceAsync(string sourceName, string sourceVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/logsources/custom/"+ (sourceName==null? "" : System.Uri.EscapeDataString(sourceName))+"&sourceVersion=" + (sourceVersion==null? "" : System.Uri.EscapeDataString(sourceVersion));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCustomLogSourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>When you disable Amazon Security Lake from your account, Security Lake is disabled in all Amazon Web Services Regions and it stops collecting data from your sources. Also, this API automatically takes steps to remove the account from Security Lake. However, Security Lake retains all of your existing settings and the resources that it created in your Amazon Web Services account in the current Amazon Web Services Region.</p> <p>The <code>DeleteDataLake</code> operation does not delete the data that is stored in your Amazon S3 bucket, which is owned by your Amazon Web Services account. For more information, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/disable-security-lake.html">Amazon Security Lake User Guide</a>.</p>
		/// DeleteDataLake v1/datalake/delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDataLakeResponse> DeleteDataLakeAsync(DeleteDataLakePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDataLakeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Turns off automatic enablement of Amazon Security Lake for member accounts that are added to an organization in Organizations. Only the delegated Security Lake administrator for an organization can perform this operation. If the delegated Security Lake administrator performs this operation, new member accounts won't automatically contribute data to the data lake.
		/// DeleteDataLakeOrganizationConfiguration v1/datalake/organization/configuration/delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDataLakeOrganizationConfigurationResponse> DeleteDataLakeOrganizationConfigurationAsync(DeleteDataLakeOrganizationConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/organization/configuration/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDataLakeOrganizationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the subscription permission and all notification settings for accounts that are already enabled in Amazon Security Lake. When you run <code>DeleteSubscriber</code>, the subscriber will no longer consume data from Security Lake and the subscriber is removed. This operation deletes the subscriber and removes access to data in the current Amazon Web Services Region.
		/// DeleteSubscriber v1/subscribers/{subscriberId}
		/// </summary>
		/// <param name="subscriberId">A value created by Security Lake that uniquely identifies your <code>DeleteSubscriber</code> API request.</param>
		/// <returns>Success</returns>
		public async Task<DeleteSubscriberResponse> DeleteSubscriberAsync(string subscriberId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscribers/"+ (subscriberId==null? "" : System.Uri.EscapeDataString(subscriberId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSubscriberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the subscription information for the specified subscription ID. You can get information about a specific subscriber.
		/// GetSubscriber v1/subscribers/{subscriberId}
		/// </summary>
		/// <param name="subscriberId">A value created by Amazon Security Lake that uniquely identifies your <code>GetSubscriber</code> API request.</param>
		/// <returns>Success</returns>
		public async Task<GetSubscriberResponse> GetSubscriberAsync(string subscriberId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscribers/"+ (subscriberId==null? "" : System.Uri.EscapeDataString(subscriberId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSubscriberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing subscription for the given Amazon Security Lake account ID. You can update a subscriber by changing the sources that the subscriber consumes data from.
		/// UpdateSubscriber v1/subscribers/{subscriberId}
		/// </summary>
		/// <param name="subscriberId">A value created by Security Lake that uniquely identifies your subscription.</param>
		/// <returns>Success</returns>
		public async Task<UpdateSubscriberResponse> UpdateSubscriberAsync(string subscriberId, UpdateSubscriberPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscribers/"+ (subscriberId==null? "" : System.Uri.EscapeDataString(subscriberId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSubscriberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the Amazon Security Lake delegated administrator account for the organization. This API can only be called by the organization management account. The organization management account cannot be the delegated administrator account.
		/// DeregisterDataLakeDelegatedAdministrator v1/datalake/delegate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeregisterDataLakeDelegatedAdministratorResponse> DeregisterDataLakeDelegatedAdministratorAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/delegate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeregisterDataLakeDelegatedAdministratorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Designates the Amazon Security Lake delegated administrator account for the organization. This API can only be called by the organization management account. The organization management account cannot be the delegated administrator account.
		/// RegisterDataLakeDelegatedAdministrator v1/datalake/delegate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterDataLakeDelegatedAdministratorResponse> RegisterDataLakeDelegatedAdministratorAsync(RegisterDataLakeDelegatedAdministratorPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/delegate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterDataLakeDelegatedAdministratorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a snapshot of the current Region, including whether Amazon Security Lake is enabled for those accounts and which sources Security Lake is collecting data from.
		/// GetDataLakeSources v1/datalake/sources
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetDataLakeSourcesResponse> GetDataLakeSourcesAsync(string maxResults, string nextToken, GetDataLakeSourcesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/sources?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDataLakeSourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the Amazon Security Lake exceptions that you can use to find the source of problems and fix them.
		/// ListDataLakeExceptions v1/datalake/exceptions
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDataLakeExceptionsResponse> ListDataLakeExceptionsAsync(string maxResults, string nextToken, ListDataLakeExceptionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/exceptions?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDataLakeExceptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the Amazon Security Lake configuration object for the specified Amazon Web Services Regions. You can use this operation to determine whether Security Lake is enabled for a Region.
		/// ListDataLakes v1/datalakes
		/// </summary>
		/// <param name="regions">The list of regions where Security Lake is enabled.</param>
		/// <returns>Success</returns>
		public async Task<ListDataLakesResponse> ListDataLakesAsync(string[] regions, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalakes?"+string.Join("&", regions.Select(z => $"regions={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDataLakesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the log sources in the current Amazon Web Services Region.
		/// ListLogSources v1/datalake/logsources/list
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListLogSourcesResponse> ListLogSourcesAsync(string maxResults, string nextToken, ListLogSourcesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/datalake/logsources/list?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLogSourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the tags (keys and values) that are associated with an Amazon Security Lake resource: a subscriber, or the data lake configuration for your Amazon Web Services account in a particular Amazon Web Services Region.
		/// ListTagsForResource v1/tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the Amazon Security Lake resource to retrieve the tags for.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds or updates one or more tags that are associated with an Amazon Security Lake resource: a subscriber, or the data lake configuration for your Amazon Web Services account in a particular Amazon Web Services Region. A <i>tag</i> is a label that you can define and associate with Amazon Web Services resources. Each tag consists of a required <i>tag key</i> and an associated <i>tag value</i>. A <i>tag key</i> is a general label that acts as a category for a more specific tag value. A <i>tag value</i> acts as a descriptor for a tag key. Tags can help you identify, categorize, and manage resources in different ways, such as by owner, environment, or other criteria. For more information, see <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/tagging-resources.html">Tagging Amazon Security Lake resources</a> in the <i>Amazon Security Lake User Guide</i>.
		/// TagResource v1/tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the Amazon Security Lake resource to add or update the tags for.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes one or more tags (keys and values) from an Amazon Security Lake resource: a subscriber, or the data lake configuration for your Amazon Web Services account in a particular Amazon Web Services Region.
		/// UntagResource v1/tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the Amazon Security Lake resource to remove one or more tags from.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <param name="tagKeys">A list of one or more tag keys. For each value in the list, specify the tag key for a tag to remove from the Amazon Security Lake resource.
		/// Minimum items: 0
		/// Maximum items: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CreateAwsLogSourcePostBody
	{
		
		/// <summary>
		/// Specify the natively-supported Amazon Web Services service to add as a source in Security Lake.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AwsLogSourceConfiguration[] Sources { get; set; }
	}
	
	public class CreateCustomLogSourcePostBody
	{
		
		/// <summary>
		/// The configuration for the third-party custom source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public CreateCustomLogSourcePostBodyConfiguration Configuration { get; set; }
		
		/// <summary>
		/// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:</p> <ul> <li> <p> <code>ACCESS_ACTIVITY</code> </p> </li> <li> <p> <code>FILE_ACTIVITY</code> </p> </li> <li> <p> <code>KERNEL_ACTIVITY</code> </p> </li> <li> <p> <code>KERNEL_EXTENSION</code> </p> </li> <li> <p> <code>MEMORY_ACTIVITY</code> </p> </li> <li> <p> <code>MODULE_ACTIVITY</code> </p> </li> <li> <p> <code>PROCESS_ACTIVITY</code> </p> </li> <li> <p> <code>REGISTRY_KEY_ACTIVITY</code> </p> </li> <li> <p> <code>REGISTRY_VALUE_ACTIVITY</code> </p> </li> <li> <p> <code>RESOURCE_ACTIVITY</code> </p> </li> <li> <p> <code>SCHEDULED_JOB_ACTIVITY</code> </p> </li> <li> <p> <code>SECURITY_FINDING</code> </p> </li> <li> <p> <code>ACCOUNT_CHANGE</code> </p> </li> <li> <p> <code>AUTHENTICATION</code> </p> </li> <li> <p> <code>AUTHORIZATION</code> </p> </li> <li> <p> <code>ENTITY_MANAGEMENT_AUDIT</code> </p> </li> <li> <p> <code>DHCP_ACTIVITY</code> </p> </li> <li> <p> <code>NETWORK_ACTIVITY</code> </p> </li> <li> <p> <code>DNS_ACTIVITY</code> </p> </li> <li> <p> <code>FTP_ACTIVITY</code> </p> </li> <li> <p> <code>HTTP_ACTIVITY</code> </p> </li> <li> <p> <code>RDP_ACTIVITY</code> </p> </li> <li> <p> <code>SMB_ACTIVITY</code> </p> </li> <li> <p> <code>SSH_ACTIVITY</code> </p> </li> <li> <p> <code>CONFIG_STATE</code> </p> </li> <li> <p> <code>INVENTORY_INFO</code> </p> </li> <li> <p> <code>EMAIL_ACTIVITY</code> </p> </li> <li> <p> <code>API_ACTIVITY</code> </p> </li> <li> <p> <code>CLOUD_API</code> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventClasses")]
		public string[] EventClasses { get; set; }
		
		/// <summary>
		/// Specify the name for a third-party custom source. This must be a Regionally unique value.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[\\\w\-_:/.]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\\\w\-_:/.]*$")]
		public string SourceName { get; set; }
		
		/// <summary>
		/// Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.
		/// Min length: 1
		/// Max length: 32
		/// Pattern: ^[A-Za-z0-9\-\.\_]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9\-\.\_]*$")]
		public string SourceVersion { get; set; }
	}
	
	public class CreateCustomLogSourcePostBodyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="crawlerConfiguration")]
		public CustomLogSourceCrawlerConfiguration CrawlerConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providerIdentity")]
		public AwsIdentity ProviderIdentity { get; set; }
	}
	
	public class CreateDataLakePostBody
	{
		
		/// <summary>
		/// Specify the Region or Regions that will contribute data to the rollup region.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configurations")]
		public DataLakeConfiguration[] Configurations { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) used to create and update the Glue table. This table contains partitions generated by the ingestion and normalization of Amazon Web Services log sources and custom sources.
		/// Required
		/// Pattern: ^arn:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metaStoreManagerRoleArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:.*$")]
		public string MetaStoreManagerRoleArn { get; set; }
		
		/// <summary>
		/// An array of objects, one for each tag to associate with the data lake configuration. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	public class UpdateDataLakePutBody
	{
		
		/// <summary>
		/// Specify the Region or Regions that will contribute data to the rollup region.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configurations")]
		public DataLakeConfiguration[] Configurations { get; set; }
	}
	
	public class CreateDataLakeExceptionSubscriptionPostBody
	{
		
		/// <summary>
		/// The expiration period and time-to-live (TTL).
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exceptionTimeToLive")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ExceptionTimeToLive { get; set; }
		
		/// <summary>
		/// The Amazon Web Services account where you want to receive exception notifications.
		/// Required
		/// Pattern: ^[\\\w\-_:/.@=+]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notificationEndpoint")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\\\w\-_:/.@=+]*$")]
		public string NotificationEndpoint { get; set; }
		
		/// <summary>
		/// The subscription protocol to which exception notifications are posted.
		/// Required
		/// Pattern: ^[a-z\-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionProtocol")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-z\-]*$")]
		public string SubscriptionProtocol { get; set; }
	}
	
	public class UpdateDataLakeExceptionSubscriptionPutBody
	{
		
		/// <summary>
		/// The time-to-live (TTL) for the exception message to remain.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exceptionTimeToLive")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ExceptionTimeToLive { get; set; }
		
		/// <summary>
		/// The account that is subscribed to receive exception notifications.
		/// Required
		/// Pattern: ^[\\\w\-_:/.@=+]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notificationEndpoint")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\\\w\-_:/.@=+]*$")]
		public string NotificationEndpoint { get; set; }
		
		/// <summary>
		/// The subscription protocol to which exception messages are posted.
		/// Required
		/// Pattern: ^[a-z\-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionProtocol")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-z\-]*$")]
		public string SubscriptionProtocol { get; set; }
	}
	
	public class CreateDataLakeOrganizationConfigurationPostBody
	{
		
		/// <summary>
		/// Enable Security Lake with the specified configuration settings, to begin collecting security data for new accounts in your organization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="autoEnableNewAccount")]
		public DataLakeAutoEnableNewAccountConfiguration[] AutoEnableNewAccount { get; set; }
	}
	
	public class CreateSubscriberPostBody
	{
		
		/// <summary>
		/// The Amazon S3 or Lake Formation access type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessTypes")]
		public AccessType[] AccessTypes { get; set; }
		
		/// <summary>
		/// The supported Amazon Web Services from which logs and events are collected. Security Lake supports log and event collection for natively supported Amazon Web Services.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public LogSourceResource[] Sources { get; set; }
		
		/// <summary>
		/// The description for your subscriber account in Security Lake.
		/// Pattern: ^[\\\w\s\-_:/,.@=+]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriberDescription")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\\\w\s\-_:/,.@=+]*$")]
		public string SubscriberDescription { get; set; }
		
		/// <summary>
		/// The AWS identity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriberIdentity")]
		public CreateSubscriberPostBodySubscriberIdentity SubscriberIdentity { get; set; }
		
		/// <summary>
		/// The name of your Security Lake subscriber account.
		/// Required
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriberName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string SubscriberName { get; set; }
		
		/// <summary>
		/// An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateSubscriberPostBodySubscriberIdentity
	{
		
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
	}
	
	public class CreateSubscriberNotificationPostBody
	{
		
		/// <summary>
		/// Specify the configurations you want to use for subscriber notification to notify the subscriber when new data is written to the data lake for sources that the subscriber consumes in Security Lake. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public CreateSubscriberNotificationPostBodyConfiguration Configuration { get; set; }
	}
	
	public class CreateSubscriberNotificationPostBodyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpsNotificationConfiguration")]
		public HttpsNotificationConfiguration HttpsNotificationConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sqsNotificationConfiguration")]
		public SqsNotificationConfiguration SqsNotificationConfiguration { get; set; }
	}
	
	public class UpdateSubscriberNotificationPutBody
	{
		
		/// <summary>
		/// Specify the configurations you want to use for subscriber notification to notify the subscriber when new data is written to the data lake for sources that the subscriber consumes in Security Lake. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public UpdateSubscriberNotificationPutBodyConfiguration Configuration { get; set; }
	}
	
	public class UpdateSubscriberNotificationPutBodyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpsNotificationConfiguration")]
		public HttpsNotificationConfiguration HttpsNotificationConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sqsNotificationConfiguration")]
		public SqsNotificationConfiguration SqsNotificationConfiguration { get; set; }
	}
	
	public class DeleteAwsLogSourcePostBody
	{
		
		/// <summary>
		/// Specify the natively-supported Amazon Web Services service to remove as a source in Security Lake.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AwsLogSourceConfiguration[] Sources { get; set; }
	}
	
	public class DeleteDataLakePostBody
	{
		
		/// <summary>
		/// The list of Regions where Security Lake is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public string[] Regions { get; set; }
	}
	
	public class DeleteDataLakeOrganizationConfigurationPostBody
	{
		
		/// <summary>
		/// Turns off automatic enablement of Security Lake for member accounts that are added to an organization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="autoEnableNewAccount")]
		public DataLakeAutoEnableNewAccountConfiguration[] AutoEnableNewAccount { get; set; }
	}
	
	public class UpdateSubscriberPutBody
	{
		
		/// <summary>
		/// The supported Amazon Web Services from which logs and events are collected. For the list of supported Amazon Web Services, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html">Amazon Security Lake User Guide</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public LogSourceResource[] Sources { get; set; }
		
		/// <summary>
		/// The description of the Security Lake account subscriber.
		/// Pattern: ^[\\\w\s\-_:/,.@=+]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriberDescription")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\\\w\s\-_:/,.@=+]*$")]
		public string SubscriberDescription { get; set; }
		
		/// <summary>
		/// The AWS identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriberIdentity")]
		public UpdateSubscriberPutBodySubscriberIdentity SubscriberIdentity { get; set; }
		
		/// <summary>
		/// The name of the Security Lake account subscriber.
		/// Min length: 0
		/// Max length: 64
		/// Pattern: ^[\\\w\-_:/.@=+]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriberName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\\\w\-_:/.@=+]*$")]
		public string SubscriberName { get; set; }
	}
	
	public class UpdateSubscriberPutBodySubscriberIdentity
	{
		
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
	}
	
	public class RegisterDataLakeDelegatedAdministratorPostBody
	{
		
		/// <summary>
		/// The Amazon Web Services account ID of the Security Lake delegated administrator.
		/// Required
		/// Pattern: ^[\\\w\-_:/.@=+]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\\\w\-_:/.@=+]*$")]
		public string AccountId { get; set; }
	}
	
	public class GetDataLakeSourcesPostBody
	{
		
		/// <summary>
		/// The Amazon Web Services account ID for which a static snapshot of the current Amazon Web Services Region, including enabled accounts and log sources, is retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public string[] Accounts { get; set; }
		
		/// <summary>
		/// The maximum limit of accounts for which the static snapshot of the current Region, including enabled accounts and log sources, is retrieved.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p> <p>Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
		/// Pattern: ^[\\\w\-_:/.@=+]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\\\w\-_:/.@=+]*$")]
		public string NextToken { get; set; }
	}
	
	public class ListDataLakeExceptionsPostBody
	{
		
		/// <summary>
		/// List the maximum number of failures in Security Lake.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// <p>List if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p> <p>Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
		/// Pattern: ^[\\\w\-_:/.@=+]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\\\w\-_:/.@=+]*$")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// List the Amazon Web Services Regions from which exceptions are retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public string[] Regions { get; set; }
	}
	
	public class ListLogSourcesPostBody
	{
		
		/// <summary>
		/// The list of Amazon Web Services accounts for which log sources are displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public string[] Accounts { get; set; }
		
		/// <summary>
		/// The maximum number of accounts for which the log sources are displayed.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// If nextToken is returned, there are more results available. You can repeat the call using the returned token to retrieve the next page.
		/// Pattern: ^[\\\w\-_:/.@=+]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\\\w\-_:/.@=+]*$")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The list of regions for which log sources are displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public string[] Regions { get; set; }
		
		/// <summary>
		/// The list of sources for which log sources are displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public LogSourceResource[] Sources { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// An array of objects, one for each tag (key and value) to associate with the Amazon Security Lake resource. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
