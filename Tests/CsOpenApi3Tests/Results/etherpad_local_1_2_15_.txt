//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Message
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int32> Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SessionInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorID")]
		public string AuthorID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupID")]
		public string GroupID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validUntil")]
		public System.Nullable<System.Int32> ValidUntil { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorId")]
		public string ColorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Int32> Timestamp { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// appends a chat message
		/// AppendChatMessageUsingGET appendChatMessage
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<AppendChatMessageUsingGETReturn> AppendChatMessageUsingGETAsync(string padID, string text, string authorID, string time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "appendChatMessage?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&authorID=" + (authorID==null? "" : System.Uri.EscapeDataString(authorID))+"&time=" + (time==null? "" : System.Uri.EscapeDataString(time));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppendChatMessageUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// appends a chat message
		/// AppendChatMessageUsingPOST appendChatMessage
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<AppendChatMessageUsingPOSTReturn> AppendChatMessageUsingPOSTAsync(string padID, string text, string authorID, string time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "appendChatMessage?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&authorID=" + (authorID==null? "" : System.Uri.EscapeDataString(authorID))+"&time=" + (time==null? "" : System.Uri.EscapeDataString(time));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppendChatMessageUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// AppendTextUsingGET appendText
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<AppendTextUsingGETReturn> AppendTextUsingGETAsync(string padID, string text, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "appendText?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&text=" + (text==null? "" : System.Uri.EscapeDataString(text));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppendTextUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// AppendTextUsingPOST appendText
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<AppendTextUsingPOSTReturn> AppendTextUsingPOSTAsync(string padID, string text, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "appendText?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&text=" + (text==null? "" : System.Uri.EscapeDataString(text));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppendTextUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns ok when the current api token is valid
		/// CheckTokenUsingGET checkToken
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CheckTokenUsingGETReturn> CheckTokenUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checkToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckTokenUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns ok when the current api token is valid
		/// CheckTokenUsingPOST checkToken
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CheckTokenUsingPOSTReturn> CheckTokenUsingPOSTAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checkToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckTokenUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CopyPadUsingGET copyPad
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CopyPadUsingGETReturn> CopyPadUsingGETAsync(string sourceID, string destinationID, string force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "copyPad?sourceID=" + (sourceID==null? "" : System.Uri.EscapeDataString(sourceID))+"&destinationID=" + (destinationID==null? "" : System.Uri.EscapeDataString(destinationID))+"&force=" + (force==null? "" : System.Uri.EscapeDataString(force));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CopyPadUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CopyPadUsingPOST copyPad
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CopyPadUsingPOSTReturn> CopyPadUsingPOSTAsync(string sourceID, string destinationID, string force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "copyPad?sourceID=" + (sourceID==null? "" : System.Uri.EscapeDataString(sourceID))+"&destinationID=" + (destinationID==null? "" : System.Uri.EscapeDataString(destinationID))+"&force=" + (force==null? "" : System.Uri.EscapeDataString(force));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CopyPadUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CopyPadWithoutHistoryUsingGET copyPadWithoutHistory
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CopyPadWithoutHistoryUsingGETReturn> CopyPadWithoutHistoryUsingGETAsync(string sourceID, string destinationID, string force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "copyPadWithoutHistory?sourceID=" + (sourceID==null? "" : System.Uri.EscapeDataString(sourceID))+"&destinationID=" + (destinationID==null? "" : System.Uri.EscapeDataString(destinationID))+"&force=" + (force==null? "" : System.Uri.EscapeDataString(force));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CopyPadWithoutHistoryUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CopyPadWithoutHistoryUsingPOST copyPadWithoutHistory
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CopyPadWithoutHistoryUsingPOSTReturn> CopyPadWithoutHistoryUsingPOSTAsync(string sourceID, string destinationID, string force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "copyPadWithoutHistory?sourceID=" + (sourceID==null? "" : System.Uri.EscapeDataString(sourceID))+"&destinationID=" + (destinationID==null? "" : System.Uri.EscapeDataString(destinationID))+"&force=" + (force==null? "" : System.Uri.EscapeDataString(force));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CopyPadWithoutHistoryUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates a new author
		/// CreateAuthorUsingGET createAuthor
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreateAuthorUsingGETReturn> CreateAuthorUsingGETAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createAuthor?name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAuthorUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates a new author
		/// CreateAuthorUsingPOST createAuthor
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreateAuthorUsingPOSTReturn> CreateAuthorUsingPOSTAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createAuthor?name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAuthorUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// this functions helps you to map your application author ids to Etherpad author ids
		/// CreateAuthorIfNotExistsForUsingGET createAuthorIfNotExistsFor
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreateAuthorIfNotExistsForUsingGETReturn> CreateAuthorIfNotExistsForUsingGETAsync(string authorMapper, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createAuthorIfNotExistsFor?authorMapper=" + (authorMapper==null? "" : System.Uri.EscapeDataString(authorMapper))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAuthorIfNotExistsForUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// this functions helps you to map your application author ids to Etherpad author ids
		/// CreateAuthorIfNotExistsForUsingPOST createAuthorIfNotExistsFor
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreateAuthorIfNotExistsForUsingPOSTReturn> CreateAuthorIfNotExistsForUsingPOSTAsync(string authorMapper, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createAuthorIfNotExistsFor?authorMapper=" + (authorMapper==null? "" : System.Uri.EscapeDataString(authorMapper))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAuthorIfNotExistsForUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateDiffHTMLUsingGET createDiffHTML
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreateDiffHTMLUsingGETReturn> CreateDiffHTMLUsingGETAsync(string padID, string startRev, string endRev, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createDiffHTML?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&startRev=" + (startRev==null? "" : System.Uri.EscapeDataString(startRev))+"&endRev=" + (endRev==null? "" : System.Uri.EscapeDataString(endRev));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDiffHTMLUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateDiffHTMLUsingPOST createDiffHTML
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreateDiffHTMLUsingPOSTReturn> CreateDiffHTMLUsingPOSTAsync(string padID, string startRev, string endRev, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createDiffHTML?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&startRev=" + (startRev==null? "" : System.Uri.EscapeDataString(startRev))+"&endRev=" + (endRev==null? "" : System.Uri.EscapeDataString(endRev));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDiffHTMLUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates a new group
		/// CreateGroupUsingGET createGroup
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreateGroupUsingGETReturn> CreateGroupUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateGroupUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates a new group
		/// CreateGroupUsingPOST createGroup
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreateGroupUsingPOSTReturn> CreateGroupUsingPOSTAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateGroupUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// this functions helps you to map your application group ids to Etherpad group ids
		/// CreateGroupIfNotExistsForUsingGET createGroupIfNotExistsFor
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreateGroupIfNotExistsForUsingGETReturn> CreateGroupIfNotExistsForUsingGETAsync(string groupMapper, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createGroupIfNotExistsFor?groupMapper=" + (groupMapper==null? "" : System.Uri.EscapeDataString(groupMapper));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateGroupIfNotExistsForUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// this functions helps you to map your application group ids to Etherpad group ids
		/// CreateGroupIfNotExistsForUsingPOST createGroupIfNotExistsFor
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreateGroupIfNotExistsForUsingPOSTReturn> CreateGroupIfNotExistsForUsingPOSTAsync(string groupMapper, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createGroupIfNotExistsFor?groupMapper=" + (groupMapper==null? "" : System.Uri.EscapeDataString(groupMapper));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateGroupIfNotExistsForUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates a new pad in this group
		/// CreateGroupPadUsingGET createGroupPad
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreateGroupPadUsingGETReturn> CreateGroupPadUsingGETAsync(string groupID, string padName, string text, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createGroupPad?groupID=" + (groupID==null? "" : System.Uri.EscapeDataString(groupID))+"&padName=" + (padName==null? "" : System.Uri.EscapeDataString(padName))+"&text=" + (text==null? "" : System.Uri.EscapeDataString(text));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateGroupPadUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates a new pad in this group
		/// CreateGroupPadUsingPOST createGroupPad
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreateGroupPadUsingPOSTReturn> CreateGroupPadUsingPOSTAsync(string groupID, string padName, string text, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createGroupPad?groupID=" + (groupID==null? "" : System.Uri.EscapeDataString(groupID))+"&padName=" + (padName==null? "" : System.Uri.EscapeDataString(padName))+"&text=" + (text==null? "" : System.Uri.EscapeDataString(text));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateGroupPadUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad
		/// CreatePadUsingGET createPad
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreatePadUsingGETReturn> CreatePadUsingGETAsync(string padID, string text, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createPad?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&text=" + (text==null? "" : System.Uri.EscapeDataString(text));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePadUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad
		/// CreatePadUsingPOST createPad
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreatePadUsingPOSTReturn> CreatePadUsingPOSTAsync(string padID, string text, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createPad?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&text=" + (text==null? "" : System.Uri.EscapeDataString(text));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePadUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates a new session. validUntil is an unix timestamp in seconds
		/// CreateSessionUsingGET createSession
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreateSessionUsingGETReturn> CreateSessionUsingGETAsync(string groupID, string authorID, string validUntil, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createSession?groupID=" + (groupID==null? "" : System.Uri.EscapeDataString(groupID))+"&authorID=" + (authorID==null? "" : System.Uri.EscapeDataString(authorID))+"&validUntil=" + (validUntil==null? "" : System.Uri.EscapeDataString(validUntil));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateSessionUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates a new session. validUntil is an unix timestamp in seconds
		/// CreateSessionUsingPOST createSession
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<CreateSessionUsingPOSTReturn> CreateSessionUsingPOSTAsync(string groupID, string authorID, string validUntil, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createSession?groupID=" + (groupID==null? "" : System.Uri.EscapeDataString(groupID))+"&authorID=" + (authorID==null? "" : System.Uri.EscapeDataString(authorID))+"&validUntil=" + (validUntil==null? "" : System.Uri.EscapeDataString(validUntil));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateSessionUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// deletes a group
		/// DeleteGroupUsingGET deleteGroup
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<DeleteGroupUsingGETReturn> DeleteGroupUsingGETAsync(string groupID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deleteGroup?groupID=" + (groupID==null? "" : System.Uri.EscapeDataString(groupID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteGroupUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// deletes a group
		/// DeleteGroupUsingPOST deleteGroup
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<DeleteGroupUsingPOSTReturn> DeleteGroupUsingPOSTAsync(string groupID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deleteGroup?groupID=" + (groupID==null? "" : System.Uri.EscapeDataString(groupID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteGroupUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// deletes a pad
		/// DeletePadUsingGET deletePad
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<DeletePadUsingGETReturn> DeletePadUsingGETAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deletePad?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePadUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// deletes a pad
		/// DeletePadUsingPOST deletePad
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<DeletePadUsingPOSTReturn> DeletePadUsingPOSTAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deletePad?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePadUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// deletes a session
		/// DeleteSessionUsingGET deleteSession
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<DeleteSessionUsingGETReturn> DeleteSessionUsingGETAsync(string sessionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deleteSession?sessionID=" + (sessionID==null? "" : System.Uri.EscapeDataString(sessionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSessionUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// deletes a session
		/// DeleteSessionUsingPOST deleteSession
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<DeleteSessionUsingPOSTReturn> DeleteSessionUsingPOSTAsync(string sessionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deleteSession?sessionID=" + (sessionID==null? "" : System.Uri.EscapeDataString(sessionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSessionUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetAttributePoolUsingGET getAttributePool
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetAttributePoolUsingGETReturn> GetAttributePoolUsingGETAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getAttributePool?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAttributePoolUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetAttributePoolUsingPOST getAttributePool
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetAttributePoolUsingPOSTReturn> GetAttributePoolUsingPOSTAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getAttributePool?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAttributePoolUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the Author Name of the author
		/// GetAuthorNameUsingGET getAuthorName
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetAuthorNameUsingGETReturn> GetAuthorNameUsingGETAsync(string authorID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getAuthorName?authorID=" + (authorID==null? "" : System.Uri.EscapeDataString(authorID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAuthorNameUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the Author Name of the author
		/// GetAuthorNameUsingPOST getAuthorName
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetAuthorNameUsingPOSTReturn> GetAuthorNameUsingPOSTAsync(string authorID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getAuthorName?authorID=" + (authorID==null? "" : System.Uri.EscapeDataString(authorID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAuthorNameUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the chatHead (chat-message) of the pad
		/// GetChatHeadUsingGET getChatHead
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetChatHeadUsingGETReturn> GetChatHeadUsingGETAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getChatHead?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetChatHeadUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the chatHead (chat-message) of the pad
		/// GetChatHeadUsingPOST getChatHead
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetChatHeadUsingPOSTReturn> GetChatHeadUsingPOSTAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getChatHead?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetChatHeadUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the chat history
		/// GetChatHistoryUsingGET getChatHistory
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetChatHistoryUsingGETReturn> GetChatHistoryUsingGETAsync(string padID, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getChatHistory?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&start=" + (start==null? "" : System.Uri.EscapeDataString(start))+"&end=" + (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetChatHistoryUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the chat history
		/// GetChatHistoryUsingPOST getChatHistory
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetChatHistoryUsingPOSTReturn> GetChatHistoryUsingPOSTAsync(string padID, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getChatHistory?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&start=" + (start==null? "" : System.Uri.EscapeDataString(start))+"&end=" + (end==null? "" : System.Uri.EscapeDataString(end));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetChatHistoryUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the text of a pad formatted as HTML
		/// GetHTMLUsingGET getHTML
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetHTMLUsingGETReturn> GetHTMLUsingGETAsync(string padID, string rev, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getHTML?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&rev=" + (rev==null? "" : System.Uri.EscapeDataString(rev));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetHTMLUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the text of a pad formatted as HTML
		/// GetHTMLUsingPOST getHTML
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetHTMLUsingPOSTReturn> GetHTMLUsingPOSTAsync(string padID, string rev, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getHTML?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&rev=" + (rev==null? "" : System.Uri.EscapeDataString(rev));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetHTMLUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the timestamp of the last revision of the pad
		/// GetLastEditedUsingGET getLastEdited
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetLastEditedUsingGETReturn> GetLastEditedUsingGETAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getLastEdited?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLastEditedUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the timestamp of the last revision of the pad
		/// GetLastEditedUsingPOST getLastEdited
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetLastEditedUsingPOSTReturn> GetLastEditedUsingPOSTAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getLastEdited?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLastEditedUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetPadIDUsingGET getPadID
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetPadIDUsingGETReturn> GetPadIDUsingGETAsync(string roID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getPadID?roID=" + (roID==null? "" : System.Uri.EscapeDataString(roID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPadIDUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetPadIDUsingPOST getPadID
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetPadIDUsingPOSTReturn> GetPadIDUsingPOSTAsync(string roID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getPadID?roID=" + (roID==null? "" : System.Uri.EscapeDataString(roID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPadIDUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// return true of false
		/// GetPublicStatusUsingGET getPublicStatus
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetPublicStatusUsingGETReturn> GetPublicStatusUsingGETAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getPublicStatus?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPublicStatusUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// return true of false
		/// GetPublicStatusUsingPOST getPublicStatus
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetPublicStatusUsingPOSTReturn> GetPublicStatusUsingPOSTAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getPublicStatus?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPublicStatusUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the read only link of a pad
		/// GetReadOnlyIDUsingGET getReadOnlyID
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetReadOnlyIDUsingGETReturn> GetReadOnlyIDUsingGETAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getReadOnlyID?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetReadOnlyIDUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the read only link of a pad
		/// GetReadOnlyIDUsingPOST getReadOnlyID
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetReadOnlyIDUsingPOSTReturn> GetReadOnlyIDUsingPOSTAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getReadOnlyID?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetReadOnlyIDUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetRevisionChangesetUsingGET getRevisionChangeset
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetRevisionChangesetUsingGETReturn> GetRevisionChangesetUsingGETAsync(string padID, string rev, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getRevisionChangeset?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&rev=" + (rev==null? "" : System.Uri.EscapeDataString(rev));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRevisionChangesetUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetRevisionChangesetUsingPOST getRevisionChangeset
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetRevisionChangesetUsingPOSTReturn> GetRevisionChangesetUsingPOSTAsync(string padID, string rev, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getRevisionChangeset?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&rev=" + (rev==null? "" : System.Uri.EscapeDataString(rev));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRevisionChangesetUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the number of revisions of this pad
		/// GetRevisionsCountUsingGET getRevisionsCount
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetRevisionsCountUsingGETReturn> GetRevisionsCountUsingGETAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getRevisionsCount?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRevisionsCountUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the number of revisions of this pad
		/// GetRevisionsCountUsingPOST getRevisionsCount
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetRevisionsCountUsingPOSTReturn> GetRevisionsCountUsingPOSTAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getRevisionsCount?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRevisionsCountUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetSavedRevisionsCountUsingGET getSavedRevisionsCount
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetSavedRevisionsCountUsingGETReturn> GetSavedRevisionsCountUsingGETAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getSavedRevisionsCount?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSavedRevisionsCountUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetSavedRevisionsCountUsingPOST getSavedRevisionsCount
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetSavedRevisionsCountUsingPOSTReturn> GetSavedRevisionsCountUsingPOSTAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getSavedRevisionsCount?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSavedRevisionsCountUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns informations about a session
		/// GetSessionInfoUsingGET getSessionInfo
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetSessionInfoUsingGETReturn> GetSessionInfoUsingGETAsync(string sessionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getSessionInfo?sessionID=" + (sessionID==null? "" : System.Uri.EscapeDataString(sessionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSessionInfoUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns informations about a session
		/// GetSessionInfoUsingPOST getSessionInfo
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetSessionInfoUsingPOSTReturn> GetSessionInfoUsingPOSTAsync(string sessionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getSessionInfo?sessionID=" + (sessionID==null? "" : System.Uri.EscapeDataString(sessionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSessionInfoUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetStatsUsingGET getStats
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetStatsUsingGETReturn> GetStatsUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getStats";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetStatsUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetStatsUsingPOST getStats
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetStatsUsingPOSTReturn> GetStatsUsingPOSTAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getStats";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetStatsUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the text of a pad
		/// GetTextUsingGET getText
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetTextUsingGETReturn> GetTextUsingGETAsync(string padID, string rev, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getText?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&rev=" + (rev==null? "" : System.Uri.EscapeDataString(rev));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTextUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the text of a pad
		/// GetTextUsingPOST getText
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<GetTextUsingPOSTReturn> GetTextUsingPOSTAsync(string padID, string rev, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getText?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&rev=" + (rev==null? "" : System.Uri.EscapeDataString(rev));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTextUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListAllGroupsUsingGET listAllGroups
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListAllGroupsUsingGETReturn> ListAllGroupsUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listAllGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAllGroupsUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListAllGroupsUsingPOST listAllGroups
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListAllGroupsUsingPOSTReturn> ListAllGroupsUsingPOSTAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listAllGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAllGroupsUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// list all the pads
		/// ListAllPadsUsingGET listAllPads
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListAllPadsUsingGETReturn> ListAllPadsUsingGETAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listAllPads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAllPadsUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// list all the pads
		/// ListAllPadsUsingPOST listAllPads
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListAllPadsUsingPOSTReturn> ListAllPadsUsingPOSTAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listAllPads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAllPadsUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns an array of authors who contributed to this pad
		/// ListAuthorsOfPadUsingGET listAuthorsOfPad
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListAuthorsOfPadUsingGETReturn> ListAuthorsOfPadUsingGETAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listAuthorsOfPad?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAuthorsOfPadUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns an array of authors who contributed to this pad
		/// ListAuthorsOfPadUsingPOST listAuthorsOfPad
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListAuthorsOfPadUsingPOSTReturn> ListAuthorsOfPadUsingPOSTAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listAuthorsOfPad?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAuthorsOfPadUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns all pads of this group
		/// ListPadsUsingGET listPads
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListPadsUsingGETReturn> ListPadsUsingGETAsync(string groupID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listPads?groupID=" + (groupID==null? "" : System.Uri.EscapeDataString(groupID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPadsUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns all pads of this group
		/// ListPadsUsingPOST listPads
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListPadsUsingPOSTReturn> ListPadsUsingPOSTAsync(string groupID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listPads?groupID=" + (groupID==null? "" : System.Uri.EscapeDataString(groupID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPadsUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns an array of all pads this author contributed to
		/// ListPadsOfAuthorUsingGET listPadsOfAuthor
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListPadsOfAuthorUsingGETReturn> ListPadsOfAuthorUsingGETAsync(string authorID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listPadsOfAuthor?authorID=" + (authorID==null? "" : System.Uri.EscapeDataString(authorID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPadsOfAuthorUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns an array of all pads this author contributed to
		/// ListPadsOfAuthorUsingPOST listPadsOfAuthor
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListPadsOfAuthorUsingPOSTReturn> ListPadsOfAuthorUsingPOSTAsync(string authorID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listPadsOfAuthor?authorID=" + (authorID==null? "" : System.Uri.EscapeDataString(authorID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPadsOfAuthorUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListSavedRevisionsUsingGET listSavedRevisions
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListSavedRevisionsUsingGETReturn> ListSavedRevisionsUsingGETAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listSavedRevisions?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSavedRevisionsUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListSavedRevisionsUsingPOST listSavedRevisions
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListSavedRevisionsUsingPOSTReturn> ListSavedRevisionsUsingPOSTAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listSavedRevisions?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSavedRevisionsUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns all sessions of an author
		/// ListSessionsOfAuthorUsingGET listSessionsOfAuthor
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListSessionsOfAuthorUsingGETReturn> ListSessionsOfAuthorUsingGETAsync(string authorID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listSessionsOfAuthor?authorID=" + (authorID==null? "" : System.Uri.EscapeDataString(authorID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSessionsOfAuthorUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns all sessions of an author
		/// ListSessionsOfAuthorUsingPOST listSessionsOfAuthor
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListSessionsOfAuthorUsingPOSTReturn> ListSessionsOfAuthorUsingPOSTAsync(string authorID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listSessionsOfAuthor?authorID=" + (authorID==null? "" : System.Uri.EscapeDataString(authorID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSessionsOfAuthorUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListSessionsOfGroupUsingGET listSessionsOfGroup
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListSessionsOfGroupUsingGETReturn> ListSessionsOfGroupUsingGETAsync(string groupID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listSessionsOfGroup?groupID=" + (groupID==null? "" : System.Uri.EscapeDataString(groupID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSessionsOfGroupUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListSessionsOfGroupUsingPOST listSessionsOfGroup
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<ListSessionsOfGroupUsingPOSTReturn> ListSessionsOfGroupUsingPOSTAsync(string groupID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listSessionsOfGroup?groupID=" + (groupID==null? "" : System.Uri.EscapeDataString(groupID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSessionsOfGroupUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// MovePadUsingGET movePad
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<MovePadUsingGETReturn> MovePadUsingGETAsync(string sourceID, string destinationID, string force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "movePad?sourceID=" + (sourceID==null? "" : System.Uri.EscapeDataString(sourceID))+"&destinationID=" + (destinationID==null? "" : System.Uri.EscapeDataString(destinationID))+"&force=" + (force==null? "" : System.Uri.EscapeDataString(force));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MovePadUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// MovePadUsingPOST movePad
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<MovePadUsingPOSTReturn> MovePadUsingPOSTAsync(string sourceID, string destinationID, string force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "movePad?sourceID=" + (sourceID==null? "" : System.Uri.EscapeDataString(sourceID))+"&destinationID=" + (destinationID==null? "" : System.Uri.EscapeDataString(destinationID))+"&force=" + (force==null? "" : System.Uri.EscapeDataString(force));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MovePadUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the list of users that are currently editing this pad
		/// PadUsersUsingGET padUsers
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<PadUsersUsingGETReturn> PadUsersUsingGETAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "padUsers?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PadUsersUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the list of users that are currently editing this pad
		/// PadUsersUsingPOST padUsers
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<PadUsersUsingPOSTReturn> PadUsersUsingPOSTAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "padUsers?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PadUsersUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the number of user that are currently editing this pad
		/// PadUsersCountUsingGET padUsersCount
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<PadUsersCountUsingGETReturn> PadUsersCountUsingGETAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "padUsersCount?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PadUsersCountUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns the number of user that are currently editing this pad
		/// PadUsersCountUsingPOST padUsersCount
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<PadUsersCountUsingPOSTReturn> PadUsersCountUsingPOSTAsync(string padID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "padUsersCount?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PadUsersCountUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RestoreRevisionUsingGET restoreRevision
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<RestoreRevisionUsingGETReturn> RestoreRevisionUsingGETAsync(string padID, string rev, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restoreRevision?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&rev=" + (rev==null? "" : System.Uri.EscapeDataString(rev));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestoreRevisionUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RestoreRevisionUsingPOST restoreRevision
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<RestoreRevisionUsingPOSTReturn> RestoreRevisionUsingPOSTAsync(string padID, string rev, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restoreRevision?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&rev=" + (rev==null? "" : System.Uri.EscapeDataString(rev));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestoreRevisionUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SaveRevisionUsingGET saveRevision
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<SaveRevisionUsingGETReturn> SaveRevisionUsingGETAsync(string padID, string rev, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "saveRevision?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&rev=" + (rev==null? "" : System.Uri.EscapeDataString(rev));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SaveRevisionUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SaveRevisionUsingPOST saveRevision
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<SaveRevisionUsingPOSTReturn> SaveRevisionUsingPOSTAsync(string padID, string rev, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "saveRevision?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&rev=" + (rev==null? "" : System.Uri.EscapeDataString(rev));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SaveRevisionUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// sends a custom message of type msg to the pad
		/// SendClientsMessageUsingGET sendClientsMessage
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<SendClientsMessageUsingGETReturn> SendClientsMessageUsingGETAsync(string padID, string msg, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sendClientsMessage?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&msg=" + (msg==null? "" : System.Uri.EscapeDataString(msg));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendClientsMessageUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// sends a custom message of type msg to the pad
		/// SendClientsMessageUsingPOST sendClientsMessage
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<SendClientsMessageUsingPOSTReturn> SendClientsMessageUsingPOSTAsync(string padID, string msg, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sendClientsMessage?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&msg=" + (msg==null? "" : System.Uri.EscapeDataString(msg));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendClientsMessageUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// sets the text of a pad with HTML
		/// SetHTMLUsingGET setHTML
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<SetHTMLUsingGETReturn> SetHTMLUsingGETAsync(string padID, string html, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setHTML?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&html=" + (html==null? "" : System.Uri.EscapeDataString(html));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetHTMLUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// sets the text of a pad with HTML
		/// SetHTMLUsingPOST setHTML
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<SetHTMLUsingPOSTReturn> SetHTMLUsingPOSTAsync(string padID, string html, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setHTML?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&html=" + (html==null? "" : System.Uri.EscapeDataString(html));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetHTMLUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// sets a boolean for the public status of a pad
		/// SetPublicStatusUsingGET setPublicStatus
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<SetPublicStatusUsingGETReturn> SetPublicStatusUsingGETAsync(string padID, string publicStatus, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setPublicStatus?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&publicStatus=" + (publicStatus==null? "" : System.Uri.EscapeDataString(publicStatus));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetPublicStatusUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// sets a boolean for the public status of a pad
		/// SetPublicStatusUsingPOST setPublicStatus
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<SetPublicStatusUsingPOSTReturn> SetPublicStatusUsingPOSTAsync(string padID, string publicStatus, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setPublicStatus?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&publicStatus=" + (publicStatus==null? "" : System.Uri.EscapeDataString(publicStatus));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetPublicStatusUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// sets the text of a pad
		/// SetTextUsingGET setText
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<SetTextUsingGETReturn> SetTextUsingGETAsync(string padID, string text, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setText?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&text=" + (text==null? "" : System.Uri.EscapeDataString(text));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetTextUsingGETReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// sets the text of a pad
		/// SetTextUsingPOST setText
		/// </summary>
		/// <returns>ok (code 0)</returns>
		public async Task<SetTextUsingPOSTReturn> SetTextUsingPOSTAsync(string padID, string text, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setText?padID=" + (padID==null? "" : System.Uri.EscapeDataString(padID))+"&text=" + (text==null? "" : System.Uri.EscapeDataString(text));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetTextUsingPOSTReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class AppendChatMessageUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class AppendChatMessageUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class AppendTextUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class AppendTextUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CheckTokenUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CheckTokenUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CopyPadUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CopyPadUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CopyPadWithoutHistoryUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CopyPadWithoutHistoryUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateAuthorUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateAuthorUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateAuthorUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorID")]
		public string AuthorID { get; set; }
	}
	
	public class CreateAuthorUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateAuthorUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateAuthorUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorID")]
		public string AuthorID { get; set; }
	}
	
	public class CreateAuthorIfNotExistsForUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateAuthorIfNotExistsForUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateAuthorIfNotExistsForUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorID")]
		public string AuthorID { get; set; }
	}
	
	public class CreateAuthorIfNotExistsForUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateAuthorIfNotExistsForUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateAuthorIfNotExistsForUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorID")]
		public string AuthorID { get; set; }
	}
	
	public class CreateDiffHTMLUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateDiffHTMLUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateGroupUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateGroupUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateGroupUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupID")]
		public string GroupID { get; set; }
	}
	
	public class CreateGroupUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateGroupUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateGroupUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupID")]
		public string GroupID { get; set; }
	}
	
	public class CreateGroupIfNotExistsForUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateGroupIfNotExistsForUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateGroupIfNotExistsForUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupID")]
		public string GroupID { get; set; }
	}
	
	public class CreateGroupIfNotExistsForUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateGroupIfNotExistsForUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateGroupIfNotExistsForUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupID")]
		public string GroupID { get; set; }
	}
	
	public class CreateGroupPadUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateGroupPadUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreatePadUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreatePadUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateSessionUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateSessionUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateSessionUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="sessionID")]
		public string SessionID { get; set; }
	}
	
	public class CreateSessionUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateSessionUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class CreateSessionUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="sessionID")]
		public string SessionID { get; set; }
	}
	
	public class DeleteGroupUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class DeleteGroupUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class DeletePadUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class DeletePadUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class DeleteSessionUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class DeleteSessionUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetAttributePoolUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetAttributePoolUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetAuthorNameUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetAuthorNameUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetAuthorNameUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public GetAuthorNameUsingGETReturnDataInfo Info { get; set; }
	}
	
	public class GetAuthorNameUsingGETReturnDataInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorId")]
		public string ColorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Int32> Timestamp { get; set; }
	}
	
	public class GetAuthorNameUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetAuthorNameUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetAuthorNameUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public GetAuthorNameUsingPOSTReturnDataInfo Info { get; set; }
	}
	
	public class GetAuthorNameUsingPOSTReturnDataInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorId")]
		public string ColorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Int32> Timestamp { get; set; }
	}
	
	public class GetChatHeadUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetChatHeadUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetChatHeadUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="chatHead")]
		public GetChatHeadUsingGETReturnDataChatHead ChatHead { get; set; }
	}
	
	public class GetChatHeadUsingGETReturnDataChatHead
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int32> Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	public class GetChatHeadUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetChatHeadUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetChatHeadUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="chatHead")]
		public GetChatHeadUsingPOSTReturnDataChatHead ChatHead { get; set; }
	}
	
	public class GetChatHeadUsingPOSTReturnDataChatHead
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int32> Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	public class GetChatHistoryUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetChatHistoryUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetChatHistoryUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public GetChatHistoryUsingGETReturnDataMessages[] GetChatHistoryUsingGETReturnDataMessages { get; set; }
	}
	
	public class GetChatHistoryUsingGETReturnDataMessages
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int32> Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	public class GetChatHistoryUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetChatHistoryUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetChatHistoryUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public GetChatHistoryUsingPOSTReturnDataMessages[] GetChatHistoryUsingPOSTReturnDataMessages { get; set; }
	}
	
	public class GetChatHistoryUsingPOSTReturnDataMessages
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int32> Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	public class GetHTMLUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetHTMLUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetHTMLUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="html")]
		public string Html { get; set; }
	}
	
	public class GetHTMLUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetHTMLUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetHTMLUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="html")]
		public string Html { get; set; }
	}
	
	public class GetLastEditedUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetLastEditedUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetLastEditedUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="lastEdited")]
		public System.Nullable<System.Int32> LastEdited { get; set; }
	}
	
	public class GetLastEditedUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetLastEditedUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetLastEditedUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="lastEdited")]
		public System.Nullable<System.Int32> LastEdited { get; set; }
	}
	
	public class GetPadIDUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetPadIDUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetPublicStatusUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetPublicStatusUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetPublicStatusUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="publicStatus")]
		public System.Nullable<System.Boolean> PublicStatus { get; set; }
	}
	
	public class GetPublicStatusUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetPublicStatusUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetPublicStatusUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="publicStatus")]
		public System.Nullable<System.Boolean> PublicStatus { get; set; }
	}
	
	public class GetReadOnlyIDUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetReadOnlyIDUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetReadOnlyIDUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="readOnlyID")]
		public string ReadOnlyID { get; set; }
	}
	
	public class GetReadOnlyIDUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetReadOnlyIDUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetReadOnlyIDUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="readOnlyID")]
		public string ReadOnlyID { get; set; }
	}
	
	public class GetRevisionChangesetUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetRevisionChangesetUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetRevisionsCountUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetRevisionsCountUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetRevisionsCountUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="revisions")]
		public System.Nullable<System.Int32> Revisions { get; set; }
	}
	
	public class GetRevisionsCountUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetRevisionsCountUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetRevisionsCountUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="revisions")]
		public System.Nullable<System.Int32> Revisions { get; set; }
	}
	
	public class GetSavedRevisionsCountUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetSavedRevisionsCountUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetSessionInfoUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetSessionInfoUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetSessionInfoUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public GetSessionInfoUsingGETReturnDataInfo Info { get; set; }
	}
	
	public class GetSessionInfoUsingGETReturnDataInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorID")]
		public string AuthorID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupID")]
		public string GroupID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validUntil")]
		public System.Nullable<System.Int32> ValidUntil { get; set; }
	}
	
	public class GetSessionInfoUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetSessionInfoUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetSessionInfoUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public GetSessionInfoUsingPOSTReturnDataInfo Info { get; set; }
	}
	
	public class GetSessionInfoUsingPOSTReturnDataInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorID")]
		public string AuthorID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupID")]
		public string GroupID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validUntil")]
		public System.Nullable<System.Int32> ValidUntil { get; set; }
	}
	
	public class GetStatsUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetStatsUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetTextUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetTextUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetTextUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	public class GetTextUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetTextUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class GetTextUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	public class ListAllGroupsUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListAllGroupsUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListAllGroupsUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupIDs")]
		public string[] GroupIDs { get; set; }
	}
	
	public class ListAllGroupsUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListAllGroupsUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListAllGroupsUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupIDs")]
		public string[] GroupIDs { get; set; }
	}
	
	public class ListAllPadsUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListAllPadsUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListAllPadsUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="padIDs")]
		public string[] PadIDs { get; set; }
	}
	
	public class ListAllPadsUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListAllPadsUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListAllPadsUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="padIDs")]
		public string[] PadIDs { get; set; }
	}
	
	public class ListAuthorsOfPadUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListAuthorsOfPadUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListAuthorsOfPadUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorIDs")]
		public string[] AuthorIDs { get; set; }
	}
	
	public class ListAuthorsOfPadUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListAuthorsOfPadUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListAuthorsOfPadUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorIDs")]
		public string[] AuthorIDs { get; set; }
	}
	
	public class ListPadsUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListPadsUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListPadsUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="padIDs")]
		public string[] PadIDs { get; set; }
	}
	
	public class ListPadsUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListPadsUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListPadsUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="padIDs")]
		public string[] PadIDs { get; set; }
	}
	
	public class ListPadsOfAuthorUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListPadsOfAuthorUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListPadsOfAuthorUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="padIDs")]
		public string[] PadIDs { get; set; }
	}
	
	public class ListPadsOfAuthorUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListPadsOfAuthorUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListPadsOfAuthorUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="padIDs")]
		public string[] PadIDs { get; set; }
	}
	
	public class ListSavedRevisionsUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListSavedRevisionsUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListSessionsOfAuthorUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListSessionsOfAuthorUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListSessionsOfAuthorUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="sessions")]
		public ListSessionsOfAuthorUsingGETReturnDataSessions[] ListSessionsOfAuthorUsingGETReturnDataSessions { get; set; }
	}
	
	public class ListSessionsOfAuthorUsingGETReturnDataSessions
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorID")]
		public string AuthorID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupID")]
		public string GroupID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validUntil")]
		public System.Nullable<System.Int32> ValidUntil { get; set; }
	}
	
	public class ListSessionsOfAuthorUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListSessionsOfAuthorUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListSessionsOfAuthorUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="sessions")]
		public ListSessionsOfAuthorUsingPOSTReturnDataSessions[] ListSessionsOfAuthorUsingPOSTReturnDataSessions { get; set; }
	}
	
	public class ListSessionsOfAuthorUsingPOSTReturnDataSessions
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorID")]
		public string AuthorID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupID")]
		public string GroupID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validUntil")]
		public System.Nullable<System.Int32> ValidUntil { get; set; }
	}
	
	public class ListSessionsOfGroupUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListSessionsOfGroupUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListSessionsOfGroupUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="sessions")]
		public ListSessionsOfGroupUsingGETReturnDataSessions[] ListSessionsOfGroupUsingGETReturnDataSessions { get; set; }
	}
	
	public class ListSessionsOfGroupUsingGETReturnDataSessions
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorID")]
		public string AuthorID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupID")]
		public string GroupID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validUntil")]
		public System.Nullable<System.Int32> ValidUntil { get; set; }
	}
	
	public class ListSessionsOfGroupUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListSessionsOfGroupUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListSessionsOfGroupUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="sessions")]
		public ListSessionsOfGroupUsingPOSTReturnDataSessions[] ListSessionsOfGroupUsingPOSTReturnDataSessions { get; set; }
	}
	
	public class ListSessionsOfGroupUsingPOSTReturnDataSessions
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorID")]
		public string AuthorID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupID")]
		public string GroupID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validUntil")]
		public System.Nullable<System.Int32> ValidUntil { get; set; }
	}
	
	public class MovePadUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class MovePadUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class PadUsersUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PadUsersUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class PadUsersUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="padUsers")]
		public PadUsersUsingGETReturnDataPadUsers[] PadUsersUsingGETReturnDataPadUsers { get; set; }
	}
	
	public class PadUsersUsingGETReturnDataPadUsers
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorId")]
		public string ColorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Int32> Timestamp { get; set; }
	}
	
	public class PadUsersUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PadUsersUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class PadUsersUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="padUsers")]
		public PadUsersUsingPOSTReturnDataPadUsers[] PadUsersUsingPOSTReturnDataPadUsers { get; set; }
	}
	
	public class PadUsersUsingPOSTReturnDataPadUsers
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorId")]
		public string ColorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Int32> Timestamp { get; set; }
	}
	
	public class PadUsersCountUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PadUsersCountUsingGETReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class PadUsersCountUsingGETReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="padUsersCount")]
		public System.Nullable<System.Int32> PadUsersCount { get; set; }
	}
	
	public class PadUsersCountUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PadUsersCountUsingPOSTReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class PadUsersCountUsingPOSTReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="padUsersCount")]
		public System.Nullable<System.Int32> PadUsersCount { get; set; }
	}
	
	public class RestoreRevisionUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class RestoreRevisionUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class SaveRevisionUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class SaveRevisionUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class SendClientsMessageUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class SendClientsMessageUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class SetHTMLUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class SetHTMLUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class SetPublicStatusUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class SetPublicStatusUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class SetTextUsingGETReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class SetTextUsingPOSTReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
