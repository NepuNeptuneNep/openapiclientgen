//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddAssociationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddAssociationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssociationEdgeType AssociationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AssociationEdgeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContributedTo = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AssociatedWith = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DerivedFrom = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Produced = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFound
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceLimitExceeded
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddTagsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p>A tag object that consists of a key and an optional value, used to manage metadata for SageMaker Amazon Web Services resources.</p> <p>You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints. For more information on adding tags to SageMaker resources, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html">AddTags</a>.</p> <p>For more information on adding metadata to your Amazon Web Services resources with tagging, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>. For advice on best practices for managing Amazon Web Services resources with tagging, see <a href="https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf">Tagging Best Practices: Implement an Effective Amazon Web Services Resource Tagging Strategy</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddTagsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateTrialComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateTrialComponentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrialName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDescribeModelPackageOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageSummaries ModelPackageSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDescribeModelPackageErrorMap BatchDescribeModelPackageErrorMap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelPackageSummaries
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDescribeModelPackageErrorMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDescribeModelPackageInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ModelPackageArnList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateActionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateActionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ActionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActionSource Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineageEntityParameters Properties { get; set; }
		
		/// <summary>
		/// Metadata properties of the tracking entity, trial, or trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetadataProperties MetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A structure describing the source of an action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ActionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LineageEntityParameters
	{
	}
	
	/// <summary>
	/// Metadata properties of the tracking entity, trial, or trial component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetadataProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Repository { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GeneratedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAlgorithmOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlgorithmArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAlgorithmInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlgorithmName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlgorithmDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrainingSpecification TrainingSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceSpecification InferenceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmValidationSpecification ValidationSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CertifyForMarketplace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Defines how the algorithm is used for a training job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrainingSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrainingImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrainingImageDigest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterSpecification[] SupportedHyperParameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrainingInstanceType[] SupportedTrainingInstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsDistributedTraining { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDefinition[] MetricDefinitions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ChannelSpecification[] TrainingChannels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobObjective[] SupportedTuningJobObjectiveMetrics { get; set; }
	}
	
	/// <summary>
	/// Defines a hyperparameter to be used by an algorithm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ParameterType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterRange Range { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTunable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Integer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Continuous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Categorical = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreeText = 3,
	}
	
	/// <summary>
	/// Defines the possible values for categorical, continuous, and integer hyperparameters to be used by an algorithm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParameterRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IntegerParameterRangeSpecification IntegerParameterRangeSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContinuousParameterRangeSpecification ContinuousParameterRangeSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CategoricalParameterRangeSpecification CategoricalParameterRangeSpecification { get; set; }
	}
	
	/// <summary>
	/// Defines the possible values for an integer hyperparameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntegerParameterRangeSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MinValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MaxValue { get; set; }
	}
	
	/// <summary>
	/// Defines the possible values for a continuous hyperparameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousParameterRangeSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MinValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MaxValue { get; set; }
	}
	
	/// <summary>
	/// Defines the possible values for a categorical hyperparameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoricalParameterRangeSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TrainingInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.xlarge")]
		ml_m4_xlarge = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.2xlarge")]
		ml_m4_2xlarge = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.4xlarge")]
		ml_m4_4xlarge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.10xlarge")]
		ml_m4_10xlarge = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.16xlarge")]
		ml_m4_16xlarge = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.xlarge")]
		ml_g4dn_xlarge = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.2xlarge")]
		ml_g4dn_2xlarge = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.4xlarge")]
		ml_g4dn_4xlarge = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.8xlarge")]
		ml_g4dn_8xlarge = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.12xlarge")]
		ml_g4dn_12xlarge = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.16xlarge")]
		ml_g4dn_16xlarge = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.large")]
		ml_m5_large = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.xlarge")]
		ml_m5_xlarge = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.2xlarge")]
		ml_m5_2xlarge = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.4xlarge")]
		ml_m5_4xlarge = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.12xlarge")]
		ml_m5_12xlarge = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.24xlarge")]
		ml_m5_24xlarge = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.xlarge")]
		ml_c4_xlarge = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.2xlarge")]
		ml_c4_2xlarge = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.4xlarge")]
		ml_c4_4xlarge = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.8xlarge")]
		ml_c4_8xlarge = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.xlarge")]
		ml_p2_xlarge = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.8xlarge")]
		ml_p2_8xlarge = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.16xlarge")]
		ml_p2_16xlarge = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.2xlarge")]
		ml_p3_2xlarge = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.8xlarge")]
		ml_p3_8xlarge = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.16xlarge")]
		ml_p3_16xlarge = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3dn.24xlarge")]
		ml_p3dn_24xlarge = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p4d.24xlarge")]
		ml_p4d_24xlarge = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.xlarge")]
		ml_c5_xlarge = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.2xlarge")]
		ml_c5_2xlarge = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.4xlarge")]
		ml_c5_4xlarge = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.9xlarge")]
		ml_c5_9xlarge = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.18xlarge")]
		ml_c5_18xlarge = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5n.xlarge")]
		ml_c5n_xlarge = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5n.2xlarge")]
		ml_c5n_2xlarge = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5n.4xlarge")]
		ml_c5n_4xlarge = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5n.9xlarge")]
		ml_c5n_9xlarge = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5n.18xlarge")]
		ml_c5n_18xlarge = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.xlarge")]
		ml_g5_xlarge = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.2xlarge")]
		ml_g5_2xlarge = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.4xlarge")]
		ml_g5_4xlarge = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.8xlarge")]
		ml_g5_8xlarge = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.16xlarge")]
		ml_g5_16xlarge = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.12xlarge")]
		ml_g5_12xlarge = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.24xlarge")]
		ml_g5_24xlarge = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.48xlarge")]
		ml_g5_48xlarge = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.trn1.2xlarge")]
		ml_trn1_2xlarge = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.trn1.32xlarge")]
		ml_trn1_32xlarge = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.trn1n.32xlarge")]
		ml_trn1n_32xlarge = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p5.48xlarge")]
		ml_p5_48xlarge = 50,
	}
	
	/// <summary>
	/// Specifies a metric that the training algorithm writes to <code>stderr</code> or <code>stdout</code>. You can view these logs to understand how your training job performs and check for any errors encountered during training. SageMaker hyperparameter tuning captures all defined metrics. Specify one of the defined metrics to use as an objective metric using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-TuningObjective">TuningObjective</a> parameter in the <code>HyperParameterTrainingJobDefinition</code> API to evaluate job performance during hyperparameter tuning.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricDefinition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Regex { get; set; }
	}
	
	/// <summary>
	/// Defines a named input source, called a channel, to be used by an algorithm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsRequired { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SupportedContentTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CompressionType[] SupportedCompressionTypes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrainingInputMode[] SupportedInputModes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CompressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gzip = 1,
	}
	
	/// <summary>
	/// <p>The training input mode that the algorithm supports. For more information about input modes, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p> <p> <b>Pipe mode</b> </p> <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly from Amazon S3 to the container.</p> <p> <b>File mode</b> </p> <p>If an algorithm supports <code>File</code> mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container.</p> <p>You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any.</p> <p>For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training.</p> <p> <b>FastFile mode</b> </p> <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk.</p> <p> <code>FastFile</code> mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TrainingInputMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pipe = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		File = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FastFile = 2,
	}
	
	/// <summary>
	/// Defines the objective metric for a hyperparameter tuning job. Hyperparameter tuning uses the value of this metric to evaluate the training jobs it launches, and returns the training job that results in either the highest or lowest value for this metric, depending on the value you specify for the <code>Type</code> parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterTuningJobObjective
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobObjectiveType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HyperParameterTuningJobObjectiveType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximize = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimize = 1,
	}
	
	/// <summary>
	/// Defines how to perform inference generation after a training job is run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InferenceSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageContainerDefinition[] Containers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransformInstanceType[] SupportedTransformInstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantInstanceType[] SupportedRealtimeInferenceInstanceTypes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SupportedContentTypes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SupportedResponseMIMETypes { get; set; }
	}
	
	/// <summary>
	/// Describes the Docker container for the model package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelPackageContainerDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContainerHostname { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageDigest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelDataUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentMap Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelInput ModelInput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Framework { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NearestModelName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentMap
	{
	}
	
	/// <summary>
	/// Input object for the model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataInputConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TransformInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.xlarge")]
		ml_m4_xlarge = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.2xlarge")]
		ml_m4_2xlarge = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.4xlarge")]
		ml_m4_4xlarge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.10xlarge")]
		ml_m4_10xlarge = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.16xlarge")]
		ml_m4_16xlarge = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.xlarge")]
		ml_c4_xlarge = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.2xlarge")]
		ml_c4_2xlarge = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.4xlarge")]
		ml_c4_4xlarge = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.8xlarge")]
		ml_c4_8xlarge = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.xlarge")]
		ml_p2_xlarge = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.8xlarge")]
		ml_p2_8xlarge = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.16xlarge")]
		ml_p2_16xlarge = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.2xlarge")]
		ml_p3_2xlarge = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.8xlarge")]
		ml_p3_8xlarge = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.16xlarge")]
		ml_p3_16xlarge = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.xlarge")]
		ml_c5_xlarge = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.2xlarge")]
		ml_c5_2xlarge = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.4xlarge")]
		ml_c5_4xlarge = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.9xlarge")]
		ml_c5_9xlarge = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.18xlarge")]
		ml_c5_18xlarge = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.large")]
		ml_m5_large = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.xlarge")]
		ml_m5_xlarge = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.2xlarge")]
		ml_m5_2xlarge = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.4xlarge")]
		ml_m5_4xlarge = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.12xlarge")]
		ml_m5_12xlarge = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.24xlarge")]
		ml_m5_24xlarge = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.xlarge")]
		ml_g4dn_xlarge = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.2xlarge")]
		ml_g4dn_2xlarge = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.4xlarge")]
		ml_g4dn_4xlarge = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.8xlarge")]
		ml_g4dn_8xlarge = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.12xlarge")]
		ml_g4dn_12xlarge = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.16xlarge")]
		ml_g4dn_16xlarge = 31,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProductionVariantInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t2.medium")]
		ml_t2_medium = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t2.large")]
		ml_t2_large = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t2.xlarge")]
		ml_t2_xlarge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t2.2xlarge")]
		ml_t2_2xlarge = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.xlarge")]
		ml_m4_xlarge = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.2xlarge")]
		ml_m4_2xlarge = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.4xlarge")]
		ml_m4_4xlarge = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.10xlarge")]
		ml_m4_10xlarge = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.16xlarge")]
		ml_m4_16xlarge = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.large")]
		ml_m5_large = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.xlarge")]
		ml_m5_xlarge = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.2xlarge")]
		ml_m5_2xlarge = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.4xlarge")]
		ml_m5_4xlarge = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.12xlarge")]
		ml_m5_12xlarge = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.24xlarge")]
		ml_m5_24xlarge = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.large")]
		ml_m5d_large = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.xlarge")]
		ml_m5d_xlarge = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.2xlarge")]
		ml_m5d_2xlarge = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.4xlarge")]
		ml_m5d_4xlarge = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.12xlarge")]
		ml_m5d_12xlarge = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.24xlarge")]
		ml_m5d_24xlarge = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.large")]
		ml_c4_large = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.xlarge")]
		ml_c4_xlarge = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.2xlarge")]
		ml_c4_2xlarge = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.4xlarge")]
		ml_c4_4xlarge = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.8xlarge")]
		ml_c4_8xlarge = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.xlarge")]
		ml_p2_xlarge = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.8xlarge")]
		ml_p2_8xlarge = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.16xlarge")]
		ml_p2_16xlarge = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.2xlarge")]
		ml_p3_2xlarge = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.8xlarge")]
		ml_p3_8xlarge = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.16xlarge")]
		ml_p3_16xlarge = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.large")]
		ml_c5_large = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.xlarge")]
		ml_c5_xlarge = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.2xlarge")]
		ml_c5_2xlarge = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.4xlarge")]
		ml_c5_4xlarge = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.9xlarge")]
		ml_c5_9xlarge = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.18xlarge")]
		ml_c5_18xlarge = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5d.large")]
		ml_c5d_large = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5d.xlarge")]
		ml_c5d_xlarge = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5d.2xlarge")]
		ml_c5d_2xlarge = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5d.4xlarge")]
		ml_c5d_4xlarge = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5d.9xlarge")]
		ml_c5d_9xlarge = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5d.18xlarge")]
		ml_c5d_18xlarge = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.xlarge")]
		ml_g4dn_xlarge = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.2xlarge")]
		ml_g4dn_2xlarge = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.4xlarge")]
		ml_g4dn_4xlarge = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.8xlarge")]
		ml_g4dn_8xlarge = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.12xlarge")]
		ml_g4dn_12xlarge = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.16xlarge")]
		ml_g4dn_16xlarge = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.large")]
		ml_r5_large = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.xlarge")]
		ml_r5_xlarge = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.2xlarge")]
		ml_r5_2xlarge = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.4xlarge")]
		ml_r5_4xlarge = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.12xlarge")]
		ml_r5_12xlarge = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.24xlarge")]
		ml_r5_24xlarge = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5d.large")]
		ml_r5d_large = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5d.xlarge")]
		ml_r5d_xlarge = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5d.2xlarge")]
		ml_r5d_2xlarge = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5d.4xlarge")]
		ml_r5d_4xlarge = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5d.12xlarge")]
		ml_r5d_12xlarge = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5d.24xlarge")]
		ml_r5d_24xlarge = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.inf1.xlarge")]
		ml_inf1_xlarge = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.inf1.2xlarge")]
		ml_inf1_2xlarge = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.inf1.6xlarge")]
		ml_inf1_6xlarge = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.inf1.24xlarge")]
		ml_inf1_24xlarge = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6i.large")]
		ml_c6i_large = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6i.xlarge")]
		ml_c6i_xlarge = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6i.2xlarge")]
		ml_c6i_2xlarge = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6i.4xlarge")]
		ml_c6i_4xlarge = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6i.8xlarge")]
		ml_c6i_8xlarge = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6i.12xlarge")]
		ml_c6i_12xlarge = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6i.16xlarge")]
		ml_c6i_16xlarge = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6i.24xlarge")]
		ml_c6i_24xlarge = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6i.32xlarge")]
		ml_c6i_32xlarge = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.xlarge")]
		ml_g5_xlarge = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.2xlarge")]
		ml_g5_2xlarge = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.4xlarge")]
		ml_g5_4xlarge = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.8xlarge")]
		ml_g5_8xlarge = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.12xlarge")]
		ml_g5_12xlarge = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.16xlarge")]
		ml_g5_16xlarge = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.24xlarge")]
		ml_g5_24xlarge = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.48xlarge")]
		ml_g5_48xlarge = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p4d.24xlarge")]
		ml_p4d_24xlarge = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c7g.large")]
		ml_c7g_large = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c7g.xlarge")]
		ml_c7g_xlarge = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c7g.2xlarge")]
		ml_c7g_2xlarge = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c7g.4xlarge")]
		ml_c7g_4xlarge = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c7g.8xlarge")]
		ml_c7g_8xlarge = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c7g.12xlarge")]
		ml_c7g_12xlarge = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c7g.16xlarge")]
		ml_c7g_16xlarge = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m6g.large")]
		ml_m6g_large = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m6g.xlarge")]
		ml_m6g_xlarge = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m6g.2xlarge")]
		ml_m6g_2xlarge = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m6g.4xlarge")]
		ml_m6g_4xlarge = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m6g.8xlarge")]
		ml_m6g_8xlarge = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m6g.12xlarge")]
		ml_m6g_12xlarge = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m6g.16xlarge")]
		ml_m6g_16xlarge = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m6gd.large")]
		ml_m6gd_large = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m6gd.xlarge")]
		ml_m6gd_xlarge = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m6gd.2xlarge")]
		ml_m6gd_2xlarge = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m6gd.4xlarge")]
		ml_m6gd_4xlarge = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m6gd.8xlarge")]
		ml_m6gd_8xlarge = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m6gd.12xlarge")]
		ml_m6gd_12xlarge = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m6gd.16xlarge")]
		ml_m6gd_16xlarge = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6g.large")]
		ml_c6g_large = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6g.xlarge")]
		ml_c6g_xlarge = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6g.2xlarge")]
		ml_c6g_2xlarge = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6g.4xlarge")]
		ml_c6g_4xlarge = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6g.8xlarge")]
		ml_c6g_8xlarge = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6g.12xlarge")]
		ml_c6g_12xlarge = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6g.16xlarge")]
		ml_c6g_16xlarge = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6gd.large")]
		ml_c6gd_large = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6gd.xlarge")]
		ml_c6gd_xlarge = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6gd.2xlarge")]
		ml_c6gd_2xlarge = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6gd.4xlarge")]
		ml_c6gd_4xlarge = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6gd.8xlarge")]
		ml_c6gd_8xlarge = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6gd.12xlarge")]
		ml_c6gd_12xlarge = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6gd.16xlarge")]
		ml_c6gd_16xlarge = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6gn.large")]
		ml_c6gn_large = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6gn.xlarge")]
		ml_c6gn_xlarge = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6gn.2xlarge")]
		ml_c6gn_2xlarge = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6gn.4xlarge")]
		ml_c6gn_4xlarge = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6gn.8xlarge")]
		ml_c6gn_8xlarge = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6gn.12xlarge")]
		ml_c6gn_12xlarge = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c6gn.16xlarge")]
		ml_c6gn_16xlarge = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r6g.large")]
		ml_r6g_large = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r6g.xlarge")]
		ml_r6g_xlarge = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r6g.2xlarge")]
		ml_r6g_2xlarge = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r6g.4xlarge")]
		ml_r6g_4xlarge = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r6g.8xlarge")]
		ml_r6g_8xlarge = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r6g.12xlarge")]
		ml_r6g_12xlarge = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r6g.16xlarge")]
		ml_r6g_16xlarge = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r6gd.large")]
		ml_r6gd_large = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r6gd.xlarge")]
		ml_r6gd_xlarge = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r6gd.2xlarge")]
		ml_r6gd_2xlarge = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r6gd.4xlarge")]
		ml_r6gd_4xlarge = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r6gd.8xlarge")]
		ml_r6gd_8xlarge = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r6gd.12xlarge")]
		ml_r6gd_12xlarge = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r6gd.16xlarge")]
		ml_r6gd_16xlarge = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p4de.24xlarge")]
		ml_p4de_24xlarge = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.trn1.2xlarge")]
		ml_trn1_2xlarge = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.trn1.32xlarge")]
		ml_trn1_32xlarge = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.inf2.xlarge")]
		ml_inf2_xlarge = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.inf2.8xlarge")]
		ml_inf2_8xlarge = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.inf2.24xlarge")]
		ml_inf2_24xlarge = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.inf2.48xlarge")]
		ml_inf2_48xlarge = 146,
	}
	
	/// <summary>
	/// Specifies configurations for one or more training jobs that SageMaker runs to test the algorithm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlgorithmValidationSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ValidationRole { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmValidationProfile[] ValidationProfiles { get; set; }
	}
	
	/// <summary>
	/// <p>Defines a training job and a batch transform job that SageMaker runs to validate your algorithm.</p> <p>The data provided in the validation profile is made available to your buyers on Amazon Web Services Marketplace.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlgorithmValidationProfile
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrainingJobDefinition TrainingJobDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransformJobDefinition TransformJobDefinition { get; set; }
	}
	
	/// <summary>
	/// Defines the input needed to run a training job using the algorithm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrainingJobDefinition
	{
		
		/// <summary>
		/// <p>The training input mode that the algorithm supports. For more information about input modes, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p> <p> <b>Pipe mode</b> </p> <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly from Amazon S3 to the container.</p> <p> <b>File mode</b> </p> <p>If an algorithm supports <code>File</code> mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container.</p> <p>You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any.</p> <p>For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training.</p> <p> <b>FastFile mode</b> </p> <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk.</p> <p> <code>FastFile</code> mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.</p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrainingInputMode TrainingInputMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameters HyperParameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Channel[] InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StoppingCondition StoppingCondition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameters
	{
	}
	
	/// <summary>
	/// A channel is a named input source that training algorithms can consume. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Channel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ChannelName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataSource DataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CompressionType CompressionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecordWrapper RecordWrapperType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingInputMode InputMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShuffleConfig ShuffleConfig { get; set; }
	}
	
	/// <summary>
	/// Describes the location of the channel data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataSource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3DataSource S3DataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FileSystemDataSource FileSystemDataSource { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the S3 data source.</p> <p>Your input bucket must be in the same Amazon Web Services region as your training job.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3DataSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3DataType S3DataType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3DataDistribution S3DataDistributionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AttributeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceGroupNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum S3DataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManifestFile = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3Prefix = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AugmentedManifestFile = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum S3DataDistribution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FullyReplicated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ShardedByS3Key = 1,
	}
	
	/// <summary>
	/// Specifies a file system data source for a channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileSystemDataSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FileSystemId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FileSystemAccessMode FileSystemAccessMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FileSystemType FileSystemType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FileSystemAccessMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rw = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ro = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FileSystemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EFS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FSxLustre = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RecordWrapper
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecordIO = 1,
	}
	
	/// <summary>
	/// <p>A configuration for a shuffle option for input data in a channel. If you use <code>S3Prefix</code> for <code>S3DataType</code>, the results of the S3 key prefix matches are shuffled. If you use <code>ManifestFile</code>, the order of the S3 object references in the <code>ManifestFile</code> is shuffled. If you use <code>AugmentedManifestFile</code>, the order of the JSON lines in the <code>AugmentedManifestFile</code> is shuffled. The shuffling order is determined using the <code>Seed</code> value.</p> <p>For Pipe input mode, when <code>ShuffleConfig</code> is specified shuffling is done at the start of every epoch. With large datasets, this ensures that the order of the training data is different for each epoch, and it helps reduce bias and possible overfitting. In a multi-node training job when <code>ShuffleConfig</code> is combined with <code>S3DataDistributionType</code> of <code>ShardedByS3Key</code>, the data is shuffled across nodes so that the content sent to a particular node on the first epoch might be sent to a different node on the second epoch.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShuffleConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Seed { get; set; }
	}
	
	/// <summary>
	/// Provides information about how to store model training results (model artifacts).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutputDataConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputCompressionType CompressionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OutputCompressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Describes the resources, including machine learning (ML) compute instances and ML storage volumes, to use for model training. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingInstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int VolumeSizeInGB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroup[] InstanceGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> KeepAlivePeriodInSeconds { get; set; }
	}
	
	/// <summary>
	/// Defines an instance group for heterogeneous cluster training. When requesting a training job using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> API, you can configure multiple instance groups .
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceGroup
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrainingInstanceType InstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstanceCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceGroupName { get; set; }
	}
	
	/// <summary>
	/// <p>Specifies a limit to how long a model training job or model compilation job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.</p> <p>To stop a training job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost. </p> <p>The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with <code>CreateModel</code>.</p> <note> <p>The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoppingCondition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRuntimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxWaitTimeInSeconds { get; set; }
	}
	
	/// <summary>
	/// Defines the input needed to run a transform job using the inference specification specified in the algorithm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransformJobDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxConcurrentTransforms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxPayloadInMB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchStrategy BatchStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransformEnvironmentMap Environment { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransformInput TransformInput { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransformOutput TransformOutput { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransformResources TransformResources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MultiRecord = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SingleRecord = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransformEnvironmentMap
	{
	}
	
	/// <summary>
	/// Describes the input source of a transform job and the way the transform job consumes it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransformInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransformDataSource DataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CompressionType CompressionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SplitType SplitType { get; set; }
	}
	
	/// <summary>
	/// Describes the location of the channel data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransformDataSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransformS3DataSource S3DataSource { get; set; }
	}
	
	/// <summary>
	/// Describes the S3 data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransformS3DataSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3DataType S3DataType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SplitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Line = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecordIO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TFRecord = 3,
	}
	
	/// <summary>
	/// Describes the results of a transform job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransformOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Accept { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssemblyType AssembleWith { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AssemblyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Line = 1,
	}
	
	/// <summary>
	/// Describes the resources, including ML instance types and ML instance count, to use for transform job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransformResources
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransformInstanceType InstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AppType AppType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceSpec ResourceSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpaceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AppType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JupyterServer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KernelGateway = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TensorBoard = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RStudioServerPro = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSessionGateway = 4,
	}
	
	/// <summary>
	/// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceSpec
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SageMakerImageArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SageMakerImageVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleConfigArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AppInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t3.micro")]
		ml_t3_micro = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t3.small")]
		ml_t3_small = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t3.medium")]
		ml_t3_medium = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t3.large")]
		ml_t3_large = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t3.xlarge")]
		ml_t3_xlarge = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t3.2xlarge")]
		ml_t3_2xlarge = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.large")]
		ml_m5_large = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.xlarge")]
		ml_m5_xlarge = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.2xlarge")]
		ml_m5_2xlarge = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.4xlarge")]
		ml_m5_4xlarge = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.8xlarge")]
		ml_m5_8xlarge = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.12xlarge")]
		ml_m5_12xlarge = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.16xlarge")]
		ml_m5_16xlarge = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.24xlarge")]
		ml_m5_24xlarge = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.large")]
		ml_m5d_large = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.xlarge")]
		ml_m5d_xlarge = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.2xlarge")]
		ml_m5d_2xlarge = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.4xlarge")]
		ml_m5d_4xlarge = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.8xlarge")]
		ml_m5d_8xlarge = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.12xlarge")]
		ml_m5d_12xlarge = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.16xlarge")]
		ml_m5d_16xlarge = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.24xlarge")]
		ml_m5d_24xlarge = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.large")]
		ml_c5_large = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.xlarge")]
		ml_c5_xlarge = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.2xlarge")]
		ml_c5_2xlarge = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.4xlarge")]
		ml_c5_4xlarge = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.9xlarge")]
		ml_c5_9xlarge = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.12xlarge")]
		ml_c5_12xlarge = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.18xlarge")]
		ml_c5_18xlarge = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.24xlarge")]
		ml_c5_24xlarge = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.2xlarge")]
		ml_p3_2xlarge = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.8xlarge")]
		ml_p3_8xlarge = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.16xlarge")]
		ml_p3_16xlarge = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3dn.24xlarge")]
		ml_p3dn_24xlarge = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.xlarge")]
		ml_g4dn_xlarge = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.2xlarge")]
		ml_g4dn_2xlarge = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.4xlarge")]
		ml_g4dn_4xlarge = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.8xlarge")]
		ml_g4dn_8xlarge = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.12xlarge")]
		ml_g4dn_12xlarge = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.16xlarge")]
		ml_g4dn_16xlarge = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.large")]
		ml_r5_large = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.xlarge")]
		ml_r5_xlarge = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.2xlarge")]
		ml_r5_2xlarge = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.4xlarge")]
		ml_r5_4xlarge = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.8xlarge")]
		ml_r5_8xlarge = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.12xlarge")]
		ml_r5_12xlarge = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.16xlarge")]
		ml_r5_16xlarge = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.24xlarge")]
		ml_r5_24xlarge = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.xlarge")]
		ml_g5_xlarge = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.2xlarge")]
		ml_g5_2xlarge = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.4xlarge")]
		ml_g5_4xlarge = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.8xlarge")]
		ml_g5_8xlarge = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.16xlarge")]
		ml_g5_16xlarge = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.12xlarge")]
		ml_g5_12xlarge = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.24xlarge")]
		ml_g5_24xlarge = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.48xlarge")]
		ml_g5_48xlarge = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.geospatial.interactive")]
		ml_geospatial_interactive = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p4d.24xlarge")]
		ml_p4d_24xlarge = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p4de.24xlarge")]
		ml_p4de_24xlarge = 59,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceInUse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppImageConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppImageConfigArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppImageConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppImageConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KernelGatewayImageConfig KernelGatewayImageConfig { get; set; }
	}
	
	/// <summary>
	/// The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KernelGatewayImageConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KernelSpec[] KernelSpecs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FileSystemConfig FileSystemConfig { get; set; }
	}
	
	/// <summary>
	/// The specification of a Jupyter kernel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KernelSpec
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileSystemConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MountPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultUid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultGid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateArtifactResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateArtifactRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ArtifactSource Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineageEntityParameters Properties { get; set; }
		
		/// <summary>
		/// Metadata properties of the tracking entity, trial, or trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetadataProperties MetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A structure describing the source of an artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtifactSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ArtifactSourceType[] SourceTypes { get; set; }
	}
	
	/// <summary>
	/// The ID and ID type of an artifact source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtifactSourceType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ArtifactSourceIdType SourceIdType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ArtifactSourceIdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD5Hash = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3ETag = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3Version = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAutoMLJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAutoMLJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLChannel[] InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLOutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProblemType ProblemType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobObjective AutoMLJobObjective { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobConfig AutoMLJobConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GenerateCandidateDefinitionsOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelDeployConfig ModelDeployConfig { get; set; }
	}
	
	/// <summary>
	/// <p>A channel is a named input source that training algorithms can consume. The validation dataset size is limited to less than 2 GB. The training dataset size must be less than 100 GB. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Channel.html"> Channel</a>.</p> <note> <p>A validation dataset must contain the same headers as the training dataset.</p> </note> <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLChannel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLDataSource DataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CompressionType CompressionType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetAttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLChannelType ChannelType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SampleWeightAttributeName { get; set; }
	}
	
	/// <summary>
	/// The data source for the Autopilot job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLDataSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLS3DataSource S3DataSource { get; set; }
	}
	
	/// <summary>
	/// Describes the Amazon S3 data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLS3DataSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3DataType S3DataType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutoMLChannelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		training = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		validation = 1,
	}
	
	/// <summary>
	/// The output data configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLOutputDataConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProblemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BinaryClassification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MulticlassClassification = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Regression = 2,
	}
	
	/// <summary>
	/// Specifies a metric to minimize or maximize as the objective of a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLJobObjective
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLMetricEnum MetricName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutoMLMetricEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accuracy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		F1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		F1macro = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RMSE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		R2 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BalancedAccuracy = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Precision = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrecisionMacro = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Recall = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecallMacro = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAPE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAPE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AverageWeightedQuantileLoss = 16,
	}
	
	/// <summary>
	/// A collection of settings used for an AutoML job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLJobConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobCompletionCriteria CompletionCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSecurityConfig SecurityConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLDataSplitConfig DataSplitConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLCandidateGenerationConfig CandidateGenerationConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLMode Mode { get; set; }
	}
	
	/// <summary>
	/// How long a job is allowed to run, or how many candidates a job is allowed to generate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLJobCompletionCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCandidates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRuntimePerTrainingJobInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAutoMLJobRuntimeInSeconds { get; set; }
	}
	
	/// <summary>
	/// Security options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLSecurityConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableInterContainerTrafficEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
	}
	
	/// <summary>
	/// Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Subnets { get; set; }
	}
	
	/// <summary>
	/// <p>This structure specifies how to split the data into train and validation datasets.</p> <p>The validation and training datasets must contain the same headers. For jobs created by calling <code>CreateAutoMLJob</code>, the validation dataset must be less than 2 GB in size.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLDataSplitConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float ValidationFraction { get; set; }
	}
	
	/// <summary>
	/// Stores the configuration information for how a candidate is generated (optional).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLCandidateGenerationConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FeatureSpecificationS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLAlgorithmConfig[] AlgorithmsConfig { get; set; }
	}
	
	/// <summary>
	/// The collection of algorithms run on a dataset for training the model candidates of an Autopilot job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLAlgorithmConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLAlgorithm[] AutoMLAlgorithms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutoMLAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xgboost = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="linear-learner")]
		linearMinuslearner = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mlp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lightgbm = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		catboost = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		randomforest = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="extra-trees")]
		extraMinustrees = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nn-torch")]
		nnMinustorch = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fastai = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutoMLMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENSEMBLING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPERPARAMETER_TUNING = 2,
	}
	
	/// <summary>
	/// Specifies how to generate the endpoint name for an automatic one-click Autopilot model deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelDeployConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoGenerateEndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAutoMLJobV2Response
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAutoMLJobV2Request
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobChannel[] AutoMLJobInputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLOutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLProblemTypeConfig AutoMLProblemTypeConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSecurityConfig SecurityConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobObjective AutoMLJobObjective { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelDeployConfig ModelDeployConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLDataSplitConfig DataSplitConfig { get; set; }
	}
	
	/// <summary>
	/// A channel is a named input source that training algorithms can consume. This channel is used for AutoML jobs V2 (jobs created by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a>).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLJobChannel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLChannelType ChannelType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CompressionType CompressionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLDataSource DataSource { get; set; }
	}
	
	/// <summary>
	/// A collection of settings specific to the problem type used to configure an AutoML job V2. There must be one and only one config of the following type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLProblemTypeConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ImageClassificationJobConfig ImageClassificationJobConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TextClassificationJobConfig TextClassificationJobConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TabularJobConfig TabularJobConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TimeSeriesForecastingJobConfig TimeSeriesForecastingJobConfig { get; set; }
	}
	
	/// <summary>
	/// Stores the configuration information for the image classification problem of an AutoML job V2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageClassificationJobConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobCompletionCriteria CompletionCriteria { get; set; }
	}
	
	/// <summary>
	/// Stores the configuration information for the text classification problem of an AutoML job V2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextClassificationJobConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobCompletionCriteria CompletionCriteria { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContentColumn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetLabelColumn { get; set; }
	}
	
	/// <summary>
	/// The collection of settings used by an AutoML job V2 for the <code>TABULAR</code> problem type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TabularJobConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CandidateGenerationConfig CandidateGenerationConfig { get; set; }
		
		/// <summary>
		/// How long a job is allowed to run, or how many candidates a job is allowed to generate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobCompletionCriteria CompletionCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FeatureSpecificationS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GenerateCandidateDefinitionsOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProblemType ProblemType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetAttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SampleWeightAttributeName { get; set; }
	}
	
	/// <summary>
	/// Stores the configuration information for how model candidates are generated using an AutoML job V2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateGenerationConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLAlgorithmConfig[] AlgorithmsConfig { get; set; }
	}
	
	/// <summary>
	/// <p>The collection of settings used by an AutoML job V2 for the time-series forecasting problem type.</p> <note> <p>The <code>TimeSeriesForecastingJobConfig</code> problem type is only available in private beta. Contact Amazon Web Services Support or your account manager to learn more about access privileges.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeSeriesForecastingJobConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FeatureSpecificationS3Uri { get; set; }
		
		/// <summary>
		/// How long a job is allowed to run, or how many candidates a job is allowed to generate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobCompletionCriteria CompletionCriteria { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ForecastFrequency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ForecastHorizon { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ForecastQuantiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TimeSeriesTransformations Transformations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TimeSeriesConfig TimeSeriesConfig { get; set; }
	}
	
	/// <summary>
	/// Transformations allowed on the dataset. Supported transformations are <code>Filling</code> and <code>Aggregation</code>. <code>Filling</code> specifies how to add values to missing values in the dataset. <code>Aggregation</code> defines how to aggregate data that does not align with forecast frequency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeSeriesTransformations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FillingTransformations Filling { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AggregationTransformations Aggregation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FillingTransformations
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregationTransformations
	{
	}
	
	/// <summary>
	/// The collection of components that defines the time-series.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeSeriesConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetAttributeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TimestampAttributeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ItemIdentifierAttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GroupingAttributeNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCodeRepositoryOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CodeRepositoryArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCodeRepositoryInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CodeRepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GitConfig GitConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Specifies configuration details for a Git repository in your Amazon Web Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GitConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RepositoryUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Branch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCompilationJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CompilationJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCompilationJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CompilationJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputConfig InputConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputConfig OutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NeoVpcConfig VpcConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StoppingCondition StoppingCondition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Contains information about the location of input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataInputConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Framework Framework { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Framework
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TENSORFLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KERAS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MXNET = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONNX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PYTORCH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XGBOOST = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TFLITE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DARKNET = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKLEARN = 8,
	}
	
	/// <summary>
	/// Contains information about the output location for the compiled model and the target device that the model runs on. <code>TargetDevice</code> and <code>TargetPlatform</code> are mutually exclusive, so you need to choose one between the two to specify your target device or platform. If you cannot find your device you want to use from the <code>TargetDevice</code> list, use <code>TargetPlatform</code> to describe the platform of your edge device and <code>CompilerOptions</code> if there are specific settings that are required or recommended to use for particular TargetPlatform.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutputConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetDevice TargetDevice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetPlatform TargetPlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompilerOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TargetDevice
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lambda = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ml_m4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ml_m5 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ml_c4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ml_c5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ml_p2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ml_p3 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ml_g4dn = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ml_inf1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ml_inf2 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ml_trn1 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ml_eia2 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jetson_tx1 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jetson_tx2 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jetson_nano = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jetson_xavier = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rasp3b = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		imx8qm = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deeplens = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rk3399 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rk3288 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aisage = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sbe_c = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		qcs605 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		qcs603 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sitara_am57x = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		amba_cv2 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		amba_cv22 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		amba_cv25 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x86_win32 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x86_win64 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		coreml = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jacinto_tda4vm = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		imx8mplus = 33,
	}
	
	/// <summary>
	/// Contains information about a target platform that you want your model to run on, such as OS, architecture, and accelerators. It is an alternative of <code>TargetDevice</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetPlatform
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TargetPlatformOs Os { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TargetPlatformArch Arch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetPlatformAccelerator Accelerator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TargetPlatformOs
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TargetPlatformArch
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X86_64 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X86 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARM64 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARM_EABI = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARM_EABIHF = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TargetPlatformAccelerator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEL_GRAPHICS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NVIDIA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NNA = 3,
	}
	
	/// <summary>
	/// The <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html">VpcConfig</a> configuration object that specifies the VPC that you want the compilation jobs to connect to. For more information on controlling access to your Amazon S3 buckets used for compilation job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Give Amazon SageMaker Compilation Jobs Access to Resources in Your Amazon VPC</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NeoVpcConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Subnets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContextResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContextArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContextRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContextName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContextSource Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContextType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineageEntityParameters Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A structure describing the source of a context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContextSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDataQualityJobDefinitionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDataQualityJobDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataQualityBaselineConfig DataQualityBaselineConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataQualityAppSpecification DataQualityAppSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataQualityJobInput DataQualityJobInput { get; set; }
		
		/// <summary>
		/// The output configuration for monitoring jobs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringOutputConfig DataQualityJobOutputConfig { get; set; }
		
		/// <summary>
		/// Identifies the resources to deploy for a monitoring job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringResources JobResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringNetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// A time limit for how long the monitoring job is allowed to run before stopping.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringStoppingCondition StoppingCondition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataQualityBaselineConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseliningJobName { get; set; }
		
		/// <summary>
		/// The constraints resource for a monitoring job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringConstraintsResource ConstraintsResource { get; set; }
		
		/// <summary>
		/// The statistics resource for a monitoring job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringStatisticsResource StatisticsResource { get; set; }
	}
	
	/// <summary>
	/// The constraints resource for a monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringConstraintsResource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
	}
	
	/// <summary>
	/// The statistics resource for a monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringStatisticsResource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
	}
	
	/// <summary>
	/// Information about the container that a data quality monitoring job runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataQualityAppSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ContainerEntrypoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ContainerArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecordPreprocessorSourceUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostAnalyticsProcessorSourceUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringEnvironmentMap Environment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringEnvironmentMap
	{
	}
	
	/// <summary>
	/// The input for the data quality monitoring job. Currently endpoints are supported for input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataQualityJobInput
	{
		
		/// <summary>
		/// Input object for the endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EndpointInput EndpointInput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchTransformInput BatchTransformInput { get; set; }
	}
	
	/// <summary>
	/// Input object for the endpoint
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocalPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingS3InputMode S3InputMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3DataDistribution S3DataDistributionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FeaturesAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InferenceAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProbabilityAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ProbabilityThresholdAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartTimeOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndTimeOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProcessingS3InputMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pipe = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		File = 1,
	}
	
	/// <summary>
	/// Input object for the batch transform job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchTransformInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataCapturedDestinationS3Uri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringDatasetFormat DatasetFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocalPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingS3InputMode S3InputMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3DataDistribution S3DataDistributionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FeaturesAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InferenceAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProbabilityAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ProbabilityThresholdAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartTimeOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndTimeOffset { get; set; }
	}
	
	/// <summary>
	/// Represents the dataset format used when running a monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringDatasetFormat
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringCsvDatasetFormat Csv { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringJsonDatasetFormat Json { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringParquetDatasetFormat Parquet { get; set; }
	}
	
	/// <summary>
	/// Represents the CSV dataset format used when running a monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringCsvDatasetFormat
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Header { get; set; }
	}
	
	/// <summary>
	/// Represents the JSON dataset format used when running a monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringJsonDatasetFormat
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Line { get; set; }
	}
	
	/// <summary>
	/// Represents the Parquet dataset format used when running a monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringParquetDatasetFormat
	{
	}
	
	/// <summary>
	/// The output configuration for monitoring jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringOutputConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringOutput[] MonitoringOutputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	/// <summary>
	/// The output object for a monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringS3Output S3Output { get; set; }
	}
	
	/// <summary>
	/// Information about where and how you want to store the results of a monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringS3Output
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocalPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingS3UploadMode S3UploadMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProcessingS3UploadMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Continuous = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EndOfJob = 1,
	}
	
	/// <summary>
	/// Identifies the resources to deploy for a monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringResources
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringClusterConfig ClusterConfig { get; set; }
	}
	
	/// <summary>
	/// Configuration for the cluster used to run model monitoring jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringClusterConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstanceCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProcessingInstanceType InstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int VolumeSizeInGB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProcessingInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t3.medium")]
		ml_t3_medium = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t3.large")]
		ml_t3_large = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t3.xlarge")]
		ml_t3_xlarge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t3.2xlarge")]
		ml_t3_2xlarge = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.xlarge")]
		ml_m4_xlarge = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.2xlarge")]
		ml_m4_2xlarge = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.4xlarge")]
		ml_m4_4xlarge = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.10xlarge")]
		ml_m4_10xlarge = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.16xlarge")]
		ml_m4_16xlarge = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.xlarge")]
		ml_c4_xlarge = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.2xlarge")]
		ml_c4_2xlarge = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.4xlarge")]
		ml_c4_4xlarge = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.8xlarge")]
		ml_c4_8xlarge = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.xlarge")]
		ml_p2_xlarge = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.8xlarge")]
		ml_p2_8xlarge = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.16xlarge")]
		ml_p2_16xlarge = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.2xlarge")]
		ml_p3_2xlarge = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.8xlarge")]
		ml_p3_8xlarge = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.16xlarge")]
		ml_p3_16xlarge = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.xlarge")]
		ml_c5_xlarge = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.2xlarge")]
		ml_c5_2xlarge = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.4xlarge")]
		ml_c5_4xlarge = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.9xlarge")]
		ml_c5_9xlarge = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.18xlarge")]
		ml_c5_18xlarge = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.large")]
		ml_m5_large = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.xlarge")]
		ml_m5_xlarge = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.2xlarge")]
		ml_m5_2xlarge = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.4xlarge")]
		ml_m5_4xlarge = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.12xlarge")]
		ml_m5_12xlarge = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.24xlarge")]
		ml_m5_24xlarge = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.large")]
		ml_r5_large = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.xlarge")]
		ml_r5_xlarge = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.2xlarge")]
		ml_r5_2xlarge = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.4xlarge")]
		ml_r5_4xlarge = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.8xlarge")]
		ml_r5_8xlarge = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.12xlarge")]
		ml_r5_12xlarge = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.16xlarge")]
		ml_r5_16xlarge = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.24xlarge")]
		ml_r5_24xlarge = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.xlarge")]
		ml_g4dn_xlarge = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.2xlarge")]
		ml_g4dn_2xlarge = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.4xlarge")]
		ml_g4dn_4xlarge = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.8xlarge")]
		ml_g4dn_8xlarge = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.12xlarge")]
		ml_g4dn_12xlarge = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.16xlarge")]
		ml_g4dn_16xlarge = 43,
	}
	
	/// <summary>
	/// The networking configuration for the monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringNetworkConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableInterContainerTrafficEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableNetworkIsolation { get; set; }
		
		/// <summary>
		/// Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
	}
	
	/// <summary>
	/// A time limit for how long the monitoring job is allowed to run before stopping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringStoppingCondition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxRuntimeInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDeviceFleetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EdgeOutputConfig OutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableIotRoleAlias { get; set; }
	}
	
	/// <summary>
	/// The output configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EdgeOutputConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EdgePresetDeploymentType PresetDeploymentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PresetDeploymentConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EdgePresetDeploymentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreengrassV2Component = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuthMode AuthMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UserSettings DefaultUserSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppNetworkAccessType AppNetworkAccessType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomeEfsFileSystemKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppSecurityGroupManagement AppSecurityGroupManagement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainSettings DomainSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DefaultSpaceSettings DefaultSpaceSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuthMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM = 1,
	}
	
	/// <summary>
	/// <p>A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the <code>CreateUserProfile</code> API is called, and as <code>DefaultUserSettings</code> when the <code>CreateDomain</code> API is called.</p> <p> <code>SecurityGroups</code> is aggregated when specified in both calls. For all other settings in <code>UserSettings</code>, the values specified in <code>CreateUserProfile</code> take precedence over those specified in <code>CreateDomain</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SharingSettings SharingSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JupyterServerAppSettings JupyterServerAppSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KernelGatewayAppSettings KernelGatewayAppSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TensorBoardAppSettings TensorBoardAppSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RStudioServerProAppSettings RStudioServerProAppSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RSessionAppSettings RSessionAppSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CanvasAppSettings CanvasAppSettings { get; set; }
	}
	
	/// <summary>
	/// Specifies options for sharing SageMaker Studio notebooks. These settings are specified as part of <code>DefaultUserSettings</code> when the <code>CreateDomain</code> API is called, and as part of <code>UserSettings</code> when the <code>CreateUserProfile</code> API is called. When <code>SharingSettings</code> is not specified, notebook sharing isn't allowed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SharingSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookOutputOption NotebookOutputOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NotebookOutputOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allowed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// The JupyterServer app settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JupyterServerAppSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceSpec DefaultResourceSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LifecycleConfigArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CodeRepository[] CodeRepositories { get; set; }
	}
	
	/// <summary>
	/// A Git repository that SageMaker automatically displays to users for cloning in the JupyterServer application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodeRepository
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RepositoryUrl { get; set; }
	}
	
	/// <summary>
	/// The KernelGateway app settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KernelGatewayAppSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceSpec DefaultResourceSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomImage[] CustomImages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LifecycleConfigArns { get; set; }
	}
	
	/// <summary>
	/// A custom SageMaker image. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring your own SageMaker image</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomImage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ImageVersionNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppImageConfigName { get; set; }
	}
	
	/// <summary>
	/// The TensorBoard app settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TensorBoardAppSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceSpec DefaultResourceSpec { get; set; }
	}
	
	/// <summary>
	/// A collection of settings that configure user interaction with the <code>RStudioServerPro</code> app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RStudioServerProAppSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RStudioServerProAccessStatus AccessStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RStudioServerProUserGroup UserGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RStudioServerProAccessStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RStudioServerProUserGroup
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		R_STUDIO_ADMIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		R_STUDIO_USER = 1,
	}
	
	/// <summary>
	/// A collection of settings that apply to an <code>RSessionGateway</code> app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RSessionAppSettings
	{
		
		/// <summary>
		/// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceSpec DefaultResourceSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomImage[] CustomImages { get; set; }
	}
	
	/// <summary>
	/// The SageMaker Canvas application settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CanvasAppSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TimeSeriesForecastingSettings TimeSeriesForecastingSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelRegisterSettings ModelRegisterSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceSettings WorkspaceSettings { get; set; }
	}
	
	/// <summary>
	/// Time series forecast settings for the SageMaker Canvas application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeSeriesForecastingSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RStudioServerProAccessStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AmazonForecastRoleArn { get; set; }
	}
	
	/// <summary>
	/// The model registry settings for the SageMaker Canvas application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelRegisterSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RStudioServerProAccessStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CrossAccountModelRegisterRoleArn { get; set; }
	}
	
	/// <summary>
	/// The workspace settings for the SageMaker Canvas application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkspaceSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3ArtifactPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AppNetworkAccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublicInternetOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VpcOnly = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AppSecurityGroupManagement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Service = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Customer = 1,
	}
	
	/// <summary>
	/// A collection of settings that apply to the <code>SageMaker Domain</code>. These settings are specified through the <code>CreateDomain</code> API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RStudioServerProDomainSettings RStudioServerProDomainSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExecutionRoleIdentityConfig ExecutionRoleIdentityConfig { get; set; }
	}
	
	/// <summary>
	/// A collection of settings that configure the <code>RStudioServerPro</code> Domain-level app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RStudioServerProDomainSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainExecutionRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RStudioConnectUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RStudioPackageManagerUrl { get; set; }
		
		/// <summary>
		/// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceSpec DefaultResourceSpec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ExecutionRoleIdentityConfig
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_PROFILE_NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// A collection of settings that apply to spaces created in the Domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DefaultSpaceSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		/// <summary>
		/// The JupyterServer app settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JupyterServerAppSettings JupyterServerAppSettings { get; set; }
		
		/// <summary>
		/// The KernelGateway app settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KernelGatewayAppSettings KernelGatewayAppSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEdgeDeploymentPlanResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEdgeDeploymentPlanRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EdgeDeploymentModelConfig[] ModelConfigs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStage[] Stages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Contains information about the configuration of a model in a deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EdgeDeploymentModelConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelHandle { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgePackagingJobName { get; set; }
	}
	
	/// <summary>
	/// Contains information about a stage in an edge deployment plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeploymentStage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeviceSelectionConfig DeviceSelectionConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EdgeDeploymentConfig DeploymentConfig { get; set; }
	}
	
	/// <summary>
	/// Contains information about the configurations of selected devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceSelectionConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeviceSubsetType DeviceSubsetType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Percentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DeviceNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceNameContains { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DeviceSubsetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENTAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELECTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAMECONTAINS = 2,
	}
	
	/// <summary>
	/// Contains information about the configuration of a deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EdgeDeploymentConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FailureHandlingPolicy FailureHandlingPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FailureHandlingPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLLBACK_ON_FAILURE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO_NOTHING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEdgeDeploymentStageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStage[] Stages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEdgePackagingJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgePackagingJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CompilationJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EdgeOutputConfig OutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEndpointOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEndpointInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfigName { get; set; }
		
		/// <summary>
		/// The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentConfig DeploymentConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeploymentConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BlueGreenUpdatePolicy BlueGreenUpdatePolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoRollbackConfig AutoRollbackConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RollingUpdatePolicy RollingUpdatePolicy { get; set; }
	}
	
	/// <summary>
	/// Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlueGreenUpdatePolicy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrafficRoutingConfig TrafficRoutingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TerminationWaitInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumExecutionTimeoutInSeconds { get; set; }
	}
	
	/// <summary>
	/// Defines the traffic routing strategy during an endpoint deployment to shift traffic from the old fleet to the new fleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrafficRoutingConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrafficRoutingConfigType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int WaitIntervalInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CapacitySize CanarySize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CapacitySize LinearStepSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TrafficRoutingConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_AT_ONCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINEAR = 2,
	}
	
	/// <summary>
	/// <p>Specifies the type and size of the endpoint capacity to activate for a blue/green deployment, a rolling deployment, or a rollback strategy. You can specify your batches as either instance count or the overall percentage or your fleet.</p> <p>For a rollback strategy, if you don't specify the fields in this object, or if you set the <code>Value</code> to 100%, then SageMaker uses a blue/green rollback strategy and rolls all traffic back to the blue fleet.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CapacitySize
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CapacitySizeType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CapacitySizeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_COUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAPACITY_PERCENT = 1,
	}
	
	/// <summary>
	/// Automatic rollback configuration for handling endpoint deployment failures and recovery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoRollbackConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Alarm[] Alarms { get; set; }
	}
	
	/// <summary>
	/// An Amazon CloudWatch alarm configured to monitor metrics on an endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Alarm
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmName { get; set; }
	}
	
	/// <summary>
	/// Specifies a rolling deployment strategy for updating a SageMaker endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RollingUpdatePolicy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CapacitySize MaximumBatchSize { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int WaitIntervalInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumExecutionTimeoutInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CapacitySize RollbackMaximumBatchSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEndpointConfigOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfigArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEndpointConfigInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfigName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariant[] ProductionVariants { get; set; }
		
		/// <summary>
		/// Configuration to control how SageMaker captures inference data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataCaptureConfig DataCaptureConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AsyncInferenceConfig AsyncInferenceConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExplainerConfig ExplainerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariant[] ShadowProductionVariants { get; set; }
	}
	
	/// <summary>
	///  Identifies a model that you want to host and the resources chosen to deploy for hosting it. If you are deploying multiple models, tell SageMaker how to distribute traffic among the models by specifying variant weights. For more information on production variants, check <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html"> Production variants</a>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductionVariant
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VariantName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InitialInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantInstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float InitialVariantWeight { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantAcceleratorType AcceleratorType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantCoreDumpConfig CoreDumpConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantServerlessConfig ServerlessConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSizeInGB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ModelDataDownloadTimeoutInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContainerStartupHealthCheckTimeoutInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableSSMAccess { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProductionVariantAcceleratorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.eia1.medium")]
		ml_eia1_medium = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.eia1.large")]
		ml_eia1_large = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.eia1.xlarge")]
		ml_eia1_xlarge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.eia2.medium")]
		ml_eia2_medium = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.eia2.large")]
		ml_eia2_large = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.eia2.xlarge")]
		ml_eia2_xlarge = 5,
	}
	
	/// <summary>
	/// Specifies configuration for a core dump from the model container when the process crashes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductionVariantCoreDumpConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	/// <summary>
	/// Specifies the serverless configuration for an endpoint variant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductionVariantServerlessConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MemorySizeInMB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxConcurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProvisionedConcurrency { get; set; }
	}
	
	/// <summary>
	/// Configuration to control how SageMaker captures inference data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataCaptureConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableCapture { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InitialSamplingPercentage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CaptureOption[] CaptureOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CaptureContentTypeHeader CaptureContentTypeHeader { get; set; }
	}
	
	/// <summary>
	/// Specifies data Model Monitor will capture.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaptureOption
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CaptureMode CaptureMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CaptureMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Input = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Output = 1,
	}
	
	/// <summary>
	/// Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaptureContentTypeHeader
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CsvContentTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] JsonContentTypes { get; set; }
	}
	
	/// <summary>
	/// Specifies configuration for how an endpoint performs asynchronous inference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AsyncInferenceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AsyncInferenceClientConfig ClientConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AsyncInferenceOutputConfig OutputConfig { get; set; }
	}
	
	/// <summary>
	/// Configures the behavior of the client used by SageMaker to interact with the model container during asynchronous inference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AsyncInferenceClientConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxConcurrentInvocationsPerInstance { get; set; }
	}
	
	/// <summary>
	/// Specifies the configuration for asynchronous inference invocation outputs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AsyncInferenceOutputConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AsyncInferenceNotificationConfig NotificationConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3FailurePath { get; set; }
	}
	
	/// <summary>
	/// Specifies the configuration for notifications of inference results for asynchronous inference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AsyncInferenceNotificationConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SuccessTopic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorTopic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AsyncNotificationTopicTypes[] IncludeInferenceResponseIn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AsyncNotificationTopicTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS_NOTIFICATION_TOPIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_NOTIFICATION_TOPIC = 1,
	}
	
	/// <summary>
	/// A parameter to activate explainers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExplainerConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ClarifyExplainerConfig ClarifyExplainerConfig { get; set; }
	}
	
	/// <summary>
	/// The configuration parameters for the SageMaker Clarify explainer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClarifyExplainerConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EnableExplanations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClarifyInferenceConfig InferenceConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ClarifyShapConfig ShapConfig { get; set; }
	}
	
	/// <summary>
	/// The inference configuration parameter for the model container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClarifyInferenceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FeaturesAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecordCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxPayloadInMB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProbabilityIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LabelIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProbabilityAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LabelAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LabelHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FeatureHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClarifyFeatureType[] FeatureTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ClarifyFeatureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		numerical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		categorical = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 2,
	}
	
	/// <summary>
	/// The configuration for SHAP analysis using SageMaker Clarify Explainer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClarifyShapConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ClarifyShapBaselineConfig ShapBaselineConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfSamples { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseLogit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Seed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClarifyTextConfig TextConfig { get; set; }
	}
	
	/// <summary>
	/// <p>The configuration for the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-feature-attribute-shap-baselines.html">SHAP baseline</a> (also called the background or reference dataset) of the Kernal SHAP algorithm.</p> <note> <ul> <li> <p>The number of records in the baseline data determines the size of the synthetic dataset, which has an impact on latency of explainability requests. For more information, see the <b>Synthetic data</b> of <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html">Configure and create an endpoint</a>.</p> </li> <li> <p> <code>ShapBaseline</code> and <code>ShapBaselineUri</code> are mutually exclusive parameters. One or the either is required to configure a SHAP baseline. </p> </li> </ul> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClarifyShapBaselineConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MimeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShapBaseline { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShapBaselineUri { get; set; }
	}
	
	/// <summary>
	/// A parameter used to configure the SageMaker Clarify explainer to treat text features as text so that explanations are provided for individual units of text. Required only for natural language processing (NLP) explainability. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClarifyTextConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ClarifyTextLanguage Language { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ClarifyTextGranularity Granularity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ClarifyTextLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		af = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sq = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bn = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bg = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ca = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hr = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cs = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		da = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		et = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fi = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		el = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gu = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hu = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="is")]
		_is = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ga = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kn = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ky = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lv = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lt = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lb = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mk = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ml = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mr = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ne = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nb = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pl = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ro = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sa = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sr = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tn = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		si = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sk = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sl = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sv = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tl = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tt = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uk = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ur = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		yo = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lij = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xx = 59,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ClarifyTextGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		token = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sentence = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		paragraph = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateExperimentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateExperimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFeatureGroupResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFeatureGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecordIdentifierFeatureName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventTimeFeatureName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FeatureDefinition[] FeatureDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnlineStoreConfig OnlineStoreConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfflineStoreConfig OfflineStoreConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A list of features. You must include <code>FeatureName</code> and <code>FeatureType</code>. Valid feature <code>FeatureType</code>s are <code>Integral</code>, <code>Fractional</code> and <code>String</code>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FeatureDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FeatureName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureType FeatureType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FeatureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Integral = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fractional = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 2,
	}
	
	/// <summary>
	/// <p>Use this to specify the Amazon Web Services Key Management Service (KMS) Key ID, or <code>KMSKeyId</code>, for at rest data encryption. You can turn <code>OnlineStore</code> on or off by specifying the <code>EnableOnlineStore</code> flag at General Assembly.</p> <p>The default value is <code>False</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnlineStoreConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OnlineStoreSecurityConfig SecurityConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableOnlineStore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TtlDuration TtlDuration { get; set; }
	}
	
	/// <summary>
	/// The security configuration for <code>OnlineStore</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnlineStoreSecurityConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	/// <summary>
	/// Time to live duration, where the record is hard deleted after the expiration time is reached; <code>ExpiresAt</code> = <code>EventTime</code> + <code>TtlDuration</code>. For information on HardDelete, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html">DeleteRecord</a> API in the Amazon SageMaker API Reference guide.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TtlDuration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TtlDurationUnit Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TtlDurationUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minutes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hours = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Days = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weeks = 4,
	}
	
	/// <summary>
	/// <p>The configuration of an <code>OfflineStore</code>.</p> <p>Provide an <code>OfflineStoreConfig</code> in a request to <code>CreateFeatureGroup</code> to create an <code>OfflineStore</code>.</p> <p>To encrypt an <code>OfflineStore</code> using at rest data encryption, specify Amazon Web Services Key Management Service (KMS) key ID, or <code>KMSKeyId</code>, in <code>S3StorageConfig</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfflineStoreConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3StorageConfig S3StorageConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableGlueTableCreation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataCatalogConfig DataCatalogConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TableFormat TableFormat { get; set; }
	}
	
	/// <summary>
	/// The Amazon Simple Storage (Amazon S3) location and and security configuration for <code>OfflineStore</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3StorageConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResolvedOutputS3Uri { get; set; }
	}
	
	/// <summary>
	/// The meta data of the Glue table which serves as data catalog for the <code>OfflineStore</code>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataCatalogConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TableName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Catalog { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Database { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TableFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Glue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Iceberg = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFlowDefinitionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowDefinitionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFlowDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HumanLoopRequestSource HumanLoopRequestSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HumanLoopActivationConfig HumanLoopActivationConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HumanLoopConfig HumanLoopConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FlowDefinitionOutputConfig OutputConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Container for configuring the source of human task requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HumanLoopRequestSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AwsManagedHumanLoopRequestSource AwsManagedHumanLoopRequestSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AwsManagedHumanLoopRequestSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS/Rekognition/DetectModerationLabels/Image/V3")]
		AWS_Rekognition_DetectModerationLabels_Image_V3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS/Textract/AnalyzeDocument/Forms/V1")]
		AWS_Textract_AnalyzeDocument_Forms_V1 = 1,
	}
	
	/// <summary>
	/// Provides information about how and under what conditions SageMaker creates a human loop. If <code>HumanLoopActivationConfig</code> is not given, then all requests go to humans.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HumanLoopActivationConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HumanLoopActivationConditionsConfig HumanLoopActivationConditionsConfig { get; set; }
	}
	
	/// <summary>
	/// Defines under what conditions SageMaker creates a human loop. Used within <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFlowDefinition.html">CreateFlowDefinition</a>. See <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HumanLoopActivationConditionsConfig.html">HumanLoopActivationConditionsConfig</a> for the required format of activation conditions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HumanLoopActivationConditionsConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HumanLoopActivationConditions { get; set; }
	}
	
	/// <summary>
	/// Describes the work to be performed by human workers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HumanLoopConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkteamArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HumanTaskUiArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TaskTitle { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TaskDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TaskCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaskAvailabilityLifetimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaskTimeLimitInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TaskKeywords { get; set; }
		
		/// <summary>
		/// <p>Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. </p> <p>Use one of the following prices for bounding box tasks. Prices are in US dollars and should be based on the complexity of the task; the longer it takes in your initial testing, the more you should offer.</p> <ul> <li> <p>0.036</p> </li> <li> <p>0.048</p> </li> <li> <p>0.060</p> </li> <li> <p>0.072</p> </li> <li> <p>0.120</p> </li> <li> <p>0.240</p> </li> <li> <p>0.360</p> </li> <li> <p>0.480</p> </li> <li> <p>0.600</p> </li> <li> <p>0.720</p> </li> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for image classification, text classification, and custom tasks. Prices are in US dollars.</p> <ul> <li> <p>0.012</p> </li> <li> <p>0.024</p> </li> <li> <p>0.036</p> </li> <li> <p>0.048</p> </li> <li> <p>0.060</p> </li> <li> <p>0.072</p> </li> <li> <p>0.120</p> </li> <li> <p>0.240</p> </li> <li> <p>0.360</p> </li> <li> <p>0.480</p> </li> <li> <p>0.600</p> </li> <li> <p>0.720</p> </li> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for semantic segmentation tasks. Prices are in US dollars.</p> <ul> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for Textract AnalyzeDocument Important Form Key Amazon Augmented AI review tasks. Prices are in US dollars.</p> <ul> <li> <p>2.400 </p> </li> <li> <p>2.280 </p> </li> <li> <p>2.160 </p> </li> <li> <p>2.040 </p> </li> <li> <p>1.920 </p> </li> <li> <p>1.800 </p> </li> <li> <p>1.680 </p> </li> <li> <p>1.560 </p> </li> <li> <p>1.440 </p> </li> <li> <p>1.320 </p> </li> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul> <p>Use one of the following prices for Rekognition DetectModerationLabels Amazon Augmented AI review tasks. Prices are in US dollars.</p> <ul> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul> <p>Use one of the following prices for Amazon Augmented AI custom human review tasks. Prices are in US dollars.</p> <ul> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PublicWorkforceTaskPrice PublicWorkforceTaskPrice { get; set; }
	}
	
	/// <summary>
	/// <p>Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. </p> <p>Use one of the following prices for bounding box tasks. Prices are in US dollars and should be based on the complexity of the task; the longer it takes in your initial testing, the more you should offer.</p> <ul> <li> <p>0.036</p> </li> <li> <p>0.048</p> </li> <li> <p>0.060</p> </li> <li> <p>0.072</p> </li> <li> <p>0.120</p> </li> <li> <p>0.240</p> </li> <li> <p>0.360</p> </li> <li> <p>0.480</p> </li> <li> <p>0.600</p> </li> <li> <p>0.720</p> </li> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for image classification, text classification, and custom tasks. Prices are in US dollars.</p> <ul> <li> <p>0.012</p> </li> <li> <p>0.024</p> </li> <li> <p>0.036</p> </li> <li> <p>0.048</p> </li> <li> <p>0.060</p> </li> <li> <p>0.072</p> </li> <li> <p>0.120</p> </li> <li> <p>0.240</p> </li> <li> <p>0.360</p> </li> <li> <p>0.480</p> </li> <li> <p>0.600</p> </li> <li> <p>0.720</p> </li> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for semantic segmentation tasks. Prices are in US dollars.</p> <ul> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for Textract AnalyzeDocument Important Form Key Amazon Augmented AI review tasks. Prices are in US dollars.</p> <ul> <li> <p>2.400 </p> </li> <li> <p>2.280 </p> </li> <li> <p>2.160 </p> </li> <li> <p>2.040 </p> </li> <li> <p>1.920 </p> </li> <li> <p>1.800 </p> </li> <li> <p>1.680 </p> </li> <li> <p>1.560 </p> </li> <li> <p>1.440 </p> </li> <li> <p>1.320 </p> </li> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul> <p>Use one of the following prices for Rekognition DetectModerationLabels Amazon Augmented AI review tasks. Prices are in US dollars.</p> <ul> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul> <p>Use one of the following prices for Amazon Augmented AI custom human review tasks. Prices are in US dollars.</p> <ul> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicWorkforceTaskPrice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public USD AmountInUsd { get; set; }
	}
	
	/// <summary>
	/// Represents an amount of money in United States dollars.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class USD
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Dollars { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Cents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TenthFractionsOfACent { get; set; }
	}
	
	/// <summary>
	/// Contains information about where human output will be stored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlowDefinitionOutputConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHubResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHubRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HubSearchKeywords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HubS3StorageConfig S3StorageConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The Amazon S3 storage configuration of a hub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HubS3StorageConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHumanTaskUiResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HumanTaskUiArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHumanTaskUiRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HumanTaskUiName { get; set; }
		
		/// <summary>
		/// The Liquid template for the worker user interface.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UiTemplate UiTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The Liquid template for the worker user interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UiTemplate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHyperParameterTuningJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HyperParameterTuningJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateHyperParameterTuningJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HyperParameterTuningJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobConfig HyperParameterTuningJobConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTrainingJobDefinition TrainingJobDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTrainingJobDefinition[] TrainingJobDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobWarmStartConfig WarmStartConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Autotune Autotune { get; set; }
	}
	
	/// <summary>
	/// Configures a hyperparameter tuning job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterTuningJobConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobStrategyType Strategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobStrategyConfig StrategyConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobObjective HyperParameterTuningJobObjective { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceLimits ResourceLimits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterRanges ParameterRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingJobEarlyStoppingType TrainingJobEarlyStoppingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TuningJobCompletionCriteria TuningJobCompletionCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RandomSeed { get; set; }
	}
	
	/// <summary>
	/// The strategy hyperparameter tuning uses to find the best combination of hyperparameters for your model. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HyperParameterTuningJobStrategyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bayesian = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Random = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hyperband = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Grid = 3,
	}
	
	/// <summary>
	/// The configuration for a training job launched by a hyperparameter tuning job. Choose <code>Bayesian</code> for Bayesian optimization, and <code>Random</code> for random search optimization. For more advanced use cases, use <code>Hyperband</code>, which evaluates objective metrics for training jobs after every epoch. For more information about strategies, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html">How Hyperparameter Tuning Works</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterTuningJobStrategyConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HyperbandStrategyConfig HyperbandStrategyConfig { get; set; }
	}
	
	/// <summary>
	/// The configuration for <code>Hyperband</code>, a multi-fidelity based hyperparameter tuning strategy. <code>Hyperband</code> uses the final and intermediate results of a training job to dynamically allocate resources to utilized hyperparameter configurations while automatically stopping under-performing configurations. This parameter should be provided only if <code>Hyperband</code> is selected as the <code>StrategyConfig</code> under the <code>HyperParameterTuningJobConfig</code> API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperbandStrategyConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinResource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResource { get; set; }
	}
	
	/// <summary>
	/// Specifies the maximum number of training jobs and parallel training jobs that a hyperparameter tuning job can launch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceLimits
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxNumberOfTrainingJobs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxParallelTrainingJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRuntimeInSeconds { get; set; }
	}
	
	/// <summary>
	/// <p>Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job.</p> <note> <p>The maximum number of items specified for <code>Array Members</code> refers to the maximum number of hyperparameters for each range and also the maximum for the hyperparameter tuning job itself. That is, the sum of the number of hyperparameters for all the ranges can't exceed the maximum number specified.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParameterRanges
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IntegerParameterRange[] IntegerParameterRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContinuousParameterRange[] ContinuousParameterRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CategoricalParameterRange[] CategoricalParameterRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoParameter[] AutoParameters { get; set; }
	}
	
	/// <summary>
	/// For a hyperparameter of the integer type, specifies the range that a hyperparameter tuning job searches.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntegerParameterRange
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MinValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MaxValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterScalingType ScalingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HyperParameterScalingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linear = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Logarithmic = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReverseLogarithmic = 3,
	}
	
	/// <summary>
	/// A list of continuous hyperparameters to tune.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContinuousParameterRange
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MinValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MaxValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterScalingType ScalingType { get; set; }
	}
	
	/// <summary>
	/// A list of categorical hyperparameters to tune.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoricalParameterRange
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// The name and an example value of the hyperparameter that you want to use in Autotune. If Automatic model tuning (AMT) determines that your hyperparameter is eligible for Autotune, an optimal hyperparameter range is selected for you.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ValueHint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TrainingJobEarlyStoppingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Off = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Auto = 1,
	}
	
	/// <summary>
	/// The job completion criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TuningJobCompletionCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float TargetObjectiveMetricValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BestObjectiveNotImproving BestObjectiveNotImproving { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConvergenceDetected ConvergenceDetected { get; set; }
	}
	
	/// <summary>
	/// A structure that keeps track of which training jobs launched by your hyperparameter tuning job are not improving model performance as evaluated against an objective function.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BestObjectiveNotImproving
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxNumberOfTrainingJobsNotImproving { get; set; }
	}
	
	/// <summary>
	/// A flag to indicating that automatic model tuning (AMT) has detected model convergence, defined as a lack of significant improvement (1% or less) against an objective metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConvergenceDetected
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CompleteOnConvergence CompleteOnConvergence { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CompleteOnConvergence
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	/// <summary>
	/// Defines the training jobs launched by a hyperparameter tuning job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterTrainingJobDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DefinitionName { get; set; }
		
		/// <summary>
		/// Defines the objective metric for a hyperparameter tuning job. Hyperparameter tuning uses the value of this metric to evaluate the training jobs it launches, and returns the training job that results in either the highest or lowest value for this metric, depending on the value you specify for the <code>Type</code> parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobObjective TuningObjective { get; set; }
		
		/// <summary>
		/// <p>Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job.</p> <note> <p>The maximum number of items specified for <code>Array Members</code> refers to the maximum number of hyperparameters for each range and also the maximum for the hyperparameter tuning job itself. That is, the sum of the number of hyperparameters for all the ranges can't exceed the maximum number specified.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ParameterRanges HyperParameterRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameters StaticHyperParameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterAlgorithmSpecification AlgorithmSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Channel[] InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StoppingCondition StoppingCondition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableNetworkIsolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableInterContainerTrafficEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableManagedSpotTraining { get; set; }
		
		/// <summary>
		/// Contains information about the output location for managed spot training checkpoint data. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CheckpointConfig CheckpointConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetryStrategy RetryStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningResourceConfig HyperParameterTuningResourceConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTrainingJobEnvironmentMap Environment { get; set; }
	}
	
	/// <summary>
	/// Specifies which training algorithm to use for training jobs that a hyperparameter tuning job launches and the metrics to monitor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterAlgorithmSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrainingImage { get; set; }
		
		/// <summary>
		/// <p>The training input mode that the algorithm supports. For more information about input modes, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p> <p> <b>Pipe mode</b> </p> <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly from Amazon S3 to the container.</p> <p> <b>File mode</b> </p> <p>If an algorithm supports <code>File</code> mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container.</p> <p>You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any.</p> <p>For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training.</p> <p> <b>FastFile mode</b> </p> <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk.</p> <p> <code>FastFile</code> mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.</p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrainingInputMode TrainingInputMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlgorithmName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDefinition[] MetricDefinitions { get; set; }
	}
	
	/// <summary>
	/// Contains information about the output location for managed spot training checkpoint data. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckpointConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalPath { get; set; }
	}
	
	/// <summary>
	/// The retry strategy to use when a training job fails due to an <code>InternalServerError</code>. <code>RetryStrategy</code> is specified as part of the <code>CreateTrainingJob</code> and <code>CreateHyperParameterTuningJob</code> requests. You can add the <code>StoppingCondition</code> parameter to the request to limit the training time for the complete job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetryStrategy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaximumRetryAttempts { get; set; }
	}
	
	/// <summary>
	/// <p>The configuration of resources, including compute instances and storage volumes for use in training jobs launched by hyperparameter tuning jobs. <code>HyperParameterTuningResourceConfig</code> is similar to <code>ResourceConfig</code>, but has the additional <code>InstanceConfigs</code> and <code>AllocationStrategy</code> fields to allow for flexible instance management. Specify one or more instance types, count, and the allocation strategy for instance selection.</p> <note> <p> <code>HyperParameterTuningResourceConfig</code> supports the capabilities of <code>ResourceConfig</code> with the exception of <code>KeepAlivePeriodInSeconds</code>. Hyperparameter tuning jobs use warm pools by default, which reuse clusters between training jobs.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterTuningResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingInstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSizeInGB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningAllocationStrategy AllocationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningInstanceConfig[] InstanceConfigs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HyperParameterTuningAllocationStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Prioritized = 0,
	}
	
	/// <summary>
	/// The configuration for hyperparameter tuning resources for use in training jobs launched by the tuning job. These resources include compute instances and storage volumes. Specify one or more compute instance configurations and allocation strategies to select resources (optional).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterTuningInstanceConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrainingInstanceType InstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstanceCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int VolumeSizeInGB { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterTrainingJobEnvironmentMap
	{
	}
	
	/// <summary>
	/// <p>Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.</p> <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.</p> <note> <p>All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterTuningJobWarmStartConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ParentHyperParameterTuningJob[] ParentHyperParameterTuningJobs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobWarmStartType WarmStartType { get; set; }
	}
	
	/// <summary>
	/// A previously completed or stopped hyperparameter tuning job to be used as a starting point for a new hyperparameter tuning job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParentHyperParameterTuningJob
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HyperParameterTuningJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HyperParameterTuningJobWarmStartType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IdenticalDataAndAlgorithm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TransferLearning = 1,
	}
	
	/// <summary>
	/// <p>A flag to indicate if you want to use Autotune to automatically find optimal values for the following fields:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-ParameterRanges">ParameterRanges</a>: The names and ranges of parameters that a hyperparameter tuning job can optimize.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ResourceLimits.html">ResourceLimits</a>: The maximum resources that can be used for a training job. These resources include the maximum number of training jobs, the maximum runtime of a tuning job, and the maximum number of training jobs to run at the same time.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-TrainingJobEarlyStoppingType">TrainingJobEarlyStoppingType</a>: A flag that specifies whether or not to use early stopping for training jobs launched by a hyperparameter tuning job.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-RetryStrategy">RetryStrategy</a>: The number of times to retry a training job.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html">Strategy</a>: Specifies how hyperparameter tuning chooses the combinations of hyperparameter values to use for the training jobs that it launches.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ConvergenceDetected.html">ConvergenceDetected</a>: A flag to indicate that Automatic model tuning (AMT) has detected model convergence.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Autotune
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutotuneMode Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutotuneMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateImageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateImageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateImageVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageVersionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateImageVersionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BaseImage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Aliases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VendorGuidance VendorGuidance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobType JobType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MLFramework { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProgrammingLang { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Processor Processor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Horovod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReleaseNotes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VendorGuidance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_PROVIDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TO_BE_ARCHIVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum JobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAINING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFERENCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTEBOOK_KERNEL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Processor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GPU = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInferenceExperimentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InferenceExperimentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInferenceExperimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentSchedule Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelVariantConfig[] ModelVariants { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentDataStorageConfig DataStorageConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ShadowModeConfig ShadowModeConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InferenceExperimentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ShadowMode = 0,
	}
	
	/// <summary>
	/// <p>The start and end times of an inference experiment.</p> <p>The maximum duration that you can set for an inference experiment is 30 days.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InferenceExperimentSchedule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	/// <summary>
	/// Contains information about the deployment options of a model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelVariantConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VariantName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelInfrastructureConfig InfrastructureConfig { get; set; }
	}
	
	/// <summary>
	/// The configuration for the infrastructure that the model will be deployed to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelInfrastructureConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelInfrastructureType InfrastructureType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RealTimeInferenceConfig RealTimeInferenceConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelInfrastructureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RealTimeInference = 0,
	}
	
	/// <summary>
	/// The infrastructure configuration for deploying the model to a real-time inference endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RealTimeInferenceConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceType InstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstanceCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t2.medium")]
		ml_t2_medium = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t2.large")]
		ml_t2_large = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t2.xlarge")]
		ml_t2_xlarge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t2.2xlarge")]
		ml_t2_2xlarge = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t3.medium")]
		ml_t3_medium = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t3.large")]
		ml_t3_large = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t3.xlarge")]
		ml_t3_xlarge = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.t3.2xlarge")]
		ml_t3_2xlarge = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.xlarge")]
		ml_m4_xlarge = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.2xlarge")]
		ml_m4_2xlarge = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.4xlarge")]
		ml_m4_4xlarge = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.10xlarge")]
		ml_m4_10xlarge = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m4.16xlarge")]
		ml_m4_16xlarge = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.xlarge")]
		ml_m5_xlarge = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.2xlarge")]
		ml_m5_2xlarge = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.4xlarge")]
		ml_m5_4xlarge = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.12xlarge")]
		ml_m5_12xlarge = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5.24xlarge")]
		ml_m5_24xlarge = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.large")]
		ml_m5d_large = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.xlarge")]
		ml_m5d_xlarge = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.2xlarge")]
		ml_m5d_2xlarge = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.4xlarge")]
		ml_m5d_4xlarge = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.8xlarge")]
		ml_m5d_8xlarge = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.12xlarge")]
		ml_m5d_12xlarge = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.16xlarge")]
		ml_m5d_16xlarge = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.m5d.24xlarge")]
		ml_m5d_24xlarge = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.xlarge")]
		ml_c4_xlarge = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.2xlarge")]
		ml_c4_2xlarge = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.4xlarge")]
		ml_c4_4xlarge = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c4.8xlarge")]
		ml_c4_8xlarge = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.xlarge")]
		ml_c5_xlarge = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.2xlarge")]
		ml_c5_2xlarge = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.4xlarge")]
		ml_c5_4xlarge = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.9xlarge")]
		ml_c5_9xlarge = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5.18xlarge")]
		ml_c5_18xlarge = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5d.xlarge")]
		ml_c5d_xlarge = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5d.2xlarge")]
		ml_c5d_2xlarge = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5d.4xlarge")]
		ml_c5d_4xlarge = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5d.9xlarge")]
		ml_c5d_9xlarge = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.c5d.18xlarge")]
		ml_c5d_18xlarge = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.xlarge")]
		ml_p2_xlarge = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.8xlarge")]
		ml_p2_8xlarge = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p2.16xlarge")]
		ml_p2_16xlarge = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.2xlarge")]
		ml_p3_2xlarge = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.8xlarge")]
		ml_p3_8xlarge = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3.16xlarge")]
		ml_p3_16xlarge = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p3dn.24xlarge")]
		ml_p3dn_24xlarge = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.xlarge")]
		ml_g4dn_xlarge = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.2xlarge")]
		ml_g4dn_2xlarge = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.4xlarge")]
		ml_g4dn_4xlarge = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.8xlarge")]
		ml_g4dn_8xlarge = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.12xlarge")]
		ml_g4dn_12xlarge = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g4dn.16xlarge")]
		ml_g4dn_16xlarge = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.large")]
		ml_r5_large = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.xlarge")]
		ml_r5_xlarge = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.2xlarge")]
		ml_r5_2xlarge = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.4xlarge")]
		ml_r5_4xlarge = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.8xlarge")]
		ml_r5_8xlarge = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.12xlarge")]
		ml_r5_12xlarge = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.16xlarge")]
		ml_r5_16xlarge = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.r5.24xlarge")]
		ml_r5_24xlarge = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.xlarge")]
		ml_g5_xlarge = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.2xlarge")]
		ml_g5_2xlarge = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.4xlarge")]
		ml_g5_4xlarge = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.8xlarge")]
		ml_g5_8xlarge = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.16xlarge")]
		ml_g5_16xlarge = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.12xlarge")]
		ml_g5_12xlarge = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.24xlarge")]
		ml_g5_24xlarge = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.g5.48xlarge")]
		ml_g5_48xlarge = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.inf1.xlarge")]
		ml_inf1_xlarge = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.inf1.2xlarge")]
		ml_inf1_2xlarge = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.inf1.6xlarge")]
		ml_inf1_6xlarge = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.inf1.24xlarge")]
		ml_inf1_24xlarge = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p4d.24xlarge")]
		ml_p4d_24xlarge = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.p4de.24xlarge")]
		ml_p4de_24xlarge = 74,
	}
	
	/// <summary>
	/// The Amazon S3 location and configuration for storing inference request and response data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InferenceExperimentDataStorageConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKey { get; set; }
		
		/// <summary>
		/// Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptureContentTypeHeader ContentType { get; set; }
	}
	
	/// <summary>
	///  The configuration of <code>ShadowMode</code> inference experiment type, which specifies a production variant to take all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant it also specifies the percentage of requests that Amazon SageMaker replicates. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShadowModeConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceModelVariantName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ShadowModelVariantConfig[] ShadowModelVariants { get; set; }
	}
	
	/// <summary>
	/// The name and sampling percentage of a shadow variant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShadowModelVariantConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ShadowModelVariantName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SamplingPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInferenceRecommendationsJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInferenceRecommendationsJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobType JobType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobInputConfig InputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobStoppingConditions StoppingConditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobOutputConfig OutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RecommendationJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Advanced = 1,
	}
	
	/// <summary>
	/// The input configuration of the recommendation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecommendationJobInputConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobDurationInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficPattern TrafficPattern { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobResourceLimit ResourceLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointInputConfiguration[] EndpointConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobContainerConfig ContainerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointInfo[] Endpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobVpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
	}
	
	/// <summary>
	/// Defines the traffic pattern of the load test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrafficPattern
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficType TrafficType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase[] Phases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Stairs Stairs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TrafficType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHASES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAIRS = 1,
	}
	
	/// <summary>
	/// Defines the traffic pattern.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Phase
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InitialNumberOfUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SpawnRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationInSeconds { get; set; }
	}
	
	/// <summary>
	/// <p>Defines the stairs traffic pattern for an Inference Recommender load test. This pattern type consists of multiple steps where the number of users increases at each step.</p> <p>Specify either the stairs or phases traffic pattern.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Stairs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfSteps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UsersPerStep { get; set; }
	}
	
	/// <summary>
	/// Specifies the maximum number of jobs that can run in parallel and the maximum number of jobs that can run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecommendationJobResourceLimit
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxNumberOfTests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxParallelOfTests { get; set; }
	}
	
	/// <summary>
	/// The endpoint configuration for the load test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointInputConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantInstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InferenceSpecificationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentParameterRanges EnvironmentParameterRanges { get; set; }
		
		/// <summary>
		/// Specifies the serverless configuration for an endpoint variant.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantServerlessConfig ServerlessConfig { get; set; }
	}
	
	/// <summary>
	/// Specifies the range of environment parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentParameterRanges
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CategoricalParameter[] CategoricalParameterRanges { get; set; }
	}
	
	/// <summary>
	/// Environment parameters you want to benchmark your load test against.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoricalParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Value { get; set; }
	}
	
	/// <summary>
	/// Specifies mandatory fields for running an Inference Recommender job directly in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html">CreateInferenceRecommendationsJob</a> API. The fields specified in <code>ContainerConfig</code> override the corresponding fields in the model package. Use <code>ContainerConfig</code> if you want to specify these fields for the recommendation job but don't want to edit them in your model package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecommendationJobContainerConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Task { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Framework { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobPayloadConfig PayloadConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NearestModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SupportedInstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataInputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobSupportedEndpointType SupportedEndpointType { get; set; }
	}
	
	/// <summary>
	/// The configuration for the payload for a recommendation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecommendationJobPayloadConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SamplePayloadUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SupportedContentTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RecommendationJobSupportedEndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RealTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Serverless = 1,
	}
	
	/// <summary>
	/// Details about a customer endpoint that was compared in an Inference Recommender job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
	}
	
	/// <summary>
	/// Inference Recommender provisions SageMaker endpoints with access to VPC in the inference recommendation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecommendationJobVpcConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Subnets { get; set; }
	}
	
	/// <summary>
	/// Specifies conditions for stopping a job. When a job reaches a stopping condition limit, SageMaker ends the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecommendationJobStoppingConditions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxInvocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelLatencyThreshold[] ModelLatencyThresholds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FlatInvocations FlatInvocations { get; set; }
	}
	
	/// <summary>
	/// The model latency threshold.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelLatencyThreshold
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Percentile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ValueInMilliseconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FlatInvocations
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Continue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stop = 1,
	}
	
	/// <summary>
	/// Provides information about the output configuration for the compiled model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecommendationJobOutputConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobCompiledOutputConfig CompiledOutputConfig { get; set; }
	}
	
	/// <summary>
	/// Provides information about the output configuration for the compiled model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecommendationJobCompiledOutputConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLabelingJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LabelingJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLabelingJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LabelingJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LabelAttributeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobInputConfig InputConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobOutputConfig OutputConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LabelCategoryConfigS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobStoppingConditions StoppingConditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobAlgorithmsConfig LabelingJobAlgorithmsConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HumanTaskConfig HumanTaskConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Input configuration information for a labeling job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelingJobInputConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobDataSource DataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobDataAttributes DataAttributes { get; set; }
	}
	
	/// <summary>
	/// <p>Provides information about the location of input data.</p> <p>You must specify at least one of the following: <code>S3DataSource</code> or <code>SnsDataSource</code>.</p> <p>Use <code>SnsDataSource</code> to specify an SNS input topic for a streaming labeling job. If you do not specify and SNS input topic ARN, Ground Truth will create a one-time labeling job.</p> <p>Use <code>S3DataSource</code> to specify an input manifest file for both streaming and one-time labeling jobs. Adding an <code>S3DataSource</code> is optional if you use <code>SnsDataSource</code> to create a streaming labeling job.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelingJobDataSource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobS3DataSource S3DataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobSnsDataSource SnsDataSource { get; set; }
	}
	
	/// <summary>
	/// The Amazon S3 location of the input data objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelingJobS3DataSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ManifestS3Uri { get; set; }
	}
	
	/// <summary>
	/// An Amazon SNS data source used for streaming labeling jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelingJobSnsDataSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
	}
	
	/// <summary>
	/// Attributes of the data specified by the customer. Use these to describe the data to be labeled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelingJobDataAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContentClassifier[] ContentClassifiers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContentClassifier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreeOfPersonallyIdentifiableInformation = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreeOfAdultContent = 1,
	}
	
	/// <summary>
	/// Output configuration information for a labeling job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelingJobOutputConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
	}
	
	/// <summary>
	/// <p>A set of conditions for stopping a labeling job. If any of the conditions are met, the job is automatically stopped. You can use these conditions to control the cost of data labeling.</p> <note> <p>Labeling jobs fail after 30 days with an appropriate client error message.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelingJobStoppingConditions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxHumanLabeledObjectCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxPercentageOfInputDatasetLabeled { get; set; }
	}
	
	/// <summary>
	/// Provides configuration information for auto-labeling of your data objects. A <code>LabelingJobAlgorithmsConfig</code> object must be supplied in order to use auto-labeling.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelingJobAlgorithmsConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LabelingJobAlgorithmSpecificationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InitialActiveLearningModelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobResourceConfig LabelingJobResourceConfig { get; set; }
	}
	
	/// <summary>
	/// Configure encryption on the storage volume attached to the ML compute instance used to run automated data labeling model training and inference. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelingJobResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		/// <summary>
		/// Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
	}
	
	/// <summary>
	/// Information required for human workers to complete a labeling task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HumanTaskConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkteamArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UiConfig UiConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PreHumanTaskLambdaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TaskKeywords { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TaskTitle { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TaskDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int NumberOfHumanWorkersPerDataObject { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TaskTimeLimitInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaskAvailabilityLifetimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxConcurrentTaskCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AnnotationConsolidationConfig AnnotationConsolidationConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PublicWorkforceTaskPrice PublicWorkforceTaskPrice { get; set; }
	}
	
	/// <summary>
	/// <p>Provided configuration information for the worker UI for a labeling job. Provide either <code>HumanTaskUiArn</code> or <code>UiTemplateS3Uri</code>.</p> <p>For named entity recognition, 3D point cloud and video frame labeling jobs, use <code>HumanTaskUiArn</code>.</p> <p>For all other Ground Truth built-in task types and custom task types, use <code>UiTemplateS3Uri</code> to specify the location of a worker task template in Amazon S3.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UiConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UiTemplateS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HumanTaskUiArn { get; set; }
	}
	
	/// <summary>
	/// Configures how labels are consolidated across human workers and processes output data. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnnotationConsolidationConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AnnotationConsolidationLambdaArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainerDefinition PrimaryContainer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainerDefinition[] Containers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceExecutionConfig InferenceExecutionConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableNetworkIsolation { get; set; }
	}
	
	/// <summary>
	/// Describes the container, as part of model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContainerHostname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImageConfig ImageConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainerMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelDataUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentMap Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InferenceSpecificationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultiModelConfig MultiModelConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelDataSource ModelDataSource { get; set; }
	}
	
	/// <summary>
	/// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RepositoryAccessMode RepositoryAccessMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RepositoryAuthConfig RepositoryAuthConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RepositoryAccessMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Platform = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vpc = 1,
	}
	
	/// <summary>
	/// Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified <code>Vpc</code> as the value for the <code>RepositoryAccessMode</code> field of the <code>ImageConfig</code> object that you passed to a call to <code>CreateModel</code> and the private Docker registry where the model image is hosted requires authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryAuthConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RepositoryCredentialsProviderArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContainerMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SingleModel = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MultiModel = 1,
	}
	
	/// <summary>
	/// Specifies additional configuration for hosting multi-model endpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiModelConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCacheSetting ModelCacheSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelCacheSetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// Specifies the location of ML model data to deploy. If specified, you must specify one and only one of the available data sources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelDataSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3ModelDataSource S3DataSource { get; set; }
	}
	
	/// <summary>
	/// Specifies the S3 location of ML model data to deploy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3ModelDataSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3ModelDataType S3DataType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CompressionType CompressionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum S3ModelDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3Prefix = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3Object = 1,
	}
	
	/// <summary>
	/// Specifies details about how containers in a multi-container endpoint are run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InferenceExecutionConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InferenceExecutionMode Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InferenceExecutionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Serial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Direct = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelBiasJobDefinitionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelBiasJobDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelBiasBaselineConfig ModelBiasBaselineConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelBiasAppSpecification ModelBiasAppSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelBiasJobInput ModelBiasJobInput { get; set; }
		
		/// <summary>
		/// The output configuration for monitoring jobs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringOutputConfig ModelBiasJobOutputConfig { get; set; }
		
		/// <summary>
		/// Identifies the resources to deploy for a monitoring job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringResources JobResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringNetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// A time limit for how long the monitoring job is allowed to run before stopping.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringStoppingCondition StoppingCondition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The configuration for a baseline model bias job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelBiasBaselineConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseliningJobName { get; set; }
		
		/// <summary>
		/// The constraints resource for a monitoring job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringConstraintsResource ConstraintsResource { get; set; }
	}
	
	/// <summary>
	/// Docker container image configuration object for the model bias job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelBiasAppSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageUri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringEnvironmentMap Environment { get; set; }
	}
	
	/// <summary>
	/// Inputs for the model bias job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelBiasJobInput
	{
		
		/// <summary>
		/// Input object for the endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EndpointInput EndpointInput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchTransformInput BatchTransformInput { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringGroundTruthS3Input GroundTruthS3Input { get; set; }
	}
	
	/// <summary>
	/// The ground truth labels for the dataset used for the monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringGroundTruthS3Input
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelCardResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelCardRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCardSecurityConfig SecurityConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelCardStatus ModelCardStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Configure the security settings to protect model card data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelCardSecurityConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelCardStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Draft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingReview = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approved = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Archived = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelCardExportJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardExportJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelCardExportJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ModelCardVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardExportJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelCardExportOutputConfig OutputConfig { get; set; }
	}
	
	/// <summary>
	/// Configure the export output details for an Amazon SageMaker Model Card.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelCardExportOutputConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelExplainabilityJobDefinitionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelExplainabilityJobDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelExplainabilityBaselineConfig ModelExplainabilityBaselineConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelExplainabilityAppSpecification ModelExplainabilityAppSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelExplainabilityJobInput ModelExplainabilityJobInput { get; set; }
		
		/// <summary>
		/// The output configuration for monitoring jobs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringOutputConfig ModelExplainabilityJobOutputConfig { get; set; }
		
		/// <summary>
		/// Identifies the resources to deploy for a monitoring job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringResources JobResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringNetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// A time limit for how long the monitoring job is allowed to run before stopping.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringStoppingCondition StoppingCondition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The configuration for a baseline model explainability job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelExplainabilityBaselineConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseliningJobName { get; set; }
		
		/// <summary>
		/// The constraints resource for a monitoring job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringConstraintsResource ConstraintsResource { get; set; }
	}
	
	/// <summary>
	/// Docker container image configuration object for the model explainability job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelExplainabilityAppSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageUri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringEnvironmentMap Environment { get; set; }
	}
	
	/// <summary>
	/// Inputs for the model explainability job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelExplainabilityJobInput
	{
		
		/// <summary>
		/// Input object for the endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EndpointInput EndpointInput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchTransformInput BatchTransformInput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelPackageOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelPackageInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceSpecification InferenceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageValidationSpecification ValidationSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceAlgorithmSpecification SourceAlgorithmSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CertifyForMarketplace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelApprovalStatus ModelApprovalStatus { get; set; }
		
		/// <summary>
		/// Metadata properties of the tracking entity, trial, or trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetadataProperties MetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelMetrics ModelMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerMetadataMap CustomerMetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DriftCheckBaselines DriftCheckBaselines { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Task { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SamplePayloadUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdditionalInferenceSpecificationDefinition[] AdditionalInferenceSpecifications { get; set; }
	}
	
	/// <summary>
	/// Specifies batch transform jobs that SageMaker runs to validate your model package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelPackageValidationSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ValidationRole { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageValidationProfile[] ValidationProfiles { get; set; }
	}
	
	/// <summary>
	/// <p>Contains data, such as the inputs and targeted instance types that are used in the process of validating the model package.</p> <p>The data provided in the validation profile is made available to your buyers on Amazon Web Services Marketplace.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelPackageValidationProfile
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransformJobDefinition TransformJobDefinition { get; set; }
	}
	
	/// <summary>
	/// A list of algorithms that were used to create a model package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceAlgorithmSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SourceAlgorithm[] SourceAlgorithms { get; set; }
	}
	
	/// <summary>
	/// Specifies an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in Amazon Web Services Marketplace that you are subscribed to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceAlgorithm
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelDataUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlgorithmName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelApprovalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rejected = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingManualApproval = 2,
	}
	
	/// <summary>
	/// Contains metrics captured from a model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelMetrics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ModelQuality ModelQuality { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelDataQuality ModelDataQuality { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Bias Bias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Explainability Explainability { get; set; }
	}
	
	/// <summary>
	/// Model quality statistics and constraints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelQuality
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource Statistics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource Constraints { get; set; }
	}
	
	/// <summary>
	/// Details about the metrics source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricsSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentDigest { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
	}
	
	/// <summary>
	/// Data quality constraints and statistics for a model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelDataQuality
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource Statistics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource Constraints { get; set; }
	}
	
	/// <summary>
	/// Contains bias metrics for a model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Bias
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource Report { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource PreTrainingReport { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource PostTrainingReport { get; set; }
	}
	
	/// <summary>
	/// Contains explainability metrics for a model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Explainability
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource Report { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerMetadataMap
	{
	}
	
	/// <summary>
	/// Represents the drift check baselines that can be used when the model monitor is set using the model package. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DriftCheckBaselines
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DriftCheckBias Bias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DriftCheckExplainability Explainability { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DriftCheckModelQuality ModelQuality { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DriftCheckModelDataQuality ModelDataQuality { get; set; }
	}
	
	/// <summary>
	/// Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DriftCheckBias
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FileSource ConfigFile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource PreTrainingConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource PostTrainingConstraints { get; set; }
	}
	
	/// <summary>
	/// Contains details regarding the file source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileSource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentDigest { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
	}
	
	/// <summary>
	/// Represents the drift check explainability baselines that can be used when the model monitor is set using the model package. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DriftCheckExplainability
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource Constraints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FileSource ConfigFile { get; set; }
	}
	
	/// <summary>
	/// Represents the drift check model quality baselines that can be used when the model monitor is set using the model package. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DriftCheckModelQuality
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource Statistics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource Constraints { get; set; }
	}
	
	/// <summary>
	/// Represents the drift check data quality baselines that can be used when the model monitor is set using the model package. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DriftCheckModelDataQuality
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource Statistics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsSource Constraints { get; set; }
	}
	
	/// <summary>
	/// A structure of additional Inference Specification. Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdditionalInferenceSpecificationDefinition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageContainerDefinition[] Containers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransformInstanceType[] SupportedTransformInstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantInstanceType[] SupportedRealtimeInferenceInstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SupportedContentTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SupportedResponseMIMETypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelPackageGroupOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelPackageGroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelQualityJobDefinitionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelQualityJobDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelQualityBaselineConfig ModelQualityBaselineConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelQualityAppSpecification ModelQualityAppSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelQualityJobInput ModelQualityJobInput { get; set; }
		
		/// <summary>
		/// The output configuration for monitoring jobs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringOutputConfig ModelQualityJobOutputConfig { get; set; }
		
		/// <summary>
		/// Identifies the resources to deploy for a monitoring job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringResources JobResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringNetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// A time limit for how long the monitoring job is allowed to run before stopping.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringStoppingCondition StoppingCondition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelQualityBaselineConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseliningJobName { get; set; }
		
		/// <summary>
		/// The constraints resource for a monitoring job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringConstraintsResource ConstraintsResource { get; set; }
	}
	
	/// <summary>
	/// Container image configuration object for the monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelQualityAppSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ContainerEntrypoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ContainerArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecordPreprocessorSourceUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostAnalyticsProcessorSourceUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProblemType ProblemType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringEnvironmentMap Environment { get; set; }
	}
	
	/// <summary>
	/// The input for the model quality monitoring job. Currently endponts are supported for input for model quality monitoring jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelQualityJobInput
	{
		
		/// <summary>
		/// Input object for the endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EndpointInput EndpointInput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchTransformInput BatchTransformInput { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringGroundTruthS3Input GroundTruthS3Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMonitoringScheduleResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMonitoringScheduleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringScheduleConfig MonitoringScheduleConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Configures the monitoring schedule and defines the monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringScheduleConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduleConfig ScheduleConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringJobDefinition MonitoringJobDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringJobDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringType MonitoringType { get; set; }
	}
	
	/// <summary>
	/// Configuration details about the monitoring schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleExpression { get; set; }
	}
	
	/// <summary>
	/// Defines the monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringJobDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringBaselineConfig BaselineConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringInput[] MonitoringInputs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringOutputConfig MonitoringOutputConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringResources MonitoringResources { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringAppSpecification MonitoringAppSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringStoppingCondition StoppingCondition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringEnvironmentMap Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringBaselineConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseliningJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringConstraintsResource ConstraintsResource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringStatisticsResource StatisticsResource { get; set; }
	}
	
	/// <summary>
	/// The inputs for a monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointInput EndpointInput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchTransformInput BatchTransformInput { get; set; }
	}
	
	/// <summary>
	/// Container image configuration object for the monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringAppSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ContainerEntrypoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ContainerArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecordPreprocessorSourceUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostAnalyticsProcessorSourceUri { get; set; }
	}
	
	/// <summary>
	/// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableInterContainerTrafficEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableNetworkIsolation { get; set; }
		
		/// <summary>
		/// Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MonitoringType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DataQuality = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModelQuality = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModelBias = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModelExplainability = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateNotebookInstanceOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateNotebookInstanceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCacheSetting DirectInternetAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSizeInGB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookInstanceAcceleratorType[] AcceleratorTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultCodeRepository { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AdditionalCodeRepositories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCacheSetting RootAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceMetadataServiceConfiguration InstanceMetadataServiceConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NotebookInstanceAcceleratorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.eia1.medium")]
		ml_eia1_medium = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.eia1.large")]
		ml_eia1_large = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.eia1.xlarge")]
		ml_eia1_xlarge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.eia2.medium")]
		ml_eia2_medium = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.eia2.large")]
		ml_eia2_large = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ml.eia2.xlarge")]
		ml_eia2_xlarge = 5,
	}
	
	/// <summary>
	/// Information on the IMDS configuration of the notebook instance
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceMetadataServiceConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MinimumInstanceMetadataServiceVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateNotebookInstanceLifecycleConfigOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceLifecycleConfigArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateNotebookInstanceLifecycleConfigInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceLifecycleConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookInstanceLifecycleHook[] OnCreate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookInstanceLifecycleHook[] OnStart { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the notebook instance lifecycle configuration script.</p> <p>Each lifecycle configuration script has a limit of 16384 characters.</p> <p>The value of the <code>$PATH</code> environment variable that is available to both scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p> <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group <code>/aws/sagemaker/NotebookInstances</code> in log stream <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p> <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started.</p> <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotebookInstanceLifecycleHook
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePipelineRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineDefinitionS3Location PipelineDefinitionS3Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParallelismConfiguration ParallelismConfiguration { get; set; }
	}
	
	/// <summary>
	/// The location of the pipeline definition stored in Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineDefinitionS3Location
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ObjectKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
	}
	
	/// <summary>
	/// Configuration that controls the parallelism of the pipeline. By default, the parallelism configuration specified applies to all executions of the pipeline unless overridden.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParallelismConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxParallelExecutionSteps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePresignedDomainUrlResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizedUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePresignedDomainUrlRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SessionExpirationDurationInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpiresInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpaceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePresignedNotebookInstanceUrlOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizedUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePresignedNotebookInstanceUrlInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SessionExpirationDurationInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProcessingJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProcessingJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProcessingJobRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingInput[] ProcessingInputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingOutputConfig ProcessingOutputConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProcessingJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProcessingResources ProcessingResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingStoppingCondition StoppingCondition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AppSpecification AppSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingEnvironmentMap Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExperimentConfig ExperimentConfig { get; set; }
	}
	
	/// <summary>
	/// The inputs for a processing job. The processing input must specify exactly one of either <code>S3Input</code> or <code>DatasetDefinition</code> types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessingInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InputName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AppManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingS3Input S3Input { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetDefinition DatasetDefinition { get; set; }
	}
	
	/// <summary>
	/// Configuration for downloading input data from Amazon S3 into the processing container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessingS3Input
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalPath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProcessingS3DataType S3DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingS3InputMode S3InputMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3DataDistribution S3DataDistributionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CompressionType S3CompressionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProcessingS3DataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManifestFile = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3Prefix = 1,
	}
	
	/// <summary>
	/// Configuration for Dataset Definition inputs. The Dataset Definition input must specify exactly one of either <code>AthenaDatasetDefinition</code> or <code>RedshiftDatasetDefinition</code> types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DatasetDefinition
	{
		
		/// <summary>
		/// Configuration for Athena Dataset Definition input.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AthenaDatasetDefinition AthenaDatasetDefinition { get; set; }
		
		/// <summary>
		/// Configuration for Redshift Dataset Definition input.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RedshiftDatasetDefinition RedshiftDatasetDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3DataDistribution DataDistributionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingS3InputMode InputMode { get; set; }
	}
	
	/// <summary>
	/// Configuration for Athena Dataset Definition input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AthenaDatasetDefinition
	{
		
		/// <summary>
		/// The name of the data catalog used in Athena query execution.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Catalog { get; set; }
		
		/// <summary>
		/// The name of the database used in the Athena query execution.
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Database { get; set; }
		
		/// <summary>
		/// The SQL query statements, to be executed.
		/// Required
		/// Max length: 4096
		/// Min length: 1
		/// Pattern: [\s\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]+")]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The name of the workgroup in which the Athena query is being started.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9._-]+")]
		public string WorkGroup { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OutputS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// The data storage format for Athena query results.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AthenaDatasetDefinitionOutputFormat OutputFormat { get; set; }
		
		/// <summary>
		/// The compression used for Athena query results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AthenaDatasetDefinitionOutputCompression> OutputCompression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AthenaDatasetDefinitionOutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARQUET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVRO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXTFILE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AthenaDatasetDefinitionOutputCompression
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPPY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZLIB = 2,
	}
	
	/// <summary>
	/// Configuration for Redshift Dataset Definition input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RedshiftDatasetDefinition
	{
		
		/// <summary>
		/// The Redshift cluster Identifier.
		/// Required
		/// Max length: 63
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// The name of the Redshift database used in Redshift query execution.
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Database { get; set; }
		
		/// <summary>
		/// The database user name used in Redshift query execution.
		/// Required
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string DbUser { get; set; }
		
		/// <summary>
		/// The SQL query statements to be executed.
		/// Required
		/// Max length: 4096
		/// Min length: 1
		/// Pattern: [\s\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]+")]
		public string QueryString { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterRoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OutputS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// The data storage format for Redshift query results.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RedshiftDatasetDefinitionOutputFormat OutputFormat { get; set; }
		
		/// <summary>
		/// The compression used for Redshift query results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<RedshiftDatasetDefinitionOutputCompression> OutputCompression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RedshiftDatasetDefinitionOutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARQUET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RedshiftDatasetDefinitionOutputCompression
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BZIP2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZSTD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPPY = 4,
	}
	
	/// <summary>
	/// Configuration for uploading output from the processing container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessingOutputConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProcessingOutput[] Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	/// <summary>
	/// Describes the results of a processing job. The processing output must specify exactly one of either <code>S3Output</code> or <code>FeatureStoreOutput</code> types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessingOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OutputName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingS3Output S3Output { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingFeatureStoreOutput FeatureStoreOutput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AppManaged { get; set; }
	}
	
	/// <summary>
	/// Configuration for uploading output data to Amazon S3 from the processing container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessingS3Output
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocalPath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProcessingS3UploadMode S3UploadMode { get; set; }
	}
	
	/// <summary>
	/// Configuration for processing job outputs in Amazon SageMaker Feature Store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessingFeatureStoreOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupName { get; set; }
	}
	
	/// <summary>
	/// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessingResources
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProcessingClusterConfig ClusterConfig { get; set; }
	}
	
	/// <summary>
	/// Configuration for the cluster used to run a processing job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessingClusterConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstanceCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProcessingInstanceType InstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int VolumeSizeInGB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
	}
	
	/// <summary>
	/// Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessingStoppingCondition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxRuntimeInSeconds { get; set; }
	}
	
	/// <summary>
	/// Configuration to run a processing job in a specified container image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ContainerEntrypoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ContainerArguments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessingEnvironmentMap
	{
	}
	
	/// <summary>
	/// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RunName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProjectOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProjectId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProjectInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceCatalogProvisioningDetails ServiceCatalogProvisioningDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Details that you specify to provision a service catalog product. For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceCatalogProvisioningDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningParameter[] ProvisioningParameters { get; set; }
	}
	
	/// <summary>
	/// A key value pair used when you provision a project as a service catalog product. For information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningParameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSpaceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SpaceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSpaceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SpaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpaceSettings SpaceSettings { get; set; }
	}
	
	/// <summary>
	/// A collection of space settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpaceSettings
	{
		
		/// <summary>
		/// The JupyterServer app settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JupyterServerAppSettings JupyterServerAppSettings { get; set; }
		
		/// <summary>
		/// The KernelGateway app settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KernelGatewayAppSettings KernelGatewayAppSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateStudioLifecycleConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StudioLifecycleConfigArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateStudioLifecycleConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StudioLifecycleConfigName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StudioLifecycleConfigContent { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StudioLifecycleConfigAppType StudioLifecycleConfigAppType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StudioLifecycleConfigAppType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JupyterServer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KernelGateway = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTrainingJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTrainingJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameters HyperParameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmSpecification AlgorithmSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Channel[] InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceConfig ResourceConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StoppingCondition StoppingCondition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableNetworkIsolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableInterContainerTrafficEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableManagedSpotTraining { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CheckpointConfig CheckpointConfig { get; set; }
		
		/// <summary>
		/// Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the <code>DebugHookConfig</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DebugHookConfig DebugHookConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DebugRuleConfiguration[] DebugRuleConfigurations { get; set; }
		
		/// <summary>
		/// Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TensorBoardOutputConfig TensorBoardOutputConfig { get; set; }
		
		/// <summary>
		/// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExperimentConfig ExperimentConfig { get; set; }
		
		/// <summary>
		/// Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProfilerConfig ProfilerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfilerRuleConfiguration[] ProfilerRuleConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingEnvironmentMap Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetryStrategy RetryStrategy { get; set; }
	}
	
	/// <summary>
	/// <p>Specifies the training algorithm to use in a <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> request.</p> <p>For more information about algorithms provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. For information about using your own algorithms, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using Your Own Algorithms with Amazon SageMaker</a>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlgorithmSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrainingImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlgorithmName { get; set; }
		
		/// <summary>
		/// <p>The training input mode that the algorithm supports. For more information about input modes, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p> <p> <b>Pipe mode</b> </p> <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly from Amazon S3 to the container.</p> <p> <b>File mode</b> </p> <p>If an algorithm supports <code>File</code> mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container.</p> <p>You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any.</p> <p>For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training.</p> <p> <b>FastFile mode</b> </p> <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk.</p> <p> <code>FastFile</code> mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.</p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrainingInputMode TrainingInputMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDefinition[] MetricDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableSageMakerMetricsTimeSeries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ContainerEntrypoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ContainerArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingImageConfig TrainingImageConfig { get; set; }
	}
	
	/// <summary>
	/// The configuration to use an image from a private Docker registry for a training job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrainingImageConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RepositoryAccessMode TrainingRepositoryAccessMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingRepositoryAuthConfig TrainingRepositoryAuthConfig { get; set; }
	}
	
	/// <summary>
	/// An object containing authentication information for a private Docker registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrainingRepositoryAuthConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrainingRepositoryCredentialsProviderArn { get; set; }
	}
	
	/// <summary>
	/// Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the <code>DebugHookConfig</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DebugHookConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalPath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HookParameters HookParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CollectionConfiguration[] CollectionConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HookParameters
	{
	}
	
	/// <summary>
	/// Configuration information for the Amazon SageMaker Debugger output tensor collections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CollectionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CollectionParameters CollectionParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectionParameters
	{
	}
	
	/// <summary>
	/// Configuration information for SageMaker Debugger rules for debugging. To learn more about how to configure the <code>DebugRuleConfiguration</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DebugRuleConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleEvaluatorImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingInstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSizeInGB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleParameters RuleParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuleParameters
	{
	}
	
	/// <summary>
	/// Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TensorBoardOutputConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalPath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
	}
	
	/// <summary>
	/// Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfilerConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProfilingIntervalInMilliseconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfilingParameters ProfilingParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableProfiler { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfilingParameters
	{
	}
	
	/// <summary>
	/// Configuration information for profiling rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfilerRuleConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleEvaluatorImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingInstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSizeInGB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleParameters RuleParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrainingEnvironmentMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTransformJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransformJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTransformJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransformJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxConcurrentTransforms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelClientConfig ModelClientConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxPayloadInMB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchStrategy BatchStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransformEnvironmentMap Environment { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransformInput TransformInput { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransformOutput TransformOutput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDataCaptureConfig DataCaptureConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransformResources TransformResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataProcessing DataProcessing { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExperimentConfig ExperimentConfig { get; set; }
	}
	
	/// <summary>
	/// Configures the timeout and maximum number of retries for processing a transform job invocation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelClientConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InvocationsTimeoutInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InvocationsMaxRetries { get; set; }
	}
	
	/// <summary>
	/// Configuration to control how SageMaker captures inference data for batch transform jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDataCaptureConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GenerateInferenceId { get; set; }
	}
	
	/// <summary>
	/// The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction Results with their Corresponding Input Records</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataProcessing
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InputFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutputFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JoinSource JoinSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum JoinSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Input = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTrialResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTrialRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrialName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
		
		/// <summary>
		/// Metadata properties of the tracking entity, trial, or trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetadataProperties MetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTrialComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTrialComponentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentParameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentArtifacts InputArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentArtifacts OutputArtifacts { get; set; }
		
		/// <summary>
		/// Metadata properties of the tracking entity, trial, or trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetadataProperties MetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The status of the trial component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrialComponentStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus PrimaryStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TrialComponentPrimaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrialComponentParameters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrialComponentArtifacts
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateUserProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateUserProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SingleSignOnUserIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SingleSignOnUserValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserSettings UserSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkforceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkforceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkforceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CognitoConfig CognitoConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OidcConfig OidcConfig { get; set; }
		
		/// <summary>
		/// A list of IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Used to create an allow list of IP addresses for a private workforce. Workers will only be able to login to their worker portal from an IP address within this range. By default, a workforce isn't restricted to specific IP addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SourceIpConfig SourceIpConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkforceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkforceVpcConfigRequest WorkforceVpcConfig { get; set; }
	}
	
	/// <summary>
	/// Use this parameter to configure your Amazon Cognito workforce. A single Cognito workforce is created using and corresponds to a single <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html"> Amazon Cognito user pool</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CognitoConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserPool { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientId { get; set; }
	}
	
	/// <summary>
	/// Use this parameter to configure your OIDC Identity Provider (IdP).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OidcConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Issuer { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizationEndpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TokenEndpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserInfoEndpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LogoutEndpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JwksUri { get; set; }
	}
	
	/// <summary>
	/// A list of IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Used to create an allow list of IP addresses for a private workforce. Workers will only be able to login to their worker portal from an IP address within this range. By default, a workforce isn't restricted to specific IP addresses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceIpConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Cidrs { get; set; }
	}
	
	/// <summary>
	/// The VPC object you use to create or update a workforce.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkforceVpcConfigRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Subnets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkteamResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string WorkteamArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkteamRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkteamName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WorkforceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MemberDefinition[] MemberDefinitions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfiguration NotificationConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Defines an Amazon Cognito or your own OIDC IdP user group that is part of a work team.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CognitoMemberDefinition CognitoMemberDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OidcMemberDefinition OidcMemberDefinition { get; set; }
	}
	
	/// <summary>
	/// Identifies a Amazon Cognito user group. A user group can be used in on or more work teams.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CognitoMemberDefinition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserPool { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserGroup { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientId { get; set; }
	}
	
	/// <summary>
	/// A list of user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. When you add a user group to the list of <code>Groups</code>, you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OidcMemberDefinition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
	}
	
	/// <summary>
	/// Configures Amazon SNS notifications of available or expiring work items for work teams.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationTopicArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteActionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteActionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ActionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAlgorithmInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlgorithmName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AppType AppType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpaceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppImageConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppImageConfigName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteArtifactResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteArtifactRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ArtifactSource Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAssociationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAssociationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCodeRepositoryInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CodeRepositoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteContextResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContextArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteContextRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContextName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDataQualityJobDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDeviceFleetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetentionPolicy RetentionPolicy { get; set; }
	}
	
	/// <summary>
	/// The retention policy for data stored on an Amazon Elastic File System (EFS) volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetentionPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RetentionType HomeEfsFileSystem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RetentionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Retain = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delete = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEdgeDeploymentPlanRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEdgeDeploymentStageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEndpointInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEndpointConfigInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfigName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteExperimentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteExperimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteFeatureGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteFlowDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteFlowDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowDefinitionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteHubRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteHubContentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HubContentType HubContentType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubContentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubContentVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HubContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Model = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Notebook = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteHumanTaskUiResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteHumanTaskUiRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HumanTaskUiName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteImageResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteImageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteImageVersionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteImageVersionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Alias { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInferenceExperimentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InferenceExperimentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInferenceExperimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteModelInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteModelBiasJobDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteModelCardRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteModelExplainabilityJobDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteModelPackageInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteModelPackageGroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteModelPackageGroupPolicyInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteModelQualityJobDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMonitoringScheduleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteNotebookInstanceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteNotebookInstanceLifecycleConfigInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceLifecycleConfigName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePipelineRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProjectInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProjectName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSpaceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SpaceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteStudioLifecycleConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StudioLifecycleConfigName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTagsOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTagsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTrialResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTrialRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrialName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTrialComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTrialComponentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteUserProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWorkforceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWorkforceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkforceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWorkteamResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWorkteamRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkteamName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterDevicesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] DeviceNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeActionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActionSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineageEntityParameters Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		/// <summary>
		/// Metadata properties of the tracking entity, trial, or trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetadataProperties MetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LineageGroupArn { get; set; }
	}
	
	/// <summary>
	/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserContext
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IamIdentity IamIdentity { get; set; }
	}
	
	/// <summary>
	/// The IAM Identity details associated with the user. These details are associated with model package groups, model packages and project entities only.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IamIdentity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeActionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ActionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAlgorithmOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlgorithmName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlgorithmArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlgorithmDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrainingSpecification TrainingSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceSpecification InferenceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmValidationSpecification ValidationSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmStatus AlgorithmStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmStatusDetails AlgorithmStatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CertifyForMarketplace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AlgorithmStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 4,
	}
	
	/// <summary>
	/// Specifies the validation and image scan statuses of the algorithm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlgorithmStatusDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmStatusItem[] ValidationStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmStatusItem[] ImageScanStatuses { get; set; }
	}
	
	/// <summary>
	/// Represents the overall status of an algorithm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlgorithmStatusItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DetailedAlgorithmStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DetailedAlgorithmStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotStarted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAlgorithmInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlgorithmName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAppResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppType AppType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastHealthCheckTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUserActivityTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceSpec ResourceSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpaceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AppStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InService = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAppRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AppType AppType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpaceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAppImageConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppImageConfigArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppImageConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KernelGatewayImageConfig KernelGatewayImageConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAppImageConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppImageConfigName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeArtifactResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ArtifactSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineageEntityParameters Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		/// <summary>
		/// Metadata properties of the tracking entity, trial, or trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetadataProperties MetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LineageGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeArtifactRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAutoMLJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLChannel[] InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLOutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobObjective AutoMLJobObjective { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProblemType ProblemType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobConfig AutoMLJobConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLPartialFailureReason[] PartialFailureReasons { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLCandidate BestCandidate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CandidateStatus AutoMLJobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobSecondaryStatus AutoMLJobSecondaryStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GenerateCandidateDefinitionsOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobArtifacts AutoMLJobArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResolvedAttributes ResolvedAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelDeployConfig ModelDeployConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelDeployResult ModelDeployResult { get; set; }
	}
	
	/// <summary>
	/// The reason for a partial failure of an AutoML job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLPartialFailureReason
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PartialFailureMessage { get; set; }
	}
	
	/// <summary>
	/// Information about a candidate produced by an AutoML training job, including its status, steps, and other properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLCandidate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CandidateName { get; set; }
		
		/// <summary>
		/// The best candidate result from an AutoML training job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FinalAutoMLJobObjectiveMetric FinalAutoMLJobObjectiveMetric { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectiveStatus ObjectiveStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLCandidateStep[] CandidateSteps { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CandidateStatus CandidateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLContainerDefinition[] InferenceContainers { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CandidateProperties CandidateProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLInferenceContainerDefinitions InferenceContainerDefinitions { get; set; }
	}
	
	/// <summary>
	/// The best candidate result from an AutoML training job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FinalAutoMLJobObjectiveMetric
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobObjectiveType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLMetricEnum MetricName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLMetricEnum StandardMetricName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ObjectiveStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	/// <summary>
	/// Information about the steps for a candidate and what step it is working on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLCandidateStep
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CandidateStepType CandidateStepType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CandidateStepArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CandidateStepName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CandidateStepType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SageMaker::TrainingJob")]
		AWSSageMakerTrainingJob = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SageMaker::TransformJob")]
		AWSSageMakerTransformJob = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS::SageMaker::ProcessingJob")]
		AWSSageMakerProcessingJob = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CandidateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 4,
	}
	
	/// <summary>
	/// A list of container definitions that describe the different containers that make up an AutoML candidate. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ContainerDefinition.html"> ContainerDefinition</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLContainerDefinition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelDataUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentMap Environment { get; set; }
	}
	
	/// <summary>
	/// The properties of an AutoML candidate job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CandidateArtifactLocations CandidateArtifactLocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDatum[] CandidateMetrics { get; set; }
	}
	
	/// <summary>
	/// The location of artifacts for an AutoML candidate job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateArtifactLocations
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Explainability { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelInsights { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BacktestResults { get; set; }
	}
	
	/// <summary>
	/// Information about the metric for a candidate produced by an AutoML job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricDatum
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLMetricEnum MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricSetSource Set { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLMetricExtendedEnum StandardMetricName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MetricSetSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Train = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Validation = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Test = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutoMLMetricExtendedEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accuracy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		F1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		F1macro = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RMSE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		R2 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BalancedAccuracy = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Precision = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrecisionMacro = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Recall = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecallMacro = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LogLoss = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InferenceLatency = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAPE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAPE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AverageWeightedQuantileLoss = 18,
	}
	
	/// <summary>
	/// The mapping of all supported processing unit (CPU, GPU, etc...) to inference container definitions for the candidate. This field is populated for the V2 API only (for example, for jobs created by calling <code>CreateAutoMLJobV2</code>).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLInferenceContainerDefinitions
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutoMLJobSecondaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Starting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AnalyzingData = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FeatureEngineering = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModelTuning = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MaxCandidatesReached = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MaxAutoMLJobRuntimeReached = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CandidateDefinitionsGenerated = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GeneratingExplainabilityReport = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExplainabilityError = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeployingModel = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModelDeploymentError = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GeneratingModelInsightsReport = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModelInsightsError = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TrainingModels = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreTraining = 18,
	}
	
	/// <summary>
	/// The artifacts that are generated during an AutoML job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLJobArtifacts
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CandidateDefinitionNotebookLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataExplorationNotebookLocation { get; set; }
	}
	
	/// <summary>
	/// The resolved attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResolvedAttributes
	{
		
		/// <summary>
		/// Specifies a metric to minimize or maximize as the objective of a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobObjective AutoMLJobObjective { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProblemType ProblemType { get; set; }
		
		/// <summary>
		/// How long a job is allowed to run, or how many candidates a job is allowed to generate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobCompletionCriteria CompletionCriteria { get; set; }
	}
	
	/// <summary>
	/// Provides information about the endpoint of the model deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelDeployResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAutoMLJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAutoMLJobV2Response
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobChannel[] AutoMLJobInputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLOutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobObjective AutoMLJobObjective { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLProblemTypeConfig AutoMLProblemTypeConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLPartialFailureReason[] PartialFailureReasons { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLCandidate BestCandidate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CandidateStatus AutoMLJobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobSecondaryStatus AutoMLJobSecondaryStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelDeployConfig ModelDeployConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelDeployResult ModelDeployResult { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLDataSplitConfig DataSplitConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSecurityConfig SecurityConfig { get; set; }
		
		/// <summary>
		/// The artifacts that are generated during an AutoML job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobArtifacts AutoMLJobArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLResolvedAttributes ResolvedAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLProblemTypeConfigName AutoMLProblemTypeConfigName { get; set; }
	}
	
	/// <summary>
	/// The resolved attributes used to configure an AutoML job V2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLResolvedAttributes
	{
		
		/// <summary>
		/// Specifies a metric to minimize or maximize as the objective of a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobObjective AutoMLJobObjective { get; set; }
		
		/// <summary>
		/// How long a job is allowed to run, or how many candidates a job is allowed to generate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobCompletionCriteria CompletionCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLProblemTypeResolvedAttributes AutoMLProblemTypeResolvedAttributes { get; set; }
	}
	
	/// <summary>
	/// The resolved attributes specific to the problem type of an AutoML job V2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLProblemTypeResolvedAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TabularResolvedAttributes TabularResolvedAttributes { get; set; }
	}
	
	/// <summary>
	/// The resolved attributes specific to the <code>TABULAR</code> problem type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TabularResolvedAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProblemType ProblemType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutoMLProblemTypeConfigName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImageClassification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TextClassification = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tabular = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimeSeriesForecasting = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAutoMLJobV2Request
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCodeRepositoryOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CodeRepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CodeRepositoryArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GitConfig GitConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCodeRepositoryInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CodeRepositoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCompilationJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CompilationJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CompilationJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CompilationJobStatus CompilationJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompilationStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompilationEndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StoppingCondition StoppingCondition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InferenceImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageVersionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelArtifacts ModelArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelDigests ModelDigests { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputConfig InputConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputConfig OutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NeoVpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CompilationJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 5,
	}
	
	/// <summary>
	/// <p>Provides information about the location that is configured for storing model artifacts. </p> <p>Model artifacts are the output that results from training a model, and typically consist of trained parameters, a model definition that describes how to compute inferences, and other metadata.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelArtifacts
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3ModelArtifacts { get; set; }
	}
	
	/// <summary>
	/// Provides information to verify the integrity of stored model artifacts. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelDigests
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactDigest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCompilationJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CompilationJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeContextResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContextName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContextArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContextSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContextType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineageEntityParameters Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LineageGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeContextRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContextName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDataQualityJobDefinitionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataQualityBaselineConfig DataQualityBaselineConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataQualityAppSpecification DataQualityAppSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataQualityJobInput DataQualityJobInput { get; set; }
		
		/// <summary>
		/// The output configuration for monitoring jobs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringOutputConfig DataQualityJobOutputConfig { get; set; }
		
		/// <summary>
		/// Identifies the resources to deploy for a monitoring job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringResources JobResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringNetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// A time limit for how long the monitoring job is allowed to run before stopping.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringStoppingCondition StoppingCondition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDataQualityJobDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IotThingName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RegistrationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LatestHeartbeat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EdgeModel[] Models { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AgentVersion { get; set; }
	}
	
	/// <summary>
	/// The model on the edge device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EdgeModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LatestSampleTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LatestInference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDeviceFleetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EdgeOutputConfig OutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IotRoleAlias { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDeviceFleetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomeEfsFileSystemId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SingleSignOnManagedApplicationInstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthMode AuthMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserSettings DefaultUserSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppNetworkAccessType AppNetworkAccessType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomeEfsFileSystemKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainSettings DomainSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppSecurityGroupManagement AppSecurityGroupManagement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecurityGroupIdForDomainBoundary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DefaultSpaceSettings DefaultSpaceSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DomainStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InService = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Update_Failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delete_Failed = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEdgeDeploymentPlanResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EdgeDeploymentModelConfig[] ModelConfigs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EdgeDeploymentSuccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EdgeDeploymentPending { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EdgeDeploymentFailed { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStageStatusSummary[] Stages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	/// <summary>
	/// Contains information summarizing the deployment stage results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeploymentStageStatusSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeviceSelectionConfig DeviceSelectionConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EdgeDeploymentConfig DeploymentConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EdgeDeploymentStatus DeploymentStatus { get; set; }
	}
	
	/// <summary>
	/// Contains information summarizing the deployment stage results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EdgeDeploymentStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StageStatus StageStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EdgeDeploymentSuccessInStage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EdgeDeploymentPendingInStage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EdgeDeploymentFailedInStage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EdgeDeploymentStageStartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StageStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READYTODEPLOY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEdgeDeploymentPlanRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEdgePackagingJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgePackagingJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgePackagingJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompilationJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EdgeOutputConfig OutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EdgePackagingJobStatus EdgePackagingJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EdgePackagingJobStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelArtifact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EdgePresetDeploymentOutput PresetDeploymentOutput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EdgePackagingJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 5,
	}
	
	/// <summary>
	/// The output of a SageMaker Edge Manager deployable resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EdgePresetDeploymentOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EdgePresetDeploymentType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Artifact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EdgePresetDeploymentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EdgePresetDeploymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEdgePackagingJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgePackagingJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEndpointOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantSummary[] ProductionVariants { get; set; }
		
		/// <summary>
		/// The currently active data capture configuration used by your Endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataCaptureConfigSummary DataCaptureConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EndpointStatus EndpointStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentConfig LastDeploymentConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AsyncInferenceConfig AsyncInferenceConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingDeploymentSummary PendingDeploymentSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExplainerConfig ExplainerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantSummary[] ShadowProductionVariants { get; set; }
	}
	
	/// <summary>
	/// Describes weight and capacities for a production variant associated with an endpoint. If you sent a request to the <code>UpdateEndpointWeightsAndCapacities</code> API and the endpoint status is <code>Updating</code>, you get different desired and current values. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductionVariantSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VariantName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeployedImage[] DeployedImages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float CurrentWeight { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float DesiredWeight { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CurrentInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DesiredInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantStatus[] VariantStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantServerlessConfig CurrentServerlessConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantServerlessConfig DesiredServerlessConfig { get; set; }
	}
	
	/// <summary>
	/// <p>Gets the Amazon EC2 Container Registry path of the docker image of the model that is hosted in this <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariant.html">ProductionVariant</a>.</p> <p>If you used the <code>registry/repository[:tag]</code> form to specify the image path of the primary container when you created the model hosted in this <code>ProductionVariant</code>, the path resolves to a path of the form <code>registry/repository[@digest]</code>. A digest is a hash value that identifies a specific version of an image. For information about Amazon ECR paths, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html">Pulling an Image</a> in the <i>Amazon ECR User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeployedImage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SpecifiedImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResolvedImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ResolutionTime { get; set; }
	}
	
	/// <summary>
	/// Describes the status of the production variant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductionVariantStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VariantStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VariantStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivatingTraffic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Baking = 4,
	}
	
	/// <summary>
	/// The currently active data capture configuration used by your Endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataCaptureConfigSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool EnableCapture { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CaptureStatus CaptureStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int CurrentSamplingPercentage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationS3Uri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CaptureStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EndpointStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OutOfService = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemUpdating = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RollingBack = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InService = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateRollbackFailed = 8,
	}
	
	/// <summary>
	/// The summary of an in-progress deployment when an endpoint is creating or updating with a new endpoint configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PendingDeploymentSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingProductionVariantSummary[] ProductionVariants { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingProductionVariantSummary[] ShadowProductionVariants { get; set; }
	}
	
	/// <summary>
	/// The production variant summary for a deployment when an endpoint is creating or updating with the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> or <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html">UpdateEndpoint</a> operations. Describes the <code>VariantStatus </code>, weight and capacity for a production variant associated with an endpoint. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PendingProductionVariantSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VariantName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeployedImage[] DeployedImages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float CurrentWeight { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float DesiredWeight { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CurrentInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DesiredInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantInstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantAcceleratorType AcceleratorType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantStatus[] VariantStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantServerlessConfig CurrentServerlessConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantServerlessConfig DesiredServerlessConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEndpointInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEndpointConfigOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfigName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfigArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariant[] ProductionVariants { get; set; }
		
		/// <summary>
		/// Configuration to control how SageMaker captures inference data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataCaptureConfig DataCaptureConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AsyncInferenceConfig AsyncInferenceConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExplainerConfig ExplainerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariant[] ShadowProductionVariants { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEndpointConfigInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfigName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeExperimentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExperimentSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
	}
	
	/// <summary>
	/// The source of the experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeExperimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeFeatureGroupResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecordIdentifierFeatureName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventTimeFeatureName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FeatureDefinition[] FeatureDefinitions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnlineStoreConfig OnlineStoreConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfflineStoreConfig OfflineStoreConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureGroupStatus FeatureGroupStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfflineStoreStatus OfflineStoreStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LastUpdateStatus LastUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OnlineStoreTotalSizeBytes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FeatureGroupStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateFailed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteFailed = 4,
	}
	
	/// <summary>
	/// The status of <code>OfflineStore</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfflineStoreStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OfflineStoreStatusValue Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BlockedReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OfflineStoreStatusValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blocked = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 2,
	}
	
	/// <summary>
	/// A value that indicates whether the update was successful.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LastUpdateStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LastUpdateStatusValue Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LastUpdateStatusValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Successful = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeFeatureGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeFeatureMetadataResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FeatureType FeatureType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureParameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// A key-value pair that you specify to describe the feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FeatureParameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeFeatureMetadataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeFlowDefinitionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowDefinitionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowDefinitionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FlowDefinitionStatus FlowDefinitionStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HumanLoopRequestSource HumanLoopRequestSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HumanLoopActivationConfig HumanLoopActivationConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HumanLoopConfig HumanLoopConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FlowDefinitionOutputConfig OutputConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FlowDefinitionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initializing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeFlowDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowDefinitionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeHubResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HubSearchKeywords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HubS3StorageConfig S3StorageConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HubStatus HubStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HubStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InService = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateFailed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteFailed = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeHubRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeHubContentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubContentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubContentArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubContentVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HubContentType HubContentType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DocumentSchemaVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubContentDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubContentDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubContentMarkdown { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubContentDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HubContentSearchKeywords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HubContentDependency[] HubContentDependencies { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HubContentStatus HubContentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	/// <summary>
	/// Any dependencies related to hub content, such as scripts, model artifacts, datasets, or notebooks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HubContentDependency
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DependencyOriginPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DependencyCopyPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HubContentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Importing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImportFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteFailed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeHubContentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HubContentType HubContentType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubContentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubContentVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeHumanTaskUiResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HumanTaskUiArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HumanTaskUiName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HumanTaskUiStatus HumanTaskUiStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Container for user interface template information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UiTemplateInfo UiTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HumanTaskUiStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 1,
	}
	
	/// <summary>
	/// Container for user interface template information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UiTemplateInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentSha256 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeHumanTaskUiRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HumanTaskUiName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeHyperParameterTuningJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HyperParameterTuningJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HyperParameterTuningJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobConfig HyperParameterTuningJobConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTrainingJobDefinition TrainingJobDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTrainingJobDefinition[] TrainingJobDefinitions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CandidateStatus HyperParameterTuningJobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset HyperParameterTuningEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrainingJobStatusCounters TrainingJobStatusCounters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectiveStatusCounters ObjectiveStatusCounters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTrainingJobSummary BestTrainingJob { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTrainingJobSummary OverallBestTrainingJob { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobWarmStartConfig WarmStartConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobCompletionDetails TuningJobCompletionDetails { get; set; }
		
		/// <summary>
		/// The total resources consumed by your hyperparameter tuning job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobConsumedResources ConsumedResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Autotune Autotune { get; set; }
	}
	
	/// <summary>
	/// The numbers of training jobs launched by a hyperparameter tuning job, categorized by status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrainingJobStatusCounters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Completed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RetryableError { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NonRetryableError { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Stopped { get; set; }
	}
	
	/// <summary>
	/// Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ObjectiveStatusCounters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Succeeded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Pending { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Failed { get; set; }
	}
	
	/// <summary>
	/// The container for the summary information about a training job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterTrainingJobSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobDefinitionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TuningJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TrainingStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TrainingEndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus TrainingJobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HyperParameters TunedHyperParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FinalHyperParameterTuningJobObjectiveMetric FinalHyperParameterTuningJobObjectiveMetric { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectiveStatus ObjectiveStatus { get; set; }
	}
	
	/// <summary>
	/// Shows the latest objective metric emitted by a training job that was launched by a hyperparameter tuning job. You define the objective metric in the <code>HyperParameterTuningJobObjective</code> parameter of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html">HyperParameterTuningJobConfig</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FinalHyperParameterTuningJobObjectiveMetric
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobObjectiveType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float Value { get; set; }
	}
	
	/// <summary>
	/// A structure that contains runtime information about both current and completed hyperparameter tuning jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterTuningJobCompletionDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfTrainingJobsObjectiveNotImproving { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ConvergenceDetectedTime { get; set; }
	}
	
	/// <summary>
	/// The total resources consumed by your hyperparameter tuning job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterTuningJobConsumedResources
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RuntimeInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeHyperParameterTuningJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HyperParameterTuningJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeImageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImageStatus ImageStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ImageStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeImageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeImageVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContainerImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImageVersionStatus ImageVersionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VendorGuidance VendorGuidance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobType JobType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MLFramework { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProgrammingLang { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Processor Processor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Horovod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReleaseNotes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ImageVersionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeImageVersionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Alias { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInferenceExperimentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentSchedule Schedule { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EndpointMetadata EndpointMetadata { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelVariantConfigSummary[] ModelVariants { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentDataStorageConfig DataStorageConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShadowModeConfig ShadowModeConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InferenceExperimentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Starting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 7,
	}
	
	/// <summary>
	/// The metadata of the endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointMetadata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointStatus EndpointStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
	}
	
	/// <summary>
	/// Summary of the deployment configuration of a model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelVariantConfigSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VariantName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelInfrastructureConfig InfrastructureConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelVariantStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelVariantStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InService = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInferenceExperimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInferenceRecommendationsJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobType JobType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobInputConfig InputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobStoppingConditions StoppingConditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceRecommendation[] InferenceRecommendations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointPerformance[] EndpointPerformances { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RecommendationJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 5,
	}
	
	/// <summary>
	/// A list of recommendations made by Amazon SageMaker Inference Recommender.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InferenceRecommendation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecommendationMetrics Metrics { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EndpointOutputConfiguration EndpointConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelConfiguration ModelConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecommendationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset InvocationEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset InvocationStartTime { get; set; }
	}
	
	/// <summary>
	/// The metrics of recommendations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecommendationMetrics
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float CostPerHour { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float CostPerInference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxInvocations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ModelLatency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float CpuUtilization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float MemoryUtilization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ModelSetupTime { get; set; }
	}
	
	/// <summary>
	/// The endpoint configuration made by Inference Recommender during a recommendation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointOutputConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VariantName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantInstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InitialInstanceCount { get; set; }
		
		/// <summary>
		/// Specifies the serverless configuration for an endpoint variant.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantServerlessConfig ServerlessConfig { get; set; }
	}
	
	/// <summary>
	/// Defines the model configuration. Includes the specification name and environment parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InferenceSpecificationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentParameter[] EnvironmentParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompilationJobName { get; set; }
	}
	
	/// <summary>
	/// A list of environment parameters suggested by the Amazon SageMaker Inference Recommender.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ValueType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The performance results from running an Inference Recommender job on an existing endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointPerformance
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InferenceMetrics Metrics { get; set; }
		
		/// <summary>
		/// Details about a customer endpoint that was compared in an Inference Recommender job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EndpointInfo EndpointInfo { get; set; }
	}
	
	/// <summary>
	/// The metrics for an existing endpoint compared in an Inference Recommender job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InferenceMetrics
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxInvocations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ModelLatency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInferenceRecommendationsJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLabelingJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobStatus LabelingJobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LabelCounters LabelCounters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobReferenceCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LabelingJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LabelingJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LabelAttributeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobInputConfig InputConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobOutputConfig OutputConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LabelCategoryConfigS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobStoppingConditions StoppingConditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobAlgorithmsConfig LabelingJobAlgorithmsConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HumanTaskConfig HumanTaskConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobOutput LabelingJobOutput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LabelingJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initializing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 5,
	}
	
	/// <summary>
	/// Provides a breakdown of the number of objects labeled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelCounters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalLabeled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HumanLabeled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MachineLabeled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FailedNonRetryableError { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Unlabeled { get; set; }
	}
	
	/// <summary>
	/// Specifies the location of the output produced by the labeling job. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelingJobOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OutputDatasetS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FinalActiveLearningModelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLabelingJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LabelingJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLineageGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LineageGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LineageGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLineageGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LineageGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainerDefinition PrimaryContainer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainerDefinition[] Containers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceExecutionConfig InferenceExecutionConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableNetworkIsolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentRecommendation DeploymentRecommendation { get; set; }
	}
	
	/// <summary>
	/// A set of recommended deployment configurations for the model. To get more advanced recommendations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html">CreateInferenceRecommendationsJob</a> to create an inference recommendation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeploymentRecommendation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecommendationStatus RecommendationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RealTimeInferenceRecommendation[] RealTimeInferenceRecommendations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RecommendationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 3,
	}
	
	/// <summary>
	/// The recommended configuration to use for Real-Time Inference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RealTimeInferenceRecommendation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecommendationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantInstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentMap Environment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelBiasJobDefinitionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelBiasBaselineConfig ModelBiasBaselineConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelBiasAppSpecification ModelBiasAppSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelBiasJobInput ModelBiasJobInput { get; set; }
		
		/// <summary>
		/// The output configuration for monitoring jobs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringOutputConfig ModelBiasJobOutputConfig { get; set; }
		
		/// <summary>
		/// Identifies the resources to deploy for a monitoring job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringResources JobResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringNetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// A time limit for how long the monitoring job is allowed to run before stopping.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringStoppingCondition StoppingCondition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelBiasJobDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelCardResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ModelCardVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelCardStatus ModelCardStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCardSecurityConfig SecurityConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCardProcessingStatus ModelCardProcessingStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelCardProcessingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteInProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeletePending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContentDeleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportJobsDeleted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteCompleted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteFailed = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelCardRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ModelCardVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelCardExportJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardExportJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardExportJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelCardExportJobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ModelCardVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelCardExportOutputConfig OutputConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCardExportArtifacts ExportArtifacts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelCardExportJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	/// <summary>
	/// The artifacts of the model card export job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelCardExportArtifacts
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3ExportArtifacts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelCardExportJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardExportJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelExplainabilityJobDefinitionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelExplainabilityBaselineConfig ModelExplainabilityBaselineConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelExplainabilityAppSpecification ModelExplainabilityAppSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelExplainabilityJobInput ModelExplainabilityJobInput { get; set; }
		
		/// <summary>
		/// The output configuration for monitoring jobs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringOutputConfig ModelExplainabilityJobOutputConfig { get; set; }
		
		/// <summary>
		/// Identifies the resources to deploy for a monitoring job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringResources JobResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringNetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// A time limit for how long the monitoring job is allowed to run before stopping.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringStoppingCondition StoppingCondition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelExplainabilityJobDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelPackageOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ModelPackageVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceSpecification InferenceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceAlgorithmSpecification SourceAlgorithmSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageValidationSpecification ValidationSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmStatus ModelPackageStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageStatusDetails ModelPackageStatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CertifyForMarketplace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelApprovalStatus ModelApprovalStatus { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		/// <summary>
		/// Metadata properties of the tracking entity, trial, or trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetadataProperties MetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelMetrics ModelMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApprovalDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerMetadataMap CustomerMetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DriftCheckBaselines DriftCheckBaselines { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Task { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SamplePayloadUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdditionalInferenceSpecificationDefinition[] AdditionalInferenceSpecifications { get; set; }
	}
	
	/// <summary>
	/// Specifies the validation and image scan statuses of the model package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelPackageStatusDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageStatusItem[] ValidationStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageStatusItem[] ImageScanStatuses { get; set; }
	}
	
	/// <summary>
	/// Represents the overall status of a model package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelPackageStatusItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DetailedAlgorithmStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelPackageInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelPackageGroupOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageGroupStatus ModelPackageGroupStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelPackageGroupStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteFailed = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelPackageGroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelQualityJobDefinitionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelQualityBaselineConfig ModelQualityBaselineConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelQualityAppSpecification ModelQualityAppSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelQualityJobInput ModelQualityJobInput { get; set; }
		
		/// <summary>
		/// The output configuration for monitoring jobs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringOutputConfig ModelQualityJobOutputConfig { get; set; }
		
		/// <summary>
		/// Identifies the resources to deploy for a monitoring job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringResources JobResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringNetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// A time limit for how long the monitoring job is allowed to run before stopping.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringStoppingCondition StoppingCondition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeModelQualityJobDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDefinitionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeMonitoringScheduleResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleStatus MonitoringScheduleStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringType MonitoringType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringScheduleConfig MonitoringScheduleConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringExecutionSummary LastMonitoringExecutionSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScheduleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scheduled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 3,
	}
	
	/// <summary>
	/// Summary of information about the last monitoring job to run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringExecutionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ScheduledTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExecutionStatus MonitoringExecutionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProcessingJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringJobDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringType MonitoringType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CompletedWithViolations = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeMonitoringScheduleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeNotebookInstanceOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookInstanceStatus NotebookInstanceStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceLifecycleConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCacheSetting DirectInternetAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSizeInGB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookInstanceAcceleratorType[] AcceleratorTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultCodeRepository { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AdditionalCodeRepositories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCacheSetting RootAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceMetadataServiceConfiguration InstanceMetadataServiceConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NotebookInstanceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InService = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeNotebookInstanceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeNotebookInstanceLifecycleConfigOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceLifecycleConfigArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceLifecycleConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookInstanceLifecycleHook[] OnCreate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookInstanceLifecycleHook[] OnStart { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeNotebookInstanceLifecycleConfigInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceLifecycleConfigName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineStatus PipelineStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastRunTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParallelismConfiguration ParallelismConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PipelineStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePipelineRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePipelineDefinitionForExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePipelineDefinitionForExecutionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePipelineExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineExecutionStatus PipelineExecutionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionDescription { get; set; }
		
		/// <summary>
		/// Specifies the names of the experiment and trial created by a pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelineExperimentConfig PipelineExperimentConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParallelismConfiguration ParallelismConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectiveExecutionConfig SelectiveExecutionConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PipelineExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Executing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 4,
	}
	
	/// <summary>
	/// Specifies the names of the experiment and trial created by a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineExperimentConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialName { get; set; }
	}
	
	/// <summary>
	/// The selective execution configuration applied to the pipeline run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelectiveExecutionConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourcePipelineExecutionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SelectedStep[] SelectedSteps { get; set; }
	}
	
	/// <summary>
	/// A step selected to run in selective execution mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelectedStep
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StepName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePipelineExecutionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProcessingJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingInput[] ProcessingInputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingOutputConfig ProcessingOutputConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProcessingJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProcessingResources ProcessingResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingStoppingCondition StoppingCondition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AppSpecification AppSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingEnvironmentMap Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkConfig NetworkConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExperimentConfig ExperimentConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProcessingJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus ProcessingJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExitMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ProcessingEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ProcessingStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProcessingJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProcessingJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProjectOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProjectId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceCatalogProvisioningDetails ServiceCatalogProvisioningDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceCatalogProvisionedProductDetails ServiceCatalogProvisionedProductDetails { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProjectStatus ProjectStatus { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
	}
	
	/// <summary>
	/// Details of a provisioned service catalog product. For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceCatalogProvisionedProductDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductStatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProjectStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateInProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateCompleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteInProgress = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteFailed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteCompleted = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateInProgress = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateCompleted = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateFailed = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProjectInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProjectName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSpaceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpaceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomeEfsFileSystemUid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpaceSettings SpaceSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSpaceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SpaceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeStudioLifecycleConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StudioLifecycleConfigArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StudioLifecycleConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StudioLifecycleConfigContent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StudioLifecycleConfigAppType StudioLifecycleConfigAppType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeStudioLifecycleConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StudioLifecycleConfigName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSubscribedWorkteamResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SubscribedWorkteam SubscribedWorkteam { get; set; }
	}
	
	/// <summary>
	/// Describes a work team of a vendor that does the a labelling job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscribedWorkteam
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkteamArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MarketplaceTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SellerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MarketplaceDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ListingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSubscribedWorkteamRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkteamArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTrainingJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TuningJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LabelingJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelArtifacts ModelArtifacts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus TrainingJobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SecondaryStatus SecondaryStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameters HyperParameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmSpecification AlgorithmSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Channel[] InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceConfig ResourceConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StoppingCondition StoppingCondition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TrainingStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TrainingEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecondaryStatusTransition[] SecondaryStatusTransitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricData[] FinalMetricDataList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableNetworkIsolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableInterContainerTrafficEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableManagedSpotTraining { get; set; }
		
		/// <summary>
		/// Contains information about the output location for managed spot training checkpoint data. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CheckpointConfig CheckpointConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TrainingTimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BillableTimeInSeconds { get; set; }
		
		/// <summary>
		/// Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the <code>DebugHookConfig</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DebugHookConfig DebugHookConfig { get; set; }
		
		/// <summary>
		/// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExperimentConfig ExperimentConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DebugRuleConfiguration[] DebugRuleConfigurations { get; set; }
		
		/// <summary>
		/// Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TensorBoardOutputConfig TensorBoardOutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DebugRuleEvaluationStatus[] DebugRuleEvaluationStatuses { get; set; }
		
		/// <summary>
		/// Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProfilerConfig ProfilerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfilerRuleConfiguration[] ProfilerRuleConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfilerRuleEvaluationStatus[] ProfilerRuleEvaluationStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCacheSetting ProfilingStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetryStrategy RetryStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingEnvironmentMap Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WarmPoolStatus WarmPoolStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SecondaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Starting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LaunchingMLInstances = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreparingTrainingStack = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Downloading = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DownloadingTrainingImage = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Training = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Uploading = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MaxRuntimeExceeded = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Interrupted = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MaxWaitTimeExceeded = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Restarting = 15,
	}
	
	/// <summary>
	/// <p>An array element of <code>SecondaryStatusTransitions</code> for <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrainingJob.html">DescribeTrainingJob</a>. It provides additional details about a status that the training job has transitioned through. A training job can be in one of several states, for example, starting, downloading, training, or uploading. Within each state, there are a number of intermediate states. For example, within the starting state, SageMaker could be starting the training job or launching the ML instances. These transitional states are referred to as the job's secondary status. </p> <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecondaryStatusTransition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SecondaryStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	/// <summary>
	/// The name, value, and date and time of a metric that was emitted to Amazon CloudWatch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	/// <summary>
	/// Information about the status of the rule evaluation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DebugRuleEvaluationStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleEvaluationJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleEvaluationStatus RuleEvaluationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RuleEvaluationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoIssuesFound = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IssuesFound = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 5,
	}
	
	/// <summary>
	/// Information about the status of the rule evaluation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfilerRuleEvaluationStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleEvaluationJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleEvaluationStatus RuleEvaluationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	/// <summary>
	/// Status and billing information about the warm pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WarmPoolStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WarmPoolResourceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ResourceRetainedBillableTimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReusedByJob { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum WarmPoolResourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reused = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InUse = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTrainingJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTransformJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransformJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransformJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus TransformJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxConcurrentTransforms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelClientConfig ModelClientConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxPayloadInMB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchStrategy BatchStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransformEnvironmentMap Environment { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransformInput TransformInput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransformOutput TransformOutput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDataCaptureConfig DataCaptureConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransformResources TransformResources { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TransformStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TransformEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LabelingJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobArn { get; set; }
		
		/// <summary>
		/// The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction Results with their Corresponding Input Records</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataProcessing DataProcessing { get; set; }
		
		/// <summary>
		/// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExperimentConfig ExperimentConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTransformJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransformJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTrialResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		/// <summary>
		/// Metadata properties of the tracking entity, trial, or trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetadataProperties MetadataProperties { get; set; }
	}
	
	/// <summary>
	/// The source of the trial.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrialSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTrialRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrialName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTrialComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentParameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentArtifacts InputArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentArtifacts OutputArtifacts { get; set; }
		
		/// <summary>
		/// Metadata properties of the tracking entity, trial, or trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetadataProperties MetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentMetricSummary[] Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LineageGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentSource[] Sources { get; set; }
	}
	
	/// <summary>
	/// The Amazon Resource Name (ARN) and job type of the source of a trial component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrialComponentSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
	}
	
	/// <summary>
	/// A summary of the metrics of a trial component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrialComponentMetricSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TimeStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Max { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Min { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Last { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Avg { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> StdDev { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTrialComponentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeUserProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomeEfsFileSystemUid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SingleSignOnUserIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SingleSignOnUserValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserSettings UserSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeUserProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeWorkforceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Workforce Workforce { get; set; }
	}
	
	/// <summary>
	/// A single private workforce, which is automatically created when you create your first private work team. You can create one private work force in each Amazon Web Services Region. By default, any workforce-related API operation used in a specific region will apply to the workforce created in that region. To learn how to create a private workforce, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">Create a Private Workforce</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Workforce
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkforceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkforceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceIpConfig SourceIpConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubDomain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CognitoConfig CognitoConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OidcConfigForResponse OidcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkforceVpcConfigResponse WorkforceVpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkforceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
	}
	
	/// <summary>
	/// Your OIDC IdP workforce configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OidcConfigForResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Issuer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizationEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TokenEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserInfoEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogoutEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JwksUri { get; set; }
	}
	
	/// <summary>
	/// A VpcConfig object that specifies the VPC that you want your workforce to connect to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkforceVpcConfigResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcEndpointId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum WorkforceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initializing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeWorkforceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkforceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeWorkteamResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Workteam Workteam { get; set; }
	}
	
	/// <summary>
	/// Provides details about a labeling work team.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Workteam
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkteamName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MemberDefinition[] MemberDefinitions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkteamArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WorkforceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ProductListingIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubDomain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfiguration NotificationConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeWorkteamRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkteamName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableSagemakerServicecatalogPortfolioOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableSagemakerServicecatalogPortfolioInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateTrialComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateTrialComponentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrialName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableSagemakerServicecatalogPortfolioOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableSagemakerServicecatalogPortfolioInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDeviceFleetReportResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EdgeOutputConfig OutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ReportGenerated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceStats DeviceStats { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AgentVersion[] AgentVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EdgeModelStat[] ModelStats { get; set; }
	}
	
	/// <summary>
	/// Status of devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceStats
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ConnectedDeviceCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int RegisteredDeviceCount { get; set; }
	}
	
	/// <summary>
	/// Edge Manager agent version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AgentVersion
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int AgentCount { get; set; }
	}
	
	/// <summary>
	/// Status of edge devices with this model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EdgeModelStat
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int OfflineDeviceCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ConnectedDeviceCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ActiveDeviceCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SamplingDeviceCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDeviceFleetReportRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLineageGroupPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LineageGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourcePolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLineageGroupPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LineageGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetModelPackageGroupPolicyOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourcePolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetModelPackageGroupPolicyInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSagemakerServicecatalogPortfolioStatusOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCacheSetting Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSagemakerServicecatalogPortfolioStatusInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetScalingConfigurationRecommendationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InferenceRecommendationsJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecommendationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TargetCpuUtilizationPerCore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingPolicyObjective ScalingPolicyObjective { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingPolicyMetric Metric { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DynamicScalingConfiguration DynamicScalingConfiguration { get; set; }
	}
	
	/// <summary>
	/// An object where you specify the anticipated traffic pattern for an endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScalingPolicyObjective
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinInvocationsPerMinute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxInvocationsPerMinute { get; set; }
	}
	
	/// <summary>
	/// The metric for a scaling policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScalingPolicyMetric
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InvocationsPerInstance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ModelLatency { get; set; }
	}
	
	/// <summary>
	/// An object with the recommended values for you to specify when creating an autoscaling policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DynamicScalingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ScaleInCooldown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ScaleOutCooldown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingPolicy[] ScalingPolicies { get; set; }
	}
	
	/// <summary>
	/// An object containing a recommended scaling policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScalingPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetTrackingScalingPolicyConfiguration TargetTracking { get; set; }
	}
	
	/// <summary>
	/// <p>A target tracking scaling policy. Includes support for predefined or customized metrics.</p> <p>When using the <a href="https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PutScalingPolicy.html">PutScalingPolicy</a> API, this parameter is required when you are creating a policy with the policy type <code>TargetTrackingScaling</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetTrackingScalingPolicyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricSpecification MetricSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TargetValue { get; set; }
	}
	
	/// <summary>
	/// An object containing information about a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PredefinedMetricSpecification Predefined { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomizedMetricSpecification Customized { get; set; }
	}
	
	/// <summary>
	/// A specification for a predefined metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PredefinedMetricSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PredefinedMetricType { get; set; }
	}
	
	/// <summary>
	/// A customized metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomizedMetricSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Statistic Statistic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Statistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SampleCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sum = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetScalingConfigurationRecommendationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InferenceRecommendationsJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecommendationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TargetCpuUtilizationPerCore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingPolicyObjective ScalingPolicyObjective { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSearchSuggestionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PropertyNameSuggestion[] PropertyNameSuggestions { get; set; }
	}
	
	/// <summary>
	/// A property name returned from a <code>GetSearchSuggestions</code> call that specifies a value in the <code>PropertyNameQuery</code> field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PropertyNameSuggestion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PropertyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSearchSuggestionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceType Resource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SuggestionQuery SuggestionQuery { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TrainingJob = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Experiment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExperimentTrial = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExperimentTrialComponent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Endpoint = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModelPackage = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModelPackageGroup = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pipeline = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PipelineExecution = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FeatureGroup = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Project = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FeatureMetadata = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HyperParameterTuningJob = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModelCard = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Model = 14,
	}
	
	/// <summary>
	/// Specified in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_GetSearchSuggestions.html">GetSearchSuggestions</a> request. Limits the property names that are included in the response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuggestionQuery
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PropertyNameQuery PropertyNameQuery { get; set; }
	}
	
	/// <summary>
	/// Part of the <code>SuggestionQuery</code> type. Specifies a hint for retrieving property names that begin with the specified text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PropertyNameQuery
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PropertyNameHint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportHubContentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubContentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportHubContentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubContentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubContentVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HubContentType HubContentType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DocumentSchemaVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubContentDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubContentDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubContentMarkdown { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubContentDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HubContentSearchKeywords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListActionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ActionSummary[] ActionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Lists the properties of an <i>action</i>. An action represents an action or activity. Some examples are a workflow step and a model deployment. Generally, an action involves at least one input artifact or output artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActionSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListActionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortActionsBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAlgorithmsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmSummary[] AlgorithmSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides summary information about an algorithm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlgorithmSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlgorithmName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlgorithmArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlgorithmDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmStatus AlgorithmStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAlgorithmsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAliasesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SageMakerImageVersionAliases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAliasesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppImageConfigsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppImageConfigDetails[] AppImageConfigs { get; set; }
	}
	
	/// <summary>
	/// The configuration for running a SageMaker image as a KernelGateway app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppImageConfigDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppImageConfigArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppImageConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KernelGatewayImageConfig KernelGatewayImageConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppImageConfigsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppImageConfigSortKey SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AppImageConfigSortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastModifiedTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppDetails[] Apps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Details about an Amazon SageMaker app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppType AppType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpaceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppSortKey SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainIdEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileNameEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpaceNameEquals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AppSortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListArtifactsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ArtifactSummary[] ArtifactSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Lists a summary of the properties of an artifact. An artifact represents a URI addressable object or data. Some examples are a dataset and a model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtifactSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ArtifactSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListArtifactsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppSortKey SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssociationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AssociationSummary[] AssociationSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Lists a summary of the properties of an association. An association is an entity that links other lineage or experiment entities. An example would be an association between a training job and a model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociationSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssociationEdgeType AssociationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssociationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssociationEdgeType AssociationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortAssociationsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortAssociationsBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SourceArn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DestinationArn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SourceType = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DestinationType = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAutoMLJobsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobSummary[] AutoMLJobSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides a summary about an AutoML job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLJobSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CandidateStatus AutoMLJobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobSecondaryStatus AutoMLJobSecondaryStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLPartialFailureReason[] PartialFailureReasons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAutoMLJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CandidateStatus StatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutoMLSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCandidatesForAutoMLJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoMLCandidate[] Candidates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCandidatesForAutoMLJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CandidateStatus StatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CandidateNameEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CandidateSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CandidateSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FinalObjectiveMetricValue = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCodeRepositoriesOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CodeRepositorySummary[] CodeRepositorySummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Specifies summary information about a Git repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodeRepositorySummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CodeRepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CodeRepositoryArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GitConfig GitConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCodeRepositoriesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CodeRepositorySortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CodeRepositorySortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastModifiedTime = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCompilationJobsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CompilationJobSummary[] CompilationJobSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of a model compilation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompilationJobSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CompilationJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CompilationJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompilationStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompilationEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetDevice CompilationTargetDevice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetPlatformOs CompilationTargetPlatformOs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetPlatformArch CompilationTargetPlatformArch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetPlatformAccelerator CompilationTargetPlatformAccelerator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CompilationJobStatus CompilationJobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCompilationJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CompilationJobStatus StatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListContextsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContextSummary[] ContextSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Lists a summary of the properties of a context. A context provides a logical grouping of other entities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContextSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContextArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContextName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContextSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContextType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListContextsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContextType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDataQualityJobDefinitionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringJobDefinitionSummary[] JobDefinitionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about a monitoring job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringJobDefinitionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringJobDefinitionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringJobDefinitionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDataQualityJobDefinitionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDeviceFleetsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeviceFleetSummary[] DeviceFleetSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary of the device fleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceFleetSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDeviceFleetsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListDeviceFleetsSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ListDeviceFleetsSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_TIME = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDevicesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeviceSummary[] DeviceSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary of the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IotThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RegistrationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LatestHeartbeat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EdgeModelSummary[] Models { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AgentVersion { get; set; }
	}
	
	/// <summary>
	/// Summary of model on edge device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EdgeModelSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDevicesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LatestHeartbeatAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDomainsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DomainDetails[] Domains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The domain's details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDomainsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEdgeDeploymentPlansResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EdgeDeploymentPlanSummary[] EdgeDeploymentPlanSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information summarizing an edge deployment plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EdgeDeploymentPlanSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EdgeDeploymentSuccess { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EdgeDeploymentPending { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EdgeDeploymentFailed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEdgeDeploymentPlansRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetNameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListEdgeDeploymentPlansSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ListEdgeDeploymentPlansSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_FLEET_NAME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_TIME = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_TIME = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEdgePackagingJobsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EdgePackagingJobSummary[] EdgePackagingJobSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary of edge packaging job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EdgePackagingJobSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgePackagingJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgePackagingJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EdgePackagingJobStatus EdgePackagingJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompilationJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEdgePackagingJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelNameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EdgePackagingJobStatus StatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListEdgePackagingJobsSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ListEdgePackagingJobsSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODEL_NAME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_TIME = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_TIME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEndpointConfigsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EndpointConfigSummary[] EndpointConfigs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides summary information for an endpoint configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointConfigSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfigName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfigArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEndpointConfigsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEndpointsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EndpointSummary[] Endpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides summary information for an endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EndpointStatus EndpointStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEndpointsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointStatus StatusEquals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListExperimentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExperimentSummary[] ExperimentSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of the properties of an experiment. To get the complete set of properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeExperiment.html">DescribeExperiment</a> API and provide the <code>ExperimentName</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The source of the experiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExperimentSource ExperimentSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListExperimentsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFeatureGroupsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FeatureGroupSummary[] FeatureGroupSummaries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The name, ARN, <code>CreationTime</code>, <code>FeatureGroup</code> values, <code>LastUpdatedTime</code> and <code>EnableOnlineStorage</code> status of a <code>FeatureGroup</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FeatureGroupSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureGroupStatus FeatureGroupStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfflineStoreStatus OfflineStoreStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFeatureGroupsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureGroupStatus FeatureGroupStatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfflineStoreStatusValue OfflineStoreStatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureGroupSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FeatureGroupSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FeatureGroupStatus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OfflineStoreStatus = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFlowDefinitionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FlowDefinitionSummary[] FlowDefinitionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains summary information about the flow definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlowDefinitionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowDefinitionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowDefinitionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FlowDefinitionStatus FlowDefinitionStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFlowDefinitionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListHubContentVersionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HubContentInfo[] HubContentSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about hub content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HubContentInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubContentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubContentArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubContentVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HubContentType HubContentType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DocumentSchemaVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubContentDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubContentDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HubContentSearchKeywords { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HubContentStatus HubContentStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListHubContentVersionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HubContentType HubContentType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubContentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxSchemaVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HubContentSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HubContentSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HubContentName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HubContentStatus = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListHubContentsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HubContentInfo[] HubContentSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListHubContentsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HubContentType HubContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxSchemaVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HubContentSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListHubsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HubInfo[] HubSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about a hub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HubInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HubSearchKeywords { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HubStatus HubStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListHubsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HubSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HubSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HubName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HubStatus = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccountIdOwner = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListHumanTaskUisResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HumanTaskUiSummary[] HumanTaskUiSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Container for human task user interface information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HumanTaskUiSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HumanTaskUiName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HumanTaskUiArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListHumanTaskUisRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListHyperParameterTuningJobsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobSummary[] HyperParameterTuningJobSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides summary information about a hyperparameter tuning job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterTuningJobSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HyperParameterTuningJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HyperParameterTuningJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CandidateStatus HyperParameterTuningJobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobStrategyType Strategy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset HyperParameterTuningEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrainingJobStatusCounters TrainingJobStatusCounters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectiveStatusCounters ObjectiveStatusCounters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceLimits ResourceLimits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListHyperParameterTuningJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobSortByOptions SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CandidateStatus StatusEquals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HyperParameterTuningJobSortByOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImageVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ImageVersion[] ImageVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A version of a SageMaker <code>Image</code>. A version represents an existing container image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageVersion
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageVersionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ImageVersionStatus ImageVersionStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImageVersionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImageVersionSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImageVersionSortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ImageVersionSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_TIME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERSION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ImageVersionSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImagesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Image[] Images { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A SageMaker image. A SageMaker image represents a set of container images that are derived from a common base container image. Each of these container images is represented by a SageMaker <code>ImageVersion</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Image
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ImageStatus ImageStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImagesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImageSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImageVersionSortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ImageSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_TIME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE_NAME = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInferenceExperimentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentSummary[] InferenceExperiments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Lists a summary of properties of an inference experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InferenceExperimentSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentSchedule Schedule { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInferenceExperimentsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentStatus StatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInferenceRecommendationsJobStepsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceRecommendationsJobStep[] Steps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A returned array object for the <code>Steps</code> response field in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListInferenceRecommendationsJobSteps.html">ListInferenceRecommendationsJobSteps</a> API command.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InferenceRecommendationsJobStep
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecommendationStepType StepType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobInferenceBenchmark InferenceBenchmark { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RecommendationStepType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BENCHMARK = 0,
	}
	
	/// <summary>
	/// The details for a specific benchmark from an Inference Recommender job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecommendationJobInferenceBenchmark
	{
		
		/// <summary>
		/// The metrics of recommendations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecommendationMetrics Metrics { get; set; }
		
		/// <summary>
		/// The endpoint configuration made by Inference Recommender during a recommendation job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EndpointOutputConfiguration EndpointConfiguration { get; set; }
		
		/// <summary>
		/// Defines the model configuration. Includes the specification name and environment parameters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelConfiguration ModelConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// The metrics for an existing endpoint compared in an Inference Recommender job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InferenceMetrics EndpointMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset InvocationEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset InvocationStartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInferenceRecommendationsJobStepsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationStepType StepType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInferenceRecommendationsJobsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InferenceRecommendationsJob[] InferenceRecommendationsJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A structure that contains a list of recommendation jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InferenceRecommendationsJob
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobType JobType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SamplePayloadUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageVersionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInferenceRecommendationsJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationJobStatus StatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelNameEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageVersionArnEquals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLabelingJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobSummary[] LabelingJobSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides summary information about a labeling job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelingJobSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LabelingJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LabelingJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobStatus LabelingJobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LabelCounters LabelCounters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkteamArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PreHumanTaskLambdaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AnnotationConsolidationLambdaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobOutput LabelingJobOutput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobInputConfig InputConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLabelingJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobStatus StatusEquals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLabelingJobsForWorkteamResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LabelingJobForWorkteamSummary[] LabelingJobSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides summary information for a work team.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelingJobForWorkteamSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LabelingJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobReferenceCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkRequesterAccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LabelCountersForWorkteam LabelCounters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfHumanWorkersPerDataObject { get; set; }
	}
	
	/// <summary>
	/// Provides counts for human-labeled tasks in the labeling job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelCountersForWorkteam
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HumanLabeled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PendingHuman { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLabelingJobsForWorkteamRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkteamArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobReferenceCodeContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppSortKey SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLineageGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LineageGroupSummary[] LineageGroupSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Lists a summary of the properties of a lineage group. A lineage group provides a group of shareable lineage entity resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LineageGroupSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LineageGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LineageGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLineageGroupsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelBiasJobDefinitionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringJobDefinitionSummary[] JobDefinitionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelBiasJobDefinitionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelCardExportJobsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelCardExportJobSummary[] ModelCardExportJobSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The summary of the Amazon SageMaker Model Card export job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelCardExportJobSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardExportJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardExportJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelCardExportJobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ModelCardVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelCardExportJobsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ModelCardVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardExportJobNameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCardExportJobStatus StatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelCardVersionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelCardVersionSummary[] ModelCardVersionSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of a specific version of the model card.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelCardVersionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelCardStatus ModelCardStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ModelCardVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelCardVersionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCardStatus ModelCardStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCardVersionSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelCardVersionSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Version = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelCardsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelCardSummary[] ModelCardSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of the model card.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelCardSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelCardStatus ModelCardStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelCardsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCardStatus ModelCardStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelExplainabilityJobDefinitionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringJobDefinitionSummary[] JobDefinitionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelExplainabilityJobDefinitionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelMetadataResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelMetadataSummary[] ModelMetadataSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of the model metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelMetadataSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Framework { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Task { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelMetadataRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ModelMetadataSearchExpression SearchExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// One or more filters that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelMetadataSearchExpression
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ModelMetadataFilter[] Filters { get; set; }
	}
	
	/// <summary>
	/// Part of the search expression. You can specify the name and value (domain, task, framework, framework version, task, and model).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelMetadataFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelMetadataFilterType Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelMetadataFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Framework = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FrameworkVersion = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelPackageGroupsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageGroupSummary[] ModelPackageGroupSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about a model group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelPackageGroupSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageGroupStatus ModelPackageGroupStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelPackageGroupsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelPackagesOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageSummary[] ModelPackageSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides summary information about a model package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelPackageSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ModelPackageVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmStatus ModelPackageStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelApprovalStatus ModelApprovalStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelPackagesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelApprovalStatus ModelApprovalStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageType ModelPackageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelPackageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Versioned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unversioned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Both = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelQualityJobDefinitionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringJobDefinitionSummary[] JobDefinitionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelQualityJobDefinitionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelSummary[] Models { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides summary information about a model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListModelsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMonitoringAlertHistoryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringAlertHistorySummary[] MonitoringAlertHistory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides summary information of an alert's history.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringAlertHistorySummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringAlertName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringAlertStatus AlertStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MonitoringAlertStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InAlert = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMonitoringAlertHistoryRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringAlertName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringAlertHistorySortKey SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringAlertStatus StatusEquals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MonitoringAlertHistorySortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMonitoringAlertsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringAlertSummary[] MonitoringAlertSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides summary information about a monitor alert.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringAlertSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringAlertName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringAlertStatus AlertStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DatapointsToAlert { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EvaluationPeriod { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringAlertActions Actions { get; set; }
	}
	
	/// <summary>
	/// A list of alert actions taken in response to an alert going into <code>InAlert</code> status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringAlertActions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ModelDashboardIndicatorAction ModelDashboardIndicator { get; set; }
	}
	
	/// <summary>
	/// An alert action taken to light up an icon on the Amazon SageMaker Model Dashboard when an alert goes into <code>InAlert</code> status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelDashboardIndicatorAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMonitoringAlertsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMonitoringExecutionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringExecutionSummary[] MonitoringExecutionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMonitoringExecutionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringExecutionSortKey SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ScheduledTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ScheduledTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExecutionStatus StatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringJobDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringType MonitoringTypeEquals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MonitoringExecutionSortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduledTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMonitoringSchedulesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringScheduleSummary[] MonitoringScheduleSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summarizes the monitoring schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringScheduleSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleStatus MonitoringScheduleStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringJobDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringType MonitoringType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMonitoringSchedulesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduleStatus StatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringJobDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringType MonitoringTypeEquals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListNotebookInstanceLifecycleConfigsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookInstanceLifecycleConfigSummary[] NotebookInstanceLifecycleConfigs { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of a notebook instance lifecycle configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotebookInstanceLifecycleConfigSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceLifecycleConfigName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceLifecycleConfigArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListNotebookInstanceLifecycleConfigsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CodeRepositorySortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListNotebookInstancesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookInstanceSummary[] NotebookInstances { get; set; }
	}
	
	/// <summary>
	/// Provides summary information for an SageMaker notebook instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotebookInstanceSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookInstanceStatus NotebookInstanceStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceLifecycleConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultCodeRepository { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AdditionalCodeRepositories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListNotebookInstancesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookInstanceStatus StatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceLifecycleConfigNameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultCodeRepositoryContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalCodeRepositoryEquals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPipelineExecutionStepsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineExecutionStep[] PipelineExecutionSteps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An execution of a step in a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineExecutionStep
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StepName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StepDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StepDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StepStatus StepStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CacheHitResult CacheHitResult { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AttemptCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineExecutionStepMetadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectiveExecutionResult SelectiveExecutionResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StepStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Starting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Executing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 5,
	}
	
	/// <summary>
	/// Details on the cache hit of a pipeline execution step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheHitResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourcePipelineExecutionArn { get; set; }
	}
	
	/// <summary>
	/// Metadata for a step execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineExecutionStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingJobStepMetadata TrainingJob { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingJobStepMetadata ProcessingJob { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransformJobStepMetadata TransformJob { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TuningJobStepMetaData TuningJob { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelStepMetadata Model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RegisterModelStepMetadata RegisterModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConditionStepMetadata Condition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CallbackStepMetadata Callback { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LambdaStepMetadata Lambda { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QualityCheckStepMetadata QualityCheck { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClarifyCheckStepMetadata ClarifyCheck { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EMRStepMetadata EMR { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FailStepMetadata Fail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLJobStepMetadata AutoMLJob { get; set; }
	}
	
	/// <summary>
	/// Metadata for a training job step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrainingJobStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Metadata for a processing job step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessingJobStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Metadata for a transform job step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransformJobStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Metadata for a tuning step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TuningJobStepMetaData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Metadata for Model steps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Metadata for a register model job step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterModelStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Metadata for a Condition step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConditionStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConditionOutcome Outcome { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ConditionOutcome
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		True = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		False = 1,
	}
	
	/// <summary>
	/// Metadata about a callback step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallbackStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CallbackToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SqsQueueUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputParameter[] OutputParameters { get; set; }
	}
	
	/// <summary>
	/// An output parameter of a pipeline step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutputParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Metadata for a Lambda step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LambdaStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputParameter[] OutputParameters { get; set; }
	}
	
	/// <summary>
	/// Container for the metadata for a Quality check step. For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-quality-check">QualityCheck step</a> in the <i>Amazon SageMaker Developer Guide</i>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QualityCheckStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CheckType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BaselineUsedForDriftCheckStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BaselineUsedForDriftCheckConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CalculatedBaselineStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CalculatedBaselineConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationReport { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CheckJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipCheck { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RegisterNewBaseline { get; set; }
	}
	
	/// <summary>
	/// The container for the metadata for the ClarifyCheck step. For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-clarify-check">ClarifyCheck step</a> in the <i>Amazon SageMaker Developer Guide</i>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClarifyCheckStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CheckType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BaselineUsedForDriftCheckConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CalculatedBaselineConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationReport { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CheckJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipCheck { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RegisterNewBaseline { get; set; }
	}
	
	/// <summary>
	/// The configurations and outcomes of an Amazon EMR step execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EMRStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StepId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StepName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogFilePath { get; set; }
	}
	
	/// <summary>
	/// The container for the metadata for Fail step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// Metadata for an AutoML job step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoMLJobStepMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// The ARN from an execution of the current pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelectiveExecutionResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourcePipelineExecutionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPipelineExecutionStepsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPipelineExecutionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineExecutionSummary[] PipelineExecutionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A pipeline execution summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineExecutionSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineExecutionStatus PipelineExecutionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionFailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPipelineExecutionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortPipelineExecutionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortPipelineExecutionsBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PipelineExecutionArn = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPipelineParametersForExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] PipelineParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Assigns a value to a named Pipeline parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Parameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPipelineParametersForExecutionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPipelinesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineSummary[] PipelineSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastExecutionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPipelinesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineNamePrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProcessingJobsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProcessingJobSummary[] ProcessingJobSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary of information about a processing job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessingJobSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProcessingJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProcessingJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ProcessingEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus ProcessingJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExitMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProcessingJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus StatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProjectsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProjectSummary[] ProjectSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about a project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProjectStatus ProjectStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProjectsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListResourceCatalogsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceCatalog[] ResourceCatalogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  A resource catalog containing all of the resources of a specific resource type within a resource owner account. For an example on sharing the Amazon SageMaker Feature Store <code>DefaultFeatureGroupCatalog</code>, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/feature-store-cross-account-discoverability-share-sagemaker-catalog.html">Share Amazon SageMaker Catalog resource type</a> in the Amazon SageMaker Developer Guide. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceCatalog
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceCatalogArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceCatalogName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListResourceCatalogsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppSortKey SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSpacesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SpaceDetails[] Spaces { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The space's details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpaceDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSpacesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpaceSortKey SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainIdEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpaceNameContains { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SpaceSortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastModifiedTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListStageDevicesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeviceDeploymentSummary[] DeviceDeploymentSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information summarizing device details and deployment status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceDeploymentSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeployedStageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceDeploymentStatus DeviceDeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceDeploymentStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeploymentStartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DeviceDeploymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READYTODEPLOY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListStageDevicesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ExcludeDevicesDeployedInOtherStage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListStudioLifecycleConfigsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StudioLifecycleConfigDetails[] StudioLifecycleConfigs { get; set; }
	}
	
	/// <summary>
	/// Details of the Studio Lifecycle Configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StudioLifecycleConfigDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StudioLifecycleConfigArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StudioLifecycleConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StudioLifecycleConfigAppType StudioLifecycleConfigAppType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListStudioLifecycleConfigsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StudioLifecycleConfigAppType AppTypeEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppImageConfigSortKey SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSubscribedWorkteamsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SubscribedWorkteam[] SubscribedWorkteams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSubscribedWorkteamsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTrainingJobsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrainingJobSummary[] TrainingJobSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides summary information about a training job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrainingJobSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TrainingEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus TrainingJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WarmPoolStatus WarmPoolStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTrainingJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus StatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WarmPoolResourceStatus WarmPoolStatusEquals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTrainingJobsForHyperParameterTuningJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTrainingJobSummary[] TrainingJobSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTrainingJobsForHyperParameterTuningJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HyperParameterTuningJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus StatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingJobSortByOptions SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TrainingJobSortByOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FinalObjectiveMetricValue = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTransformJobsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransformJobSummary[] TransformJobSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of a transform job. Multiple <code>TransformJobSummary</code> objects are returned as a list after in response to a <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTransformJobs.html">ListTransformJobs</a> call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransformJobSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransformJobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransformJobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TransformEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus TransformJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTransformJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus StatusEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMLSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTrialComponentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentSummary[] TrialComponentSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of the properties of a trial component. To get all the properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrialComponent.html">DescribeTrialComponent</a> API and provide the <code>TrialComponentName</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrialComponentSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) and job type of the source of a trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentSource TrialComponentSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTrialComponentsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTrialsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrialSummary[] TrialSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of the properties of a trial. To get the complete set of properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrial.html">DescribeTrial</a> API and provide the <code>TrialName</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrialSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The source of the trial.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrialSource TrialSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTrialsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortActionsBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUserProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserProfileDetails[] UserProfiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The user profile details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserProfileDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUserProfilesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpaceSortKey SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainIdEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileNameContains { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkforcesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Workforce[] Workforces { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkforcesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListWorkforcesSortByOptions SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ListWorkforcesSortByOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateDate = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkteamsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Workteam[] Workteams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkteamsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListWorkforcesSortByOptions SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameContains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutModelPackageGroupPolicyOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutModelPackageGroupPolicyInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourcePolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryLineageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Vertex[] Vertices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Edge[] Edges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A lineage entity connected to the starting entity(ies).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Vertex
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineageType LineageType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LineageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TrialComponent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Artifact = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Context = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Action = 3,
	}
	
	/// <summary>
	/// A directed edge connecting two lineage entities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Edge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssociationEdgeType AssociationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryLineageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StartArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Direction Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeEdges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QueryFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxDepth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Direction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Both = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascendants = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descendants = 2,
	}
	
	/// <summary>
	/// A set of filters to narrow the set of lineage entities connected to the <code>StartArn</code>(s) returned by the <code>QueryLineage</code> API action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Types { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineageType[] LineageTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ModifiedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ModifiedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QueryProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryProperties
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterDevicesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Device[] Devices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Information of a particular device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Device
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IotThingName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenderUiTemplateResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RenderedContent { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RenderingError[] Errors { get; set; }
	}
	
	/// <summary>
	/// A description of an error that occurred while rendering the template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenderingError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenderUiTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UiTemplate UiTemplate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RenderableTask Task { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HumanTaskUiArn { get; set; }
	}
	
	/// <summary>
	/// Contains input values for a task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenderableTask
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetryPipelineExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetryPipelineExecutionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParallelismConfiguration ParallelismConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SearchRecord[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A single resource returned as part of the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchRecord
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingJob TrainingJob { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Experiment Experiment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Trial Trial { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponent TrialComponent { get; set; }
		
		/// <summary>
		/// A hosted endpoint for real-time inference.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Endpoint Endpoint { get; set; }
		
		/// <summary>
		/// A versioned model that can be deployed for SageMaker inference.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ModelPackage ModelPackage { get; set; }
		
		/// <summary>
		/// A group of versioned models in the model registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageGroup ModelPackageGroup { get; set; }
		
		/// <summary>
		/// A SageMaker Model Building Pipeline instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Pipeline Pipeline { get; set; }
		
		/// <summary>
		/// An execution of a pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelineExecution PipelineExecution { get; set; }
		
		/// <summary>
		/// Amazon SageMaker Feature Store stores features in a collection called Feature Group. A Feature Group can be visualized as a table which has rows, with a unique identifier for each row where each column in the table is a feature. In principle, a Feature Group is composed of features and values per features.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FeatureGroup FeatureGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Project Project { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureMetadata FeatureMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobSearchEntity HyperParameterTuningJob { get; set; }
		
		/// <summary>
		/// A model displayed in the Amazon SageMaker Model Dashboard.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ModelDashboardModel Model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCard ModelCard { get; set; }
	}
	
	/// <summary>
	/// Contains information about a training job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrainingJob
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TuningJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LabelingJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelArtifacts ModelArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus TrainingJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecondaryStatus SecondaryStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameters HyperParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmSpecification AlgorithmSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Channel[] InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceConfig ResourceConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StoppingCondition StoppingCondition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TrainingStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TrainingEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecondaryStatusTransition[] SecondaryStatusTransitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricData[] FinalMetricDataList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableNetworkIsolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableInterContainerTrafficEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableManagedSpotTraining { get; set; }
		
		/// <summary>
		/// Contains information about the output location for managed spot training checkpoint data. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CheckpointConfig CheckpointConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TrainingTimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BillableTimeInSeconds { get; set; }
		
		/// <summary>
		/// Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the <code>DebugHookConfig</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DebugHookConfig DebugHookConfig { get; set; }
		
		/// <summary>
		/// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExperimentConfig ExperimentConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DebugRuleConfiguration[] DebugRuleConfigurations { get; set; }
		
		/// <summary>
		/// Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TensorBoardOutputConfig TensorBoardOutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DebugRuleEvaluationStatus[] DebugRuleEvaluationStatuses { get; set; }
		
		/// <summary>
		/// Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProfilerConfig ProfilerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingEnvironmentMap Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetryStrategy RetryStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The properties of an experiment as returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Experiment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The source of the experiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExperimentSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The properties of a trial as returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Trial
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
		
		/// <summary>
		/// The source of the trial.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrialSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		/// <summary>
		/// Metadata properties of the tracking entity, trial, or trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetadataProperties MetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentSimpleSummary[] TrialComponentSummaries { get; set; }
	}
	
	/// <summary>
	/// A short summary of a trial component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrialComponentSimpleSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentArn { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) and job type of the source of a trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentSource TrialComponentSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
	}
	
	/// <summary>
	/// The properties of a trial component as returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrialComponent
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentSource Source { get; set; }
		
		/// <summary>
		/// The status of the trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentParameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentArtifacts InputArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentArtifacts OutputArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentMetricSummary[] Metrics { get; set; }
		
		/// <summary>
		/// Metadata properties of the tracking entity, trial, or trial component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetadataProperties MetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentSourceDetail SourceDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LineageGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parent[] Parents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RunName { get; set; }
	}
	
	/// <summary>
	/// Detailed information about the source of a trial component. Either <code>ProcessingJob</code> or <code>TrainingJob</code> is returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrialComponentSourceDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingJob TrainingJob { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingJob ProcessingJob { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransformJob TransformJob { get; set; }
	}
	
	/// <summary>
	/// An Amazon SageMaker processing job that is used to analyze data and evaluate models. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/processing-job.html">Process Data and Evaluate Models</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessingJob
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingInput[] ProcessingInputs { get; set; }
		
		/// <summary>
		/// Configuration for uploading output from the processing container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingOutputConfig ProcessingOutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProcessingJobName { get; set; }
		
		/// <summary>
		/// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingResources ProcessingResources { get; set; }
		
		/// <summary>
		/// Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingStoppingCondition StoppingCondition { get; set; }
		
		/// <summary>
		/// Configuration to run a processing job in a specified container image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AppSpecification AppSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingEnvironmentMap Environment { get; set; }
		
		/// <summary>
		/// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkConfig NetworkConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExperimentConfig ExperimentConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProcessingJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus ProcessingJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExitMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ProcessingEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ProcessingStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A batch transform job. For information about SageMaker batch transform, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Use Batch Transform</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransformJob
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransformJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransformJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentPrimaryStatus TransformJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxConcurrentTransforms { get; set; }
		
		/// <summary>
		/// Configures the timeout and maximum number of retries for processing a transform job invocation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ModelClientConfig ModelClientConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxPayloadInMB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchStrategy BatchStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransformEnvironmentMap Environment { get; set; }
		
		/// <summary>
		/// Describes the input source of a transform job and the way the transform job consumes it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransformInput TransformInput { get; set; }
		
		/// <summary>
		/// Describes the results of a transform job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransformOutput TransformOutput { get; set; }
		
		/// <summary>
		/// Describes the resources, including ML instance types and ML instance count, to use for transform job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransformResources TransformResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TransformStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TransformEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LabelingJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobArn { get; set; }
		
		/// <summary>
		/// The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction Results with their Corresponding Input Records</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataProcessing DataProcessing { get; set; }
		
		/// <summary>
		/// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExperimentConfig ExperimentConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Configuration to control how SageMaker captures inference data for batch transform jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BatchDataCaptureConfig DataCaptureConfig { get; set; }
	}
	
	/// <summary>
	/// The trial that a trial component is associated with and the experiment the trial is part of. A component might not be associated with a trial. A component can be associated with multiple trials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Parent
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
	}
	
	/// <summary>
	/// A hosted endpoint for real-time inference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Endpoint
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantSummary[] ProductionVariants { get; set; }
		
		/// <summary>
		/// The currently active data capture configuration used by your Endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataCaptureConfigSummary DataCaptureConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EndpointStatus EndpointStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringSchedule[] MonitoringSchedules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantSummary[] ShadowProductionVariants { get; set; }
	}
	
	/// <summary>
	/// A schedule for a model monitoring job. For information about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringSchedule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduleStatus MonitoringScheduleStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringType MonitoringType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Configures the monitoring schedule and defines the monitoring job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringScheduleConfig MonitoringScheduleConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		/// <summary>
		/// Summary of information about the last monitoring job to run.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringExecutionSummary LastMonitoringExecutionSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A versioned model that can be deployed for SageMaker inference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelPackage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ModelPackageVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceSpecification InferenceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceAlgorithmSpecification SourceAlgorithmSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageValidationSpecification ValidationSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmStatus ModelPackageStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageStatusDetails ModelPackageStatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CertifyForMarketplace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelApprovalStatus ModelApprovalStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetadataProperties MetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelMetrics ModelMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApprovalDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Task { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SamplePayloadUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdditionalInferenceSpecificationDefinition[] AdditionalInferenceSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerMetadataMap CustomerMetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DriftCheckBaselines DriftCheckBaselines { get; set; }
	}
	
	/// <summary>
	/// A group of versioned models in the model registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelPackageGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelPackageGroupStatus ModelPackageGroupStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A SageMaker Model Building Pipeline instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Pipeline
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineStatus PipelineStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastRunTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParallelismConfiguration ParallelismConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// An execution of a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineExecution
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineExecutionStatus PipelineExecutionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionDescription { get; set; }
		
		/// <summary>
		/// Specifies the names of the experiment and trial created by a pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelineExperimentConfig PipelineExperimentConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParallelismConfiguration ParallelismConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] PipelineParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectiveExecutionConfig SelectiveExecutionConfig { get; set; }
	}
	
	/// <summary>
	/// Amazon SageMaker Feature Store stores features in a collection called Feature Group. A Feature Group can be visualized as a table which has rows, with a unique identifier for each row where each column in the table is a feature. In principle, a Feature Group is composed of features and values per features.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FeatureGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecordIdentifierFeatureName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventTimeFeatureName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureDefinition[] FeatureDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// <p>Use this to specify the Amazon Web Services Key Management Service (KMS) Key ID, or <code>KMSKeyId</code>, for at rest data encryption. You can turn <code>OnlineStore</code> on or off by specifying the <code>EnableOnlineStore</code> flag at General Assembly.</p> <p>The default value is <code>False</code>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OnlineStoreConfig OnlineStoreConfig { get; set; }
		
		/// <summary>
		/// <p>The configuration of an <code>OfflineStore</code>.</p> <p>Provide an <code>OfflineStoreConfig</code> in a request to <code>CreateFeatureGroup</code> to create an <code>OfflineStore</code>.</p> <p>To encrypt an <code>OfflineStore</code> using at rest data encryption, specify Amazon Web Services Key Management Service (KMS) key ID, or <code>KMSKeyId</code>, in <code>S3StorageConfig</code>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OfflineStoreConfig OfflineStoreConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureGroupStatus FeatureGroupStatus { get; set; }
		
		/// <summary>
		/// The status of <code>OfflineStore</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OfflineStoreStatus OfflineStoreStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LastUpdateStatus LastUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The properties of a project as returned by the Search API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectDescription { get; set; }
		
		/// <summary>
		/// Details that you specify to provision a service catalog product. For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceCatalogProvisioningDetails ServiceCatalogProvisioningDetails { get; set; }
		
		/// <summary>
		/// Details of a provisioned service catalog product. For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceCatalogProvisionedProductDetails ServiceCatalogProvisionedProductDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectStatus ProjectStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
	}
	
	/// <summary>
	/// The metadata for a feature. It can either be metadata that you specify, or metadata that is updated automatically.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FeatureMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FeatureName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureType FeatureType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureParameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// An entity returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SearchRecord.html">SearchRecord</a> API containing the properties of a hyperparameter tuning job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HyperParameterTuningJobSearchEntity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HyperParameterTuningJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HyperParameterTuningJobArn { get; set; }
		
		/// <summary>
		/// Configures a hyperparameter tuning job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobConfig HyperParameterTuningJobConfig { get; set; }
		
		/// <summary>
		/// Defines the training jobs launched by a hyperparameter tuning job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTrainingJobDefinition TrainingJobDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTrainingJobDefinition[] TrainingJobDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CandidateStatus HyperParameterTuningJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset HyperParameterTuningEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// The numbers of training jobs launched by a hyperparameter tuning job, categorized by status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrainingJobStatusCounters TrainingJobStatusCounters { get; set; }
		
		/// <summary>
		/// Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ObjectiveStatusCounters ObjectiveStatusCounters { get; set; }
		
		/// <summary>
		/// The container for the summary information about a training job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTrainingJobSummary BestTrainingJob { get; set; }
		
		/// <summary>
		/// The container for the summary information about a training job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTrainingJobSummary OverallBestTrainingJob { get; set; }
		
		/// <summary>
		/// <p>Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.</p> <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.</p> <note> <p>All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobWarmStartConfig WarmStartConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobCompletionDetails TuningJobCompletionDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobConsumedResources ConsumedResources { get; set; }
	}
	
	/// <summary>
	/// A model displayed in the Amazon SageMaker Model Dashboard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelDashboardModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Model Model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelDashboardEndpoint[] Endpoints { get; set; }
		
		/// <summary>
		/// A batch transform job. For information about SageMaker batch transform, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Use Batch Transform</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransformJob LastBatchTransformJob { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelDashboardMonitoringSchedule[] MonitoringSchedules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelDashboardModelCard ModelCard { get; set; }
	}
	
	/// <summary>
	/// The properties of a model as returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Model
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		/// <summary>
		/// Describes the container, as part of model definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContainerDefinition PrimaryContainer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContainerDefinition[] Containers { get; set; }
		
		/// <summary>
		/// Specifies details about how containers in a multi-container endpoint are run.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InferenceExecutionConfig InferenceExecutionConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionRoleArn { get; set; }
		
		/// <summary>
		/// Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableNetworkIsolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentRecommendation DeploymentRecommendation { get; set; }
	}
	
	/// <summary>
	/// An endpoint that hosts a model displayed in the Amazon SageMaker Model Dashboard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelDashboardEndpoint
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EndpointStatus EndpointStatus { get; set; }
	}
	
	/// <summary>
	/// A monitoring schedule for a model displayed in the Amazon SageMaker Model Dashboard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelDashboardMonitoringSchedule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduleStatus MonitoringScheduleStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringType MonitoringType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Configures the monitoring schedule and defines the monitoring job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringScheduleConfig MonitoringScheduleConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoringAlertSummary[] MonitoringAlertSummaries { get; set; }
		
		/// <summary>
		/// Summary of information about the last monitoring job to run.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoringExecutionSummary LastMonitoringExecutionSummary { get; set; }
	}
	
	/// <summary>
	/// The model card for a model displayed in the Amazon SageMaker Model Dashboard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelDashboardModelCard
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ModelCardVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCardStatus ModelCardStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCardSecurityConfig SecurityConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RiskRating { get; set; }
	}
	
	/// <summary>
	/// An Amazon SageMaker Model Card.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelCard
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ModelCardVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCardStatus ModelCardStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCardSecurityConfig SecurityConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContext LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RiskRating { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceType Resource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SearchExpression SearchExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CrossAccountFilterOption CrossAccountFilterOption { get; set; }
	}
	
	/// <summary>
	/// <p>A multi-expression that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results. You must specify at least one subexpression, filter, or nested filter. A <code>SearchExpression</code> can contain up to twenty elements.</p> <p>A <code>SearchExpression</code> contains the following components:</p> <ul> <li> <p>A list of <code>Filter</code> objects. Each filter defines a simple Boolean expression comprised of a resource property name, Boolean operator, and value.</p> </li> <li> <p>A list of <code>NestedFilter</code> objects. Each nested filter defines a list of Boolean expressions using a list of resource properties. A nested filter is satisfied if a single object in the list satisfies all Boolean expressions.</p> </li> <li> <p>A list of <code>SearchExpression</code> objects. A search expression object can be nested in a list of search expression objects.</p> </li> <li> <p>A Boolean operator: <code>And</code> or <code>Or</code>.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchExpression
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NestedFilters[] NestedFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SearchExpression[] SubExpressions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BooleanOperator Operator { get; set; }
	}
	
	/// <summary>
	/// <p>A conditional statement for a search expression that includes a resource property, a Boolean operator, and a value. Resources that match the statement are returned in the results from the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API.</p> <p>If you specify a <code>Value</code>, but not an <code>Operator</code>, SageMaker uses the equals operator.</p> <p>In search, there are several property types:</p> <dl> <dt>Metrics</dt> <dd> <p>To define a metric filter, enter a value using the form <code>"Metrics.&lt;name&gt;"</code>, where <code>&lt;name&gt;</code> is a metric name. For example, the following filter searches for training jobs with an <code>"accuracy"</code> metric greater than <code>"0.9"</code>:</p> <p> <code>{</code> </p> <p> <code>"Name": "Metrics.accuracy",</code> </p> <p> <code>"Operator": "GreaterThan",</code> </p> <p> <code>"Value": "0.9"</code> </p> <p> <code>}</code> </p> </dd> <dt>HyperParameters</dt> <dd> <p>To define a hyperparameter filter, enter a value with the form <code>"HyperParameters.&lt;name&gt;"</code>. Decimal hyperparameter values are treated as a decimal in a comparison if the specified <code>Value</code> is also a decimal value. If the specified <code>Value</code> is an integer, the decimal hyperparameter values are treated as integers. For example, the following filter is satisfied by training jobs with a <code>"learning_rate"</code> hyperparameter that is less than <code>"0.5"</code>:</p> <p> <code> {</code> </p> <p> <code> "Name": "HyperParameters.learning_rate",</code> </p> <p> <code> "Operator": "LessThan",</code> </p> <p> <code> "Value": "0.5"</code> </p> <p> <code> }</code> </p> </dd> <dt>Tags</dt> <dd> <p>To define a tag filter, enter a value with the form <code>Tags.&lt;key&gt;</code>.</p> </dd> </dl>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Filter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Operator Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Operator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equals = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotEquals = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThanOrEqualTo = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThanOrEqualTo = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Contains = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exists = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotExists = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		In = 9,
	}
	
	/// <summary>
	/// <p>A list of nested <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Filter.html">Filter</a> objects. A resource must satisfy the conditions of all filters to be included in the results returned from the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API.</p> <p>For example, to filter on a training job's <code>InputDataConfig</code> property with a specific channel name and <code>S3Uri</code> prefix, define the following filters:</p> <ul> <li> <p> <code>'{Name:"InputDataConfig.ChannelName", "Operator":"Equals", "Value":"train"}',</code> </p> </li> <li> <p> <code>'{Name:"InputDataConfig.DataSource.S3DataSource.S3Uri", "Operator":"Contains", "Value":"mybucket/catdata"}'</code> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NestedFilters
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NestedPropertyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BooleanOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		And = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Or = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CrossAccountFilterOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SameAccount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CrossAccount = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SendPipelineExecutionStepFailureResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SendPipelineExecutionStepFailureRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallbackToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SendPipelineExecutionStepSuccessResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SendPipelineExecutionStepSuccessRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallbackToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputParameter[] OutputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartEdgeDeploymentStageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartInferenceExperimentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InferenceExperimentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartInferenceExperimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartMonitoringScheduleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartNotebookInstanceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartPipelineExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartPipelineExecutionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] PipelineParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParallelismConfiguration ParallelismConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelectiveExecutionConfig SelectiveExecutionConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopAutoMLJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AutoMLJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopCompilationJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CompilationJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopEdgeDeploymentStageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeDeploymentPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopEdgePackagingJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgePackagingJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopHyperParameterTuningJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HyperParameterTuningJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopInferenceExperimentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InferenceExperimentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopInferenceExperimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModelVariantActionMap ModelVariantActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelVariantConfig[] DesiredModelVariants { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentStopDesiredState DesiredState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelVariantActionMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InferenceExperimentStopDesiredState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopInferenceRecommendationsJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopLabelingJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LabelingJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopMonitoringScheduleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopNotebookInstanceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopPipelineExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopPipelineExecutionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopProcessingJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProcessingJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopTrainingJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopTransformJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransformJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateActionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateActionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineageEntityParameters Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PropertiesToRemove { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAppImageConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppImageConfigArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAppImageConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppImageConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KernelGatewayImageConfig KernelGatewayImageConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateArtifactResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateArtifactRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineageEntityParameters Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PropertiesToRemove { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCodeRepositoryOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CodeRepositoryArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCodeRepositoryInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CodeRepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GitConfigForUpdate GitConfig { get; set; }
	}
	
	/// <summary>
	/// Specifies configuration details for a Git repository when the repository is updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GitConfigForUpdate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateContextResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContextArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateContextRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContextName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineageEntityParameters Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PropertiesToRemove { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDeviceFleetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EdgeOutputConfig OutputConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableIotRoleAlias { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDevicesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFleetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Device[] Devices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserSettings DefaultUserSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainSettingsForUpdate DomainSettingsForUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DefaultSpaceSettings DefaultSpaceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppSecurityGroupManagement AppSecurityGroupManagement { get; set; }
	}
	
	/// <summary>
	/// A collection of <code>Domain</code> configuration settings to update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainSettingsForUpdate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RStudioServerProDomainSettingsForUpdate RStudioServerProDomainSettingsForUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExecutionRoleIdentityConfig ExecutionRoleIdentityConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
	}
	
	/// <summary>
	/// A collection of settings that update the current configuration for the <code>RStudioServerPro</code> Domain-level app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RStudioServerProDomainSettingsForUpdate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainExecutionRoleArn { get; set; }
		
		/// <summary>
		/// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceSpec DefaultResourceSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RStudioConnectUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RStudioPackageManagerUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateEndpointOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateEndpointInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RetainAllVariantProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VariantProperty[] ExcludeRetainedVariantProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentConfig DeploymentConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RetainDeploymentConfig { get; set; }
	}
	
	/// <summary>
	/// <p>Specifies a production variant property type for an Endpoint.</p> <p>If you are updating an endpoint with the <code>RetainAllVariantProperties</code> option of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html">UpdateEndpointInput</a> set to <code>true</code>, the <code>VariantProperty</code> objects listed in the <code>ExcludeRetainedVariantProperties</code> parameter of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html">UpdateEndpointInput</a> override the existing variant properties of the endpoint.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VariantProperty
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VariantPropertyType VariantPropertyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VariantPropertyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DesiredInstanceCount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DesiredWeight = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DataCaptureConfig = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateEndpointWeightsAndCapacitiesOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateEndpointWeightsAndCapacitiesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DesiredWeightAndCapacity[] DesiredWeightsAndCapacities { get; set; }
	}
	
	/// <summary>
	/// Specifies weight and capacity values for a production variant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DesiredWeightAndCapacity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VariantName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float DesiredWeight { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DesiredInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductionVariantServerlessUpdateConfig ServerlessUpdateConfig { get; set; }
	}
	
	/// <summary>
	/// Specifies the serverless update concurrency configuration for an endpoint variant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductionVariantServerlessUpdateConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxConcurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProvisionedConcurrency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateExperimentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateExperimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExperimentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFeatureGroupResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFeatureGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureDefinition[] FeatureAdditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnlineStoreConfigUpdate OnlineStoreConfig { get; set; }
	}
	
	/// <summary>
	/// Updates the feature group online store configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnlineStoreConfigUpdate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TtlDuration TtlDuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFeatureMetadataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeatureName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureParameter[] ParameterAdditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ParameterRemovals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateHubResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateHubRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HubName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HubDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HubSearchKeywords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateImageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateImageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DeleteProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateImageVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageVersionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateImageVersionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AliasesToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AliasesToDelete { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VendorGuidance VendorGuidance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobType JobType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MLFramework { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProgrammingLang { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Processor Processor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Horovod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReleaseNotes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInferenceExperimentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InferenceExperimentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInferenceExperimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentSchedule Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelVariantConfig[] ModelVariants { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceExperimentDataStorageConfig DataStorageConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShadowModeConfig ShadowModeConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateModelCardResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateModelCardRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelCardName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCardStatus ModelCardStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateModelPackageOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateModelPackageInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelApprovalStatus ModelApprovalStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApprovalDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerMetadataMap CustomerMetadataProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CustomerMetadataPropertiesToRemove { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdditionalInferenceSpecificationDefinition[] AdditionalInferenceSpecificationsToAdd { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMonitoringAlertResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringAlertName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMonitoringAlertRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringAlertName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DatapointsToAlert { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EvaluationPeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMonitoringScheduleResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMonitoringScheduleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringScheduleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MonitoringScheduleConfig MonitoringScheduleConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateNotebookInstanceOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateNotebookInstanceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisassociateLifecycleConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSizeInGB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultCodeRepository { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AdditionalCodeRepositories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookInstanceAcceleratorType[] AcceleratorTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisassociateAcceleratorTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisassociateDefaultCodeRepository { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisassociateAdditionalCodeRepositories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelCacheSetting RootAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceMetadataServiceConfiguration InstanceMetadataServiceConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateNotebookInstanceLifecycleConfigOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateNotebookInstanceLifecycleConfigInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotebookInstanceLifecycleConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookInstanceLifecycleHook[] OnCreate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotebookInstanceLifecycleHook[] OnStart { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePipelineRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineDefinitionS3Location PipelineDefinitionS3Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParallelismConfiguration ParallelismConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePipelineExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePipelineExecutionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineExecutionDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParallelismConfiguration ParallelismConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProjectOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProjectArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProjectInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceCatalogProvisioningUpdateDetails ServiceCatalogProvisioningUpdateDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Details that you specify to provision a service catalog product. For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceCatalogProvisioningUpdateDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningParameter[] ProvisioningParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSpaceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SpaceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSpaceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SpaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpaceSettings SpaceSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTrainingJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTrainingJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrainingJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfilerConfigForUpdate ProfilerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfilerRuleConfiguration[] ProfilerRuleConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceConfigForUpdate ResourceConfig { get; set; }
	}
	
	/// <summary>
	/// Configuration information for updating the Amazon SageMaker Debugger profile parameters, system and framework metrics configurations, and storage paths.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfilerConfigForUpdate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3OutputPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProfilingIntervalInMilliseconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfilingParameters ProfilingParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableProfiler { get; set; }
	}
	
	/// <summary>
	/// The <code>ResourceConfig</code> to update <code>KeepAlivePeriodInSeconds</code>. Other fields in the <code>ResourceConfig</code> cannot be updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceConfigForUpdate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int KeepAlivePeriodInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTrialResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTrialRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrialName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTrialComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTrialComponentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrialComponentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentParameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ParametersToRemove { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentArtifacts InputArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InputArtifactsToRemove { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrialComponentArtifacts OutputArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OutputArtifactsToRemove { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateUserProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateUserProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserSettings UserSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkforceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Workforce Workforce { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkforceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkforceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceIpConfig SourceIpConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OidcConfig OidcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkforceVpcConfigRequest WorkforceVpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkteamResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Workteam Workteam { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkteamRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkteamName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberDefinition[] MemberDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfiguration NotificationConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AggregationTransformationValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		avg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		first = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		min = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		max = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AlgorithmSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	/// <summary>
	/// The data storage format for Athena query results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AthenaResultFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARQUET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVRO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXTFILE = 4,
	}
	
	/// <summary>
	/// The compression used for Athena query results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AthenaResultCompressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPPY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZLIB = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutoMLJobObjectiveType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximize = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimize = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutoMLJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutoMLProcessingUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GPU = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutoMLS3DataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManifestFile = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3Prefix = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AugmentedManifestFile = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AutoMLSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	/// <summary>
	/// The error code and error description associated with the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDescribeModelPackageError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ErrorResponse { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelPackageStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 4,
	}
	
	/// <summary>
	/// Provides summary information about the model package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDescribeModelPackageSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ModelPackageVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPackageDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Defines how to perform inference generation after a training job is run.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InferenceSpecification InferenceSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AlgorithmStatus ModelPackageStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelApprovalStatus ModelApprovalStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProcessingS3DataDistributionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FullyReplicated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ShardedByS3Key = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CodeRepositorySortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DirectInternetAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RootAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DataDistributionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FullyReplicated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ShardedByS3Key = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InputMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pipe = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		File = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HyperParameterTuningJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProcessingJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SpaceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InService = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Update_Failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delete_Failed = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TrainingJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProfilingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TransformJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserProfileStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InService = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Update_Failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delete_Failed = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DetailedModelPackageStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotStarted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EndpointConfigSortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EndpointSortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FeatureGroupSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FeatureStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FillingTransformationMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FillingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		frontfill = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		middlefill = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		backfill = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		futurefill = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		frontfill_value = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		middlefill_value = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		backfill_value = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		futurefill_value = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SagemakerServicecatalogStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ImageSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortArtifactsBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ListCompilationJobsSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortContextsBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MonitoringJobDefinitionSortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrderKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortExperimentsBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortInferenceExperimentsBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ListInferenceRecommendationsJobsSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ListLabelingJobsForWorkteamSortByOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortLineageGroupsBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	/// <summary>
	/// Attribute by which to sort returned export jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelCardExportJobSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelCardExportJobSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelCardSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelCardSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelPackageGroupSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelPackageSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelSortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MonitoringScheduleSortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NotebookInstanceLifecycleConfigSortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastModifiedTime = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NotebookInstanceLifecycleConfigSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NotebookInstanceSortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NotebookInstanceSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortPipelinesBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProjectSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProjectSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResourceCatalogSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResourceCatalogSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StudioLifecycleConfigSortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastModifiedTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortTrialComponentsBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortTrialsBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserProfileSortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastModifiedTime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ListWorkteamsSortByOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateDate = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelCompressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gzip = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MonitoringProblemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BinaryClassification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MulticlassClassification = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Regression = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ModelVariantAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Retain = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Remove = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Promote = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProcessingS3CompressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gzip = 1,
	}
	
	/// <summary>
	/// The data storage format for Redshift query results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RedshiftResultFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARQUET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 1,
	}
	
	/// <summary>
	/// The compression used for Redshift query results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RedshiftResultCompressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BZIP2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZSTD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPPY = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SearchSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TrainingRepositoryAccessMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Platform = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vpc = 1,
	}
	
	/// <summary>
	/// <p>Represents an input or output artifact of a trial component. You specify <code>TrialComponentArtifact</code> as part of the <code>InputArtifacts</code> and <code>OutputArtifacts</code> parameters in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html">CreateTrialComponent</a> request.</p> <p>Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and instance types. Examples of output artifacts are metrics, snapshots, logs, and images.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrialComponentArtifact
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>The value of a hyperparameter. Only one of <code>NumberValue</code> or <code>StringValue</code> can be specified.</p> <p>This object is specified in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html">CreateTrialComponent</a> request.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrialComponentParameterValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> NumberValue { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates an <i>association</i> between the source and the destination. A source can be associated with multiple destinations, and a destination can be associated with multiple sources. An association is a lineage tracking entity. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.
		/// AddAssociation #X-Amz-Target=SageMaker.AddAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddAssociationResponse> AddAssociationAsync(AddAssociationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.AddAssociation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddAssociationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or overwrites one or more tags for the specified SageMaker resource. You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints.</p> <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource. For more information about tags, see For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Amazon Web Services Tagging Strategies</a>.</p> <note> <p>Tags that you add to a hyperparameter tuning job by calling this API are also added to any training jobs that the hyperparameter tuning job launches after you call this API, but not to training jobs that the hyperparameter tuning job launched before you called this API. To make sure that the tags associated with a hyperparameter tuning job are also added to all training jobs that the hyperparameter tuning job launches, add the tags when you first create the tuning job by specifying them in the <code>Tags</code> parameter of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateHyperParameterTuningJob.html">CreateHyperParameterTuningJob</a> </p> </note> <note> <p>Tags that you add to a SageMaker Studio Domain or User Profile by calling this API are also added to any Apps that the Domain or User Profile launches after you call this API, but not to Apps that the Domain or User Profile launched before you called this API. To make sure that the tags associated with a Domain or User Profile are also added to all Apps that the Domain or User Profile launches, add the tags when you first create the Domain or User Profile by specifying them in the <code>Tags</code> parameter of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateDomain.html">CreateDomain</a> or <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateUserProfile.html">CreateUserProfile</a>.</p> </note>
		/// AddTags #X-Amz-Target=SageMaker.AddTags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddTagsOutput> AddTagsAsync(AddTagsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.AddTags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddTagsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates a trial component with a trial. A trial component can be associated with multiple trials. To disassociate a trial component from a trial, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DisassociateTrialComponent.html">DisassociateTrialComponent</a> API.
		/// AssociateTrialComponent #X-Amz-Target=SageMaker.AssociateTrialComponent
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateTrialComponentResponse> AssociateTrialComponentAsync(AssociateTrialComponentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.AssociateTrialComponent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateTrialComponentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This action batch describes a list of versioned model packages
		/// BatchDescribeModelPackage #X-Amz-Target=SageMaker.BatchDescribeModelPackage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDescribeModelPackageOutput> BatchDescribeModelPackageAsync(BatchDescribeModelPackageInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.BatchDescribeModelPackage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDescribeModelPackageOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an <i>action</i>. An action is a lineage tracking entity that represents an action or activity. For example, a model deployment or an HPO job. Generally, an action involves at least one input or output artifact. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.
		/// CreateAction #X-Amz-Target=SageMaker.CreateAction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateActionResponse> CreateActionAsync(CreateActionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateAction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a machine learning algorithm that you can use in SageMaker and list in the Amazon Web Services Marketplace.
		/// CreateAlgorithm #X-Amz-Target=SageMaker.CreateAlgorithm
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAlgorithmOutput> CreateAlgorithmAsync(CreateAlgorithmInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateAlgorithm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAlgorithmOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a running app for the specified UserProfile. This operation is automatically invoked by Amazon SageMaker Studio upon access to the associated Domain, and when new kernel configurations are selected by the user. A user may have multiple Apps active simultaneously.
		/// CreateApp #X-Amz-Target=SageMaker.CreateApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAppResponse> CreateAppAsync(CreateAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateApp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAppResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a configuration for running a SageMaker image as a KernelGateway app. The configuration specifies the Amazon Elastic File System (EFS) storage volume on the image, and a list of the kernels in the image.
		/// CreateAppImageConfig #X-Amz-Target=SageMaker.CreateAppImageConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAppImageConfigResponse> CreateAppImageConfigAsync(CreateAppImageConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateAppImageConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAppImageConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an <i>artifact</i>. An artifact is a lineage tracking entity that represents a URI addressable object or data. Some examples are the S3 URI of a dataset and the ECR registry path of an image. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.
		/// CreateArtifact #X-Amz-Target=SageMaker.CreateArtifact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateArtifactResponse> CreateArtifactAsync(CreateArtifactRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateArtifact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateArtifactResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Autopilot job also referred to as Autopilot experiment or AutoML job.</p> <note> <p>We recommend using the new versions <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html">DescribeAutoMLJobV2</a>, which offer backward compatibility.</p> <p> <code>CreateAutoMLJobV2</code> can manage tabular problem types identical to those of its previous version <code>CreateAutoMLJob</code>, as well as non-tabular problem types such as image or text classification.</p> <p>Find guidelines about how to migrate a <code>CreateAutoMLJob</code> to <code>CreateAutoMLJobV2</code> in <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-create-experiment-api.html#autopilot-create-experiment-api-migrate-v1-v2">Migrate a CreateAutoMLJob to CreateAutoMLJobV2</a>.</p> </note> <p>You can find the best-performing model after you run an AutoML job by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html">DescribeAutoMLJobV2</a> (recommended) or <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html">DescribeAutoMLJob</a>.</p>
		/// CreateAutoMLJob #X-Amz-Target=SageMaker.CreateAutoMLJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAutoMLJobResponse> CreateAutoMLJobAsync(CreateAutoMLJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateAutoMLJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAutoMLJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Autopilot job also referred to as Autopilot experiment or AutoML job V2.</p> <note> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html">DescribeAutoMLJobV2</a> are new versions of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html">CreateAutoMLJob</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html">DescribeAutoMLJob</a> which offer backward compatibility.</p> <p> <code>CreateAutoMLJobV2</code> can manage tabular problem types identical to those of its previous version <code>CreateAutoMLJob</code>, as well as non-tabular problem types such as image or text classification.</p> <p>Find guidelines about how to migrate a <code>CreateAutoMLJob</code> to <code>CreateAutoMLJobV2</code> in <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-create-experiment-api.html#autopilot-create-experiment-api-migrate-v1-v2">Migrate a CreateAutoMLJob to CreateAutoMLJobV2</a>.</p> </note> <p>For the list of available problem types supported by <code>CreateAutoMLJobV2</code>, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLProblemTypeConfig.html">AutoMLProblemTypeConfig</a>.</p> <p>You can find the best-performing model after you run an AutoML job V2 by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html">DescribeAutoMLJobV2</a>.</p>
		/// CreateAutoMLJobV2 #X-Amz-Target=SageMaker.CreateAutoMLJobV2
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAutoMLJobV2Response> CreateAutoMLJobV2Async(CreateAutoMLJobV2Request requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateAutoMLJobV2";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAutoMLJobV2Response>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Git repository as a resource in your SageMaker account. You can associate the repository with notebook instances so that you can use Git source control for the notebooks you create. The Git repository is a resource in your SageMaker account, so it can be associated with more than one notebook instance, and it persists independently from the lifecycle of any notebook instances it is associated with.</p> <p>The repository can be hosted either in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository.</p>
		/// CreateCodeRepository #X-Amz-Target=SageMaker.CreateCodeRepository
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateCodeRepositoryOutput> CreateCodeRepositoryAsync(CreateCodeRepositoryInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateCodeRepository";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCodeRepositoryOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts a model compilation job. After the model has been compiled, Amazon SageMaker saves the resulting model artifacts to an Amazon Simple Storage Service (Amazon S3) bucket that you specify. </p> <p>If you choose to host your model using Amazon SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts with Amazon Web Services IoT Greengrass. In that case, deploy them as an ML resource.</p> <p>In the request body, you provide the following:</p> <ul> <li> <p>A name for the compilation job</p> </li> <li> <p> Information about the input model artifacts </p> </li> <li> <p>The output location for the compiled model and the device (target) that the model runs on </p> </li> <li> <p>The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker assumes to perform the model compilation job. </p> </li> </ul> <p>You can also provide a <code>Tag</code> to track the model compilation job's resource use and costs. The response body contains the <code>CompilationJobArn</code> for the compiled job.</p> <p>To stop a model compilation job, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StopCompilationJob.html">StopCompilationJob</a>. To get information about a particular model compilation job, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeCompilationJob.html">DescribeCompilationJob</a>. To get information about multiple model compilation jobs, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListCompilationJobs.html">ListCompilationJobs</a>.</p>
		/// CreateCompilationJob #X-Amz-Target=SageMaker.CreateCompilationJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateCompilationJobResponse> CreateCompilationJobAsync(CreateCompilationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateCompilationJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCompilationJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a <i>context</i>. A context is a lineage tracking entity that represents a logical grouping of other tracking or experiment entities. Some examples are an endpoint and a model package. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.
		/// CreateContext #X-Amz-Target=SageMaker.CreateContext
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateContextResponse> CreateContextAsync(CreateContextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateContext";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateContextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a definition for a job that monitors data quality and drift. For information about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.
		/// CreateDataQualityJobDefinition #X-Amz-Target=SageMaker.CreateDataQualityJobDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDataQualityJobDefinitionResponse> CreateDataQualityJobDefinitionAsync(CreateDataQualityJobDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateDataQualityJobDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDataQualityJobDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a device fleet.
		/// CreateDeviceFleet #X-Amz-Target=SageMaker.CreateDeviceFleet
		/// </summary>
		/// <returns>Success</returns>
		public async Task CreateDeviceFleetAsync(CreateDeviceFleetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateDeviceFleet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a <code>Domain</code> used by Amazon SageMaker Studio. A domain consists of an associated Amazon Elastic File System (EFS) volume, a list of authorized users, and a variety of security, application, policy, and Amazon Virtual Private Cloud (VPC) configurations. Users within a domain can share notebook files and other artifacts with each other.</p> <p> <b>EFS storage</b> </p> <p>When a domain is created, an EFS volume is created for use by all of the users within the domain. Each user receives a private home directory within the EFS volume for notebooks, Git repositories, and data files.</p> <p>SageMaker uses the Amazon Web Services Key Management Service (Amazon Web Services KMS) to encrypt the EFS volume attached to the domain with an Amazon Web Services managed key by default. For more control, you can specify a customer managed key. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html">Protect Data at Rest Using Encryption</a>.</p> <p> <b>VPC configuration</b> </p> <p>All SageMaker Studio traffic between the domain and the EFS volume is through the specified VPC and subnets. For other Studio traffic, you can specify the <code>AppNetworkAccessType</code> parameter. <code>AppNetworkAccessType</code> corresponds to the network access type that you choose when you onboard to Studio. The following options are available:</p> <ul> <li> <p> <code>PublicInternetOnly</code> - Non-EFS traffic goes through a VPC managed by Amazon SageMaker, which allows internet access. This is the default value.</p> </li> <li> <p> <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets. Internet access is disabled by default. To allow internet access, you must specify a NAT gateway.</p> <p>When internet access is disabled, you won't be able to run a Studio notebook or to train or host models unless your VPC has an interface endpoint to the SageMaker API and runtime or a NAT gateway and your security groups allow outbound connections.</p> </li> </ul> <important> <p>NFS traffic over TCP on port 2049 needs to be allowed in both inbound and outbound rules in order to launch a SageMaker Studio app successfully.</p> </important> <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html">Connect SageMaker Studio Notebooks to Resources in a VPC</a>.</p>
		/// CreateDomain #X-Amz-Target=SageMaker.CreateDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDomainResponse> CreateDomainAsync(CreateDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an edge deployment plan, consisting of multiple stages. Each stage may have a different deployment configuration and devices.
		/// CreateEdgeDeploymentPlan #X-Amz-Target=SageMaker.CreateEdgeDeploymentPlan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateEdgeDeploymentPlanResponse> CreateEdgeDeploymentPlanAsync(CreateEdgeDeploymentPlanRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateEdgeDeploymentPlan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateEdgeDeploymentPlanResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new stage in an existing edge deployment plan.
		/// CreateEdgeDeploymentStage #X-Amz-Target=SageMaker.CreateEdgeDeploymentStage
		/// </summary>
		/// <returns>Success</returns>
		public async Task CreateEdgeDeploymentStageAsync(CreateEdgeDeploymentStageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateEdgeDeploymentStage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a SageMaker Edge Manager model packaging job. Edge Manager will use the model artifacts from the Amazon Simple Storage Service bucket that you specify. After the model has been packaged, Amazon SageMaker saves the resulting artifacts to an S3 bucket that you specify.
		/// CreateEdgePackagingJob #X-Amz-Target=SageMaker.CreateEdgePackagingJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task CreateEdgePackagingJobAsync(CreateEdgePackagingJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateEdgePackagingJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an endpoint using the endpoint configuration specified in the request. SageMaker uses the endpoint to provision resources and deploy models. You create the endpoint configuration with the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">CreateEndpointConfig</a> API. </p> <p> Use this API to deploy models using SageMaker hosting services. </p> <p>For an example that calls this method when deploying a model to SageMaker hosting services, see the <a href="https://github.com/aws/amazon-sagemaker-examples/blob/master/sagemaker-fundamentals/create-endpoint/create_endpoint.ipynb">Create Endpoint example notebook.</a> </p> <note> <p> You must not delete an <code>EndpointConfig</code> that is in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. To update an endpoint, you must create a new <code>EndpointConfig</code>.</p> </note> <p>The endpoint name must be unique within an Amazon Web Services Region in your Amazon Web Services account. </p> <p>When it receives the request, SageMaker creates the endpoint, launches the resources (ML compute instances), and deploys the model(s) on them. </p> <note> <p>When you call <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html"> <code>Eventually Consistent Reads</code> </a>, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpointConfig.html">DescribeEndpointConfig</a> before calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p> </note> <p>When SageMaker receives the request, it sets the endpoint status to <code>Creating</code>. After it creates the endpoint, it sets the status to <code>InService</code>. SageMaker can then process incoming requests for inferences. To check the status of an endpoint, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html">DescribeEndpoint</a> API.</p> <p>If any of the models hosted at this endpoint get model data from an Amazon S3 location, SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you provided. Amazon Web Services STS is activated in your Amazon Web Services account by default. If you previously deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating Amazon Web Services STS in an Amazon Web Services Region</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p> <note> <p> To add the IAM role policies for using this API operation, go to the <a href="https://console.aws.amazon.com/iam/">IAM console</a>, and choose Roles in the left navigation pane. Search the IAM role that you want to grant access to use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">CreateEndpointConfig</a> API operations, add the following policies to the role. </p> <ul> <li> <p>Option 1: For a full SageMaker access, search and attach the <code>AmazonSageMakerFullAccess</code> policy.</p> </li> <li> <p>Option 2: For granting a limited access to an IAM role, paste the following Action elements manually into the JSON file of the IAM role: </p> <p> <code>"Action": ["sagemaker:CreateEndpoint", "sagemaker:CreateEndpointConfig"]</code> </p> <p> <code>"Resource": [</code> </p> <p> <code>"arn:aws:sagemaker:region:account-id:endpoint/endpointName"</code> </p> <p> <code>"arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName"</code> </p> <p> <code>]</code> </p> <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html">SageMaker API Permissions: Actions, Permissions, and Resources Reference</a>.</p> </li> </ul> </note>
		/// CreateEndpoint #X-Amz-Target=SageMaker.CreateEndpoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateEndpointOutput> CreateEndpointAsync(CreateEndpointInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateEndpoint";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateEndpointOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an endpoint configuration that SageMaker hosting services uses to deploy models. In the configuration, you identify one or more models, created using the <code>CreateModel</code> API, to deploy and the resources that you want SageMaker to provision. Then you call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> API.</p> <note> <p> Use this API if you want to use SageMaker hosting services to deploy models into production. </p> </note> <p>In the request, you define a <code>ProductionVariant</code>, for each model that you want to deploy. Each <code>ProductionVariant</code> parameter also describes the resources that you want SageMaker to provision. This includes the number and type of ML compute instances to deploy. </p> <p>If you are hosting multiple models, you also assign a <code>VariantWeight</code> to specify how much traffic you want to allocate to each model. For example, suppose that you want to host two models, A and B, and you assign traffic weight 2 for model A and 1 for model B. SageMaker distributes two-thirds of the traffic to Model A, and one-third to model B. </p> <note> <p>When you call <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html"> <code>Eventually Consistent Reads</code> </a>, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpointConfig.html">DescribeEndpointConfig</a> before calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p> </note>
		/// CreateEndpointConfig #X-Amz-Target=SageMaker.CreateEndpointConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateEndpointConfigOutput> CreateEndpointConfigAsync(CreateEndpointConfigInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateEndpointConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateEndpointConfigOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a SageMaker <i>experiment</i>. An experiment is a collection of <i>trials</i> that are observed, compared and evaluated as a group. A trial is a set of steps, called <i>trial components</i>, that produce a machine learning model.</p> <note> <p>In the Studio UI, trials are referred to as <i>run groups</i> and trial components are referred to as <i>runs</i>.</p> </note> <p>The goal of an experiment is to determine the components that produce the best model. Multiple trials are performed, each one isolating and measuring the impact of a change to one or more inputs, while keeping the remaining inputs constant.</p> <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p> <p>You can add tags to experiments, trials, trial components and then use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API to search for the tags.</p> <p>To add a description to an experiment, specify the optional <code>Description</code> parameter. To add a description later, or to change the description, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateExperiment.html">UpdateExperiment</a> API.</p> <p>To get a list of all your experiments, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListExperiments.html">ListExperiments</a> API. To view an experiment's properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeExperiment.html">DescribeExperiment</a> API. To get a list of all the trials associated with an experiment, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html">ListTrials</a> API. To create a trial call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrial.html">CreateTrial</a> API.</p>
		/// CreateExperiment #X-Amz-Target=SageMaker.CreateExperiment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateExperimentResponse> CreateExperimentAsync(CreateExperimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateExperiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateExperimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Create a new <code>FeatureGroup</code>. A <code>FeatureGroup</code> is a group of <code>Features</code> defined in the <code>FeatureStore</code> to describe a <code>Record</code>. </p> <p>The <code>FeatureGroup</code> defines the schema and features contained in the FeatureGroup. A <code>FeatureGroup</code> definition is composed of a list of <code>Features</code>, a <code>RecordIdentifierFeatureName</code>, an <code>EventTimeFeatureName</code> and configurations for its <code>OnlineStore</code> and <code>OfflineStore</code>. Check <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">Amazon Web Services service quotas</a> to see the <code>FeatureGroup</code>s quota for your Amazon Web Services account.</p> <important> <p>You must include at least one of <code>OnlineStoreConfig</code> and <code>OfflineStoreConfig</code> to create a <code>FeatureGroup</code>.</p> </important>
		/// CreateFeatureGroup #X-Amz-Target=SageMaker.CreateFeatureGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateFeatureGroupResponse> CreateFeatureGroupAsync(CreateFeatureGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateFeatureGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateFeatureGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a flow definition.
		/// CreateFlowDefinition #X-Amz-Target=SageMaker.CreateFlowDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateFlowDefinitionResponse> CreateFlowDefinitionAsync(CreateFlowDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateFlowDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateFlowDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Create a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		/// CreateHub #X-Amz-Target=SageMaker.CreateHub
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateHubResponse> CreateHubAsync(CreateHubRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateHub";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateHubResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Defines the settings you will use for the human review workflow user interface. Reviewers will see a three-panel interface with an instruction area, the item to review, and an input area.
		/// CreateHumanTaskUi #X-Amz-Target=SageMaker.CreateHumanTaskUi
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateHumanTaskUiResponse> CreateHumanTaskUiAsync(CreateHumanTaskUiRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateHumanTaskUi";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateHumanTaskUiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts a hyperparameter tuning job. A hyperparameter tuning job finds the best version of a model by running many training jobs on your dataset using the algorithm you choose and values for hyperparameters within ranges that you specify. It then chooses the hyperparameter values that result in a model that performs the best, as measured by an objective metric that you choose.</p> <p>A hyperparameter tuning job automatically creates Amazon SageMaker experiments, trials, and trial components for each training job that it runs. You can view these entities in Amazon SageMaker Studio. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/experiments-view-compare.html#experiments-view">View Experiments, Trials, and Trial Components</a>.</p> <important> <p>Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.</p> </important>
		/// CreateHyperParameterTuningJob #X-Amz-Target=SageMaker.CreateHyperParameterTuningJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateHyperParameterTuningJobResponse> CreateHyperParameterTuningJobAsync(CreateHyperParameterTuningJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateHyperParameterTuningJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateHyperParameterTuningJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a custom SageMaker image. A SageMaker image is a set of image versions. Each image version represents a container image stored in Amazon Elastic Container Registry (ECR). For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring your own SageMaker image</a>.
		/// CreateImage #X-Amz-Target=SageMaker.CreateImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateImageResponse> CreateImageAsync(CreateImageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateImage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateImageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a version of the SageMaker image specified by <code>ImageName</code>. The version represents the Amazon Elastic Container Registry (ECR) container image specified by <code>BaseImage</code>.
		/// CreateImageVersion #X-Amz-Target=SageMaker.CreateImageVersion
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateImageVersionResponse> CreateImageVersionAsync(CreateImageVersionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateImageVersion";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateImageVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Creates an inference experiment using the configurations specified in the request. </p> <p> Use this API to setup and schedule an experiment to compare model variants on a Amazon SageMaker inference endpoint. For more information about inference experiments, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests.html">Shadow tests</a>. </p> <p> Amazon SageMaker begins your experiment at the scheduled time and routes traffic to your endpoint's model variants based on your specified configuration. </p> <p> While the experiment is in progress or after it has concluded, you can view metrics that compare your model variants. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests-view-monitor-edit.html">View, monitor, and edit shadow tests</a>. </p>
		/// CreateInferenceExperiment #X-Amz-Target=SageMaker.CreateInferenceExperiment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateInferenceExperimentResponse> CreateInferenceExperimentAsync(CreateInferenceExperimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateInferenceExperiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateInferenceExperimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a recommendation job. You can create either an instance recommendation or load test job.
		/// CreateInferenceRecommendationsJob #X-Amz-Target=SageMaker.CreateInferenceRecommendationsJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateInferenceRecommendationsJobResponse> CreateInferenceRecommendationsJobAsync(CreateInferenceRecommendationsJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateInferenceRecommendationsJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateInferenceRecommendationsJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a job that uses workers to label the data objects in your input dataset. You can use the labeled data to train machine learning models. </p> <p>You can select your workforce from one of three providers:</p> <ul> <li> <p>A private workforce that you create. It can include employees, contractors, and outside experts. Use a private workforce when want the data to stay within your organization or when a specific set of skills is required.</p> </li> <li> <p>One or more vendors that you select from the Amazon Web Services Marketplace. Vendors provide expertise in specific areas. </p> </li> <li> <p>The Amazon Mechanical Turk workforce. This is the largest workforce, but it should only be used for public data or data that has been stripped of any personally identifiable information.</p> </li> </ul> <p>You can also use <i>automated data labeling</i> to reduce the number of data objects that need to be labeled by a human. Automated data labeling uses <i>active learning</i> to determine if a data object can be labeled by machine or if it needs to be sent to a human worker. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-automated-labeling.html">Using Automated Data Labeling</a>.</p> <p>The data objects to be labeled are contained in an Amazon S3 bucket. You create a <i>manifest file</i> that describes the location of each object. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-data.html">Using Input and Output Data</a>.</p> <p>The output can be used as the manifest file for another labeling job or as training data for your machine learning models.</p> <p>You can use this operation to create a static labeling job or a streaming labeling job. A static labeling job stops if all data objects in the input manifest file identified in <code>ManifestS3Uri</code> have been labeled. A streaming labeling job runs perpetually until it is manually stopped, or remains idle for 10 days. You can send new data objects to an active (<code>InProgress</code>) streaming labeling job in real time. To learn how to create a static labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-create-labeling-job-api.html">Create a Labeling Job (API) </a> in the Amazon SageMaker Developer Guide. To learn how to create a streaming labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-create-job.html">Create a Streaming Labeling Job</a>.</p>
		/// CreateLabelingJob #X-Amz-Target=SageMaker.CreateLabelingJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateLabelingJobResponse> CreateLabelingJobAsync(CreateLabelingJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateLabelingJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateLabelingJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a model in SageMaker. In the request, you name the model and describe a primary container. For the primary container, you specify the Docker image that contains inference code, artifacts (from prior training), and a custom environment map that the inference code uses when you deploy the model for predictions.</p> <p>Use this API to create a model if you want to use SageMaker hosting services or run a batch transform job.</p> <p>To host your model, you create an endpoint configuration with the <code>CreateEndpointConfig</code> API, and then create an endpoint with the <code>CreateEndpoint</code> API. SageMaker then deploys all of the containers that you defined for the model in the hosting environment. </p> <p>For an example that calls this method when deploying a model to SageMaker hosting services, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/realtime-endpoints-deployment.html#realtime-endpoints-deployment-create-model">Create a Model (Amazon Web Services SDK for Python (Boto 3)).</a> </p> <p>To run a batch transform using your model, you start a job with the <code>CreateTransformJob</code> API. SageMaker uses your model and your dataset to get inferences which are then saved to a specified S3 location.</p> <p>In the request, you also provide an IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute hosting instances or for batch transform jobs. In addition, you also use the IAM role to manage permissions the inference code needs. For example, if the inference code access any other Amazon Web Services resources, you grant necessary permissions via this role.</p>
		/// CreateModel #X-Amz-Target=SageMaker.CreateModel
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateModelOutput> CreateModelAsync(CreateModelInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateModel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateModelOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates the definition for a model bias job.
		/// CreateModelBiasJobDefinition #X-Amz-Target=SageMaker.CreateModelBiasJobDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateModelBiasJobDefinitionResponse> CreateModelBiasJobDefinitionAsync(CreateModelBiasJobDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateModelBiasJobDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateModelBiasJobDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon SageMaker Model Card.</p> <p>For information about how to use model cards, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html">Amazon SageMaker Model Card</a>.</p>
		/// CreateModelCard #X-Amz-Target=SageMaker.CreateModelCard
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateModelCardResponse> CreateModelCardAsync(CreateModelCardRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateModelCard";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateModelCardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an Amazon SageMaker Model Card export job.
		/// CreateModelCardExportJob #X-Amz-Target=SageMaker.CreateModelCardExportJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateModelCardExportJobResponse> CreateModelCardExportJobAsync(CreateModelCardExportJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateModelCardExportJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateModelCardExportJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates the definition for a model explainability job.
		/// CreateModelExplainabilityJobDefinition #X-Amz-Target=SageMaker.CreateModelExplainabilityJobDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateModelExplainabilityJobDefinitionResponse> CreateModelExplainabilityJobDefinitionAsync(CreateModelExplainabilityJobDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateModelExplainabilityJobDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateModelExplainabilityJobDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a model package that you can use to create SageMaker models or list on Amazon Web Services Marketplace, or a versioned model that is part of a model group. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p> <p>To create a model package by specifying a Docker container that contains your inference code and the Amazon S3 location of your model artifacts, provide values for <code>InferenceSpecification</code>. To create a model from an algorithm resource that you created or subscribed to in Amazon Web Services Marketplace, provide a value for <code>SourceAlgorithmSpecification</code>.</p> <note> <p>There are two types of model packages:</p> <ul> <li> <p>Versioned - a model that is part of a model group in the model registry.</p> </li> <li> <p>Unversioned - a model package that is not part of a model group.</p> </li> </ul> </note>
		/// CreateModelPackage #X-Amz-Target=SageMaker.CreateModelPackage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateModelPackageOutput> CreateModelPackageAsync(CreateModelPackageInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateModelPackage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateModelPackageOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a model group. A model group contains a group of model versions.
		/// CreateModelPackageGroup #X-Amz-Target=SageMaker.CreateModelPackageGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateModelPackageGroupOutput> CreateModelPackageGroupAsync(CreateModelPackageGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateModelPackageGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateModelPackageGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a definition for a job that monitors model quality and drift. For information about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.
		/// CreateModelQualityJobDefinition #X-Amz-Target=SageMaker.CreateModelQualityJobDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateModelQualityJobDefinitionResponse> CreateModelQualityJobDefinitionAsync(CreateModelQualityJobDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateModelQualityJobDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateModelQualityJobDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a schedule that regularly starts Amazon SageMaker Processing Jobs to monitor the data captured for an Amazon SageMaker Endpoint.
		/// CreateMonitoringSchedule #X-Amz-Target=SageMaker.CreateMonitoringSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateMonitoringScheduleResponse> CreateMonitoringScheduleAsync(CreateMonitoringScheduleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateMonitoringSchedule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateMonitoringScheduleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an SageMaker notebook instance. A notebook instance is a machine learning (ML) compute instance running on a Jupyter notebook. </p> <p>In a <code>CreateNotebookInstance</code> request, specify the type of ML compute instance that you want to run. SageMaker launches the instance, installs common libraries that you can use to explore datasets for model training, and attaches an ML storage volume to the notebook instance. </p> <p>SageMaker also provides a set of example notebooks. Each notebook demonstrates how to use SageMaker with a specific algorithm or with a machine learning framework. </p> <p>After receiving the request, SageMaker does the following:</p> <ol> <li> <p>Creates a network interface in the SageMaker VPC.</p> </li> <li> <p>(Option) If you specified <code>SubnetId</code>, SageMaker creates a network interface in your own VPC, which is inferred from the subnet ID that you provide in the input. When creating this network interface, SageMaker attaches the security group that you specified in the request to the network interface that it creates in your VPC.</p> </li> <li> <p>Launches an EC2 instance of the type specified in the request in the SageMaker VPC. If you specified <code>SubnetId</code> of your VPC, SageMaker specifies both network interfaces when launching this instance. This enables inbound traffic from your own VPC to the notebook instance, assuming that the security groups allow it.</p> </li> </ol> <p>After creating the notebook instance, SageMaker returns its Amazon Resource Name (ARN). You can't change the name of a notebook instance after you create it.</p> <p>After SageMaker creates the notebook instance, you can connect to the Jupyter server and work in Jupyter notebooks. For example, you can write code to explore a dataset that you can use for model training, train a model, host models by creating SageMaker endpoints, and validate hosted models. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
		/// CreateNotebookInstance #X-Amz-Target=SageMaker.CreateNotebookInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateNotebookInstanceOutput> CreateNotebookInstanceAsync(CreateNotebookInstanceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateNotebookInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateNotebookInstanceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a lifecycle configuration that you can associate with a notebook instance. A <i>lifecycle configuration</i> is a collection of shell scripts that run when you create or start a notebook instance.</p> <p>Each lifecycle configuration script has a limit of 16384 characters.</p> <p>The value of the <code>$PATH</code> environment variable that is available to both scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p> <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group <code>/aws/sagemaker/NotebookInstances</code> in log stream <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p> <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started.</p> <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
		/// CreateNotebookInstanceLifecycleConfig #X-Amz-Target=SageMaker.CreateNotebookInstanceLifecycleConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateNotebookInstanceLifecycleConfigOutput> CreateNotebookInstanceLifecycleConfigAsync(CreateNotebookInstanceLifecycleConfigInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateNotebookInstanceLifecycleConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateNotebookInstanceLifecycleConfigOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a pipeline using a JSON pipeline definition.
		/// CreatePipeline #X-Amz-Target=SageMaker.CreatePipeline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePipelineResponse> CreatePipelineAsync(CreatePipelineRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreatePipeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a URL for a specified UserProfile in a Domain. When accessed in a web browser, the user will be automatically signed in to Amazon SageMaker Studio, and granted access to all of the Apps and files associated with the Domain's Amazon Elastic File System (EFS) volume. This operation can only be called when the authentication mode equals IAM. </p> <p>The IAM role or user passed to this API defines the permissions to access the app. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the app.</p> <p>You can restrict access to this API and to the URL that it returns to a list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you specify. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html">Connect to SageMaker Studio Through an Interface VPC Endpoint</a> .</p> <note> <p>The URL that you get from a call to <code>CreatePresignedDomainUrl</code> has a default timeout of 5 minutes. You can configure this value using <code>ExpiresInSeconds</code>. If you try to use the URL after the timeout limit expires, you are directed to the Amazon Web Services console sign-in page.</p> </note>
		/// CreatePresignedDomainUrl #X-Amz-Target=SageMaker.CreatePresignedDomainUrl
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePresignedDomainUrlResponse> CreatePresignedDomainUrlAsync(CreatePresignedDomainUrlRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreatePresignedDomainUrl";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePresignedDomainUrlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a URL that you can use to connect to the Jupyter server from a notebook instance. In the SageMaker console, when you choose <code>Open</code> next to a notebook instance, SageMaker opens a new tab showing the Jupyter server home page from the notebook instance. The console uses this API to get the URL and show the page.</p> <p> The IAM role or user used to call this API defines the permissions to access the notebook instance. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the notebook instance.</p> <p>You can restrict access to this API and to the URL that it returns to a list of IP addresses that you specify. Use the <code>NotIpAddress</code> condition operator and the <code>aws:SourceIP</code> condition context key to specify the list of IP addresses that you want to have access to the notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter">Limit Access to a Notebook Instance by IP Address</a>.</p> <note> <p>The URL that you get from a call to <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreatePresignedNotebookInstanceUrl.html">CreatePresignedNotebookInstanceUrl</a> is valid only for 5 minutes. If you try to use the URL after the 5-minute limit expires, you are directed to the Amazon Web Services console sign-in page.</p> </note>
		/// CreatePresignedNotebookInstanceUrl #X-Amz-Target=SageMaker.CreatePresignedNotebookInstanceUrl
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePresignedNotebookInstanceUrlOutput> CreatePresignedNotebookInstanceUrlAsync(CreatePresignedNotebookInstanceUrlInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreatePresignedNotebookInstanceUrl";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePresignedNotebookInstanceUrlOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a processing job.
		/// CreateProcessingJob #X-Amz-Target=SageMaker.CreateProcessingJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProcessingJobResponse> CreateProcessingJobAsync(CreateProcessingJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateProcessingJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateProcessingJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a machine learning (ML) project that can contain one or more templates that set up an ML pipeline from training to deploying an approved model.
		/// CreateProject #X-Amz-Target=SageMaker.CreateProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProjectOutput> CreateProjectAsync(CreateProjectInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateProjectOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a space used for real time collaboration in a Domain.
		/// CreateSpace #X-Amz-Target=SageMaker.CreateSpace
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSpaceResponse> CreateSpaceAsync(CreateSpaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateSpace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateSpaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new Studio Lifecycle Configuration.
		/// CreateStudioLifecycleConfig #X-Amz-Target=SageMaker.CreateStudioLifecycleConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateStudioLifecycleConfigResponse> CreateStudioLifecycleConfigAsync(CreateStudioLifecycleConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateStudioLifecycleConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateStudioLifecycleConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts a model training job. After training completes, SageMaker saves the resulting model artifacts to an Amazon S3 location that you specify. </p> <p>If you choose to host your model using SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts in a machine learning service other than SageMaker, provided that you know how to use them for inference. </p> <p>In the request body, you provide the following: </p> <ul> <li> <p> <code>AlgorithmSpecification</code> - Identifies the training algorithm to use. </p> </li> <li> <p> <code>HyperParameters</code> - Specify these algorithm-specific parameters to enable the estimation of model parameters during training. Hyperparameters can be tuned to optimize this learning process. For a list of hyperparameters for each training algorithm provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. </p> <important> <p>Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.</p> </important> </li> <li> <p> <code>InputDataConfig</code> - Describes the input required by the training job and the Amazon S3, EFS, or FSx location where it is stored.</p> </li> <li> <p> <code>OutputDataConfig</code> - Identifies the Amazon S3 bucket where you want SageMaker to save the results of model training. </p> </li> <li> <p> <code>ResourceConfig</code> - Identifies the resources, ML compute instances, and ML storage volumes to deploy for model training. In distributed training, you specify more than one instance. </p> </li> <li> <p> <code>EnableManagedSpotTraining</code> - Optimize the cost of training machine learning models by up to 80% by using Amazon EC2 Spot instances. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html">Managed Spot Training</a>. </p> </li> <li> <p> <code>RoleArn</code> - The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during model training. You must grant this role the necessary permissions so that SageMaker can successfully complete model training. </p> </li> <li> <p> <code>StoppingCondition</code> - To help cap training costs, use <code>MaxRuntimeInSeconds</code> to set a time limit for training. Use <code>MaxWaitTimeInSeconds</code> to specify how long a managed spot training job has to complete. </p> </li> <li> <p> <code>Environment</code> - The environment variables to set in the Docker container.</p> </li> <li> <p> <code>RetryStrategy</code> - The number of times to retry the job when the job fails due to an <code>InternalServerError</code>.</p> </li> </ul> <p> For more information about SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
		/// CreateTrainingJob #X-Amz-Target=SageMaker.CreateTrainingJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTrainingJobResponse> CreateTrainingJobAsync(CreateTrainingJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateTrainingJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTrainingJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts a transform job. A transform job uses a trained model to get inferences on a dataset and saves these results to an Amazon S3 location that you specify.</p> <p>To perform batch transformations, you create a transform job and use the data that you have readily available.</p> <p>In the request body, you provide the following:</p> <ul> <li> <p> <code>TransformJobName</code> - Identifies the transform job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.</p> </li> <li> <p> <code>ModelName</code> - Identifies the model to use. <code>ModelName</code> must be the name of an existing Amazon SageMaker model in the same Amazon Web Services Region and Amazon Web Services account. For information on creating a model, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html">CreateModel</a>.</p> </li> <li> <p> <code>TransformInput</code> - Describes the dataset to be transformed and the Amazon S3 location where it is stored.</p> </li> <li> <p> <code>TransformOutput</code> - Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.</p> </li> <li> <p> <code>TransformResources</code> - Identifies the ML compute instances for the transform job.</p> </li> </ul> <p>For more information about how batch transformation works, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Batch Transform</a>.</p>
		/// CreateTransformJob #X-Amz-Target=SageMaker.CreateTransformJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTransformJobResponse> CreateTransformJobAsync(CreateTransformJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateTransformJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTransformJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an SageMaker <i>trial</i>. A trial is a set of steps called <i>trial components</i> that produce a machine learning model. A trial is part of a single SageMaker <i>experiment</i>.</p> <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p> <p>You can add tags to a trial and then use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API to search for the tags.</p> <p>To get a list of all your trials, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html">ListTrials</a> API. To view a trial's properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrial.html">DescribeTrial</a> API. To create a trial component, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html">CreateTrialComponent</a> API.</p>
		/// CreateTrial #X-Amz-Target=SageMaker.CreateTrial
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTrialResponse> CreateTrialAsync(CreateTrialRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateTrial";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTrialResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a <i>trial component</i>, which is a stage of a machine learning <i>trial</i>. A trial is composed of one or more trial components. A trial component can be used in multiple trials.</p> <p>Trial components include pre-processing jobs, training jobs, and batch transform jobs.</p> <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p> <p>You can add tags to a trial component and then use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API to search for the tags.</p>
		/// CreateTrialComponent #X-Amz-Target=SageMaker.CreateTrialComponent
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTrialComponentResponse> CreateTrialComponentAsync(CreateTrialComponentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateTrialComponent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTrialComponentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a user profile. A user profile represents a single user within a domain, and is the main way to reference a "person" for the purposes of sharing, reporting, and other user-oriented features. This entity is created when a user onboards to Amazon SageMaker Studio. If an administrator invites a person by email or imports them from IAM Identity Center, a user profile is automatically created. A user profile is the primary holder of settings for an individual user and has a reference to the user's private Amazon Elastic File System (EFS) home directory.
		/// CreateUserProfile #X-Amz-Target=SageMaker.CreateUserProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUserProfileResponse> CreateUserProfileAsync(CreateUserProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateUserProfile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateUserProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Use this operation to create a workforce. This operation will return an error if a workforce already exists in the Amazon Web Services Region that you specify. You can only create one workforce in each Amazon Web Services Region per Amazon Web Services account.</p> <p>If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkforce.html">DeleteWorkforce</a> API operation to delete the existing workforce and then use <code>CreateWorkforce</code> to create a new workforce.</p> <p>To create a private workforce using Amazon Cognito, you must specify a Cognito user pool in <code>CognitoConfig</code>. You can also create an Amazon Cognito workforce using the Amazon SageMaker console. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html"> Create a Private Workforce (Amazon Cognito)</a>.</p> <p>To create a private workforce using your own OIDC Identity Provider (IdP), specify your IdP configuration in <code>OidcConfig</code>. Your OIDC IdP must support <i>groups</i> because groups are used by Ground Truth and Amazon A2I to create work teams. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html"> Create a Private Workforce (OIDC IdP)</a>.</p>
		/// CreateWorkforce #X-Amz-Target=SageMaker.CreateWorkforce
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateWorkforceResponse> CreateWorkforceAsync(CreateWorkforceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateWorkforce";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateWorkforceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new work team for labeling your data. A work team is defined by one or more Amazon Cognito user pools. You must first create the user pools before you can create a work team.</p> <p>You cannot create more than 25 work teams in an account and region.</p>
		/// CreateWorkteam #X-Amz-Target=SageMaker.CreateWorkteam
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateWorkteamResponse> CreateWorkteamAsync(CreateWorkteamRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.CreateWorkteam";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateWorkteamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an action.
		/// DeleteAction #X-Amz-Target=SageMaker.DeleteAction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteActionResponse> DeleteActionAsync(DeleteActionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteAction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the specified algorithm from your account.
		/// DeleteAlgorithm #X-Amz-Target=SageMaker.DeleteAlgorithm
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteAlgorithmAsync(DeleteAlgorithmInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteAlgorithm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Used to stop and delete an app.
		/// DeleteApp #X-Amz-Target=SageMaker.DeleteApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteAppAsync(DeleteAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteApp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an AppImageConfig.
		/// DeleteAppImageConfig #X-Amz-Target=SageMaker.DeleteAppImageConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteAppImageConfigAsync(DeleteAppImageConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteAppImageConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an artifact. Either <code>ArtifactArn</code> or <code>Source</code> must be specified.
		/// DeleteArtifact #X-Amz-Target=SageMaker.DeleteArtifact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteArtifactResponse> DeleteArtifactAsync(DeleteArtifactRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteArtifact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteArtifactResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an association.
		/// DeleteAssociation #X-Amz-Target=SageMaker.DeleteAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAssociationResponse> DeleteAssociationAsync(DeleteAssociationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteAssociation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAssociationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Git repository from your account.
		/// DeleteCodeRepository #X-Amz-Target=SageMaker.DeleteCodeRepository
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteCodeRepositoryAsync(DeleteCodeRepositoryInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteCodeRepository";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an context.
		/// DeleteContext #X-Amz-Target=SageMaker.DeleteContext
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteContextResponse> DeleteContextAsync(DeleteContextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteContext";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteContextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a data quality monitoring job definition.
		/// DeleteDataQualityJobDefinition #X-Amz-Target=SageMaker.DeleteDataQualityJobDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteDataQualityJobDefinitionAsync(DeleteDataQualityJobDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteDataQualityJobDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a fleet.
		/// DeleteDeviceFleet #X-Amz-Target=SageMaker.DeleteDeviceFleet
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteDeviceFleetAsync(DeleteDeviceFleetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteDeviceFleet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Used to delete a domain. If you onboarded with IAM mode, you will need to delete your domain to onboard again using IAM Identity Center. Use with caution. All of the members of the domain will lose access to their EFS volume, including data, notebooks, and other artifacts.
		/// DeleteDomain #X-Amz-Target=SageMaker.DeleteDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteDomainAsync(DeleteDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an edge deployment plan if (and only if) all the stages in the plan are inactive or there are no stages in the plan.
		/// DeleteEdgeDeploymentPlan #X-Amz-Target=SageMaker.DeleteEdgeDeploymentPlan
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteEdgeDeploymentPlanAsync(DeleteEdgeDeploymentPlanRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteEdgeDeploymentPlan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a stage in an edge deployment plan if (and only if) the stage is inactive.
		/// DeleteEdgeDeploymentStage #X-Amz-Target=SageMaker.DeleteEdgeDeploymentStage
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteEdgeDeploymentStageAsync(DeleteEdgeDeploymentStageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteEdgeDeploymentStage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an endpoint. SageMaker frees up all of the resources that were deployed when the endpoint was created. </p> <p>SageMaker retires any custom KMS key grants associated with the endpoint, meaning you don't need to use the <a href="http://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html">RevokeGrant</a> API call.</p> <p>When you delete your endpoint, SageMaker asynchronously deletes associated endpoint resources such as KMS key grants. You might still see these resources in your account for a few minutes after deleting your endpoint. Do not delete or revoke the permissions for your <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html#sagemaker-CreateModel-request-ExecutionRoleArn">ExecutionRoleArn</a> </code>, otherwise SageMaker cannot delete these resources.</p>
		/// DeleteEndpoint #X-Amz-Target=SageMaker.DeleteEndpoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteEndpointAsync(DeleteEndpointInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteEndpoint";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an endpoint configuration. The <code>DeleteEndpointConfig</code> API deletes only the specified configuration. It does not delete endpoints created using the configuration. </p> <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. If you delete the <code>EndpointConfig</code> of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.</p>
		/// DeleteEndpointConfig #X-Amz-Target=SageMaker.DeleteEndpointConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteEndpointConfigAsync(DeleteEndpointConfigInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteEndpointConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an SageMaker experiment. All trials associated with the experiment must be deleted first. Use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html">ListTrials</a> API to get a list of the trials associated with the experiment.
		/// DeleteExperiment #X-Amz-Target=SageMaker.DeleteExperiment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteExperimentResponse> DeleteExperimentAsync(DeleteExperimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteExperiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteExperimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Delete the <code>FeatureGroup</code> and any data that was written to the <code>OnlineStore</code> of the <code>FeatureGroup</code>. Data cannot be accessed from the <code>OnlineStore</code> immediately after <code>DeleteFeatureGroup</code> is called. </p> <p>Data written into the <code>OfflineStore</code> will not be deleted. The Amazon Web Services Glue database and tables that are automatically created for your <code>OfflineStore</code> are not deleted. </p>
		/// DeleteFeatureGroup #X-Amz-Target=SageMaker.DeleteFeatureGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteFeatureGroupAsync(DeleteFeatureGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteFeatureGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified flow definition.
		/// DeleteFlowDefinition #X-Amz-Target=SageMaker.DeleteFlowDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteFlowDefinitionResponse> DeleteFlowDefinitionAsync(DeleteFlowDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteFlowDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteFlowDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Delete a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		/// DeleteHub #X-Amz-Target=SageMaker.DeleteHub
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteHubAsync(DeleteHubRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteHub";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Delete the contents of a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		/// DeleteHubContent #X-Amz-Target=SageMaker.DeleteHubContent
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteHubContentAsync(DeleteHubContentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteHubContent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Use this operation to delete a human task user interface (worker task template).</p> <p> To see a list of human task user interfaces (work task templates) in your account, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListHumanTaskUis.html">ListHumanTaskUis</a>. When you delete a worker task template, it no longer appears when you call <code>ListHumanTaskUis</code>.</p>
		/// DeleteHumanTaskUi #X-Amz-Target=SageMaker.DeleteHumanTaskUi
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteHumanTaskUiResponse> DeleteHumanTaskUiAsync(DeleteHumanTaskUiRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteHumanTaskUi";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteHumanTaskUiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a SageMaker image and all versions of the image. The container images aren't deleted.
		/// DeleteImage #X-Amz-Target=SageMaker.DeleteImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteImageResponse> DeleteImageAsync(DeleteImageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteImage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteImageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a version of a SageMaker image. The container image the version represents isn't deleted.
		/// DeleteImageVersion #X-Amz-Target=SageMaker.DeleteImageVersion
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteImageVersionResponse> DeleteImageVersionAsync(DeleteImageVersionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteImageVersion";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteImageVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an inference experiment.</p> <note> <p> This operation does not delete your endpoint, variants, or any underlying resources. This operation only deletes the metadata of your experiment. </p> </note>
		/// DeleteInferenceExperiment #X-Amz-Target=SageMaker.DeleteInferenceExperiment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteInferenceExperimentResponse> DeleteInferenceExperimentAsync(DeleteInferenceExperimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteInferenceExperiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteInferenceExperimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a model. The <code>DeleteModel</code> API deletes only the model entry that was created in SageMaker when you called the <code>CreateModel</code> API. It does not delete model artifacts, inference code, or the IAM role that you specified when creating the model.
		/// DeleteModel #X-Amz-Target=SageMaker.DeleteModel
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteModelAsync(DeleteModelInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteModel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Amazon SageMaker model bias job definition.
		/// DeleteModelBiasJobDefinition #X-Amz-Target=SageMaker.DeleteModelBiasJobDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteModelBiasJobDefinitionAsync(DeleteModelBiasJobDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteModelBiasJobDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Amazon SageMaker Model Card.
		/// DeleteModelCard #X-Amz-Target=SageMaker.DeleteModelCard
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteModelCardAsync(DeleteModelCardRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteModelCard";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Amazon SageMaker model explainability job definition.
		/// DeleteModelExplainabilityJobDefinition #X-Amz-Target=SageMaker.DeleteModelExplainabilityJobDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteModelExplainabilityJobDefinitionAsync(DeleteModelExplainabilityJobDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteModelExplainabilityJobDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a model package.</p> <p>A model package is used to create SageMaker models or list on Amazon Web Services Marketplace. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p>
		/// DeleteModelPackage #X-Amz-Target=SageMaker.DeleteModelPackage
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteModelPackageAsync(DeleteModelPackageInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteModelPackage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified model group.
		/// DeleteModelPackageGroup #X-Amz-Target=SageMaker.DeleteModelPackageGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteModelPackageGroupAsync(DeleteModelPackageGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteModelPackageGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a model group resource policy.
		/// DeleteModelPackageGroupPolicy #X-Amz-Target=SageMaker.DeleteModelPackageGroupPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteModelPackageGroupPolicyAsync(DeleteModelPackageGroupPolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteModelPackageGroupPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the secified model quality monitoring job definition.
		/// DeleteModelQualityJobDefinition #X-Amz-Target=SageMaker.DeleteModelQualityJobDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteModelQualityJobDefinitionAsync(DeleteModelQualityJobDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteModelQualityJobDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a monitoring schedule. Also stops the schedule had not already been stopped. This does not delete the job execution history of the monitoring schedule.
		/// DeleteMonitoringSchedule #X-Amz-Target=SageMaker.DeleteMonitoringSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteMonitoringScheduleAsync(DeleteMonitoringScheduleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteMonitoringSchedule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Deletes an SageMaker notebook instance. Before you can delete a notebook instance, you must call the <code>StopNotebookInstance</code> API. </p> <important> <p>When you delete a notebook instance, you lose all of your data. SageMaker removes the ML compute instance, and deletes the ML storage volume and the network interface associated with the notebook instance. </p> </important>
		/// DeleteNotebookInstance #X-Amz-Target=SageMaker.DeleteNotebookInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteNotebookInstanceAsync(DeleteNotebookInstanceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteNotebookInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a notebook instance lifecycle configuration.
		/// DeleteNotebookInstanceLifecycleConfig #X-Amz-Target=SageMaker.DeleteNotebookInstanceLifecycleConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteNotebookInstanceLifecycleConfigAsync(DeleteNotebookInstanceLifecycleConfigInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteNotebookInstanceLifecycleConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a pipeline if there are no running instances of the pipeline. To delete a pipeline, you must stop all running instances of the pipeline using the <code>StopPipelineExecution</code> API. When you delete a pipeline, all instances of the pipeline are deleted.
		/// DeletePipeline #X-Amz-Target=SageMaker.DeletePipeline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeletePipelineResponse> DeletePipelineAsync(DeletePipelineRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeletePipeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the specified project.
		/// DeleteProject #X-Amz-Target=SageMaker.DeleteProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteProjectAsync(DeleteProjectInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Used to delete a space.
		/// DeleteSpace #X-Amz-Target=SageMaker.DeleteSpace
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteSpaceAsync(DeleteSpaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteSpace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the Studio Lifecycle Configuration. In order to delete the Lifecycle Configuration, there must be no running apps using the Lifecycle Configuration. You must also remove the Lifecycle Configuration from UserSettings in all Domains and UserProfiles.
		/// DeleteStudioLifecycleConfig #X-Amz-Target=SageMaker.DeleteStudioLifecycleConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteStudioLifecycleConfigAsync(DeleteStudioLifecycleConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteStudioLifecycleConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified tags from an SageMaker resource.</p> <p>To list a resource's tags, use the <code>ListTags</code> API. </p> <note> <p>When you call this API to delete tags from a hyperparameter tuning job, the deleted tags are not removed from training jobs that the hyperparameter tuning job launched before you called this API.</p> </note> <note> <p>When you call this API to delete tags from a SageMaker Studio Domain or User Profile, the deleted tags are not removed from Apps that the SageMaker Studio Domain or User Profile launched before you called this API.</p> </note>
		/// DeleteTags #X-Amz-Target=SageMaker.DeleteTags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteTagsOutput> DeleteTagsAsync(DeleteTagsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteTags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteTagsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified trial. All trial components that make up the trial must be deleted first. Use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrialComponent.html">DescribeTrialComponent</a> API to get the list of trial components.
		/// DeleteTrial #X-Amz-Target=SageMaker.DeleteTrial
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteTrialResponse> DeleteTrialAsync(DeleteTrialRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteTrial";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteTrialResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified trial component. A trial component must be disassociated from all trials before the trial component can be deleted. To disassociate a trial component from a trial, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DisassociateTrialComponent.html">DisassociateTrialComponent</a> API.
		/// DeleteTrialComponent #X-Amz-Target=SageMaker.DeleteTrialComponent
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteTrialComponentResponse> DeleteTrialComponentAsync(DeleteTrialComponentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteTrialComponent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteTrialComponentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a user profile. When a user profile is deleted, the user loses access to their EFS volume, including data, notebooks, and other artifacts.
		/// DeleteUserProfile #X-Amz-Target=SageMaker.DeleteUserProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteUserProfileAsync(DeleteUserProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteUserProfile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Use this operation to delete a workforce.</p> <p>If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use this operation to delete the existing workforce and then use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateWorkforce.html">CreateWorkforce</a> to create a new workforce.</p> <important> <p>If a private workforce contains one or more work teams, you must use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkteam.html">DeleteWorkteam</a> operation to delete all work teams before you delete the workforce. If you try to delete a workforce that contains one or more work teams, you will recieve a <code>ResourceInUse</code> error.</p> </important>
		/// DeleteWorkforce #X-Amz-Target=SageMaker.DeleteWorkforce
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteWorkforceResponse> DeleteWorkforceAsync(DeleteWorkforceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteWorkforce";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteWorkforceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing work team. This operation can't be undone.
		/// DeleteWorkteam #X-Amz-Target=SageMaker.DeleteWorkteam
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteWorkteamResponse> DeleteWorkteamAsync(DeleteWorkteamRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeleteWorkteam";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteWorkteamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deregisters the specified devices. After you deregister a device, you will need to re-register the devices.
		/// DeregisterDevices #X-Amz-Target=SageMaker.DeregisterDevices
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeregisterDevicesAsync(DeregisterDevicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DeregisterDevices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes an action.
		/// DescribeAction #X-Amz-Target=SageMaker.DescribeAction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeActionResponse> DescribeActionAsync(DescribeActionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeAction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a description of the specified algorithm that is in your account.
		/// DescribeAlgorithm #X-Amz-Target=SageMaker.DescribeAlgorithm
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAlgorithmOutput> DescribeAlgorithmAsync(DescribeAlgorithmInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeAlgorithm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAlgorithmOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the app.
		/// DescribeApp #X-Amz-Target=SageMaker.DescribeApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAppResponse> DescribeAppAsync(DescribeAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeApp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAppResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes an AppImageConfig.
		/// DescribeAppImageConfig #X-Amz-Target=SageMaker.DescribeAppImageConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAppImageConfigResponse> DescribeAppImageConfigAsync(DescribeAppImageConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeAppImageConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAppImageConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes an artifact.
		/// DescribeArtifact #X-Amz-Target=SageMaker.DescribeArtifact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeArtifactResponse> DescribeArtifactAsync(DescribeArtifactRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeArtifact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeArtifactResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about an AutoML job created by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html">CreateAutoMLJob</a>.</p> <note> <p>AutoML jobs created by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a> cannot be described by <code>DescribeAutoMLJob</code>.</p> </note>
		/// DescribeAutoMLJob #X-Amz-Target=SageMaker.DescribeAutoMLJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAutoMLJobResponse> DescribeAutoMLJobAsync(DescribeAutoMLJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeAutoMLJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAutoMLJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about an AutoML job created by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a> or <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html">CreateAutoMLJob</a>.
		/// DescribeAutoMLJobV2 #X-Amz-Target=SageMaker.DescribeAutoMLJobV2
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAutoMLJobV2Response> DescribeAutoMLJobV2Async(DescribeAutoMLJobV2Request requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeAutoMLJobV2";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAutoMLJobV2Response>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets details about the specified Git repository.
		/// DescribeCodeRepository #X-Amz-Target=SageMaker.DescribeCodeRepository
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeCodeRepositoryOutput> DescribeCodeRepositoryAsync(DescribeCodeRepositoryInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeCodeRepository";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeCodeRepositoryOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about a model compilation job.</p> <p>To create a model compilation job, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateCompilationJob.html">CreateCompilationJob</a>. To get information about multiple model compilation jobs, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListCompilationJobs.html">ListCompilationJobs</a>.</p>
		/// DescribeCompilationJob #X-Amz-Target=SageMaker.DescribeCompilationJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeCompilationJobResponse> DescribeCompilationJobAsync(DescribeCompilationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeCompilationJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeCompilationJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes a context.
		/// DescribeContext #X-Amz-Target=SageMaker.DescribeContext
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeContextResponse> DescribeContextAsync(DescribeContextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeContext";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeContextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the details of a data quality monitoring job definition.
		/// DescribeDataQualityJobDefinition #X-Amz-Target=SageMaker.DescribeDataQualityJobDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDataQualityJobDefinitionResponse> DescribeDataQualityJobDefinitionAsync(DescribeDataQualityJobDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeDataQualityJobDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDataQualityJobDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the device.
		/// DescribeDevice #X-Amz-Target=SageMaker.DescribeDevice
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDeviceResponse> DescribeDeviceAsync(DescribeDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeDevice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A description of the fleet the device belongs to.
		/// DescribeDeviceFleet #X-Amz-Target=SageMaker.DescribeDeviceFleet
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDeviceFleetResponse> DescribeDeviceFleetAsync(DescribeDeviceFleetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeDeviceFleet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDeviceFleetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The description of the domain.
		/// DescribeDomain #X-Amz-Target=SageMaker.DescribeDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDomainResponse> DescribeDomainAsync(DescribeDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes an edge deployment plan with deployment status per stage.
		/// DescribeEdgeDeploymentPlan #X-Amz-Target=SageMaker.DescribeEdgeDeploymentPlan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeEdgeDeploymentPlanResponse> DescribeEdgeDeploymentPlanAsync(DescribeEdgeDeploymentPlanRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeEdgeDeploymentPlan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeEdgeDeploymentPlanResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A description of edge packaging jobs.
		/// DescribeEdgePackagingJob #X-Amz-Target=SageMaker.DescribeEdgePackagingJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeEdgePackagingJobResponse> DescribeEdgePackagingJobAsync(DescribeEdgePackagingJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeEdgePackagingJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeEdgePackagingJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the description of an endpoint.
		/// DescribeEndpoint #X-Amz-Target=SageMaker.DescribeEndpoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeEndpointOutput> DescribeEndpointAsync(DescribeEndpointInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeEndpoint";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeEndpointOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the description of an endpoint configuration created using the <code>CreateEndpointConfig</code> API.
		/// DescribeEndpointConfig #X-Amz-Target=SageMaker.DescribeEndpointConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeEndpointConfigOutput> DescribeEndpointConfigAsync(DescribeEndpointConfigInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeEndpointConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeEndpointConfigOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides a list of an experiment's properties.
		/// DescribeExperiment #X-Amz-Target=SageMaker.DescribeExperiment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeExperimentResponse> DescribeExperimentAsync(DescribeExperimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeExperiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeExperimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this operation to describe a <code>FeatureGroup</code>. The response includes information on the creation time, <code>FeatureGroup</code> name, the unique identifier for each <code>FeatureGroup</code>, and more.
		/// DescribeFeatureGroup #X-Amz-Target=SageMaker.DescribeFeatureGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeFeatureGroupResponse> DescribeFeatureGroupAsync(DescribeFeatureGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeFeatureGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeFeatureGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Shows the metadata for a feature within a feature group.
		/// DescribeFeatureMetadata #X-Amz-Target=SageMaker.DescribeFeatureMetadata
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeFeatureMetadataResponse> DescribeFeatureMetadataAsync(DescribeFeatureMetadataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeFeatureMetadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeFeatureMetadataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the specified flow definition.
		/// DescribeFlowDefinition #X-Amz-Target=SageMaker.DescribeFlowDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeFlowDefinitionResponse> DescribeFlowDefinitionAsync(DescribeFlowDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeFlowDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeFlowDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describe a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		/// DescribeHub #X-Amz-Target=SageMaker.DescribeHub
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeHubResponse> DescribeHubAsync(DescribeHubRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeHub";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeHubResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describe the content of a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		/// DescribeHubContent #X-Amz-Target=SageMaker.DescribeHubContent
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeHubContentResponse> DescribeHubContentAsync(DescribeHubContentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeHubContent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeHubContentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the requested human task user interface (worker task template).
		/// DescribeHumanTaskUi #X-Amz-Target=SageMaker.DescribeHumanTaskUi
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeHumanTaskUiResponse> DescribeHumanTaskUiAsync(DescribeHumanTaskUiRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeHumanTaskUi";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeHumanTaskUiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a description of a hyperparameter tuning job, depending on the fields selected. These fields can include the name, Amazon Resource Name (ARN), job status of your tuning job and more.
		/// DescribeHyperParameterTuningJob #X-Amz-Target=SageMaker.DescribeHyperParameterTuningJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeHyperParameterTuningJobResponse> DescribeHyperParameterTuningJobAsync(DescribeHyperParameterTuningJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeHyperParameterTuningJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeHyperParameterTuningJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes a SageMaker image.
		/// DescribeImage #X-Amz-Target=SageMaker.DescribeImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeImageResponse> DescribeImageAsync(DescribeImageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeImage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeImageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes a version of a SageMaker image.
		/// DescribeImageVersion #X-Amz-Target=SageMaker.DescribeImageVersion
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeImageVersionResponse> DescribeImageVersionAsync(DescribeImageVersionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeImageVersion";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeImageVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns details about an inference experiment.
		/// DescribeInferenceExperiment #X-Amz-Target=SageMaker.DescribeInferenceExperiment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeInferenceExperimentResponse> DescribeInferenceExperimentAsync(DescribeInferenceExperimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeInferenceExperiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeInferenceExperimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides the results of the Inference Recommender job. One or more recommendation jobs are returned.
		/// DescribeInferenceRecommendationsJob #X-Amz-Target=SageMaker.DescribeInferenceRecommendationsJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeInferenceRecommendationsJobResponse> DescribeInferenceRecommendationsJobAsync(DescribeInferenceRecommendationsJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeInferenceRecommendationsJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeInferenceRecommendationsJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a labeling job.
		/// DescribeLabelingJob #X-Amz-Target=SageMaker.DescribeLabelingJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeLabelingJobResponse> DescribeLabelingJobAsync(DescribeLabelingJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeLabelingJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeLabelingJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides a list of properties for the requested lineage group. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html"> Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.
		/// DescribeLineageGroup #X-Amz-Target=SageMaker.DescribeLineageGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeLineageGroupResponse> DescribeLineageGroupAsync(DescribeLineageGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeLineageGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeLineageGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes a model that you created using the <code>CreateModel</code> API.
		/// DescribeModel #X-Amz-Target=SageMaker.DescribeModel
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeModelOutput> DescribeModelAsync(DescribeModelInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeModel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeModelOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a description of a model bias job definition.
		/// DescribeModelBiasJobDefinition #X-Amz-Target=SageMaker.DescribeModelBiasJobDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeModelBiasJobDefinitionResponse> DescribeModelBiasJobDefinitionAsync(DescribeModelBiasJobDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeModelBiasJobDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeModelBiasJobDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the content, creation time, and security configuration of an Amazon SageMaker Model Card.
		/// DescribeModelCard #X-Amz-Target=SageMaker.DescribeModelCard
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeModelCardResponse> DescribeModelCardAsync(DescribeModelCardRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeModelCard";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeModelCardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes an Amazon SageMaker Model Card export job.
		/// DescribeModelCardExportJob #X-Amz-Target=SageMaker.DescribeModelCardExportJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeModelCardExportJobResponse> DescribeModelCardExportJobAsync(DescribeModelCardExportJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeModelCardExportJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeModelCardExportJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a description of a model explainability job definition.
		/// DescribeModelExplainabilityJobDefinition #X-Amz-Target=SageMaker.DescribeModelExplainabilityJobDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeModelExplainabilityJobDefinitionResponse> DescribeModelExplainabilityJobDefinitionAsync(DescribeModelExplainabilityJobDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeModelExplainabilityJobDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeModelExplainabilityJobDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a description of the specified model package, which is used to create SageMaker models or list them on Amazon Web Services Marketplace.</p> <p>To create models in SageMaker, buyers can subscribe to model packages listed on Amazon Web Services Marketplace.</p>
		/// DescribeModelPackage #X-Amz-Target=SageMaker.DescribeModelPackage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeModelPackageOutput> DescribeModelPackageAsync(DescribeModelPackageInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeModelPackage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeModelPackageOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a description for the specified model group.
		/// DescribeModelPackageGroup #X-Amz-Target=SageMaker.DescribeModelPackageGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeModelPackageGroupOutput> DescribeModelPackageGroupAsync(DescribeModelPackageGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeModelPackageGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeModelPackageGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a description of a model quality job definition.
		/// DescribeModelQualityJobDefinition #X-Amz-Target=SageMaker.DescribeModelQualityJobDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeModelQualityJobDefinitionResponse> DescribeModelQualityJobDefinitionAsync(DescribeModelQualityJobDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeModelQualityJobDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeModelQualityJobDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the schedule for a monitoring job.
		/// DescribeMonitoringSchedule #X-Amz-Target=SageMaker.DescribeMonitoringSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeMonitoringScheduleResponse> DescribeMonitoringScheduleAsync(DescribeMonitoringScheduleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeMonitoringSchedule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeMonitoringScheduleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a notebook instance.
		/// DescribeNotebookInstance #X-Amz-Target=SageMaker.DescribeNotebookInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeNotebookInstanceOutput> DescribeNotebookInstanceAsync(DescribeNotebookInstanceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeNotebookInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeNotebookInstanceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a description of a notebook instance lifecycle configuration.</p> <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
		/// DescribeNotebookInstanceLifecycleConfig #X-Amz-Target=SageMaker.DescribeNotebookInstanceLifecycleConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeNotebookInstanceLifecycleConfigOutput> DescribeNotebookInstanceLifecycleConfigAsync(DescribeNotebookInstanceLifecycleConfigInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeNotebookInstanceLifecycleConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeNotebookInstanceLifecycleConfigOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the details of a pipeline.
		/// DescribePipeline #X-Amz-Target=SageMaker.DescribePipeline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePipelineResponse> DescribePipelineAsync(DescribePipelineRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribePipeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribePipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the details of an execution's pipeline definition.
		/// DescribePipelineDefinitionForExecution #X-Amz-Target=SageMaker.DescribePipelineDefinitionForExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePipelineDefinitionForExecutionResponse> DescribePipelineDefinitionForExecutionAsync(DescribePipelineDefinitionForExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribePipelineDefinitionForExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribePipelineDefinitionForExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the details of a pipeline execution.
		/// DescribePipelineExecution #X-Amz-Target=SageMaker.DescribePipelineExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePipelineExecutionResponse> DescribePipelineExecutionAsync(DescribePipelineExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribePipelineExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribePipelineExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a description of a processing job.
		/// DescribeProcessingJob #X-Amz-Target=SageMaker.DescribeProcessingJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeProcessingJobResponse> DescribeProcessingJobAsync(DescribeProcessingJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeProcessingJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeProcessingJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the details of a project.
		/// DescribeProject #X-Amz-Target=SageMaker.DescribeProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeProjectOutput> DescribeProjectAsync(DescribeProjectInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeProjectOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the space.
		/// DescribeSpace #X-Amz-Target=SageMaker.DescribeSpace
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeSpaceResponse> DescribeSpaceAsync(DescribeSpaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeSpace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeSpaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the Studio Lifecycle Configuration.
		/// DescribeStudioLifecycleConfig #X-Amz-Target=SageMaker.DescribeStudioLifecycleConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeStudioLifecycleConfigResponse> DescribeStudioLifecycleConfigAsync(DescribeStudioLifecycleConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeStudioLifecycleConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeStudioLifecycleConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a work team provided by a vendor. It returns details about the subscription with a vendor in the Amazon Web Services Marketplace.
		/// DescribeSubscribedWorkteam #X-Amz-Target=SageMaker.DescribeSubscribedWorkteam
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeSubscribedWorkteamResponse> DescribeSubscribedWorkteamAsync(DescribeSubscribedWorkteamRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeSubscribedWorkteam";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeSubscribedWorkteamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about a training job. </p> <p>Some of the attributes below only appear if the training job successfully starts. If the training job fails, <code>TrainingJobStatus</code> is <code>Failed</code> and, depending on the <code>FailureReason</code>, attributes like <code>TrainingStartTime</code>, <code>TrainingTimeInSeconds</code>, <code>TrainingEndTime</code>, and <code>BillableTimeInSeconds</code> may not be present in the response.</p>
		/// DescribeTrainingJob #X-Amz-Target=SageMaker.DescribeTrainingJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeTrainingJobResponse> DescribeTrainingJobAsync(DescribeTrainingJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeTrainingJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeTrainingJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a transform job.
		/// DescribeTransformJob #X-Amz-Target=SageMaker.DescribeTransformJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeTransformJobResponse> DescribeTransformJobAsync(DescribeTransformJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeTransformJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeTransformJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides a list of a trial's properties.
		/// DescribeTrial #X-Amz-Target=SageMaker.DescribeTrial
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeTrialResponse> DescribeTrialAsync(DescribeTrialRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeTrial";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeTrialResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides a list of a trials component's properties.
		/// DescribeTrialComponent #X-Amz-Target=SageMaker.DescribeTrialComponent
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeTrialComponentResponse> DescribeTrialComponentAsync(DescribeTrialComponentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeTrialComponent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeTrialComponentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes a user profile. For more information, see <code>CreateUserProfile</code>.
		/// DescribeUserProfile #X-Amz-Target=SageMaker.DescribeUserProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeUserProfileResponse> DescribeUserProfileAsync(DescribeUserProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeUserProfile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeUserProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists private workforce information, including workforce name, Amazon Resource Name (ARN), and, if applicable, allowed IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Allowable IP address ranges are the IP addresses that workers can use to access tasks. </p> <important> <p>This operation applies only to private workforces.</p> </important>
		/// DescribeWorkforce #X-Amz-Target=SageMaker.DescribeWorkforce
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeWorkforceResponse> DescribeWorkforceAsync(DescribeWorkforceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeWorkforce";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeWorkforceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a specific work team. You can see information such as the create date, the last updated date, membership information, and the work team's Amazon Resource Name (ARN).
		/// DescribeWorkteam #X-Amz-Target=SageMaker.DescribeWorkteam
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeWorkteamResponse> DescribeWorkteamAsync(DescribeWorkteamRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DescribeWorkteam";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeWorkteamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
		/// DisableSagemakerServicecatalogPortfolio #X-Amz-Target=SageMaker.DisableSagemakerServicecatalogPortfolio
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisableSagemakerServicecatalogPortfolioOutput> DisableSagemakerServicecatalogPortfolioAsync(DisableSagemakerServicecatalogPortfolioInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DisableSagemakerServicecatalogPortfolio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisableSagemakerServicecatalogPortfolioOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates a trial component from a trial. This doesn't effect other trials the component is associated with. Before you can delete a component, you must disassociate the component from all trials it is associated with. To associate a trial component with a trial, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AssociateTrialComponent.html">AssociateTrialComponent</a> API.</p> <p>To get a list of the trials a component is associated with, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API. Specify <code>ExperimentTrialComponent</code> for the <code>Resource</code> parameter. The list appears in the response under <code>Results.TrialComponent.Parents</code>.</p>
		/// DisassociateTrialComponent #X-Amz-Target=SageMaker.DisassociateTrialComponent
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateTrialComponentResponse> DisassociateTrialComponentAsync(DisassociateTrialComponentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.DisassociateTrialComponent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateTrialComponentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
		/// EnableSagemakerServicecatalogPortfolio #X-Amz-Target=SageMaker.EnableSagemakerServicecatalogPortfolio
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EnableSagemakerServicecatalogPortfolioOutput> EnableSagemakerServicecatalogPortfolioAsync(EnableSagemakerServicecatalogPortfolioInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.EnableSagemakerServicecatalogPortfolio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnableSagemakerServicecatalogPortfolioOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes a fleet.
		/// GetDeviceFleetReport #X-Amz-Target=SageMaker.GetDeviceFleetReport
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeviceFleetReportResponse> GetDeviceFleetReportAsync(GetDeviceFleetReportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.GetDeviceFleetReport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDeviceFleetReportResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The resource policy for the lineage group.
		/// GetLineageGroupPolicy #X-Amz-Target=SageMaker.GetLineageGroupPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLineageGroupPolicyResponse> GetLineageGroupPolicyAsync(GetLineageGroupPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.GetLineageGroupPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLineageGroupPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a resource policy that manages access for a model group. For information about resource policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based policies and resource-based policies</a> in the <i>Amazon Web Services Identity and Access Management User Guide.</i>.
		/// GetModelPackageGroupPolicy #X-Amz-Target=SageMaker.GetModelPackageGroupPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetModelPackageGroupPolicyOutput> GetModelPackageGroupPolicyAsync(GetModelPackageGroupPolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.GetModelPackageGroupPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetModelPackageGroupPolicyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the status of Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
		/// GetSagemakerServicecatalogPortfolioStatus #X-Amz-Target=SageMaker.GetSagemakerServicecatalogPortfolioStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSagemakerServicecatalogPortfolioStatusOutput> GetSagemakerServicecatalogPortfolioStatusAsync(GetSagemakerServicecatalogPortfolioStatusInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.GetSagemakerServicecatalogPortfolioStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSagemakerServicecatalogPortfolioStatusOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an Amazon SageMaker Inference Recommender autoscaling recommendation job. Returns recommendations for autoscaling policies that you can apply to your SageMaker endpoint.
		/// GetScalingConfigurationRecommendation #X-Amz-Target=SageMaker.GetScalingConfigurationRecommendation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetScalingConfigurationRecommendationResponse> GetScalingConfigurationRecommendationAsync(GetScalingConfigurationRecommendationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.GetScalingConfigurationRecommendation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetScalingConfigurationRecommendationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// An auto-complete API for the search functionality in the SageMaker console. It returns suggestions of possible matches for the property name to use in <code>Search</code> queries. Provides suggestions for <code>HyperParameters</code>, <code>Tags</code>, and <code>Metrics</code>.
		/// GetSearchSuggestions #X-Amz-Target=SageMaker.GetSearchSuggestions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSearchSuggestionsResponse> GetSearchSuggestionsAsync(GetSearchSuggestionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.GetSearchSuggestions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSearchSuggestionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Import hub content.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		/// ImportHubContent #X-Amz-Target=SageMaker.ImportHubContent
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportHubContentResponse> ImportHubContentAsync(ImportHubContentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ImportHubContent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportHubContentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the actions in your account and their properties.
		/// ListActions #X-Amz-Target=SageMaker.ListActions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListActionsResponse> ListActionsAsync(string MaxResults, string NextToken, ListActionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListActions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListActionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the machine learning algorithms that have been created.
		/// ListAlgorithms #X-Amz-Target=SageMaker.ListAlgorithms
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAlgorithmsOutput> ListAlgorithmsAsync(string MaxResults, string NextToken, ListAlgorithmsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListAlgorithms?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAlgorithmsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the aliases of a specified image or image version.
		/// ListAliases #X-Amz-Target=SageMaker.ListAliases
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAliasesResponse> ListAliasesAsync(string MaxResults, string NextToken, ListAliasesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListAliases?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAliasesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the AppImageConfigs in your account and their properties. The list can be filtered by creation time or modified time, and whether the AppImageConfig name contains a specified string.
		/// ListAppImageConfigs #X-Amz-Target=SageMaker.ListAppImageConfigs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAppImageConfigsResponse> ListAppImageConfigsAsync(string MaxResults, string NextToken, ListAppImageConfigsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListAppImageConfigs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAppImageConfigsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists apps.
		/// ListApps #X-Amz-Target=SageMaker.ListApps
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAppsResponse> ListAppsAsync(string MaxResults, string NextToken, ListAppsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListApps?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAppsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the artifacts in your account and their properties.
		/// ListArtifacts #X-Amz-Target=SageMaker.ListArtifacts
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListArtifactsResponse> ListArtifactsAsync(string MaxResults, string NextToken, ListArtifactsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListArtifacts?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListArtifactsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the associations in your account and their properties.
		/// ListAssociations #X-Amz-Target=SageMaker.ListAssociations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAssociationsResponse> ListAssociationsAsync(string MaxResults, string NextToken, ListAssociationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListAssociations?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAssociationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Request a list of jobs.
		/// ListAutoMLJobs #X-Amz-Target=SageMaker.ListAutoMLJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAutoMLJobsResponse> ListAutoMLJobsAsync(string MaxResults, string NextToken, ListAutoMLJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListAutoMLJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAutoMLJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the candidates created for the job.
		/// ListCandidatesForAutoMLJob #X-Amz-Target=SageMaker.ListCandidatesForAutoMLJob
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCandidatesForAutoMLJobResponse> ListCandidatesForAutoMLJobAsync(string MaxResults, string NextToken, ListCandidatesForAutoMLJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListCandidatesForAutoMLJob?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCandidatesForAutoMLJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the Git repositories in your account.
		/// ListCodeRepositories #X-Amz-Target=SageMaker.ListCodeRepositories
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCodeRepositoriesOutput> ListCodeRepositoriesAsync(string MaxResults, string NextToken, ListCodeRepositoriesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListCodeRepositories?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCodeRepositoriesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists model compilation jobs that satisfy various filters.</p> <p>To create a model compilation job, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateCompilationJob.html">CreateCompilationJob</a>. To get information about a particular model compilation job you have created, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeCompilationJob.html">DescribeCompilationJob</a>.</p>
		/// ListCompilationJobs #X-Amz-Target=SageMaker.ListCompilationJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCompilationJobsResponse> ListCompilationJobsAsync(string MaxResults, string NextToken, ListCompilationJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListCompilationJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCompilationJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the contexts in your account and their properties.
		/// ListContexts #X-Amz-Target=SageMaker.ListContexts
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListContextsResponse> ListContextsAsync(string MaxResults, string NextToken, ListContextsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListContexts?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListContextsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the data quality job definitions in your account.
		/// ListDataQualityJobDefinitions #X-Amz-Target=SageMaker.ListDataQualityJobDefinitions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDataQualityJobDefinitionsResponse> ListDataQualityJobDefinitionsAsync(string MaxResults, string NextToken, ListDataQualityJobDefinitionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListDataQualityJobDefinitions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDataQualityJobDefinitionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of devices in the fleet.
		/// ListDeviceFleets #X-Amz-Target=SageMaker.ListDeviceFleets
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDeviceFleetsResponse> ListDeviceFleetsAsync(string MaxResults, string NextToken, ListDeviceFleetsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListDeviceFleets?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDeviceFleetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A list of devices.
		/// ListDevices #X-Amz-Target=SageMaker.ListDevices
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDevicesResponse> ListDevicesAsync(string MaxResults, string NextToken, ListDevicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListDevices?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDevicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the domains.
		/// ListDomains #X-Amz-Target=SageMaker.ListDomains
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDomainsResponse> ListDomainsAsync(string MaxResults, string NextToken, ListDomainsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListDomains?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDomainsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all edge deployment plans.
		/// ListEdgeDeploymentPlans #X-Amz-Target=SageMaker.ListEdgeDeploymentPlans
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListEdgeDeploymentPlansResponse> ListEdgeDeploymentPlansAsync(string MaxResults, string NextToken, ListEdgeDeploymentPlansRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListEdgeDeploymentPlans?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEdgeDeploymentPlansResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of edge packaging jobs.
		/// ListEdgePackagingJobs #X-Amz-Target=SageMaker.ListEdgePackagingJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListEdgePackagingJobsResponse> ListEdgePackagingJobsAsync(string MaxResults, string NextToken, ListEdgePackagingJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListEdgePackagingJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEdgePackagingJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists endpoint configurations.
		/// ListEndpointConfigs #X-Amz-Target=SageMaker.ListEndpointConfigs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListEndpointConfigsOutput> ListEndpointConfigsAsync(string MaxResults, string NextToken, ListEndpointConfigsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListEndpointConfigs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEndpointConfigsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists endpoints.
		/// ListEndpoints #X-Amz-Target=SageMaker.ListEndpoints
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListEndpointsOutput> ListEndpointsAsync(string MaxResults, string NextToken, ListEndpointsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListEndpoints?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEndpointsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all the experiments in your account. The list can be filtered to show only experiments that were created in a specific time range. The list can be sorted by experiment name or creation time.
		/// ListExperiments #X-Amz-Target=SageMaker.ListExperiments
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListExperimentsResponse> ListExperimentsAsync(string MaxResults, string NextToken, ListExperimentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListExperiments?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListExperimentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List <code>FeatureGroup</code>s based on given filter and order.
		/// ListFeatureGroups #X-Amz-Target=SageMaker.ListFeatureGroups
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFeatureGroupsResponse> ListFeatureGroupsAsync(string MaxResults, string NextToken, ListFeatureGroupsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListFeatureGroups?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFeatureGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the flow definitions in your account.
		/// ListFlowDefinitions #X-Amz-Target=SageMaker.ListFlowDefinitions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFlowDefinitionsResponse> ListFlowDefinitionsAsync(string MaxResults, string NextToken, ListFlowDefinitionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListFlowDefinitions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFlowDefinitionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>List hub content versions.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		/// ListHubContentVersions #X-Amz-Target=SageMaker.ListHubContentVersions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListHubContentVersionsResponse> ListHubContentVersionsAsync(ListHubContentVersionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListHubContentVersions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListHubContentVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>List the contents of a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		/// ListHubContents #X-Amz-Target=SageMaker.ListHubContents
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListHubContentsResponse> ListHubContentsAsync(ListHubContentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListHubContents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListHubContentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>List all existing hubs.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		/// ListHubs #X-Amz-Target=SageMaker.ListHubs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListHubsResponse> ListHubsAsync(ListHubsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListHubs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListHubsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the human task user interfaces in your account.
		/// ListHumanTaskUis #X-Amz-Target=SageMaker.ListHumanTaskUis
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListHumanTaskUisResponse> ListHumanTaskUisAsync(string MaxResults, string NextToken, ListHumanTaskUisRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListHumanTaskUis?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListHumanTaskUisResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobSummary.html">HyperParameterTuningJobSummary</a> objects that describe the hyperparameter tuning jobs launched in your account.
		/// ListHyperParameterTuningJobs #X-Amz-Target=SageMaker.ListHyperParameterTuningJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListHyperParameterTuningJobsResponse> ListHyperParameterTuningJobsAsync(string MaxResults, string NextToken, ListHyperParameterTuningJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListHyperParameterTuningJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListHyperParameterTuningJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the versions of a specified image and their properties. The list can be filtered by creation time or modified time.
		/// ListImageVersions #X-Amz-Target=SageMaker.ListImageVersions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListImageVersionsResponse> ListImageVersionsAsync(string MaxResults, string NextToken, ListImageVersionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListImageVersions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImageVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the images in your account and their properties. The list can be filtered by creation time or modified time, and whether the image name contains a specified string.
		/// ListImages #X-Amz-Target=SageMaker.ListImages
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListImagesResponse> ListImagesAsync(string MaxResults, string NextToken, ListImagesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListImages?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the list of all inference experiments.
		/// ListInferenceExperiments #X-Amz-Target=SageMaker.ListInferenceExperiments
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInferenceExperimentsResponse> ListInferenceExperimentsAsync(string MaxResults, string NextToken, ListInferenceExperimentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListInferenceExperiments?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInferenceExperimentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of the subtasks for an Inference Recommender job.</p> <p>The supported subtasks are benchmarks, which evaluate the performance of your model on different instance types.</p>
		/// ListInferenceRecommendationsJobSteps #X-Amz-Target=SageMaker.ListInferenceRecommendationsJobSteps
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInferenceRecommendationsJobStepsResponse> ListInferenceRecommendationsJobStepsAsync(string MaxResults, string NextToken, ListInferenceRecommendationsJobStepsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListInferenceRecommendationsJobSteps?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInferenceRecommendationsJobStepsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists recommendation jobs that satisfy various filters.
		/// ListInferenceRecommendationsJobs #X-Amz-Target=SageMaker.ListInferenceRecommendationsJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInferenceRecommendationsJobsResponse> ListInferenceRecommendationsJobsAsync(string MaxResults, string NextToken, ListInferenceRecommendationsJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListInferenceRecommendationsJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInferenceRecommendationsJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of labeling jobs.
		/// ListLabelingJobs #X-Amz-Target=SageMaker.ListLabelingJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListLabelingJobsResponse> ListLabelingJobsAsync(string MaxResults, string NextToken, ListLabelingJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListLabelingJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLabelingJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of labeling jobs assigned to a specified work team.
		/// ListLabelingJobsForWorkteam #X-Amz-Target=SageMaker.ListLabelingJobsForWorkteam
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListLabelingJobsForWorkteamResponse> ListLabelingJobsForWorkteamAsync(string MaxResults, string NextToken, ListLabelingJobsForWorkteamRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListLabelingJobsForWorkteam?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLabelingJobsForWorkteamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A list of lineage groups shared with your Amazon Web Services account. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html"> Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.
		/// ListLineageGroups #X-Amz-Target=SageMaker.ListLineageGroups
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListLineageGroupsResponse> ListLineageGroupsAsync(string MaxResults, string NextToken, ListLineageGroupsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListLineageGroups?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLineageGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists model bias jobs definitions that satisfy various filters.
		/// ListModelBiasJobDefinitions #X-Amz-Target=SageMaker.ListModelBiasJobDefinitions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListModelBiasJobDefinitionsResponse> ListModelBiasJobDefinitionsAsync(string MaxResults, string NextToken, ListModelBiasJobDefinitionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListModelBiasJobDefinitions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListModelBiasJobDefinitionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the export jobs for the Amazon SageMaker Model Card.
		/// ListModelCardExportJobs #X-Amz-Target=SageMaker.ListModelCardExportJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListModelCardExportJobsResponse> ListModelCardExportJobsAsync(string MaxResults, string NextToken, ListModelCardExportJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListModelCardExportJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListModelCardExportJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List existing versions of an Amazon SageMaker Model Card.
		/// ListModelCardVersions #X-Amz-Target=SageMaker.ListModelCardVersions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListModelCardVersionsResponse> ListModelCardVersionsAsync(string MaxResults, string NextToken, ListModelCardVersionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListModelCardVersions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListModelCardVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List existing model cards.
		/// ListModelCards #X-Amz-Target=SageMaker.ListModelCards
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListModelCardsResponse> ListModelCardsAsync(string MaxResults, string NextToken, ListModelCardsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListModelCards?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListModelCardsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists model explainability job definitions that satisfy various filters.
		/// ListModelExplainabilityJobDefinitions #X-Amz-Target=SageMaker.ListModelExplainabilityJobDefinitions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListModelExplainabilityJobDefinitionsResponse> ListModelExplainabilityJobDefinitionsAsync(string MaxResults, string NextToken, ListModelExplainabilityJobDefinitionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListModelExplainabilityJobDefinitions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListModelExplainabilityJobDefinitionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the domain, framework, task, and model name of standard machine learning models found in common model zoos.
		/// ListModelMetadata #X-Amz-Target=SageMaker.ListModelMetadata
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListModelMetadataResponse> ListModelMetadataAsync(string MaxResults, string NextToken, ListModelMetadataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListModelMetadata?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListModelMetadataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the model groups in your Amazon Web Services account.
		/// ListModelPackageGroups #X-Amz-Target=SageMaker.ListModelPackageGroups
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListModelPackageGroupsOutput> ListModelPackageGroupsAsync(string MaxResults, string NextToken, ListModelPackageGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListModelPackageGroups?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListModelPackageGroupsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the model packages that have been created.
		/// ListModelPackages #X-Amz-Target=SageMaker.ListModelPackages
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListModelPackagesOutput> ListModelPackagesAsync(string MaxResults, string NextToken, ListModelPackagesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListModelPackages?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListModelPackagesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of model quality monitoring job definitions in your account.
		/// ListModelQualityJobDefinitions #X-Amz-Target=SageMaker.ListModelQualityJobDefinitions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListModelQualityJobDefinitionsResponse> ListModelQualityJobDefinitionsAsync(string MaxResults, string NextToken, ListModelQualityJobDefinitionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListModelQualityJobDefinitions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListModelQualityJobDefinitionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists models created with the <code>CreateModel</code> API.
		/// ListModels #X-Amz-Target=SageMaker.ListModels
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListModelsOutput> ListModelsAsync(string MaxResults, string NextToken, ListModelsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListModels?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListModelsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of past alerts in a model monitoring schedule.
		/// ListMonitoringAlertHistory #X-Amz-Target=SageMaker.ListMonitoringAlertHistory
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMonitoringAlertHistoryResponse> ListMonitoringAlertHistoryAsync(string MaxResults, string NextToken, ListMonitoringAlertHistoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListMonitoringAlertHistory?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMonitoringAlertHistoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the alerts for a single monitoring schedule.
		/// ListMonitoringAlerts #X-Amz-Target=SageMaker.ListMonitoringAlerts
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMonitoringAlertsResponse> ListMonitoringAlertsAsync(string MaxResults, string NextToken, ListMonitoringAlertsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListMonitoringAlerts?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMonitoringAlertsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns list of all monitoring job executions.
		/// ListMonitoringExecutions #X-Amz-Target=SageMaker.ListMonitoringExecutions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMonitoringExecutionsResponse> ListMonitoringExecutionsAsync(string MaxResults, string NextToken, ListMonitoringExecutionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListMonitoringExecutions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMonitoringExecutionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns list of all monitoring schedules.
		/// ListMonitoringSchedules #X-Amz-Target=SageMaker.ListMonitoringSchedules
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMonitoringSchedulesResponse> ListMonitoringSchedulesAsync(string MaxResults, string NextToken, ListMonitoringSchedulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListMonitoringSchedules?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMonitoringSchedulesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists notebook instance lifestyle configurations created with the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateNotebookInstanceLifecycleConfig.html">CreateNotebookInstanceLifecycleConfig</a> API.
		/// ListNotebookInstanceLifecycleConfigs #X-Amz-Target=SageMaker.ListNotebookInstanceLifecycleConfigs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListNotebookInstanceLifecycleConfigsOutput> ListNotebookInstanceLifecycleConfigsAsync(string MaxResults, string NextToken, ListNotebookInstanceLifecycleConfigsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListNotebookInstanceLifecycleConfigs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListNotebookInstanceLifecycleConfigsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the SageMaker notebook instances in the requester's account in an Amazon Web Services Region.
		/// ListNotebookInstances #X-Amz-Target=SageMaker.ListNotebookInstances
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListNotebookInstancesOutput> ListNotebookInstancesAsync(string MaxResults, string NextToken, ListNotebookInstancesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListNotebookInstances?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListNotebookInstancesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of <code>PipeLineExecutionStep</code> objects.
		/// ListPipelineExecutionSteps #X-Amz-Target=SageMaker.ListPipelineExecutionSteps
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPipelineExecutionStepsResponse> ListPipelineExecutionStepsAsync(string MaxResults, string NextToken, ListPipelineExecutionStepsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListPipelineExecutionSteps?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPipelineExecutionStepsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the pipeline executions.
		/// ListPipelineExecutions #X-Amz-Target=SageMaker.ListPipelineExecutions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPipelineExecutionsResponse> ListPipelineExecutionsAsync(string MaxResults, string NextToken, ListPipelineExecutionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListPipelineExecutions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPipelineExecutionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of parameters for a pipeline execution.
		/// ListPipelineParametersForExecution #X-Amz-Target=SageMaker.ListPipelineParametersForExecution
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPipelineParametersForExecutionResponse> ListPipelineParametersForExecutionAsync(string MaxResults, string NextToken, ListPipelineParametersForExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListPipelineParametersForExecution?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPipelineParametersForExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of pipelines.
		/// ListPipelines #X-Amz-Target=SageMaker.ListPipelines
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPipelinesResponse> ListPipelinesAsync(string MaxResults, string NextToken, ListPipelinesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListPipelines?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPipelinesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists processing jobs that satisfy various filters.
		/// ListProcessingJobs #X-Amz-Target=SageMaker.ListProcessingJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProcessingJobsResponse> ListProcessingJobsAsync(string MaxResults, string NextToken, ListProcessingJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListProcessingJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProcessingJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the projects in an Amazon Web Services account.
		/// ListProjects #X-Amz-Target=SageMaker.ListProjects
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProjectsOutput> ListProjectsAsync(string MaxResults, string NextToken, ListProjectsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListProjects?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProjectsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists Amazon SageMaker Catalogs based on given filters and orders. The maximum number of <code>ResourceCatalog</code>s viewable is 1000.
		/// ListResourceCatalogs #X-Amz-Target=SageMaker.ListResourceCatalogs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListResourceCatalogsResponse> ListResourceCatalogsAsync(string MaxResults, string NextToken, ListResourceCatalogsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListResourceCatalogs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListResourceCatalogsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists spaces.
		/// ListSpaces #X-Amz-Target=SageMaker.ListSpaces
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSpacesResponse> ListSpacesAsync(string MaxResults, string NextToken, ListSpacesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListSpaces?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSpacesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists devices allocated to the stage, containing detailed device information and deployment status.
		/// ListStageDevices #X-Amz-Target=SageMaker.ListStageDevices
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListStageDevicesResponse> ListStageDevicesAsync(string MaxResults, string NextToken, ListStageDevicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListStageDevices?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListStageDevicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the Studio Lifecycle Configurations in your Amazon Web Services Account.
		/// ListStudioLifecycleConfigs #X-Amz-Target=SageMaker.ListStudioLifecycleConfigs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListStudioLifecycleConfigsResponse> ListStudioLifecycleConfigsAsync(string MaxResults, string NextToken, ListStudioLifecycleConfigsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListStudioLifecycleConfigs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListStudioLifecycleConfigsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the work teams that you are subscribed to in the Amazon Web Services Marketplace. The list may be empty if no work team satisfies the filter specified in the <code>NameContains</code> parameter.
		/// ListSubscribedWorkteams #X-Amz-Target=SageMaker.ListSubscribedWorkteams
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSubscribedWorkteamsResponse> ListSubscribedWorkteamsAsync(string MaxResults, string NextToken, ListSubscribedWorkteamsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListSubscribedWorkteams?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSubscribedWorkteamsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the tags for the specified SageMaker resource.
		/// ListTags #X-Amz-Target=SageMaker.ListTags
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTagsOutput> ListTagsAsync(string MaxResults, string NextToken, ListTagsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListTags?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists training jobs.</p> <note> <p>When <code>StatusEquals</code> and <code>MaxResults</code> are set at the same time, the <code>MaxResults</code> number of training jobs are first retrieved ignoring the <code>StatusEquals</code> parameter and then they are filtered by the <code>StatusEquals</code> parameter, which is returned as a response.</p> <p>For example, if <code>ListTrainingJobs</code> is invoked with the following parameters:</p> <p> <code>{ ... MaxResults: 100, StatusEquals: InProgress ... }</code> </p> <p>First, 100 trainings jobs with any status, including those other than <code>InProgress</code>, are selected (sorted according to the creation time, from the most current to the oldest). Next, those with a status of <code>InProgress</code> are returned.</p> <p>You can quickly test the API using the following Amazon Web Services CLI code.</p> <p> <code>aws sagemaker list-training-jobs --max-results 100 --status-equals InProgress</code> </p> </note>
		/// ListTrainingJobs #X-Amz-Target=SageMaker.ListTrainingJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTrainingJobsResponse> ListTrainingJobsAsync(string MaxResults, string NextToken, ListTrainingJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListTrainingJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTrainingJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html">TrainingJobSummary</a> objects that describe the training jobs that a hyperparameter tuning job launched.
		/// ListTrainingJobsForHyperParameterTuningJob #X-Amz-Target=SageMaker.ListTrainingJobsForHyperParameterTuningJob
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTrainingJobsForHyperParameterTuningJobResponse> ListTrainingJobsForHyperParameterTuningJobAsync(string MaxResults, string NextToken, ListTrainingJobsForHyperParameterTuningJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListTrainingJobsForHyperParameterTuningJob?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTrainingJobsForHyperParameterTuningJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists transform jobs.
		/// ListTransformJobs #X-Amz-Target=SageMaker.ListTransformJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTransformJobsResponse> ListTransformJobsAsync(string MaxResults, string NextToken, ListTransformJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListTransformJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTransformJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the trial components in your account. You can sort the list by trial component name or creation time. You can filter the list to show only components that were created in a specific time range. You can also filter on one of the following:</p> <ul> <li> <p> <code>ExperimentName</code> </p> </li> <li> <p> <code>SourceArn</code> </p> </li> <li> <p> <code>TrialName</code> </p> </li> </ul>
		/// ListTrialComponents #X-Amz-Target=SageMaker.ListTrialComponents
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTrialComponentsResponse> ListTrialComponentsAsync(string MaxResults, string NextToken, ListTrialComponentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListTrialComponents?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTrialComponentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the trials in your account. Specify an experiment name to limit the list to the trials that are part of that experiment. Specify a trial component name to limit the list to the trials that associated with that trial component. The list can be filtered to show only trials that were created in a specific time range. The list can be sorted by trial name or creation time.
		/// ListTrials #X-Amz-Target=SageMaker.ListTrials
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTrialsResponse> ListTrialsAsync(string MaxResults, string NextToken, ListTrialsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListTrials?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTrialsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists user profiles.
		/// ListUserProfiles #X-Amz-Target=SageMaker.ListUserProfiles
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListUserProfilesResponse> ListUserProfilesAsync(string MaxResults, string NextToken, ListUserProfilesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListUserProfiles?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListUserProfilesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this operation to list all private and vendor workforces in an Amazon Web Services Region. Note that you can only have one private workforce per Amazon Web Services Region.
		/// ListWorkforces #X-Amz-Target=SageMaker.ListWorkforces
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListWorkforcesResponse> ListWorkforcesAsync(string MaxResults, string NextToken, ListWorkforcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListWorkforces?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWorkforcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of private work teams that you have defined in a region. The list may be empty if no work team satisfies the filter specified in the <code>NameContains</code> parameter.
		/// ListWorkteams #X-Amz-Target=SageMaker.ListWorkteams
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListWorkteamsResponse> ListWorkteamsAsync(string MaxResults, string NextToken, ListWorkteamsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.ListWorkteams?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWorkteamsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a resouce policy to control access to a model group. For information about resoure policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based policies and resource-based policies</a> in the <i>Amazon Web Services Identity and Access Management User Guide.</i>.
		/// PutModelPackageGroupPolicy #X-Amz-Target=SageMaker.PutModelPackageGroupPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutModelPackageGroupPolicyOutput> PutModelPackageGroupPolicyAsync(PutModelPackageGroupPolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.PutModelPackageGroupPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutModelPackageGroupPolicyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this action to inspect your lineage and discover relationships between entities. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html"> Querying Lineage Entities</a> in the <i>Amazon SageMaker Developer Guide</i>.
		/// QueryLineage #X-Amz-Target=SageMaker.QueryLineage
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<QueryLineageResponse> QueryLineageAsync(string MaxResults, string NextToken, QueryLineageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.QueryLineage?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryLineageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Register devices.
		/// RegisterDevices #X-Amz-Target=SageMaker.RegisterDevices
		/// </summary>
		/// <returns>Success</returns>
		public async Task RegisterDevicesAsync(RegisterDevicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.RegisterDevices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Renders the UI template so that you can preview the worker's experience.
		/// RenderUiTemplate #X-Amz-Target=SageMaker.RenderUiTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RenderUiTemplateResponse> RenderUiTemplateAsync(RenderUiTemplateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.RenderUiTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RenderUiTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retry the execution of the pipeline.
		/// RetryPipelineExecution #X-Amz-Target=SageMaker.RetryPipelineExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RetryPipelineExecutionResponse> RetryPipelineExecutionAsync(RetryPipelineExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.RetryPipelineExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetryPipelineExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Finds SageMaker resources that match a search query. Matching resources are returned as a list of <code>SearchRecord</code> objects in the response. You can sort the search results by any resource property in a ascending or descending order.</p> <p>You can query against the following value types: numeric, text, Boolean, and timestamp.</p> <note> <p>The Search API may provide access to otherwise restricted data. See <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html">Amazon SageMaker API Permissions: Actions, Permissions, and Resources Reference</a> for more information.</p> </note>
		/// Search #X-Amz-Target=SageMaker.Search
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SearchResponse> SearchAsync(string MaxResults, string NextToken, SearchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.Search?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Notifies the pipeline that the execution of a callback step failed, along with a message describing why. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).
		/// SendPipelineExecutionStepFailure #X-Amz-Target=SageMaker.SendPipelineExecutionStepFailure
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SendPipelineExecutionStepFailureResponse> SendPipelineExecutionStepFailureAsync(SendPipelineExecutionStepFailureRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.SendPipelineExecutionStepFailure";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendPipelineExecutionStepFailureResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Notifies the pipeline that the execution of a callback step succeeded and provides a list of the step's output parameters. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).
		/// SendPipelineExecutionStepSuccess #X-Amz-Target=SageMaker.SendPipelineExecutionStepSuccess
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SendPipelineExecutionStepSuccessResponse> SendPipelineExecutionStepSuccessAsync(SendPipelineExecutionStepSuccessRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.SendPipelineExecutionStepSuccess";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendPipelineExecutionStepSuccessResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a stage in an edge deployment plan.
		/// StartEdgeDeploymentStage #X-Amz-Target=SageMaker.StartEdgeDeploymentStage
		/// </summary>
		/// <returns>Success</returns>
		public async Task StartEdgeDeploymentStageAsync(StartEdgeDeploymentStageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StartEdgeDeploymentStage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an inference experiment.
		/// StartInferenceExperiment #X-Amz-Target=SageMaker.StartInferenceExperiment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartInferenceExperimentResponse> StartInferenceExperimentAsync(StartInferenceExperimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StartInferenceExperiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartInferenceExperimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts a previously stopped monitoring schedule.</p> <note> <p>By default, when you successfully create a new schedule, the status of a monitoring schedule is <code>scheduled</code>.</p> </note>
		/// StartMonitoringSchedule #X-Amz-Target=SageMaker.StartMonitoringSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task StartMonitoringScheduleAsync(StartMonitoringScheduleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StartMonitoringSchedule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Launches an ML compute instance with the latest version of the libraries and attaches your ML storage volume. After configuring the notebook instance, SageMaker sets the notebook instance status to <code>InService</code>. A notebook instance's status must be <code>InService</code> before you can connect to your Jupyter notebook.
		/// StartNotebookInstance #X-Amz-Target=SageMaker.StartNotebookInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task StartNotebookInstanceAsync(StartNotebookInstanceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StartNotebookInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a pipeline execution.
		/// StartPipelineExecution #X-Amz-Target=SageMaker.StartPipelineExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartPipelineExecutionResponse> StartPipelineExecutionAsync(StartPipelineExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StartPipelineExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartPipelineExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A method for forcing a running job to shut down.
		/// StopAutoMLJob #X-Amz-Target=SageMaker.StopAutoMLJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopAutoMLJobAsync(StopAutoMLJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StopAutoMLJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops a model compilation job.</p> <p> To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal. This gracefully shuts the job down. If the job hasn't stopped, it sends the SIGKILL signal.</p> <p>When it receives a <code>StopCompilationJob</code> request, Amazon SageMaker changes the <code>CompilationJobStatus</code> of the job to <code>Stopping</code>. After Amazon SageMaker stops the job, it sets the <code>CompilationJobStatus</code> to <code>Stopped</code>. </p>
		/// StopCompilationJob #X-Amz-Target=SageMaker.StopCompilationJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopCompilationJobAsync(StopCompilationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StopCompilationJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops a stage in an edge deployment plan.
		/// StopEdgeDeploymentStage #X-Amz-Target=SageMaker.StopEdgeDeploymentStage
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopEdgeDeploymentStageAsync(StopEdgeDeploymentStageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StopEdgeDeploymentStage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Request to stop an edge packaging job.
		/// StopEdgePackagingJob #X-Amz-Target=SageMaker.StopEdgePackagingJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopEdgePackagingJobAsync(StopEdgePackagingJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StopEdgePackagingJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops a running hyperparameter tuning job and all running training jobs that the tuning job launched.</p> <p>All model artifacts output from the training jobs are stored in Amazon Simple Storage Service (Amazon S3). All data that the training jobs write to Amazon CloudWatch Logs are still available in CloudWatch. After the tuning job moves to the <code>Stopped</code> state, it releases all reserved resources for the tuning job.</p>
		/// StopHyperParameterTuningJob #X-Amz-Target=SageMaker.StopHyperParameterTuningJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopHyperParameterTuningJobAsync(StopHyperParameterTuningJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StopHyperParameterTuningJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops an inference experiment.
		/// StopInferenceExperiment #X-Amz-Target=SageMaker.StopInferenceExperiment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopInferenceExperimentResponse> StopInferenceExperimentAsync(StopInferenceExperimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StopInferenceExperiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopInferenceExperimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops an Inference Recommender job.
		/// StopInferenceRecommendationsJob #X-Amz-Target=SageMaker.StopInferenceRecommendationsJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopInferenceRecommendationsJobAsync(StopInferenceRecommendationsJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StopInferenceRecommendationsJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops a running labeling job. A job that is stopped cannot be restarted. Any results obtained before the job is stopped are placed in the Amazon S3 output bucket.
		/// StopLabelingJob #X-Amz-Target=SageMaker.StopLabelingJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopLabelingJobAsync(StopLabelingJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StopLabelingJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops a previously started monitoring schedule.
		/// StopMonitoringSchedule #X-Amz-Target=SageMaker.StopMonitoringSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopMonitoringScheduleAsync(StopMonitoringScheduleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StopMonitoringSchedule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Terminates the ML compute instance. Before terminating the instance, SageMaker disconnects the ML storage volume from it. SageMaker preserves the ML storage volume. SageMaker stops charging you for the ML compute instance when you call <code>StopNotebookInstance</code>.</p> <p>To access data on the ML storage volume for a notebook instance that has been terminated, call the <code>StartNotebookInstance</code> API. <code>StartNotebookInstance</code> launches another ML compute instance, configures it, and attaches the preserved ML storage volume so you can continue your work. </p>
		/// StopNotebookInstance #X-Amz-Target=SageMaker.StopNotebookInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopNotebookInstanceAsync(StopNotebookInstanceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StopNotebookInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops a pipeline execution.</p> <p> <b>Callback Step</b> </p> <p>A pipeline execution won't stop while a callback step is running. When you call <code>StopPipelineExecution</code> on a pipeline execution with a running callback step, SageMaker Pipelines sends an additional Amazon SQS message to the specified SQS queue. The body of the SQS message contains a "Status" field which is set to "Stopping".</p> <p>You should add logic to your Amazon SQS message consumer to take any needed action (for example, resource cleanup) upon receipt of the message followed by a call to <code>SendPipelineExecutionStepSuccess</code> or <code>SendPipelineExecutionStepFailure</code>.</p> <p>Only when SageMaker Pipelines receives one of these calls will it stop the pipeline execution.</p> <p> <b>Lambda Step</b> </p> <p>A pipeline execution can't be stopped while a lambda step is running because the Lambda function invoked by the lambda step can't be stopped. If you attempt to stop the execution while the Lambda function is running, the pipeline waits for the Lambda function to finish or until the timeout is hit, whichever occurs first, and then stops. If the Lambda function finishes, the pipeline execution status is <code>Stopped</code>. If the timeout is hit the pipeline execution status is <code>Failed</code>.</p>
		/// StopPipelineExecution #X-Amz-Target=SageMaker.StopPipelineExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopPipelineExecutionResponse> StopPipelineExecutionAsync(StopPipelineExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StopPipelineExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopPipelineExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops a processing job.
		/// StopProcessingJob #X-Amz-Target=SageMaker.StopProcessingJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopProcessingJobAsync(StopProcessingJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StopProcessingJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops a training job. To stop a job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms might use this 120-second window to save the model artifacts, so the results of the training is not lost. </p> <p>When it receives a <code>StopTrainingJob</code> request, SageMaker changes the status of the job to <code>Stopping</code>. After SageMaker stops the job, it sets the status to <code>Stopped</code>.</p>
		/// StopTrainingJob #X-Amz-Target=SageMaker.StopTrainingJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopTrainingJobAsync(StopTrainingJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StopTrainingJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops a batch transform job.</p> <p>When Amazon SageMaker receives a <code>StopTransformJob</code> request, the status of the job changes to <code>Stopping</code>. After Amazon SageMaker stops the job, the status is set to <code>Stopped</code>. When you stop a batch transform job before it is completed, Amazon SageMaker doesn't store the job's output in Amazon S3.</p>
		/// StopTransformJob #X-Amz-Target=SageMaker.StopTransformJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopTransformJobAsync(StopTransformJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.StopTransformJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an action.
		/// UpdateAction #X-Amz-Target=SageMaker.UpdateAction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateActionResponse> UpdateActionAsync(UpdateActionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateAction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the properties of an AppImageConfig.
		/// UpdateAppImageConfig #X-Amz-Target=SageMaker.UpdateAppImageConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateAppImageConfigResponse> UpdateAppImageConfigAsync(UpdateAppImageConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateAppImageConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAppImageConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an artifact.
		/// UpdateArtifact #X-Amz-Target=SageMaker.UpdateArtifact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateArtifactResponse> UpdateArtifactAsync(UpdateArtifactRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateArtifact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateArtifactResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the specified Git repository with the specified values.
		/// UpdateCodeRepository #X-Amz-Target=SageMaker.UpdateCodeRepository
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateCodeRepositoryOutput> UpdateCodeRepositoryAsync(UpdateCodeRepositoryInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateCodeRepository";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateCodeRepositoryOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a context.
		/// UpdateContext #X-Amz-Target=SageMaker.UpdateContext
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateContextResponse> UpdateContextAsync(UpdateContextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateContext";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateContextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a fleet of devices.
		/// UpdateDeviceFleet #X-Amz-Target=SageMaker.UpdateDeviceFleet
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateDeviceFleetAsync(UpdateDeviceFleetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateDeviceFleet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates one or more devices in a fleet.
		/// UpdateDevices #X-Amz-Target=SageMaker.UpdateDevices
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateDevicesAsync(UpdateDevicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateDevices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the default settings for new user profiles in the domain.
		/// UpdateDomain #X-Amz-Target=SageMaker.UpdateDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDomainResponse> UpdateDomainAsync(UpdateDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deploys the new <code>EndpointConfig</code> specified in the request, switches to using newly created endpoint, and then deletes resources provisioned for the endpoint using the previous <code>EndpointConfig</code> (there is no availability loss). </p> <p>When SageMaker receives the request, it sets the endpoint status to <code>Updating</code>. After updating the endpoint, it sets the status to <code>InService</code>. To check the status of an endpoint, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html">DescribeEndpoint</a> API. </p> <note> <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. To update an endpoint, you must create a new <code>EndpointConfig</code>.</p> <p>If you delete the <code>EndpointConfig</code> of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.</p> </note>
		/// UpdateEndpoint #X-Amz-Target=SageMaker.UpdateEndpoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateEndpointOutput> UpdateEndpointAsync(UpdateEndpointInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateEndpoint";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateEndpointOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates variant weight of one or more variants associated with an existing endpoint, or capacity of one variant associated with an existing endpoint. When it receives the request, SageMaker sets the endpoint status to <code>Updating</code>. After updating the endpoint, it sets the status to <code>InService</code>. To check the status of an endpoint, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html">DescribeEndpoint</a> API.
		/// UpdateEndpointWeightsAndCapacities #X-Amz-Target=SageMaker.UpdateEndpointWeightsAndCapacities
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateEndpointWeightsAndCapacitiesOutput> UpdateEndpointWeightsAndCapacitiesAsync(UpdateEndpointWeightsAndCapacitiesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateEndpointWeightsAndCapacities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateEndpointWeightsAndCapacitiesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds, updates, or removes the description of an experiment. Updates the display name of an experiment.
		/// UpdateExperiment #X-Amz-Target=SageMaker.UpdateExperiment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateExperimentResponse> UpdateExperimentAsync(UpdateExperimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateExperiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateExperimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the feature group by either adding features or updating the online store configuration. Use one of the following request parameters at a time while using the <code>UpdateFeatureGroup</code> API.</p> <p>You can add features for your feature group using the <code>FeatureAdditions</code> request parameter. Features cannot be removed from a feature group.</p> <p>You can update the online store configuration by using the <code>OnlineStoreConfig</code> request parameter. If a <code>TtlDuration</code> is specified, the default <code>TtlDuration</code> applies for all records added to the feature group <i>after the feature group is updated</i>. If a record level <code>TtlDuration</code> exists from using the <code>PutRecord</code> API, the record level <code>TtlDuration</code> applies to that record instead of the default <code>TtlDuration</code>.</p>
		/// UpdateFeatureGroup #X-Amz-Target=SageMaker.UpdateFeatureGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateFeatureGroupResponse> UpdateFeatureGroupAsync(UpdateFeatureGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateFeatureGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateFeatureGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the description and parameters of the feature group.
		/// UpdateFeatureMetadata #X-Amz-Target=SageMaker.UpdateFeatureMetadata
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateFeatureMetadataAsync(UpdateFeatureMetadataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateFeatureMetadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Update a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		/// UpdateHub #X-Amz-Target=SageMaker.UpdateHub
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateHubResponse> UpdateHubAsync(UpdateHubRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateHub";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateHubResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the properties of a SageMaker image. To change the image's tags, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html">AddTags</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteTags.html">DeleteTags</a> APIs.
		/// UpdateImage #X-Amz-Target=SageMaker.UpdateImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateImageResponse> UpdateImageAsync(UpdateImageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateImage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateImageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the properties of a SageMaker image version.
		/// UpdateImageVersion #X-Amz-Target=SageMaker.UpdateImageVersion
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateImageVersionResponse> UpdateImageVersionAsync(UpdateImageVersionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateImageVersion";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateImageVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an inference experiment that you created. The status of the inference experiment has to be either <code>Created</code>, <code>Running</code>. For more information on the status of an inference experiment, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeInferenceExperiment.html">DescribeInferenceExperiment</a>.
		/// UpdateInferenceExperiment #X-Amz-Target=SageMaker.UpdateInferenceExperiment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateInferenceExperimentResponse> UpdateInferenceExperimentAsync(UpdateInferenceExperimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateInferenceExperiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateInferenceExperimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Update an Amazon SageMaker Model Card.</p> <important> <p>You cannot update both model card content and model card status in a single call.</p> </important>
		/// UpdateModelCard #X-Amz-Target=SageMaker.UpdateModelCard
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateModelCardResponse> UpdateModelCardAsync(UpdateModelCardRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateModelCard";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateModelCardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a versioned model.
		/// UpdateModelPackage #X-Amz-Target=SageMaker.UpdateModelPackage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateModelPackageOutput> UpdateModelPackageAsync(UpdateModelPackageInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateModelPackage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateModelPackageOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the parameters of a model monitor alert.
		/// UpdateMonitoringAlert #X-Amz-Target=SageMaker.UpdateMonitoringAlert
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateMonitoringAlertResponse> UpdateMonitoringAlertAsync(UpdateMonitoringAlertRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateMonitoringAlert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateMonitoringAlertResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a previously created schedule.
		/// UpdateMonitoringSchedule #X-Amz-Target=SageMaker.UpdateMonitoringSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateMonitoringScheduleResponse> UpdateMonitoringScheduleAsync(UpdateMonitoringScheduleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateMonitoringSchedule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateMonitoringScheduleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a notebook instance. NotebookInstance updates include upgrading or downgrading the ML compute instance used for your notebook instance to accommodate changes in your workload requirements.
		/// UpdateNotebookInstance #X-Amz-Target=SageMaker.UpdateNotebookInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateNotebookInstanceOutput> UpdateNotebookInstanceAsync(UpdateNotebookInstanceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateNotebookInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateNotebookInstanceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a notebook instance lifecycle configuration created with the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateNotebookInstanceLifecycleConfig.html">CreateNotebookInstanceLifecycleConfig</a> API.
		/// UpdateNotebookInstanceLifecycleConfig #X-Amz-Target=SageMaker.UpdateNotebookInstanceLifecycleConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateNotebookInstanceLifecycleConfigOutput> UpdateNotebookInstanceLifecycleConfigAsync(UpdateNotebookInstanceLifecycleConfigInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateNotebookInstanceLifecycleConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateNotebookInstanceLifecycleConfigOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a pipeline.
		/// UpdatePipeline #X-Amz-Target=SageMaker.UpdatePipeline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdatePipelineResponse> UpdatePipelineAsync(UpdatePipelineRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdatePipeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a pipeline execution.
		/// UpdatePipelineExecution #X-Amz-Target=SageMaker.UpdatePipelineExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdatePipelineExecutionResponse> UpdatePipelineExecutionAsync(UpdatePipelineExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdatePipelineExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePipelineExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a machine learning (ML) project that is created from a template that sets up an ML pipeline from training to deploying an approved model.</p> <note> <p>You must not update a project that is in use. If you update the <code>ServiceCatalogProvisioningUpdateDetails</code> of a project that is active or being created, or updated, you may lose resources already created by the project.</p> </note>
		/// UpdateProject #X-Amz-Target=SageMaker.UpdateProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateProjectOutput> UpdateProjectAsync(UpdateProjectInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateProjectOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the settings of a space.
		/// UpdateSpace #X-Amz-Target=SageMaker.UpdateSpace
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateSpaceResponse> UpdateSpaceAsync(UpdateSpaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateSpace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSpaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a model training job to request a new Debugger profiling configuration or to change warm pool retention length.
		/// UpdateTrainingJob #X-Amz-Target=SageMaker.UpdateTrainingJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateTrainingJobResponse> UpdateTrainingJobAsync(UpdateTrainingJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateTrainingJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateTrainingJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the display name of a trial.
		/// UpdateTrial #X-Amz-Target=SageMaker.UpdateTrial
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateTrialResponse> UpdateTrialAsync(UpdateTrialRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateTrial";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateTrialResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates one or more properties of a trial component.
		/// UpdateTrialComponent #X-Amz-Target=SageMaker.UpdateTrialComponent
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateTrialComponentResponse> UpdateTrialComponentAsync(UpdateTrialComponentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateTrialComponent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateTrialComponentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a user profile.
		/// UpdateUserProfile #X-Amz-Target=SageMaker.UpdateUserProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateUserProfileResponse> UpdateUserProfileAsync(UpdateUserProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateUserProfile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateUserProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Use this operation to update your workforce. You can use this operation to require that workers use specific IP addresses to work on tasks and to update your OpenID Connect (OIDC) Identity Provider (IdP) workforce configuration.</p> <p>The worker portal is now supported in VPC and public internet.</p> <p> Use <code>SourceIpConfig</code> to restrict worker access to tasks to a specific range of IP addresses. You specify allowed IP addresses by creating a list of up to ten <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>. By default, a workforce isn't restricted to specific IP addresses. If you specify a range of IP addresses, workers who attempt to access tasks using any IP address outside the specified range are denied and get a <code>Not Found</code> error message on the worker portal.</p> <p>To restrict access to all the workers in public internet, add the <code>SourceIpConfig</code> CIDR value as "10.0.0.0/16".</p> <important> <p>Amazon SageMaker does not support Source Ip restriction for worker portals in VPC.</p> </important> <p>Use <code>OidcConfig</code> to update the configuration of a workforce created using your own OIDC IdP. </p> <important> <p>You can only update your OIDC IdP configuration when there are no work teams associated with your workforce. You can delete work teams using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkteam.html">DeleteWorkteam</a> operation.</p> </important> <p>After restricting access to a range of IP addresses or updating your OIDC IdP configuration with this operation, you can view details about your update workforce using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeWorkforce.html">DescribeWorkforce</a> operation.</p> <important> <p>This operation only applies to private workforces.</p> </important>
		/// UpdateWorkforce #X-Amz-Target=SageMaker.UpdateWorkforce
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateWorkforceResponse> UpdateWorkforceAsync(UpdateWorkforceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateWorkforce";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateWorkforceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing work team with new member definitions or description.
		/// UpdateWorkteam #X-Amz-Target=SageMaker.UpdateWorkteam
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateWorkteamResponse> UpdateWorkteamAsync(UpdateWorkteamRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SageMaker.UpdateWorkteam";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateWorkteamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum AddAssociationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.AddAssociation")]
		SageMaker_AddAssociation = 0,
	}
	
	public enum AddTagsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.AddTags")]
		SageMaker_AddTags = 0,
	}
	
	public enum AssociateTrialComponentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.AssociateTrialComponent")]
		SageMaker_AssociateTrialComponent = 0,
	}
	
	public enum BatchDescribeModelPackageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.BatchDescribeModelPackage")]
		SageMaker_BatchDescribeModelPackage = 0,
	}
	
	public enum CreateActionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateAction")]
		SageMaker_CreateAction = 0,
	}
	
	public enum CreateAlgorithmX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateAlgorithm")]
		SageMaker_CreateAlgorithm = 0,
	}
	
	public enum CreateAppX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateApp")]
		SageMaker_CreateApp = 0,
	}
	
	public enum CreateAppImageConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateAppImageConfig")]
		SageMaker_CreateAppImageConfig = 0,
	}
	
	public enum CreateArtifactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateArtifact")]
		SageMaker_CreateArtifact = 0,
	}
	
	public enum CreateAutoMLJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateAutoMLJob")]
		SageMaker_CreateAutoMLJob = 0,
	}
	
	public enum CreateAutoMLJobV2X_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateAutoMLJobV2")]
		SageMaker_CreateAutoMLJobV2 = 0,
	}
	
	public enum CreateCodeRepositoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateCodeRepository")]
		SageMaker_CreateCodeRepository = 0,
	}
	
	public enum CreateCompilationJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateCompilationJob")]
		SageMaker_CreateCompilationJob = 0,
	}
	
	public enum CreateContextX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateContext")]
		SageMaker_CreateContext = 0,
	}
	
	public enum CreateDataQualityJobDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateDataQualityJobDefinition")]
		SageMaker_CreateDataQualityJobDefinition = 0,
	}
	
	public enum CreateDeviceFleetX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateDeviceFleet")]
		SageMaker_CreateDeviceFleet = 0,
	}
	
	public enum CreateDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateDomain")]
		SageMaker_CreateDomain = 0,
	}
	
	public enum CreateEdgeDeploymentPlanX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateEdgeDeploymentPlan")]
		SageMaker_CreateEdgeDeploymentPlan = 0,
	}
	
	public enum CreateEdgeDeploymentStageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateEdgeDeploymentStage")]
		SageMaker_CreateEdgeDeploymentStage = 0,
	}
	
	public enum CreateEdgePackagingJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateEdgePackagingJob")]
		SageMaker_CreateEdgePackagingJob = 0,
	}
	
	public enum CreateEndpointX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateEndpoint")]
		SageMaker_CreateEndpoint = 0,
	}
	
	public enum CreateEndpointConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateEndpointConfig")]
		SageMaker_CreateEndpointConfig = 0,
	}
	
	public enum CreateExperimentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateExperiment")]
		SageMaker_CreateExperiment = 0,
	}
	
	public enum CreateFeatureGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateFeatureGroup")]
		SageMaker_CreateFeatureGroup = 0,
	}
	
	public enum CreateFlowDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateFlowDefinition")]
		SageMaker_CreateFlowDefinition = 0,
	}
	
	public enum CreateHubX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateHub")]
		SageMaker_CreateHub = 0,
	}
	
	public enum CreateHumanTaskUiX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateHumanTaskUi")]
		SageMaker_CreateHumanTaskUi = 0,
	}
	
	public enum CreateHyperParameterTuningJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateHyperParameterTuningJob")]
		SageMaker_CreateHyperParameterTuningJob = 0,
	}
	
	public enum CreateImageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateImage")]
		SageMaker_CreateImage = 0,
	}
	
	public enum CreateImageVersionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateImageVersion")]
		SageMaker_CreateImageVersion = 0,
	}
	
	public enum CreateInferenceExperimentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateInferenceExperiment")]
		SageMaker_CreateInferenceExperiment = 0,
	}
	
	public enum CreateInferenceRecommendationsJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateInferenceRecommendationsJob")]
		SageMaker_CreateInferenceRecommendationsJob = 0,
	}
	
	public enum CreateLabelingJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateLabelingJob")]
		SageMaker_CreateLabelingJob = 0,
	}
	
	public enum CreateModelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateModel")]
		SageMaker_CreateModel = 0,
	}
	
	public enum CreateModelBiasJobDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateModelBiasJobDefinition")]
		SageMaker_CreateModelBiasJobDefinition = 0,
	}
	
	public enum CreateModelCardX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateModelCard")]
		SageMaker_CreateModelCard = 0,
	}
	
	public enum CreateModelCardExportJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateModelCardExportJob")]
		SageMaker_CreateModelCardExportJob = 0,
	}
	
	public enum CreateModelExplainabilityJobDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateModelExplainabilityJobDefinition")]
		SageMaker_CreateModelExplainabilityJobDefinition = 0,
	}
	
	public enum CreateModelPackageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateModelPackage")]
		SageMaker_CreateModelPackage = 0,
	}
	
	public enum CreateModelPackageGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateModelPackageGroup")]
		SageMaker_CreateModelPackageGroup = 0,
	}
	
	public enum CreateModelQualityJobDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateModelQualityJobDefinition")]
		SageMaker_CreateModelQualityJobDefinition = 0,
	}
	
	public enum CreateMonitoringScheduleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateMonitoringSchedule")]
		SageMaker_CreateMonitoringSchedule = 0,
	}
	
	public enum CreateNotebookInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateNotebookInstance")]
		SageMaker_CreateNotebookInstance = 0,
	}
	
	public enum CreateNotebookInstanceLifecycleConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateNotebookInstanceLifecycleConfig")]
		SageMaker_CreateNotebookInstanceLifecycleConfig = 0,
	}
	
	public enum CreatePipelineX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreatePipeline")]
		SageMaker_CreatePipeline = 0,
	}
	
	public enum CreatePresignedDomainUrlX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreatePresignedDomainUrl")]
		SageMaker_CreatePresignedDomainUrl = 0,
	}
	
	public enum CreatePresignedNotebookInstanceUrlX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreatePresignedNotebookInstanceUrl")]
		SageMaker_CreatePresignedNotebookInstanceUrl = 0,
	}
	
	public enum CreateProcessingJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateProcessingJob")]
		SageMaker_CreateProcessingJob = 0,
	}
	
	public enum CreateProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateProject")]
		SageMaker_CreateProject = 0,
	}
	
	public enum CreateSpaceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateSpace")]
		SageMaker_CreateSpace = 0,
	}
	
	public enum CreateStudioLifecycleConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateStudioLifecycleConfig")]
		SageMaker_CreateStudioLifecycleConfig = 0,
	}
	
	public enum CreateTrainingJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateTrainingJob")]
		SageMaker_CreateTrainingJob = 0,
	}
	
	public enum CreateTransformJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateTransformJob")]
		SageMaker_CreateTransformJob = 0,
	}
	
	public enum CreateTrialX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateTrial")]
		SageMaker_CreateTrial = 0,
	}
	
	public enum CreateTrialComponentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateTrialComponent")]
		SageMaker_CreateTrialComponent = 0,
	}
	
	public enum CreateUserProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateUserProfile")]
		SageMaker_CreateUserProfile = 0,
	}
	
	public enum CreateWorkforceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateWorkforce")]
		SageMaker_CreateWorkforce = 0,
	}
	
	public enum CreateWorkteamX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.CreateWorkteam")]
		SageMaker_CreateWorkteam = 0,
	}
	
	public enum DeleteActionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteAction")]
		SageMaker_DeleteAction = 0,
	}
	
	public enum DeleteAlgorithmX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteAlgorithm")]
		SageMaker_DeleteAlgorithm = 0,
	}
	
	public enum DeleteAppX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteApp")]
		SageMaker_DeleteApp = 0,
	}
	
	public enum DeleteAppImageConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteAppImageConfig")]
		SageMaker_DeleteAppImageConfig = 0,
	}
	
	public enum DeleteArtifactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteArtifact")]
		SageMaker_DeleteArtifact = 0,
	}
	
	public enum DeleteAssociationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteAssociation")]
		SageMaker_DeleteAssociation = 0,
	}
	
	public enum DeleteCodeRepositoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteCodeRepository")]
		SageMaker_DeleteCodeRepository = 0,
	}
	
	public enum DeleteContextX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteContext")]
		SageMaker_DeleteContext = 0,
	}
	
	public enum DeleteDataQualityJobDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteDataQualityJobDefinition")]
		SageMaker_DeleteDataQualityJobDefinition = 0,
	}
	
	public enum DeleteDeviceFleetX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteDeviceFleet")]
		SageMaker_DeleteDeviceFleet = 0,
	}
	
	public enum DeleteDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteDomain")]
		SageMaker_DeleteDomain = 0,
	}
	
	public enum DeleteEdgeDeploymentPlanX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteEdgeDeploymentPlan")]
		SageMaker_DeleteEdgeDeploymentPlan = 0,
	}
	
	public enum DeleteEdgeDeploymentStageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteEdgeDeploymentStage")]
		SageMaker_DeleteEdgeDeploymentStage = 0,
	}
	
	public enum DeleteEndpointX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteEndpoint")]
		SageMaker_DeleteEndpoint = 0,
	}
	
	public enum DeleteEndpointConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteEndpointConfig")]
		SageMaker_DeleteEndpointConfig = 0,
	}
	
	public enum DeleteExperimentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteExperiment")]
		SageMaker_DeleteExperiment = 0,
	}
	
	public enum DeleteFeatureGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteFeatureGroup")]
		SageMaker_DeleteFeatureGroup = 0,
	}
	
	public enum DeleteFlowDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteFlowDefinition")]
		SageMaker_DeleteFlowDefinition = 0,
	}
	
	public enum DeleteHubX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteHub")]
		SageMaker_DeleteHub = 0,
	}
	
	public enum DeleteHubContentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteHubContent")]
		SageMaker_DeleteHubContent = 0,
	}
	
	public enum DeleteHumanTaskUiX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteHumanTaskUi")]
		SageMaker_DeleteHumanTaskUi = 0,
	}
	
	public enum DeleteImageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteImage")]
		SageMaker_DeleteImage = 0,
	}
	
	public enum DeleteImageVersionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteImageVersion")]
		SageMaker_DeleteImageVersion = 0,
	}
	
	public enum DeleteInferenceExperimentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteInferenceExperiment")]
		SageMaker_DeleteInferenceExperiment = 0,
	}
	
	public enum DeleteModelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteModel")]
		SageMaker_DeleteModel = 0,
	}
	
	public enum DeleteModelBiasJobDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteModelBiasJobDefinition")]
		SageMaker_DeleteModelBiasJobDefinition = 0,
	}
	
	public enum DeleteModelCardX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteModelCard")]
		SageMaker_DeleteModelCard = 0,
	}
	
	public enum DeleteModelExplainabilityJobDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteModelExplainabilityJobDefinition")]
		SageMaker_DeleteModelExplainabilityJobDefinition = 0,
	}
	
	public enum DeleteModelPackageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteModelPackage")]
		SageMaker_DeleteModelPackage = 0,
	}
	
	public enum DeleteModelPackageGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteModelPackageGroup")]
		SageMaker_DeleteModelPackageGroup = 0,
	}
	
	public enum DeleteModelPackageGroupPolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteModelPackageGroupPolicy")]
		SageMaker_DeleteModelPackageGroupPolicy = 0,
	}
	
	public enum DeleteModelQualityJobDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteModelQualityJobDefinition")]
		SageMaker_DeleteModelQualityJobDefinition = 0,
	}
	
	public enum DeleteMonitoringScheduleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteMonitoringSchedule")]
		SageMaker_DeleteMonitoringSchedule = 0,
	}
	
	public enum DeleteNotebookInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteNotebookInstance")]
		SageMaker_DeleteNotebookInstance = 0,
	}
	
	public enum DeleteNotebookInstanceLifecycleConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteNotebookInstanceLifecycleConfig")]
		SageMaker_DeleteNotebookInstanceLifecycleConfig = 0,
	}
	
	public enum DeletePipelineX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeletePipeline")]
		SageMaker_DeletePipeline = 0,
	}
	
	public enum DeleteProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteProject")]
		SageMaker_DeleteProject = 0,
	}
	
	public enum DeleteSpaceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteSpace")]
		SageMaker_DeleteSpace = 0,
	}
	
	public enum DeleteStudioLifecycleConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteStudioLifecycleConfig")]
		SageMaker_DeleteStudioLifecycleConfig = 0,
	}
	
	public enum DeleteTagsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteTags")]
		SageMaker_DeleteTags = 0,
	}
	
	public enum DeleteTrialX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteTrial")]
		SageMaker_DeleteTrial = 0,
	}
	
	public enum DeleteTrialComponentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteTrialComponent")]
		SageMaker_DeleteTrialComponent = 0,
	}
	
	public enum DeleteUserProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteUserProfile")]
		SageMaker_DeleteUserProfile = 0,
	}
	
	public enum DeleteWorkforceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteWorkforce")]
		SageMaker_DeleteWorkforce = 0,
	}
	
	public enum DeleteWorkteamX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeleteWorkteam")]
		SageMaker_DeleteWorkteam = 0,
	}
	
	public enum DeregisterDevicesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DeregisterDevices")]
		SageMaker_DeregisterDevices = 0,
	}
	
	public enum DescribeActionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeAction")]
		SageMaker_DescribeAction = 0,
	}
	
	public enum DescribeAlgorithmX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeAlgorithm")]
		SageMaker_DescribeAlgorithm = 0,
	}
	
	public enum DescribeAppX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeApp")]
		SageMaker_DescribeApp = 0,
	}
	
	public enum DescribeAppImageConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeAppImageConfig")]
		SageMaker_DescribeAppImageConfig = 0,
	}
	
	public enum DescribeArtifactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeArtifact")]
		SageMaker_DescribeArtifact = 0,
	}
	
	public enum DescribeAutoMLJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeAutoMLJob")]
		SageMaker_DescribeAutoMLJob = 0,
	}
	
	public enum DescribeAutoMLJobV2X_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeAutoMLJobV2")]
		SageMaker_DescribeAutoMLJobV2 = 0,
	}
	
	public enum DescribeCodeRepositoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeCodeRepository")]
		SageMaker_DescribeCodeRepository = 0,
	}
	
	public enum DescribeCompilationJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeCompilationJob")]
		SageMaker_DescribeCompilationJob = 0,
	}
	
	public enum DescribeContextX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeContext")]
		SageMaker_DescribeContext = 0,
	}
	
	public enum DescribeDataQualityJobDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeDataQualityJobDefinition")]
		SageMaker_DescribeDataQualityJobDefinition = 0,
	}
	
	public enum DescribeDeviceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeDevice")]
		SageMaker_DescribeDevice = 0,
	}
	
	public enum DescribeDeviceFleetX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeDeviceFleet")]
		SageMaker_DescribeDeviceFleet = 0,
	}
	
	public enum DescribeDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeDomain")]
		SageMaker_DescribeDomain = 0,
	}
	
	public enum DescribeEdgeDeploymentPlanX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeEdgeDeploymentPlan")]
		SageMaker_DescribeEdgeDeploymentPlan = 0,
	}
	
	public enum DescribeEdgePackagingJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeEdgePackagingJob")]
		SageMaker_DescribeEdgePackagingJob = 0,
	}
	
	public enum DescribeEndpointX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeEndpoint")]
		SageMaker_DescribeEndpoint = 0,
	}
	
	public enum DescribeEndpointConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeEndpointConfig")]
		SageMaker_DescribeEndpointConfig = 0,
	}
	
	public enum DescribeExperimentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeExperiment")]
		SageMaker_DescribeExperiment = 0,
	}
	
	public enum DescribeFeatureGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeFeatureGroup")]
		SageMaker_DescribeFeatureGroup = 0,
	}
	
	public enum DescribeFeatureMetadataX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeFeatureMetadata")]
		SageMaker_DescribeFeatureMetadata = 0,
	}
	
	public enum DescribeFlowDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeFlowDefinition")]
		SageMaker_DescribeFlowDefinition = 0,
	}
	
	public enum DescribeHubX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeHub")]
		SageMaker_DescribeHub = 0,
	}
	
	public enum DescribeHubContentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeHubContent")]
		SageMaker_DescribeHubContent = 0,
	}
	
	public enum DescribeHumanTaskUiX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeHumanTaskUi")]
		SageMaker_DescribeHumanTaskUi = 0,
	}
	
	public enum DescribeHyperParameterTuningJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeHyperParameterTuningJob")]
		SageMaker_DescribeHyperParameterTuningJob = 0,
	}
	
	public enum DescribeImageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeImage")]
		SageMaker_DescribeImage = 0,
	}
	
	public enum DescribeImageVersionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeImageVersion")]
		SageMaker_DescribeImageVersion = 0,
	}
	
	public enum DescribeInferenceExperimentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeInferenceExperiment")]
		SageMaker_DescribeInferenceExperiment = 0,
	}
	
	public enum DescribeInferenceRecommendationsJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeInferenceRecommendationsJob")]
		SageMaker_DescribeInferenceRecommendationsJob = 0,
	}
	
	public enum DescribeLabelingJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeLabelingJob")]
		SageMaker_DescribeLabelingJob = 0,
	}
	
	public enum DescribeLineageGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeLineageGroup")]
		SageMaker_DescribeLineageGroup = 0,
	}
	
	public enum DescribeModelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeModel")]
		SageMaker_DescribeModel = 0,
	}
	
	public enum DescribeModelBiasJobDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeModelBiasJobDefinition")]
		SageMaker_DescribeModelBiasJobDefinition = 0,
	}
	
	public enum DescribeModelCardX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeModelCard")]
		SageMaker_DescribeModelCard = 0,
	}
	
	public enum DescribeModelCardExportJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeModelCardExportJob")]
		SageMaker_DescribeModelCardExportJob = 0,
	}
	
	public enum DescribeModelExplainabilityJobDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeModelExplainabilityJobDefinition")]
		SageMaker_DescribeModelExplainabilityJobDefinition = 0,
	}
	
	public enum DescribeModelPackageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeModelPackage")]
		SageMaker_DescribeModelPackage = 0,
	}
	
	public enum DescribeModelPackageGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeModelPackageGroup")]
		SageMaker_DescribeModelPackageGroup = 0,
	}
	
	public enum DescribeModelQualityJobDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeModelQualityJobDefinition")]
		SageMaker_DescribeModelQualityJobDefinition = 0,
	}
	
	public enum DescribeMonitoringScheduleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeMonitoringSchedule")]
		SageMaker_DescribeMonitoringSchedule = 0,
	}
	
	public enum DescribeNotebookInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeNotebookInstance")]
		SageMaker_DescribeNotebookInstance = 0,
	}
	
	public enum DescribeNotebookInstanceLifecycleConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeNotebookInstanceLifecycleConfig")]
		SageMaker_DescribeNotebookInstanceLifecycleConfig = 0,
	}
	
	public enum DescribePipelineX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribePipeline")]
		SageMaker_DescribePipeline = 0,
	}
	
	public enum DescribePipelineDefinitionForExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribePipelineDefinitionForExecution")]
		SageMaker_DescribePipelineDefinitionForExecution = 0,
	}
	
	public enum DescribePipelineExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribePipelineExecution")]
		SageMaker_DescribePipelineExecution = 0,
	}
	
	public enum DescribeProcessingJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeProcessingJob")]
		SageMaker_DescribeProcessingJob = 0,
	}
	
	public enum DescribeProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeProject")]
		SageMaker_DescribeProject = 0,
	}
	
	public enum DescribeSpaceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeSpace")]
		SageMaker_DescribeSpace = 0,
	}
	
	public enum DescribeStudioLifecycleConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeStudioLifecycleConfig")]
		SageMaker_DescribeStudioLifecycleConfig = 0,
	}
	
	public enum DescribeSubscribedWorkteamX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeSubscribedWorkteam")]
		SageMaker_DescribeSubscribedWorkteam = 0,
	}
	
	public enum DescribeTrainingJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeTrainingJob")]
		SageMaker_DescribeTrainingJob = 0,
	}
	
	public enum DescribeTransformJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeTransformJob")]
		SageMaker_DescribeTransformJob = 0,
	}
	
	public enum DescribeTrialX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeTrial")]
		SageMaker_DescribeTrial = 0,
	}
	
	public enum DescribeTrialComponentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeTrialComponent")]
		SageMaker_DescribeTrialComponent = 0,
	}
	
	public enum DescribeUserProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeUserProfile")]
		SageMaker_DescribeUserProfile = 0,
	}
	
	public enum DescribeWorkforceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeWorkforce")]
		SageMaker_DescribeWorkforce = 0,
	}
	
	public enum DescribeWorkteamX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DescribeWorkteam")]
		SageMaker_DescribeWorkteam = 0,
	}
	
	public enum DisableSagemakerServicecatalogPortfolioX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DisableSagemakerServicecatalogPortfolio")]
		SageMaker_DisableSagemakerServicecatalogPortfolio = 0,
	}
	
	public enum DisassociateTrialComponentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.DisassociateTrialComponent")]
		SageMaker_DisassociateTrialComponent = 0,
	}
	
	public enum EnableSagemakerServicecatalogPortfolioX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.EnableSagemakerServicecatalogPortfolio")]
		SageMaker_EnableSagemakerServicecatalogPortfolio = 0,
	}
	
	public enum GetDeviceFleetReportX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.GetDeviceFleetReport")]
		SageMaker_GetDeviceFleetReport = 0,
	}
	
	public enum GetLineageGroupPolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.GetLineageGroupPolicy")]
		SageMaker_GetLineageGroupPolicy = 0,
	}
	
	public enum GetModelPackageGroupPolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.GetModelPackageGroupPolicy")]
		SageMaker_GetModelPackageGroupPolicy = 0,
	}
	
	public enum GetSagemakerServicecatalogPortfolioStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.GetSagemakerServicecatalogPortfolioStatus")]
		SageMaker_GetSagemakerServicecatalogPortfolioStatus = 0,
	}
	
	public enum GetScalingConfigurationRecommendationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.GetScalingConfigurationRecommendation")]
		SageMaker_GetScalingConfigurationRecommendation = 0,
	}
	
	public enum GetSearchSuggestionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.GetSearchSuggestions")]
		SageMaker_GetSearchSuggestions = 0,
	}
	
	public enum ImportHubContentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ImportHubContent")]
		SageMaker_ImportHubContent = 0,
	}
	
	public enum ListActionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListActions")]
		SageMaker_ListActions = 0,
	}
	
	public enum ListAlgorithmsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListAlgorithms")]
		SageMaker_ListAlgorithms = 0,
	}
	
	public enum ListAliasesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListAliases")]
		SageMaker_ListAliases = 0,
	}
	
	public enum ListAppImageConfigsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListAppImageConfigs")]
		SageMaker_ListAppImageConfigs = 0,
	}
	
	public enum ListAppsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListApps")]
		SageMaker_ListApps = 0,
	}
	
	public enum ListArtifactsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListArtifacts")]
		SageMaker_ListArtifacts = 0,
	}
	
	public enum ListAssociationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListAssociations")]
		SageMaker_ListAssociations = 0,
	}
	
	public enum ListAutoMLJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListAutoMLJobs")]
		SageMaker_ListAutoMLJobs = 0,
	}
	
	public enum ListCandidatesForAutoMLJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListCandidatesForAutoMLJob")]
		SageMaker_ListCandidatesForAutoMLJob = 0,
	}
	
	public enum ListCodeRepositoriesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListCodeRepositories")]
		SageMaker_ListCodeRepositories = 0,
	}
	
	public enum ListCompilationJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListCompilationJobs")]
		SageMaker_ListCompilationJobs = 0,
	}
	
	public enum ListContextsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListContexts")]
		SageMaker_ListContexts = 0,
	}
	
	public enum ListDataQualityJobDefinitionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListDataQualityJobDefinitions")]
		SageMaker_ListDataQualityJobDefinitions = 0,
	}
	
	public enum ListDeviceFleetsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListDeviceFleets")]
		SageMaker_ListDeviceFleets = 0,
	}
	
	public enum ListDevicesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListDevices")]
		SageMaker_ListDevices = 0,
	}
	
	public enum ListDomainsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListDomains")]
		SageMaker_ListDomains = 0,
	}
	
	public enum ListEdgeDeploymentPlansX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListEdgeDeploymentPlans")]
		SageMaker_ListEdgeDeploymentPlans = 0,
	}
	
	public enum ListEdgePackagingJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListEdgePackagingJobs")]
		SageMaker_ListEdgePackagingJobs = 0,
	}
	
	public enum ListEndpointConfigsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListEndpointConfigs")]
		SageMaker_ListEndpointConfigs = 0,
	}
	
	public enum ListEndpointsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListEndpoints")]
		SageMaker_ListEndpoints = 0,
	}
	
	public enum ListExperimentsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListExperiments")]
		SageMaker_ListExperiments = 0,
	}
	
	public enum ListFeatureGroupsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListFeatureGroups")]
		SageMaker_ListFeatureGroups = 0,
	}
	
	public enum ListFlowDefinitionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListFlowDefinitions")]
		SageMaker_ListFlowDefinitions = 0,
	}
	
	public enum ListHubContentVersionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListHubContentVersions")]
		SageMaker_ListHubContentVersions = 0,
	}
	
	public enum ListHubContentsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListHubContents")]
		SageMaker_ListHubContents = 0,
	}
	
	public enum ListHubsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListHubs")]
		SageMaker_ListHubs = 0,
	}
	
	public enum ListHumanTaskUisX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListHumanTaskUis")]
		SageMaker_ListHumanTaskUis = 0,
	}
	
	public enum ListHyperParameterTuningJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListHyperParameterTuningJobs")]
		SageMaker_ListHyperParameterTuningJobs = 0,
	}
	
	public enum ListImageVersionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListImageVersions")]
		SageMaker_ListImageVersions = 0,
	}
	
	public enum ListImagesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListImages")]
		SageMaker_ListImages = 0,
	}
	
	public enum ListInferenceExperimentsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListInferenceExperiments")]
		SageMaker_ListInferenceExperiments = 0,
	}
	
	public enum ListInferenceRecommendationsJobStepsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListInferenceRecommendationsJobSteps")]
		SageMaker_ListInferenceRecommendationsJobSteps = 0,
	}
	
	public enum ListInferenceRecommendationsJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListInferenceRecommendationsJobs")]
		SageMaker_ListInferenceRecommendationsJobs = 0,
	}
	
	public enum ListLabelingJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListLabelingJobs")]
		SageMaker_ListLabelingJobs = 0,
	}
	
	public enum ListLabelingJobsForWorkteamX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListLabelingJobsForWorkteam")]
		SageMaker_ListLabelingJobsForWorkteam = 0,
	}
	
	public enum ListLineageGroupsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListLineageGroups")]
		SageMaker_ListLineageGroups = 0,
	}
	
	public enum ListModelBiasJobDefinitionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListModelBiasJobDefinitions")]
		SageMaker_ListModelBiasJobDefinitions = 0,
	}
	
	public enum ListModelCardExportJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListModelCardExportJobs")]
		SageMaker_ListModelCardExportJobs = 0,
	}
	
	public enum ListModelCardVersionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListModelCardVersions")]
		SageMaker_ListModelCardVersions = 0,
	}
	
	public enum ListModelCardsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListModelCards")]
		SageMaker_ListModelCards = 0,
	}
	
	public enum ListModelExplainabilityJobDefinitionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListModelExplainabilityJobDefinitions")]
		SageMaker_ListModelExplainabilityJobDefinitions = 0,
	}
	
	public enum ListModelMetadataX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListModelMetadata")]
		SageMaker_ListModelMetadata = 0,
	}
	
	public enum ListModelPackageGroupsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListModelPackageGroups")]
		SageMaker_ListModelPackageGroups = 0,
	}
	
	public enum ListModelPackagesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListModelPackages")]
		SageMaker_ListModelPackages = 0,
	}
	
	public enum ListModelQualityJobDefinitionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListModelQualityJobDefinitions")]
		SageMaker_ListModelQualityJobDefinitions = 0,
	}
	
	public enum ListModelsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListModels")]
		SageMaker_ListModels = 0,
	}
	
	public enum ListMonitoringAlertHistoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListMonitoringAlertHistory")]
		SageMaker_ListMonitoringAlertHistory = 0,
	}
	
	public enum ListMonitoringAlertsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListMonitoringAlerts")]
		SageMaker_ListMonitoringAlerts = 0,
	}
	
	public enum ListMonitoringExecutionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListMonitoringExecutions")]
		SageMaker_ListMonitoringExecutions = 0,
	}
	
	public enum ListMonitoringSchedulesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListMonitoringSchedules")]
		SageMaker_ListMonitoringSchedules = 0,
	}
	
	public enum ListNotebookInstanceLifecycleConfigsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListNotebookInstanceLifecycleConfigs")]
		SageMaker_ListNotebookInstanceLifecycleConfigs = 0,
	}
	
	public enum ListNotebookInstancesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListNotebookInstances")]
		SageMaker_ListNotebookInstances = 0,
	}
	
	public enum ListPipelineExecutionStepsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListPipelineExecutionSteps")]
		SageMaker_ListPipelineExecutionSteps = 0,
	}
	
	public enum ListPipelineExecutionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListPipelineExecutions")]
		SageMaker_ListPipelineExecutions = 0,
	}
	
	public enum ListPipelineParametersForExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListPipelineParametersForExecution")]
		SageMaker_ListPipelineParametersForExecution = 0,
	}
	
	public enum ListPipelinesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListPipelines")]
		SageMaker_ListPipelines = 0,
	}
	
	public enum ListProcessingJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListProcessingJobs")]
		SageMaker_ListProcessingJobs = 0,
	}
	
	public enum ListProjectsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListProjects")]
		SageMaker_ListProjects = 0,
	}
	
	public enum ListResourceCatalogsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListResourceCatalogs")]
		SageMaker_ListResourceCatalogs = 0,
	}
	
	public enum ListSpacesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListSpaces")]
		SageMaker_ListSpaces = 0,
	}
	
	public enum ListStageDevicesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListStageDevices")]
		SageMaker_ListStageDevices = 0,
	}
	
	public enum ListStudioLifecycleConfigsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListStudioLifecycleConfigs")]
		SageMaker_ListStudioLifecycleConfigs = 0,
	}
	
	public enum ListSubscribedWorkteamsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListSubscribedWorkteams")]
		SageMaker_ListSubscribedWorkteams = 0,
	}
	
	public enum ListTagsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListTags")]
		SageMaker_ListTags = 0,
	}
	
	public enum ListTrainingJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListTrainingJobs")]
		SageMaker_ListTrainingJobs = 0,
	}
	
	public enum ListTrainingJobsForHyperParameterTuningJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListTrainingJobsForHyperParameterTuningJob")]
		SageMaker_ListTrainingJobsForHyperParameterTuningJob = 0,
	}
	
	public enum ListTransformJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListTransformJobs")]
		SageMaker_ListTransformJobs = 0,
	}
	
	public enum ListTrialComponentsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListTrialComponents")]
		SageMaker_ListTrialComponents = 0,
	}
	
	public enum ListTrialsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListTrials")]
		SageMaker_ListTrials = 0,
	}
	
	public enum ListUserProfilesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListUserProfiles")]
		SageMaker_ListUserProfiles = 0,
	}
	
	public enum ListWorkforcesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListWorkforces")]
		SageMaker_ListWorkforces = 0,
	}
	
	public enum ListWorkteamsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.ListWorkteams")]
		SageMaker_ListWorkteams = 0,
	}
	
	public enum PutModelPackageGroupPolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.PutModelPackageGroupPolicy")]
		SageMaker_PutModelPackageGroupPolicy = 0,
	}
	
	public enum QueryLineageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.QueryLineage")]
		SageMaker_QueryLineage = 0,
	}
	
	public enum RegisterDevicesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.RegisterDevices")]
		SageMaker_RegisterDevices = 0,
	}
	
	public enum RenderUiTemplateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.RenderUiTemplate")]
		SageMaker_RenderUiTemplate = 0,
	}
	
	public enum RetryPipelineExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.RetryPipelineExecution")]
		SageMaker_RetryPipelineExecution = 0,
	}
	
	public enum SearchX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.Search")]
		SageMaker_Search = 0,
	}
	
	public enum SendPipelineExecutionStepFailureX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.SendPipelineExecutionStepFailure")]
		SageMaker_SendPipelineExecutionStepFailure = 0,
	}
	
	public enum SendPipelineExecutionStepSuccessX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.SendPipelineExecutionStepSuccess")]
		SageMaker_SendPipelineExecutionStepSuccess = 0,
	}
	
	public enum StartEdgeDeploymentStageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StartEdgeDeploymentStage")]
		SageMaker_StartEdgeDeploymentStage = 0,
	}
	
	public enum StartInferenceExperimentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StartInferenceExperiment")]
		SageMaker_StartInferenceExperiment = 0,
	}
	
	public enum StartMonitoringScheduleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StartMonitoringSchedule")]
		SageMaker_StartMonitoringSchedule = 0,
	}
	
	public enum StartNotebookInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StartNotebookInstance")]
		SageMaker_StartNotebookInstance = 0,
	}
	
	public enum StartPipelineExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StartPipelineExecution")]
		SageMaker_StartPipelineExecution = 0,
	}
	
	public enum StopAutoMLJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StopAutoMLJob")]
		SageMaker_StopAutoMLJob = 0,
	}
	
	public enum StopCompilationJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StopCompilationJob")]
		SageMaker_StopCompilationJob = 0,
	}
	
	public enum StopEdgeDeploymentStageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StopEdgeDeploymentStage")]
		SageMaker_StopEdgeDeploymentStage = 0,
	}
	
	public enum StopEdgePackagingJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StopEdgePackagingJob")]
		SageMaker_StopEdgePackagingJob = 0,
	}
	
	public enum StopHyperParameterTuningJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StopHyperParameterTuningJob")]
		SageMaker_StopHyperParameterTuningJob = 0,
	}
	
	public enum StopInferenceExperimentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StopInferenceExperiment")]
		SageMaker_StopInferenceExperiment = 0,
	}
	
	public enum StopInferenceRecommendationsJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StopInferenceRecommendationsJob")]
		SageMaker_StopInferenceRecommendationsJob = 0,
	}
	
	public enum StopLabelingJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StopLabelingJob")]
		SageMaker_StopLabelingJob = 0,
	}
	
	public enum StopMonitoringScheduleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StopMonitoringSchedule")]
		SageMaker_StopMonitoringSchedule = 0,
	}
	
	public enum StopNotebookInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StopNotebookInstance")]
		SageMaker_StopNotebookInstance = 0,
	}
	
	public enum StopPipelineExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StopPipelineExecution")]
		SageMaker_StopPipelineExecution = 0,
	}
	
	public enum StopProcessingJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StopProcessingJob")]
		SageMaker_StopProcessingJob = 0,
	}
	
	public enum StopTrainingJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StopTrainingJob")]
		SageMaker_StopTrainingJob = 0,
	}
	
	public enum StopTransformJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.StopTransformJob")]
		SageMaker_StopTransformJob = 0,
	}
	
	public enum UpdateActionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateAction")]
		SageMaker_UpdateAction = 0,
	}
	
	public enum UpdateAppImageConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateAppImageConfig")]
		SageMaker_UpdateAppImageConfig = 0,
	}
	
	public enum UpdateArtifactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateArtifact")]
		SageMaker_UpdateArtifact = 0,
	}
	
	public enum UpdateCodeRepositoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateCodeRepository")]
		SageMaker_UpdateCodeRepository = 0,
	}
	
	public enum UpdateContextX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateContext")]
		SageMaker_UpdateContext = 0,
	}
	
	public enum UpdateDeviceFleetX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateDeviceFleet")]
		SageMaker_UpdateDeviceFleet = 0,
	}
	
	public enum UpdateDevicesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateDevices")]
		SageMaker_UpdateDevices = 0,
	}
	
	public enum UpdateDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateDomain")]
		SageMaker_UpdateDomain = 0,
	}
	
	public enum UpdateEndpointX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateEndpoint")]
		SageMaker_UpdateEndpoint = 0,
	}
	
	public enum UpdateEndpointWeightsAndCapacitiesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateEndpointWeightsAndCapacities")]
		SageMaker_UpdateEndpointWeightsAndCapacities = 0,
	}
	
	public enum UpdateExperimentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateExperiment")]
		SageMaker_UpdateExperiment = 0,
	}
	
	public enum UpdateFeatureGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateFeatureGroup")]
		SageMaker_UpdateFeatureGroup = 0,
	}
	
	public enum UpdateFeatureMetadataX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateFeatureMetadata")]
		SageMaker_UpdateFeatureMetadata = 0,
	}
	
	public enum UpdateHubX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateHub")]
		SageMaker_UpdateHub = 0,
	}
	
	public enum UpdateImageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateImage")]
		SageMaker_UpdateImage = 0,
	}
	
	public enum UpdateImageVersionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateImageVersion")]
		SageMaker_UpdateImageVersion = 0,
	}
	
	public enum UpdateInferenceExperimentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateInferenceExperiment")]
		SageMaker_UpdateInferenceExperiment = 0,
	}
	
	public enum UpdateModelCardX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateModelCard")]
		SageMaker_UpdateModelCard = 0,
	}
	
	public enum UpdateModelPackageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateModelPackage")]
		SageMaker_UpdateModelPackage = 0,
	}
	
	public enum UpdateMonitoringAlertX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateMonitoringAlert")]
		SageMaker_UpdateMonitoringAlert = 0,
	}
	
	public enum UpdateMonitoringScheduleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateMonitoringSchedule")]
		SageMaker_UpdateMonitoringSchedule = 0,
	}
	
	public enum UpdateNotebookInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateNotebookInstance")]
		SageMaker_UpdateNotebookInstance = 0,
	}
	
	public enum UpdateNotebookInstanceLifecycleConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateNotebookInstanceLifecycleConfig")]
		SageMaker_UpdateNotebookInstanceLifecycleConfig = 0,
	}
	
	public enum UpdatePipelineX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdatePipeline")]
		SageMaker_UpdatePipeline = 0,
	}
	
	public enum UpdatePipelineExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdatePipelineExecution")]
		SageMaker_UpdatePipelineExecution = 0,
	}
	
	public enum UpdateProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateProject")]
		SageMaker_UpdateProject = 0,
	}
	
	public enum UpdateSpaceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateSpace")]
		SageMaker_UpdateSpace = 0,
	}
	
	public enum UpdateTrainingJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateTrainingJob")]
		SageMaker_UpdateTrainingJob = 0,
	}
	
	public enum UpdateTrialX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateTrial")]
		SageMaker_UpdateTrial = 0,
	}
	
	public enum UpdateTrialComponentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateTrialComponent")]
		SageMaker_UpdateTrialComponent = 0,
	}
	
	public enum UpdateUserProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateUserProfile")]
		SageMaker_UpdateUserProfile = 0,
	}
	
	public enum UpdateWorkforceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateWorkforce")]
		SageMaker_UpdateWorkforce = 0,
	}
	
	public enum UpdateWorkteamX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SageMaker.UpdateWorkteam")]
		SageMaker_UpdateWorkteam = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
