//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateScalingPlanResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingPlanVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateScalingPlanRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScalingPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ApplicationSource ApplicationSource { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingInstruction[] ScalingInstructions { get; set; }
	}
	
	/// <summary>
	/// Represents an application source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationSource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CloudFormationStackARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagFilter[] TagFilters { get; set; }
	}
	
	/// <summary>
	/// Represents a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a scaling instruction for a scalable resource in a scaling plan. Each scaling instruction applies to one resource.</p> <p>AWS Auto Scaling creates target tracking scaling policies based on the scaling instructions. Target tracking scaling policies adjust the capacity of your scalable resource as required to maintain resource utilization at the target value that you specified. </p> <p>AWS Auto Scaling also configures predictive scaling for your Amazon EC2 Auto Scaling groups using a subset of parameters, including the load metric, the scaling metric, the target value for the scaling metric, the predictive scaling mode (forecast and scale or forecast only), and the desired behavior when the forecast capacity exceeds the maximum capacity of the resource. With predictive scaling, AWS Auto Scaling generates forecasts with traffic predictions for the two days ahead and schedules scaling actions that proactively add and remove resource capacity to match the forecast. </p> <important> <p>We recommend waiting a minimum of 24 hours after creating an Auto Scaling group to configure predictive scaling. At minimum, there must be 24 hours of historical data to generate a forecast. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/userguide/gs-best-practices.html">Best Practices for AWS Auto Scaling</a> in the <i>AWS Auto Scaling User Guide</i>.</p> </important>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScalingInstruction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceNamespace ServiceNamespace { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalableDimension ScalableDimension { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MinCapacity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxCapacity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TargetTrackingConfiguration[] TargetTrackingConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredefinedLoadMetricSpecification PredefinedLoadMetricSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomizedLoadMetricSpecification CustomizedLoadMetricSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ScheduledActionBufferTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingMaxCapacityBehavior PredictiveScalingMaxCapacityBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PredictiveScalingMaxCapacityBuffer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PredictiveScalingMode PredictiveScalingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingPolicyUpdateBehavior ScalingPolicyUpdateBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableDynamicScaling { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceNamespace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="autoscaling")]
		autoscaling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecs")]
		ecs = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ec2")]
		ec2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rds")]
		rds = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dynamodb")]
		dynamodb = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScalableDimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="autoscaling:autoScalingGroup:DesiredCapacity")]
		autoscalingautoScalingGroupDesiredCapacity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecs:service:DesiredCount")]
		ecsserviceDesiredCount = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ec2:spot-fleet-request:TargetCapacity")]
		ec2spotMinusfleetMinusrequestTargetCapacity = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rds:cluster:ReadReplicaCount")]
		rdsclusterReadReplicaCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dynamodb:table:ReadCapacityUnits")]
		dynamodbtableReadCapacityUnits = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dynamodb:table:WriteCapacityUnits")]
		dynamodbtableWriteCapacityUnits = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dynamodb:index:ReadCapacityUnits")]
		dynamodbindexReadCapacityUnits = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dynamodb:index:WriteCapacityUnits")]
		dynamodbindexWriteCapacityUnits = 7,
	}
	
	/// <summary>
	/// Describes a target tracking configuration to use with AWS Auto Scaling. Used with <a>ScalingInstruction</a> and <a>ScalingPolicy</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetTrackingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PredefinedScalingMetricSpecification PredefinedScalingMetricSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomizedScalingMetricSpecification CustomizedScalingMetricSpecification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double TargetValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableScaleIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ScaleOutCooldown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ScaleInCooldown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EstimatedInstanceWarmup { get; set; }
	}
	
	/// <summary>
	/// Represents a predefined metric that can be used for dynamic scaling as part of a target tracking scaling policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PredefinedScalingMetricSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingMetricType PredefinedScalingMetricType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceLabel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScalingMetricType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASGAverageCPUUtilization")]
		ASGAverageCPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASGAverageNetworkIn")]
		ASGAverageNetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASGAverageNetworkOut")]
		ASGAverageNetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DynamoDBReadCapacityUtilization")]
		DynamoDBReadCapacityUtilization = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DynamoDBWriteCapacityUtilization")]
		DynamoDBWriteCapacityUtilization = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ECSServiceAverageCPUUtilization")]
		ECSServiceAverageCPUUtilization = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ECSServiceAverageMemoryUtilization")]
		ECSServiceAverageMemoryUtilization = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALBRequestCountPerTarget")]
		ALBRequestCountPerTarget = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RDSReaderAverageCPUUtilization")]
		RDSReaderAverageCPUUtilization = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RDSReaderAverageDatabaseConnections")]
		RDSReaderAverageDatabaseConnections = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EC2SpotFleetRequestAverageCPUUtilization")]
		EC2SpotFleetRequestAverageCPUUtilization = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EC2SpotFleetRequestAverageNetworkIn")]
		EC2SpotFleetRequestAverageNetworkIn = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EC2SpotFleetRequestAverageNetworkOut")]
		EC2SpotFleetRequestAverageNetworkOut = 12,
	}
	
	/// <summary>
	/// <p>Represents a CloudWatch metric of your choosing that can be used for dynamic scaling as part of a target tracking scaling policy. </p> <p>To create your customized scaling metric specification:</p> <ul> <li> <p>Add values for each required parameter from CloudWatch. You can use an existing metric, or a new metric that you create. To use your own metric, you must first publish the metric to CloudWatch. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publish Custom Metrics</a> in the <i>Amazon CloudWatch User Guide</i>.</p> </li> <li> <p>Choose a metric that changes proportionally with capacity. The value of the metric should increase or decrease in inverse proportion to the number of capacity units. That is, the value of the metric should decrease when capacity increases. </p> </li> </ul> <p>For information about terminology, available metrics, or how to publish new metrics, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch Concepts</a> in the <i>Amazon CloudWatch User Guide</i>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomizedScalingMetricSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Represents a dimension for a customized metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricDimension
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MetricStatistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Average")]
		Average = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Minimum")]
		Minimum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Maximum")]
		Maximum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SampleCount")]
		SampleCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sum")]
		Sum = 4,
	}
	
	/// <summary>
	/// <p>Represents a predefined metric that can be used for predictive scaling.</p> <p>After creating your scaling plan, you can use the AWS Auto Scaling console to visualize forecasts for the specified metric. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/userguide/gs-create-scaling-plan.html#gs-view-resource">View Scaling Information for a Resource</a> in the <i>AWS Auto Scaling User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PredefinedLoadMetricSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoadMetricType PredefinedLoadMetricType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceLabel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoadMetricType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASGTotalCPUUtilization")]
		ASGTotalCPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASGTotalNetworkIn")]
		ASGTotalNetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASGTotalNetworkOut")]
		ASGTotalNetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALBTargetGroupRequestCount")]
		ALBTargetGroupRequestCount = 3,
	}
	
	/// <summary>
	/// <p>Represents a CloudWatch metric of your choosing that can be used for predictive scaling. </p> <p>For predictive scaling to work with a customized load metric specification, AWS Auto Scaling needs access to the <code>Sum</code> and <code>Average</code> statistics that CloudWatch computes from metric data.</p> <p>When you choose a load metric, make sure that the required <code>Sum</code> and <code>Average</code> statistics for your metric are available in CloudWatch and that they provide relevant data for predictive scaling. The <code>Sum</code> statistic must represent the total load on the resource, and the <code>Average</code> statistic must represent the average load per capacity unit of the resource. For example, there is a metric that counts the number of requests processed by your Auto Scaling group. If the <code>Sum</code> statistic represents the total request count processed by the group, then the <code>Average</code> statistic for the specified metric must represent the average request count processed by each instance of the group. </p> <p>If you publish your own metrics, you can aggregate the data points at a given interval and then publish the aggregated data points to CloudWatch. Before AWS Auto Scaling generates the forecast, it sums up all the metric data points that occurred within each hour to match the granularity period that is used in the forecast (60 minutes).</p> <p>For information about terminology, available metrics, or how to publish new metrics, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch Concepts</a> in the <i>Amazon CloudWatch User Guide</i>. </p> <p>After creating your scaling plan, you can use the AWS Auto Scaling console to visualize forecasts for the specified metric. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/userguide/gs-create-scaling-plan.html#gs-view-resource">View Scaling Information for a Resource</a> in the <i>AWS Auto Scaling User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomizedLoadMetricSpecification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PredictiveScalingMaxCapacityBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SetForecastCapacityToMaxCapacity")]
		SetForecastCapacityToMaxCapacity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SetMaxCapacityToForecastCapacity")]
		SetMaxCapacityToForecastCapacity = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SetMaxCapacityAboveForecastCapacity")]
		SetMaxCapacityAboveForecastCapacity = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PredictiveScalingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ForecastAndScale")]
		ForecastAndScale = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ForecastOnly")]
		ForecastOnly = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScalingPolicyUpdateBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KeepExternalPolicies")]
		KeepExternalPolicies = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReplaceExternalPolicies")]
		ReplaceExternalPolicies = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConcurrentUpdateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServiceException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteScalingPlanResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteScalingPlanRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScalingPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingPlanVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ObjectNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeScalingPlanResourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingPlanResource[] ScalingPlanResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a scalable resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScalingPlanResource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScalingPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingPlanVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceNamespace ServiceNamespace { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalableDimension ScalableDimension { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingPolicy[] ScalingPolicies { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingStatusCode ScalingStatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScalingStatusMessage { get; set; }
	}
	
	/// <summary>
	/// Represents a scaling policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScalingPolicy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PolicyType PolicyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetTrackingConfiguration TargetTrackingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TargetTrackingScaling")]
		TargetTrackingScaling = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScalingStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Inactive")]
		Inactive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PartiallyActive")]
		PartiallyActive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Active")]
		Active = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeScalingPlanResourcesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScalingPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingPlanVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidNextTokenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeScalingPlansResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingPlan[] ScalingPlans { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a scaling plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScalingPlan
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScalingPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingPlanVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ApplicationSource ApplicationSource { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingInstruction[] ScalingInstructions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingPlanStatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScalingPlanStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Active")]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActiveWithProblems")]
		ActiveWithProblems = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreationInProgress")]
		CreationInProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreationFailed")]
		CreationFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeletionInProgress")]
		DeletionInProgress = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeletionFailed")]
		DeletionFailed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpdateInProgress")]
		UpdateInProgress = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpdateFailed")]
		UpdateFailed = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeScalingPlansRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ScalingPlanNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ScalingPlanVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApplicationSource[] ApplicationSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetScalingPlanResourceForecastDataResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Datapoint[] Datapoints { get; set; }
	}
	
	/// <summary>
	/// Represents a single value in the forecast data used for predictive scaling.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Datapoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetScalingPlanResourceForecastDataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScalingPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingPlanVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceNamespace ServiceNamespace { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalableDimension ScalableDimension { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ForecastDataType ForecastDataType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ForecastDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CapacityForecast")]
		CapacityForecast = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LoadForecast")]
		LoadForecast = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ScheduledActionMinCapacity")]
		ScheduledActionMinCapacity = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ScheduledActionMaxCapacity")]
		ScheduledActionMaxCapacity = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateScalingPlanResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateScalingPlanRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScalingPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingPlanVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApplicationSource ApplicationSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingInstruction[] ScalingInstructions { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a scaling plan.
		/// CreateScalingPlan #X-Amz-Target=AnyScaleScalingPlannerFrontendService.CreateScalingPlan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateScalingPlanResponse> CreateScalingPlanAsync(CreateScalingPlanRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AnyScaleScalingPlannerFrontendService.CreateScalingPlan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateScalingPlanResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified scaling plan.</p> <p>Deleting a scaling plan deletes the underlying <a>ScalingInstruction</a> for all of the scalable resources that are covered by the plan.</p> <p>If the plan has launched resources or has scaling activities in progress, you must delete those resources separately.</p>
		/// DeleteScalingPlan #X-Amz-Target=AnyScaleScalingPlannerFrontendService.DeleteScalingPlan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteScalingPlanResponse> DeleteScalingPlanAsync(DeleteScalingPlanRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AnyScaleScalingPlannerFrontendService.DeleteScalingPlan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteScalingPlanResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the scalable resources in the specified scaling plan.
		/// DescribeScalingPlanResources #X-Amz-Target=AnyScaleScalingPlannerFrontendService.DescribeScalingPlanResources
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeScalingPlanResourcesResponse> DescribeScalingPlanResourcesAsync(DescribeScalingPlanResourcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AnyScaleScalingPlannerFrontendService.DescribeScalingPlanResources";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeScalingPlanResourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your scaling plans.
		/// DescribeScalingPlans #X-Amz-Target=AnyScaleScalingPlannerFrontendService.DescribeScalingPlans
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeScalingPlansResponse> DescribeScalingPlansAsync(DescribeScalingPlansRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AnyScaleScalingPlannerFrontendService.DescribeScalingPlans";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeScalingPlansResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the forecast data for a scalable resource.</p> <p>Capacity forecasts are represented as predicted values, or data points, that are calculated using historical data points from a specified CloudWatch load metric. Data points are available for up to 56 days. </p>
		/// GetScalingPlanResourceForecastData #X-Amz-Target=AnyScaleScalingPlannerFrontendService.GetScalingPlanResourceForecastData
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetScalingPlanResourceForecastDataResponse> GetScalingPlanResourceForecastDataAsync(GetScalingPlanResourceForecastDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AnyScaleScalingPlannerFrontendService.GetScalingPlanResourceForecastData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetScalingPlanResourceForecastDataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified scaling plan.</p> <p>You cannot update a scaling plan if it is in the process of being created, updated, or deleted.</p>
		/// UpdateScalingPlan #X-Amz-Target=AnyScaleScalingPlannerFrontendService.UpdateScalingPlan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateScalingPlanResponse> UpdateScalingPlanAsync(UpdateScalingPlanRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AnyScaleScalingPlannerFrontendService.UpdateScalingPlan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateScalingPlanResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum CreateScalingPlanX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AnyScaleScalingPlannerFrontendService.CreateScalingPlan")]
		AnyScaleScalingPlannerFrontendService_CreateScalingPlan = 0,
	}
	
	public enum DeleteScalingPlanX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AnyScaleScalingPlannerFrontendService.DeleteScalingPlan")]
		AnyScaleScalingPlannerFrontendService_DeleteScalingPlan = 0,
	}
	
	public enum DescribeScalingPlanResourcesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AnyScaleScalingPlannerFrontendService.DescribeScalingPlanResources")]
		AnyScaleScalingPlannerFrontendService_DescribeScalingPlanResources = 0,
	}
	
	public enum DescribeScalingPlansX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AnyScaleScalingPlannerFrontendService.DescribeScalingPlans")]
		AnyScaleScalingPlannerFrontendService_DescribeScalingPlans = 0,
	}
	
	public enum GetScalingPlanResourceForecastDataX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AnyScaleScalingPlannerFrontendService.GetScalingPlanResourceForecastData")]
		AnyScaleScalingPlannerFrontendService_GetScalingPlanResourceForecastData = 0,
	}
	
	public enum UpdateScalingPlanX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AnyScaleScalingPlannerFrontendService.UpdateScalingPlan")]
		AnyScaleScalingPlannerFrontendService_UpdateScalingPlan = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
