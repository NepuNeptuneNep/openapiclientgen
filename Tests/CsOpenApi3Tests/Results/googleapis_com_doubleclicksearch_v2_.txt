//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A message containing availability data relevant to DoubleClick Search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Availability
	{
		
		/// <summary>
		/// DS advertiser ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// DS agency ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyId")]
		public string AgencyId { get; set; }
		
		/// <summary>
		/// The time by which all conversions have been uploaded, in epoch millis UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityTimestamp")]
		public string AvailabilityTimestamp { get; set; }
		
		/// <summary>
		/// Customer ID of a client account in the new Search Ads 360 experience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// The numeric segmentation identifier (for example, DoubleClick Search Floodlight activity ID).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentationId")]
		public string SegmentationId { get; set; }
		
		/// <summary>
		/// The friendly segmentation identifier (for example, DoubleClick Search Floodlight activity name).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentationName")]
		public string SegmentationName { get; set; }
		
		/// <summary>
		/// The segmentation type that this availability is for (its default value is `FLOODLIGHT`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentationType")]
		public string SegmentationType { get; set; }
	}
	
	/// <summary>
	/// A conversion containing data relevant to DoubleClick Search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Conversion
	{
		
		/// <summary>
		/// DS ad group ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adGroupId")]
		public string AdGroupId { get; set; }
		
		/// <summary>
		/// DS ad ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adId")]
		public string AdId { get; set; }
		
		/// <summary>
		/// Ad user data consent for this conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adUserDataConsent")]
		public System.Nullable<ConversionAdUserDataConsent> AdUserDataConsent { get; set; }
		
		/// <summary>
		/// DS advertiser ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// DS agency ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyId")]
		public string AgencyId { get; set; }
		
		/// <summary>
		/// Available to advertisers only after contacting DoubleClick Search customer support.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributionModel")]
		public string AttributionModel { get; set; }
		
		/// <summary>
		/// DS campaign ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public string CampaignId { get; set; }
		
		/// <summary>
		/// Sales channel for the product. Acceptable values are: - "`local`": a physical store - "`online`": an online store 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; }
		
		/// <summary>
		/// DS click ID for the conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickId")]
		public string ClickId { get; set; }
		
		/// <summary>
		/// For offline conversions, advertisers provide this ID. Advertisers can specify any ID that is meaningful to them. Each conversion in a request must specify a unique ID, and the combination of ID and timestamp must be unique amongst all conversions within the advertiser. For online conversions, DS copies the `dsConversionId` or `floodlightOrderId` into this property depending on the advertiser's Floodlight instructions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionId")]
		public string ConversionId { get; set; }
		
		/// <summary>
		/// The time at which the conversion was last modified, in epoch millis UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionModifiedTimestamp")]
		public string ConversionModifiedTimestamp { get; set; }
		
		/// <summary>
		/// The time at which the conversion took place, in epoch millis UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionTimestamp")]
		public string ConversionTimestamp { get; set; }
		
		/// <summary>
		/// Available to advertisers only after contacting DoubleClick Search customer support.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countMillis")]
		public string CountMillis { get; set; }
		
		/// <summary>
		/// DS criterion (keyword) ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="criterionId")]
		public string CriterionId { get; set; }
		
		/// <summary>
		/// The currency code for the conversion's revenue. Should be in ISO 4217 alphabetic (3-char) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Custom dimensions for the conversion, which can be used to filter data in a report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDimension")]
		public CustomDimension[] CustomDimension { get; set; }
		
		/// <summary>
		/// Custom metrics for the conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customMetric")]
		public CustomMetric[] CustomMetric { get; set; }
		
		/// <summary>
		/// Customer ID of a client account in the new Search Ads 360 experience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// The type of device on which the conversion occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceType")]
		public string DeviceType { get; set; }
		
		/// <summary>
		/// ID that DoubleClick Search generates for each conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dsConversionId")]
		public string DsConversionId { get; set; }
		
		/// <summary>
		/// DS engine account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="engineAccountId")]
		public string EngineAccountId { get; set; }
		
		/// <summary>
		/// The Floodlight order ID provided by the advertiser for the conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightOrderId")]
		public string FloodlightOrderId { get; set; }
		
		/// <summary>
		/// ID that DS generates and uses to uniquely identify the inventory account that contains the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryAccountId")]
		public string InventoryAccountId { get; set; }
		
		/// <summary>
		/// The country registered for the Merchant Center feed that contains the product. Use an ISO 3166 code to specify a country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCountry")]
		public string ProductCountry { get; set; }
		
		/// <summary>
		/// DS product group ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productGroupId")]
		public string ProductGroupId { get; set; }
		
		/// <summary>
		/// The product ID (SKU).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The language registered for the Merchant Center feed that contains the product. Use an ISO 639 code to specify a language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productLanguage")]
		public string ProductLanguage { get; set; }
		
		/// <summary>
		/// The quantity of this conversion, in millis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityMillis")]
		public string QuantityMillis { get; set; }
		
		/// <summary>
		/// The revenue amount of this `TRANSACTION` conversion, in micros (value multiplied by 1000000, no decimal). For example, to specify a revenue value of "10" enter "10000000" (10 million) in your request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revenueMicros")]
		public string RevenueMicros { get; set; }
		
		/// <summary>
		/// The numeric segmentation identifier (for example, DoubleClick Search Floodlight activity ID).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentationId")]
		public string SegmentationId { get; set; }
		
		/// <summary>
		/// The friendly segmentation identifier (for example, DoubleClick Search Floodlight activity name).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentationName")]
		public string SegmentationName { get; set; }
		
		/// <summary>
		/// The segmentation type of this conversion (for example, `FLOODLIGHT`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentationType")]
		public string SegmentationType { get; set; }
		
		/// <summary>
		/// The state of the conversion, that is, either `ACTIVE` or `REMOVED`. Note: state DELETED is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The ID of the local store for which the product was advertised. Applicable only when the channel is "`local`".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeId")]
		public string StoreId { get; set; }
		
		/// <summary>
		/// The type of the conversion, that is, either `ACTION` or `TRANSACTION`. An `ACTION` conversion is an action by the user that has no monetarily quantifiable value, while a `TRANSACTION` conversion is an action that does have a monetarily quantifiable value. Examples are email list signups (`ACTION`) versus ecommerce purchases (`TRANSACTION`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConversionAdUserDataConsent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRANTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENIED = 2,
	}
	
	/// <summary>
	/// A message containing the custom dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomDimension
	{
		
		/// <summary>
		/// Custom dimension name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Custom dimension value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A message containing the custom metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomMetric
	{
		
		/// <summary>
		/// Custom metric name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Custom metric numeric value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// A list of conversions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversionList
	{
		
		/// <summary>
		/// The conversions being requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversion")]
		public Conversion[] Conversion { get; set; }
		
		/// <summary>
		/// Identifies this as a ConversionList resource. Value: the fixed string doubleclicksearch#conversionList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// File returned to https://developers.google.com/search-ads/v2/reference/reports/getIdMappingFile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdMappingFile
	{
	}
	
	/// <summary>
	/// A DoubleClick Search report. This object contains the report request, some report metadata such as currency code, and the generated report rows or report files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Report
	{
		
		/// <summary>
		/// Asynchronous report only. Contains a list of generated report files once the report has successfully completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public ReportFiles[] ReportFiles { get; set; }
		
		/// <summary>
		/// Asynchronous report only. Id of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Asynchronous report only. True if and only if the report has completed successfully and the report files are ready to be downloaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isReportReady")]
		public System.Nullable<System.Boolean> IsReportReady { get; set; }
		
		/// <summary>
		/// Identifies this as a Report resource. Value: the fixed string `doubleclicksearch#report`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// A request object used to create a DoubleClick Search report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request")]
		public ReportRequest Request { get; set; }
		
		/// <summary>
		/// The number of report rows generated by the report, not including headers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowCount")]
		public System.Nullable<System.Int32> RowCount { get; set; }
		
		/// <summary>
		/// Synchronous report only. Generated report rows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public ReportRow[] Rows { get; set; }
		
		/// <summary>
		/// The currency code of all monetary values produced in the report, including values that are set by users (e.g., keyword bid settings) and metrics (e.g., cost and revenue). The currency code of a report is determined by the `statisticsCurrency` field of the report request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statisticsCurrencyCode")]
		public string StatisticsCurrencyCode { get; set; }
		
		/// <summary>
		/// If all statistics of the report are sourced from the same time zone, this would be it. Otherwise the field is unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statisticsTimeZone")]
		public string StatisticsTimeZone { get; set; }
	}
	
	public class ReportFiles
	{
		
		/// <summary>
		/// The size of this report file in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="byteCount")]
		public string ByteCount { get; set; }
		
		/// <summary>
		/// Use this url to download the report file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A request object used to create a DoubleClick Search report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportRequest
	{
		
		/// <summary>
		/// The columns to include in the report. This includes both DoubleClick Search columns and saved columns. For DoubleClick Search columns, only the `columnName` parameter is required. For saved columns only the `savedColumnName` parameter is required. Both `columnName` and `savedColumnName` cannot be set in the same stanza.\ The maximum number of columns per request is 300.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public ReportApiColumnSpec[] Columns { get; set; }
		
		/// <summary>
		/// Format that the report should be returned in. Currently `csv` or `tsv` is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadFormat")]
		public string DownloadFormat { get; set; }
		
		/// <summary>
		/// A list of filters to be applied to the report.\ The maximum number of filters per request is 300.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ReportRequestFilters[] ReportRequestFilters { get; set; }
		
		/// <summary>
		/// Determines if removed entities should be included in the report. Defaults to `false`. Deprecated, please use `includeRemovedEntities` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeDeletedEntities")]
		public System.Nullable<System.Boolean> IncludeDeletedEntities { get; set; }
		
		/// <summary>
		/// Determines if removed entities should be included in the report. Defaults to `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeRemovedEntities")]
		public System.Nullable<System.Boolean> IncludeRemovedEntities { get; set; }
		
		/// <summary>
		/// Asynchronous report only. The maximum number of rows per report file. A large report is split into many files based on this field. Acceptable values are `1000000` to `100000000`, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxRowsPerFile")]
		public System.Nullable<System.Int32> MaxRowsPerFile { get; set; }
		
		/// <summary>
		/// Synchronous report only. A list of columns and directions defining sorting to be performed on the report rows.\ The maximum number of orderings per request is 300.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderBy")]
		public ReportRequestOrderBy[] ReportRequestOrderBy { get; set; }
		
		/// <summary>
		/// The reportScope is a set of IDs that are used to determine which subset of entities will be returned in the report. The full lineage of IDs from the lowest scoped level desired up through agency is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportScope")]
		public ReportRequestReportScope ReportScope { get; set; }
		
		/// <summary>
		/// Determines the type of rows that are returned in the report. For example, if you specify `reportType: keyword`, each row in the report will contain data about a keyword. See the [Types of Reports](/search-ads/v2/report-types/) reference for the columns that are available for each type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportType")]
		public string ReportType { get; set; }
		
		/// <summary>
		/// Synchronous report only. The maximum number of rows to return; additional rows are dropped. Acceptable values are `0` to `10000`, inclusive. Defaults to `10000`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowCount")]
		public System.Nullable<System.Int32> RowCount { get; set; }
		
		/// <summary>
		/// Synchronous report only. Zero-based index of the first row to return. Acceptable values are `0` to `50000`, inclusive. Defaults to `0`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startRow")]
		public System.Nullable<System.Int32> StartRow { get; set; }
		
		/// <summary>
		/// Specifies the currency in which monetary will be returned. Possible values are: `usd`, `agency` (valid if the report is scoped to agency or lower), `advertiser` (valid if the report is scoped to * advertiser or lower), or `account` (valid if the report is scoped to engine account or lower).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statisticsCurrency")]
		public string StatisticsCurrency { get; set; }
		
		/// <summary>
		/// If metrics are requested in a report, this argument will be used to restrict the metrics to a specific time range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeRange")]
		public ReportRequestTimeRange TimeRange { get; set; }
		
		/// <summary>
		/// If `true`, the report would only be created if all the requested stat data are sourced from a single timezone. Defaults to `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifySingleTimeZone")]
		public System.Nullable<System.Boolean> VerifySingleTimeZone { get; set; }
	}
	
	/// <summary>
	/// A request object used to create a DoubleClick Search report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportApiColumnSpec
	{
		
		/// <summary>
		/// Name of a DoubleClick Search column to include in the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnName")]
		public string ColumnName { get; set; }
		
		/// <summary>
		/// Segments a report by a custom dimension. The report must be scoped to an advertiser or lower, and the custom dimension must already be set up in DoubleClick Search. The custom dimension name, which appears in DoubleClick Search, is case sensitive.\ If used in a conversion report, returns the value of the specified custom dimension for the given conversion, if set. This column does not segment the conversion report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDimensionName")]
		public string CustomDimensionName { get; set; }
		
		/// <summary>
		/// Name of a custom metric to include in the report. The report must be scoped to an advertiser or lower, and the custom metric must already be set up in DoubleClick Search. The custom metric name, which appears in DoubleClick Search, is case sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customMetricName")]
		public string CustomMetricName { get; set; }
		
		/// <summary>
		/// Inclusive day in YYYY-MM-DD format. When provided, this overrides the overall time range of the report for this column only. Must be provided together with `startDate`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// Synchronous report only. Set to `true` to group by this column. Defaults to `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupByColumn")]
		public System.Nullable<System.Boolean> GroupByColumn { get; set; }
		
		/// <summary>
		/// Text used to identify this column in the report output; defaults to `columnName` or `savedColumnName` when not specified. This can be used to prevent collisions between DoubleClick Search columns and saved columns with the same name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headerText")]
		public string HeaderText { get; set; }
		
		/// <summary>
		/// The platform that is used to provide data for the custom dimension. Acceptable values are "floodlight".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformSource")]
		public string PlatformSource { get; set; }
		
		/// <summary>
		/// Returns metrics only for a specific type of product activity. Accepted values are: - "`sold`": returns metrics only for products that were sold - "`advertised`": returns metrics only for products that were advertised in a Shopping campaign, and that might or might not have been sold 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productReportPerspective")]
		public string ProductReportPerspective { get; set; }
		
		/// <summary>
		/// Name of a saved column to include in the report. The report must be scoped at advertiser or lower, and this saved column must already be created in the DoubleClick Search UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="savedColumnName")]
		public string SavedColumnName { get; set; }
		
		/// <summary>
		/// Inclusive date in YYYY-MM-DD format. When provided, this overrides the overall time range of the report for this column only. Must be provided together with `endDate`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
	}
	
	public class ReportRequestFilters
	{
		
		/// <summary>
		/// A request object used to create a DoubleClick Search report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="column")]
		public ReportApiColumnSpec Column { get; set; }
		
		/// <summary>
		/// Operator to use in the filter. See the filter reference for a list of available operators.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		/// <summary>
		/// A list of values to filter the column value against.\ The maximum number of filter values per request is 300.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	public class ReportRequestOrderBy
	{
		
		/// <summary>
		/// A request object used to create a DoubleClick Search report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="column")]
		public ReportApiColumnSpec Column { get; set; }
		
		/// <summary>
		/// The sort direction, which is either `ascending` or `descending`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public string SortOrder { get; set; }
	}
	
	public class ReportRequestReportScope
	{
		
		/// <summary>
		/// DS ad group ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adGroupId")]
		public string AdGroupId { get; set; }
		
		/// <summary>
		/// DS ad ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adId")]
		public string AdId { get; set; }
		
		/// <summary>
		/// DS advertiser ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// DS agency ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyId")]
		public string AgencyId { get; set; }
		
		/// <summary>
		/// DS campaign ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public string CampaignId { get; set; }
		
		/// <summary>
		/// DS engine account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="engineAccountId")]
		public string EngineAccountId { get; set; }
		
		/// <summary>
		/// DS keyword ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywordId")]
		public string KeywordId { get; set; }
	}
	
	public class ReportRequestTimeRange
	{
		
		/// <summary>
		/// Inclusive UTC timestamp in RFC format, e.g., `2013-07-16T10:16:23.555Z`. See additional references on how changed attribute reports work.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changedAttributesSinceTimestamp")]
		public string ChangedAttributesSinceTimestamp { get; set; }
		
		/// <summary>
		/// Inclusive UTC timestamp in RFC format, e.g., `2013-07-16T10:16:23.555Z`. See additional references on how changed metrics reports work.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changedMetricsSinceTimestamp")]
		public string ChangedMetricsSinceTimestamp { get; set; }
		
		/// <summary>
		/// Inclusive date in YYYY-MM-DD format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// Inclusive date in YYYY-MM-DD format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
	}
	
	/// <summary>
	/// A row in a DoubleClick Search report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportRow
	{
	}
	
	/// <summary>
	/// A saved column
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SavedColumn
	{
		
		/// <summary>
		/// Identifies this as a SavedColumn resource. Value: the fixed string doubleclicksearch#savedColumn.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The name of the saved column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="savedColumnName")]
		public string SavedColumnName { get; set; }
		
		/// <summary>
		/// The type of data this saved column will produce.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A list of saved columns. Advertisers create saved columns to report on Floodlight activities, Google Analytics goals, or custom KPIs. To request reports with saved columns, you'll need the saved column names that are available from this list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SavedColumnList
	{
		
		/// <summary>
		/// The saved columns being requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SavedColumn[] Items { get; set; }
		
		/// <summary>
		/// Identifies this as a SavedColumnList resource. Value: the fixed string doubleclicksearch#savedColumnList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// The request to update availability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAvailabilityRequest
	{
		
		/// <summary>
		/// The availabilities being requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilities")]
		public Availability[] Availabilities { get; set; }
	}
	
	/// <summary>
	/// The response to a update availability request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAvailabilityResponse
	{
		
		/// <summary>
		/// The availabilities being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilities")]
		public Availability[] Availabilities { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves a list of conversions from a DoubleClick Search engine account.
		/// Doubleclicksearch_conversion_get doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/engine/{engineAccountId}/conversion
		/// </summary>
		/// <param name="agencyId">Numeric ID of the agency.</param>
		/// <param name="advertiserId">Numeric ID of the advertiser.</param>
		/// <param name="engineAccountId">Numeric ID of the engine account.</param>
		/// <param name="endDate">Last date (inclusive) on which to retrieve conversions. Format is yyyymmdd.
		/// Minimum: 20091101
		/// Maximum: 99991231
		// </param>
		/// <param name="rowCount">The number of conversions to return per call.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="startDate">First date (inclusive) on which to retrieve conversions. Format is yyyymmdd.
		/// Minimum: 20091101
		/// Maximum: 99991231
		// </param>
		/// <param name="startRow">The 0-based starting index for retrieving conversions results.</param>
		/// <param name="adGroupId">Numeric ID of the ad group.</param>
		/// <param name="adId">Numeric ID of the ad.</param>
		/// <param name="campaignId">Numeric ID of the campaign.</param>
		/// <param name="criterionId">Numeric ID of the criterion.</param>
		/// <param name="customerId">Customer ID of a client account in the new Search Ads 360 experience.</param>
		/// <returns>Successful response</returns>
		public async Task<ConversionList> Doubleclicksearch_conversion_getAsync(string agencyId, string advertiserId, string engineAccountId, int endDate, int rowCount, int startDate, int startRow, string adGroupId, string adId, string campaignId, string criterionId, string customerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "doubleclicksearch/v2/agency/"+ (agencyId==null? "" : System.Uri.EscapeDataString(agencyId))+"/advertiser/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/engine/"+ (engineAccountId==null? "" : System.Uri.EscapeDataString(engineAccountId))+"/conversion&endDate="+endDate+"&rowCount="+rowCount+"&startDate="+startDate+"&startRow="+startRow+"&adGroupId=" + (adGroupId==null? "" : System.Uri.EscapeDataString(adGroupId))+"&adId=" + (adId==null? "" : System.Uri.EscapeDataString(adId))+"&campaignId=" + (campaignId==null? "" : System.Uri.EscapeDataString(campaignId))+"&criterionId=" + (criterionId==null? "" : System.Uri.EscapeDataString(criterionId))+"&customerId=" + (customerId==null? "" : System.Uri.EscapeDataString(customerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConversionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Downloads a csv file(encoded in UTF-8) that contains ID mappings between legacy SA360 and new SA360. The file includes all children entities of the given advertiser(e.g. engine accounts, campaigns, ad groups, etc.) that exist in both legacy SA360 and new SA360.
		/// Doubleclicksearch_reports_getIdMappingFile doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/idmapping
		/// </summary>
		/// <param name="agencyId">Legacy SA360 agency ID.</param>
		/// <param name="advertiserId">Legacy SA360 advertiser ID.</param>
		/// <returns>Successful response</returns>
		public async Task<IdMappingFile> Doubleclicksearch_reports_getIdMappingFileAsync(string agencyId, string advertiserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "doubleclicksearch/v2/agency/"+ (agencyId==null? "" : System.Uri.EscapeDataString(agencyId))+"/advertiser/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/idmapping";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IdMappingFile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the list of saved columns for a specified advertiser.
		/// Doubleclicksearch_savedColumns_list doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/savedcolumns
		/// </summary>
		/// <param name="agencyId">DS ID of the agency.</param>
		/// <param name="advertiserId">DS ID of the advertiser.</param>
		/// <returns>Successful response</returns>
		public async Task<SavedColumnList> Doubleclicksearch_savedColumns_listAsync(string agencyId, string advertiserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "doubleclicksearch/v2/agency/"+ (agencyId==null? "" : System.Uri.EscapeDataString(agencyId))+"/advertiser/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/savedcolumns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SavedColumnList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a batch of new conversions into DoubleClick Search.
		/// Doubleclicksearch_conversion_insert doubleclicksearch/v2/conversion
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ConversionList> Doubleclicksearch_conversion_insertAsync(ConversionList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "doubleclicksearch/v2/conversion";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConversionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a batch of conversions in DoubleClick Search.
		/// Doubleclicksearch_conversion_update doubleclicksearch/v2/conversion
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ConversionList> Doubleclicksearch_conversion_updateAsync(ConversionList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "doubleclicksearch/v2/conversion";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConversionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the availabilities of a batch of floodlight activities in DoubleClick Search.
		/// Doubleclicksearch_conversion_updateAvailability doubleclicksearch/v2/conversion/updateAvailability
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<UpdateAvailabilityResponse> Doubleclicksearch_conversion_updateAvailabilityAsync(UpdateAvailabilityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "doubleclicksearch/v2/conversion/updateAvailability";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAvailabilityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of conversions from a DoubleClick Search engine account.
		/// Doubleclicksearch_conversion_getByCustomerId doubleclicksearch/v2/customer/{customerId}/conversion
		/// </summary>
		/// <param name="customerId">Customer ID of a client account in the new Search Ads 360 experience.</param>
		/// <param name="endDate">Last date (inclusive) on which to retrieve conversions. Format is yyyymmdd.
		/// Minimum: 20091101
		/// Maximum: 99991231
		// </param>
		/// <param name="rowCount">The number of conversions to return per call.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="startDate">First date (inclusive) on which to retrieve conversions. Format is yyyymmdd.
		/// Minimum: 20091101
		/// Maximum: 99991231
		// </param>
		/// <param name="startRow">The 0-based starting index for retrieving conversions results.</param>
		/// <param name="adGroupId">Numeric ID of the ad group.</param>
		/// <param name="adId">Numeric ID of the ad.</param>
		/// <param name="advertiserId">Numeric ID of the advertiser.</param>
		/// <param name="agencyId">Numeric ID of the agency.</param>
		/// <param name="campaignId">Numeric ID of the campaign.</param>
		/// <param name="criterionId">Numeric ID of the criterion.</param>
		/// <param name="engineAccountId">Numeric ID of the engine account.</param>
		/// <returns>Successful response</returns>
		public async Task<ConversionList> Doubleclicksearch_conversion_getByCustomerIdAsync(string customerId, int endDate, int rowCount, int startDate, int startRow, string adGroupId, string adId, string advertiserId, string agencyId, string campaignId, string criterionId, string engineAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "doubleclicksearch/v2/customer/"+ (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"/conversion&endDate="+endDate+"&rowCount="+rowCount+"&startDate="+startDate+"&startRow="+startRow+"&adGroupId=" + (adGroupId==null? "" : System.Uri.EscapeDataString(adGroupId))+"&adId=" + (adId==null? "" : System.Uri.EscapeDataString(adId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&agencyId=" + (agencyId==null? "" : System.Uri.EscapeDataString(agencyId))+"&campaignId=" + (campaignId==null? "" : System.Uri.EscapeDataString(campaignId))+"&criterionId=" + (criterionId==null? "" : System.Uri.EscapeDataString(criterionId))+"&engineAccountId=" + (engineAccountId==null? "" : System.Uri.EscapeDataString(engineAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConversionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a report request into the reporting system.
		/// Doubleclicksearch_reports_request doubleclicksearch/v2/reports
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Report> Doubleclicksearch_reports_requestAsync(ReportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "doubleclicksearch/v2/reports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Report>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generates and returns a report immediately.
		/// Doubleclicksearch_reports_generate doubleclicksearch/v2/reports/generate
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Report> Doubleclicksearch_reports_generateAsync(ReportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "doubleclicksearch/v2/reports/generate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Report>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Polls for the status of a report request.
		/// Doubleclicksearch_reports_get doubleclicksearch/v2/reports/{reportId}
		/// </summary>
		/// <param name="reportId">ID of the report request being polled.</param>
		/// <returns>Successful response</returns>
		public async Task<Report> Doubleclicksearch_reports_getAsync(string reportId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "doubleclicksearch/v2/reports/"+ (reportId==null? "" : System.Uri.EscapeDataString(reportId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Report>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Downloads a report file encoded in UTF-8.
		/// Doubleclicksearch_reports_getFile doubleclicksearch/v2/reports/{reportId}/files/{reportFragment}
		/// </summary>
		/// <param name="reportId">ID of the report.</param>
		/// <param name="reportFragment">The index of the report fragment to download.
		/// Minimum: 0
		// </param>
		/// <returns>Successful response</returns>
		public async Task Doubleclicksearch_reports_getFileAsync(string reportId, int reportFragment, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "doubleclicksearch/v2/reports/"+ (reportId==null? "" : System.Uri.EscapeDataString(reportId))+"/files/"+reportFragment;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
