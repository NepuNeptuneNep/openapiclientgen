//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DirectoryList
	{
		
		/// <summary>
		/// Indicate the version of the Discovery API used to generate this doc.
		/// </summary>
		[System.ComponentModel.DefaultValue("v1")]
		[System.Runtime.Serialization.DataMember(Name="discoveryVersion")]
		public string DiscoveryVersion { get; set; } = "v1";
		
		/// <summary>
		/// The individual directory entries. One entry per api/version pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DirectoryListItems[] DirectoryListItems { get; set; }
		
		/// <summary>
		/// The kind for this response.
		/// </summary>
		[System.ComponentModel.DefaultValue("discovery#directoryList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "discovery#directoryList";
	}
	
	public class DirectoryListItems
	{
		
		/// <summary>
		/// The description of this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A link to the discovery document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discoveryLink")]
		public string DiscoveryLink { get; set; }
		
		/// <summary>
		/// The URL for the discovery REST document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discoveryRestUrl")]
		public string DiscoveryRestUrl { get; set; }
		
		/// <summary>
		/// A link to human readable documentation for the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentationLink")]
		public string DocumentationLink { get; set; }
		
		/// <summary>
		/// Links to 16x16 and 32x32 icons representing the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icons")]
		public DirectoryListItemsIcons Icons { get; set; }
		
		/// <summary>
		/// The id of this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind for this response.
		/// </summary>
		[System.ComponentModel.DefaultValue("discovery#directoryItem")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "discovery#directoryItem";
		
		/// <summary>
		/// Labels for the status of this API, such as labs or deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// The name of the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// True if this version is the preferred version to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferred")]
		public System.Nullable<System.Boolean> Preferred { get; set; }
		
		/// <summary>
		/// The title of this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The version of the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	public class DirectoryListItemsIcons
	{
		
		/// <summary>
		/// The URL of the 16x16 icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x16")]
		public string X16 { get; set; }
		
		/// <summary>
		/// The URL of the 32x32 icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x32")]
		public string X32 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JsonSchema
	{
		
		/// <summary>
		/// A reference to another schema. The value of this property is the "id" of another schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="$ref")]
		public string Ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalProperties")]
		public JsonSchema AdditionalProperties { get; set; }
		
		/// <summary>
		/// Additional information about this property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public JsonSchemaAnnotations Annotations { get; set; }
		
		/// <summary>
		/// Whether the parameter is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecated")]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		/// <summary>
		/// A description of this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Values this parameter may take (if it is an enum).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enum")]
		public string[] Enum { get; set; }
		
		/// <summary>
		/// The deprecation status for the enums. Each position maps to the corresponding value in the "enum" array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enumDeprecated")]
		public bool[] EnumDeprecated { get; set; }
		
		/// <summary>
		/// The descriptions for the enums. Each position maps to the corresponding value in the "enum" array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enumDescriptions")]
		public string[] EnumDescriptions { get; set; }
		
		/// <summary>
		/// An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// Unique identifier for this schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public JsonSchema Items { get; set; }
		
		/// <summary>
		/// Whether this parameter goes in the query or the path for REST requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The maximum value of this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public string Maximum { get; set; }
		
		/// <summary>
		/// The minimum value of this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public string Minimum { get; set; }
		
		/// <summary>
		/// The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
		
		/// <summary>
		/// If this is a schema for an object, list the schema for each property of this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, JsonSchema> Properties { get; set; }
		
		/// <summary>
		/// The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// Whether this parameter may appear multiple times.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeated")]
		public System.Nullable<System.Boolean> Repeated { get; set; }
		
		/// <summary>
		/// Whether the parameter is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of descriminant values to schema names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variant")]
		public JsonSchemaVariant Variant { get; set; }
	}
	
	public class JsonSchemaAnnotations
	{
		
		/// <summary>
		/// A list of methods for which this property is required on requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="required")]
		public string[] Required { get; set; }
	}
	
	public class JsonSchemaVariant
	{
		
		/// <summary>
		/// The name of the type discriminant property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discriminant")]
		public string Discriminant { get; set; }
		
		/// <summary>
		/// The map of discriminant value to schema to use for parsing..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="map")]
		public JsonSchemaVariantMap[] JsonSchemaVariantMap { get; set; }
	}
	
	public class JsonSchemaVariantMap
	{
		
		[System.Runtime.Serialization.DataMember(Name="$ref")]
		public string Ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type_value")]
		public string Type_value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RestDescription
	{
		
		/// <summary>
		/// Authentication information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth")]
		public RestDescriptionAuth Auth { get; set; }
		
		/// <summary>
		/// [DEPRECATED] The base path for REST requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basePath")]
		public string BasePath { get; set; }
		
		/// <summary>
		/// [DEPRECATED] The base URL for REST requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseUrl")]
		public string BaseUrl { get; set; }
		
		/// <summary>
		/// The path for REST batch requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchPath")]
		public string BatchPath { get; set; }
		
		/// <summary>
		/// Indicates how the API name should be capitalized and split into various parts. Useful for generating pretty class names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canonicalName")]
		public string CanonicalName { get; set; }
		
		/// <summary>
		/// The description of this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Indicate the version of the Discovery API used to generate this doc.
		/// </summary>
		[System.ComponentModel.DefaultValue("v1")]
		[System.Runtime.Serialization.DataMember(Name="discoveryVersion")]
		public string DiscoveryVersion { get; set; } = "v1";
		
		/// <summary>
		/// A link to human readable documentation for the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentationLink")]
		public string DocumentationLink { get; set; }
		
		/// <summary>
		/// A list of location-based endpoint objects for this API. Each object contains the endpoint URL, location, description and deprecation status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoints")]
		public RestDescriptionEndpoints[] RestDescriptionEndpoints { get; set; }
		
		/// <summary>
		/// The ETag for this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Enable exponential backoff for suitable methods in the generated clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exponentialBackoffDefault")]
		public System.Nullable<System.Boolean> ExponentialBackoffDefault { get; set; }
		
		/// <summary>
		/// A list of supported features for this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public string[] Features { get; set; }
		
		/// <summary>
		/// Links to 16x16 and 32x32 icons representing the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icons")]
		public RestDescriptionIcons Icons { get; set; }
		
		/// <summary>
		/// The ID of this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind for this response.
		/// </summary>
		[System.ComponentModel.DefaultValue("discovery#restDescription")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "discovery#restDescription";
		
		/// <summary>
		/// Labels for the status of this API, such as labs or deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// API-level methods for this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methods")]
		public System.Collections.Generic.Dictionary<string, RestMethod> Methods { get; set; }
		
		/// <summary>
		/// The name of this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The domain of the owner of this API. Together with the ownerName and a packagePath values, this can be used to generate a library for this API which would have a unique fully qualified name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerDomain")]
		public string OwnerDomain { get; set; }
		
		/// <summary>
		/// The name of the owner of this API. See ownerDomain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerName")]
		public string OwnerName { get; set; }
		
		/// <summary>
		/// The package of the owner of this API. See ownerDomain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packagePath")]
		public string PackagePath { get; set; }
		
		/// <summary>
		/// Common parameters that apply across all apis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, JsonSchema> Parameters { get; set; }
		
		/// <summary>
		/// The protocol described by this document.
		/// </summary>
		[System.ComponentModel.DefaultValue("rest")]
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; } = "rest";
		
		/// <summary>
		/// The resources in this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public System.Collections.Generic.Dictionary<string, RestResource> Resources { get; set; }
		
		/// <summary>
		/// The version of this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		/// <summary>
		/// The root URL under which all API services live.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootUrl")]
		public string RootUrl { get; set; }
		
		/// <summary>
		/// The schemas for this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemas")]
		public System.Collections.Generic.Dictionary<string, JsonSchema> Schemas { get; set; }
		
		/// <summary>
		/// The base path for all REST requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicePath")]
		public string ServicePath { get; set; }
		
		/// <summary>
		/// The title of this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The version of this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version_module")]
		public System.Nullable<System.Boolean> Version_module { get; set; }
	}
	
	public class RestDescriptionAuth
	{
		
		/// <summary>
		/// OAuth 2.0 authentication information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth2")]
		public RestDescriptionAuthOauth2 Oauth2 { get; set; }
	}
	
	public class RestDescriptionAuthOauth2
	{
		
		/// <summary>
		/// Available OAuth 2.0 scopes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public System.Collections.Generic.Dictionary<string, RestDescriptionAuthOauth2Scopes> Scopes { get; set; }
	}
	
	public class RestDescriptionAuthOauth2Scopes
	{
		
		/// <summary>
		/// Description of scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class RestDescriptionEndpoints
	{
		
		/// <summary>
		/// Whether this endpoint is deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecated")]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		/// <summary>
		/// A string describing the host designated by the URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The URL of the endpoint target host
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointUrl")]
		public string EndpointUrl { get; set; }
		
		/// <summary>
		/// The location of the endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
	}
	
	public class RestDescriptionIcons
	{
		
		/// <summary>
		/// The URL of the 16x16 icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x16")]
		public string X16 { get; set; }
		
		/// <summary>
		/// The URL of the 32x32 icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x32")]
		public string X32 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RestMethod
	{
		
		/// <summary>
		/// Whether this method is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecated")]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		/// <summary>
		/// Description of this method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Whether this method requires an ETag to be specified. The ETag is sent as an HTTP If-Match or If-None-Match header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etagRequired")]
		public System.Nullable<System.Boolean> EtagRequired { get; set; }
		
		/// <summary>
		/// The URI path of this REST method in (RFC 6570) format without level 2 features ({+var}). Supplementary to the path property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flatPath")]
		public string FlatPath { get; set; }
		
		/// <summary>
		/// HTTP method used by this method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpMethod")]
		public string HttpMethod { get; set; }
		
		/// <summary>
		/// A unique ID for this method. This property can be used to match methods between different versions of Discovery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Media upload parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaUpload")]
		public RestMethodMediaUpload MediaUpload { get; set; }
		
		/// <summary>
		/// Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the "most-significant" parameter appears first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameterOrder")]
		public string[] ParameterOrder { get; set; }
		
		/// <summary>
		/// Details for all parameters in this method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, JsonSchema> Parameters { get; set; }
		
		/// <summary>
		/// The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The schema for the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request")]
		public RestMethodRequest Request { get; set; }
		
		/// <summary>
		/// The schema for the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public RestMethodResponse Response { get; set; }
		
		/// <summary>
		/// OAuth 2.0 scopes applicable to this method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
		
		/// <summary>
		/// Whether this method supports media downloads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsMediaDownload")]
		public System.Nullable<System.Boolean> SupportsMediaDownload { get; set; }
		
		/// <summary>
		/// Whether this method supports media uploads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsMediaUpload")]
		public System.Nullable<System.Boolean> SupportsMediaUpload { get; set; }
		
		/// <summary>
		/// Whether this method supports subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsSubscription")]
		public System.Nullable<System.Boolean> SupportsSubscription { get; set; }
		
		/// <summary>
		/// Indicates that downloads from this method should use the download service URL (i.e. "/download"). Only applies if the method supports media download.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useMediaDownloadService")]
		public System.Nullable<System.Boolean> UseMediaDownloadService { get; set; }
	}
	
	public class RestMethodMediaUpload
	{
		
		/// <summary>
		/// MIME Media Ranges for acceptable media uploads to this method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accept")]
		public string[] Accept { get; set; }
		
		/// <summary>
		/// Maximum size of a media upload, such as "1MB", "2GB" or "3TB".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSize")]
		public string MaxSize { get; set; }
		
		/// <summary>
		/// Supported upload protocols.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocols")]
		public RestMethodMediaUploadProtocols Protocols { get; set; }
	}
	
	public class RestMethodMediaUploadProtocols
	{
		
		/// <summary>
		/// Supports the Resumable Media Upload protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resumable")]
		public RestMethodMediaUploadProtocolsResumable Resumable { get; set; }
		
		/// <summary>
		/// Supports uploading as a single HTTP request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="simple")]
		public RestMethodMediaUploadProtocolsSimple Simple { get; set; }
	}
	
	public class RestMethodMediaUploadProtocolsResumable
	{
		
		/// <summary>
		/// True if this endpoint supports uploading multipart media.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipart")]
		public System.Nullable<System.Boolean> Multipart { get; set; }
		
		/// <summary>
		/// The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	public class RestMethodMediaUploadProtocolsSimple
	{
		
		/// <summary>
		/// True if this endpoint supports upload multipart media.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipart")]
		public System.Nullable<System.Boolean> Multipart { get; set; }
		
		/// <summary>
		/// The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	public class RestMethodRequest
	{
		
		/// <summary>
		/// Schema ID for the request schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="$ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// parameter name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameterName")]
		public string ParameterName { get; set; }
	}
	
	public class RestMethodResponse
	{
		
		/// <summary>
		/// Schema ID for the response schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="$ref")]
		public string Ref { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RestResource
	{
		
		/// <summary>
		/// Whether this resource is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecated")]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		/// <summary>
		/// Methods on this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methods")]
		public System.Collections.Generic.Dictionary<string, RestMethod> Methods { get; set; }
		
		/// <summary>
		/// Sub-resources on this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public System.Collections.Generic.Dictionary<string, RestResource> Resources { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve the list of APIs supported at this endpoint.
		/// Discovery_apis_list apis
		/// </summary>
		/// <param name="name">Only include APIs with the given name.</param>
		/// <param name="preferred">Return only the preferred version of an API.</param>
		/// <returns>Successful response</returns>
		public async Task<DirectoryList> Discovery_apis_listAsync(string name, bool preferred, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&preferred="+preferred;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DirectoryList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve the description of a particular version of an api.
		/// Discovery_apis_getRest apis/{api}/{version}/rest
		/// </summary>
		/// <param name="api">The name of the API.</param>
		/// <param name="version">The version of the API.</param>
		/// <returns>Successful response</returns>
		public async Task<RestDescription> Discovery_apis_getRestAsync(string api, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/rest";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RestDescription>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
