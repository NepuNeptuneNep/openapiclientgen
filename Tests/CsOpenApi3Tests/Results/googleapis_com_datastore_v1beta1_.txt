//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Metadata common to all Datastore Admin operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1CommonMetadata
	{
		
		/// <summary>
		/// The time the operation ended, either successfully or otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The client-assigned labels which were provided when the operation was created. May also include additional labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The type of the operation. Can be used as a filter in ListOperationsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public System.Nullable<GoogleDatastoreAdminV1CommonMetadataOperationType> OperationType { get; set; }
		
		/// <summary>
		/// The time that work began on the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The current state of the Operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<GoogleDatastoreAdminV1CommonMetadataState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleDatastoreAdminV1CommonMetadataOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPERATION_TYPE_UNSPECIFIED")]
		OPERATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPORT_ENTITIES")]
		EXPORT_ENTITIES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORT_ENTITIES")]
		IMPORT_ENTITIES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_INDEX")]
		CREATE_INDEX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE_INDEX")]
		DELETE_INDEX = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleDatastoreAdminV1CommonMetadataState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATE_UNSPECIFIED")]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INITIALIZING")]
		INITIALIZING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROCESSING")]
		PROCESSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLING")]
		CANCELLING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FINALIZING")]
		FINALIZING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESSFUL")]
		SUCCESSFUL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED")]
		CANCELLED = 7,
	}
	
	/// <summary>
	/// Metadata for Datastore to Firestore migration operations. The DatastoreFirestoreMigration operation is not started by the end-user via an explicit "creation" method. This is an intentional deviation from the LRO design pattern. This singleton resource can be accessed at: "projects/{project_id}/operations/datastore-firestore-migration"
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata
	{
		
		/// <summary>
		/// The current state of migration from Cloud Datastore to Cloud Firestore in Datastore mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migrationState")]
		public System.Nullable<GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadataMigrationState> MigrationState { get; set; }
		
		/// <summary>
		/// The current step of migration from Cloud Datastore to Cloud Firestore in Datastore mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migrationStep")]
		public System.Nullable<GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadataMigrationStep> MigrationStep { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadataMigrationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MIGRATION_STATE_UNSPECIFIED")]
		MIGRATION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAUSED")]
		PAUSED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETE")]
		COMPLETE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadataMigrationStep
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MIGRATION_STEP_UNSPECIFIED")]
		MIGRATION_STEP_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREPARE")]
		PREPARE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="START")]
		START = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPLY_WRITES_SYNCHRONOUSLY")]
		APPLY_WRITES_SYNCHRONOUSLY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COPY_AND_VERIFY")]
		COPY_AND_VERIFY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REDIRECT_EVENTUALLY_CONSISTENT_READS")]
		REDIRECT_EVENTUALLY_CONSISTENT_READS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REDIRECT_STRONGLY_CONSISTENT_READS")]
		REDIRECT_STRONGLY_CONSISTENT_READS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REDIRECT_WRITES")]
		REDIRECT_WRITES = 7,
	}
	
	/// <summary>
	/// Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1EntityFilter
	{
		
		/// <summary>
		/// If empty, then this represents all kinds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kinds")]
		public string[] Kinds { get; set; }
		
		/// <summary>
		/// An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespaceIds")]
		public string[] NamespaceIds { get; set; }
	}
	
	/// <summary>
	/// Metadata for ExportEntities operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1ExportEntitiesMetadata
	{
		
		/// <summary>
		/// Metadata common to all Datastore Admin operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public GoogleDatastoreAdminV1CommonMetadata Common { get; set; }
		
		/// <summary>
		/// Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityFilter")]
		public GoogleDatastoreAdminV1EntityFilter EntityFilter { get; set; }
		
		/// <summary>
		/// Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1.ExportEntitiesResponse.output_url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUrlPrefix")]
		public string OutputUrlPrefix { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleDatastoreAdminV1Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressEntities")]
		public GoogleDatastoreAdminV1Progress ProgressEntities { get; set; }
	}
	
	/// <summary>
	/// Measures the progress of a particular metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1Progress
	{
		
		/// <summary>
		/// The amount of work that has been completed. Note that this may be greater than work_estimated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workCompleted")]
		public string WorkCompleted { get; set; }
		
		/// <summary>
		/// An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workEstimated")]
		public string WorkEstimated { get; set; }
	}
	
	/// <summary>
	/// The response for google.datastore.admin.v1.DatastoreAdmin.ExportEntities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1ExportEntitiesResponse
	{
		
		/// <summary>
		/// Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUrl")]
		public string OutputUrl { get; set; }
	}
	
	/// <summary>
	/// Metadata for ImportEntities operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1ImportEntitiesMetadata
	{
		
		/// <summary>
		/// Metadata common to all Datastore Admin operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public GoogleDatastoreAdminV1CommonMetadata Common { get; set; }
		
		/// <summary>
		/// Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityFilter")]
		public GoogleDatastoreAdminV1EntityFilter EntityFilter { get; set; }
		
		/// <summary>
		/// The location of the import metadata file. This will be the same value as the google.datastore.admin.v1.ExportEntitiesResponse.output_url field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputUrl")]
		public string InputUrl { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleDatastoreAdminV1Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressEntities")]
		public GoogleDatastoreAdminV1Progress ProgressEntities { get; set; }
	}
	
	/// <summary>
	/// Metadata for Index operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1IndexOperationMetadata
	{
		
		/// <summary>
		/// Metadata common to all Datastore Admin operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public GoogleDatastoreAdminV1CommonMetadata Common { get; set; }
		
		/// <summary>
		/// The index resource ID that this operation is acting on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexId")]
		public string IndexId { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressEntities")]
		public GoogleDatastoreAdminV1Progress ProgressEntities { get; set; }
	}
	
	/// <summary>
	/// An event signifying the start of a new step in a [migration from Cloud Datastore to Cloud Firestore in Datastore mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1MigrationProgressEvent
	{
		
		/// <summary>
		/// Details for the `PREPARE` step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prepareStepDetails")]
		public GoogleDatastoreAdminV1PrepareStepDetails PrepareStepDetails { get; set; }
		
		/// <summary>
		/// Details for the `REDIRECT_WRITES` step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectWritesStepDetails")]
		public GoogleDatastoreAdminV1RedirectWritesStepDetails RedirectWritesStepDetails { get; set; }
		
		/// <summary>
		/// The step that is starting. An event with step set to `START` indicates that the migration has been reverted back to the initial pre-migration state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="step")]
		public GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadataMigrationStep Step { get; set; }
	}
	
	/// <summary>
	/// Details for the `PREPARE` step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1PrepareStepDetails
	{
		
		/// <summary>
		/// The concurrency mode this database will use when it reaches the `REDIRECT_WRITES` step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrencyMode")]
		public System.Nullable<GoogleDatastoreAdminV1PrepareStepDetailsConcurrencyMode> ConcurrencyMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleDatastoreAdminV1PrepareStepDetailsConcurrencyMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONCURRENCY_MODE_UNSPECIFIED")]
		CONCURRENCY_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PESSIMISTIC")]
		PESSIMISTIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIMISTIC")]
		OPTIMISTIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIMISTIC_WITH_ENTITY_GROUPS")]
		OPTIMISTIC_WITH_ENTITY_GROUPS = 3,
	}
	
	/// <summary>
	/// Details for the `REDIRECT_WRITES` step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1RedirectWritesStepDetails
	{
		
		/// <summary>
		/// Ths concurrency mode for this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrencyMode")]
		public GoogleDatastoreAdminV1PrepareStepDetailsConcurrencyMode ConcurrencyMode { get; set; }
	}
	
	/// <summary>
	/// An event signifying a change in state of a [migration from Cloud Datastore to Cloud Firestore in Datastore mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1MigrationStateEvent
	{
		
		/// <summary>
		/// The new state of the migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadataMigrationState State { get; set; }
	}
	
	/// <summary>
	/// Metadata common to all Datastore Admin operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1beta1CommonMetadata
	{
		
		/// <summary>
		/// The time the operation ended, either successfully or otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The client-assigned labels which were provided when the operation was created. May also include additional labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The type of the operation. Can be used as a filter in ListOperationsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public System.Nullable<GoogleDatastoreAdminV1beta1CommonMetadataOperationType> OperationType { get; set; }
		
		/// <summary>
		/// The time that work began on the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The current state of the Operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public GoogleDatastoreAdminV1CommonMetadataState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleDatastoreAdminV1beta1CommonMetadataOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPERATION_TYPE_UNSPECIFIED")]
		OPERATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPORT_ENTITIES")]
		EXPORT_ENTITIES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORT_ENTITIES")]
		IMPORT_ENTITIES = 2,
	}
	
	/// <summary>
	/// Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1beta1EntityFilter
	{
		
		/// <summary>
		/// If empty, then this represents all kinds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kinds")]
		public string[] Kinds { get; set; }
		
		/// <summary>
		/// An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespaceIds")]
		public string[] NamespaceIds { get; set; }
	}
	
	/// <summary>
	/// Metadata for ExportEntities operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1beta1ExportEntitiesMetadata
	{
		
		/// <summary>
		/// Metadata common to all Datastore Admin operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public GoogleDatastoreAdminV1beta1CommonMetadata Common { get; set; }
		
		/// <summary>
		/// Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityFilter")]
		public GoogleDatastoreAdminV1beta1EntityFilter EntityFilter { get; set; }
		
		/// <summary>
		/// Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUrlPrefix")]
		public string OutputUrlPrefix { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleDatastoreAdminV1beta1Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressEntities")]
		public GoogleDatastoreAdminV1beta1Progress ProgressEntities { get; set; }
	}
	
	/// <summary>
	/// Measures the progress of a particular metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1beta1Progress
	{
		
		/// <summary>
		/// The amount of work that has been completed. Note that this may be greater than work_estimated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workCompleted")]
		public string WorkCompleted { get; set; }
		
		/// <summary>
		/// An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workEstimated")]
		public string WorkEstimated { get; set; }
	}
	
	/// <summary>
	/// The request for google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1beta1ExportEntitiesRequest
	{
		
		/// <summary>
		/// Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityFilter")]
		public GoogleDatastoreAdminV1beta1EntityFilter EntityFilter { get; set; }
		
		/// <summary>
		/// Client-assigned labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Location for the export metadata and data files. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So output_url_prefix should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace). For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). The resulting files will be nested deeper than the specified URL prefix. The final output URL will be provided in the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field. That value should be used for subsequent ImportEntities operations. By nesting the data files deeper, the same Cloud Storage bucket can be used in multiple ExportEntities operations without conflict.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUrlPrefix")]
		public string OutputUrlPrefix { get; set; }
	}
	
	/// <summary>
	/// The response for google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1beta1ExportEntitiesResponse
	{
		
		/// <summary>
		/// Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUrl")]
		public string OutputUrl { get; set; }
	}
	
	/// <summary>
	/// Metadata for ImportEntities operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1beta1ImportEntitiesMetadata
	{
		
		/// <summary>
		/// Metadata common to all Datastore Admin operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public GoogleDatastoreAdminV1beta1CommonMetadata Common { get; set; }
		
		/// <summary>
		/// Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityFilter")]
		public GoogleDatastoreAdminV1beta1EntityFilter EntityFilter { get; set; }
		
		/// <summary>
		/// The location of the import metadata file. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputUrl")]
		public string InputUrl { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleDatastoreAdminV1beta1Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressEntities")]
		public GoogleDatastoreAdminV1beta1Progress ProgressEntities { get; set; }
	}
	
	/// <summary>
	/// The request for google.datastore.admin.v1beta1.DatastoreAdmin.ImportEntities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleDatastoreAdminV1beta1ImportEntitiesRequest
	{
		
		/// <summary>
		/// Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityFilter")]
		public GoogleDatastoreAdminV1beta1EntityFilter EntityFilter { get; set; }
		
		/// <summary>
		/// The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So input_url should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written by the ExportEntities operation. For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). For more information, see google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputUrl")]
		public string InputUrl { get; set; }
		
		/// <summary>
		/// Client-assigned labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleLongrunningOperation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage.
		/// Datastore_projects_export v1beta1/projects/{projectId}:export
		/// </summary>
		/// <param name="projectId">Project ID against which to make the request.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Datastore_projects_exportAsync(string projectId, GoogleDatastoreAdminV1beta1ExportEntitiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+":export";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleLongrunningOperation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Imports entities into Google Cloud Datastore. Existing entities with the same key are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportEntities operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Datastore.
		/// Datastore_projects_import v1beta1/projects/{projectId}:import
		/// </summary>
		/// <param name="projectId">Project ID against which to make the request.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Datastore_projects_importAsync(string projectId, GoogleDatastoreAdminV1beta1ImportEntitiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+":import";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleLongrunningOperation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
