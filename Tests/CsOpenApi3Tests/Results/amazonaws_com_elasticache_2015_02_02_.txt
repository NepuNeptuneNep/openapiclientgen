//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents the output from the <code>AddTagsToResource</code>, <code>ListTagsForResource</code>, and <code>RemoveTagsFromResource</code> operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagListMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TagList { get; set; }
	}
	
	/// <summary>
	/// A tag that can be added to an ElastiCache cluster or replication group. Tags are composed of a Key/Value pair. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. A tag with a null Value is permitted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheClusterNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheParameterGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheSecurityGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheSubnetGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidReplicationGroupStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedCacheNodeNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagQuotaPerResourceExceeded
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidARNFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizeCacheSecurityGroupIngressResult
	{
		
		/// <summary>
		/// <p>Represents the output of one of the following operations:</p> <ul> <li> <p> <code>AuthorizeCacheSecurityGroupIngress</code> </p> </li> <li> <p> <code>CreateCacheSecurityGroup</code> </p> </li> <li> <p> <code>RevokeCacheSecurityGroupIngress</code> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CacheSecurityGroup CacheSecurityGroup { get; set; }
	}
	
	/// <summary>
	/// <p>Represents the output of one of the following operations:</p> <ul> <li> <p> <code>AuthorizeCacheSecurityGroupIngress</code> </p> </li> <li> <p> <code>CreateCacheSecurityGroup</code> </p> </li> <li> <p> <code>RevokeCacheSecurityGroupIngress</code> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheSecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EC2SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidCacheSecurityGroupStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizationAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParameterValueException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParameterCombinationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateActionResultsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ProcessedUpdateActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UnprocessedUpdateActions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUpdateNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompleteMigrationResponse
	{
		
		/// <summary>
		/// Contains all of the attributes of a specific Redis replication group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationGroup ReplicationGroup { get; set; }
	}
	
	/// <summary>
	/// Contains all of the attributes of a specific Redis replication group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalReplicationGroupInfo GlobalReplicationGroupInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReplicationGroupPendingModifiedValues PendingModifiedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MemberClusters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NodeGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshottingClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomaticFailoverStatus AutomaticFailover { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingAutomaticFailoverStatus MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Endpoint ConfigurationEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnapshotRetentionLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ClusterEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AuthTokenEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset AuthTokenLastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TransitEncryptionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AtRestEncryptionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MemberClustersOutpostArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LogDeliveryConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ReplicationGroupCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingAutomaticFailoverStatus DataTiering { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkType NetworkType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpDiscovery IpDiscovery { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransitEncryptionMode TransitEncryptionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterMode ClusterMode { get; set; }
	}
	
	/// <summary>
	/// The name of the Global datastore and role of this replication group in the Global datastore.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GlobalReplicationGroupInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupMemberRole { get; set; }
	}
	
	/// <summary>
	/// The settings to be applied to the Redis replication group, either immediately or during the next maintenance window.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationGroupPendingModifiedValues
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingAutomaticFailoverStatus AutomaticFailoverStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReshardingStatus Resharding { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthTokenUpdateStatus AuthTokenStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserGroupsUpdateStatus UserGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingLogDeliveryConfiguration[] LogDeliveryConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TransitEncryptionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransitEncryptionMode TransitEncryptionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterMode ClusterMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PendingAutomaticFailoverStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabled")]
		enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 1,
	}
	
	/// <summary>
	/// The status of an online resharding operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReshardingStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SlotMigration SlotMigration { get; set; }
	}
	
	/// <summary>
	/// Represents the progress of an online resharding operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlotMigration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ProgressPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthTokenUpdateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SETTING")]
		SETTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ROTATING")]
		ROTATING = 1,
	}
	
	/// <summary>
	/// The status of the user group update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserGroupsUpdateStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserGroupIdsToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserGroupIdsToRemove { get; set; }
	}
	
	/// <summary>
	/// The log delivery configurations being modified 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PendingLogDeliveryConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LogType LogType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DestinationType DestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DestinationDetails DestinationDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogFormat LogFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="slow-log")]
		slowMinuslog = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="engine-log")]
		engineMinuslog = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cloudwatch-logs")]
		cloudwatchMinuslogs = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kinesis-firehose")]
		kinesisMinusfirehose = 1,
	}
	
	/// <summary>
	/// Configuration details of either a CloudWatch Logs destination or Kinesis Data Firehose destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinationDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLogsDestinationDetails CloudWatchLogsDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KinesisFirehoseDestinationDetails KinesisFirehoseDetails { get; set; }
	}
	
	/// <summary>
	/// The configuration details of the CloudWatch Logs destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloudWatchLogsDestinationDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LogGroup { get; set; }
	}
	
	/// <summary>
	/// The configuration details of the Kinesis Data Firehose destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KinesisFirehoseDestinationDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryStream { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LogFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text")]
		text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="json")]
		json = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransitEncryptionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="preferred")]
		preferred = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="required")]
		required = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ClusterMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabled")]
		enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="compatible")]
		compatible = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AutomaticFailoverStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabled")]
		enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabling")]
		enabling = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabling")]
		disabling = 3,
	}
	
	/// <summary>
	/// Represents the information required for client programs to connect to a cache node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Endpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NetworkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ipv4")]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ipv6")]
		ipv6 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dual_stack")]
		dual_stack = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IpDiscovery
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ipv4")]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ipv6")]
		ipv6 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationGroupNotUnderMigrationFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CopySnapshotResult
	{
		
		/// <summary>
		/// Represents a copy of an entire Redis cluster as of the time when the snapshot was taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	/// <summary>
	/// Represents a copy of an entire Redis cluster as of the time when the snapshot was taken.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Snapshot
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumCacheNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredOutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CacheClusterCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnapshotRetentionLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumNodeGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomaticFailoverStatus AutomaticFailover { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NodeSnapshots { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingAutomaticFailoverStatus DataTiering { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidSnapshotStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCacheClusterResult
	{
		
		/// <summary>
		/// Contains all of the attributes of a specific cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CacheCluster CacheCluster { get; set; }
	}
	
	/// <summary>
	/// Contains all of the attributes of a specific cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheCluster
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Endpoint ConfigurationEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientDownloadLandingPage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumCacheNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredOutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CacheClusterCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		/// <summary>
		/// A group of settings that are applied to the cluster in the future, or that are currently being applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PendingModifiedValues PendingModifiedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfiguration NotificationConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CacheParameterGroupStatus CacheParameterGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroupMembership[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnapshotRetentionLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AuthTokenEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset AuthTokenLastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TransitEncryptionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AtRestEncryptionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReplicationGroupLogDeliveryEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LogDeliveryConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkType NetworkType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpDiscovery IpDiscovery { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransitEncryptionMode TransitEncryptionMode { get; set; }
	}
	
	/// <summary>
	/// A group of settings that are applied to the cluster in the future, or that are currently being applied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PendingModifiedValues
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumCacheNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheNodeIdsToRemove { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthTokenUpdateStatus AuthTokenStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingLogDeliveryConfiguration[] LogDeliveryConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TransitEncryptionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransitEncryptionMode TransitEncryptionMode { get; set; }
	}
	
	/// <summary>
	/// Describes a notification topic and its status. Notification topics are used for publishing ElastiCache events to subscribers using Amazon Simple Notification Service (SNS).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TopicStatus { get; set; }
	}
	
	/// <summary>
	/// Status of the cache parameter group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheParameterGroupStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterApplyStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheNodeIdsToReboot { get; set; }
	}
	
	/// <summary>
	/// Represents a single cache security group and its status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecurityGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SecurityGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Specifies the destination, format and type of the logs. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogDeliveryConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LogType LogType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DestinationType DestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DestinationDetails DestinationDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogFormat LogFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheClusterAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InsufficientCacheClusterCapacityFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterQuotaForCustomerExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeQuotaForClusterExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeQuotaForCustomerExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidVPCNetworkStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCacheParameterGroupResult
	{
		
		/// <summary>
		/// Represents the output of a <code>CreateCacheParameterGroup</code> operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CacheParameterGroup CacheParameterGroup { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>CreateCacheParameterGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheParameterGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsGlobal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheParameterGroupQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheParameterGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidCacheParameterGroupStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCacheSecurityGroupResult
	{
		
		/// <summary>
		/// <p>Represents the output of one of the following operations:</p> <ul> <li> <p> <code>AuthorizeCacheSecurityGroupIngress</code> </p> </li> <li> <p> <code>CreateCacheSecurityGroup</code> </p> </li> <li> <p> <code>RevokeCacheSecurityGroupIngress</code> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CacheSecurityGroup CacheSecurityGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheSecurityGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheSecurityGroupQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCacheSubnetGroupResult
	{
		
		/// <summary>
		/// <p>Represents the output of one of the following operations:</p> <ul> <li> <p> <code>CreateCacheSubnetGroup</code> </p> </li> <li> <p> <code>ModifyCacheSubnetGroup</code> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CacheSubnetGroup CacheSubnetGroup { get; set; }
	}
	
	/// <summary>
	/// <p>Represents the output of one of the following operations:</p> <ul> <li> <p> <code>CreateCacheSubnetGroup</code> </p> </li> <li> <p> <code>ModifyCacheSubnetGroup</code> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheSubnetGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheSubnetGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkType[] SupportedNetworkTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheSubnetGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheSubnetGroupQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheSubnetQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidSubnet
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubnetNotAllowedFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGlobalReplicationGroupResult
	{
		
		/// <summary>
		/// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.</p> <ul> <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore, which is what you use to associate a secondary cluster.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalReplicationGroup GlobalReplicationGroup { get; set; }
	}
	
	/// <summary>
	/// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.</p> <ul> <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore, which is what you use to associate a secondary cluster.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GlobalReplicationGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Members { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ClusterEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GlobalNodeGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AuthTokenEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TransitEncryptionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AtRestEncryptionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GlobalReplicationGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceLinkedRoleNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateReplicationGroupResult
	{
		
		/// <summary>
		/// Contains all of the attributes of a specific Redis replication group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationGroup ReplicationGroup { get; set; }
	}
	
	/// <summary>
	/// Node group (shard) configuration options. Each node group (shard) configuration has the following: <code>Slots</code>, <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeGroupConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Slots { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReplicaCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReplicaAvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryOutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReplicaOutpostArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidCacheClusterStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidUserGroupStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeGroupsPerReplicationGroupQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GlobalReplicationGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidGlobalReplicationGroupStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSnapshotResult
	{
		
		/// <summary>
		/// Represents a copy of an entire Redis cluster as of the time when the snapshot was taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnapshotFeatureNotSupportedFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinimumEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccessString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Authentication Authentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
	}
	
	/// <summary>
	/// Indicates whether the user requires a password to authenticate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Authentication
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PasswordCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="password")]
		password = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no-password")]
		noMinuspassword = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="iam")]
		iam = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InputAuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="password")]
		password = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no-password-required")]
		noMinuspasswordMinusrequired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="iam")]
		iam = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DuplicateUserNameFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinimumEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserGroupPendingChanges PendingChanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReplicationGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
	}
	
	/// <summary>
	/// Returns the updates being applied to the user group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserGroupPendingChanges
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserIdsToRemove { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserIdsToAdd { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DefaultUserRequired
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserGroupQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DecreaseNodeGroupsInGlobalReplicationGroupResult
	{
		
		/// <summary>
		/// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.</p> <ul> <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore, which is what you use to associate a secondary cluster.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalReplicationGroup GlobalReplicationGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DecreaseReplicaCountResult
	{
		
		/// <summary>
		/// Contains all of the attributes of a specific Redis replication group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationGroup ReplicationGroup { get; set; }
	}
	
	/// <summary>
	/// Node group (shard) configuration options when adding or removing replicas. Each node group (shard) configuration has the following members: NodeGroupId, NewReplicaCount, and PreferredAvailabilityZones. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigureShard
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NodeGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int NewReplicaCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PreferredAvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PreferredOutpostArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoOperationFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCacheClusterResult
	{
		
		/// <summary>
		/// Contains all of the attributes of a specific cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CacheCluster CacheCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheSubnetGroupInUse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteGlobalReplicationGroupResult
	{
		
		/// <summary>
		/// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.</p> <ul> <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore, which is what you use to associate a secondary cluster.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalReplicationGroup GlobalReplicationGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteReplicationGroupResult
	{
		
		/// <summary>
		/// Contains all of the attributes of a specific Redis replication group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationGroup ReplicationGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSnapshotResult
	{
		
		/// <summary>
		/// Represents a copy of an entire Redis cluster as of the time when the snapshot was taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidUserStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DefaultUserAssociatedToUserGroupFault
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>DescribeCacheClusters</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheClusterMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheClusters { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>DescribeCacheEngineVersions</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheEngineVersionMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheEngineVersions { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>DescribeCacheParameterGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheParameterGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheParameterGroups { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>DescribeCacheParameters</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheParameterGroupDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheNodeTypeSpecificParameters { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>DescribeCacheSecurityGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheSecurityGroupMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheSecurityGroups { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>DescribeCacheSubnetGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheSubnetGroupMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheSubnetGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEngineDefaultParametersResult
	{
		
		/// <summary>
		/// Represents the output of a <code>DescribeEngineDefaultParameters</code> operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EngineDefaults EngineDefaults { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>DescribeEngineDefaultParameters</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EngineDefaults
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheNodeTypeSpecificParameters { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>DescribeEvents</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeGlobalReplicationGroupsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GlobalReplicationGroups { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>DescribeReplicationGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationGroupMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReplicationGroups { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>DescribeReservedCacheNodes</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedCacheNodeMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedCacheNodes { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>DescribeReservedCacheNodesOfferings</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedCacheNodesOfferingMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedCacheNodesOfferings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedCacheNodesOfferingNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUpdatesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ServiceUpdates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceUpdateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="available")]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cancelled")]
		cancelled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="expired")]
		expired = 2,
	}
	
	/// <summary>
	/// Represents the output of a <code>DescribeSnapshots</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSnapshotsListMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Snapshots { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateActionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UpdateActions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UpdateActionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-applied")]
		notMinusapplied = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="waiting-to-start")]
		waitingMinustoMinusstart = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-progress")]
		inMinusprogress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stopping")]
		stopping = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stopped")]
		stopped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scheduling")]
		scheduling = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scheduled")]
		scheduled = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-applicable")]
		notMinusapplicable = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeUserGroupsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserGroup[] UserGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeUsersResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public User[] Users { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Used to streamline results of a search based on the property being filtered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Filter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateGlobalReplicationGroupResult
	{
		
		/// <summary>
		/// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.</p> <ul> <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore, which is what you use to associate a secondary cluster.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalReplicationGroup GlobalReplicationGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailoverGlobalReplicationGroupResult
	{
		
		/// <summary>
		/// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.</p> <ul> <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore, which is what you use to associate a secondary cluster.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalReplicationGroup GlobalReplicationGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IncreaseNodeGroupsInGlobalReplicationGroupResult
	{
		
		/// <summary>
		/// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.</p> <ul> <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore, which is what you use to associate a secondary cluster.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalReplicationGroup GlobalReplicationGroup { get; set; }
	}
	
	/// <summary>
	/// A list of the replication groups 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegionalConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupRegion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ReshardingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IncreaseReplicaCountResult
	{
		
		/// <summary>
		/// Contains all of the attributes of a specific Redis replication group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationGroup ReplicationGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidKMSKeyFault
	{
	}
	
	/// <summary>
	/// Represents the allowed node types you can use to modify your cluster or replication group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AllowedNodeTypeModificationsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ScaleUpModifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ScaleDownModifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyCacheClusterResult
	{
		
		/// <summary>
		/// Contains all of the attributes of a specific cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CacheCluster CacheCluster { get; set; }
	}
	
	/// <summary>
	/// <p>Represents the output of one of the following operations:</p> <ul> <li> <p> <code>ModifyCacheParameterGroup</code> </p> </li> <li> <p> <code>ResetCacheParameterGroup</code> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheParameterGroupNameMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
	}
	
	/// <summary>
	/// Describes a name-value pair that is used to update the value of a parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParameterNameValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyCacheSubnetGroupResult
	{
		
		/// <summary>
		/// <p>Represents the output of one of the following operations:</p> <ul> <li> <p> <code>CreateCacheSubnetGroup</code> </p> </li> <li> <p> <code>ModifyCacheSubnetGroup</code> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CacheSubnetGroup CacheSubnetGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubnetInUse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyGlobalReplicationGroupResult
	{
		
		/// <summary>
		/// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.</p> <ul> <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore, which is what you use to associate a secondary cluster.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalReplicationGroup GlobalReplicationGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyReplicationGroupResult
	{
		
		/// <summary>
		/// Contains all of the attributes of a specific Redis replication group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationGroup ReplicationGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyReplicationGroupShardConfigurationResult
	{
		
		/// <summary>
		/// Contains all of the attributes of a specific Redis replication group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationGroup ReplicationGroup { get; set; }
	}
	
	/// <summary>
	/// A list of <code>PreferredAvailabilityZones</code> objects that specifies the configuration of a node group in the resharded cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReshardingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PreferredAvailabilityZones { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseReservedCacheNodesOfferingResult
	{
		
		/// <summary>
		/// Represents the output of a <code>PurchaseReservedCacheNodesOffering</code> operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservedCacheNode ReservedCacheNode { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>PurchaseReservedCacheNodesOffering</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedCacheNode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedCacheNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedCacheNodesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CacheNodeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RecurringCharges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservationARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedCacheNodeAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedCacheNodeQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RebalanceSlotsInGlobalReplicationGroupResult
	{
		
		/// <summary>
		/// <p>Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.</p> <ul> <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> represents the name of the Global datastore, which is what you use to associate a secondary cluster.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalReplicationGroup GlobalReplicationGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RebootCacheClusterResult
	{
		
		/// <summary>
		/// Contains all of the attributes of a specific cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CacheCluster CacheCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokeCacheSecurityGroupIngressResult
	{
		
		/// <summary>
		/// <p>Represents the output of one of the following operations:</p> <ul> <li> <p> <code>AuthorizeCacheSecurityGroupIngress</code> </p> </li> <li> <p> <code>CreateCacheSecurityGroup</code> </p> </li> <li> <p> <code>RevokeCacheSecurityGroupIngress</code> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CacheSecurityGroup CacheSecurityGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizationNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartMigrationResponse
	{
		
		/// <summary>
		/// Contains all of the attributes of a specific Redis replication group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationGroup ReplicationGroup { get; set; }
	}
	
	/// <summary>
	/// The endpoint from which data should be migrated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerNodeEndpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationGroupAlreadyUnderMigrationFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestFailoverResult
	{
		
		/// <summary>
		/// Contains all of the attributes of a specific Redis replication group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationGroup ReplicationGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APICallRateForCustomerExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestFailoverNotAvailableFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AZMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="single-az")]
		singleMinusaz = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cross-az")]
		crossMinusaz = 1,
	}
	
	/// <summary>
	/// Represents the input of an AddTagsToResource operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddTagsToResourceMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthTokenUpdateStrategyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SET")]
		SET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ROTATE")]
		ROTATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE")]
		DELETE = 2,
	}
	
	/// <summary>
	/// Specifies the authentication mode to use.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationMode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputAuthenticationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Passwords { get; set; }
	}
	
	/// <summary>
	/// Represents the input of an AuthorizeCacheSecurityGroupIngress operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizeCacheSecurityGroupIngressMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheSecurityGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupOwnerId { get; set; }
	}
	
	/// <summary>
	/// Describes an Availability Zone in which the cluster is launched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailabilityZone
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchApplyUpdateActionMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReplicationGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheClusterIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUpdateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchStopUpdateActionMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReplicationGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheClusterIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUpdateName { get; set; }
	}
	
	/// <summary>
	/// Provides all of the details about a particular cache engine version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheEngineVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheEngineDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheEngineVersionDescription { get; set; }
	}
	
	/// <summary>
	/// <p>Represents an individual cache node within a cluster. Each cache node runs its own instance of the cluster's protocol-compliant caching software - either Memcached or Redis.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): <code>cache.m6g.large</code>, <code>cache.m6g.xlarge</code>, <code>cache.m6g.2xlarge</code>, <code>cache.m6g.4xlarge</code>, <code>cache.m6g.8xlarge</code>, <code>cache.m6g.12xlarge</code>, <code>cache.m6g.16xlarge</code> </p> <note> <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a> </p> </note> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T4g node types</b> (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): <code>cache.t4g.micro</code>, <code>cache.t4g.small</code>, <code>cache.t4g.medium</code> </p> <p> <b>T3 node types:</b> <code>cache.t3.micro</code>, <code>cache.t3.small</code>, <code>cache.t3.medium</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p> <p> <code>cache.r6g.large</code>, <code>cache.r6g.xlarge</code>, <code>cache.r6g.2xlarge</code>, <code>cache.r6g.4xlarge</code>, <code>cache.r6g.8xlarge</code>, <code>cache.r6g.12xlarge</code>, <code>cache.r6g.16xlarge</code> </p> <note> <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a> </p> </note> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheNode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CacheNodeCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Endpoint Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceCacheNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerOutpostArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="immediate")]
		immediate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="requires-reboot")]
		requiresMinusreboot = 1,
	}
	
	/// <summary>
	/// A parameter that has a different value for each cache node type it is applied to. For example, in a Redis cluster, a <code>cache.m1.large</code> cache node type would have a larger <code>maxmemory</code> value than a <code>cache.m1.small</code> type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheNodeTypeSpecificParameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllowedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsModifiable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinimumEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheNodeTypeSpecificValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChangeType ChangeType { get; set; }
	}
	
	/// <summary>
	/// A value that applies only to a certain cache node type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheNodeTypeSpecificValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NodeUpdateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-applied")]
		notMinusapplied = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="waiting-to-start")]
		waitingMinustoMinusstart = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-progress")]
		inMinusprogress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stopping")]
		stopping = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stopped")]
		stopped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NodeUpdateInitiatedBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="system")]
		system = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="customer")]
		customer = 1,
	}
	
	/// <summary>
	/// The status of the service update on the cache node
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheNodeUpdateStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NodeUpdateStatus NodeUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NodeDeletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NodeUpdateStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NodeUpdateEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NodeUpdateInitiatedBy NodeUpdateInitiatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NodeUpdateInitiatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NodeUpdateStatusModifiedDate { get; set; }
	}
	
	/// <summary>
	/// Represents a cluster's status within a particular cache security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheSecurityGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompleteMigrationMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CopySnapshotMessage</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CopySnapshotMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceSnapshotName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetSnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetBucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OutpostMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="single-outpost")]
		singleMinusoutpost = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cross-outpost")]
		crossMinusoutpost = 1,
	}
	
	/// <summary>
	/// Represents the input of a CreateCacheCluster operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCacheClusterMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AZMode AZMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PreferredAvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumCacheNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheSecurityGroupNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SnapshotArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnapshotRetentionLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutpostMode OutpostMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredOutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PreferredOutpostArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LogDeliveryConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TransitEncryptionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkType NetworkType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpDiscovery IpDiscovery { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CreateCacheParameterGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCacheParameterGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupFamily { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CreateCacheSecurityGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCacheSecurityGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheSecurityGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CreateCacheSubnetGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCacheSubnetGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheSubnetGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheSubnetGroupDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGlobalReplicationGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupIdSuffix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryReplicationGroupId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CreateReplicationGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateReplicationGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutomaticFailoverEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumCacheClusters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PreferredCacheClusterAZs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumNodeGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReplicasPerNodeGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NodeGroupConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheSecurityGroupNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SnapshotArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnapshotRetentionLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TransitEncryptionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AtRestEncryptionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LogDeliveryConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DataTieringEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkType NetworkType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpDiscovery IpDiscovery { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransitEncryptionMode TransitEncryptionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterMode ClusterMode { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CreateSnapshot</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSnapshotMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateUserGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateUserMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Passwords { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NoPasswordRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationMode AuthenticationMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataTieringStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabled")]
		enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DecreaseNodeGroupsInGlobalReplicationGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int NodeGroupCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GlobalNodeGroupsToRemove { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GlobalNodeGroupsToRetain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ApplyImmediately { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DecreaseReplicaCountMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NewReplicaCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReplicaConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReplicasToRemove { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ApplyImmediately { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteCacheCluster</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCacheClusterMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FinalSnapshotIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteCacheParameterGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCacheParameterGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteCacheSecurityGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCacheSecurityGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheSecurityGroupName { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteCacheSubnetGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCacheSubnetGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheSubnetGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteGlobalReplicationGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool RetainPrimaryReplicationGroup { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteReplicationGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteReplicationGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RetainPrimaryCluster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FinalSnapshotIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteSnapshot</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSnapshotMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteUserGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteUserMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DescribeCacheClusters</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCacheClustersMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowCacheNodeInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowCacheClustersNotInReplicationGroups { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DescribeCacheEngineVersions</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCacheEngineVersionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultOnly { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DescribeCacheParameterGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCacheParameterGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DescribeCacheParameters</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCacheParametersMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DescribeCacheSecurityGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCacheSecurityGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DescribeCacheSubnetGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCacheSubnetGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DescribeEngineDefaultParameters</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEngineDefaultParametersMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cache-cluster")]
		cacheMinuscluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cache-parameter-group")]
		cacheMinusparameterMinusgroup = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cache-security-group")]
		cacheMinussecurityMinusgroup = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cache-subnet-group")]
		cacheMinussubnetMinusgroup = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="replication-group")]
		replicationMinusgroup = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user")]
		user = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user-group")]
		userMinusgroup = 6,
	}
	
	/// <summary>
	/// Represents the input of a <code>DescribeEvents</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeEventsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceType SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeGlobalReplicationGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowMemberInfo { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DescribeReplicationGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReplicationGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DescribeReservedCacheNodes</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReservedCacheNodesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedCacheNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedCacheNodesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DescribeReservedCacheNodesOfferings</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReservedCacheNodesOfferingsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedCacheNodesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeServiceUpdatesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUpdateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceUpdateStatus[] ServiceUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DescribeSnapshotsMessage</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSnapshotsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowNodeGroupConfig { get; set; }
	}
	
	/// <summary>
	/// Filters update actions from the service updates that are in available status during the time range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeRangeFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeUpdateActionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUpdateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReplicationGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheClusterIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceUpdateStatus[] ServiceUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TimeRangeFilter ServiceUpdateTimeRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateActionStatus[] UpdateActionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowNodeLevelUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeUserGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeUsersMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateGlobalReplicationGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupRegion { get; set; }
	}
	
	/// <summary>
	/// Provides ownership and status information for an Amazon EC2 security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EC2SecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupOwnerId { get; set; }
	}
	
	/// <summary>
	/// Represents a single occurrence of something interesting within the system. Some examples of events are creating a cluster, adding or removing a cache node, or rebooting a node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceType SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailoverGlobalReplicationGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryRegion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryReplicationGroupId { get; set; }
	}
	
	/// <summary>
	/// Indicates the slot configuration and global identifier for a slice group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GlobalNodeGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNodeGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Slots { get; set; }
	}
	
	/// <summary>
	/// A member of a Global datastore. It contains the Replication Group Id, the Amazon region and the role of the replication group. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GlobalReplicationGroupMember
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomaticFailoverStatus AutomaticFailover { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IncreaseNodeGroupsInGlobalReplicationGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int NodeGroupCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RegionalConfigurations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ApplyImmediately { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IncreaseReplicaCountMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NewReplicaCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReplicaConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ApplyImmediately { get; set; }
	}
	
	/// <summary>
	/// The input parameters for the <code>ListAllowedNodeTypeModifications</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAllowedNodeTypeModificationsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
	}
	
	/// <summary>
	/// The input parameters for the <code>ListTagsForResource</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LogDeliveryConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabling")]
		enabling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="modifying")]
		modifying = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabling")]
		disabling = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error")]
		error = 4,
	}
	
	/// <summary>
	/// Returns the destination, format and type of the logs. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogDeliveryConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LogType LogType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DestinationType DestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DestinationDetails DestinationDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogFormat LogFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogDeliveryConfigurationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ModifyCacheCluster</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyCacheClusterMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumCacheNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheNodeIdsToRemove { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AZMode AZMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NewAvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheSecurityGroupNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationTopicStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplyImmediately { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnapshotRetentionLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthTokenUpdateStrategyType AuthTokenUpdateStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LogDeliveryConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpDiscovery IpDiscovery { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ModifyCacheParameterGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyCacheParameterGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ParameterNameValues { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ModifyCacheSubnetGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyCacheSubnetGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheSubnetGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyGlobalReplicationGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ApplyImmediately { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutomaticFailoverEnabled { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ModifyReplicationGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyReplicationGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshottingClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutomaticFailoverEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheSecurityGroupNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationTopicStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplyImmediately { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnapshotRetentionLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthTokenUpdateStrategyType AuthTokenUpdateStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserGroupIdsToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserGroupIdsToRemove { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoveUserGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LogDeliveryConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpDiscovery IpDiscovery { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TransitEncryptionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransitEncryptionMode TransitEncryptionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterMode ClusterMode { get; set; }
	}
	
	/// <summary>
	/// Represents the input for a <code>ModifyReplicationGroupShardConfiguration</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyReplicationGroupShardConfigurationMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int NodeGroupCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ApplyImmediately { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReshardingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NodeGroupsToRemove { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NodeGroupsToRetain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyUserGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserIdsToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserIdsToRemove { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyUserMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccessString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppendAccessString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Passwords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NoPasswordRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationMode AuthenticationMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MultiAZStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabled")]
		enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 1,
	}
	
	/// <summary>
	/// Represents a collection of cache nodes in a replication group. One node in the node group is the read/write primary node. All the other nodes are read-only Replica nodes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Endpoint PrimaryEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Endpoint ReaderEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Slots { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NodeGroupMembers { get; set; }
	}
	
	/// <summary>
	/// Represents a single node within a node group (shard).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeGroupMember
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Endpoint ReadEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredOutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentRole { get; set; }
	}
	
	/// <summary>
	/// The status of the service update on the node group member 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeGroupMemberUpdateStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NodeUpdateStatus NodeUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NodeDeletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NodeUpdateStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NodeUpdateEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NodeUpdateInitiatedBy NodeUpdateInitiatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NodeUpdateInitiatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NodeUpdateStatusModifiedDate { get; set; }
	}
	
	/// <summary>
	/// The status of the service update on the node group 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeGroupUpdateStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NodeGroupMemberUpdateStatus { get; set; }
	}
	
	/// <summary>
	/// Represents an individual cache node in a snapshot of a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeSnapshot
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NodeGroupConfiguration NodeGroupConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CacheNodeCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SnapshotCreateTime { get; set; }
	}
	
	/// <summary>
	/// Describes an individual setting that controls some aspect of ElastiCache behavior.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Parameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllowedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsModifiable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinimumEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChangeType ChangeType { get; set; }
	}
	
	/// <summary>
	/// Update action that has been processed for the corresponding apply/stop request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProcessedUpdateAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUpdateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateActionStatus UpdateActionStatus { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>PurchaseReservedCacheNodesOffering</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseReservedCacheNodesOfferingMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservedCacheNodesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedCacheNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CacheNodeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RebalanceSlotsInGlobalReplicationGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GlobalReplicationGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ApplyImmediately { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>RebootCacheCluster</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RebootCacheClusterMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheNodeIdsToReboot { get; set; }
	}
	
	/// <summary>
	/// Contains the specific price and frequency of a recurring charges for a reserved cache node, or for a reserved cache node offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecurringCharge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RecurringChargeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecurringChargeFrequency { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>RemoveTagsFromResource</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveTagsFromResourceMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	/// <summary>
	/// Describes all of the attributes of a reserved cache node offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReservedCacheNodesOffering
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedCacheNodesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RecurringCharges { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ResetCacheParameterGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResetCacheParameterGroupMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ResetAllParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ParameterNameValues { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>RevokeCacheSecurityGroupIngress</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokeCacheSecurityGroupIngressMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CacheSecurityGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupOwnerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceUpdateSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="critical")]
		critical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="important")]
		important = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medium")]
		medium = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="low")]
		low = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceUpdateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="security-update")]
		securityMinusupdate = 0,
	}
	
	/// <summary>
	/// An update that you can apply to your Redis clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUpdate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUpdateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ServiceUpdateReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ServiceUpdateEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceUpdateSeverity ServiceUpdateSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ServiceUpdateRecommendedApplyByDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceUpdateStatus ServiceUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUpdateDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceUpdateType ServiceUpdateType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoUpdateAfterRecommendedApplyByDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EstimatedUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SlaMet
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no")]
		no = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="n/a")]
		n_a = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartMigrationMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CustomerNodeEndpoint[] CustomerNodeEndpointList { get; set; }
	}
	
	/// <summary>
	/// The ID of the outpost subnet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubnetOutpost
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetOutpostArn { get; set; }
	}
	
	/// <summary>
	/// Represents the subnet associated with a cluster. This parameter refers to subnets defined in Amazon Virtual Private Cloud (Amazon VPC) and used with ElastiCache.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subnet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone SubnetAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetOutpost SubnetOutpost { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkType[] SupportedNetworkTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestFailoverMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NodeGroupId { get; set; }
	}
	
	/// <summary>
	/// Update action that has failed to be processed for the corresponding apply/stop request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnprocessedUpdateAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUpdateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// The status of the service update for a specific replication group
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUpdateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ServiceUpdateReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceUpdateSeverity ServiceUpdateSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceUpdateStatus ServiceUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ServiceUpdateRecommendedApplyByDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceUpdateType ServiceUpdateType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdateActionAvailableDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateActionStatus UpdateActionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodesUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdateActionStatusModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SlaMet SlaMet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NodeGroupUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CacheNodeUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EstimatedUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html">Resource-level permissions</a>.</p> <p> For example, you can use cost-allocation tags to your ElastiCache resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
		/// GET_AddTagsToResource #Action=AddTagsToResource
		/// </summary>
		/// <param name="ResourceName"><p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Service Namespaces</a>.</p></param>
		/// <param name="Tags">A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</param>
		/// <returns>Success</returns>
		public async Task GET_AddTagsToResourceAsync(string ResourceName, string[] Tags, GET_AddTagsToResourceAction Action, GET_AddTagsToResourceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AddTagsToResource?ResourceName=" + (ResourceName==null? "" : System.Uri.EscapeDataString(ResourceName))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
		/// GET_AuthorizeCacheSecurityGroupIngress #Action=AuthorizeCacheSecurityGroupIngress
		/// </summary>
		/// <param name="CacheSecurityGroupName">The cache security group that allows network ingress.</param>
		/// <param name="EC2SecurityGroupName">The Amazon EC2 security group to be authorized for ingress to the cache security group.</param>
		/// <param name="EC2SecurityGroupOwnerId">The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter.</param>
		/// <returns>Success</returns>
		public async Task GET_AuthorizeCacheSecurityGroupIngressAsync(string CacheSecurityGroupName, string EC2SecurityGroupName, string EC2SecurityGroupOwnerId, GET_AuthorizeCacheSecurityGroupIngressAction Action, GET_AuthorizeCacheSecurityGroupIngressVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AuthorizeCacheSecurityGroupIngress?CacheSecurityGroupName=" + (CacheSecurityGroupName==null? "" : System.Uri.EscapeDataString(CacheSecurityGroupName))+"&EC2SecurityGroupName=" + (EC2SecurityGroupName==null? "" : System.Uri.EscapeDataString(EC2SecurityGroupName))+"&EC2SecurityGroupOwnerId=" + (EC2SecurityGroupOwnerId==null? "" : System.Uri.EscapeDataString(EC2SecurityGroupOwnerId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
		/// GET_BatchApplyUpdateAction #Action=BatchApplyUpdateAction
		/// </summary>
		/// <param name="ReplicationGroupIds">The replication group IDs
		/// Maximum items: 20
		// </param>
		/// <param name="CacheClusterIds">The cache cluster IDs
		/// Maximum items: 20
		// </param>
		/// <param name="ServiceUpdateName">The unique ID of the service update</param>
		/// <returns>Success</returns>
		public async Task GET_BatchApplyUpdateActionAsync(string[] ReplicationGroupIds, string[] CacheClusterIds, string ServiceUpdateName, GET_BatchApplyUpdateActionAction Action, GET_BatchApplyUpdateActionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=BatchApplyUpdateAction?"+string.Join("&", ReplicationGroupIds.Select(z => $"ReplicationGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", CacheClusterIds.Select(z => $"CacheClusterIds={System.Uri.EscapeDataString(z.ToString())}"))+"&ServiceUpdateName=" + (ServiceUpdateName==null? "" : System.Uri.EscapeDataString(ServiceUpdateName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
		/// GET_BatchStopUpdateAction #Action=BatchStopUpdateAction
		/// </summary>
		/// <param name="ReplicationGroupIds">The replication group IDs
		/// Maximum items: 20
		// </param>
		/// <param name="CacheClusterIds">The cache cluster IDs
		/// Maximum items: 20
		// </param>
		/// <param name="ServiceUpdateName">The unique ID of the service update</param>
		/// <returns>Success</returns>
		public async Task GET_BatchStopUpdateActionAsync(string[] ReplicationGroupIds, string[] CacheClusterIds, string ServiceUpdateName, GET_BatchStopUpdateActionAction Action, GET_BatchStopUpdateActionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=BatchStopUpdateAction?"+string.Join("&", ReplicationGroupIds.Select(z => $"ReplicationGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", CacheClusterIds.Select(z => $"CacheClusterIds={System.Uri.EscapeDataString(z.ToString())}"))+"&ServiceUpdateName=" + (ServiceUpdateName==null? "" : System.Uri.EscapeDataString(ServiceUpdateName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Complete the migration of data.
		/// GET_CompleteMigration #Action=CompleteMigration
		/// </summary>
		/// <param name="ReplicationGroupId">The ID of the replication group to which data is being migrated.</param>
		/// <param name="Force">Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.</param>
		/// <returns>Success</returns>
		public async Task GET_CompleteMigrationAsync(string ReplicationGroupId, bool Force, GET_CompleteMigrationAction Action, GET_CompleteMigrationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CompleteMigration?ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&Force="+Force+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
		/// GET_CopySnapshot #Action=CopySnapshot
		/// </summary>
		/// <param name="SourceSnapshotName">The name of an existing snapshot from which to make a copy.</param>
		/// <param name="TargetSnapshotName">A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.</param>
		/// <param name="TargetBucket"><p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p></param>
		/// <param name="KmsKeyId">The ID of the KMS key used to encrypt the target snapshot.</param>
		/// <param name="Tags">A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</param>
		/// <returns>Success</returns>
		public async Task GET_CopySnapshotAsync(string SourceSnapshotName, string TargetSnapshotName, string TargetBucket, string KmsKeyId, string[] Tags, GET_CopySnapshotAction Action, GET_CopySnapshotVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CopySnapshot?SourceSnapshotName=" + (SourceSnapshotName==null? "" : System.Uri.EscapeDataString(SourceSnapshotName))+"&TargetSnapshotName=" + (TargetSnapshotName==null? "" : System.Uri.EscapeDataString(TargetSnapshotName))+"&TargetBucket=" + (TargetBucket==null? "" : System.Uri.EscapeDataString(TargetBucket))+"&KmsKeyId=" + (KmsKeyId==null? "" : System.Uri.EscapeDataString(KmsKeyId))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
		/// GET_CreateCacheCluster #Action=CreateCacheCluster
		/// </summary>
		/// <param name="CacheClusterId"><p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></param>
		/// <param name="ReplicationGroupId"><p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note></param>
		/// <param name="AZMode"><p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p></param>
		/// <param name="PreferredAvailabilityZone"><p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p></param>
		/// <param name="PreferredAvailabilityZones"><p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p></param>
		/// <param name="NumCacheNodes"><p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.</p> <p>If you need more than 40 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p></param>
		/// <param name="CacheNodeType"><p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): <code>cache.m6g.large</code>, <code>cache.m6g.xlarge</code>, <code>cache.m6g.2xlarge</code>, <code>cache.m6g.4xlarge</code>, <code>cache.m6g.8xlarge</code>, <code>cache.m6g.12xlarge</code>, <code>cache.m6g.16xlarge</code> </p> <note> <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a> </p> </note> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T4g node types</b> (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): <code>cache.t4g.micro</code>, <code>cache.t4g.small</code>, <code>cache.t4g.medium</code> </p> <p> <b>T3 node types:</b> <code>cache.t3.micro</code>, <code>cache.t3.small</code>, <code>cache.t3.medium</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p> <p> <code>cache.r6g.large</code>, <code>cache.r6g.xlarge</code>, <code>cache.r6g.2xlarge</code>, <code>cache.r6g.4xlarge</code>, <code>cache.r6g.8xlarge</code>, <code>cache.r6g.12xlarge</code>, <code>cache.r6g.16xlarge</code> </p> <note> <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a> </p> </note> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul></param>
		/// <param name="Engine"><p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p></param>
		/// <param name="EngineVersion"><p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p></param>
		/// <param name="CacheParameterGroupName">The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.</param>
		/// <param name="CacheSubnetGroupName"><p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important></param>
		/// <param name="CacheSecurityGroupNames"><p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p></param>
		/// <param name="SecurityGroupIds"><p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p></param>
		/// <param name="Tags">A list of tags to be added to this resource.</param>
		/// <param name="SnapshotArns"><p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p></param>
		/// <param name="SnapshotName"><p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note></param>
		/// <param name="PreferredMaintenanceWindow">Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. </param>
		/// <param name="Port">The port number on which each of the cache nodes accepts connections.</param>
		/// <param name="NotificationTopicArn"><p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note></param>
		/// <param name="AutoMinorVersionUpgrade"> If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.  </param>
		/// <param name="SnapshotRetentionLimit"><p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p></param>
		/// <param name="SnapshotWindow"><p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note></param>
		/// <param name="AuthToken"><p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p></param>
		/// <param name="OutpostMode">Specifies whether the nodes in the cluster are created in a single outpost or across multiple outposts.</param>
		/// <param name="PreferredOutpostArn">The outpost ARN in which the cache cluster is created.</param>
		/// <param name="PreferredOutpostArns">The outpost ARNs in which the cache cluster is created.</param>
		/// <param name="LogDeliveryConfigurations">Specifies the destination, format and type of the logs. </param>
		/// <param name="TransitEncryptionEnabled">A flag that enables in-transit encryption when set to true.</param>
		/// <param name="NetworkType">Must be either <code>ipv4</code> | <code>ipv6</code> | <code>dual_stack</code>. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the <a href="http://aws.amazon.com/ec2/nitro/">Nitro system</a>. </param>
		/// <param name="IpDiscovery">The network type you choose when modifying a cluster, either <code>ipv4</code> | <code>ipv6</code>. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the <a href="http://aws.amazon.com/ec2/nitro/">Nitro system</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateCacheClusterAsync(
					string CacheClusterId, 
					string ReplicationGroupId, 
					GET_CreateCacheClusterAZMode AZMode, 
					string PreferredAvailabilityZone, 
					string[] PreferredAvailabilityZones, 
					int NumCacheNodes, 
					string CacheNodeType, 
					string Engine, 
					string EngineVersion, 
					string CacheParameterGroupName, 
					string CacheSubnetGroupName, 
					string[] CacheSecurityGroupNames, 
					string[] SecurityGroupIds, 
					string[] Tags, 
					string[] SnapshotArns, 
					string SnapshotName, 
					string PreferredMaintenanceWindow, 
					int Port, 
					string NotificationTopicArn, 
					bool AutoMinorVersionUpgrade, 
					int SnapshotRetentionLimit, 
					string SnapshotWindow, 
					string AuthToken, 
					GET_CreateCacheClusterOutpostMode OutpostMode, 
					string PreferredOutpostArn, 
					string[] PreferredOutpostArns, 
					string[] LogDeliveryConfigurations, 
					bool TransitEncryptionEnabled, 
					NetworkType NetworkType, 
					IpDiscovery IpDiscovery, 
					GET_CreateCacheClusterAction Action, 
					GET_CreateCacheClusterVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateCacheCluster?CacheClusterId=" + (CacheClusterId==null? "" : System.Uri.EscapeDataString(CacheClusterId))+"&ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&AZMode=" + AZMode+"&PreferredAvailabilityZone=" + (PreferredAvailabilityZone==null? "" : System.Uri.EscapeDataString(PreferredAvailabilityZone))+"&"+string.Join("&", PreferredAvailabilityZones.Select(z => $"PreferredAvailabilityZones={System.Uri.EscapeDataString(z.ToString())}"))+"&NumCacheNodes="+NumCacheNodes+"&CacheNodeType=" + (CacheNodeType==null? "" : System.Uri.EscapeDataString(CacheNodeType))+"&Engine=" + (Engine==null? "" : System.Uri.EscapeDataString(Engine))+"&EngineVersion=" + (EngineVersion==null? "" : System.Uri.EscapeDataString(EngineVersion))+"&CacheParameterGroupName=" + (CacheParameterGroupName==null? "" : System.Uri.EscapeDataString(CacheParameterGroupName))+"&CacheSubnetGroupName=" + (CacheSubnetGroupName==null? "" : System.Uri.EscapeDataString(CacheSubnetGroupName))+"&"+string.Join("&", CacheSecurityGroupNames.Select(z => $"CacheSecurityGroupNames={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", SecurityGroupIds.Select(z => $"SecurityGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", SnapshotArns.Select(z => $"SnapshotArns={System.Uri.EscapeDataString(z.ToString())}"))+"&SnapshotName=" + (SnapshotName==null? "" : System.Uri.EscapeDataString(SnapshotName))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : System.Uri.EscapeDataString(PreferredMaintenanceWindow))+"&Port="+Port+"&NotificationTopicArn=" + (NotificationTopicArn==null? "" : System.Uri.EscapeDataString(NotificationTopicArn))+"&AutoMinorVersionUpgrade="+AutoMinorVersionUpgrade+"&SnapshotRetentionLimit="+SnapshotRetentionLimit+"&SnapshotWindow=" + (SnapshotWindow==null? "" : System.Uri.EscapeDataString(SnapshotWindow))+"&AuthToken=" + (AuthToken==null? "" : System.Uri.EscapeDataString(AuthToken))+"&OutpostMode=" + OutpostMode+"&PreferredOutpostArn=" + (PreferredOutpostArn==null? "" : System.Uri.EscapeDataString(PreferredOutpostArn))+"&"+string.Join("&", PreferredOutpostArns.Select(z => $"PreferredOutpostArns={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", LogDeliveryConfigurations.Select(z => $"LogDeliveryConfigurations={System.Uri.EscapeDataString(z.ToString())}"))+"&TransitEncryptionEnabled="+TransitEncryptionEnabled+"&NetworkType=" + NetworkType+"&IpDiscovery=" + IpDiscovery+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
		/// GET_CreateCacheParameterGroup #Action=CreateCacheParameterGroup
		/// </summary>
		/// <param name="CacheParameterGroupName">A user-specified name for the cache parameter group.</param>
		/// <param name="CacheParameterGroupFamily"><p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>memcached1.6</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | <code>redis6.x</code> | <code>redis7</code> </p></param>
		/// <param name="Description">A user-specified description for the cache parameter group.</param>
		/// <param name="Tags">A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateCacheParameterGroupAsync(string CacheParameterGroupName, string CacheParameterGroupFamily, string Description, string[] Tags, GET_CreateCacheParameterGroupAction Action, GET_CreateCacheParameterGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateCacheParameterGroup?CacheParameterGroupName=" + (CacheParameterGroupName==null? "" : System.Uri.EscapeDataString(CacheParameterGroupName))+"&CacheParameterGroupFamily=" + (CacheParameterGroupFamily==null? "" : System.Uri.EscapeDataString(CacheParameterGroupFamily))+"&Description=" + (Description==null? "" : System.Uri.EscapeDataString(Description))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
		/// GET_CreateCacheSecurityGroup #Action=CreateCacheSecurityGroup
		/// </summary>
		/// <param name="CacheSecurityGroupName"><p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p></param>
		/// <param name="Description">A description for the cache security group.</param>
		/// <param name="Tags">A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateCacheSecurityGroupAsync(string CacheSecurityGroupName, string Description, string[] Tags, GET_CreateCacheSecurityGroupAction Action, GET_CreateCacheSecurityGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateCacheSecurityGroup?CacheSecurityGroupName=" + (CacheSecurityGroupName==null? "" : System.Uri.EscapeDataString(CacheSecurityGroupName))+"&Description=" + (Description==null? "" : System.Uri.EscapeDataString(Description))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
		/// GET_CreateCacheSubnetGroup #Action=CreateCacheSubnetGroup
		/// </summary>
		/// <param name="CacheSubnetGroupName"><p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p></param>
		/// <param name="CacheSubnetGroupDescription">A description for the cache subnet group.</param>
		/// <param name="SubnetIds">A list of VPC subnet IDs for the cache subnet group.</param>
		/// <param name="Tags">A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateCacheSubnetGroupAsync(string CacheSubnetGroupName, string CacheSubnetGroupDescription, string[] SubnetIds, string[] Tags, GET_CreateCacheSubnetGroupAction Action, GET_CreateCacheSubnetGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateCacheSubnetGroup?CacheSubnetGroupName=" + (CacheSubnetGroupName==null? "" : System.Uri.EscapeDataString(CacheSubnetGroupName))+"&CacheSubnetGroupDescription=" + (CacheSubnetGroupDescription==null? "" : System.Uri.EscapeDataString(CacheSubnetGroupDescription))+"&"+string.Join("&", SubnetIds.Select(z => $"SubnetIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Global Datastore for Redis offers fully managed, fast, reliable and secure cross-region replication. Using Global Datastore for Redis, you can create cross-region read replica clusters for ElastiCache for Redis to enable low-latency reads and disaster recovery across regions. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html">Replication Across Regions Using Global Datastore</a>. </p> <ul> <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> is the name of the Global datastore.</p> </li> <li> <p>The <b>PrimaryReplicationGroupId</b> represents the name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.</p> </li> </ul>
		/// GET_CreateGlobalReplicationGroup #Action=CreateGlobalReplicationGroup
		/// </summary>
		/// <param name="GlobalReplicationGroupIdSuffix"><p>The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix to the Global datastore ID when it is created. Each Amazon Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with "dsdfu" along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions. </p> <p>For a full list of Amazon Regions and their respective Global datastore iD prefixes, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastores-CLI.html">Using the Amazon CLI with Global datastores </a>.</p></param>
		/// <param name="GlobalReplicationGroupDescription">Provides details of the Global datastore</param>
		/// <param name="PrimaryReplicationGroupId">The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateGlobalReplicationGroupAsync(string GlobalReplicationGroupIdSuffix, string GlobalReplicationGroupDescription, string PrimaryReplicationGroupId, GET_CreateGlobalReplicationGroupAction Action, GET_CreateGlobalReplicationGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateGlobalReplicationGroup?GlobalReplicationGroupIdSuffix=" + (GlobalReplicationGroupIdSuffix==null? "" : System.Uri.EscapeDataString(GlobalReplicationGroupIdSuffix))+"&GlobalReplicationGroupDescription=" + (GlobalReplicationGroupDescription==null? "" : System.Uri.EscapeDataString(GlobalReplicationGroupDescription))+"&PrimaryReplicationGroupId=" + (PrimaryReplicationGroupId==null? "" : System.Uri.EscapeDataString(PrimaryReplicationGroupId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>This API can be used to create a standalone regional replication group or a secondary replication group associated with a Global datastore.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis cluster-mode enabled cluster is comprised of from 1 to 90 shards (API/CLI: node groups). Each shard has a primary node and up to 5 read-only replica nodes. The configuration can range from 90 shards and 0 replicas to 15 shards and 5 replicas, which is the maximum number or replicas allowed. </p> <p>The node or shard limit can be increased to a maximum of 500 per cluster if the Redis engine version is 5.0.6 or higher. For example, you can choose to configure a 500 node cluster that ranges between 83 shards (one primary and 5 replicas per shard) and 500 shards (single primary and no replicas). Make sure there are enough available IP addresses to accommodate the increase. Common pitfalls include the subnets in the subnet group have too small a CIDR range or the subnets are shared and heavily used by other clusters. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.Creating.html">Creating a Subnet Group</a>. For versions below 5.0.6, the limit is 250 per cluster.</p> <p>To request a limit increase, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">Amazon Service Limits</a> and choose the limit type <b>Nodes per cluster per instance type</b>. </p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. If you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' scaling. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Scaling.html">Scaling ElastiCache for Redis Clusters</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
		/// GET_CreateReplicationGroup #Action=CreateReplicationGroup
		/// </summary>
		/// <param name="ReplicationGroupId"><p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></param>
		/// <param name="ReplicationGroupDescription">A user-created description for the replication group.</param>
		/// <param name="GlobalReplicationGroupId">The name of the Global datastore</param>
		/// <param name="PrimaryClusterId"><p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p></param>
		/// <param name="AutomaticFailoverEnabled"><p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p></param>
		/// <param name="MultiAZEnabled">A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html">Minimizing Downtime: Multi-AZ</a>.</param>
		/// <param name="NumCacheClusters"><p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p></param>
		/// <param name="PreferredCacheClusterAZs"><p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p></param>
		/// <param name="NumNodeGroups"><p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p></param>
		/// <param name="ReplicasPerNodeGroup">An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.</param>
		/// <param name="NodeGroupConfiguration"><p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, it is required when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file. You must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p></param>
		/// <param name="CacheNodeType"><p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): <code>cache.m6g.large</code>, <code>cache.m6g.xlarge</code>, <code>cache.m6g.2xlarge</code>, <code>cache.m6g.4xlarge</code>, <code>cache.m6g.8xlarge</code>, <code>cache.m6g.12xlarge</code>, <code>cache.m6g.16xlarge</code> </p> <note> <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a> </p> </note> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T4g node types</b> (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): <code>cache.t4g.micro</code>, <code>cache.t4g.small</code>, <code>cache.t4g.medium</code> </p> <p> <b>T3 node types:</b> <code>cache.t3.micro</code>, <code>cache.t3.small</code>, <code>cache.t3.medium</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p> <p> <code>cache.r6g.large</code>, <code>cache.r6g.xlarge</code>, <code>cache.r6g.2xlarge</code>, <code>cache.r6g.4xlarge</code>, <code>cache.r6g.8xlarge</code>, <code>cache.r6g.12xlarge</code>, <code>cache.r6g.16xlarge</code> </p> <note> <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a> </p> </note> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul></param>
		/// <param name="Engine">The name of the cache engine to be used for the clusters in this replication group. The value must be set to <code>Redis</code>.</param>
		/// <param name="EngineVersion"><p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p></param>
		/// <param name="CacheParameterGroupName"><p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul></param>
		/// <param name="CacheSubnetGroupName"><p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important></param>
		/// <param name="CacheSecurityGroupNames">A list of cache security group names to associate with this replication group.</param>
		/// <param name="SecurityGroupIds"><p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p></param>
		/// <param name="Tags">A list of tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>. Tags on replication groups will be replicated to all nodes.</param>
		/// <param name="SnapshotArns"><p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p></param>
		/// <param name="SnapshotName">The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.</param>
		/// <param name="PreferredMaintenanceWindow"><p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p></param>
		/// <param name="Port">The port number on which each member of the replication group accepts connections.</param>
		/// <param name="NotificationTopicArn"><p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note></param>
		/// <param name="AutoMinorVersionUpgrade"> If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.  </param>
		/// <param name="SnapshotRetentionLimit"><p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p></param>
		/// <param name="SnapshotWindow"><p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p></param>
		/// <param name="AuthToken"><p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p></param>
		/// <param name="TransitEncryptionEnabled"><p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important></param>
		/// <param name="AtRestEncryptionEnabled"><p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p></param>
		/// <param name="KmsKeyId">The ID of the KMS key used to encrypt the disk in the cluster.</param>
		/// <param name="UserGroupIds">The user group to associate with the replication group.
		/// Minimum items: 1
		// </param>
		/// <param name="LogDeliveryConfigurations">Specifies the destination, format and type of the logs.</param>
		/// <param name="DataTieringEnabled">Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html">Data tiering</a>.</param>
		/// <param name="NetworkType">Must be either <code>ipv4</code> | <code>ipv6</code> | <code>dual_stack</code>. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the <a href="http://aws.amazon.com/ec2/nitro/">Nitro system</a>.</param>
		/// <param name="IpDiscovery">The network type you choose when creating a replication group, either <code>ipv4</code> | <code>ipv6</code>. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the <a href="http://aws.amazon.com/ec2/nitro/">Nitro system</a>.</param>
		/// <param name="TransitEncryptionMode"><p>A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.</p> <p>When setting <code>TransitEncryptionEnabled</code> to <code>true</code>, you can set your <code>TransitEncryptionMode</code> to <code>preferred</code> in the same request, to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can modify the value to <code>required</code> to allow encrypted connections only.</p> <p>Setting <code>TransitEncryptionMode</code> to <code>required</code> is a two-step process that requires you to first set the <code>TransitEncryptionMode</code> to <code>preferred</code>, after that you can set <code>TransitEncryptionMode</code> to <code>required</code>.</p> <p>This process will not trigger the replacement of the replication group.</p></param>
		/// <param name="ClusterMode">Enabled or Disabled. To modify cluster mode from Disabled to Enabled, you must first set the cluster mode to Compatible. Compatible mode allows your Redis clients to connect using both cluster mode enabled and cluster mode disabled. After you migrate all Redis clients to use cluster mode enabled, you can then complete cluster mode configuration and set the cluster mode to Enabled.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateReplicationGroupAsync(
					string ReplicationGroupId, 
					string ReplicationGroupDescription, 
					string GlobalReplicationGroupId, 
					string PrimaryClusterId, 
					bool AutomaticFailoverEnabled, 
					bool MultiAZEnabled, 
					int NumCacheClusters, 
					string[] PreferredCacheClusterAZs, 
					int NumNodeGroups, 
					int ReplicasPerNodeGroup, 
					string[] NodeGroupConfiguration, 
					string CacheNodeType, 
					string Engine, 
					string EngineVersion, 
					string CacheParameterGroupName, 
					string CacheSubnetGroupName, 
					string[] CacheSecurityGroupNames, 
					string[] SecurityGroupIds, 
					string[] Tags, 
					string[] SnapshotArns, 
					string SnapshotName, 
					string PreferredMaintenanceWindow, 
					int Port, 
					string NotificationTopicArn, 
					bool AutoMinorVersionUpgrade, 
					int SnapshotRetentionLimit, 
					string SnapshotWindow, 
					string AuthToken, 
					bool TransitEncryptionEnabled, 
					bool AtRestEncryptionEnabled, 
					string KmsKeyId, 
					string[] UserGroupIds, 
					string[] LogDeliveryConfigurations, 
					bool DataTieringEnabled, 
					NetworkType NetworkType, 
					IpDiscovery IpDiscovery, 
					TransitEncryptionMode TransitEncryptionMode, 
					ClusterMode ClusterMode, 
					GET_CreateReplicationGroupAction Action, 
					GET_CreateReplicationGroupVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateReplicationGroup?ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&ReplicationGroupDescription=" + (ReplicationGroupDescription==null? "" : System.Uri.EscapeDataString(ReplicationGroupDescription))+"&GlobalReplicationGroupId=" + (GlobalReplicationGroupId==null? "" : System.Uri.EscapeDataString(GlobalReplicationGroupId))+"&PrimaryClusterId=" + (PrimaryClusterId==null? "" : System.Uri.EscapeDataString(PrimaryClusterId))+"&AutomaticFailoverEnabled="+AutomaticFailoverEnabled+"&MultiAZEnabled="+MultiAZEnabled+"&NumCacheClusters="+NumCacheClusters+"&"+string.Join("&", PreferredCacheClusterAZs.Select(z => $"PreferredCacheClusterAZs={System.Uri.EscapeDataString(z.ToString())}"))+"&NumNodeGroups="+NumNodeGroups+"&ReplicasPerNodeGroup="+ReplicasPerNodeGroup+"&"+string.Join("&", NodeGroupConfiguration.Select(z => $"NodeGroupConfiguration={System.Uri.EscapeDataString(z.ToString())}"))+"&CacheNodeType=" + (CacheNodeType==null? "" : System.Uri.EscapeDataString(CacheNodeType))+"&Engine=" + (Engine==null? "" : System.Uri.EscapeDataString(Engine))+"&EngineVersion=" + (EngineVersion==null? "" : System.Uri.EscapeDataString(EngineVersion))+"&CacheParameterGroupName=" + (CacheParameterGroupName==null? "" : System.Uri.EscapeDataString(CacheParameterGroupName))+"&CacheSubnetGroupName=" + (CacheSubnetGroupName==null? "" : System.Uri.EscapeDataString(CacheSubnetGroupName))+"&"+string.Join("&", CacheSecurityGroupNames.Select(z => $"CacheSecurityGroupNames={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", SecurityGroupIds.Select(z => $"SecurityGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", SnapshotArns.Select(z => $"SnapshotArns={System.Uri.EscapeDataString(z.ToString())}"))+"&SnapshotName=" + (SnapshotName==null? "" : System.Uri.EscapeDataString(SnapshotName))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : System.Uri.EscapeDataString(PreferredMaintenanceWindow))+"&Port="+Port+"&NotificationTopicArn=" + (NotificationTopicArn==null? "" : System.Uri.EscapeDataString(NotificationTopicArn))+"&AutoMinorVersionUpgrade="+AutoMinorVersionUpgrade+"&SnapshotRetentionLimit="+SnapshotRetentionLimit+"&SnapshotWindow=" + (SnapshotWindow==null? "" : System.Uri.EscapeDataString(SnapshotWindow))+"&AuthToken=" + (AuthToken==null? "" : System.Uri.EscapeDataString(AuthToken))+"&TransitEncryptionEnabled="+TransitEncryptionEnabled+"&AtRestEncryptionEnabled="+AtRestEncryptionEnabled+"&KmsKeyId=" + (KmsKeyId==null? "" : System.Uri.EscapeDataString(KmsKeyId))+"&"+string.Join("&", UserGroupIds.Select(z => $"UserGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", LogDeliveryConfigurations.Select(z => $"LogDeliveryConfigurations={System.Uri.EscapeDataString(z.ToString())}"))+"&DataTieringEnabled="+DataTieringEnabled+"&NetworkType=" + NetworkType+"&IpDiscovery=" + IpDiscovery+"&TransitEncryptionMode=" + TransitEncryptionMode+"&ClusterMode=" + ClusterMode+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
		/// GET_CreateSnapshot #Action=CreateSnapshot
		/// </summary>
		/// <param name="ReplicationGroupId">The identifier of an existing replication group. The snapshot is created from this replication group.</param>
		/// <param name="CacheClusterId">The identifier of an existing cluster. The snapshot is created from this cluster.</param>
		/// <param name="SnapshotName">A name for the snapshot being created.</param>
		/// <param name="KmsKeyId">The ID of the KMS key used to encrypt the snapshot.</param>
		/// <param name="Tags">A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateSnapshotAsync(string ReplicationGroupId, string CacheClusterId, string SnapshotName, string KmsKeyId, string[] Tags, GET_CreateSnapshotAction Action, GET_CreateSnapshotVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSnapshot?ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&CacheClusterId=" + (CacheClusterId==null? "" : System.Uri.EscapeDataString(CacheClusterId))+"&SnapshotName=" + (SnapshotName==null? "" : System.Uri.EscapeDataString(SnapshotName))+"&KmsKeyId=" + (KmsKeyId==null? "" : System.Uri.EscapeDataString(KmsKeyId))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// For Redis engine version 6.0 onwards: Creates a Redis user. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html">Using Role Based Access Control (RBAC)</a>.
		/// GET_CreateUser #Action=CreateUser
		/// </summary>
		/// <param name="UserId">The ID of the user.
		/// Min length: 1
		// </param>
		/// <param name="UserName">The username of the user.
		/// Min length: 1
		// </param>
		/// <param name="Engine">The current supported value is Redis. </param>
		/// <param name="Passwords">Passwords used for this user. You can create up to two passwords for each user.
		/// Minimum items: 1
		// </param>
		/// <param name="AccessString">Access permissions string used for this user.</param>
		/// <param name="NoPasswordRequired">Indicates a password is not required for this user.</param>
		/// <param name="Tags">A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</param>
		/// <param name="AuthenticationMode">Specifies how to authenticate the user.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateUserAsync(string UserId, string UserName, string Engine, string[] Passwords, string AccessString, bool NoPasswordRequired, string[] Tags, GET_CreateUserAuthenticationMode AuthenticationMode, GET_CreateUserAction Action, GET_CreateUserVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateUser?UserId=" + (UserId==null? "" : System.Uri.EscapeDataString(UserId))+"&UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Engine=" + (Engine==null? "" : System.Uri.EscapeDataString(Engine))+"&"+string.Join("&", Passwords.Select(z => $"Passwords={System.Uri.EscapeDataString(z.ToString())}"))+"&AccessString=" + (AccessString==null? "" : System.Uri.EscapeDataString(AccessString))+"&NoPasswordRequired="+NoPasswordRequired+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&AuthenticationMode=" + AuthenticationMode+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// For Redis engine version 6.0 onwards: Creates a Redis user group. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html">Using Role Based Access Control (RBAC)</a>
		/// GET_CreateUserGroup #Action=CreateUserGroup
		/// </summary>
		/// <param name="UserGroupId">The ID of the user group.</param>
		/// <param name="Engine">The current supported value is Redis. </param>
		/// <param name="UserIds">The list of user IDs that belong to the user group.
		/// Minimum items: 1
		// </param>
		/// <param name="Tags">A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateUserGroupAsync(string UserGroupId, string Engine, string[] UserIds, string[] Tags, GET_CreateUserGroupAction Action, GET_CreateUserGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateUserGroup?UserGroupId=" + (UserGroupId==null? "" : System.Uri.EscapeDataString(UserGroupId))+"&Engine=" + (Engine==null? "" : System.Uri.EscapeDataString(Engine))+"&"+string.Join("&", UserIds.Select(z => $"UserIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Decreases the number of node groups in a Global datastore
		/// GET_DecreaseNodeGroupsInGlobalReplicationGroup #Action=DecreaseNodeGroupsInGlobalReplicationGroup
		/// </summary>
		/// <param name="GlobalReplicationGroupId">The name of the Global datastore</param>
		/// <param name="NodeGroupCount">The number of node groups (shards) that results from the modification of the shard configuration</param>
		/// <param name="GlobalNodeGroupsToRemove">If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRemove is a list of NodeGroupIds to remove from the cluster. ElastiCache for Redis will attempt to remove all node groups listed by GlobalNodeGroupsToRemove from the cluster. </param>
		/// <param name="GlobalNodeGroupsToRetain">If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRetain is a list of NodeGroupIds to retain from the cluster. ElastiCache for Redis will attempt to retain all node groups listed by GlobalNodeGroupsToRetain from the cluster. </param>
		/// <param name="ApplyImmediately">Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is true. </param>
		/// <returns>Success</returns>
		public async Task GET_DecreaseNodeGroupsInGlobalReplicationGroupAsync(string GlobalReplicationGroupId, int NodeGroupCount, string[] GlobalNodeGroupsToRemove, string[] GlobalNodeGroupsToRetain, bool ApplyImmediately, GET_DecreaseNodeGroupsInGlobalReplicationGroupAction Action, GET_DecreaseNodeGroupsInGlobalReplicationGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DecreaseNodeGroupsInGlobalReplicationGroup?GlobalReplicationGroupId=" + (GlobalReplicationGroupId==null? "" : System.Uri.EscapeDataString(GlobalReplicationGroupId))+"&NodeGroupCount="+NodeGroupCount+"&"+string.Join("&", GlobalNodeGroupsToRemove.Select(z => $"GlobalNodeGroupsToRemove={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", GlobalNodeGroupsToRetain.Select(z => $"GlobalNodeGroupsToRetain={System.Uri.EscapeDataString(z.ToString())}"))+"&ApplyImmediately="+ApplyImmediately+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Dynamically decreases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
		/// GET_DecreaseReplicaCount #Action=DecreaseReplicaCount
		/// </summary>
		/// <param name="ReplicationGroupId">The id of the replication group from which you want to remove replica nodes.</param>
		/// <param name="NewReplicaCount"><p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ is enabled: 1</p> </li> <li> <p>If Multi-AZ is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul></param>
		/// <param name="ReplicaConfiguration">A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.</param>
		/// <param name="ReplicasToRemove">A list of the node ids to remove from the replication group or node group (shard).</param>
		/// <param name="ApplyImmediately">If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.</param>
		/// <returns>Success</returns>
		public async Task GET_DecreaseReplicaCountAsync(string ReplicationGroupId, int NewReplicaCount, string[] ReplicaConfiguration, string[] ReplicasToRemove, bool ApplyImmediately, GET_DecreaseReplicaCountAction Action, GET_DecreaseReplicaCountVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DecreaseReplicaCount?ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&NewReplicaCount="+NewReplicaCount+"&"+string.Join("&", ReplicaConfiguration.Select(z => $"ReplicaConfiguration={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ReplicasToRemove.Select(z => $"ReplicasToRemove={System.Uri.EscapeDataString(z.ToString())}"))+"&ApplyImmediately="+ApplyImmediately+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>Redis (cluster mode disabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A cluster that is the primary node of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
		/// GET_DeleteCacheCluster #Action=DeleteCacheCluster
		/// </summary>
		/// <param name="CacheClusterId">The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.</param>
		/// <param name="FinalSnapshotIdentifier">The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteCacheClusterAsync(string CacheClusterId, string FinalSnapshotIdentifier, GET_DeleteCacheClusterAction Action, GET_DeleteCacheClusterVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteCacheCluster?CacheClusterId=" + (CacheClusterId==null? "" : System.Uri.EscapeDataString(CacheClusterId))+"&FinalSnapshotIdentifier=" + (FinalSnapshotIdentifier==null? "" : System.Uri.EscapeDataString(FinalSnapshotIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters. You cannot delete the default cache parameter groups in your account.
		/// GET_DeleteCacheParameterGroup #Action=DeleteCacheParameterGroup
		/// </summary>
		/// <param name="CacheParameterGroupName"><p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteCacheParameterGroupAsync(string CacheParameterGroupName, GET_DeleteCacheParameterGroupAction Action, GET_DeleteCacheParameterGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteCacheParameterGroup?CacheParameterGroupName=" + (CacheParameterGroupName==null? "" : System.Uri.EscapeDataString(CacheParameterGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
		/// GET_DeleteCacheSecurityGroup #Action=DeleteCacheSecurityGroup
		/// </summary>
		/// <param name="CacheSecurityGroupName"><p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteCacheSecurityGroupAsync(string CacheSecurityGroupName, GET_DeleteCacheSecurityGroupAction Action, GET_DeleteCacheSecurityGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteCacheSecurityGroup?CacheSecurityGroupName=" + (CacheSecurityGroupName==null? "" : System.Uri.EscapeDataString(CacheSecurityGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a default cache subnet group or one that is associated with any clusters.</p> </note>
		/// GET_DeleteCacheSubnetGroup #Action=DeleteCacheSubnetGroup
		/// </summary>
		/// <param name="CacheSubnetGroupName"><p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteCacheSubnetGroupAsync(string CacheSubnetGroupName, GET_DeleteCacheSubnetGroupAction Action, GET_DeleteCacheSubnetGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteCacheSubnetGroup?CacheSubnetGroupName=" + (CacheSubnetGroupName==null? "" : System.Uri.EscapeDataString(CacheSubnetGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deleting a Global datastore is a two-step process: </p> <ul> <li> <p>First, you must <a>DisassociateGlobalReplicationGroup</a> to remove the secondary clusters in the Global datastore.</p> </li> <li> <p>Once the Global datastore contains only the primary cluster, you can use the <code>DeleteGlobalReplicationGroup</code> API to delete the Global datastore while retainining the primary cluster using <code>RetainPrimaryReplicationGroup=true</code>.</p> </li> </ul> <p>Since the Global Datastore has only a primary cluster, you can delete the Global Datastore while retaining the primary by setting <code>RetainPrimaryReplicationGroup=true</code>. The primary cluster is never deleted when deleting a Global Datastore. It can only be deleted when it no longer is associated with any Global Datastore.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p>
		/// GET_DeleteGlobalReplicationGroup #Action=DeleteGlobalReplicationGroup
		/// </summary>
		/// <param name="GlobalReplicationGroupId">The name of the Global datastore</param>
		/// <param name="RetainPrimaryReplicationGroup">The primary replication group is retained as a standalone replication group. </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteGlobalReplicationGroupAsync(string GlobalReplicationGroupId, bool RetainPrimaryReplicationGroup, GET_DeleteGlobalReplicationGroupAction Action, GET_DeleteGlobalReplicationGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteGlobalReplicationGroup?GlobalReplicationGroupId=" + (GlobalReplicationGroupId==null? "" : System.Uri.EscapeDataString(GlobalReplicationGroupId))+"&RetainPrimaryReplicationGroup="+RetainPrimaryReplicationGroup+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
		/// GET_DeleteReplicationGroup #Action=DeleteReplicationGroup
		/// </summary>
		/// <param name="ReplicationGroupId">The identifier for the cluster to be deleted. This parameter is not case sensitive.</param>
		/// <param name="RetainPrimaryCluster">If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.</param>
		/// <param name="FinalSnapshotIdentifier">The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteReplicationGroupAsync(string ReplicationGroupId, bool RetainPrimaryCluster, string FinalSnapshotIdentifier, GET_DeleteReplicationGroupAction Action, GET_DeleteReplicationGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteReplicationGroup?ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&RetainPrimaryCluster="+RetainPrimaryCluster+"&FinalSnapshotIdentifier=" + (FinalSnapshotIdentifier==null? "" : System.Uri.EscapeDataString(FinalSnapshotIdentifier))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
		/// GET_DeleteSnapshot #Action=DeleteSnapshot
		/// </summary>
		/// <param name="SnapshotName">The name of the snapshot to be deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteSnapshotAsync(string SnapshotName, GET_DeleteSnapshotAction Action, GET_DeleteSnapshotVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSnapshot?SnapshotName=" + (SnapshotName==null? "" : System.Uri.EscapeDataString(SnapshotName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// For Redis engine version 6.0 onwards: Deletes a user. The user will be removed from all user groups and in turn removed from all replication groups. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html">Using Role Based Access Control (RBAC)</a>.
		/// GET_DeleteUser #Action=DeleteUser
		/// </summary>
		/// <param name="UserId">The ID of the user.
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteUserAsync(string UserId, GET_DeleteUserAction Action, GET_DeleteUserVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteUser?UserId=" + (UserId==null? "" : System.Uri.EscapeDataString(UserId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// For Redis engine version 6.0 onwards: Deletes a user group. The user group must first be disassociated from the replication group before it can be deleted. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html">Using Role Based Access Control (RBAC)</a>.
		/// GET_DeleteUserGroup #Action=DeleteUserGroup
		/// </summary>
		/// <param name="UserGroupId">The ID of the user group.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteUserGroupAsync(string UserGroupId, GET_DeleteUserGroupAction Action, GET_DeleteUserGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteUserGroup?UserGroupId=" + (UserGroupId==null? "" : System.Uri.EscapeDataString(UserGroupId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
		/// GET_DescribeCacheClusters #Action=DescribeCacheClusters
		/// </summary>
		/// <param name="CacheClusterId">The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.</param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p></param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <param name="ShowCacheNodeInfo">An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.</param>
		/// <param name="ShowCacheClustersNotInReplicationGroups">An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeCacheClustersAsync(string CacheClusterId, int MaxRecords, string Marker, bool ShowCacheNodeInfo, bool ShowCacheClustersNotInReplicationGroups, GET_DescribeCacheClustersAction Action, GET_DescribeCacheClustersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeCacheClusters?CacheClusterId=" + (CacheClusterId==null? "" : System.Uri.EscapeDataString(CacheClusterId))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&ShowCacheNodeInfo="+ShowCacheNodeInfo+"&ShowCacheClustersNotInReplicationGroups="+ShowCacheClustersNotInReplicationGroups+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the available cache engines and their versions.
		/// GET_DescribeCacheEngineVersions #Action=DescribeCacheEngineVersions
		/// </summary>
		/// <param name="Engine">The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> </param>
		/// <param name="EngineVersion"><p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p></param>
		/// <param name="CacheParameterGroupFamily"><p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>memcached1.6</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | <code>redis6.x</code> | <code>redis6.2</code> | <code>redis7</code> </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul></param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p></param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <param name="DefaultOnly">If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeCacheEngineVersionsAsync(string Engine, string EngineVersion, string CacheParameterGroupFamily, int MaxRecords, string Marker, bool DefaultOnly, GET_DescribeCacheEngineVersionsAction Action, GET_DescribeCacheEngineVersionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeCacheEngineVersions?Engine=" + (Engine==null? "" : System.Uri.EscapeDataString(Engine))+"&EngineVersion=" + (EngineVersion==null? "" : System.Uri.EscapeDataString(EngineVersion))+"&CacheParameterGroupFamily=" + (CacheParameterGroupFamily==null? "" : System.Uri.EscapeDataString(CacheParameterGroupFamily))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&DefaultOnly="+DefaultOnly+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
		/// GET_DescribeCacheParameterGroups #Action=DescribeCacheParameterGroups
		/// </summary>
		/// <param name="CacheParameterGroupName">The name of a specific cache parameter group to return details for.</param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p></param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeCacheParameterGroupsAsync(string CacheParameterGroupName, int MaxRecords, string Marker, GET_DescribeCacheParameterGroupsAction Action, GET_DescribeCacheParameterGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeCacheParameterGroups?CacheParameterGroupName=" + (CacheParameterGroupName==null? "" : System.Uri.EscapeDataString(CacheParameterGroupName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the detailed parameter list for a particular cache parameter group.
		/// GET_DescribeCacheParameters #Action=DescribeCacheParameters
		/// </summary>
		/// <param name="CacheParameterGroupName">The name of a specific cache parameter group to return details for.</param>
		/// <param name="Source"><p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p></param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p></param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeCacheParametersAsync(string CacheParameterGroupName, string Source, int MaxRecords, string Marker, GET_DescribeCacheParametersAction Action, GET_DescribeCacheParametersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeCacheParameters?CacheParameterGroupName=" + (CacheParameterGroupName==null? "" : System.Uri.EscapeDataString(CacheParameterGroupName))+"&Source=" + (Source==null? "" : System.Uri.EscapeDataString(Source))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup
		/// GET_DescribeCacheSecurityGroups #Action=DescribeCacheSecurityGroups
		/// </summary>
		/// <param name="CacheSecurityGroupName">The name of the cache security group to return details for.</param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p></param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeCacheSecurityGroupsAsync(string CacheSecurityGroupName, int MaxRecords, string Marker, GET_DescribeCacheSecurityGroupsAction Action, GET_DescribeCacheSecurityGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeCacheSecurityGroups?CacheSecurityGroupName=" + (CacheSecurityGroupName==null? "" : System.Uri.EscapeDataString(CacheSecurityGroupName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default.
		/// GET_DescribeCacheSubnetGroups #Action=DescribeCacheSubnetGroups
		/// </summary>
		/// <param name="CacheSubnetGroupName">The name of the cache subnet group to return details for.</param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p></param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeCacheSubnetGroupsAsync(string CacheSubnetGroupName, int MaxRecords, string Marker, GET_DescribeCacheSubnetGroupsAction Action, GET_DescribeCacheSubnetGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeCacheSubnetGroups?CacheSubnetGroupName=" + (CacheSubnetGroupName==null? "" : System.Uri.EscapeDataString(CacheSubnetGroupName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the default engine and system parameter information for the specified cache engine.
		/// GET_DescribeEngineDefaultParameters #Action=DescribeEngineDefaultParameters
		/// </summary>
		/// <param name="CacheParameterGroupFamily"><p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>memcached1.6</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | <code>redis6.x</code> | <code>redis6.2</code> | <code>redis7</code> </p></param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p></param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEngineDefaultParametersAsync(string CacheParameterGroupFamily, int MaxRecords, string Marker, GET_DescribeEngineDefaultParametersAction Action, GET_DescribeEngineDefaultParametersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeEngineDefaultParameters?CacheParameterGroupFamily=" + (CacheParameterGroupFamily==null? "" : System.Uri.EscapeDataString(CacheParameterGroupFamily))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
		/// GET_DescribeEvents #Action=DescribeEvents
		/// </summary>
		/// <param name="SourceIdentifier">The identifier of the event source for which events are returned. If not specified, all sources are included in the response.</param>
		/// <param name="SourceType">The event source to retrieve events for. If no value is specified, all events are returned.</param>
		/// <param name="StartTime"><p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p></param>
		/// <param name="EndTime"><p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p></param>
		/// <param name="Duration">The number of minutes worth of events to retrieve.</param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p></param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventsAsync(string SourceIdentifier, GET_DescribeEventsSourceType SourceType, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, int Duration, int MaxRecords, string Marker, GET_DescribeEventsAction Action, GET_DescribeEventsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeEvents?SourceIdentifier=" + (SourceIdentifier==null? "" : System.Uri.EscapeDataString(SourceIdentifier))+"&SourceType=" + SourceType+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Duration="+Duration+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a particular global replication group. If no identifier is specified, returns information about all Global datastores.
		/// GET_DescribeGlobalReplicationGroups #Action=DescribeGlobalReplicationGroups
		/// </summary>
		/// <param name="GlobalReplicationGroupId">The name of the Global datastore</param>
		/// <param name="MaxRecords">The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. </param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </param>
		/// <param name="ShowMemberInfo">Returns the list of members that comprise the Global datastore.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeGlobalReplicationGroupsAsync(string GlobalReplicationGroupId, int MaxRecords, string Marker, bool ShowMemberInfo, GET_DescribeGlobalReplicationGroupsAction Action, GET_DescribeGlobalReplicationGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeGlobalReplicationGroups?GlobalReplicationGroupId=" + (GlobalReplicationGroupId==null? "" : System.Uri.EscapeDataString(GlobalReplicationGroupId))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&ShowMemberInfo="+ShowMemberInfo+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
		/// GET_DescribeReplicationGroups #Action=DescribeReplicationGroups
		/// </summary>
		/// <param name="ReplicationGroupId"><p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p></param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p></param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeReplicationGroupsAsync(string ReplicationGroupId, int MaxRecords, string Marker, GET_DescribeReplicationGroupsAction Action, GET_DescribeReplicationGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReplicationGroups?ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
		/// GET_DescribeReservedCacheNodes #Action=DescribeReservedCacheNodes
		/// </summary>
		/// <param name="ReservedCacheNodeId">The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.</param>
		/// <param name="ReservedCacheNodesOfferingId">The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.</param>
		/// <param name="CacheNodeType"><p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): <code>cache.m6g.large</code>, <code>cache.m6g.xlarge</code>, <code>cache.m6g.2xlarge</code>, <code>cache.m6g.4xlarge</code>, <code>cache.m6g.8xlarge</code>, <code>cache.m6g.12xlarge</code>, <code>cache.m6g.16xlarge</code> </p> <note> <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a> </p> </note> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T4g node types</b> (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): <code>cache.t4g.micro</code>, <code>cache.t4g.small</code>, <code>cache.t4g.medium</code> </p> <p> <b>T3 node types:</b> <code>cache.t3.micro</code>, <code>cache.t3.small</code>, <code>cache.t3.medium</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p> <p> <code>cache.r6g.large</code>, <code>cache.r6g.xlarge</code>, <code>cache.r6g.2xlarge</code>, <code>cache.r6g.4xlarge</code>, <code>cache.r6g.8xlarge</code>, <code>cache.r6g.12xlarge</code>, <code>cache.r6g.16xlarge</code> </p> <note> <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a> </p> </note> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul></param>
		/// <param name="Duration"><p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p></param>
		/// <param name="ProductDescription">The product description filter value. Use this parameter to show only those reservations matching the specified product description.</param>
		/// <param name="OfferingType"><p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"|"All Upfront"|"Partial Upfront"| "No Upfront"</code> </p></param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p></param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeReservedCacheNodesAsync(string ReservedCacheNodeId, string ReservedCacheNodesOfferingId, string CacheNodeType, string Duration, string ProductDescription, string OfferingType, int MaxRecords, string Marker, GET_DescribeReservedCacheNodesAction Action, GET_DescribeReservedCacheNodesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedCacheNodes?ReservedCacheNodeId=" + (ReservedCacheNodeId==null? "" : System.Uri.EscapeDataString(ReservedCacheNodeId))+"&ReservedCacheNodesOfferingId=" + (ReservedCacheNodesOfferingId==null? "" : System.Uri.EscapeDataString(ReservedCacheNodesOfferingId))+"&CacheNodeType=" + (CacheNodeType==null? "" : System.Uri.EscapeDataString(CacheNodeType))+"&Duration=" + (Duration==null? "" : System.Uri.EscapeDataString(Duration))+"&ProductDescription=" + (ProductDescription==null? "" : System.Uri.EscapeDataString(ProductDescription))+"&OfferingType=" + (OfferingType==null? "" : System.Uri.EscapeDataString(OfferingType))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists available reserved cache node offerings.
		/// GET_DescribeReservedCacheNodesOfferings #Action=DescribeReservedCacheNodesOfferings
		/// </summary>
		/// <param name="ReservedCacheNodesOfferingId"><p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p></param>
		/// <param name="CacheNodeType"><p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): <code>cache.m6g.large</code>, <code>cache.m6g.xlarge</code>, <code>cache.m6g.2xlarge</code>, <code>cache.m6g.4xlarge</code>, <code>cache.m6g.8xlarge</code>, <code>cache.m6g.12xlarge</code>, <code>cache.m6g.16xlarge</code> </p> <note> <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a> </p> </note> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T4g node types</b> (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): <code>cache.t4g.micro</code>, <code>cache.t4g.small</code>, <code>cache.t4g.medium</code> </p> <p> <b>T3 node types:</b> <code>cache.t3.micro</code>, <code>cache.t3.small</code>, <code>cache.t3.medium</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R6g node types</b> (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).</p> <p> <code>cache.r6g.large</code>, <code>cache.r6g.xlarge</code>, <code>cache.r6g.2xlarge</code>, <code>cache.r6g.4xlarge</code>, <code>cache.r6g.8xlarge</code>, <code>cache.r6g.12xlarge</code>, <code>cache.r6g.16xlarge</code> </p> <note> <p>For region availability, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion">Supported Node Types</a> </p> </note> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul></param>
		/// <param name="Duration"><p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p></param>
		/// <param name="ProductDescription">The product description filter value. Use this parameter to show only the available offerings matching the specified product description.</param>
		/// <param name="OfferingType"><p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization" |"All Upfront"|"Partial Upfront"| "No Upfront"</code> </p></param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p></param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeReservedCacheNodesOfferingsAsync(string ReservedCacheNodesOfferingId, string CacheNodeType, string Duration, string ProductDescription, string OfferingType, int MaxRecords, string Marker, GET_DescribeReservedCacheNodesOfferingsAction Action, GET_DescribeReservedCacheNodesOfferingsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedCacheNodesOfferings?ReservedCacheNodesOfferingId=" + (ReservedCacheNodesOfferingId==null? "" : System.Uri.EscapeDataString(ReservedCacheNodesOfferingId))+"&CacheNodeType=" + (CacheNodeType==null? "" : System.Uri.EscapeDataString(CacheNodeType))+"&Duration=" + (Duration==null? "" : System.Uri.EscapeDataString(Duration))+"&ProductDescription=" + (ProductDescription==null? "" : System.Uri.EscapeDataString(ProductDescription))+"&OfferingType=" + (OfferingType==null? "" : System.Uri.EscapeDataString(OfferingType))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns details of the service updates
		/// GET_DescribeServiceUpdates #Action=DescribeServiceUpdates
		/// </summary>
		/// <param name="ServiceUpdateName">The unique ID of the service update</param>
		/// <param name="ServiceUpdateStatus">The status of the service update
		/// Maximum items: 3
		// </param>
		/// <param name="MaxRecords">The maximum number of records to include in the response</param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeServiceUpdatesAsync(string ServiceUpdateName, ServiceUpdateStatus[] ServiceUpdateStatus, int MaxRecords, string Marker, GET_DescribeServiceUpdatesAction Action, GET_DescribeServiceUpdatesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeServiceUpdates?ServiceUpdateName=" + (ServiceUpdateName==null? "" : System.Uri.EscapeDataString(ServiceUpdateName))+"&"+string.Join("&", ServiceUpdateStatus.Select(z => $"ServiceUpdateStatus={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
		/// GET_DescribeSnapshots #Action=DescribeSnapshots
		/// </summary>
		/// <param name="ReplicationGroupId">A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.</param>
		/// <param name="CacheClusterId">A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.</param>
		/// <param name="SnapshotName">A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.</param>
		/// <param name="SnapshotSource">If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.</param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p></param>
		/// <param name="ShowNodeGroupConfig">A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSnapshotsAsync(string ReplicationGroupId, string CacheClusterId, string SnapshotName, string SnapshotSource, string Marker, int MaxRecords, bool ShowNodeGroupConfig, GET_DescribeSnapshotsAction Action, GET_DescribeSnapshotsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSnapshots?ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&CacheClusterId=" + (CacheClusterId==null? "" : System.Uri.EscapeDataString(CacheClusterId))+"&SnapshotName=" + (SnapshotName==null? "" : System.Uri.EscapeDataString(SnapshotName))+"&SnapshotSource=" + (SnapshotSource==null? "" : System.Uri.EscapeDataString(SnapshotSource))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxRecords="+MaxRecords+"&ShowNodeGroupConfig="+ShowNodeGroupConfig+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns details of the update actions
		/// GET_DescribeUpdateActions #Action=DescribeUpdateActions
		/// </summary>
		/// <param name="ServiceUpdateName">The unique ID of the service update</param>
		/// <param name="ReplicationGroupIds">The replication group IDs
		/// Maximum items: 20
		// </param>
		/// <param name="CacheClusterIds">The cache cluster IDs
		/// Maximum items: 20
		// </param>
		/// <param name="Engine">The Elasticache engine to which the update applies. Either Redis or Memcached </param>
		/// <param name="ServiceUpdateStatus">The status of the service update
		/// Maximum items: 3
		// </param>
		/// <param name="ServiceUpdateTimeRange">The range of time specified to search for service updates that are in available status</param>
		/// <param name="UpdateActionStatus">The status of the update action.
		/// Maximum items: 9
		// </param>
		/// <param name="ShowNodeLevelUpdateStatus">Dictates whether to include node level update status in the response </param>
		/// <param name="MaxRecords">The maximum number of records to include in the response</param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeUpdateActionsAsync(string ServiceUpdateName, string[] ReplicationGroupIds, string[] CacheClusterIds, string Engine, ServiceUpdateStatus[] ServiceUpdateStatus, GET_DescribeUpdateActionsServiceUpdateTimeRange ServiceUpdateTimeRange, UpdateActionStatus[] UpdateActionStatus, bool ShowNodeLevelUpdateStatus, int MaxRecords, string Marker, GET_DescribeUpdateActionsAction Action, GET_DescribeUpdateActionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeUpdateActions?ServiceUpdateName=" + (ServiceUpdateName==null? "" : System.Uri.EscapeDataString(ServiceUpdateName))+"&"+string.Join("&", ReplicationGroupIds.Select(z => $"ReplicationGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", CacheClusterIds.Select(z => $"CacheClusterIds={System.Uri.EscapeDataString(z.ToString())}"))+"&Engine=" + (Engine==null? "" : System.Uri.EscapeDataString(Engine))+"&"+string.Join("&", ServiceUpdateStatus.Select(z => $"ServiceUpdateStatus={z}"))+"&ServiceUpdateTimeRange=" + ServiceUpdateTimeRange+"&"+string.Join("&", UpdateActionStatus.Select(z => $"UpdateActionStatus={z}"))+"&ShowNodeLevelUpdateStatus="+ShowNodeLevelUpdateStatus+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of user groups.
		/// GET_DescribeUserGroups #Action=DescribeUserGroups
		/// </summary>
		/// <param name="UserGroupId">The ID of the user group.</param>
		/// <param name="MaxRecords">The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. </param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. &gt;</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeUserGroupsAsync(string UserGroupId, int MaxRecords, string Marker, GET_DescribeUserGroupsAction Action, GET_DescribeUserGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeUserGroups?UserGroupId=" + (UserGroupId==null? "" : System.Uri.EscapeDataString(UserGroupId))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of users.
		/// GET_DescribeUsers #Action=DescribeUsers
		/// </summary>
		/// <param name="Engine">The Redis engine. </param>
		/// <param name="UserId">The ID of the user.
		/// Min length: 1
		// </param>
		/// <param name="Filters">Filter to determine the list of User IDs to return.</param>
		/// <param name="MaxRecords">The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. </param>
		/// <param name="Marker">An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. &gt;</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeUsersAsync(string Engine, string UserId, Filter[] Filters, int MaxRecords, string Marker, GET_DescribeUsersAction Action, GET_DescribeUsersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeUsers?Engine=" + (Engine==null? "" : System.Uri.EscapeDataString(Engine))+"&UserId=" + (UserId==null? "" : System.Uri.EscapeDataString(UserId))+"&"+string.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a secondary cluster from the Global datastore using the Global datastore name. The secondary cluster will no longer receive updates from the primary cluster, but will remain as a standalone cluster in that Amazon region.
		/// GET_DisassociateGlobalReplicationGroup #Action=DisassociateGlobalReplicationGroup
		/// </summary>
		/// <param name="GlobalReplicationGroupId">The name of the Global datastore</param>
		/// <param name="ReplicationGroupId">The name of the secondary cluster you wish to remove from the Global datastore</param>
		/// <param name="ReplicationGroupRegion">The Amazon region of secondary cluster you wish to remove from the Global datastore</param>
		/// <returns>Success</returns>
		public async Task GET_DisassociateGlobalReplicationGroupAsync(string GlobalReplicationGroupId, string ReplicationGroupId, string ReplicationGroupRegion, GET_DisassociateGlobalReplicationGroupAction Action, GET_DisassociateGlobalReplicationGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateGlobalReplicationGroup?GlobalReplicationGroupId=" + (GlobalReplicationGroupId==null? "" : System.Uri.EscapeDataString(GlobalReplicationGroupId))+"&ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&ReplicationGroupRegion=" + (ReplicationGroupRegion==null? "" : System.Uri.EscapeDataString(ReplicationGroupRegion))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Used to failover the primary region to a secondary region. The secondary region will become primary, and all other clusters will become secondary.
		/// GET_FailoverGlobalReplicationGroup #Action=FailoverGlobalReplicationGroup
		/// </summary>
		/// <param name="GlobalReplicationGroupId">The name of the Global datastore</param>
		/// <param name="PrimaryRegion">The Amazon region of the primary cluster of the Global datastore</param>
		/// <param name="PrimaryReplicationGroupId">The name of the primary replication group</param>
		/// <returns>Success</returns>
		public async Task GET_FailoverGlobalReplicationGroupAsync(string GlobalReplicationGroupId, string PrimaryRegion, string PrimaryReplicationGroupId, GET_FailoverGlobalReplicationGroupAction Action, GET_FailoverGlobalReplicationGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=FailoverGlobalReplicationGroup?GlobalReplicationGroupId=" + (GlobalReplicationGroupId==null? "" : System.Uri.EscapeDataString(GlobalReplicationGroupId))+"&PrimaryRegion=" + (PrimaryRegion==null? "" : System.Uri.EscapeDataString(PrimaryRegion))+"&PrimaryReplicationGroupId=" + (PrimaryReplicationGroupId==null? "" : System.Uri.EscapeDataString(PrimaryReplicationGroupId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Increase the number of node groups in the Global datastore
		/// GET_IncreaseNodeGroupsInGlobalReplicationGroup #Action=IncreaseNodeGroupsInGlobalReplicationGroup
		/// </summary>
		/// <param name="GlobalReplicationGroupId">The name of the Global datastore</param>
		/// <param name="NodeGroupCount">The number of node groups you wish to add</param>
		/// <param name="RegionalConfigurations">Describes the replication group IDs, the Amazon regions where they are stored and the shard configuration for each that comprise the Global datastore</param>
		/// <param name="ApplyImmediately">Indicates that the process begins immediately. At present, the only permitted value for this parameter is true.</param>
		/// <returns>Success</returns>
		public async Task GET_IncreaseNodeGroupsInGlobalReplicationGroupAsync(string GlobalReplicationGroupId, int NodeGroupCount, string[] RegionalConfigurations, bool ApplyImmediately, GET_IncreaseNodeGroupsInGlobalReplicationGroupAction Action, GET_IncreaseNodeGroupsInGlobalReplicationGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=IncreaseNodeGroupsInGlobalReplicationGroup?GlobalReplicationGroupId=" + (GlobalReplicationGroupId==null? "" : System.Uri.EscapeDataString(GlobalReplicationGroupId))+"&NodeGroupCount="+NodeGroupCount+"&"+string.Join("&", RegionalConfigurations.Select(z => $"RegionalConfigurations={System.Uri.EscapeDataString(z.ToString())}"))+"&ApplyImmediately="+ApplyImmediately+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Dynamically increases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
		/// GET_IncreaseReplicaCount #Action=IncreaseReplicaCount
		/// </summary>
		/// <param name="ReplicationGroupId">The id of the replication group to which you want to add replica nodes.</param>
		/// <param name="NewReplicaCount">The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</param>
		/// <param name="ReplicaConfiguration">A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.</param>
		/// <param name="ApplyImmediately">If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.</param>
		/// <returns>Success</returns>
		public async Task GET_IncreaseReplicaCountAsync(string ReplicationGroupId, int NewReplicaCount, string[] ReplicaConfiguration, bool ApplyImmediately, GET_IncreaseReplicaCountAction Action, GET_IncreaseReplicaCountVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=IncreaseReplicaCount?ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&NewReplicaCount="+NewReplicaCount+"&"+string.Join("&", ReplicaConfiguration.Select(z => $"ReplicaConfiguration={System.Uri.EscapeDataString(z.ToString())}"))+"&ApplyImmediately="+ApplyImmediately+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
		/// GET_ListAllowedNodeTypeModifications #Action=ListAllowedNodeTypeModifications
		/// </summary>
		/// <param name="CacheClusterId"><p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important></param>
		/// <param name="ReplicationGroupId"><p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important></param>
		/// <returns>Success</returns>
		public async Task GET_ListAllowedNodeTypeModificationsAsync(string CacheClusterId, string ReplicationGroupId, GET_ListAllowedNodeTypeModificationsAction Action, GET_ListAllowedNodeTypeModificationsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListAllowedNodeTypeModifications?CacheClusterId=" + (CacheClusterId==null? "" : System.Uri.EscapeDataString(CacheClusterId))+"&ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all tags currently on a named resource.</p> <p> A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html">Resource-level permissions</a>.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p>
		/// GET_ListTagsForResource #Action=ListTagsForResource
		/// </summary>
		/// <param name="ResourceName"><p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces</a>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListTagsForResourceAsync(string ResourceName, GET_ListTagsForResourceAction Action, GET_ListTagsForResourceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListTagsForResource?ResourceName=" + (ResourceName==null? "" : System.Uri.EscapeDataString(ResourceName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
		/// GET_ModifyCacheCluster #Action=ModifyCacheCluster
		/// </summary>
		/// <param name="CacheClusterId">The cluster identifier. This value is stored as a lowercase string.</param>
		/// <param name="NumCacheNodes"><p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note></param>
		/// <param name="CacheNodeIdsToRemove"><p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p></param>
		/// <param name="AZMode"><p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note></param>
		/// <param name="NewAvailabilityZones"><note> <p>This option is only supported on Memcached clusters.</p> </note> <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul></param>
		/// <param name="CacheSecurityGroupNames"><p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p></param>
		/// <param name="SecurityGroupIds"><p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p></param>
		/// <param name="PreferredMaintenanceWindow"><p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p></param>
		/// <param name="NotificationTopicArn"><p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note></param>
		/// <param name="CacheParameterGroupName">The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.</param>
		/// <param name="NotificationTopicStatus"><p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p></param>
		/// <param name="ApplyImmediately"><p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p></param>
		/// <param name="EngineVersion"><p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p></param>
		/// <param name="AutoMinorVersionUpgrade"> If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.  </param>
		/// <param name="SnapshotRetentionLimit"><p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note></param>
		/// <param name="SnapshotWindow">The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. </param>
		/// <param name="CacheNodeType">A valid cache node type that you want to scale this cluster up to.</param>
		/// <param name="AuthToken"><p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p></param>
		/// <param name="AuthTokenUpdateStrategy"><p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p></param>
		/// <param name="LogDeliveryConfigurations">Specifies the destination, format and type of the logs.</param>
		/// <param name="IpDiscovery">The network type you choose when modifying a cluster, either <code>ipv4</code> | <code>ipv6</code>. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the <a href="http://aws.amazon.com/ec2/nitro/">Nitro system</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyCacheClusterAsync(
					string CacheClusterId, 
					int NumCacheNodes, 
					string[] CacheNodeIdsToRemove, 
					GET_ModifyCacheClusterAZMode AZMode, 
					string[] NewAvailabilityZones, 
					string[] CacheSecurityGroupNames, 
					string[] SecurityGroupIds, 
					string PreferredMaintenanceWindow, 
					string NotificationTopicArn, 
					string CacheParameterGroupName, 
					string NotificationTopicStatus, 
					bool ApplyImmediately, 
					string EngineVersion, 
					bool AutoMinorVersionUpgrade, 
					int SnapshotRetentionLimit, 
					string SnapshotWindow, 
					string CacheNodeType, 
					string AuthToken, 
					AuthTokenUpdateStrategyType AuthTokenUpdateStrategy, 
					string[] LogDeliveryConfigurations, 
					IpDiscovery IpDiscovery, 
					GET_ModifyCacheClusterAction Action, 
					GET_ModifyCacheClusterVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyCacheCluster?CacheClusterId=" + (CacheClusterId==null? "" : System.Uri.EscapeDataString(CacheClusterId))+"&NumCacheNodes="+NumCacheNodes+"&"+string.Join("&", CacheNodeIdsToRemove.Select(z => $"CacheNodeIdsToRemove={System.Uri.EscapeDataString(z.ToString())}"))+"&AZMode=" + AZMode+"&"+string.Join("&", NewAvailabilityZones.Select(z => $"NewAvailabilityZones={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", CacheSecurityGroupNames.Select(z => $"CacheSecurityGroupNames={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", SecurityGroupIds.Select(z => $"SecurityGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : System.Uri.EscapeDataString(PreferredMaintenanceWindow))+"&NotificationTopicArn=" + (NotificationTopicArn==null? "" : System.Uri.EscapeDataString(NotificationTopicArn))+"&CacheParameterGroupName=" + (CacheParameterGroupName==null? "" : System.Uri.EscapeDataString(CacheParameterGroupName))+"&NotificationTopicStatus=" + (NotificationTopicStatus==null? "" : System.Uri.EscapeDataString(NotificationTopicStatus))+"&ApplyImmediately="+ApplyImmediately+"&EngineVersion=" + (EngineVersion==null? "" : System.Uri.EscapeDataString(EngineVersion))+"&AutoMinorVersionUpgrade="+AutoMinorVersionUpgrade+"&SnapshotRetentionLimit="+SnapshotRetentionLimit+"&SnapshotWindow=" + (SnapshotWindow==null? "" : System.Uri.EscapeDataString(SnapshotWindow))+"&CacheNodeType=" + (CacheNodeType==null? "" : System.Uri.EscapeDataString(CacheNodeType))+"&AuthToken=" + (AuthToken==null? "" : System.Uri.EscapeDataString(AuthToken))+"&AuthTokenUpdateStrategy=" + AuthTokenUpdateStrategy+"&"+string.Join("&", LogDeliveryConfigurations.Select(z => $"LogDeliveryConfigurations={System.Uri.EscapeDataString(z.ToString())}"))+"&IpDiscovery=" + IpDiscovery+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
		/// GET_ModifyCacheParameterGroup #Action=ModifyCacheParameterGroup
		/// </summary>
		/// <param name="CacheParameterGroupName">The name of the cache parameter group to modify.</param>
		/// <param name="ParameterNameValues">An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyCacheParameterGroupAsync(string CacheParameterGroupName, string[] ParameterNameValues, GET_ModifyCacheParameterGroupAction Action, GET_ModifyCacheParameterGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyCacheParameterGroup?CacheParameterGroupName=" + (CacheParameterGroupName==null? "" : System.Uri.EscapeDataString(CacheParameterGroupName))+"&"+string.Join("&", ParameterNameValues.Select(z => $"ParameterNameValues={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies an existing cache subnet group.
		/// GET_ModifyCacheSubnetGroup #Action=ModifyCacheSubnetGroup
		/// </summary>
		/// <param name="CacheSubnetGroupName"><p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p></param>
		/// <param name="CacheSubnetGroupDescription">A description of the cache subnet group.</param>
		/// <param name="SubnetIds">The EC2 subnet IDs for the cache subnet group.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyCacheSubnetGroupAsync(string CacheSubnetGroupName, string CacheSubnetGroupDescription, string[] SubnetIds, GET_ModifyCacheSubnetGroupAction Action, GET_ModifyCacheSubnetGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyCacheSubnetGroup?CacheSubnetGroupName=" + (CacheSubnetGroupName==null? "" : System.Uri.EscapeDataString(CacheSubnetGroupName))+"&CacheSubnetGroupDescription=" + (CacheSubnetGroupDescription==null? "" : System.Uri.EscapeDataString(CacheSubnetGroupDescription))+"&"+string.Join("&", SubnetIds.Select(z => $"SubnetIds={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the settings for a Global datastore.
		/// GET_ModifyGlobalReplicationGroup #Action=ModifyGlobalReplicationGroup
		/// </summary>
		/// <param name="GlobalReplicationGroupId">The name of the Global datastore</param>
		/// <param name="ApplyImmediately">This parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible. Modifications to Global Replication Groups cannot be requested to be applied in PreferredMaintenceWindow. </param>
		/// <param name="CacheNodeType">A valid cache node type that you want to scale this Global datastore to.</param>
		/// <param name="EngineVersion">The upgraded version of the cache engine to be run on the clusters in the Global datastore. </param>
		/// <param name="CacheParameterGroupName">The name of the cache parameter group to use with the Global datastore. It must be compatible with the major engine version used by the Global datastore.</param>
		/// <param name="GlobalReplicationGroupDescription">A description of the Global datastore</param>
		/// <param name="AutomaticFailoverEnabled">Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure. </param>
		/// <returns>Success</returns>
		public async Task GET_ModifyGlobalReplicationGroupAsync(string GlobalReplicationGroupId, bool ApplyImmediately, string CacheNodeType, string EngineVersion, string CacheParameterGroupName, string GlobalReplicationGroupDescription, bool AutomaticFailoverEnabled, GET_ModifyGlobalReplicationGroupAction Action, GET_ModifyGlobalReplicationGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyGlobalReplicationGroup?GlobalReplicationGroupId=" + (GlobalReplicationGroupId==null? "" : System.Uri.EscapeDataString(GlobalReplicationGroupId))+"&ApplyImmediately="+ApplyImmediately+"&CacheNodeType=" + (CacheNodeType==null? "" : System.Uri.EscapeDataString(CacheNodeType))+"&EngineVersion=" + (EngineVersion==null? "" : System.Uri.EscapeDataString(EngineVersion))+"&CacheParameterGroupName=" + (CacheParameterGroupName==null? "" : System.Uri.EscapeDataString(CacheParameterGroupName))+"&GlobalReplicationGroupDescription=" + (GlobalReplicationGroupDescription==null? "" : System.Uri.EscapeDataString(GlobalReplicationGroupDescription))+"&AutomaticFailoverEnabled="+AutomaticFailoverEnabled+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the settings for a replication group.</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
		/// GET_ModifyReplicationGroup #Action=ModifyReplicationGroup
		/// </summary>
		/// <param name="ReplicationGroupId">The identifier of the replication group to modify.</param>
		/// <param name="ReplicationGroupDescription">A description for the replication group. Maximum length is 255 characters.</param>
		/// <param name="PrimaryClusterId">For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.</param>
		/// <param name="SnapshottingClusterId">The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.</param>
		/// <param name="AutomaticFailoverEnabled"><p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p></param>
		/// <param name="MultiAZEnabled">A flag to indicate MultiAZ is enabled.</param>
		/// <param name="NodeGroupId">Deprecated. This parameter is not used.</param>
		/// <param name="CacheSecurityGroupNames"><p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p></param>
		/// <param name="SecurityGroupIds"><p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p></param>
		/// <param name="PreferredMaintenanceWindow"><p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p></param>
		/// <param name="NotificationTopicArn"><p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note></param>
		/// <param name="CacheParameterGroupName">The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.</param>
		/// <param name="NotificationTopicStatus"><p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p></param>
		/// <param name="ApplyImmediately"><p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p></param>
		/// <param name="EngineVersion"><p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p></param>
		/// <param name="AutoMinorVersionUpgrade"> If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.  </param>
		/// <param name="SnapshotRetentionLimit"><p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p></param>
		/// <param name="SnapshotWindow"><p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p></param>
		/// <param name="CacheNodeType">A valid cache node type that you want to scale this replication group to.</param>
		/// <param name="AuthToken"><p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p></param>
		/// <param name="AuthTokenUpdateStrategy"><p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p></param>
		/// <param name="UserGroupIdsToAdd">The ID of the user group you are associating with the replication group.</param>
		/// <param name="UserGroupIdsToRemove">The ID of the user group to disassociate from the replication group, meaning the users in the group no longer can access the replication group.</param>
		/// <param name="RemoveUserGroups">Removes the user group associated with this replication group.</param>
		/// <param name="LogDeliveryConfigurations">Specifies the destination, format and type of the logs.</param>
		/// <param name="IpDiscovery">The network type you choose when modifying a cluster, either <code>ipv4</code> | <code>ipv6</code>. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the <a href="http://aws.amazon.com/ec2/nitro/">Nitro system</a>.</param>
		/// <param name="TransitEncryptionEnabled">A flag that enables in-transit encryption when set to true. If you are enabling in-transit encryption for an existing cluster, you must also set <code>TransitEncryptionMode</code> to <code>preferred</code>.</param>
		/// <param name="TransitEncryptionMode"><p>A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.</p> <p>You must set <code>TransitEncryptionEnabled</code> to <code>true</code>, for your existing cluster, and set <code>TransitEncryptionMode</code> to <code>preferred</code> in the same request to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can set the value to <code>required</code> to allow encrypted connections only.</p> <p>Setting <code>TransitEncryptionMode</code> to <code>required</code> is a two-step process that requires you to first set the <code>TransitEncryptionMode</code> to <code>preferred</code>, after that you can set <code>TransitEncryptionMode</code> to <code>required</code>. </p></param>
		/// <param name="ClusterMode">Enabled or Disabled. To modify cluster mode from Disabled to Enabled, you must first set the cluster mode to Compatible. Compatible mode allows your Redis clients to connect using both cluster mode enabled and cluster mode disabled. After you migrate all Redis clients to use cluster mode enabled, you can then complete cluster mode configuration and set the cluster mode to Enabled.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyReplicationGroupAsync(
					string ReplicationGroupId, 
					string ReplicationGroupDescription, 
					string PrimaryClusterId, 
					string SnapshottingClusterId, 
					bool AutomaticFailoverEnabled, 
					bool MultiAZEnabled, 
					string NodeGroupId, 
					string[] CacheSecurityGroupNames, 
					string[] SecurityGroupIds, 
					string PreferredMaintenanceWindow, 
					string NotificationTopicArn, 
					string CacheParameterGroupName, 
					string NotificationTopicStatus, 
					bool ApplyImmediately, 
					string EngineVersion, 
					bool AutoMinorVersionUpgrade, 
					int SnapshotRetentionLimit, 
					string SnapshotWindow, 
					string CacheNodeType, 
					string AuthToken, 
					AuthTokenUpdateStrategyType AuthTokenUpdateStrategy, 
					string[] UserGroupIdsToAdd, 
					string[] UserGroupIdsToRemove, 
					bool RemoveUserGroups, 
					string[] LogDeliveryConfigurations, 
					IpDiscovery IpDiscovery, 
					bool TransitEncryptionEnabled, 
					TransitEncryptionMode TransitEncryptionMode, 
					ClusterMode ClusterMode, 
					GET_ModifyReplicationGroupAction Action, 
					GET_ModifyReplicationGroupVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyReplicationGroup?ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&ReplicationGroupDescription=" + (ReplicationGroupDescription==null? "" : System.Uri.EscapeDataString(ReplicationGroupDescription))+"&PrimaryClusterId=" + (PrimaryClusterId==null? "" : System.Uri.EscapeDataString(PrimaryClusterId))+"&SnapshottingClusterId=" + (SnapshottingClusterId==null? "" : System.Uri.EscapeDataString(SnapshottingClusterId))+"&AutomaticFailoverEnabled="+AutomaticFailoverEnabled+"&MultiAZEnabled="+MultiAZEnabled+"&NodeGroupId=" + (NodeGroupId==null? "" : System.Uri.EscapeDataString(NodeGroupId))+"&"+string.Join("&", CacheSecurityGroupNames.Select(z => $"CacheSecurityGroupNames={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", SecurityGroupIds.Select(z => $"SecurityGroupIds={System.Uri.EscapeDataString(z.ToString())}"))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : System.Uri.EscapeDataString(PreferredMaintenanceWindow))+"&NotificationTopicArn=" + (NotificationTopicArn==null? "" : System.Uri.EscapeDataString(NotificationTopicArn))+"&CacheParameterGroupName=" + (CacheParameterGroupName==null? "" : System.Uri.EscapeDataString(CacheParameterGroupName))+"&NotificationTopicStatus=" + (NotificationTopicStatus==null? "" : System.Uri.EscapeDataString(NotificationTopicStatus))+"&ApplyImmediately="+ApplyImmediately+"&EngineVersion=" + (EngineVersion==null? "" : System.Uri.EscapeDataString(EngineVersion))+"&AutoMinorVersionUpgrade="+AutoMinorVersionUpgrade+"&SnapshotRetentionLimit="+SnapshotRetentionLimit+"&SnapshotWindow=" + (SnapshotWindow==null? "" : System.Uri.EscapeDataString(SnapshotWindow))+"&CacheNodeType=" + (CacheNodeType==null? "" : System.Uri.EscapeDataString(CacheNodeType))+"&AuthToken=" + (AuthToken==null? "" : System.Uri.EscapeDataString(AuthToken))+"&AuthTokenUpdateStrategy=" + AuthTokenUpdateStrategy+"&"+string.Join("&", UserGroupIdsToAdd.Select(z => $"UserGroupIdsToAdd={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", UserGroupIdsToRemove.Select(z => $"UserGroupIdsToRemove={System.Uri.EscapeDataString(z.ToString())}"))+"&RemoveUserGroups="+RemoveUserGroups+"&"+string.Join("&", LogDeliveryConfigurations.Select(z => $"LogDeliveryConfigurations={System.Uri.EscapeDataString(z.ToString())}"))+"&IpDiscovery=" + IpDiscovery+"&TransitEncryptionEnabled="+TransitEncryptionEnabled+"&TransitEncryptionMode=" + TransitEncryptionMode+"&ClusterMode=" + ClusterMode+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among existing shards.
		/// GET_ModifyReplicationGroupShardConfiguration #Action=ModifyReplicationGroupShardConfiguration
		/// </summary>
		/// <param name="ReplicationGroupId">The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.</param>
		/// <param name="NodeGroupCount">The number of node groups (shards) that results from the modification of the shard configuration.</param>
		/// <param name="ApplyImmediately"><p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p></param>
		/// <param name="ReshardingConfiguration"><p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p></param>
		/// <param name="NodeGroupsToRemove"><p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p></param>
		/// <param name="NodeGroupsToRetain"><p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ModifyReplicationGroupShardConfigurationAsync(string ReplicationGroupId, int NodeGroupCount, bool ApplyImmediately, string[] ReshardingConfiguration, string[] NodeGroupsToRemove, string[] NodeGroupsToRetain, GET_ModifyReplicationGroupShardConfigurationAction Action, GET_ModifyReplicationGroupShardConfigurationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyReplicationGroupShardConfiguration?ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&NodeGroupCount="+NodeGroupCount+"&ApplyImmediately="+ApplyImmediately+"&"+string.Join("&", ReshardingConfiguration.Select(z => $"ReshardingConfiguration={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", NodeGroupsToRemove.Select(z => $"NodeGroupsToRemove={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", NodeGroupsToRetain.Select(z => $"NodeGroupsToRetain={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes user password(s) and/or access string.
		/// GET_ModifyUser #Action=ModifyUser
		/// </summary>
		/// <param name="UserId">The ID of the user.
		/// Min length: 1
		// </param>
		/// <param name="AccessString">Access permissions string used for this user.</param>
		/// <param name="AppendAccessString">Adds additional user permissions to the access string.</param>
		/// <param name="Passwords">The passwords belonging to the user. You are allowed up to two.
		/// Minimum items: 1
		// </param>
		/// <param name="NoPasswordRequired">Indicates no password is required for the user.</param>
		/// <param name="AuthenticationMode">Specifies how to authenticate the user.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyUserAsync(string UserId, string AccessString, string AppendAccessString, string[] Passwords, bool NoPasswordRequired, GET_ModifyUserAuthenticationMode AuthenticationMode, GET_ModifyUserAction Action, GET_ModifyUserVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyUser?UserId=" + (UserId==null? "" : System.Uri.EscapeDataString(UserId))+"&AccessString=" + (AccessString==null? "" : System.Uri.EscapeDataString(AccessString))+"&AppendAccessString=" + (AppendAccessString==null? "" : System.Uri.EscapeDataString(AppendAccessString))+"&"+string.Join("&", Passwords.Select(z => $"Passwords={System.Uri.EscapeDataString(z.ToString())}"))+"&NoPasswordRequired="+NoPasswordRequired+"&AuthenticationMode=" + AuthenticationMode+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes the list of users that belong to the user group.
		/// GET_ModifyUserGroup #Action=ModifyUserGroup
		/// </summary>
		/// <param name="UserGroupId">The ID of the user group.</param>
		/// <param name="UserIdsToAdd">The list of user IDs to add to the user group.
		/// Minimum items: 1
		// </param>
		/// <param name="UserIdsToRemove">The list of user IDs to remove from the user group.
		/// Minimum items: 1
		// </param>
		/// <returns>Success</returns>
		public async Task GET_ModifyUserGroupAsync(string UserGroupId, string[] UserIdsToAdd, string[] UserIdsToRemove, GET_ModifyUserGroupAction Action, GET_ModifyUserGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyUserGroup?UserGroupId=" + (UserGroupId==null? "" : System.Uri.EscapeDataString(UserGroupId))+"&"+string.Join("&", UserIdsToAdd.Select(z => $"UserIdsToAdd={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", UserIdsToRemove.Select(z => $"UserIdsToRemove={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to purchase a reserved cache node offering. Reserved nodes are not eligible for cancellation and are non-refundable. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/reserved-nodes.html">Managing Costs with Reserved Nodes</a> for Redis or <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/reserved-nodes.html">Managing Costs with Reserved Nodes</a> for Memcached.
		/// GET_PurchaseReservedCacheNodesOffering #Action=PurchaseReservedCacheNodesOffering
		/// </summary>
		/// <param name="ReservedCacheNodesOfferingId"><p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p></param>
		/// <param name="ReservedCacheNodeId"><p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p></param>
		/// <param name="CacheNodeCount"><p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p></param>
		/// <param name="Tags">A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</param>
		/// <returns>Success</returns>
		public async Task GET_PurchaseReservedCacheNodesOfferingAsync(string ReservedCacheNodesOfferingId, string ReservedCacheNodeId, int CacheNodeCount, string[] Tags, GET_PurchaseReservedCacheNodesOfferingAction Action, GET_PurchaseReservedCacheNodesOfferingVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PurchaseReservedCacheNodesOffering?ReservedCacheNodesOfferingId=" + (ReservedCacheNodesOfferingId==null? "" : System.Uri.EscapeDataString(ReservedCacheNodesOfferingId))+"&ReservedCacheNodeId=" + (ReservedCacheNodeId==null? "" : System.Uri.EscapeDataString(ReservedCacheNodeId))+"&CacheNodeCount="+CacheNodeCount+"&"+string.Join("&", Tags.Select(z => $"Tags={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Redistribute slots to ensure uniform distribution across existing shards in the cluster.
		/// GET_RebalanceSlotsInGlobalReplicationGroup #Action=RebalanceSlotsInGlobalReplicationGroup
		/// </summary>
		/// <param name="GlobalReplicationGroupId">The name of the Global datastore</param>
		/// <param name="ApplyImmediately">If <code>True</code>, redistribution is applied immediately.</param>
		/// <returns>Success</returns>
		public async Task GET_RebalanceSlotsInGlobalReplicationGroupAsync(string GlobalReplicationGroupId, bool ApplyImmediately, GET_RebalanceSlotsInGlobalReplicationGroupAction Action, GET_RebalanceSlotsInGlobalReplicationGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RebalanceSlotsInGlobalReplicationGroup?GlobalReplicationGroupId=" + (GlobalReplicationGroupId==null? "" : System.Uri.EscapeDataString(GlobalReplicationGroupId))+"&ApplyImmediately="+ApplyImmediately+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes.rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
		/// GET_RebootCacheCluster #Action=RebootCacheCluster
		/// </summary>
		/// <param name="CacheClusterId">The cluster identifier. This parameter is stored as a lowercase string.</param>
		/// <param name="CacheNodeIdsToReboot">A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.</param>
		/// <returns>Success</returns>
		public async Task GET_RebootCacheClusterAsync(string CacheClusterId, string[] CacheNodeIdsToReboot, GET_RebootCacheClusterAction Action, GET_RebootCacheClusterVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RebootCacheCluster?CacheClusterId=" + (CacheClusterId==null? "" : System.Uri.EscapeDataString(CacheClusterId))+"&"+string.Join("&", CacheNodeIdsToReboot.Select(z => $"CacheNodeIdsToReboot={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the tags identified by the <code>TagKeys</code> list from the named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html">Resource-level permissions</a>.
		/// GET_RemoveTagsFromResource #Action=RemoveTagsFromResource
		/// </summary>
		/// <param name="ResourceName"><p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and Amazon Service Namespaces</a>.</p></param>
		/// <param name="TagKeys">A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.</param>
		/// <returns>Success</returns>
		public async Task GET_RemoveTagsFromResourceAsync(string ResourceName, string[] TagKeys, GET_RemoveTagsFromResourceAction Action, GET_RemoveTagsFromResourceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RemoveTagsFromResource?ResourceName=" + (ResourceName==null? "" : System.Uri.EscapeDataString(ResourceName))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
		/// GET_ResetCacheParameterGroup #Action=ResetCacheParameterGroup
		/// </summary>
		/// <param name="CacheParameterGroupName">The name of the cache parameter group to reset.</param>
		/// <param name="ResetAllParameters"><p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p></param>
		/// <param name="ParameterNameValues">An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.</param>
		/// <returns>Success</returns>
		public async Task GET_ResetCacheParameterGroupAsync(string CacheParameterGroupName, bool ResetAllParameters, string[] ParameterNameValues, GET_ResetCacheParameterGroupAction Action, GET_ResetCacheParameterGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetCacheParameterGroup?CacheParameterGroupName=" + (CacheParameterGroupName==null? "" : System.Uri.EscapeDataString(CacheParameterGroupName))+"&ResetAllParameters="+ResetAllParameters+"&"+string.Join("&", ParameterNameValues.Select(z => $"ParameterNameValues={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
		/// GET_RevokeCacheSecurityGroupIngress #Action=RevokeCacheSecurityGroupIngress
		/// </summary>
		/// <param name="CacheSecurityGroupName">The name of the cache security group to revoke ingress from.</param>
		/// <param name="EC2SecurityGroupName">The name of the Amazon EC2 security group to revoke access from.</param>
		/// <param name="EC2SecurityGroupOwnerId">The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter.</param>
		/// <returns>Success</returns>
		public async Task GET_RevokeCacheSecurityGroupIngressAsync(string CacheSecurityGroupName, string EC2SecurityGroupName, string EC2SecurityGroupOwnerId, GET_RevokeCacheSecurityGroupIngressAction Action, GET_RevokeCacheSecurityGroupIngressVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RevokeCacheSecurityGroupIngress?CacheSecurityGroupName=" + (CacheSecurityGroupName==null? "" : System.Uri.EscapeDataString(CacheSecurityGroupName))+"&EC2SecurityGroupName=" + (EC2SecurityGroupName==null? "" : System.Uri.EscapeDataString(EC2SecurityGroupName))+"&EC2SecurityGroupOwnerId=" + (EC2SecurityGroupOwnerId==null? "" : System.Uri.EscapeDataString(EC2SecurityGroupOwnerId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start the migration of data.
		/// GET_StartMigration #Action=StartMigration
		/// </summary>
		/// <param name="ReplicationGroupId">The ID of the replication group to which data should be migrated.</param>
		/// <param name="CustomerNodeEndpointList">List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.</param>
		/// <returns>Success</returns>
		public async Task GET_StartMigrationAsync(string ReplicationGroupId, CustomerNodeEndpoint[] CustomerNodeEndpointList, GET_StartMigrationAction Action, GET_StartMigrationVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=StartMigration?ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&"+string.Join("&", CustomerNodeEndpointList.Select(z => $"CustomerNodeEndpointList={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p>This API is designed for testing the behavior of your application in case of ElastiCache failover. It is not designed to be an operational tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large-scale operational events, Amazon may block this API. </p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and Amazon CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the Amazon CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from primary node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from primary node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ </a> in the <i>ElastiCache User Guide</i>.</p>
		/// GET_TestFailover #Action=TestFailover
		/// </summary>
		/// <param name="ReplicationGroupId">The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.</param>
		/// <param name="NodeGroupId">The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
		/// Min length: 1
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task GET_TestFailoverAsync(string ReplicationGroupId, string NodeGroupId, GET_TestFailoverAction Action, GET_TestFailoverVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TestFailover?ReplicationGroupId=" + (ReplicationGroupId==null? "" : System.Uri.EscapeDataString(ReplicationGroupId))+"&NodeGroupId=" + (NodeGroupId==null? "" : System.Uri.EscapeDataString(NodeGroupId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GET_AddTagsToResourceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AddTagsToResource")]
		AddTagsToResource = 0,
	}
	
	public enum GET_AddTagsToResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_AddTagsToResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_AuthorizeCacheSecurityGroupIngressAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AuthorizeCacheSecurityGroupIngress")]
		AuthorizeCacheSecurityGroupIngress = 0,
	}
	
	public enum GET_AuthorizeCacheSecurityGroupIngressVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_AuthorizeCacheSecurityGroupIngressVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_BatchApplyUpdateActionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BatchApplyUpdateAction")]
		BatchApplyUpdateAction = 0,
	}
	
	public enum GET_BatchApplyUpdateActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_BatchApplyUpdateActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_BatchStopUpdateActionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BatchStopUpdateAction")]
		BatchStopUpdateAction = 0,
	}
	
	public enum GET_BatchStopUpdateActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_BatchStopUpdateActionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_CompleteMigrationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CompleteMigration")]
		CompleteMigration = 0,
	}
	
	public enum GET_CompleteMigrationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_CompleteMigrationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_CopySnapshotAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CopySnapshot")]
		CopySnapshot = 0,
	}
	
	public enum GET_CopySnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_CopySnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_CreateCacheClusterAZMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="single-az")]
		singleMinusaz = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cross-az")]
		crossMinusaz = 1,
	}
	
	public enum GET_CreateCacheClusterOutpostMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="single-outpost")]
		singleMinusoutpost = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cross-outpost")]
		crossMinusoutpost = 1,
	}
	
	public enum GET_CreateCacheClusterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateCacheCluster")]
		CreateCacheCluster = 0,
	}
	
	public enum GET_CreateCacheClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_CreateCacheClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_CreateCacheParameterGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateCacheParameterGroup")]
		CreateCacheParameterGroup = 0,
	}
	
	public enum GET_CreateCacheParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_CreateCacheParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_CreateCacheSecurityGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateCacheSecurityGroup")]
		CreateCacheSecurityGroup = 0,
	}
	
	public enum GET_CreateCacheSecurityGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_CreateCacheSecurityGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_CreateCacheSubnetGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateCacheSubnetGroup")]
		CreateCacheSubnetGroup = 0,
	}
	
	public enum GET_CreateCacheSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_CreateCacheSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_CreateGlobalReplicationGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateGlobalReplicationGroup")]
		CreateGlobalReplicationGroup = 0,
	}
	
	public enum GET_CreateGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_CreateGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_CreateReplicationGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateReplicationGroup")]
		CreateReplicationGroup = 0,
	}
	
	public enum GET_CreateReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_CreateReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_CreateSnapshotAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateSnapshot")]
		CreateSnapshot = 0,
	}
	
	public enum GET_CreateSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_CreateSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public class GET_CreateUserAuthenticationMode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputAuthenticationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Passwords { get; set; }
	}
	
	public enum GET_CreateUserAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateUser")]
		CreateUser = 0,
	}
	
	public enum GET_CreateUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_CreateUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_CreateUserGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateUserGroup")]
		CreateUserGroup = 0,
	}
	
	public enum GET_CreateUserGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_CreateUserGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DecreaseNodeGroupsInGlobalReplicationGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DecreaseNodeGroupsInGlobalReplicationGroup")]
		DecreaseNodeGroupsInGlobalReplicationGroup = 0,
	}
	
	public enum GET_DecreaseNodeGroupsInGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DecreaseNodeGroupsInGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DecreaseReplicaCountAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DecreaseReplicaCount")]
		DecreaseReplicaCount = 0,
	}
	
	public enum GET_DecreaseReplicaCountVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DecreaseReplicaCountVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DeleteCacheClusterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteCacheCluster")]
		DeleteCacheCluster = 0,
	}
	
	public enum GET_DeleteCacheClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DeleteCacheClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DeleteCacheParameterGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteCacheParameterGroup")]
		DeleteCacheParameterGroup = 0,
	}
	
	public enum GET_DeleteCacheParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DeleteCacheParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DeleteCacheSecurityGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteCacheSecurityGroup")]
		DeleteCacheSecurityGroup = 0,
	}
	
	public enum GET_DeleteCacheSecurityGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DeleteCacheSecurityGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DeleteCacheSubnetGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteCacheSubnetGroup")]
		DeleteCacheSubnetGroup = 0,
	}
	
	public enum GET_DeleteCacheSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DeleteCacheSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DeleteGlobalReplicationGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteGlobalReplicationGroup")]
		DeleteGlobalReplicationGroup = 0,
	}
	
	public enum GET_DeleteGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DeleteGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DeleteReplicationGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteReplicationGroup")]
		DeleteReplicationGroup = 0,
	}
	
	public enum GET_DeleteReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DeleteReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DeleteSnapshotAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteSnapshot")]
		DeleteSnapshot = 0,
	}
	
	public enum GET_DeleteSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DeleteSnapshotVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DeleteUserAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteUser")]
		DeleteUser = 0,
	}
	
	public enum GET_DeleteUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DeleteUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DeleteUserGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteUserGroup")]
		DeleteUserGroup = 0,
	}
	
	public enum GET_DeleteUserGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DeleteUserGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeCacheClustersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeCacheClusters")]
		DescribeCacheClusters = 0,
	}
	
	public enum GET_DescribeCacheClustersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeCacheClustersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeCacheEngineVersionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeCacheEngineVersions")]
		DescribeCacheEngineVersions = 0,
	}
	
	public enum GET_DescribeCacheEngineVersionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeCacheEngineVersionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeCacheParameterGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeCacheParameterGroups")]
		DescribeCacheParameterGroups = 0,
	}
	
	public enum GET_DescribeCacheParameterGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeCacheParameterGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeCacheParametersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeCacheParameters")]
		DescribeCacheParameters = 0,
	}
	
	public enum GET_DescribeCacheParametersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeCacheParametersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeCacheSecurityGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeCacheSecurityGroups")]
		DescribeCacheSecurityGroups = 0,
	}
	
	public enum GET_DescribeCacheSecurityGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeCacheSecurityGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeCacheSubnetGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeCacheSubnetGroups")]
		DescribeCacheSubnetGroups = 0,
	}
	
	public enum GET_DescribeCacheSubnetGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeCacheSubnetGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeEngineDefaultParametersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeEngineDefaultParameters")]
		DescribeEngineDefaultParameters = 0,
	}
	
	public enum GET_DescribeEngineDefaultParametersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeEngineDefaultParametersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeEventsSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cache-cluster")]
		cacheMinuscluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cache-parameter-group")]
		cacheMinusparameterMinusgroup = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cache-security-group")]
		cacheMinussecurityMinusgroup = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cache-subnet-group")]
		cacheMinussubnetMinusgroup = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="replication-group")]
		replicationMinusgroup = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user")]
		user = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user-group")]
		userMinusgroup = 6,
	}
	
	public enum GET_DescribeEventsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeEvents")]
		DescribeEvents = 0,
	}
	
	public enum GET_DescribeEventsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeEventsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeGlobalReplicationGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeGlobalReplicationGroups")]
		DescribeGlobalReplicationGroups = 0,
	}
	
	public enum GET_DescribeGlobalReplicationGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeGlobalReplicationGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeReplicationGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeReplicationGroups")]
		DescribeReplicationGroups = 0,
	}
	
	public enum GET_DescribeReplicationGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeReplicationGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeReservedCacheNodesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeReservedCacheNodes")]
		DescribeReservedCacheNodes = 0,
	}
	
	public enum GET_DescribeReservedCacheNodesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeReservedCacheNodesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeReservedCacheNodesOfferingsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeReservedCacheNodesOfferings")]
		DescribeReservedCacheNodesOfferings = 0,
	}
	
	public enum GET_DescribeReservedCacheNodesOfferingsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeReservedCacheNodesOfferingsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeServiceUpdatesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeServiceUpdates")]
		DescribeServiceUpdates = 0,
	}
	
	public enum GET_DescribeServiceUpdatesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeServiceUpdatesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeSnapshotsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeSnapshots")]
		DescribeSnapshots = 0,
	}
	
	public enum GET_DescribeSnapshotsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeSnapshotsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public class GET_DescribeUpdateActionsServiceUpdateTimeRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	public enum GET_DescribeUpdateActionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeUpdateActions")]
		DescribeUpdateActions = 0,
	}
	
	public enum GET_DescribeUpdateActionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeUpdateActionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeUserGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeUserGroups")]
		DescribeUserGroups = 0,
	}
	
	public enum GET_DescribeUserGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeUserGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DescribeUsersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeUsers")]
		DescribeUsers = 0,
	}
	
	public enum GET_DescribeUsersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DescribeUsersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_DisassociateGlobalReplicationGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DisassociateGlobalReplicationGroup")]
		DisassociateGlobalReplicationGroup = 0,
	}
	
	public enum GET_DisassociateGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_DisassociateGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_FailoverGlobalReplicationGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FailoverGlobalReplicationGroup")]
		FailoverGlobalReplicationGroup = 0,
	}
	
	public enum GET_FailoverGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_FailoverGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_IncreaseNodeGroupsInGlobalReplicationGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IncreaseNodeGroupsInGlobalReplicationGroup")]
		IncreaseNodeGroupsInGlobalReplicationGroup = 0,
	}
	
	public enum GET_IncreaseNodeGroupsInGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_IncreaseNodeGroupsInGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_IncreaseReplicaCountAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IncreaseReplicaCount")]
		IncreaseReplicaCount = 0,
	}
	
	public enum GET_IncreaseReplicaCountVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_IncreaseReplicaCountVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_ListAllowedNodeTypeModificationsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListAllowedNodeTypeModifications")]
		ListAllowedNodeTypeModifications = 0,
	}
	
	public enum GET_ListAllowedNodeTypeModificationsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_ListAllowedNodeTypeModificationsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_ListTagsForResourceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListTagsForResource")]
		ListTagsForResource = 0,
	}
	
	public enum GET_ListTagsForResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_ListTagsForResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_ModifyCacheClusterAZMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="single-az")]
		singleMinusaz = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cross-az")]
		crossMinusaz = 1,
	}
	
	public enum GET_ModifyCacheClusterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyCacheCluster")]
		ModifyCacheCluster = 0,
	}
	
	public enum GET_ModifyCacheClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_ModifyCacheClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_ModifyCacheParameterGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyCacheParameterGroup")]
		ModifyCacheParameterGroup = 0,
	}
	
	public enum GET_ModifyCacheParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_ModifyCacheParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_ModifyCacheSubnetGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyCacheSubnetGroup")]
		ModifyCacheSubnetGroup = 0,
	}
	
	public enum GET_ModifyCacheSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_ModifyCacheSubnetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_ModifyGlobalReplicationGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyGlobalReplicationGroup")]
		ModifyGlobalReplicationGroup = 0,
	}
	
	public enum GET_ModifyGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_ModifyGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_ModifyReplicationGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyReplicationGroup")]
		ModifyReplicationGroup = 0,
	}
	
	public enum GET_ModifyReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_ModifyReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_ModifyReplicationGroupShardConfigurationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyReplicationGroupShardConfiguration")]
		ModifyReplicationGroupShardConfiguration = 0,
	}
	
	public enum GET_ModifyReplicationGroupShardConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_ModifyReplicationGroupShardConfigurationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public class GET_ModifyUserAuthenticationMode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputAuthenticationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Passwords { get; set; }
	}
	
	public enum GET_ModifyUserAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyUser")]
		ModifyUser = 0,
	}
	
	public enum GET_ModifyUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_ModifyUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_ModifyUserGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ModifyUserGroup")]
		ModifyUserGroup = 0,
	}
	
	public enum GET_ModifyUserGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_ModifyUserGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_PurchaseReservedCacheNodesOfferingAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PurchaseReservedCacheNodesOffering")]
		PurchaseReservedCacheNodesOffering = 0,
	}
	
	public enum GET_PurchaseReservedCacheNodesOfferingVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_PurchaseReservedCacheNodesOfferingVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_RebalanceSlotsInGlobalReplicationGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RebalanceSlotsInGlobalReplicationGroup")]
		RebalanceSlotsInGlobalReplicationGroup = 0,
	}
	
	public enum GET_RebalanceSlotsInGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_RebalanceSlotsInGlobalReplicationGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_RebootCacheClusterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RebootCacheCluster")]
		RebootCacheCluster = 0,
	}
	
	public enum GET_RebootCacheClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_RebootCacheClusterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_RemoveTagsFromResourceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RemoveTagsFromResource")]
		RemoveTagsFromResource = 0,
	}
	
	public enum GET_RemoveTagsFromResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_RemoveTagsFromResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_ResetCacheParameterGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ResetCacheParameterGroup")]
		ResetCacheParameterGroup = 0,
	}
	
	public enum GET_ResetCacheParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_ResetCacheParameterGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_RevokeCacheSecurityGroupIngressAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RevokeCacheSecurityGroupIngress")]
		RevokeCacheSecurityGroupIngress = 0,
	}
	
	public enum GET_RevokeCacheSecurityGroupIngressVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_RevokeCacheSecurityGroupIngressVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_StartMigrationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StartMigration")]
		StartMigration = 0,
	}
	
	public enum GET_StartMigrationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_StartMigrationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum GET_TestFailoverAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TestFailover")]
		TestFailover = 0,
	}
	
	public enum GET_TestFailoverVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
	
	public enum POST_TestFailoverVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-02-02")]
		_2015Minus02Minus02 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
