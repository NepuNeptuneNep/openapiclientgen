//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Identifies an account and how to log into it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Account
	{
		
		/// <summary>
		/// Enables automatic Google account login. If set, the service automatically generates a Google test account and adds it to the device, before executing the test. Note that test accounts might be reused. Many applications show their full set of functionalities when an account is present on the device. Logging into the device with these generated accounts allows testing more functionalities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleAuto")]
		public GoogleAuto GoogleAuto { get; set; }
	}
	
	/// <summary>
	/// Enables automatic Google account login. If set, the service automatically generates a Google test account and adds it to the device, before executing the test. Note that test accounts might be reused. Many applications show their full set of functionalities when an account is present on the device. Logging into the device with these generated accounts allows testing more functionalities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAuto
	{
	}
	
	/// <summary>
	/// A single Android device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AndroidDevice
	{
		
		/// <summary>
		/// Required. The id of the Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidModelId")]
		public string AndroidModelId { get; set; }
		
		/// <summary>
		/// Required. The id of the Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidVersionId")]
		public string AndroidVersionId { get; set; }
		
		/// <summary>
		/// Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public string Orientation { get; set; }
	}
	
	/// <summary>
	/// The currently supported Android devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AndroidDeviceCatalog
	{
		
		/// <summary>
		/// The set of supported Android device models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="models")]
		public AndroidModel[] Models { get; set; }
		
		/// <summary>
		/// Android configuration that can be selected at the time a test is run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeConfiguration")]
		public AndroidRuntimeConfiguration RuntimeConfiguration { get; set; }
		
		/// <summary>
		/// The set of supported Android OS versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public AndroidVersion[] Versions { get; set; }
	}
	
	/// <summary>
	/// A description of an Android device tests may be run on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AndroidModel
	{
		
		/// <summary>
		/// The company that this device is branded with. Example: "Google", "Samsung".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// The name of the industrial design. This corresponds to android.os.Build.DEVICE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codename")]
		public string Codename { get; set; }
		
		/// <summary>
		/// Whether this device is virtual or physical.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form")]
		public System.Nullable<AndroidModelForm> Form { get; set; }
		
		/// <summary>
		/// Whether this device is a phone, tablet, wearable, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formFactor")]
		public System.Nullable<AndroidModelFormFactor> FormFactor { get; set; }
		
		/// <summary>
		/// The unique opaque id for this model. Use this for invoking the TestExecutionService.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// True if and only if tests with this model are recorded by stitching together screenshots. See use_low_spec_video_recording in device config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lowFpsVideoRecording")]
		public System.Nullable<System.Boolean> LowFpsVideoRecording { get; set; }
		
		/// <summary>
		/// The manufacturer of this device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
		
		/// <summary>
		/// The human-readable marketing name for this device model. Examples: "Nexus 5", "Galaxy S5".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Version-specific information of an Android model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perVersionInfo")]
		public PerAndroidVersionInfo[] PerVersionInfo { get; set; }
		
		/// <summary>
		/// Screen density in DPI. This corresponds to ro.sf.lcd_density
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenDensity")]
		public System.Nullable<System.Int32> ScreenDensity { get; set; }
		
		/// <summary>
		/// Screen size in the horizontal (X) dimension measured in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenX")]
		public System.Nullable<System.Int32> ScreenX { get; set; }
		
		/// <summary>
		/// Screen size in the vertical (Y) dimension measured in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenY")]
		public System.Nullable<System.Int32> ScreenY { get; set; }
		
		/// <summary>
		/// The list of supported ABIs for this device. This corresponds to either android.os.Build.SUPPORTED_ABIS (for API level 21 and above) or android.os.Build.CPU_ABI/CPU_ABI2. The most preferred ABI is the first element in the list. Elements are optionally prefixed by "version_id:" (where version_id is the id of an AndroidVersion), denoting an ABI that is supported only on a particular version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedAbis")]
		public string[] SupportedAbis { get; set; }
		
		/// <summary>
		/// The set of Android versions this device supports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedVersionIds")]
		public string[] SupportedVersionIds { get; set; }
		
		/// <summary>
		/// Tags for this dimension. Examples: "default", "preview", "deprecated".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// URL of a thumbnail image (photo) of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AndroidModelForm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_FORM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHYSICAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMULATOR = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AndroidModelFormFactor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_FORM_FACTOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLET = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEARABLE = 3,
	}
	
	/// <summary>
	/// A version-specific information of an Android model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PerAndroidVersionInfo
	{
		
		/// <summary>
		/// The number of online devices for an Android version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceCapacity")]
		public System.Nullable<PerAndroidVersionInfoDeviceCapacity> DeviceCapacity { get; set; }
		
		/// <summary>
		/// Denotes whether Direct Access is supported, and by which client versions. DirectAccessService is currently available as a preview to select developers. You can register today on behalf of you and your team at https://developer.android.com/studio/preview/android-device-streaming
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directAccessVersionInfo")]
		public DirectAccessVersionInfo DirectAccessVersionInfo { get; set; }
		
		/// <summary>
		/// An Android version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionId")]
		public string VersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PerAndroidVersionInfoDeviceCapacity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_CAPACITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_CAPACITY_HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_CAPACITY_MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_CAPACITY_LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_CAPACITY_NONE = 4,
	}
	
	/// <summary>
	/// Denotes whether Direct Access is supported, and by which client versions. DirectAccessService is currently available as a preview to select developers. You can register today on behalf of you and your team at https://developer.android.com/studio/preview/android-device-streaming
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DirectAccessVersionInfo
	{
		
		/// <summary>
		/// Whether direct access is supported at all. Clients are expected to filter down the device list to only android models and versions which support Direct Access when that is the user intent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directAccessSupported")]
		public System.Nullable<System.Boolean> DirectAccessSupported { get; set; }
		
		/// <summary>
		/// Output only. Indicates client-device compatibility, where a device is known to work only with certain workarounds implemented in the Android Studio client. Expected format "major.minor.micro.patch", e.g. "5921.22.2211.8881706".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumAndroidStudioVersion")]
		public string MinimumAndroidStudioVersion { get; set; }
	}
	
	/// <summary>
	/// Android configuration that can be selected at the time a test is run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AndroidRuntimeConfiguration
	{
		
		/// <summary>
		/// The set of available locales.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locales")]
		public Locale[] Locales { get; set; }
		
		/// <summary>
		/// The set of available orientations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orientations")]
		public Orientation[] Orientations { get; set; }
	}
	
	/// <summary>
	/// A location/region designation for language.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Locale
	{
		
		/// <summary>
		/// The id for this locale. Example: "en_US".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A human-friendly name for this language/locale. Example: "English".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A human-friendly string representing the region for this locale. Example: "United States". Not present for every locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Tags for this dimension. Example: "default".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// Screen orientation of the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Orientation
	{
		
		/// <summary>
		/// The id for this orientation. Example: "portrait".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A human-friendly name for this orientation. Example: "portrait".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Tags for this dimension. Example: "default".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// A version of the Android OS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AndroidVersion
	{
		
		/// <summary>
		/// The API level for this Android version. Examples: 18, 19.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiLevel")]
		public System.Nullable<System.Int32> ApiLevel { get; set; }
		
		/// <summary>
		/// The code name for this Android version. Examples: "JellyBean", "KitKat".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeName")]
		public string CodeName { get; set; }
		
		/// <summary>
		/// Data about the relative number of devices running a given configuration of the Android platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distribution")]
		public Distribution Distribution { get; set; }
		
		/// <summary>
		/// An opaque id for this Android version. Use this id to invoke the TestExecutionService.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseDate")]
		public Date ReleaseDate { get; set; }
		
		/// <summary>
		/// Tags for this dimension. Examples: "default", "preview", "deprecated".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// A string representing this version of the Android OS. Examples: "4.3", "4.4".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionString")]
		public string VersionString { get; set; }
	}
	
	/// <summary>
	/// Data about the relative number of devices running a given configuration of the Android platform.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Distribution
	{
		
		/// <summary>
		/// Output only. The estimated fraction (0-1) of the total market with this configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketShare")]
		public System.Nullable<System.Double> MarketShare { get; set; }
		
		/// <summary>
		/// Output only. The time this distribution was measured.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementTime")]
		public string MeasurementTime { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// A list of Android device configurations in which the test is to be executed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AndroidDeviceList
	{
		
		/// <summary>
		/// Required. A list of Android devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidDevices")]
		public AndroidDevice[] AndroidDevices { get; set; }
	}
	
	/// <summary>
	/// A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AndroidInstrumentationTest
	{
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appApk")]
		public FileReference AppApk { get; set; }
		
		/// <summary>
		/// An Android App Bundle file format, containing a BundleConfig.pb file, a base module directory, zero or more dynamic feature module directories. See https://developer.android.com/guide/app-bundle/build for guidance on building App Bundles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appBundle")]
		public AppBundle AppBundle { get; set; }
		
		/// <summary>
		/// The java package for the application under test. The default value is determined by examining the application's manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appPackageId")]
		public string AppPackageId { get; set; }
		
		/// <summary>
		/// The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orchestratorOption")]
		public System.Nullable<AndroidInstrumentationTestOrchestratorOption> OrchestratorOption { get; set; }
		
		/// <summary>
		/// Options for enabling sharding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shardingOption")]
		public ShardingOption ShardingOption { get; set; }
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testApk")]
		public FileReference TestApk { get; set; }
		
		/// <summary>
		/// The java package for the test to be executed. The default value is determined by examining the application's manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testPackageId")]
		public string TestPackageId { get; set; }
		
		/// <summary>
		/// The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testRunnerClass")]
		public string TestRunnerClass { get; set; }
		
		/// <summary>
		/// Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name" If empty, all targets in the module will be run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testTargets")]
		public string[] TestTargets { get; set; }
	}
	
	/// <summary>
	/// A reference to a file, used for user inputs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileReference
	{
		
		/// <summary>
		/// A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsPath")]
		public string GcsPath { get; set; }
	}
	
	/// <summary>
	/// An Android App Bundle file format, containing a BundleConfig.pb file, a base module directory, zero or more dynamic feature module directories. See https://developer.android.com/guide/app-bundle/build for guidance on building App Bundles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppBundle
	{
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleLocation")]
		public FileReference BundleLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AndroidInstrumentationTestOrchestratorOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORCHESTRATOR_OPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_ORCHESTRATOR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO_NOT_USE_ORCHESTRATOR = 2,
	}
	
	/// <summary>
	/// Options for enabling sharding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShardingOption
	{
		
		/// <summary>
		/// Shards test cases into the specified groups of packages, classes, and/or methods. With manual sharding enabled, specifying test targets via environment_variables or in InstrumentationTest is invalid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualSharding")]
		public ManualSharding ManualSharding { get; set; }
		
		/// <summary>
		/// Shards test based on previous test case timing records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartSharding")]
		public SmartSharding SmartSharding { get; set; }
		
		/// <summary>
		/// Uniformly shards test cases given a total number of shards. For instrumentation tests, it will be translated to "-e numShard" and "-e shardIndex" AndroidJUnitRunner arguments. With uniform sharding enabled, specifying either of these sharding arguments via `environment_variables` is invalid. Based on the sharding mechanism AndroidJUnitRunner uses, there is no guarantee that test cases will be distributed uniformly across all shards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniformSharding")]
		public UniformSharding UniformSharding { get; set; }
	}
	
	/// <summary>
	/// Shards test cases into the specified groups of packages, classes, and/or methods. With manual sharding enabled, specifying test targets via environment_variables or in InstrumentationTest is invalid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManualSharding
	{
		
		/// <summary>
		/// Required. Group of packages, classes, and/or test methods to be run for each manually-created shard. You must specify at least one shard if this field is present. When you select one or more physical devices, the number of repeated test_targets_for_shard must be <= 50. When you select one or more ARM virtual devices, it must be <= 200. When you select only x86 virtual devices, it must be <= 500.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testTargetsForShard")]
		public TestTargetsForShard[] TestTargetsForShard { get; set; }
	}
	
	/// <summary>
	/// Test targets for a shard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestTargetsForShard
	{
		
		/// <summary>
		/// Group of packages, classes, and/or test methods to be run for each shard. The targets need to be specified in AndroidJUnitRunner argument format. For example, "package com.my.packages" "class com.my.package.MyClass". The number of test_targets must be greater than 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testTargets")]
		public string[] TestTargets { get; set; }
	}
	
	/// <summary>
	/// Shards test based on previous test case timing records.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SmartSharding
	{
		
		/// <summary>
		/// The amount of time tests within a shard should take. Default: 300 seconds (5 minutes). The minimum allowed: 120 seconds (2 minutes). The shard count is dynamically set based on time, up to the maximum shard limit (described below). To guarantee at least one test case for each shard, the number of shards will not exceed the number of test cases. Shard duration will be exceeded if: - The maximum shard limit is reached and there is more calculated test time remaining to allocate into shards. - Any individual test is estimated to be longer than the targeted shard duration. Shard duration is not guaranteed because smart sharding uses test case history and default durations which may not be accurate. The rules for finding the test case timing records are: - If the service has processed a test case in the last 30 days, the record of the latest successful test case will be used. - For new test cases, the average duration of other known test cases will be used. - If there are no previous test case timing records available, the default test case duration is 15 seconds. Because the actual shard duration can exceed the targeted shard duration, we recommend that you set the targeted value at least 5 minutes less than the maximum allowed test timeout (45 minutes for physical devices and 60 minutes for virtual), or that you use the custom test timeout value that you set. This approach avoids cancelling the shard before all tests can finish. Note that there is a limit for maximum number of shards. When you select one or more physical devices, the number of shards must be <= 50. When you select one or more ARM virtual devices, it must be <= 200. When you select only x86 virtual devices, it must be <= 500. To guarantee at least one test case for per shard, the number of shards will not exceed the number of test cases. Each shard created counts toward daily test quota.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetedShardDuration")]
		public string TargetedShardDuration { get; set; }
	}
	
	/// <summary>
	/// Uniformly shards test cases given a total number of shards. For instrumentation tests, it will be translated to "-e numShard" and "-e shardIndex" AndroidJUnitRunner arguments. With uniform sharding enabled, specifying either of these sharding arguments via `environment_variables` is invalid. Based on the sharding mechanism AndroidJUnitRunner uses, there is no guarantee that test cases will be distributed uniformly across all shards.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UniformSharding
	{
		
		/// <summary>
		/// Required. The total number of shards to create. This must always be a positive number that is no greater than the total number of test cases. When you select one or more physical devices, the number of shards must be <= 50. When you select one or more ARM virtual devices, it must be <= 200. When you select only x86 virtual devices, it must be <= 500.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numShards")]
		public System.Nullable<System.Int32> NumShards { get; set; }
	}
	
	/// <summary>
	/// A set of Android device configuration permutations is defined by the the cross-product of the given axes. Internally, the given AndroidMatrix will be expanded into a set of AndroidDevices. Only supported permutations will be instantiated. Invalid permutations (e.g., incompatible models/versions) are ignored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AndroidMatrix
	{
		
		/// <summary>
		/// Required. The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidModelIds")]
		public string[] AndroidModelIds { get; set; }
		
		/// <summary>
		/// Required. The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidVersionIds")]
		public string[] AndroidVersionIds { get; set; }
		
		/// <summary>
		/// Required. The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locales")]
		public string[] Locales { get; set; }
		
		/// <summary>
		/// Required. The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orientations")]
		public string[] Orientations { get; set; }
	}
	
	/// <summary>
	/// A test of an android application that explores the application on a virtual or physical Android Device, finding culprits and crashes as it goes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AndroidRoboTest
	{
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appApk")]
		public FileReference AppApk { get; set; }
		
		/// <summary>
		/// An Android App Bundle file format, containing a BundleConfig.pb file, a base module directory, zero or more dynamic feature module directories. See https://developer.android.com/guide/app-bundle/build for guidance on building App Bundles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appBundle")]
		public AppBundle AppBundle { get; set; }
		
		/// <summary>
		/// The initial activity that should be used to start the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appInitialActivity")]
		public string AppInitialActivity { get; set; }
		
		/// <summary>
		/// The java package for the application under test. The default value is determined by examining the application's manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appPackageId")]
		public string AppPackageId { get; set; }
		
		/// <summary>
		/// The max depth of the traversal stack Robo can explore. Needs to be at least 2 to make Robo explore the app beyond the first activity. Default is 50.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDepth")]
		public System.Nullable<System.Int32> MaxDepth { get; set; }
		
		/// <summary>
		/// The max number of steps Robo can execute. Default is no limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSteps")]
		public System.Nullable<System.Int32> MaxSteps { get; set; }
		
		/// <summary>
		/// A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roboDirectives")]
		public RoboDirective[] RoboDirectives { get; set; }
		
		/// <summary>
		/// The mode in which Robo should run. Most clients should allow the server to populate this field automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roboMode")]
		public System.Nullable<AndroidRoboTestRoboMode> RoboMode { get; set; }
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roboScript")]
		public FileReference RoboScript { get; set; }
		
		/// <summary>
		/// The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startingIntents")]
		public RoboStartingIntent[] StartingIntents { get; set; }
	}
	
	/// <summary>
	/// Directs Robo to interact with a specific UI element if it is encountered during the crawl. Currently, Robo can perform text entry or element click.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoboDirective
	{
		
		/// <summary>
		/// Required. The type of action that Robo should perform on the specified element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionType")]
		public System.Nullable<RoboDirectiveActionType> ActionType { get; set; }
		
		/// <summary>
		/// The text that Robo is directed to set. If left empty, the directive will be treated as a CLICK on the element matching the resource_name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputText")]
		public string InputText { get; set; }
		
		/// <summary>
		/// Required. The android resource name of the target UI element. For example, in Java: R.string.foo in xml: @string/foo Only the "foo" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RoboDirectiveActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_CLICK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTER_TEXT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AndroidRoboTestRoboMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROBO_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROBO_VERSION_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROBO_VERSION_2 = 2,
	}
	
	/// <summary>
	/// Message for specifying the start activities to crawl.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoboStartingIntent
	{
		
		/// <summary>
		/// Specifies an intent that starts the main launcher activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launcherActivity")]
		public LauncherActivityIntent LauncherActivity { get; set; }
		
		/// <summary>
		/// Skips the starting activity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noActivity")]
		public NoActivityIntent NoActivity { get; set; }
		
		/// <summary>
		/// A starting intent specified by an action, uri, and categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startActivity")]
		public StartActivityIntent StartActivity { get; set; }
		
		/// <summary>
		/// Timeout in seconds for each intent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
	}
	
	/// <summary>
	/// Specifies an intent that starts the main launcher activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LauncherActivityIntent
	{
	}
	
	/// <summary>
	/// Skips the starting activity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NoActivityIntent
	{
	}
	
	/// <summary>
	/// A starting intent specified by an action, uri, and categories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartActivityIntent
	{
		
		/// <summary>
		/// Action name. Required for START_ACTIVITY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Intent categories to set on the intent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// URI for the action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// A test of an Android Application with a Test Loop. The intent \ will be implicitly added, since Games is the only user of this api, for the time being.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AndroidTestLoop
	{
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appApk")]
		public FileReference AppApk { get; set; }
		
		/// <summary>
		/// An Android App Bundle file format, containing a BundleConfig.pb file, a base module directory, zero or more dynamic feature module directories. See https://developer.android.com/guide/app-bundle/build for guidance on building App Bundles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appBundle")]
		public AppBundle AppBundle { get; set; }
		
		/// <summary>
		/// The java package for the application under test. The default is determined by examining the application's manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appPackageId")]
		public string AppPackageId { get; set; }
		
		/// <summary>
		/// The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scenarioLabels")]
		public string[] ScenarioLabels { get; set; }
		
		/// <summary>
		/// The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scenarios")]
		public int[] Scenarios { get; set; }
	}
	
	/// <summary>
	/// An Android package file to install.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Apk
	{
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public FileReference Location { get; set; }
		
		/// <summary>
		/// The java package for the APK to be installed. Value is determined by examining the application's manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
	}
	
	/// <summary>
	/// Android application details based on application manifest and apk archive contents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApkDetail
	{
		
		/// <summary>
		/// An Android app manifest. See http://developer.android.com/guide/topics/manifest/manifest-intro.html
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apkManifest")]
		public ApkManifest ApkManifest { get; set; }
	}
	
	/// <summary>
	/// An Android app manifest. See http://developer.android.com/guide/topics/manifest/manifest-intro.html
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApkManifest
	{
		
		/// <summary>
		/// User-readable name for the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationLabel")]
		public string ApplicationLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentFilters")]
		public IntentFilter[] IntentFilters { get; set; }
		
		/// <summary>
		/// Maximum API level on which the application is designed to run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSdkVersion")]
		public System.Nullable<System.Int32> MaxSdkVersion { get; set; }
		
		/// <summary>
		/// Meta-data tags defined in the manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata[] Metadata { get; set; }
		
		/// <summary>
		/// Minimum API level required for the application to run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minSdkVersion")]
		public System.Nullable<System.Int32> MinSdkVersion { get; set; }
		
		/// <summary>
		/// Full Java-style package name for this application, e.g. "com.example.foo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Services contained in the tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public Service[] Services { get; set; }
		
		/// <summary>
		/// Specifies the API Level on which the application is designed to run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetSdkVersion")]
		public System.Nullable<System.Int32> TargetSdkVersion { get; set; }
		
		/// <summary>
		/// Feature usage tags defined in the manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usesFeature")]
		public UsesFeature[] UsesFeature { get; set; }
		
		/// <summary>
		/// Permissions declared to be used by the application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usesPermission")]
		public string[] UsesPermission { get; set; }
		
		/// <summary>
		/// Version number used internally by the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public string VersionCode { get; set; }
		
		/// <summary>
		/// Version number shown to users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionName")]
		public string VersionName { get; set; }
	}
	
	/// <summary>
	/// The section of an tag. https://developer.android.com/guide/topics/manifest/intent-filter-element.html
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentFilter
	{
		
		/// <summary>
		/// The android:name value of the tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionNames")]
		public string[] ActionNames { get; set; }
		
		/// <summary>
		/// The android:name value of the tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryNames")]
		public string[] CategoryNames { get; set; }
		
		/// <summary>
		/// The android:mimeType value of the tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
	}
	
	/// <summary>
	/// A tag within a manifest. https://developer.android.com/guide/topics/manifest/meta-data-element.html
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metadata
	{
		
		/// <summary>
		/// The android:name value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The android:value value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The section of an tag. https://developer.android.com/guide/topics/manifest/service-element
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Service
	{
		
		/// <summary>
		/// Intent filters in the service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intentFilter")]
		public IntentFilter[] IntentFilter { get; set; }
		
		/// <summary>
		/// The android:name value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A tag within a manifest. https://developer.android.com/guide/topics/manifest/uses-feature-element.html
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UsesFeature
	{
		
		/// <summary>
		/// The android:required value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRequired")]
		public System.Nullable<System.Boolean> IsRequired { get; set; }
		
		/// <summary>
		/// The android:name value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The request object for cancelling a Device Session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelDeviceSessionRequest
	{
	}
	
	/// <summary>
	/// Response containing the current state of the specified test matrix.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelTestMatrixResponse
	{
		
		/// <summary>
		/// The current rolled-up state of the test matrix. If this state is already final, then the cancelation request will have no effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testState")]
		public System.Nullable<CancelTestMatrixResponseTestState> TestState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CancelTestMatrixResponseTestState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_ENVIRONMENT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPATIBLE_ENVIRONMENT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPATIBLE_ARCHITECTURE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID = 10,
	}
	
	/// <summary>
	/// Information about the client which invoked the test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientInfo
	{
		
		/// <summary>
		/// The list of detailed information about client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientInfoDetails")]
		public ClientInfoDetail[] ClientInfoDetails { get; set; }
		
		/// <summary>
		/// Required. Client name, such as gcloud.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Key-value pair of detailed information about the client which invoked the test. Examples: {'Version', '1.0'}, {'Release Track', 'BETA'}.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientInfoDetail
	{
		
		/// <summary>
		/// Required. The key of detailed client information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Required. The value of detailed client information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A single device file description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceFile
	{
		
		/// <summary>
		/// An opaque binary blob file to install on the device before the test starts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obbFile")]
		public ObbFile ObbFile { get; set; }
		
		/// <summary>
		/// A file or directory to install on the device before the test starts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regularFile")]
		public RegularFile RegularFile { get; set; }
	}
	
	/// <summary>
	/// An opaque binary blob file to install on the device before the test starts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObbFile
	{
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obb")]
		public FileReference Obb { get; set; }
		
		/// <summary>
		/// Required. OBB file name which must conform to the format as specified by Android e.g. [main|patch].0300110.com.example.android.obb which will be installed into \/Android/obb/\/ on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obbFileName")]
		public string ObbFileName { get; set; }
	}
	
	/// <summary>
	/// A file or directory to install on the device before the test starts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegularFile
	{
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public FileReference Content { get; set; }
		
		/// <summary>
		/// Required. Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to access files on the device in a portable way.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devicePath")]
		public string DevicePath { get; set; }
	}
	
	/// <summary>
	/// A single device IP block
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceIpBlock
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addedDate")]
		public Date AddedDate { get; set; }
		
		/// <summary>
		/// An IP address block in CIDR notation eg: 34.68.194.64/29
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="block")]
		public string Block { get; set; }
		
		/// <summary>
		/// Whether this block is used by physical or virtual devices
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form")]
		public AndroidModelForm Form { get; set; }
	}
	
	/// <summary>
	/// List of IP blocks used by the Firebase Test Lab
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceIpBlockCatalog
	{
		
		/// <summary>
		/// The device IP blocks used by Firebase Test Lab
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipBlocks")]
		public DeviceIpBlock[] IpBlocks { get; set; }
	}
	
	/// <summary>
	/// Protobuf message describing the device message, used from several RPCs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceSession
	{
		
		/// <summary>
		/// Output only. The timestamp that the session first became ACTIVE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeStartTime")]
		public string ActiveStartTime { get; set; }
		
		/// <summary>
		/// A single Android device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidDevice")]
		public AndroidDevice AndroidDevice { get; set; }
		
		/// <summary>
		/// Output only. The time that the Session was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The title of the DeviceSession to be presented in the UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Optional. If the device is still in use at this time, any connections will be ended and the SessionState will transition from ACTIVE to FINISHED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// Output only. The interval of time that this device must be interacted with before it transitions from ACTIVE to TIMEOUT_INACTIVITY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inactivityTimeout")]
		public string InactivityTimeout { get; set; }
		
		/// <summary>
		/// Optional. Name of the DeviceSession, e.g. "projects/{project_id}/deviceSessions/{session_id}"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Current state of the DeviceSession.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<DeviceSessionState> State { get; set; }
		
		/// <summary>
		/// Output only. The historical state transitions of the session_state message including the current session state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateHistories")]
		public SessionStateEvent[] StateHistories { get; set; }
		
		/// <summary>
		/// Optional. The amount of time that a device will be initially allocated for. This can eventually be extended with the UpdateDeviceSession RPC. Default: 30 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceSessionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SESSION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUESTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 7,
	}
	
	/// <summary>
	/// A message encapsulating a series of Session states and the time that the DeviceSession first entered those states.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SessionStateEvent
	{
		
		/// <summary>
		/// Output only. The time that the session_state first encountered that state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public string EventTime { get; set; }
		
		/// <summary>
		/// Output only. The session_state tracked by this event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionState")]
		public DeviceSessionState SessionState { get; set; }
		
		/// <summary>
		/// Output only. A human-readable message to explain the state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateMessage")]
		public string StateMessage { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// The environment in which the test is run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Environment
	{
		
		/// <summary>
		/// A single Android device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidDevice")]
		public AndroidDevice AndroidDevice { get; set; }
		
		/// <summary>
		/// A single iOS device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosDevice")]
		public IosDevice IosDevice { get; set; }
	}
	
	/// <summary>
	/// A single iOS device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IosDevice
	{
		
		/// <summary>
		/// Required. The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosModelId")]
		public string IosModelId { get; set; }
		
		/// <summary>
		/// Required. The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosVersionId")]
		public string IosVersionId { get; set; }
		
		/// <summary>
		/// Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public string Orientation { get; set; }
	}
	
	/// <summary>
	/// The matrix of environments in which the test is to be executed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnvironmentMatrix
	{
		
		/// <summary>
		/// A list of Android device configurations in which the test is to be executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidDeviceList")]
		public AndroidDeviceList AndroidDeviceList { get; set; }
		
		/// <summary>
		/// A set of Android device configuration permutations is defined by the the cross-product of the given axes. Internally, the given AndroidMatrix will be expanded into a set of AndroidDevices. Only supported permutations will be instantiated. Invalid permutations (e.g., incompatible models/versions) are ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidMatrix")]
		public AndroidMatrix AndroidMatrix { get; set; }
		
		/// <summary>
		/// A list of iOS device configurations in which the test is to be executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosDeviceList")]
		public IosDeviceList IosDeviceList { get; set; }
	}
	
	/// <summary>
	/// A list of iOS device configurations in which the test is to be executed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IosDeviceList
	{
		
		/// <summary>
		/// Required. A list of iOS devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosDevices")]
		public IosDevice[] IosDevices { get; set; }
	}
	
	/// <summary>
	/// A key-value pair passed as an environment variable to the test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnvironmentVariable
	{
		
		/// <summary>
		/// Key for the environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Value for the environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Response containing the details of the specified Android application APK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetApkDetailsResponse
	{
		
		/// <summary>
		/// Android application details based on application manifest and apk archive contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apkDetail")]
		public ApkDetail ApkDetail { get; set; }
	}
	
	/// <summary>
	/// A storage location within Google cloud storage (GCS).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudStorage
	{
		
		/// <summary>
		/// Required. The path to a directory in GCS that will eventually contain the results for this test. The requesting user must have write access on the bucket in the supplied path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsPath")]
		public string GcsPath { get; set; }
	}
	
	/// <summary>
	/// The currently supported iOS devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IosDeviceCatalog
	{
		
		/// <summary>
		/// The set of supported iOS device models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="models")]
		public IosModel[] Models { get; set; }
		
		/// <summary>
		/// iOS configuration that can be selected at the time a test is run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeConfiguration")]
		public IosRuntimeConfiguration RuntimeConfiguration { get; set; }
		
		/// <summary>
		/// The set of supported iOS software versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public IosVersion[] Versions { get; set; }
		
		/// <summary>
		/// The set of supported Xcode versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xcodeVersions")]
		public XcodeVersion[] XcodeVersions { get; set; }
	}
	
	/// <summary>
	/// A description of an iOS device tests may be run on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IosModel
	{
		
		/// <summary>
		/// Device capabilities. Copied from https://developer.apple.com/library/archive/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/DeviceCompatibilityMatrix/DeviceCompatibilityMatrix.html
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceCapabilities")]
		public string[] DeviceCapabilities { get; set; }
		
		/// <summary>
		/// Whether this device is a phone, tablet, wearable, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formFactor")]
		public AndroidModelFormFactor FormFactor { get; set; }
		
		/// <summary>
		/// The unique opaque id for this model. Use this for invoking the TestExecutionService.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The human-readable name for this device model. Examples: "iPhone 4s", "iPad Mini 2".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Version-specific information of an iOS model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perVersionInfo")]
		public PerIosVersionInfo[] PerVersionInfo { get; set; }
		
		/// <summary>
		/// Screen density in DPI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenDensity")]
		public System.Nullable<System.Int32> ScreenDensity { get; set; }
		
		/// <summary>
		/// Screen size in the horizontal (X) dimension measured in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenX")]
		public System.Nullable<System.Int32> ScreenX { get; set; }
		
		/// <summary>
		/// Screen size in the vertical (Y) dimension measured in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenY")]
		public System.Nullable<System.Int32> ScreenY { get; set; }
		
		/// <summary>
		/// The set of iOS major software versions this device supports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedVersionIds")]
		public string[] SupportedVersionIds { get; set; }
		
		/// <summary>
		/// Tags for this dimension. Examples: "default", "preview", "deprecated".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// A version-specific information of an iOS model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PerIosVersionInfo
	{
		
		/// <summary>
		/// The number of online devices for an iOS version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceCapacity")]
		public PerAndroidVersionInfoDeviceCapacity DeviceCapacity { get; set; }
		
		/// <summary>
		/// An iOS version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionId")]
		public string VersionId { get; set; }
	}
	
	/// <summary>
	/// iOS configuration that can be selected at the time a test is run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IosRuntimeConfiguration
	{
		
		/// <summary>
		/// The set of available locales.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locales")]
		public Locale[] Locales { get; set; }
		
		/// <summary>
		/// The set of available orientations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orientations")]
		public Orientation[] Orientations { get; set; }
	}
	
	/// <summary>
	/// An iOS version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IosVersion
	{
		
		/// <summary>
		/// An opaque id for this iOS version. Use this id to invoke the TestExecutionService.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An integer representing the major iOS version. Examples: "8", "9".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="majorVersion")]
		public System.Nullable<System.Int32> MajorVersion { get; set; }
		
		/// <summary>
		/// An integer representing the minor iOS version. Examples: "1", "2".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minorVersion")]
		public System.Nullable<System.Int32> MinorVersion { get; set; }
		
		/// <summary>
		/// The available Xcode versions for this version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedXcodeVersionIds")]
		public string[] SupportedXcodeVersionIds { get; set; }
		
		/// <summary>
		/// Tags for this dimension. Examples: "default", "preview", "deprecated".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// An Xcode version that an iOS version is compatible with.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class XcodeVersion
	{
		
		/// <summary>
		/// Tags for this Xcode version. Example: "default".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// The id for this version. Example: "9.2".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// A file or directory to install on the device before the test starts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IosDeviceFile
	{
		
		/// <summary>
		/// The bundle id of the app where this file lives. iOS apps sandbox their own filesystem, so app files must specify which app installed on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public FileReference Content { get; set; }
		
		/// <summary>
		/// Location of the file on the device, inside the app's sandboxed filesystem
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devicePath")]
		public string DevicePath { get; set; }
	}
	
	/// <summary>
	/// A test that explores an iOS application on an iOS device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IosRoboTest
	{
		
		/// <summary>
		/// The bundle ID for the app-under-test. This is determined by examining the application's "Info.plist" file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appBundleId")]
		public string AppBundleId { get; set; }
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appIpa")]
		public FileReference AppIpa { get; set; }
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roboScript")]
		public FileReference RoboScript { get; set; }
	}
	
	/// <summary>
	/// A test of an iOS application that implements one or more game loop scenarios. This test type accepts an archived application (.ipa file) and a list of integer scenarios that will be executed on the app sequentially.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IosTestLoop
	{
		
		/// <summary>
		/// Output only. The bundle id for the application under test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appBundleId")]
		public string AppBundleId { get; set; }
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appIpa")]
		public FileReference AppIpa { get; set; }
		
		/// <summary>
		/// The list of scenarios that should be run during the test. Defaults to the single scenario 0 if unspecified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scenarios")]
		public int[] Scenarios { get; set; }
	}
	
	/// <summary>
	/// A description of how to set up an iOS device prior to running the test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IosTestSetup
	{
		
		/// <summary>
		/// iOS apps to install in addition to those being directly tested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalIpas")]
		public FileReference[] AdditionalIpas { get; set; }
		
		/// <summary>
		/// The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkProfile")]
		public string NetworkProfile { get; set; }
		
		/// <summary>
		/// List of directories on the device to upload to Cloud Storage at the end of the test. Directories should either be in a shared directory (such as /private/var/mobile/Media) or within an accessible directory inside the app's filesystem (such as /Documents) by specifying the bundle ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullDirectories")]
		public IosDeviceFile[] PullDirectories { get; set; }
		
		/// <summary>
		/// List of files to push to the device before starting the test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushFiles")]
		public IosDeviceFile[] PushFiles { get; set; }
	}
	
	/// <summary>
	/// A test of an iOS application that uses the XCTest framework. Xcode supports the option to "build for testing", which generates an .xctestrun file that contains a test specification (arguments, test methods, etc). This test type accepts a zip file containing the .xctestrun file and the corresponding contents of the Build/Products directory that contains all the binaries needed to run the tests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IosXcTest
	{
		
		/// <summary>
		/// Output only. The bundle id for the application under test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appBundleId")]
		public string AppBundleId { get; set; }
		
		/// <summary>
		/// The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testSpecialEntitlements")]
		public System.Nullable<System.Boolean> TestSpecialEntitlements { get; set; }
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testsZip")]
		public FileReference TestsZip { get; set; }
		
		/// <summary>
		/// The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xcodeVersion")]
		public string XcodeVersion { get; set; }
		
		/// <summary>
		/// A reference to a file, used for user inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xctestrun")]
		public FileReference Xctestrun { get; set; }
	}
	
	/// <summary>
	/// A list of device sessions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeviceSessionsResponse
	{
		
		/// <summary>
		/// The sessions matching the specified filter in the given cloud project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceSessions")]
		public DeviceSession[] DeviceSessions { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkConfiguration
	{
		
		/// <summary>
		/// Network emulation parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downRule")]
		public TrafficRule DownRule { get; set; }
		
		/// <summary>
		/// The unique opaque id for this network traffic configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Network emulation parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upRule")]
		public TrafficRule UpRule { get; set; }
	}
	
	/// <summary>
	/// Network emulation parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrafficRule
	{
		
		/// <summary>
		/// Bandwidth in kbits/second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidth")]
		public System.Nullable<System.Single> Bandwidth { get; set; }
		
		/// <summary>
		/// Burst size in kbits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="burst")]
		public System.Nullable<System.Single> Burst { get; set; }
		
		/// <summary>
		/// Packet delay, must be >= 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delay")]
		public string Delay { get; set; }
		
		/// <summary>
		/// Packet duplication ratio (0.0 - 1.0).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packetDuplicationRatio")]
		public System.Nullable<System.Single> PacketDuplicationRatio { get; set; }
		
		/// <summary>
		/// Packet loss ratio (0.0 - 1.0).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packetLossRatio")]
		public System.Nullable<System.Single> PacketLossRatio { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkConfigurationCatalog
	{
		
		[System.Runtime.Serialization.DataMember(Name="configurations")]
		public NetworkConfiguration[] Configurations { get; set; }
	}
	
	/// <summary>
	/// The currently provided software environment on the devices under test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProvidedSoftwareCatalog
	{
		
		/// <summary>
		/// A string representing the current version of AndroidX Test Orchestrator that is used in the environment. The package is available at https://maven.google.com/web/index.html#androidx.test:orchestrator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidxOrchestratorVersion")]
		public string AndroidxOrchestratorVersion { get; set; }
		
		/// <summary>
		/// Deprecated: Use AndroidX Test Orchestrator going forward. A string representing the current version of Android Test Orchestrator that is used in the environment. The package is available at https://maven.google.com/web/index.html#com.android.support.test:orchestrator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orchestratorVersion")]
		public string OrchestratorVersion { get; set; }
	}
	
	/// <summary>
	/// Locations where the results of running the test are stored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResultStorage
	{
		
		/// <summary>
		/// A storage location within Google cloud storage (GCS).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleCloudStorage")]
		public GoogleCloudStorage GoogleCloudStorage { get; set; }
		
		/// <summary>
		/// Output only. URL to the results in the Firebase Web Console.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsUrl")]
		public string ResultsUrl { get; set; }
		
		/// <summary>
		/// Represents a tool results execution resource. This has the results of a TestMatrix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toolResultsExecution")]
		public ToolResultsExecution ToolResultsExecution { get; set; }
		
		/// <summary>
		/// Represents a tool results history resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toolResultsHistory")]
		public ToolResultsHistory ToolResultsHistory { get; set; }
	}
	
	/// <summary>
	/// Represents a tool results execution resource. This has the results of a TestMatrix.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ToolResultsExecution
	{
		
		/// <summary>
		/// Output only. A tool results execution ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// Output only. A tool results history ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyId")]
		public string HistoryId { get; set; }
		
		/// <summary>
		/// Output only. The cloud project that owns the tool results execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// Represents a tool results history resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ToolResultsHistory
	{
		
		/// <summary>
		/// Required. A tool results history ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyId")]
		public string HistoryId { get; set; }
		
		/// <summary>
		/// Required. The cloud project that owns the tool results history.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// Output only. Details about the shard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Shard
	{
		
		/// <summary>
		/// Output only. The estimated shard duration based on previous test case timing records, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedShardDuration")]
		public string EstimatedShardDuration { get; set; }
		
		/// <summary>
		/// Output only. The total number of shards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numShards")]
		public System.Nullable<System.Int32> NumShards { get; set; }
		
		/// <summary>
		/// Output only. The index of the shard among all the shards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shardIndex")]
		public System.Nullable<System.Int32> ShardIndex { get; set; }
		
		/// <summary>
		/// Test targets for a shard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testTargetsForShard")]
		public TestTargetsForShard TestTargetsForShard { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SystraceSetup
	{
		
		/// <summary>
		/// Systrace duration in seconds. Should be between 1 and 30 seconds. 0 disables systrace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationSeconds")]
		public System.Nullable<System.Int32> DurationSeconds { get; set; }
	}
	
	/// <summary>
	/// Additional details about the progress of the running test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestDetails
	{
		
		/// <summary>
		/// Output only. If the TestState is ERROR, then this string will contain human-readable details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Output only. Human-readable, detailed descriptions of the test's progress. For example: "Provisioning a device", "Starting Test". During the course of execution new data may be appended to the end of progress_messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressMessages")]
		public string[] ProgressMessages { get; set; }
	}
	
	/// <summary>
	/// A description of a test environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestEnvironmentCatalog
	{
		
		/// <summary>
		/// The currently supported Android devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidDeviceCatalog")]
		public AndroidDeviceCatalog AndroidDeviceCatalog { get; set; }
		
		/// <summary>
		/// List of IP blocks used by the Firebase Test Lab
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceIpBlockCatalog")]
		public DeviceIpBlockCatalog DeviceIpBlockCatalog { get; set; }
		
		/// <summary>
		/// The currently supported iOS devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosDeviceCatalog")]
		public IosDeviceCatalog IosDeviceCatalog { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkConfigurationCatalog")]
		public NetworkConfigurationCatalog NetworkConfigurationCatalog { get; set; }
		
		/// <summary>
		/// The currently provided software environment on the devices under test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softwareCatalog")]
		public ProvidedSoftwareCatalog SoftwareCatalog { get; set; }
	}
	
	/// <summary>
	/// A single test executed in a single environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestExecution
	{
		
		/// <summary>
		/// The environment in which the test is run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public Environment Environment { get; set; }
		
		/// <summary>
		/// Output only. Unique id set by the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Id of the containing TestMatrix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matrixId")]
		public string MatrixId { get; set; }
		
		/// <summary>
		/// Output only. The cloud project that owns the test execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Output only. Details about the shard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shard")]
		public Shard Shard { get; set; }
		
		/// <summary>
		/// Output only. Indicates the current progress of the test execution (e.g., FINISHED).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CancelTestMatrixResponseTestState State { get; set; }
		
		/// <summary>
		/// Additional details about the progress of the running test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testDetails")]
		public TestDetails TestDetails { get; set; }
		
		/// <summary>
		/// A description of how to run the test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testSpecification")]
		public TestSpecification TestSpecification { get; set; }
		
		/// <summary>
		/// Output only. The time this test execution was initially created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// Represents a tool results step resource. This has the results of a TestExecution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toolResultsStep")]
		public ToolResultsStep ToolResultsStep { get; set; }
	}
	
	/// <summary>
	/// A description of how to run the test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSpecification
	{
		
		/// <summary>
		/// A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidInstrumentationTest")]
		public AndroidInstrumentationTest AndroidInstrumentationTest { get; set; }
		
		/// <summary>
		/// A test of an android application that explores the application on a virtual or physical Android Device, finding culprits and crashes as it goes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidRoboTest")]
		public AndroidRoboTest AndroidRoboTest { get; set; }
		
		/// <summary>
		/// A test of an Android Application with a Test Loop. The intent \ will be implicitly added, since Games is the only user of this api, for the time being.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidTestLoop")]
		public AndroidTestLoop AndroidTestLoop { get; set; }
		
		/// <summary>
		/// Disables performance metrics recording. May reduce test latency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disablePerformanceMetrics")]
		public System.Nullable<System.Boolean> DisablePerformanceMetrics { get; set; }
		
		/// <summary>
		/// Disables video recording. May reduce test latency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableVideoRecording")]
		public System.Nullable<System.Boolean> DisableVideoRecording { get; set; }
		
		/// <summary>
		/// A test that explores an iOS application on an iOS device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosRoboTest")]
		public IosRoboTest IosRoboTest { get; set; }
		
		/// <summary>
		/// A test of an iOS application that implements one or more game loop scenarios. This test type accepts an archived application (.ipa file) and a list of integer scenarios that will be executed on the app sequentially.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosTestLoop")]
		public IosTestLoop IosTestLoop { get; set; }
		
		/// <summary>
		/// A description of how to set up an iOS device prior to running the test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosTestSetup")]
		public IosTestSetup IosTestSetup { get; set; }
		
		/// <summary>
		/// A test of an iOS application that uses the XCTest framework. Xcode supports the option to "build for testing", which generates an .xctestrun file that contains a test specification (arguments, test methods, etc). This test type accepts a zip file containing the .xctestrun file and the corresponding contents of the Build/Products directory that contains all the binaries needed to run the tests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosXcTest")]
		public IosXcTest IosXcTest { get; set; }
		
		/// <summary>
		/// A description of how to set up the Android device prior to running the test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testSetup")]
		public TestSetup TestSetup { get; set; }
		
		/// <summary>
		/// Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testTimeout")]
		public string TestTimeout { get; set; }
	}
	
	/// <summary>
	/// A description of how to set up the Android device prior to running the test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestSetup
	{
		
		/// <summary>
		/// Identifies an account and how to log into it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account")]
		public Account Account { get; set; }
		
		/// <summary>
		/// APKs to install in addition to those being directly tested. These will be installed after the app under test. Currently capped at 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalApks")]
		public Apk[] AdditionalApks { get; set; }
		
		/// <summary>
		/// List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directoriesToPull")]
		public string[] DirectoriesToPull { get; set; }
		
		/// <summary>
		/// Whether to prevent all runtime permissions to be granted at app install
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dontAutograntPermissions")]
		public System.Nullable<System.Boolean> DontAutograntPermissions { get; set; }
		
		/// <summary>
		/// Environment variables to set for the test (only applicable for instrumentation tests).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariable[] EnvironmentVariables { get; set; }
		
		/// <summary>
		/// List of files to push to the device before starting the test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filesToPush")]
		public DeviceFile[] FilesToPush { get; set; }
		
		/// <summary>
		/// Optional. Initial setup APKs to install before the app under test is installed. Currently capped at 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialSetupApks")]
		public Apk[] InitialSetupApks { get; set; }
		
		/// <summary>
		/// The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkProfile")]
		public string NetworkProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systrace")]
		public SystraceSetup Systrace { get; set; }
	}
	
	/// <summary>
	/// Represents a tool results step resource. This has the results of a TestExecution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ToolResultsStep
	{
		
		/// <summary>
		/// Output only. A tool results execution ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// Output only. A tool results history ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyId")]
		public string HistoryId { get; set; }
		
		/// <summary>
		/// Output only. The cloud project that owns the tool results step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Output only. A tool results step ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepId")]
		public string StepId { get; set; }
	}
	
	/// <summary>
	/// TestMatrix captures all details about a test. It contains the environment configuration, test specification, test executions and overall state and outcome.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestMatrix
	{
		
		/// <summary>
		/// Information about the client which invoked the test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientInfo")]
		public ClientInfo ClientInfo { get; set; }
		
		/// <summary>
		/// The matrix of environments in which the test is to be executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentMatrix")]
		public EnvironmentMatrix EnvironmentMatrix { get; set; }
		
		/// <summary>
		/// If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failFast")]
		public System.Nullable<System.Boolean> FailFast { get; set; }
		
		/// <summary>
		/// The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flakyTestAttempts")]
		public System.Nullable<System.Int32> FlakyTestAttempts { get; set; }
		
		/// <summary>
		/// Output only. Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalidMatrixDetails")]
		public System.Nullable<TestMatrixInvalidMatrixDetails> InvalidMatrixDetails { get; set; }
		
		/// <summary>
		/// Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outcomeSummary")]
		public System.Nullable<TestMatrixOutcomeSummary> OutcomeSummary { get; set; }
		
		/// <summary>
		/// The cloud project that owns the test matrix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Locations where the results of running the test are stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultStorage")]
		public ResultStorage ResultStorage { get; set; }
		
		/// <summary>
		/// Output only. Indicates the current progress of the test matrix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CancelTestMatrixResponseTestState State { get; set; }
		
		/// <summary>
		/// Output only. The list of test executions that the service creates for this matrix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testExecutions")]
		public TestExecution[] TestExecutions { get; set; }
		
		/// <summary>
		/// Output only. Unique id set by the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testMatrixId")]
		public string TestMatrixId { get; set; }
		
		/// <summary>
		/// A description of how to run the test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testSpecification")]
		public TestSpecification TestSpecification { get; set; }
		
		/// <summary>
		/// Output only. The time this test matrix was initially created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestMatrixInvalidMatrixDetails
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_MATRIX_DETAILS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETAILS_UNAVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALFORMED_APK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALFORMED_TEST_APK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_MANIFEST = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PACKAGE_NAME = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_PACKAGE_NAME = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_SAME_AS_APP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_INSTRUMENTATION = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SIGNATURE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_TEST_RUNNER_CLASS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LAUNCHER_ACTIVITY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORBIDDEN_PERMISSIONS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ROBO_DIRECTIVES = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_RESOURCE_NAME = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_DIRECTIVE_ACTION = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_LOOP_INTENT_FILTER_NOT_FOUND = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCENARIO_LABEL_NOT_DECLARED = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCENARIO_LABEL_MALFORMED = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCENARIO_NOT_DECLARED = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_ADMIN_RECEIVER = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALFORMED_XC_TEST_ZIP = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILT_FOR_IOS_SIMULATOR = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_TESTS_IN_XC_TEST_ZIP = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_DESTINATION_ARTIFACTS = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_NOT_APP_HOSTED = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLIST_CANNOT_BE_PARSED = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_ONLY_APK = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALFORMED_IPA = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_URL_SCHEME = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALFORMED_APP_BUNDLE = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_CODE_APK = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_INPUT_APK = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_APK_PREVIEW_SDK = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATRIX_TOO_LARGE = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_QUOTA_EXCEEDED = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_NOT_ACTIVATED = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_PERMISSION_ERROR = 38,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestMatrixOutcomeSummary
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTCOME_SUMMARY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCONCLUSIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 4,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets the details of an Android application APK.
		/// Testing_applicationDetailService_getApkDetails v1/applicationDetailService/getApkDetails
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GetApkDetailsResponse> Testing_applicationDetailService_getApkDetailsAsync(FileReference requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/applicationDetailService/getApkDetails";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetApkDetailsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates and runs a matrix of tests according to the given specifications. Unsupported environments will be returned in the state UNSUPPORTED. A test matrix is limited to use at most 2000 devices in parallel. The returned matrix will not yet contain the executions that will be created for this matrix. Execution creation happens later on and will require a call to GetTestMatrix. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed or if the matrix tries to use too many simultaneous devices.
		/// Testing_projects_testMatrices_create v1/projects/{projectId}/testMatrices
		/// </summary>
		/// <param name="projectId">The GCE project under which this job will run.</param>
		/// <param name="requestId">A string id used to detect duplicated requests. Ids are automatically scoped to a project, so users should ensure the ID is unique per-project. A UUID is recommended. Optional, but strongly recommended.</param>
		/// <returns>Successful response</returns>
		public async Task<TestMatrix> Testing_projects_testMatrices_createAsync(string projectId, string requestId, TestMatrix requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/testMatrices&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestMatrix>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Checks the status of a test matrix and the executions once they are created. The test matrix will contain the list of test executions to run if and only if the resultStorage.toolResultsExecution fields have been populated. Note: Flaky test executions may be added to the matrix at a later stage. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist
		/// Testing_projects_testMatrices_get v1/projects/{projectId}/testMatrices/{testMatrixId}
		/// </summary>
		/// <param name="projectId">Cloud project that owns the test matrix.</param>
		/// <param name="testMatrixId">Unique test matrix id which was assigned by the service.</param>
		/// <returns>Successful response</returns>
		public async Task<TestMatrix> Testing_projects_testMatrices_getAsync(string projectId, string testMatrixId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/testMatrices/"+ (testMatrixId==null? "" : System.Uri.EscapeDataString(testMatrixId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestMatrix>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels unfinished test executions in a test matrix. This call returns immediately and cancellation proceeds asynchronously. If the matrix is already final, this operation will have no effect. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist
		/// Testing_projects_testMatrices_cancel v1/projects/{projectId}/testMatrices/{testMatrixId}:cancel
		/// </summary>
		/// <param name="projectId">Cloud project that owns the test.</param>
		/// <param name="testMatrixId">Test matrix that will be canceled.</param>
		/// <returns>Successful response</returns>
		public async Task<CancelTestMatrixResponse> Testing_projects_testMatrices_cancelAsync(string projectId, string testMatrixId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/testMatrices/"+ (testMatrixId==null? "" : System.Uri.EscapeDataString(testMatrixId))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelTestMatrixResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the catalog of supported test environments. May return any of the following canonical error codes: - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the environment type does not exist - INTERNAL - if an internal error occurred
		/// Testing_testEnvironmentCatalog_get v1/testEnvironmentCatalog/{environmentType}
		/// </summary>
		/// <param name="environmentType">Required. The type of environment that should be listed.</param>
		/// <param name="projectId">For authorization, the cloud project requesting the TestEnvironmentCatalog.</param>
		/// <returns>Successful response</returns>
		public async Task<TestEnvironmentCatalog> Testing_testEnvironmentCatalog_getAsync(Testing_testEnvironmentCatalog_getEnvironmentType environmentType, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/testEnvironmentCatalog/"+environmentType+"?projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestEnvironmentCatalog>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET /v1/projects/{project_id}/deviceSessions/{device_session_id} Return a DeviceSession, which documents the allocation status and whether the device is allocated. Clients making requests from this API must poll GetDeviceSession.
		/// Testing_projects_deviceSessions_get v1/{name}
		/// </summary>
		/// <param name="name">Required. Name of the DeviceSession, e.g. "projects/{project_id}/deviceSessions/{session_id}"</param>
		/// <returns>Successful response</returns>
		public async Task<DeviceSession> Testing_projects_deviceSessions_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeviceSession>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PATCH /v1/projects/{projectId}/deviceSessions/deviceSessionId}:updateDeviceSession Updates the current device session to the fields described by the update_mask.
		/// Testing_projects_deviceSessions_patch v1/{name}
		/// </summary>
		/// <param name="name">Optional. Name of the DeviceSession, e.g. "projects/{project_id}/deviceSessions/{session_id}"</param>
		/// <param name="updateMask">Required. The list of fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<DeviceSession> Testing_projects_deviceSessions_patchAsync(string name, string updateMask, DeviceSession requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeviceSession>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// POST /v1/projects/{project_id}/deviceSessions/{device_session_id}:cancel Changes the DeviceSession to state FINISHED and terminates all connections. Canceled sessions are not deleted and can be retrieved or listed by the user until they expire based on the 28 day deletion policy.
		/// Testing_projects_deviceSessions_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">Required. Name of the DeviceSession, e.g. "projects/{project_id}/deviceSessions/{session_id}"</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Testing_projects_deviceSessions_cancelAsync(string name, CancelDeviceSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// GET /v1/projects/{project_id}/deviceSessions Lists device Sessions owned by the project user.
		/// Testing_projects_deviceSessions_list v1/{parent}/deviceSessions
		/// </summary>
		/// <param name="parent">Required. The name of the parent to request, e.g. "projects/{project_id}"</param>
		/// <param name="filter">Optional. If specified, responses will be filtered by the given filter. Allowed fields are: session_state.</param>
		/// <param name="pageSize">Optional. The maximum number of DeviceSessions to return.</param>
		/// <param name="pageToken">Optional. A continuation token for paging.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDeviceSessionsResponse> Testing_projects_deviceSessions_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/deviceSessions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDeviceSessionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// POST /v1/projects/{project_id}/deviceSessions
		/// Testing_projects_deviceSessions_create v1/{parent}/deviceSessions
		/// </summary>
		/// <param name="parent">Required. The Compute Engine project under which this device will be allocated. "projects/{project_id}"</param>
		/// <returns>Successful response</returns>
		public async Task<DeviceSession> Testing_projects_deviceSessions_createAsync(string parent, DeviceSession requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/deviceSessions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeviceSession>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Testing_testEnvironmentCatalog_getEnvironmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENVIRONMENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_CONFIGURATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVIDED_SOFTWARE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_IP_BLOCKS = 5,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
