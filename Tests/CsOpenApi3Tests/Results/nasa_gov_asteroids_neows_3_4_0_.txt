//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents a file associated with a library item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class File
	{
		
		/// <summary>
		/// Unique identifier for the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// The size of the file in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The TechPort URL at which the file is accessible for download.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents a specific library item that is part of this project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LibraryItem
	{
		
		/// <summary>
		/// Date the library item was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionDate")]
		public string CompletionDate { get; set; }
		
		/// <summary>
		/// Description of the library item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// External URL for the library item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalUrl")]
		public string ExternalUrl { get; set; }
		
		/// <summary>
		/// List of files associated with the library item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public File[] Files { get; set; }
		
		/// <summary>
		/// Unique identifier for the library item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Publisher of the library item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedBy")]
		public string PublishedBy { get; set; }
		
		/// <summary>
		/// Date the library item was published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedDate")]
		public string PublishedDate { get; set; }
		
		/// <summary>
		/// Title of the library item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Identifies the type of library item, e.g. Image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A NASA center/facility associated with an project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Organization
	{
		
		/// <summary>
		/// The acronym of the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acronym")]
		public string Acronym { get; set; }
		
		/// <summary>
		/// The city in which the organization is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The name of the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The state in which the organization is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	/// <summary>
	/// Top-level TechPort object representing a NASA technology project and its associated data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project
	{
		
		/// <summary>
		/// Abbreviated name of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acronym")]
		public string Acronym { get; set; }
		
		/// <summary>
		/// List of additional and cross-cutting technology areas associated with the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalTas")]
		public TechnologyArea[] AdditionalTas { get; set; }
		
		/// <summary>
		/// Describes the benefits offered to NASA funded and planned missions, unfunded or planned missions, commercial space industry, and to the nation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefits")]
		public string Benefits { get; set; }
		
		/// <summary>
		/// List of document files or links to the project final report closeout documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closeoutDocuments")]
		public string[] CloseoutDocuments { get; set; }
		
		/// <summary>
		/// The project closeout summary excerpt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closeoutSummary")]
		public string CloseoutSummary { get; set; }
		
		/// <summary>
		/// Other government agencies, NASA Mission Directoratres, universities, or commercial entities performing contributing resources to this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coFundingPartners")]
		public Organization[] CoFundingPartners { get; set; }
		
		/// <summary>
		/// Names of the additional investigators who are scientists or engineers for this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coInvestigators")]
		public string[] CoInvestigators { get; set; }
		
		/// <summary>
		/// A detailed description of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// List of the NASA destinations the technology on this project helps achieve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public string[] Destinations { get; set; }
		
		/// <summary>
		/// The month and year the project is expected to complete its work.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// Unique identifier for the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// ISO 8601 full-date in the format YYYY-MM-DD describing the last time this project was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateOnly> LastUpdated { get; set; }
		
		/// <summary>
		/// A NASA center/facility associated with an project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leadOrganization")]
		public Organization LeadOrganization { get; set; }
		
		/// <summary>
		/// List of library items in the project library.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="libraryItems")]
		public LibraryItem[] LibraryItems { get; set; }
		
		/// <summary>
		/// List of primary technolgy areas (from the NASA Technology Roadmap) associated with the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryTas")]
		public TechnologyArea[] PrimaryTas { get; set; }
		
		/// <summary>
		/// Names of the Principal Investigators who are the lead scientists or engineers for this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalInvestigators")]
		public string[] PrincipalInvestigators { get; set; }
		
		/// <summary>
		/// Names of the Program Directors responsible for the management of this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programDirectors")]
		public string[] ProgramDirectors { get; set; }
		
		/// <summary>
		/// Names of the Program Managers responsible for the management of this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="programManagers")]
		public string[] ProgramManagers { get; set; }
		
		/// <summary>
		/// Names of the Project Managers responsible for the management of this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectManagers")]
		public string[] ProjectManagers { get; set; }
		
		/// <summary>
		/// The NASA Mission Directorate or Office that is the primary funding source for this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsibleMissionDirectorateOrOffice")]
		public string ResponsibleMissionDirectorateOrOffice { get; set; }
		
		/// <summary>
		/// The NASA program that is the primary funding source for this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsibleProgram")]
		public string ResponsibleProgram { get; set; }
		
		/// <summary>
		/// The month and year the project was authorized to proceed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		/// <summary>
		/// Indicates whether the project is currently active, completed, or canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The supported mission type (Projected Mission, Planned Mission, or Pull).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedMissionType")]
		public string SupportedMissionType { get; set; }
		
		/// <summary>
		/// The supporting organizations for this project that are conducting work on the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportingOrganizations")]
		public Organization[] SupportingOrganizations { get; set; }
		
		/// <summary>
		/// The current technology maturity (technology readiness level) of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="technologyMaturityCurrent")]
		public string TechnologyMaturityCurrent { get; set; }
		
		/// <summary>
		/// The estimated technology maturity (technology readiness level) of the project at its end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="technologyMaturityEnd")]
		public string TechnologyMaturityEnd { get; set; }
		
		/// <summary>
		/// The technology maturity (technology readiness level) of the project at its beginning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="technologyMaturityStart")]
		public string TechnologyMaturityStart { get; set; }
		
		/// <summary>
		/// Title of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The URL for the associated website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
		
		/// <summary>
		/// States and territories with people performing work on this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workLocations")]
		public string[] WorkLocations { get; set; }
	}
	
	/// <summary>
	/// The Technology Area for a given technology that corresponds to the NASA Technology Roadmap.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TechnologyArea
	{
		
		/// <summary>
		/// The code identifier for the Technology Area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Unique identifier for the Technology Area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// The name of the Technology Area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns the swagger specification for the API.
		/// ApiGet api
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task ApiGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific technology project.
		/// ApiProjects_id__formatGetByFormat api/projects/{id}{.format}
		/// </summary>
		/// <param name="id">ID of project to fetch</param>
		/// <param name="format">The response type desired.</param>
		/// <param name="_format">Automatically added</param>
		/// <returns>Successful response</returns>
		public async Task<Project> ApiProjects_id__formatGetByFormatAsync(long id, ApiProjects_id__formatGetByFormatFormat format, string _format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/projects/"+id+"{.format}?format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Project>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of available technology project IDs.
		/// ApiProjects__formatGetByUpdatedSinceAndFormat api/projects{.format}
		/// </summary>
		/// <param name="updatedSince">ISO 8601 full-date in the format YYYY-MM-DD. Filters the list of available ID values by their lastUpdated parameter.</param>
		/// <param name="format">The response type desired.</param>
		/// <param name="_format">Automatically added</param>
		/// <returns>Successful response</returns>
		public async Task<ApiProjects__formatGetByUpdatedSinceAndFormatReturn> ApiProjects__formatGetByUpdatedSinceAndFormatAsync(System.DateOnly updatedSince, ApiProjects_id__formatGetByFormatFormat format, string _format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/projects{.format}?updatedSince="+updatedSince+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiProjects__formatGetByUpdatedSinceAndFormatReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ApiProjects_id__formatGetByFormatFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xml = 1,
	}
	
	public class ApiProjects__formatGetByUpdatedSinceAndFormatReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
