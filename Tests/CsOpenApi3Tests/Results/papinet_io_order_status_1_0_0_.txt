//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrder : OrderHeader
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PaginationLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderLineItems")]
		public OrderLineItem[] OrderLineItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaginationLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="first")]
		public PaginationLinksFirst First { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last")]
		public PaginationLinksLast Last { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next")]
		public PaginationLinksNext Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public PaginationLinksPrev Prev { get; set; }
	}
	
	public class PaginationLinksFirst
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public class PaginationLinksLast
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public class PaginationLinksNext
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public class PaginationLinksPrev
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderLineItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="changeable")]
		public System.Nullable<System.Boolean> Changeable { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderLineItemNumber")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double OrderLineItemNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderLineItemStatus")]
		public OrderLineItemOrderLineItemStatus OrderLineItemStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantities")]
		public OrderLineItemQuantities[] OrderLineItemQuantities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderLineItemOrderLineItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cancelled")]
		Cancelled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Completed")]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Confirmed")]
		Confirmed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending")]
		Pending = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProductionCompleted")]
		ProductionCompleted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ShipmentCompleted")]
		ShipmentCompleted = 5,
	}
	
	public class OrderLineItemQuantities
	{
		
		[System.Runtime.Serialization.DataMember(Name="quantityContext")]
		public System.Nullable<OrderLineItemQuantitiesQuantityContext> QuantityContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantityType")]
		public System.Nullable<OrderLineItemQuantitiesQuantityType> QuantityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantityUOM")]
		public System.Nullable<OrderLineItemQuantitiesQuantityUOM> QuantityUOM { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantityValue")]
		public System.Nullable<System.Double> QuantityValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderLineItemQuantitiesQuantityContext
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Confirmed")]
		Confirmed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Invoiced")]
		Invoiced = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ordered")]
		Ordered = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Produced")]
		Produced = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Shipped")]
		Shipped = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderLineItemQuantitiesQuantityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Area")]
		Area = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count")]
		Count = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GrossWeight")]
		GrossWeight = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Length")]
		Length = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NetNetWeight")]
		NetNetWeight = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NetWeight")]
		NetWeight = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NominalWeight")]
		NominalWeight = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TareWeight")]
		TareWeight = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderLineItemQuantitiesQuantityUOM
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bale")]
		Bale = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Box")]
		Box = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Centimeter")]
		Centimeter = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Decimeter")]
		Decimeter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Foot")]
		Foot = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gram")]
		Gram = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HundredPounds")]
		HundredPounds = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Inch")]
		Inch = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilogram")]
		Kilogram = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilometer")]
		Kilometer = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Meter")]
		Meter = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MetricTon")]
		MetricTon = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Millimeter")]
		Millimeter = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Package")]
		Package = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PalletUnit")]
		PalletUnit = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Piece")]
		Piece = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pound")]
		Pound = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PulpUnit")]
		PulpUnit = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ream")]
		Ream = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Reel")]
		Reel = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sheet")]
		Sheet = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ShortTon")]
		ShortTon = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Skid")]
		Skid = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SquareDecimeter")]
		SquareDecimeter = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SquareFoot")]
		SquareFoot = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SquareInch")]
		SquareInch = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SquareMeter")]
		SquareMeter = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ThousandPieces")]
		ThousandPieces = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ThousandSquareCentimeters")]
		ThousandSquareCentimeters = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ThousandSquareFeet")]
		ThousandSquareFeet = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ThousandSquareInches")]
		ThousandSquareInches = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Yard")]
		Yard = 31,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOfOrders
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PaginationLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public OrderHeader[] Orders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderHeader
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numberOfLineItems")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int NumberOfLineItems { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderNumber")]
		public string OrderNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderStatus")]
		public OrderHeaderOrderStatus OrderStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderHeaderOrderStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Active")]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cancelled")]
		Cancelled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Completed")]
		Completed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Order : OrderHeader
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PaginationLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderLineItems")]
		public OrderLineItem[] OrderLineItems { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List `orders`
		/// Gets a paginated list of all `orders`.
		/// OrdersGetByOrderStatusAndOffsetAndLimit orders
		/// </summary>
		/// <param name="orderStatus">Filter by status</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The maximum number of items to return. If the value exceeds the maximum, then the maximum value will be used.</param>
		/// <returns>OK</returns>
		public async Task<ListOfOrders> OrdersGetByOrderStatusAndOffsetAndLimitAsync(OrderHeaderOrderStatus orderStatus, string offset, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders?orderStatus=" + orderStatus+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOfOrders>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an `order`
		/// Gets the details of a specific `order`, including a paginated list of all its lines.
		/// Orders_orderIdGet orders/{orderId}
		/// </summary>
		/// <param name="orderId">UUID of the `order` to get</param>
		/// <returns>OK</returns>
		public async Task<Order> Orders_orderIdGetAsync(string orderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
