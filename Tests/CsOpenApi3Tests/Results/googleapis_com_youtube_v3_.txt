//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AbuseReport
	{
		
		[System.Runtime.Serialization.DataMember(Name="abuseTypes")]
		public AbuseType[] AbuseTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relatedEntities")]
		public RelatedEntity[] RelatedEntities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public Entity Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AbuseType
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelatedEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public Entity Entity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Entity
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public string TypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Rights management policy for YouTube resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessPolicy
	{
		
		/// <summary>
		/// The value of allowed indicates whether the access to the policy is allowed or denied by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowed")]
		public System.Nullable<System.Boolean> Allowed { get; set; }
		
		/// <summary>
		/// A list of region codes that identify countries where the default policy do not apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exception")]
		public string[] Exception { get; set; }
	}
	
	/// <summary>
	/// An *activity* resource contains information about an action that a particular channel, or user, has taken on YouTube.The actions reported in activity feeds include rating a video, sharing a video, marking a video as a favorite, commenting on a video, uploading a video, and so forth. Each activity resource identifies the type of action, the channel associated with the action, and the resource(s) associated with the action, such as the video that was rated or uploaded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Activity
	{
		
		/// <summary>
		/// Details about the content of an activity: the video that was shared, the channel that was subscribed to, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDetails")]
		public ActivityContentDetails ContentDetails { get; set; }
		
		/// <summary>
		/// Etag of this resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#activity".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#activity")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#activity";
		
		/// <summary>
		/// Basic details about an activity, including title, description, thumbnails, activity type and group. Next ID: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public ActivitySnippet Snippet { get; set; }
	}
	
	/// <summary>
	/// Details about the content of an activity: the video that was shared, the channel that was subscribed to, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityContentDetails
	{
		
		/// <summary>
		/// Details about a channel bulletin post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bulletin")]
		public ActivityContentDetailsBulletin Bulletin { get; set; }
		
		/// <summary>
		/// Details about a resource which was added to a channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelItem")]
		public ActivityContentDetailsChannelItem ChannelItem { get; set; }
		
		/// <summary>
		/// Information about a resource that received a comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public ActivityContentDetailsComment Comment { get; set; }
		
		/// <summary>
		/// Information about a video that was marked as a favorite video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="favorite")]
		public ActivityContentDetailsFavorite Favorite { get; set; }
		
		/// <summary>
		/// Information about a resource that received a positive (like) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="like")]
		public ActivityContentDetailsLike Like { get; set; }
		
		/// <summary>
		/// Information about a new playlist item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playlistItem")]
		public ActivityContentDetailsPlaylistItem PlaylistItem { get; set; }
		
		/// <summary>
		/// Details about a resource which is being promoted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotedItem")]
		public ActivityContentDetailsPromotedItem PromotedItem { get; set; }
		
		/// <summary>
		/// Information that identifies the recommended resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendation")]
		public ActivityContentDetailsRecommendation Recommendation { get; set; }
		
		/// <summary>
		/// Details about a social network post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="social")]
		public ActivityContentDetailsSocial Social { get; set; }
		
		/// <summary>
		/// Information about a channel that a user subscribed to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public ActivityContentDetailsSubscription Subscription { get; set; }
		
		/// <summary>
		/// Information about the uploaded video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upload")]
		public ActivityContentDetailsUpload Upload { get; set; }
	}
	
	/// <summary>
	/// Details about a channel bulletin post.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityContentDetailsBulletin
	{
		
		/// <summary>
		/// A resource id is a generic reference that points to another YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public ResourceId ResourceId { get; set; }
	}
	
	/// <summary>
	/// A resource id is a generic reference that points to another YouTube resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceId
	{
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the referred resource, if that resource is a channel. This property is only present if the resourceId.kind value is youtube#channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The type of the API resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the referred resource, if that resource is a playlist. This property is only present if the resourceId.kind value is youtube#playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playlistId")]
		public string PlaylistId { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the referred resource, if that resource is a video. This property is only present if the resourceId.kind value is youtube#video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoId")]
		public string VideoId { get; set; }
	}
	
	/// <summary>
	/// Details about a resource which was added to a channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityContentDetailsChannelItem
	{
		
		/// <summary>
		/// A resource id is a generic reference that points to another YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public ResourceId ResourceId { get; set; }
	}
	
	/// <summary>
	/// Information about a resource that received a comment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityContentDetailsComment
	{
		
		/// <summary>
		/// A resource id is a generic reference that points to another YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public ResourceId ResourceId { get; set; }
	}
	
	/// <summary>
	/// Information about a video that was marked as a favorite video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityContentDetailsFavorite
	{
		
		/// <summary>
		/// A resource id is a generic reference that points to another YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public ResourceId ResourceId { get; set; }
	}
	
	/// <summary>
	/// Information about a resource that received a positive (like) rating.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityContentDetailsLike
	{
		
		/// <summary>
		/// A resource id is a generic reference that points to another YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public ResourceId ResourceId { get; set; }
	}
	
	/// <summary>
	/// Information about a new playlist item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityContentDetailsPlaylistItem
	{
		
		/// <summary>
		/// The value that YouTube uses to uniquely identify the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playlistId")]
		public string PlaylistId { get; set; }
		
		/// <summary>
		/// ID of the item within the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playlistItemId")]
		public string PlaylistItemId { get; set; }
		
		/// <summary>
		/// A resource id is a generic reference that points to another YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public ResourceId ResourceId { get; set; }
	}
	
	/// <summary>
	/// Details about a resource which is being promoted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityContentDetailsPromotedItem
	{
		
		/// <summary>
		/// The URL the client should fetch to request a promoted item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adTag")]
		public string AdTag { get; set; }
		
		/// <summary>
		/// The URL the client should ping to indicate that the user clicked through on this promoted item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickTrackingUrl")]
		public string ClickTrackingUrl { get; set; }
		
		/// <summary>
		/// The URL the client should ping to indicate that the user was shown this promoted item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeViewUrl")]
		public string CreativeViewUrl { get; set; }
		
		/// <summary>
		/// The type of call-to-action, a message to the user indicating action that can be taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ctaType")]
		public System.Nullable<ActivityContentDetailsPromotedItemCtaType> CtaType { get; set; }
		
		/// <summary>
		/// The custom call-to-action button text. If specified, it will override the default button text for the cta_type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customCtaButtonText")]
		public string CustomCtaButtonText { get; set; }
		
		/// <summary>
		/// The text description to accompany the promoted item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="descriptionText")]
		public string DescriptionText { get; set; }
		
		/// <summary>
		/// The URL the client should direct the user to, if the user chooses to visit the advertiser's website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationUrl")]
		public string DestinationUrl { get; set; }
		
		/// <summary>
		/// The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forecastingUrl")]
		public string[] ForecastingUrl { get; set; }
		
		/// <summary>
		/// The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionUrl")]
		public string[] ImpressionUrl { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the promoted video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoId")]
		public string VideoId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityContentDetailsPromotedItemCtaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ctaTypeUnspecified")]
		ctaTypeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="visitAdvertiserSite")]
		visitAdvertiserSite = 1,
	}
	
	/// <summary>
	/// Information that identifies the recommended resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityContentDetailsRecommendation
	{
		
		/// <summary>
		/// The reason that the resource is recommended to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<ActivityContentDetailsRecommendationReason> Reason { get; set; }
		
		/// <summary>
		/// A resource id is a generic reference that points to another YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public ResourceId ResourceId { get; set; }
		
		/// <summary>
		/// A resource id is a generic reference that points to another YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seedResourceId")]
		public ResourceId SeedResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityContentDetailsRecommendationReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="reasonUnspecified")]
		reasonUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoFavorited")]
		videoFavorited = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoLiked")]
		videoLiked = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoWatched")]
		videoWatched = 3,
	}
	
	/// <summary>
	/// Details about a social network post.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityContentDetailsSocial
	{
		
		/// <summary>
		/// The author of the social network post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// An image of the post's author.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// The URL of the social network post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceUrl")]
		public string ReferenceUrl { get; set; }
		
		/// <summary>
		/// A resource id is a generic reference that points to another YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public ResourceId ResourceId { get; set; }
		
		/// <summary>
		/// The name of the social network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ActivityContentDetailsSocialType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityContentDetailsSocialType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unspecified")]
		unspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="googlePlus")]
		googlePlus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="facebook")]
		facebook = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="twitter")]
		twitter = 3,
	}
	
	/// <summary>
	/// Information about a channel that a user subscribed to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityContentDetailsSubscription
	{
		
		/// <summary>
		/// A resource id is a generic reference that points to another YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public ResourceId ResourceId { get; set; }
	}
	
	/// <summary>
	/// Information about the uploaded video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityContentDetailsUpload
	{
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the uploaded video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoId")]
		public string VideoId { get; set; }
	}
	
	/// <summary>
	/// Basic details about an activity, including title, description, thumbnails, activity type and group. Next ID: 12
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivitySnippet
	{
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the channel associated with the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// Channel title for the channel responsible for this activity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelTitle")]
		public string ChannelTitle { get; set; }
		
		/// <summary>
		/// The description of the resource primarily associated with the activity. @mutable youtube.activities.insert
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		/// <summary>
		/// The date and time that the video was uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedAt")]
		public System.Nullable<System.DateTimeOffset> PublishedAt { get; set; }
		
		/// <summary>
		/// Internal representation of thumbnails for a YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnails")]
		public ThumbnailDetails Thumbnails { get; set; }
		
		/// <summary>
		/// The title of the resource primarily associated with the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of activity that the resource describes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ActivitySnippetType> Type { get; set; }
	}
	
	/// <summary>
	/// Internal representation of thumbnails for a YouTube resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThumbnailDetails
	{
		
		/// <summary>
		/// A thumbnail is an image representing a YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public Thumbnail High { get; set; }
		
		/// <summary>
		/// A thumbnail is an image representing a YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxres")]
		public Thumbnail Maxres { get; set; }
		
		/// <summary>
		/// A thumbnail is an image representing a YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public Thumbnail Medium { get; set; }
		
		/// <summary>
		/// A thumbnail is an image representing a YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standard")]
		public Thumbnail Standard { get; set; }
	}
	
	/// <summary>
	/// A thumbnail is an image representing a YouTube resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Thumbnail
	{
		
		/// <summary>
		/// (Optional) Height of the thumbnail image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.UInt32> Height { get; set; }
		
		/// <summary>
		/// The thumbnail image's URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// (Optional) Width of the thumbnail image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.UInt32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivitySnippetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="typeUnspecified")]
		typeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="upload")]
		upload = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="like")]
		like = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="favorite")]
		favorite = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="comment")]
		comment = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subscription")]
		subscription = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="playlistItem")]
		playlistItem = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="recommendation")]
		recommendation = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bulletin")]
		bulletin = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="social")]
		social = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="channelItem")]
		channelItem = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="promotedItem")]
		promotedItem = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Activity[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#activityListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#activityListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#activityListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageInfo
	{
		
		/// <summary>
		/// The number of results included in the API response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsPerPage")]
		public System.Nullable<System.Int32> ResultsPerPage { get; set; }
		
		/// <summary>
		/// The total number of results in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	/// <summary>
	/// Stub token pagination template to suppress results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokenPagination
	{
	}
	
	/// <summary>
	/// A *caption* resource represents a YouTube caption track. A caption track is associated with exactly one YouTube video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Caption
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the caption track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#caption".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#caption")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#caption";
		
		/// <summary>
		/// Basic details about a caption track, such as its language and name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public CaptionSnippet Snippet { get; set; }
	}
	
	/// <summary>
	/// Basic details about a caption track, such as its language and name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaptionSnippet
	{
		
		/// <summary>
		/// The type of audio track associated with the caption track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioTrackType")]
		public System.Nullable<CaptionSnippetAudioTrackType> AudioTrackType { get; set; }
		
		/// <summary>
		/// The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public System.Nullable<CaptionSnippetFailureReason> FailureReason { get; set; }
		
		/// <summary>
		/// Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be true if a sync was explicitly requested when the caption track was uploaded. For example, when calling the captions.insert or captions.update methods, you can set the sync parameter to true to instruct YouTube to sync the uploaded track to the video. If the value is false, YouTube uses the time codes in the uploaded caption track to determine when to display captions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAutoSynced")]
		public System.Nullable<System.Boolean> IsAutoSynced { get; set; }
		
		/// <summary>
		/// Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCC")]
		public System.Nullable<System.Boolean> IsCC { get; set; }
		
		/// <summary>
		/// Indicates whether the caption track is a draft. If the value is true, then the track is not publicly visible. The default value is false. @mutable youtube.captions.insert youtube.captions.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDraft")]
		public System.Nullable<System.Boolean> IsDraft { get; set; }
		
		/// <summary>
		/// Indicates whether caption track is formatted for "easy reader," meaning it is at a third-grade level for language learners. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEasyReader")]
		public System.Nullable<System.Boolean> IsEasyReader { get; set; }
		
		/// <summary>
		/// Indicates whether the caption track uses large text for the vision-impaired. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLarge")]
		public System.Nullable<System.Boolean> IsLarge { get; set; }
		
		/// <summary>
		/// The language of the caption track. The property value is a BCP-47 language tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The date and time when the caption track was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// The name of the caption track. The name is intended to be visible to the user as an option during playback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The caption track's status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<CaptionSnippetStatus> Status { get; set; }
		
		/// <summary>
		/// The caption track's type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackKind")]
		public System.Nullable<CaptionSnippetTrackKind> TrackKind { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the video associated with the caption track. @mutable youtube.captions.insert
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoId")]
		public string VideoId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CaptionSnippetAudioTrackType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="primary")]
		primary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="commentary")]
		commentary = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="descriptive")]
		descriptive = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CaptionSnippetFailureReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknownFormat")]
		unknownFormat = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unsupportedFormat")]
		unsupportedFormat = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="processingFailed")]
		processingFailed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CaptionSnippetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="serving")]
		serving = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="syncing")]
		syncing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CaptionSnippetTrackKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="standard")]
		standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASR")]
		ASR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="forced")]
		forced = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaptionListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of captions that match the request criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Caption[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#captionListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#captionListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#captionListResponse";
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// Brief description of the live stream cdn settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CdnSettings
	{
		
		/// <summary>
		/// The format of the video stream that you are sending to Youtube. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// The frame rate of the inbound video data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frameRate")]
		public System.Nullable<CdnSettingsFrameRate> FrameRate { get; set; }
		
		/// <summary>
		/// Describes information necessary for ingesting an RTMP, HTTP, or SRT stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingestionInfo")]
		public IngestionInfo IngestionInfo { get; set; }
		
		/// <summary>
		///  The method or protocol used to transmit the video stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingestionType")]
		public System.Nullable<CdnSettingsIngestionType> IngestionType { get; set; }
		
		/// <summary>
		/// The resolution of the inbound video data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public System.Nullable<CdnSettingsResolution> Resolution { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CdnSettingsFrameRate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30fps")]
		_30fps = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60fps")]
		_60fps = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="variable")]
		variable = 2,
	}
	
	/// <summary>
	/// Describes information necessary for ingesting an RTMP, HTTP, or SRT stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IngestionInfo
	{
		
		/// <summary>
		/// The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupIngestionAddress")]
		public string BackupIngestionAddress { get; set; }
		
		/// <summary>
		/// The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL. Depending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format: *STREAM_URL/STREAM_NAME* 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingestionAddress")]
		public string IngestionAddress { get; set; }
		
		/// <summary>
		/// This ingestion url may be used instead of backupIngestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rtmpsBackupIngestionAddress")]
		public string RtmpsBackupIngestionAddress { get; set; }
		
		/// <summary>
		/// This ingestion url may be used instead of ingestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rtmpsIngestionAddress")]
		public string RtmpsIngestionAddress { get; set; }
		
		/// <summary>
		/// The stream name that YouTube assigns to the video stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamName")]
		public string StreamName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CdnSettingsIngestionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtmp")]
		rtmp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dash")]
		dash = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webrtc")]
		webrtc = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hls")]
		hls = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CdnSettingsResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="240p")]
		_240p = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="360p")]
		_360p = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="480p")]
		_480p = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="720p")]
		_720p = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1080p")]
		_1080p = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1440p")]
		_1440p = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2160p")]
		_2160p = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="variable")]
		variable = 7,
	}
	
	/// <summary>
	/// A *channel* resource contains information about a YouTube channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Channel
	{
		
		/// <summary>
		/// The auditDetails object encapsulates channel data that is relevant for YouTube Partners during the audit process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditDetails")]
		public ChannelAuditDetails AuditDetails { get; set; }
		
		/// <summary>
		/// Branding properties of a YouTube channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandingSettings")]
		public ChannelBrandingSettings BrandingSettings { get; set; }
		
		/// <summary>
		/// Details about the content of a channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDetails")]
		public ChannelContentDetails ContentDetails { get; set; }
		
		/// <summary>
		/// The contentOwnerDetails object encapsulates channel data that is relevant for YouTube Partners linked with the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentOwnerDetails")]
		public ChannelContentOwnerDetails ContentOwnerDetails { get; set; }
		
		/// <summary>
		/// The conversionPings object encapsulates information about conversion pings that need to be respected by the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionPings")]
		public ChannelConversionPings ConversionPings { get; set; }
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#channel".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#channel")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#channel";
		
		/// <summary>
		/// Localizations for different languages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizations")]
		public System.Collections.Generic.Dictionary<string, ChannelLocalization> Localizations { get; set; }
		
		/// <summary>
		/// Basic details about a channel, including title, description and thumbnails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public ChannelSnippet Snippet { get; set; }
		
		/// <summary>
		/// Statistics about a channel: number of subscribers, number of videos in the channel, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public ChannelStatistics Statistics { get; set; }
		
		/// <summary>
		/// JSON template for the status part of a channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ChannelStatus Status { get; set; }
		
		/// <summary>
		/// Freebase topic information related to the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicDetails")]
		public ChannelTopicDetails TopicDetails { get; set; }
	}
	
	/// <summary>
	/// The auditDetails object encapsulates channel data that is relevant for YouTube Partners during the audit process.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelAuditDetails
	{
		
		/// <summary>
		/// Whether or not the channel respects the community guidelines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="communityGuidelinesGoodStanding")]
		public System.Nullable<System.Boolean> CommunityGuidelinesGoodStanding { get; set; }
		
		/// <summary>
		/// Whether or not the channel has any unresolved claims.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentIdClaimsGoodStanding")]
		public System.Nullable<System.Boolean> ContentIdClaimsGoodStanding { get; set; }
		
		/// <summary>
		/// Whether or not the channel has any copyright strikes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyrightStrikesGoodStanding")]
		public System.Nullable<System.Boolean> CopyrightStrikesGoodStanding { get; set; }
	}
	
	/// <summary>
	/// Branding properties of a YouTube channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelBrandingSettings
	{
		
		/// <summary>
		/// Branding properties for the channel view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public ChannelSettings Channel { get; set; }
		
		/// <summary>
		/// Additional experimental branding properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hints")]
		public PropertyValue[] Hints { get; set; }
		
		/// <summary>
		/// Branding properties for images associated with the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ImageSettings Image { get; set; }
		
		/// <summary>
		/// Branding properties for the watch. All deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watch")]
		public WatchSettings Watch { get; set; }
	}
	
	/// <summary>
	/// Branding properties for the channel view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelSettings
	{
		
		/// <summary>
		/// The country of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLanguage")]
		public string DefaultLanguage { get; set; }
		
		/// <summary>
		/// Which content tab users should see when viewing the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultTab")]
		public string DefaultTab { get; set; }
		
		/// <summary>
		/// Specifies the channel description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Title for the featured channels tab.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featuredChannelsTitle")]
		public string FeaturedChannelsTitle { get; set; }
		
		/// <summary>
		/// The list of featured channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featuredChannelsUrls")]
		public string[] FeaturedChannelsUrls { get; set; }
		
		/// <summary>
		/// Lists keywords associated with the channel, comma-separated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string Keywords { get; set; }
		
		/// <summary>
		/// Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moderateComments")]
		public System.Nullable<System.Boolean> ModerateComments { get; set; }
		
		/// <summary>
		/// A prominent color that can be rendered on this channel page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileColor")]
		public string ProfileColor { get; set; }
		
		/// <summary>
		/// Whether the tab to browse the videos should be displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showBrowseView")]
		public System.Nullable<System.Boolean> ShowBrowseView { get; set; }
		
		/// <summary>
		/// Whether related channels should be proposed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showRelatedChannels")]
		public System.Nullable<System.Boolean> ShowRelatedChannels { get; set; }
		
		/// <summary>
		/// Specifies the channel title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The ID for a Google Analytics account to track and measure traffic to the channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingAnalyticsAccountId")]
		public string TrackingAnalyticsAccountId { get; set; }
		
		/// <summary>
		/// The trailer of the channel, for users that are not subscribers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsubscribedTrailer")]
		public string UnsubscribedTrailer { get; set; }
	}
	
	/// <summary>
	/// A pair Property / Value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PropertyValue
	{
		
		/// <summary>
		/// A property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="property")]
		public string Property { get; set; }
		
		/// <summary>
		/// The property's value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Branding properties for images associated with the channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="backgroundImageUrl")]
		public LocalizedProperty BackgroundImageUrl { get; set; }
		
		/// <summary>
		/// This is generated when a ChannelBanner.Insert request has succeeded for the given channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerExternalUrl")]
		public string BannerExternalUrl { get; set; }
		
		/// <summary>
		/// Banner image. Desktop size (1060x175).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerImageUrl")]
		public string BannerImageUrl { get; set; }
		
		/// <summary>
		/// Banner image. Mobile size high resolution (1440x395).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerMobileExtraHdImageUrl")]
		public string BannerMobileExtraHdImageUrl { get; set; }
		
		/// <summary>
		/// Banner image. Mobile size high resolution (1280x360).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerMobileHdImageUrl")]
		public string BannerMobileHdImageUrl { get; set; }
		
		/// <summary>
		/// Banner image. Mobile size (640x175).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerMobileImageUrl")]
		public string BannerMobileImageUrl { get; set; }
		
		/// <summary>
		/// Banner image. Mobile size low resolution (320x88).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerMobileLowImageUrl")]
		public string BannerMobileLowImageUrl { get; set; }
		
		/// <summary>
		/// Banner image. Mobile size medium/high resolution (960x263).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerMobileMediumHdImageUrl")]
		public string BannerMobileMediumHdImageUrl { get; set; }
		
		/// <summary>
		/// Banner image. Tablet size extra high resolution (2560x424).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerTabletExtraHdImageUrl")]
		public string BannerTabletExtraHdImageUrl { get; set; }
		
		/// <summary>
		/// Banner image. Tablet size high resolution (2276x377).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerTabletHdImageUrl")]
		public string BannerTabletHdImageUrl { get; set; }
		
		/// <summary>
		/// Banner image. Tablet size (1707x283).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerTabletImageUrl")]
		public string BannerTabletImageUrl { get; set; }
		
		/// <summary>
		/// Banner image. Tablet size low resolution (1138x188).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerTabletLowImageUrl")]
		public string BannerTabletLowImageUrl { get; set; }
		
		/// <summary>
		/// Banner image. TV size high resolution (1920x1080).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerTvHighImageUrl")]
		public string BannerTvHighImageUrl { get; set; }
		
		/// <summary>
		/// Banner image. TV size extra high resolution (2120x1192).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerTvImageUrl")]
		public string BannerTvImageUrl { get; set; }
		
		/// <summary>
		/// Banner image. TV size low resolution (854x480).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerTvLowImageUrl")]
		public string BannerTvLowImageUrl { get; set; }
		
		/// <summary>
		/// Banner image. TV size medium resolution (1280x720).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerTvMediumImageUrl")]
		public string BannerTvMediumImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="largeBrandedBannerImageImapScript")]
		public LocalizedProperty LargeBrandedBannerImageImapScript { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="largeBrandedBannerImageUrl")]
		public LocalizedProperty LargeBrandedBannerImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smallBrandedBannerImageImapScript")]
		public LocalizedProperty SmallBrandedBannerImageImapScript { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smallBrandedBannerImageUrl")]
		public LocalizedProperty SmallBrandedBannerImageUrl { get; set; }
		
		/// <summary>
		/// The URL for a 1px by 1px tracking pixel that can be used to collect statistics for views of the channel or video pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingImageUrl")]
		public string TrackingImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="watchIconImageUrl")]
		public string WatchIconImageUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalizedProperty
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultLanguage")]
		public LanguageTag DefaultLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localized")]
		public LocalizedString[] Localized { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LanguageTag
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalizedString
	{
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Branding properties for the watch. All deprecated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WatchSettings
	{
		
		/// <summary>
		/// The text color for the video watch page's branded area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public string BackgroundColor { get; set; }
		
		/// <summary>
		/// An ID that uniquely identifies a playlist that displays next to the video player.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featuredPlaylistId")]
		public string FeaturedPlaylistId { get; set; }
		
		/// <summary>
		/// The background color for the video watch page's branded area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textColor")]
		public string TextColor { get; set; }
	}
	
	/// <summary>
	/// Details about the content of a channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelContentDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="relatedPlaylists")]
		public ChannelContentDetailsRelatedPlaylists RelatedPlaylists { get; set; }
	}
	
	public class ChannelContentDetailsRelatedPlaylists
	{
		
		/// <summary>
		/// The ID of the playlist that contains the channel"s favorite videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="favorites")]
		public string Favorites { get; set; }
		
		/// <summary>
		/// The ID of the playlist that contains the channel"s liked videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="likes")]
		public string Likes { get; set; }
		
		/// <summary>
		/// The ID of the playlist that contains the channel"s uploaded videos. Use the videos.insert method to upload new videos and the videos.delete method to delete previously uploaded videos.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploads")]
		public string Uploads { get; set; }
		
		/// <summary>
		/// The ID of the playlist that contains the channel"s watch history. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watchHistory")]
		public string WatchHistory { get; set; }
		
		/// <summary>
		/// The ID of the playlist that contains the channel"s watch later playlist. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watchLater")]
		public string WatchLater { get; set; }
	}
	
	/// <summary>
	/// The contentOwnerDetails object encapsulates channel data that is relevant for YouTube Partners linked with the channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelContentOwnerDetails
	{
		
		/// <summary>
		/// The ID of the content owner linked to the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentOwner")]
		public string ContentOwner { get; set; }
		
		/// <summary>
		/// The date and time when the channel was linked to the content owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeLinked")]
		public System.Nullable<System.DateTimeOffset> TimeLinked { get; set; }
	}
	
	/// <summary>
	/// The conversionPings object encapsulates information about conversion pings that need to be respected by the channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelConversionPings
	{
		
		/// <summary>
		/// Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pings")]
		public ChannelConversionPing[] Pings { get; set; }
	}
	
	/// <summary>
	/// Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelConversionPing
	{
		
		/// <summary>
		/// Defines the context of the ping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public System.Nullable<ChannelConversionPingContext> Context { get; set; }
		
		/// <summary>
		/// The url (without the schema) that the player shall send the ping to. It's at caller's descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionUrl")]
		public string ConversionUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChannelConversionPingContext
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subscribe")]
		subscribe = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unsubscribe")]
		unsubscribe = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cview")]
		cview = 2,
	}
	
	/// <summary>
	/// Channel localization setting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelLocalization
	{
		
		/// <summary>
		/// The localized strings for channel's description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The localized strings for channel's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Basic details about a channel, including title, description and thumbnails.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelSnippet
	{
		
		/// <summary>
		/// The country of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The custom url of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customUrl")]
		public string CustomUrl { get; set; }
		
		/// <summary>
		/// The language of the channel's default title and description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLanguage")]
		public string DefaultLanguage { get; set; }
		
		/// <summary>
		/// The description of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Channel localization setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localized")]
		public ChannelLocalization Localized { get; set; }
		
		/// <summary>
		/// The date and time that the channel was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedAt")]
		public System.Nullable<System.DateTimeOffset> PublishedAt { get; set; }
		
		/// <summary>
		/// Internal representation of thumbnails for a YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnails")]
		public ThumbnailDetails Thumbnails { get; set; }
		
		/// <summary>
		/// The channel's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Statistics about a channel: number of subscribers, number of videos in the channel, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelStatistics
	{
		
		/// <summary>
		/// The number of comments for the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commentCount")]
		public string CommentCount { get; set; }
		
		/// <summary>
		/// Whether or not the number of subscribers is shown for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hiddenSubscriberCount")]
		public System.Nullable<System.Boolean> HiddenSubscriberCount { get; set; }
		
		/// <summary>
		/// The number of subscribers that the channel has.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriberCount")]
		public string SubscriberCount { get; set; }
		
		/// <summary>
		/// The number of videos uploaded to the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoCount")]
		public string VideoCount { get; set; }
		
		/// <summary>
		/// The number of times the channel has been viewed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewCount")]
		public string ViewCount { get; set; }
	}
	
	/// <summary>
	/// JSON template for the status part of a channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelStatus
	{
		
		/// <summary>
		/// If true, then the user is linked to either a YouTube username or G+ account. Otherwise, the user doesn't have a public YouTube identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLinked")]
		public System.Nullable<System.Boolean> IsLinked { get; set; }
		
		/// <summary>
		/// The long uploads status of this channel. See https://support.google.com/youtube/answer/71673 for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longUploadsStatus")]
		public System.Nullable<ChannelStatusLongUploadsStatus> LongUploadsStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="madeForKids")]
		public System.Nullable<System.Boolean> MadeForKids { get; set; }
		
		/// <summary>
		/// Privacy status of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacyStatus")]
		public System.Nullable<ChannelStatusPrivacyStatus> PrivacyStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="selfDeclaredMadeForKids")]
		public System.Nullable<System.Boolean> SelfDeclaredMadeForKids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChannelStatusLongUploadsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="longUploadsUnspecified")]
		longUploadsUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allowed")]
		allowed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eligible")]
		eligible = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disallowed")]
		disallowed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChannelStatusPrivacyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unlisted")]
		unlisted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 2,
	}
	
	/// <summary>
	/// Freebase topic information related to the channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelTopicDetails
	{
		
		/// <summary>
		/// A list of Wikipedia URLs that describe the channel's content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicCategories")]
		public string[] TopicCategories { get; set; }
		
		/// <summary>
		/// A list of Freebase topic IDs associated with the channel. You can retrieve information about each topic using the Freebase Topic API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicIds")]
		public string[] TopicIds { get; set; }
	}
	
	/// <summary>
	/// A channel banner returned as the response to a channel_banner.insert call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelBannerResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#channelBannerResource".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#channelBannerResource")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#channelBannerResource";
		
		/// <summary>
		/// The URL of this banner image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Channel[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#channelListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#channelListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#channelListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelProfileDetails
	{
		
		/// <summary>
		/// The YouTube channel ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The channel's URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelUrl")]
		public string ChannelUrl { get; set; }
		
		/// <summary>
		/// The channel's display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The channels's avatar URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileImageUrl")]
		public string ProfileImageUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelSection
	{
		
		/// <summary>
		/// Details about a channelsection, including playlists and channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDetails")]
		public ChannelSectionContentDetails ContentDetails { get; set; }
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the channel section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#channelSection".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#channelSection")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#channelSection";
		
		/// <summary>
		/// Localizations for different languages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizations")]
		public System.Collections.Generic.Dictionary<string, ChannelSectionLocalization> Localizations { get; set; }
		
		/// <summary>
		/// Basic details about a channel section, including title, style and position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public ChannelSectionSnippet Snippet { get; set; }
		
		/// <summary>
		/// ChannelSection targeting setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targeting")]
		public ChannelSectionTargeting Targeting { get; set; }
	}
	
	/// <summary>
	/// Details about a channelsection, including playlists and channels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelSectionContentDetails
	{
		
		/// <summary>
		/// The channel ids for type multiple_channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public string[] Channels { get; set; }
		
		/// <summary>
		/// The playlist ids for type single_playlist and multiple_playlists. For singlePlaylist, only one playlistId is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playlists")]
		public string[] Playlists { get; set; }
	}
	
	/// <summary>
	/// ChannelSection localization setting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelSectionLocalization
	{
		
		/// <summary>
		/// The localized strings for channel section's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Basic details about a channel section, including title, style and position.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelSectionSnippet
	{
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the channel that published the channel section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The language of the channel section's default title and description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLanguage")]
		public string DefaultLanguage { get; set; }
		
		/// <summary>
		/// ChannelSection localization setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localized")]
		public ChannelSectionLocalization Localized { get; set; }
		
		/// <summary>
		/// The position of the channel section in the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.UInt32> Position { get; set; }
		
		/// <summary>
		/// The style of the channel section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public System.Nullable<ChannelSectionSnippetStyle> Style { get; set; }
		
		/// <summary>
		/// The channel section's title for multiple_playlists and multiple_channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of the channel section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ChannelSectionSnippetType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChannelSectionSnippetStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="channelsectionStyleUnspecified")]
		channelsectionStyleUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="horizontalRow")]
		horizontalRow = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="verticalList")]
		verticalList = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChannelSectionSnippetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="channelsectionTypeUndefined")]
		channelsectionTypeUndefined = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="singlePlaylist")]
		singlePlaylist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="multiplePlaylists")]
		multiplePlaylists = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="popularUploads")]
		popularUploads = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="recentUploads")]
		recentUploads = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="likes")]
		likes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allPlaylists")]
		allPlaylists = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="likedPlaylists")]
		likedPlaylists = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="recentPosts")]
		recentPosts = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="recentActivity")]
		recentActivity = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="liveEvents")]
		liveEvents = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="upcomingEvents")]
		upcomingEvents = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completedEvents")]
		completedEvents = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="multipleChannels")]
		multipleChannels = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="postedVideos")]
		postedVideos = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="postedPlaylists")]
		postedPlaylists = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subscriptions")]
		subscriptions = 16,
	}
	
	/// <summary>
	/// ChannelSection targeting setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelSectionTargeting
	{
		
		/// <summary>
		/// The country the channel section is targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public string[] Countries { get; set; }
		
		/// <summary>
		/// The language the channel section is targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The region the channel section is targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public string[] Regions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelSectionListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of ChannelSections that match the request criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ChannelSection[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#channelSectionListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#channelSectionListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#channelSectionListResponse";
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// Information specific to a store on a merchandising platform linked to a YouTube channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelToStoreLinkDetails
	{
		
		/// <summary>
		/// Google Merchant Center id of the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public string MerchantId { get; set; }
		
		/// <summary>
		/// Name of the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeName")]
		public string StoreName { get; set; }
		
		/// <summary>
		/// Landing page of the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeUrl")]
		public string StoreUrl { get; set; }
	}
	
	/// <summary>
	/// A *comment* represents a single YouTube comment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Comment
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#comment".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#comment")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#comment";
		
		/// <summary>
		/// Basic details about a comment, such as its author and text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public CommentSnippet Snippet { get; set; }
	}
	
	/// <summary>
	/// Basic details about a comment, such as its author and text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentSnippet
	{
		
		/// <summary>
		/// The id of the author's YouTube channel, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorChannelId")]
		public CommentSnippetAuthorChannelId AuthorChannelId { get; set; }
		
		/// <summary>
		/// Link to the author's YouTube channel, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorChannelUrl")]
		public string AuthorChannelUrl { get; set; }
		
		/// <summary>
		/// The name of the user who posted the comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorDisplayName")]
		public string AuthorDisplayName { get; set; }
		
		/// <summary>
		/// The URL for the avatar of the user who posted the comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorProfileImageUrl")]
		public string AuthorProfileImageUrl { get; set; }
		
		/// <summary>
		/// Whether the current viewer can rate this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRate")]
		public System.Nullable<System.Boolean> CanRate { get; set; }
		
		/// <summary>
		/// The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The total number of likes this comment has received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="likeCount")]
		public System.Nullable<System.UInt32> LikeCount { get; set; }
		
		/// <summary>
		/// The comment's moderation status. Will not be set if the comments were requested through the id filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moderationStatus")]
		public System.Nullable<CommentSnippetModerationStatus> ModerationStatus { get; set; }
		
		/// <summary>
		/// The unique id of the parent comment, only set for replies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public string ParentId { get; set; }
		
		/// <summary>
		/// The date and time when the comment was originally published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedAt")]
		public System.Nullable<System.DateTimeOffset> PublishedAt { get; set; }
		
		/// <summary>
		/// The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textDisplay")]
		public string TextDisplay { get; set; }
		
		/// <summary>
		/// The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textOriginal")]
		public string TextOriginal { get; set; }
		
		/// <summary>
		/// The date and time when the comment was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// The ID of the video the comment refers to, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoId")]
		public string VideoId { get; set; }
		
		/// <summary>
		/// The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewerRating")]
		public System.Nullable<CommentSnippetViewerRating> ViewerRating { get; set; }
	}
	
	/// <summary>
	/// The id of the author's YouTube channel, if any.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentSnippetAuthorChannelId
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CommentSnippetModerationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="published")]
		published = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="heldForReview")]
		heldForReview = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="likelySpam")]
		likelySpam = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CommentSnippetViewerRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="like")]
		like = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dislike")]
		dislike = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of comments that match the request criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Comment[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#commentListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#commentListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#commentListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// A *comment thread* represents information that applies to a top level comment and all its replies. It can also include the top level comment itself and some of the replies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentThread
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the comment thread.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#commentThread".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#commentThread")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#commentThread";
		
		/// <summary>
		/// Comments written in (direct or indirect) reply to the top level comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replies")]
		public CommentThreadReplies Replies { get; set; }
		
		/// <summary>
		/// Basic details about a comment thread.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public CommentThreadSnippet Snippet { get; set; }
	}
	
	/// <summary>
	/// Comments written in (direct or indirect) reply to the top level comment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentThreadReplies
	{
		
		/// <summary>
		/// A limited number of replies. Unless the number of replies returned equals total_reply_count in the snippet the returned replies are only a subset of the total number of replies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public Comment[] Comments { get; set; }
	}
	
	/// <summary>
	/// Basic details about a comment thread.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentThreadSnippet
	{
		
		/// <summary>
		/// Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReply")]
		public System.Nullable<System.Boolean> CanReply { get; set; }
		
		/// <summary>
		/// The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// Whether the thread (and therefore all its comments) is visible to all YouTube users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublic")]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		/// <summary>
		/// A *comment* represents a single YouTube comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topLevelComment")]
		public Comment TopLevelComment { get; set; }
		
		/// <summary>
		/// The total number of replies (not including the top level comment).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalReplyCount")]
		public System.Nullable<System.UInt32> TotalReplyCount { get; set; }
		
		/// <summary>
		/// The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoId")]
		public string VideoId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentThreadListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of comment threads that match the request criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CommentThread[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#commentThreadListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#commentThreadListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#commentThreadListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// Ratings schemes. The country-specific ratings are mostly for movies and shows. LINT.IfChange
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentRating
	{
		
		/// <summary>
		/// The video's Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children's television programming.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acbRating")]
		public System.Nullable<ContentRatingAcbRating> AcbRating { get; set; }
		
		/// <summary>
		/// The video's rating from Italy's Autorità per le Garanzie nelle Comunicazioni (AGCOM).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agcomRating")]
		public System.Nullable<ContentRatingAgcomRating> AgcomRating { get; set; }
		
		/// <summary>
		/// The video's Anatel (Asociación Nacional de Televisión) rating for Chilean television.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="anatelRating")]
		public System.Nullable<ContentRatingAnatelRating> AnatelRating { get; set; }
		
		/// <summary>
		/// The video's British Board of Film Classification (BBFC) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bbfcRating")]
		public System.Nullable<ContentRatingBbfcRating> BbfcRating { get; set; }
		
		/// <summary>
		/// The video's rating from Thailand's Board of Film and Video Censors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bfvcRating")]
		public System.Nullable<ContentRatingBfvcRating> BfvcRating { get; set; }
		
		/// <summary>
		/// The video's rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bmukkRating")]
		public System.Nullable<ContentRatingBmukkRating> BmukkRating { get; set; }
		
		/// <summary>
		/// Rating system for Canadian TV - Canadian TV Classification System The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catvRating")]
		public System.Nullable<ContentRatingCatvRating> CatvRating { get; set; }
		
		/// <summary>
		/// The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catvfrRating")]
		public System.Nullable<ContentRatingCatvfrRating> CatvfrRating { get; set; }
		
		/// <summary>
		/// The video's Central Board of Film Certification (CBFC - India) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cbfcRating")]
		public System.Nullable<ContentRatingCbfcRating> CbfcRating { get; set; }
		
		/// <summary>
		/// The video's Consejo de Calificación Cinematográfica (Chile) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cccRating")]
		public System.Nullable<ContentRatingCccRating> CccRating { get; set; }
		
		/// <summary>
		/// The video's rating from Portugal's Comissão de Classificação de Espect´culos.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cceRating")]
		public System.Nullable<ContentRatingCceRating> CceRating { get; set; }
		
		/// <summary>
		/// The video's rating in Switzerland.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chfilmRating")]
		public System.Nullable<ContentRatingChfilmRating> ChfilmRating { get; set; }
		
		/// <summary>
		/// The video's Canadian Home Video Rating System (CHVRS) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chvrsRating")]
		public System.Nullable<ContentRatingChvrsRating> ChvrsRating { get; set; }
		
		/// <summary>
		/// The video's rating from the Commission de Contrôle des Films (Belgium).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cicfRating")]
		public System.Nullable<ContentRatingCicfRating> CicfRating { get; set; }
		
		/// <summary>
		/// The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cnaRating")]
		public System.Nullable<ContentRatingCnaRating> CnaRating { get; set; }
		
		/// <summary>
		/// Rating system in France - Commission de classification cinematographique
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cncRating")]
		public System.Nullable<ContentRatingCncRating> CncRating { get; set; }
		
		/// <summary>
		/// The video's rating from France's Conseil supérieur de l’audiovisuel, which rates broadcast content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="csaRating")]
		public System.Nullable<ContentRatingCsaRating> CsaRating { get; set; }
		
		/// <summary>
		/// The video's rating from Luxembourg's Commission de surveillance de la classification des films (CSCF).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cscfRating")]
		public System.Nullable<ContentRatingCscfRating> CscfRating { get; set; }
		
		/// <summary>
		/// The video's rating in the Czech Republic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="czfilmRating")]
		public System.Nullable<ContentRatingCzfilmRating> CzfilmRating { get; set; }
		
		/// <summary>
		/// The video's Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="djctqRating")]
		public System.Nullable<ContentRatingDjctqRating> DjctqRating { get; set; }
		
		/// <summary>
		/// Reasons that explain why the video received its DJCQT (Brazil) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="djctqRatingReasons")]
		public string[] DjctqRatingReasons { get; set; }
		
		/// <summary>
		/// Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ecbmctRating")]
		public System.Nullable<ContentRatingEcbmctRating> EcbmctRating { get; set; }
		
		/// <summary>
		/// The video's rating in Estonia.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eefilmRating")]
		public System.Nullable<ContentRatingEefilmRating> EefilmRating { get; set; }
		
		/// <summary>
		/// The video's rating in Egypt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="egfilmRating")]
		public System.Nullable<ContentRatingEgfilmRating> EgfilmRating { get; set; }
		
		/// <summary>
		/// The video's Eirin (映倫) rating. Eirin is the Japanese rating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eirinRating")]
		public System.Nullable<ContentRatingEirinRating> EirinRating { get; set; }
		
		/// <summary>
		/// The video's rating from Malaysia's Film Censorship Board.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fcbmRating")]
		public System.Nullable<ContentRatingFcbmRating> FcbmRating { get; set; }
		
		/// <summary>
		/// The video's rating from Hong Kong's Office for Film, Newspaper and Article Administration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fcoRating")]
		public System.Nullable<ContentRatingFcoRating> FcoRating { get; set; }
		
		/// <summary>
		/// This property has been deprecated. Use the contentDetails.contentRating.cncRating instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fmocRating")]
		public System.Nullable<ContentRatingFmocRating> FmocRating { get; set; }
		
		/// <summary>
		/// The video's rating from South Africa's Film and Publication Board.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fpbRating")]
		public System.Nullable<ContentRatingFpbRating> FpbRating { get; set; }
		
		/// <summary>
		/// Reasons that explain why the video received its FPB (South Africa) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fpbRatingReasons")]
		public string[] FpbRatingReasons { get; set; }
		
		/// <summary>
		/// The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fskRating")]
		public System.Nullable<ContentRatingFskRating> FskRating { get; set; }
		
		/// <summary>
		/// The video's rating in Greece.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grfilmRating")]
		public System.Nullable<ContentRatingGrfilmRating> GrfilmRating { get; set; }
		
		/// <summary>
		/// The video's Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icaaRating")]
		public System.Nullable<ContentRatingIcaaRating> IcaaRating { get; set; }
		
		/// <summary>
		/// The video's Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ifcoRating")]
		public System.Nullable<ContentRatingIfcoRating> IfcoRating { get; set; }
		
		/// <summary>
		/// The video's rating in Israel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ilfilmRating")]
		public System.Nullable<ContentRatingIlfilmRating> IlfilmRating { get; set; }
		
		/// <summary>
		/// The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incaaRating")]
		public System.Nullable<ContentRatingIncaaRating> IncaaRating { get; set; }
		
		/// <summary>
		/// The video's rating from the Kenya Film Classification Board.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kfcbRating")]
		public System.Nullable<ContentRatingKfcbRating> KfcbRating { get; set; }
		
		/// <summary>
		/// The video's NICAM/Kijkwijzer rating from the Nederlands Instituut voor de Classificatie van Audiovisuele Media (Netherlands).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kijkwijzerRating")]
		public System.Nullable<ContentRatingKijkwijzerRating> KijkwijzerRating { get; set; }
		
		/// <summary>
		/// The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmrbRating")]
		public System.Nullable<ContentRatingKmrbRating> KmrbRating { get; set; }
		
		/// <summary>
		/// The video's rating from Indonesia's Lembaga Sensor Film.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lsfRating")]
		public System.Nullable<ContentRatingLsfRating> LsfRating { get; set; }
		
		/// <summary>
		/// The video's rating from Malta's Film Age-Classification Board.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mccaaRating")]
		public System.Nullable<ContentRatingMccaaRating> MccaaRating { get; set; }
		
		/// <summary>
		/// The video's rating from the Danish Film Institute's (Det Danske Filminstitut) Media Council for Children and Young People.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mccypRating")]
		public System.Nullable<ContentRatingMccypRating> MccypRating { get; set; }
		
		/// <summary>
		/// The video's rating system for Vietnam - MCST
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mcstRating")]
		public System.Nullable<ContentRatingMcstRating> McstRating { get; set; }
		
		/// <summary>
		/// The video's rating from Singapore's Media Development Authority (MDA) and, specifically, it's Board of Film Censors (BFC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mdaRating")]
		public System.Nullable<ContentRatingMdaRating> MdaRating { get; set; }
		
		/// <summary>
		/// The video's rating from Medietilsynet, the Norwegian Media Authority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medietilsynetRating")]
		public System.Nullable<ContentRatingMedietilsynetRating> MedietilsynetRating { get; set; }
		
		/// <summary>
		/// The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mekuRating")]
		public System.Nullable<ContentRatingMekuRating> MekuRating { get; set; }
		
		/// <summary>
		/// The rating system for MENA countries, a clone of MPAA. It is needed to prevent titles go live w/o additional QC check, since some of them can be inappropriate for the countries at all. See b/33408548 for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="menaMpaaRating")]
		public System.Nullable<ContentRatingMenaMpaaRating> MenaMpaaRating { get; set; }
		
		/// <summary>
		/// The video's rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mibacRating")]
		public System.Nullable<ContentRatingMibacRating> MibacRating { get; set; }
		
		/// <summary>
		/// The video's Ministerio de Cultura (Colombia) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mocRating")]
		public System.Nullable<ContentRatingMocRating> MocRating { get; set; }
		
		/// <summary>
		/// The video's rating from Taiwan's Ministry of Culture (文化部).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moctwRating")]
		public System.Nullable<ContentRatingMoctwRating> MoctwRating { get; set; }
		
		/// <summary>
		/// The video's Motion Picture Association of America (MPAA) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mpaaRating")]
		public System.Nullable<ContentRatingMpaaRating> MpaaRating { get; set; }
		
		/// <summary>
		/// The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mpaatRating")]
		public System.Nullable<ContentRatingMpaatRating> MpaatRating { get; set; }
		
		/// <summary>
		/// The video's rating from the Movie and Television Review and Classification Board (Philippines).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mtrcbRating")]
		public System.Nullable<ContentRatingMtrcbRating> MtrcbRating { get; set; }
		
		/// <summary>
		/// The video's rating from the Maldives National Bureau of Classification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nbcRating")]
		public System.Nullable<ContentRatingNbcRating> NbcRating { get; set; }
		
		/// <summary>
		/// The video's rating in Poland.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nbcplRating")]
		public System.Nullable<ContentRatingNbcplRating> NbcplRating { get; set; }
		
		/// <summary>
		/// The video's rating from the Bulgarian National Film Center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nfrcRating")]
		public System.Nullable<ContentRatingNfrcRating> NfrcRating { get; set; }
		
		/// <summary>
		/// The video's rating from Nigeria's National Film and Video Censors Board.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nfvcbRating")]
		public System.Nullable<ContentRatingNfvcbRating> NfvcbRating { get; set; }
		
		/// <summary>
		/// The video's rating from the Nacionãlais Kino centrs (National Film Centre of Latvia).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nkclvRating")]
		public System.Nullable<ContentRatingNkclvRating> NkclvRating { get; set; }
		
		/// <summary>
		/// The National Media Council ratings system for United Arab Emirates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nmcRating")]
		public System.Nullable<ContentRatingNmcRating> NmcRating { get; set; }
		
		/// <summary>
		/// The video's Office of Film and Literature Classification (OFLC - New Zealand) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oflcRating")]
		public System.Nullable<ContentRatingOflcRating> OflcRating { get; set; }
		
		/// <summary>
		/// The video's rating in Peru.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pefilmRating")]
		public System.Nullable<ContentRatingPefilmRating> PefilmRating { get; set; }
		
		/// <summary>
		/// The video's rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rcnofRating")]
		public System.Nullable<ContentRatingRcnofRating> RcnofRating { get; set; }
		
		/// <summary>
		/// The video's rating in Venezuela.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resorteviolenciaRating")]
		public System.Nullable<ContentRatingResorteviolenciaRating> ResorteviolenciaRating { get; set; }
		
		/// <summary>
		/// The video's General Directorate of Radio, Television and Cinematography (Mexico) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rtcRating")]
		public System.Nullable<ContentRatingRtcRating> RtcRating { get; set; }
		
		/// <summary>
		/// The video's rating from Ireland's Raidió Teilifís Éireann.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rteRating")]
		public System.Nullable<ContentRatingRteRating> RteRating { get; set; }
		
		/// <summary>
		/// The video's National Film Registry of the Russian Federation (MKRF - Russia) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="russiaRating")]
		public System.Nullable<ContentRatingRussiaRating> RussiaRating { get; set; }
		
		/// <summary>
		/// The video's rating in Slovakia.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skfilmRating")]
		public System.Nullable<ContentRatingSkfilmRating> SkfilmRating { get; set; }
		
		/// <summary>
		/// The video's rating in Iceland.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smaisRating")]
		public System.Nullable<ContentRatingSmaisRating> SmaisRating { get; set; }
		
		/// <summary>
		/// The video's rating from Statens medieråd (Sweden's National Media Council).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smsaRating")]
		public System.Nullable<ContentRatingSmsaRating> SmsaRating { get; set; }
		
		/// <summary>
		/// The video's TV Parental Guidelines (TVPG) rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tvpgRating")]
		public System.Nullable<ContentRatingTvpgRating> TvpgRating { get; set; }
		
		/// <summary>
		/// A rating that YouTube uses to identify age-restricted content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ytRating")]
		public System.Nullable<ContentRatingYtRating> YtRating { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingAcbRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="acbUnspecified")]
		acbUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="acbE")]
		acbE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="acbP")]
		acbP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="acbC")]
		acbC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="acbG")]
		acbG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="acbPg")]
		acbPg = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="acbM")]
		acbM = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="acbMa15plus")]
		acbMa15plus = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="acbR18plus")]
		acbR18plus = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="acbUnrated")]
		acbUnrated = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingAgcomRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="agcomUnspecified")]
		agcomUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="agcomT")]
		agcomT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="agcomVm14")]
		agcomVm14 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="agcomVm18")]
		agcomVm18 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="agcomUnrated")]
		agcomUnrated = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingAnatelRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="anatelUnspecified")]
		anatelUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="anatelF")]
		anatelF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="anatelI")]
		anatelI = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="anatelI7")]
		anatelI7 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="anatelI10")]
		anatelI10 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="anatelI12")]
		anatelI12 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="anatelR")]
		anatelR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="anatelA")]
		anatelA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="anatelUnrated")]
		anatelUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingBbfcRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bbfcUnspecified")]
		bbfcUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bbfcU")]
		bbfcU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bbfcPg")]
		bbfcPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bbfc12a")]
		bbfc12a = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bbfc12")]
		bbfc12 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bbfc15")]
		bbfc15 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bbfc18")]
		bbfc18 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bbfcR18")]
		bbfcR18 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bbfcUnrated")]
		bbfcUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingBfvcRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bfvcUnspecified")]
		bfvcUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bfvcG")]
		bfvcG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bfvcE")]
		bfvcE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bfvc13")]
		bfvc13 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bfvc15")]
		bfvc15 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bfvc18")]
		bfvc18 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bfvc20")]
		bfvc20 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bfvcB")]
		bfvcB = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bfvcUnrated")]
		bfvcUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingBmukkRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bmukkUnspecified")]
		bmukkUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bmukkAa")]
		bmukkAa = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bmukk6")]
		bmukk6 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bmukk8")]
		bmukk8 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bmukk10")]
		bmukk10 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bmukk12")]
		bmukk12 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bmukk14")]
		bmukk14 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bmukk16")]
		bmukk16 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bmukkUnrated")]
		bmukkUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingCatvRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvUnspecified")]
		catvUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvC")]
		catvC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvC8")]
		catvC8 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvG")]
		catvG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvPg")]
		catvPg = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catv14plus")]
		catv14plus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catv18plus")]
		catv18plus = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvUnrated")]
		catvUnrated = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvE")]
		catvE = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingCatvfrRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvfrUnspecified")]
		catvfrUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvfrG")]
		catvfrG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvfr8plus")]
		catvfr8plus = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvfr13plus")]
		catvfr13plus = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvfr16plus")]
		catvfr16plus = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvfr18plus")]
		catvfr18plus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvfrUnrated")]
		catvfrUnrated = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="catvfrE")]
		catvfrE = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingCbfcRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cbfcUnspecified")]
		cbfcUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cbfcU")]
		cbfcU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cbfcUA")]
		cbfcUA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cbfcUA7plus")]
		cbfcUA7plus = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cbfcUA13plus")]
		cbfcUA13plus = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cbfcUA16plus")]
		cbfcUA16plus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cbfcA")]
		cbfcA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cbfcS")]
		cbfcS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cbfcUnrated")]
		cbfcUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingCccRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cccUnspecified")]
		cccUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cccTe")]
		cccTe = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ccc6")]
		ccc6 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ccc14")]
		ccc14 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ccc18")]
		ccc18 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ccc18v")]
		ccc18v = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ccc18s")]
		ccc18s = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cccUnrated")]
		cccUnrated = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingCceRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cceUnspecified")]
		cceUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cceM4")]
		cceM4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cceM6")]
		cceM6 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cceM12")]
		cceM12 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cceM16")]
		cceM16 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cceM18")]
		cceM18 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cceUnrated")]
		cceUnrated = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cceM14")]
		cceM14 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingChfilmRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chfilmUnspecified")]
		chfilmUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chfilm0")]
		chfilm0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chfilm6")]
		chfilm6 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chfilm12")]
		chfilm12 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chfilm16")]
		chfilm16 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chfilm18")]
		chfilm18 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chfilmUnrated")]
		chfilmUnrated = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingChvrsRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chvrsUnspecified")]
		chvrsUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chvrsG")]
		chvrsG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chvrsPg")]
		chvrsPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chvrs14a")]
		chvrs14a = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chvrs18a")]
		chvrs18a = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chvrsR")]
		chvrsR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chvrsE")]
		chvrsE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chvrsUnrated")]
		chvrsUnrated = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingCicfRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cicfUnspecified")]
		cicfUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cicfE")]
		cicfE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cicfKtEa")]
		cicfKtEa = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cicfKntEna")]
		cicfKntEna = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cicfUnrated")]
		cicfUnrated = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingCnaRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cnaUnspecified")]
		cnaUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cnaAp")]
		cnaAp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cna12")]
		cna12 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cna15")]
		cna15 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cna18")]
		cna18 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cna18plus")]
		cna18plus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cnaUnrated")]
		cnaUnrated = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingCncRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cncUnspecified")]
		cncUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cncT")]
		cncT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cnc10")]
		cnc10 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cnc12")]
		cnc12 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cnc16")]
		cnc16 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cnc18")]
		cnc18 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cncE")]
		cncE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cncInterdiction")]
		cncInterdiction = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cncUnrated")]
		cncUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingCsaRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="csaUnspecified")]
		csaUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="csaT")]
		csaT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="csa10")]
		csa10 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="csa12")]
		csa12 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="csa16")]
		csa16 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="csa18")]
		csa18 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="csaInterdiction")]
		csaInterdiction = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="csaUnrated")]
		csaUnrated = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingCscfRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cscfUnspecified")]
		cscfUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cscfAl")]
		cscfAl = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cscfA")]
		cscfA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cscf6")]
		cscf6 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cscf9")]
		cscf9 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cscf12")]
		cscf12 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cscf16")]
		cscf16 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cscf18")]
		cscf18 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cscfUnrated")]
		cscfUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingCzfilmRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="czfilmUnspecified")]
		czfilmUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="czfilmU")]
		czfilmU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="czfilm12")]
		czfilm12 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="czfilm14")]
		czfilm14 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="czfilm18")]
		czfilm18 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="czfilmUnrated")]
		czfilmUnrated = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingDjctqRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctqUnspecified")]
		djctqUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctqL")]
		djctqL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq10")]
		djctq10 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq12")]
		djctq12 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq14")]
		djctq14 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq16")]
		djctq16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq18")]
		djctq18 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctqEr")]
		djctqEr = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctqL10")]
		djctqL10 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctqL12")]
		djctqL12 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctqL14")]
		djctqL14 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctqL16")]
		djctqL16 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctqL18")]
		djctqL18 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq1012")]
		djctq1012 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq1014")]
		djctq1014 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq1016")]
		djctq1016 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq1018")]
		djctq1018 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq1214")]
		djctq1214 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq1216")]
		djctq1216 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq1218")]
		djctq1218 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq1416")]
		djctq1416 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq1418")]
		djctq1418 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctq1618")]
		djctq1618 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="djctqUnrated")]
		djctqUnrated = 23,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingEcbmctRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecbmctUnspecified")]
		ecbmctUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecbmctG")]
		ecbmctG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecbmct7a")]
		ecbmct7a = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecbmct7plus")]
		ecbmct7plus = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecbmct13a")]
		ecbmct13a = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecbmct13plus")]
		ecbmct13plus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecbmct15a")]
		ecbmct15a = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecbmct15plus")]
		ecbmct15plus = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecbmct18plus")]
		ecbmct18plus = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecbmctUnrated")]
		ecbmctUnrated = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingEefilmRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eefilmUnspecified")]
		eefilmUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eefilmPere")]
		eefilmPere = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eefilmL")]
		eefilmL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eefilmMs6")]
		eefilmMs6 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eefilmK6")]
		eefilmK6 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eefilmMs12")]
		eefilmMs12 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eefilmK12")]
		eefilmK12 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eefilmK14")]
		eefilmK14 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eefilmK16")]
		eefilmK16 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eefilmUnrated")]
		eefilmUnrated = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingEgfilmRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="egfilmUnspecified")]
		egfilmUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="egfilmGn")]
		egfilmGn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="egfilm18")]
		egfilm18 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="egfilmBn")]
		egfilmBn = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="egfilmUnrated")]
		egfilmUnrated = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingEirinRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eirinUnspecified")]
		eirinUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eirinG")]
		eirinG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eirinPg12")]
		eirinPg12 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eirinR15plus")]
		eirinR15plus = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eirinR18plus")]
		eirinR18plus = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eirinUnrated")]
		eirinUnrated = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingFcbmRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcbmUnspecified")]
		fcbmUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcbmU")]
		fcbmU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcbmPg13")]
		fcbmPg13 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcbmP13")]
		fcbmP13 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcbm18")]
		fcbm18 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcbm18sx")]
		fcbm18sx = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcbm18pa")]
		fcbm18pa = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcbm18sg")]
		fcbm18sg = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcbm18pl")]
		fcbm18pl = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcbmUnrated")]
		fcbmUnrated = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingFcoRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcoUnspecified")]
		fcoUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcoI")]
		fcoI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcoIia")]
		fcoIia = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcoIib")]
		fcoIib = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcoIi")]
		fcoIi = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcoIii")]
		fcoIii = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fcoUnrated")]
		fcoUnrated = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingFmocRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fmocUnspecified")]
		fmocUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fmocU")]
		fmocU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fmoc10")]
		fmoc10 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fmoc12")]
		fmoc12 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fmoc16")]
		fmoc16 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fmoc18")]
		fmoc18 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fmocE")]
		fmocE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fmocUnrated")]
		fmocUnrated = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingFpbRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fpbUnspecified")]
		fpbUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fpbA")]
		fpbA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fpbPg")]
		fpbPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fpb79Pg")]
		fpb79Pg = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fpb1012Pg")]
		fpb1012Pg = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fpb13")]
		fpb13 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fpb16")]
		fpb16 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fpb18")]
		fpb18 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fpbX18")]
		fpbX18 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fpbXx")]
		fpbXx = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fpbUnrated")]
		fpbUnrated = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fpb10")]
		fpb10 = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingFskRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fskUnspecified")]
		fskUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fsk0")]
		fsk0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fsk6")]
		fsk6 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fsk12")]
		fsk12 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fsk16")]
		fsk16 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fsk18")]
		fsk18 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fskUnrated")]
		fskUnrated = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingGrfilmRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="grfilmUnspecified")]
		grfilmUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="grfilmK")]
		grfilmK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="grfilmE")]
		grfilmE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="grfilmK12")]
		grfilmK12 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="grfilmK13")]
		grfilmK13 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="grfilmK15")]
		grfilmK15 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="grfilmK17")]
		grfilmK17 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="grfilmK18")]
		grfilmK18 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="grfilmUnrated")]
		grfilmUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingIcaaRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="icaaUnspecified")]
		icaaUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="icaaApta")]
		icaaApta = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="icaa7")]
		icaa7 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="icaa12")]
		icaa12 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="icaa13")]
		icaa13 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="icaa16")]
		icaa16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="icaa18")]
		icaa18 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="icaaX")]
		icaaX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="icaaUnrated")]
		icaaUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingIfcoRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ifcoUnspecified")]
		ifcoUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ifcoG")]
		ifcoG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ifcoPg")]
		ifcoPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ifco12")]
		ifco12 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ifco12a")]
		ifco12a = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ifco15")]
		ifco15 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ifco15a")]
		ifco15a = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ifco16")]
		ifco16 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ifco18")]
		ifco18 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ifcoUnrated")]
		ifcoUnrated = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingIlfilmRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ilfilmUnspecified")]
		ilfilmUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ilfilmAa")]
		ilfilmAa = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ilfilm12")]
		ilfilm12 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ilfilm14")]
		ilfilm14 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ilfilm16")]
		ilfilm16 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ilfilm18")]
		ilfilm18 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ilfilmUnrated")]
		ilfilmUnrated = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingIncaaRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="incaaUnspecified")]
		incaaUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="incaaAtp")]
		incaaAtp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="incaaSam13")]
		incaaSam13 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="incaaSam16")]
		incaaSam16 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="incaaSam18")]
		incaaSam18 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="incaaC")]
		incaaC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="incaaUnrated")]
		incaaUnrated = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingKfcbRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kfcbUnspecified")]
		kfcbUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kfcbG")]
		kfcbG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kfcbPg")]
		kfcbPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kfcb16plus")]
		kfcb16plus = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kfcbR")]
		kfcbR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kfcbUnrated")]
		kfcbUnrated = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingKijkwijzerRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kijkwijzerUnspecified")]
		kijkwijzerUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kijkwijzerAl")]
		kijkwijzerAl = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kijkwijzer6")]
		kijkwijzer6 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kijkwijzer9")]
		kijkwijzer9 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kijkwijzer12")]
		kijkwijzer12 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kijkwijzer16")]
		kijkwijzer16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kijkwijzer18")]
		kijkwijzer18 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kijkwijzerUnrated")]
		kijkwijzerUnrated = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingKmrbRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kmrbUnspecified")]
		kmrbUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kmrbAll")]
		kmrbAll = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kmrb12plus")]
		kmrb12plus = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kmrb15plus")]
		kmrb15plus = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kmrbTeenr")]
		kmrbTeenr = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kmrbR")]
		kmrbR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kmrbUnrated")]
		kmrbUnrated = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingLsfRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lsfUnspecified")]
		lsfUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lsfSu")]
		lsfSu = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lsfA")]
		lsfA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lsfBo")]
		lsfBo = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lsf13")]
		lsf13 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lsfR")]
		lsfR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lsf17")]
		lsf17 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lsfD")]
		lsfD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lsf21")]
		lsf21 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lsfUnrated")]
		lsfUnrated = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingMccaaRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccaaUnspecified")]
		mccaaUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccaaU")]
		mccaaU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccaaPg")]
		mccaaPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccaa12a")]
		mccaa12a = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccaa12")]
		mccaa12 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccaa14")]
		mccaa14 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccaa15")]
		mccaa15 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccaa16")]
		mccaa16 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccaa18")]
		mccaa18 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccaaUnrated")]
		mccaaUnrated = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingMccypRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccypUnspecified")]
		mccypUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccypA")]
		mccypA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccyp7")]
		mccyp7 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccyp11")]
		mccyp11 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccyp15")]
		mccyp15 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mccypUnrated")]
		mccypUnrated = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingMcstRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mcstUnspecified")]
		mcstUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mcstP")]
		mcstP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mcst0")]
		mcst0 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mcstC13")]
		mcstC13 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mcstC16")]
		mcstC16 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mcst16plus")]
		mcst16plus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mcstC18")]
		mcstC18 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mcstGPg")]
		mcstGPg = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mcstUnrated")]
		mcstUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingMdaRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mdaUnspecified")]
		mdaUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mdaG")]
		mdaG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mdaPg")]
		mdaPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mdaPg13")]
		mdaPg13 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mdaNc16")]
		mdaNc16 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mdaM18")]
		mdaM18 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mdaR21")]
		mdaR21 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mdaUnrated")]
		mdaUnrated = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingMedietilsynetRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medietilsynetUnspecified")]
		medietilsynetUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medietilsynetA")]
		medietilsynetA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medietilsynet6")]
		medietilsynet6 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medietilsynet7")]
		medietilsynet7 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medietilsynet9")]
		medietilsynet9 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medietilsynet11")]
		medietilsynet11 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medietilsynet12")]
		medietilsynet12 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medietilsynet15")]
		medietilsynet15 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medietilsynet18")]
		medietilsynet18 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medietilsynetUnrated")]
		medietilsynetUnrated = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingMekuRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mekuUnspecified")]
		mekuUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mekuS")]
		mekuS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="meku7")]
		meku7 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="meku12")]
		meku12 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="meku16")]
		meku16 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="meku18")]
		meku18 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mekuUnrated")]
		mekuUnrated = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingMenaMpaaRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="menaMpaaUnspecified")]
		menaMpaaUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="menaMpaaG")]
		menaMpaaG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="menaMpaaPg")]
		menaMpaaPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="menaMpaaPg13")]
		menaMpaaPg13 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="menaMpaaR")]
		menaMpaaR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="menaMpaaUnrated")]
		menaMpaaUnrated = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingMibacRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mibacUnspecified")]
		mibacUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mibacT")]
		mibacT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mibacVap")]
		mibacVap = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mibacVm6")]
		mibacVm6 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mibacVm12")]
		mibacVm12 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mibacVm14")]
		mibacVm14 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mibacVm16")]
		mibacVm16 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mibacVm18")]
		mibacVm18 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mibacUnrated")]
		mibacUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingMocRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mocUnspecified")]
		mocUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mocE")]
		mocE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mocT")]
		mocT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moc7")]
		moc7 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moc12")]
		moc12 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moc15")]
		moc15 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moc18")]
		moc18 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mocX")]
		mocX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mocBanned")]
		mocBanned = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mocUnrated")]
		mocUnrated = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingMoctwRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moctwUnspecified")]
		moctwUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moctwG")]
		moctwG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moctwP")]
		moctwP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moctwPg")]
		moctwPg = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moctwR")]
		moctwR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moctwUnrated")]
		moctwUnrated = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moctwR12")]
		moctwR12 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moctwR15")]
		moctwR15 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingMpaaRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mpaaUnspecified")]
		mpaaUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mpaaG")]
		mpaaG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mpaaPg")]
		mpaaPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mpaaPg13")]
		mpaaPg13 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mpaaR")]
		mpaaR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mpaaNc17")]
		mpaaNc17 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mpaaX")]
		mpaaX = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mpaaUnrated")]
		mpaaUnrated = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingMpaatRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mpaatUnspecified")]
		mpaatUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mpaatGb")]
		mpaatGb = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mpaatRb")]
		mpaatRb = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingMtrcbRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mtrcbUnspecified")]
		mtrcbUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mtrcbG")]
		mtrcbG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mtrcbPg")]
		mtrcbPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mtrcbR13")]
		mtrcbR13 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mtrcbR16")]
		mtrcbR16 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mtrcbR18")]
		mtrcbR18 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mtrcbX")]
		mtrcbX = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mtrcbUnrated")]
		mtrcbUnrated = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingNbcRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbcUnspecified")]
		nbcUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbcG")]
		nbcG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbcPg")]
		nbcPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbc12plus")]
		nbc12plus = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbc15plus")]
		nbc15plus = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbc18plus")]
		nbc18plus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbc18plusr")]
		nbc18plusr = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbcPu")]
		nbcPu = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbcUnrated")]
		nbcUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingNbcplRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbcplUnspecified")]
		nbcplUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbcplI")]
		nbcplI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbcplIi")]
		nbcplIi = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbcplIii")]
		nbcplIii = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbcplIv")]
		nbcplIv = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbcpl18plus")]
		nbcpl18plus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbcplUnrated")]
		nbcplUnrated = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingNfrcRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfrcUnspecified")]
		nfrcUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfrcA")]
		nfrcA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfrcB")]
		nfrcB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfrcC")]
		nfrcC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfrcD")]
		nfrcD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfrcX")]
		nfrcX = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfrcUnrated")]
		nfrcUnrated = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingNfvcbRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfvcbUnspecified")]
		nfvcbUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfvcbG")]
		nfvcbG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfvcbPg")]
		nfvcbPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfvcb12")]
		nfvcb12 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfvcb12a")]
		nfvcb12a = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfvcb15")]
		nfvcb15 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfvcb18")]
		nfvcb18 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfvcbRe")]
		nfvcbRe = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nfvcbUnrated")]
		nfvcbUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingNkclvRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nkclvUnspecified")]
		nkclvUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nkclvU")]
		nkclvU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nkclv7plus")]
		nkclv7plus = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nkclv12plus")]
		nkclv12plus = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nkclv16plus")]
		nkclv16plus = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nkclv18plus")]
		nkclv18plus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nkclvUnrated")]
		nkclvUnrated = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingNmcRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nmcUnspecified")]
		nmcUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nmcG")]
		nmcG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nmcPg")]
		nmcPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nmcPg13")]
		nmcPg13 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nmcPg15")]
		nmcPg15 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nmc15plus")]
		nmc15plus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nmc18plus")]
		nmc18plus = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nmc18tc")]
		nmc18tc = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nmcUnrated")]
		nmcUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingOflcRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oflcUnspecified")]
		oflcUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oflcG")]
		oflcG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oflcPg")]
		oflcPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oflcM")]
		oflcM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oflcR13")]
		oflcR13 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oflcR15")]
		oflcR15 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oflcR16")]
		oflcR16 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oflcR18")]
		oflcR18 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oflcUnrated")]
		oflcUnrated = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oflcRp13")]
		oflcRp13 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oflcRp16")]
		oflcRp16 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oflcRp18")]
		oflcRp18 = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingPefilmRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pefilmUnspecified")]
		pefilmUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pefilmPt")]
		pefilmPt = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pefilmPg")]
		pefilmPg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pefilm14")]
		pefilm14 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pefilm18")]
		pefilm18 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pefilmUnrated")]
		pefilmUnrated = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingRcnofRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rcnofUnspecified")]
		rcnofUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rcnofI")]
		rcnofI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rcnofIi")]
		rcnofIi = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rcnofIii")]
		rcnofIii = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rcnofIv")]
		rcnofIv = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rcnofV")]
		rcnofV = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rcnofVi")]
		rcnofVi = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rcnofUnrated")]
		rcnofUnrated = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingResorteviolenciaRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resorteviolenciaUnspecified")]
		resorteviolenciaUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resorteviolenciaA")]
		resorteviolenciaA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resorteviolenciaB")]
		resorteviolenciaB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resorteviolenciaC")]
		resorteviolenciaC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resorteviolenciaD")]
		resorteviolenciaD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resorteviolenciaE")]
		resorteviolenciaE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resorteviolenciaUnrated")]
		resorteviolenciaUnrated = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingRtcRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtcUnspecified")]
		rtcUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtcAa")]
		rtcAa = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtcA")]
		rtcA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtcB")]
		rtcB = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtcB15")]
		rtcB15 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtcC")]
		rtcC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtcD")]
		rtcD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtcUnrated")]
		rtcUnrated = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingRteRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rteUnspecified")]
		rteUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rteGa")]
		rteGa = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rteCh")]
		rteCh = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rtePs")]
		rtePs = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rteMa")]
		rteMa = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rteUnrated")]
		rteUnrated = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingRussiaRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="russiaUnspecified")]
		russiaUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="russia0")]
		russia0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="russia6")]
		russia6 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="russia12")]
		russia12 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="russia16")]
		russia16 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="russia18")]
		russia18 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="russiaUnrated")]
		russiaUnrated = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingSkfilmRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="skfilmUnspecified")]
		skfilmUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="skfilmG")]
		skfilmG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="skfilmP2")]
		skfilmP2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="skfilmP5")]
		skfilmP5 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="skfilmP8")]
		skfilmP8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="skfilmUnrated")]
		skfilmUnrated = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingSmaisRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smaisUnspecified")]
		smaisUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smaisL")]
		smaisL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smais7")]
		smais7 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smais12")]
		smais12 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smais14")]
		smais14 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smais16")]
		smais16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smais18")]
		smais18 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smaisUnrated")]
		smaisUnrated = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingSmsaRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smsaUnspecified")]
		smsaUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smsaA")]
		smsaA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smsa7")]
		smsa7 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smsa11")]
		smsa11 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smsa15")]
		smsa15 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="smsaUnrated")]
		smsaUnrated = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingTvpgRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tvpgUnspecified")]
		tvpgUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tvpgY")]
		tvpgY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tvpgY7")]
		tvpgY7 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tvpgY7Fv")]
		tvpgY7Fv = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tvpgG")]
		tvpgG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tvpgPg")]
		tvpgPg = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pg14")]
		pg14 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tvpgMa")]
		tvpgMa = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tvpgUnrated")]
		tvpgUnrated = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentRatingYtRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ytUnspecified")]
		ytUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ytAgeRestricted")]
		ytAgeRestricted = 1,
	}
	
	/// <summary>
	/// Note that there may be a 5-second end-point resolution issue. For instance, if a cuepoint comes in for 22:03:27, we may stuff the cuepoint into 22:03:25 or 22:03:30, depending. This is an artifact of HLS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Cuepoint
	{
		
		[System.Runtime.Serialization.DataMember(Name="cueType")]
		public System.Nullable<CuepointCueType> CueType { get; set; }
		
		/// <summary>
		/// The duration of this cuepoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationSecs")]
		public System.Nullable<System.UInt32> DurationSecs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The identifier for cuepoint resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The time when the cuepoint should be inserted by offset to the broadcast actual start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertionOffsetTimeMs")]
		public string InsertionOffsetTimeMs { get; set; }
		
		/// <summary>
		/// The wall clock time at which the cuepoint should be inserted. Only one of insertion_offset_time_ms and walltime_ms may be set at a time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="walltimeMs")]
		public string WalltimeMs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CuepointCueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cueTypeUnspecified")]
		cueTypeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cueTypeAd")]
		cueTypeAd = 1,
	}
	
	/// <summary>
	/// Schedule to insert cuepoints into a broadcast by ads automator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CuepointSchedule
	{
		
		/// <summary>
		/// This field is semantically required. If it is set false or not set, other fields in this message will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// If set, automatic cuepoint insertion is paused until this timestamp ("No Ad Zone"). The value is specified in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pauseAdsUntil")]
		public string PauseAdsUntil { get; set; }
		
		/// <summary>
		/// Interval frequency in seconds that api uses to insert cuepoints automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeatIntervalSecs")]
		public System.Nullable<System.Int32> RepeatIntervalSecs { get; set; }
		
		/// <summary>
		/// The strategy to use when scheduling cuepoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleStrategy")]
		public System.Nullable<CuepointScheduleScheduleStrategy> ScheduleStrategy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CuepointScheduleScheduleStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scheduleStrategyUnspecified")]
		scheduleStrategyUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="concurrent")]
		concurrent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nonConcurrent")]
		nonConcurrent = 2,
	}
	
	/// <summary>
	/// Geographical coordinates of a point, in WGS84.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GeoPoint
	{
		
		/// <summary>
		/// Altitude above the reference ellipsoid, in meters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altitude")]
		public System.Nullable<System.Double> Altitude { get; set; }
		
		/// <summary>
		/// Latitude in degrees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Longitude in degrees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// An *i18nLanguage* resource identifies a UI language currently supported by YouTube.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class I18nLanguage
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the i18n language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#i18nLanguage".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#i18nLanguage")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#i18nLanguage";
		
		/// <summary>
		/// Basic details about an i18n language, such as language code and human-readable name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public I18nLanguageSnippet Snippet { get; set; }
	}
	
	/// <summary>
	/// Basic details about an i18n language, such as language code and human-readable name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class I18nLanguageSnippet
	{
		
		/// <summary>
		/// A short BCP-47 code that uniquely identifies a language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hl")]
		public string Hl { get; set; }
		
		/// <summary>
		/// The human-readable name of the language in the language itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class I18nLanguageListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of supported i18n languages. In this map, the i18n language ID is the map key, and its value is the corresponding i18nLanguage resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public I18nLanguage[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#i18nLanguageListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#i18nLanguageListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#i18nLanguageListResponse";
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// A *i18nRegion* resource identifies a region where YouTube is available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class I18nRegion
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the i18n region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#i18nRegion".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#i18nRegion")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#i18nRegion";
		
		/// <summary>
		/// Basic details about an i18n region, such as region code and human-readable name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public I18nRegionSnippet Snippet { get; set; }
	}
	
	/// <summary>
	/// Basic details about an i18n region, such as region code and human-readable name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class I18nRegionSnippet
	{
		
		/// <summary>
		/// The region code as a 2-letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gl")]
		public string Gl { get; set; }
		
		/// <summary>
		/// The human-readable name of the region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class I18nRegionListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of regions where YouTube is available. In this map, the i18n region ID is the map key, and its value is the corresponding i18nRegion resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public I18nRegion[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#i18nRegionListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#i18nRegionListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#i18nRegionListResponse";
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// LINT.IfChange Describes an invideo branding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvideoBranding
	{
		
		/// <summary>
		/// The bytes the uploaded image. Only used in api to youtube communication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageBytes")]
		public string ImageBytes { get; set; }
		
		/// <summary>
		/// The url of the uploaded image. Only used in apiary to api communication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// Describes the spatial position of a visual widget inside a video. It is a union of various position types, out of which only will be set one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public InvideoPosition Position { get; set; }
		
		/// <summary>
		/// The channel to which this branding links. If not present it defaults to the current channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetChannelId")]
		public string TargetChannelId { get; set; }
		
		/// <summary>
		/// Describes a temporal position of a visual widget inside a video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public InvideoTiming Timing { get; set; }
	}
	
	/// <summary>
	/// Describes the spatial position of a visual widget inside a video. It is a union of various position types, out of which only will be set one.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvideoPosition
	{
		
		/// <summary>
		/// Describes in which corner of the video the visual widget will appear.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cornerPosition")]
		public System.Nullable<InvideoPositionCornerPosition> CornerPosition { get; set; }
		
		/// <summary>
		/// Defines the position type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<InvideoPositionType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvideoPositionCornerPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="topLeft")]
		topLeft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="topRight")]
		topRight = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bottomLeft")]
		bottomLeft = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bottomRight")]
		bottomRight = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvideoPositionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="corner")]
		corner = 0,
	}
	
	/// <summary>
	/// Describes a temporal position of a visual widget inside a video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvideoTiming
	{
		
		/// <summary>
		/// Defines the duration in milliseconds for which the promotion should be displayed. If missing, the client should use the default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationMs")]
		public string DurationMs { get; set; }
		
		/// <summary>
		/// Defines the time at which the promotion will appear. Depending on the value of type the value of the offsetMs field will represent a time offset from the start or from the end of the video, expressed in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetMs")]
		public string OffsetMs { get; set; }
		
		/// <summary>
		/// Describes a timing type. If the value is offsetFromStart, then the offsetMs field represents an offset from the start of the video. If the value is offsetFromEnd, then the offsetMs field represents an offset from the end of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<InvideoTimingType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvideoTimingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="offsetFromStart")]
		offsetFromStart = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="offsetFromEnd")]
		offsetFromEnd = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LevelDetails
	{
		
		/// <summary>
		/// The name that should be used when referring to this level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// A *liveBroadcast* resource represents an event that will be streamed, via live video, on YouTube.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveBroadcast
	{
		
		/// <summary>
		/// Detailed settings of a broadcast.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDetails")]
		public LiveBroadcastContentDetails ContentDetails { get; set; }
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube assigns to uniquely identify the broadcast.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#liveBroadcast".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#liveBroadcast")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#liveBroadcast";
		
		/// <summary>
		/// Monetization settings of a broadcast.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monetizationDetails")]
		public LiveBroadcastMonetizationDetails MonetizationDetails { get; set; }
		
		/// <summary>
		/// Basic broadcast information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public LiveBroadcastSnippet Snippet { get; set; }
		
		/// <summary>
		/// Statistics about the live broadcast. These represent a snapshot of the values at the time of the request. Statistics are only returned for live broadcasts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public LiveBroadcastStatistics Statistics { get; set; }
		
		/// <summary>
		/// Live broadcast state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LiveBroadcastStatus Status { get; set; }
	}
	
	/// <summary>
	/// Detailed settings of a broadcast.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveBroadcastContentDetails
	{
		
		/// <summary>
		/// This value uniquely identifies the live stream bound to the broadcast.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boundStreamId")]
		public string BoundStreamId { get; set; }
		
		/// <summary>
		/// The date and time that the live stream referenced by boundStreamId was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boundStreamLastUpdateTimeMs")]
		public System.Nullable<System.DateTimeOffset> BoundStreamLastUpdateTimeMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closedCaptionsType")]
		public System.Nullable<LiveBroadcastContentDetailsClosedCaptionsType> ClosedCaptionsType { get; set; }
		
		/// <summary>
		/// This setting indicates whether auto start is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoStart")]
		public System.Nullable<System.Boolean> EnableAutoStart { get; set; }
		
		/// <summary>
		/// This setting indicates whether auto stop is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoStop")]
		public System.Nullable<System.Boolean> EnableAutoStop { get; set; }
		
		/// <summary>
		/// This setting indicates whether HTTP POST closed captioning is enabled for this broadcast. The ingestion URL of the closed captions is returned through the liveStreams API. This is mutually exclusive with using the closed_captions_type property, and is equivalent to setting closed_captions_type to CLOSED_CAPTIONS_HTTP_POST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableClosedCaptions")]
		public System.Nullable<System.Boolean> EnableClosedCaptions { get; set; }
		
		/// <summary>
		/// This setting indicates whether YouTube should enable content encryption for the broadcast.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableContentEncryption")]
		public System.Nullable<System.Boolean> EnableContentEncryption { get; set; }
		
		/// <summary>
		/// This setting determines whether viewers can access DVR controls while watching the video. DVR controls enable the viewer to control the video playback experience by pausing, rewinding, or fast forwarding content. The default value for this property is true. *Important:* You must set the value to true and also set the enableArchive property's value to true if you want to make playback available immediately after the broadcast ends.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableDvr")]
		public System.Nullable<System.Boolean> EnableDvr { get; set; }
		
		/// <summary>
		/// This setting indicates whether the broadcast video can be played in an embedded player. If you choose to archive the video (using the enableArchive property), this setting will also apply to the archived video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableEmbed")]
		public System.Nullable<System.Boolean> EnableEmbed { get; set; }
		
		/// <summary>
		/// Indicates whether this broadcast has low latency enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableLowLatency")]
		public System.Nullable<System.Boolean> EnableLowLatency { get; set; }
		
		/// <summary>
		/// If both this and enable_low_latency are set, they must match. LATENCY_NORMAL should match enable_low_latency=false LATENCY_LOW should match enable_low_latency=true LATENCY_ULTRA_LOW should have enable_low_latency omitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latencyPreference")]
		public System.Nullable<LiveBroadcastContentDetailsLatencyPreference> LatencyPreference { get; set; }
		
		/// <summary>
		/// The mesh for projecting the video if projection is mesh. The mesh value must be a UTF-8 string containing the base-64 encoding of 3D mesh data that follows the Spherical Video V2 RFC specification for an mshp box, excluding the box size and type but including the following four reserved zero bytes for the version and flags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mesh")]
		public string Mesh { get; set; }
		
		/// <summary>
		/// Settings and Info of the monitor stream
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorStream")]
		public MonitorStreamInfo MonitorStream { get; set; }
		
		/// <summary>
		/// The projection format of this broadcast. This defaults to rectangular.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projection")]
		public System.Nullable<LiveBroadcastContentDetailsProjection> Projection { get; set; }
		
		/// <summary>
		/// Automatically start recording after the event goes live. The default value for this property is true. *Important:* You must also set the enableDvr property's value to true if you want the playback to be available immediately after the broadcast ends. If you set this property's value to true but do not also set the enableDvr property to true, there may be a delay of around one day before the archived video will be available for playback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordFromStart")]
		public System.Nullable<System.Boolean> RecordFromStart { get; set; }
		
		/// <summary>
		/// This setting indicates whether the broadcast should automatically begin with an in-stream slate when you update the broadcast's status to live. After updating the status, you then need to send a liveCuepoints.insert request that sets the cuepoint's eventState to end to remove the in-stream slate and make your broadcast stream visible to viewers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startWithSlate")]
		public System.Nullable<System.Boolean> StartWithSlate { get; set; }
		
		/// <summary>
		/// The 3D stereo layout of this broadcast. This defaults to mono.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stereoLayout")]
		public System.Nullable<LiveBroadcastContentDetailsStereoLayout> StereoLayout { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveBroadcastContentDetailsClosedCaptionsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closedCaptionsTypeUnspecified")]
		closedCaptionsTypeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closedCaptionsDisabled")]
		closedCaptionsDisabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closedCaptionsHttpPost")]
		closedCaptionsHttpPost = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closedCaptionsEmbedded")]
		closedCaptionsEmbedded = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveBroadcastContentDetailsLatencyPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="latencyPreferenceUnspecified")]
		latencyPreferenceUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="normal")]
		normal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="low")]
		low = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ultraLow")]
		ultraLow = 3,
	}
	
	/// <summary>
	/// Settings and Info of the monitor stream
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitorStreamInfo
	{
		
		/// <summary>
		/// If you have set the enableMonitorStream property to true, then this property determines the length of the live broadcast delay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="broadcastStreamDelayMs")]
		public System.Nullable<System.UInt32> BroadcastStreamDelayMs { get; set; }
		
		/// <summary>
		/// HTML code that embeds a player that plays the monitor stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embedHtml")]
		public string EmbedHtml { get; set; }
		
		/// <summary>
		/// This value determines whether the monitor stream is enabled for the broadcast. If the monitor stream is enabled, then YouTube will broadcast the event content on a special stream intended only for the broadcaster's consumption. The broadcaster can use the stream to review the event content and also to identify the optimal times to insert cuepoints. You need to set this value to true if you intend to have a broadcast delay for your event. *Note:* This property cannot be updated once the broadcast is in the testing or live state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableMonitorStream")]
		public System.Nullable<System.Boolean> EnableMonitorStream { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveBroadcastContentDetailsProjection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="projectionUnspecified")]
		projectionUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rectangular")]
		rectangular = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="360")]
		_360 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mesh")]
		mesh = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveBroadcastContentDetailsStereoLayout
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stereoLayoutUnspecified")]
		stereoLayoutUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mono")]
		mono = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="leftRight")]
		leftRight = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="topBottom")]
		topBottom = 3,
	}
	
	/// <summary>
	/// Monetization settings of a broadcast.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveBroadcastMonetizationDetails
	{
		
		/// <summary>
		/// Schedule to insert cuepoints into a broadcast by ads automator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cuepointSchedule")]
		public CuepointSchedule CuepointSchedule { get; set; }
	}
	
	/// <summary>
	/// Basic broadcast information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveBroadcastSnippet
	{
		
		/// <summary>
		/// The date and time that the broadcast actually ended. This information is only available once the broadcast's state is complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actualEndTime")]
		public System.Nullable<System.DateTimeOffset> ActualEndTime { get; set; }
		
		/// <summary>
		/// The date and time that the broadcast actually started. This information is only available once the broadcast's state is live.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actualStartTime")]
		public System.Nullable<System.DateTimeOffset> ActualStartTime { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The broadcast's description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates whether this broadcast is the default broadcast. Internal only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDefaultBroadcast")]
		public System.Nullable<System.Boolean> IsDefaultBroadcast { get; set; }
		
		/// <summary>
		/// The id of the live chat for this broadcast.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveChatId")]
		public string LiveChatId { get; set; }
		
		/// <summary>
		/// The date and time that the broadcast was added to YouTube's live broadcast schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedAt")]
		public System.Nullable<System.DateTimeOffset> PublishedAt { get; set; }
		
		/// <summary>
		/// The date and time that the broadcast is scheduled to end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledEndTime")]
		public System.Nullable<System.DateTimeOffset> ScheduledEndTime { get; set; }
		
		/// <summary>
		/// The date and time that the broadcast is scheduled to start.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledStartTime")]
		public System.Nullable<System.DateTimeOffset> ScheduledStartTime { get; set; }
		
		/// <summary>
		/// Internal representation of thumbnails for a YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnails")]
		public ThumbnailDetails Thumbnails { get; set; }
		
		/// <summary>
		/// The broadcast's title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Statistics about the live broadcast. These represent a snapshot of the values at the time of the request. Statistics are only returned for live broadcasts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveBroadcastStatistics
	{
		
		/// <summary>
		/// The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrentViewers")]
		public string ConcurrentViewers { get; set; }
	}
	
	/// <summary>
	/// Live broadcast state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveBroadcastStatus
	{
		
		/// <summary>
		/// The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifeCycleStatus")]
		public System.Nullable<LiveBroadcastStatusLifeCycleStatus> LifeCycleStatus { get; set; }
		
		/// <summary>
		/// Priority of the live broadcast event (internal state).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveBroadcastPriority")]
		public System.Nullable<LiveBroadcastStatusLiveBroadcastPriority> LiveBroadcastPriority { get; set; }
		
		/// <summary>
		/// Whether the broadcast is made for kids or not, decided by YouTube instead of the creator. This field is read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="madeForKids")]
		public System.Nullable<System.Boolean> MadeForKids { get; set; }
		
		/// <summary>
		/// The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacyStatus")]
		public System.Nullable<LiveBroadcastStatusPrivacyStatus> PrivacyStatus { get; set; }
		
		/// <summary>
		/// The broadcast's recording status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordingStatus")]
		public System.Nullable<LiveBroadcastStatusRecordingStatus> RecordingStatus { get; set; }
		
		/// <summary>
		/// This field will be set to True if the creator declares the broadcast to be kids only: go/live-cw-work.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfDeclaredMadeForKids")]
		public System.Nullable<System.Boolean> SelfDeclaredMadeForKids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveBroadcastStatusLifeCycleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lifeCycleStatusUnspecified")]
		lifeCycleStatusUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="created")]
		created = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ready")]
		ready = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="testing")]
		testing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="live")]
		live = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="revoked")]
		revoked = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="testStarting")]
		testStarting = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="liveStarting")]
		liveStarting = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveBroadcastStatusLiveBroadcastPriority
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="liveBroadcastPriorityUnspecified")]
		liveBroadcastPriorityUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="low")]
		low = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="normal")]
		normal = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high")]
		high = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveBroadcastStatusPrivacyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unlisted")]
		unlisted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveBroadcastStatusRecordingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="liveBroadcastRecordingStatusUnspecified")]
		liveBroadcastRecordingStatusUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="notRecording")]
		notRecording = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="recording")]
		recording = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="recorded")]
		recorded = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveBroadcastListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of broadcasts that match the request criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public LiveBroadcast[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#liveBroadcastListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#liveBroadcastListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#liveBroadcastListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// A `__liveChatBan__` resource represents a ban for a YouTube live chat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatBan
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube assigns to uniquely identify the ban.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"youtube#liveChatBan"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#liveChatBan")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#liveChatBan";
		
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public LiveChatBanSnippet Snippet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatBanSnippet
	{
		
		/// <summary>
		/// The duration of a ban, only filled if the ban has type TEMPORARY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="banDurationSeconds")]
		public string BanDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bannedUserDetails")]
		public ChannelProfileDetails BannedUserDetails { get; set; }
		
		/// <summary>
		/// The chat this ban is pertinent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveChatId")]
		public string LiveChatId { get; set; }
		
		/// <summary>
		/// The type of ban.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<LiveChatBanSnippetType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveChatBanSnippetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="liveChatBanTypeUnspecified")]
		liveChatBanTypeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="permanent")]
		permanent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="temporary")]
		temporary = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatFanFundingEventDetails
	{
		
		/// <summary>
		/// A rendered string that displays the fund amount and currency to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountDisplayString")]
		public string AmountDisplayString { get; set; }
		
		/// <summary>
		/// The amount of the fund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountMicros")]
		public string AmountMicros { get; set; }
		
		/// <summary>
		/// The currency in which the fund was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The comment added by the user to this fan funding event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userComment")]
		public string UserComment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatGiftMembershipReceivedDetails
	{
		
		/// <summary>
		/// The ID of the membership gifting message that is related to this gift membership. This ID will always refer to a message whose type is 'membershipGiftingEvent'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatedMembershipGiftingMessageId")]
		public string AssociatedMembershipGiftingMessageId { get; set; }
		
		/// <summary>
		/// The ID of the user that made the membership gifting purchase. This matches the `snippet.authorChannelId` of the associated membership gifting message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gifterChannelId")]
		public string GifterChannelId { get; set; }
		
		/// <summary>
		/// The name of the Level at which the viewer is a member. This matches the `snippet.membershipGiftingDetails.giftMembershipsLevelName` of the associated membership gifting message. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberLevelName")]
		public string MemberLevelName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatMemberMilestoneChatDetails
	{
		
		/// <summary>
		/// The name of the Level at which the viever is a member. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberLevelName")]
		public string MemberLevelName { get; set; }
		
		/// <summary>
		/// The total amount of months (rounded up) the viewer has been a member that granted them this Member Milestone Chat. This is the same number of months as is being displayed to YouTube users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberMonth")]
		public System.Nullable<System.UInt32> MemberMonth { get; set; }
		
		/// <summary>
		/// The comment added by the member to this Member Milestone Chat. This field is empty for messages without a comment from the member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userComment")]
		public string UserComment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatMembershipGiftingDetails
	{
		
		/// <summary>
		/// The number of gift memberships purchased by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftMembershipsCount")]
		public System.Nullable<System.Int32> GiftMembershipsCount { get; set; }
		
		/// <summary>
		/// The name of the level of the gift memberships purchased by the user. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftMembershipsLevelName")]
		public string GiftMembershipsLevelName { get; set; }
	}
	
	/// <summary>
	/// A *liveChatMessage* resource represents a chat message in a YouTube Live Chat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatMessage
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorDetails")]
		public LiveChatMessageAuthorDetails AuthorDetails { get; set; }
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube assigns to uniquely identify the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatMessage".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#liveChatMessage")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#liveChatMessage";
		
		/// <summary>
		/// Next ID: 33
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public LiveChatMessageSnippet Snippet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatMessageAuthorDetails
	{
		
		/// <summary>
		/// The YouTube channel ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The channel's URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelUrl")]
		public string ChannelUrl { get; set; }
		
		/// <summary>
		/// The channel's display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Whether the author is a moderator of the live chat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isChatModerator")]
		public System.Nullable<System.Boolean> IsChatModerator { get; set; }
		
		/// <summary>
		/// Whether the author is the owner of the live chat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isChatOwner")]
		public System.Nullable<System.Boolean> IsChatOwner { get; set; }
		
		/// <summary>
		/// Whether the author is a sponsor of the live chat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isChatSponsor")]
		public System.Nullable<System.Boolean> IsChatSponsor { get; set; }
		
		/// <summary>
		/// Whether the author's identity has been verified by YouTube.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isVerified")]
		public System.Nullable<System.Boolean> IsVerified { get; set; }
		
		/// <summary>
		/// The channels's avatar URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileImageUrl")]
		public string ProfileImageUrl { get; set; }
	}
	
	/// <summary>
	/// Next ID: 33
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatMessageSnippet
	{
		
		/// <summary>
		/// The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor memberMilestoneChatEvent - the member that sent the message membershipGiftingEvent - the user that made the purchase giftMembershipReceivedEvent - the user that received the gift membership messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase superStickerEvent - the user that made the purchase
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorChannelId")]
		public string AuthorChannelId { get; set; }
		
		/// <summary>
		/// Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayMessage")]
		public string DisplayMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fanFundingEventDetails")]
		public LiveChatFanFundingEventDetails FanFundingEventDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="giftMembershipReceivedDetails")]
		public LiveChatGiftMembershipReceivedDetails GiftMembershipReceivedDetails { get; set; }
		
		/// <summary>
		/// Whether the message has display content that should be displayed to users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasDisplayContent")]
		public System.Nullable<System.Boolean> HasDisplayContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="liveChatId")]
		public string LiveChatId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberMilestoneChatDetails")]
		public LiveChatMemberMilestoneChatDetails MemberMilestoneChatDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipGiftingDetails")]
		public LiveChatMembershipGiftingDetails MembershipGiftingDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageDeletedDetails")]
		public LiveChatMessageDeletedDetails MessageDeletedDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageRetractedDetails")]
		public LiveChatMessageRetractedDetails MessageRetractedDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newSponsorDetails")]
		public LiveChatNewSponsorDetails NewSponsorDetails { get; set; }
		
		/// <summary>
		/// The date and time when the message was orignally published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedAt")]
		public System.Nullable<System.DateTimeOffset> PublishedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="superChatDetails")]
		public LiveChatSuperChatDetails SuperChatDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="superStickerDetails")]
		public LiveChatSuperStickerDetails SuperStickerDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textMessageDetails")]
		public LiveChatTextMessageDetails TextMessageDetails { get; set; }
		
		/// <summary>
		/// The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<LiveChatMessageSnippetType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userBannedDetails")]
		public LiveChatUserBannedMessageDetails UserBannedDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatMessageDeletedDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="deletedMessageId")]
		public string DeletedMessageId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatMessageRetractedDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="retractedMessageId")]
		public string RetractedMessageId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatNewSponsorDetails
	{
		
		/// <summary>
		/// If the viewer just had upgraded from a lower level. For viewers that were not members at the time of purchase, this field is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUpgrade")]
		public System.Nullable<System.Boolean> IsUpgrade { get; set; }
		
		/// <summary>
		/// The name of the Level that the viewer just had joined. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberLevelName")]
		public string MemberLevelName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatSuperChatDetails
	{
		
		/// <summary>
		/// A rendered string that displays the fund amount and currency to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountDisplayString")]
		public string AmountDisplayString { get; set; }
		
		/// <summary>
		/// The amount purchased by the user, in micros (1,750,000 micros = 1.75).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountMicros")]
		public string AmountMicros { get; set; }
		
		/// <summary>
		/// The currency in which the purchase was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<System.UInt32> Tier { get; set; }
		
		/// <summary>
		/// The comment added by the user to this Super Chat event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userComment")]
		public string UserComment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatSuperStickerDetails
	{
		
		/// <summary>
		/// A rendered string that displays the fund amount and currency to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountDisplayString")]
		public string AmountDisplayString { get; set; }
		
		/// <summary>
		/// The amount purchased by the user, in micros (1,750,000 micros = 1.75).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountMicros")]
		public string AmountMicros { get; set; }
		
		/// <summary>
		/// The currency in which the purchase was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="superStickerMetadata")]
		public SuperStickerMetadata SuperStickerMetadata { get; set; }
		
		/// <summary>
		/// The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<System.UInt32> Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuperStickerMetadata
	{
		
		/// <summary>
		/// Internationalized alt text that describes the sticker image and any animation associated with it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altText")]
		public string AltText { get; set; }
		
		/// <summary>
		/// Specifies the localization language in which the alt text is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altTextLanguage")]
		public string AltTextLanguage { get; set; }
		
		/// <summary>
		/// Unique identifier of the Super Sticker. This is a shorter form of the alt_text that includes pack name and a recognizable characteristic of the sticker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stickerId")]
		public string StickerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatTextMessageDetails
	{
		
		/// <summary>
		/// The user's message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageText")]
		public string MessageText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveChatMessageSnippetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalidType")]
		invalidType = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="textMessageEvent")]
		textMessageEvent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tombstone")]
		tombstone = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fanFundingEvent")]
		fanFundingEvent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chatEndedEvent")]
		chatEndedEvent = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sponsorOnlyModeStartedEvent")]
		sponsorOnlyModeStartedEvent = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sponsorOnlyModeEndedEvent")]
		sponsorOnlyModeEndedEvent = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="newSponsorEvent")]
		newSponsorEvent = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="memberMilestoneChatEvent")]
		memberMilestoneChatEvent = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="membershipGiftingEvent")]
		membershipGiftingEvent = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="giftMembershipReceivedEvent")]
		giftMembershipReceivedEvent = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="messageDeletedEvent")]
		messageDeletedEvent = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="messageRetractedEvent")]
		messageRetractedEvent = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="userBannedEvent")]
		userBannedEvent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="superChatEvent")]
		superChatEvent = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="superStickerEvent")]
		superStickerEvent = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatUserBannedMessageDetails
	{
		
		/// <summary>
		/// The duration of the ban. This property is only present if the banType is temporary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="banDurationSeconds")]
		public string BanDurationSeconds { get; set; }
		
		/// <summary>
		/// The type of ban.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="banType")]
		public System.Nullable<LiveChatUserBannedMessageDetailsBanType> BanType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bannedUserDetails")]
		public ChannelProfileDetails BannedUserDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveChatUserBannedMessageDetailsBanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="permanent")]
		permanent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="temporary")]
		temporary = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatMessageListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public LiveChatMessage[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatMessageListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#liveChatMessageListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#liveChatMessageListResponse";
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The date and time when the underlying stream went offline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offlineAt")]
		public System.Nullable<System.DateTimeOffset> OfflineAt { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// The amount of time the client should wait before polling again.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pollingIntervalMillis")]
		public System.Nullable<System.UInt32> PollingIntervalMillis { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// A *liveChatModerator* resource represents a moderator for a YouTube live chat. A chat moderator has the ability to ban/unban users from a chat, remove message, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatModerator
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube assigns to uniquely identify the moderator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatModerator".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#liveChatModerator")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#liveChatModerator";
		
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public LiveChatModeratorSnippet Snippet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatModeratorSnippet
	{
		
		/// <summary>
		/// The ID of the live chat this moderator can act on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveChatId")]
		public string LiveChatId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moderatorDetails")]
		public ChannelProfileDetails ModeratorDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveChatModeratorListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of moderators that match the request criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public LiveChatModerator[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatModeratorListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#liveChatModeratorListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#liveChatModeratorListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// A live stream describes a live ingestion point.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveStream
	{
		
		/// <summary>
		/// Brief description of the live stream cdn settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cdn")]
		public CdnSettings Cdn { get; set; }
		
		/// <summary>
		/// Detailed settings of a stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDetails")]
		public LiveStreamContentDetails ContentDetails { get; set; }
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube assigns to uniquely identify the stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#liveStream".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#liveStream")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#liveStream";
		
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public LiveStreamSnippet Snippet { get; set; }
		
		/// <summary>
		/// Brief description of the live stream status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LiveStreamStatus Status { get; set; }
	}
	
	/// <summary>
	/// Detailed settings of a stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveStreamContentDetails
	{
		
		/// <summary>
		/// The ingestion URL where the closed captions of this stream are sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closedCaptionsIngestionUrl")]
		public string ClosedCaptionsIngestionUrl { get; set; }
		
		/// <summary>
		/// Indicates whether the stream is reusable, which means that it can be bound to multiple broadcasts. It is common for broadcasters to reuse the same stream for many different broadcasts if those broadcasts occur at different times. If you set this value to false, then the stream will not be reusable, which means that it can only be bound to one broadcast. Non-reusable streams differ from reusable streams in the following ways: - A non-reusable stream can only be bound to one broadcast. - A non-reusable stream might be deleted by an automated process after the broadcast ends. - The liveStreams.list method does not list non-reusable streams if you call the method and set the mine parameter to true. The only way to use that method to retrieve the resource for a non-reusable stream is to use the id parameter to identify the stream. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isReusable")]
		public System.Nullable<System.Boolean> IsReusable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveStreamSnippet
	{
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the channel that is transmitting the stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The stream's description. The value cannot be longer than 10000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefaultStream")]
		public System.Nullable<System.Boolean> IsDefaultStream { get; set; }
		
		/// <summary>
		/// The date and time that the stream was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedAt")]
		public System.Nullable<System.DateTimeOffset> PublishedAt { get; set; }
		
		/// <summary>
		/// The stream's title. The value must be between 1 and 128 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Brief description of the live stream status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveStreamStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="healthStatus")]
		public LiveStreamHealthStatus HealthStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamStatus")]
		public System.Nullable<LiveStreamStatusStreamStatus> StreamStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveStreamHealthStatus
	{
		
		/// <summary>
		/// The configurations issues on this stream
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configurationIssues")]
		public LiveStreamConfigurationIssue[] ConfigurationIssues { get; set; }
		
		/// <summary>
		/// The last time this status was updated (in seconds)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTimeSeconds")]
		public string LastUpdateTimeSeconds { get; set; }
		
		/// <summary>
		/// The status code of this stream
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<LiveStreamHealthStatusStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveStreamConfigurationIssue
	{
		
		/// <summary>
		/// The long-form description of the issue and how to resolve it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The short-form reason for this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// How severe this issue is to the stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<LiveStreamConfigurationIssueSeverity> Severity { get; set; }
		
		/// <summary>
		/// The kind of error happening.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<LiveStreamConfigurationIssueType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveStreamConfigurationIssueSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="info")]
		info = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="warning")]
		warning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error")]
		error = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveStreamConfigurationIssueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gopSizeOver")]
		gopSizeOver = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gopSizeLong")]
		gopSizeLong = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gopSizeShort")]
		gopSizeShort = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="openGop")]
		openGop = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="badContainer")]
		badContainer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audioBitrateHigh")]
		audioBitrateHigh = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audioBitrateLow")]
		audioBitrateLow = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audioSampleRate")]
		audioSampleRate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bitrateHigh")]
		bitrateHigh = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bitrateLow")]
		bitrateLow = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audioCodec")]
		audioCodec = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoCodec")]
		videoCodec = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="noAudioStream")]
		noAudioStream = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="noVideoStream")]
		noVideoStream = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="multipleVideoStreams")]
		multipleVideoStreams = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="multipleAudioStreams")]
		multipleAudioStreams = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audioTooManyChannels")]
		audioTooManyChannels = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="interlacedVideo")]
		interlacedVideo = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="frameRateHigh")]
		frameRateHigh = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resolutionMismatch")]
		resolutionMismatch = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoCodecMismatch")]
		videoCodecMismatch = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoInterlaceMismatch")]
		videoInterlaceMismatch = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoProfileMismatch")]
		videoProfileMismatch = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoBitrateMismatch")]
		videoBitrateMismatch = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="framerateMismatch")]
		framerateMismatch = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gopMismatch")]
		gopMismatch = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audioSampleRateMismatch")]
		audioSampleRateMismatch = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audioStereoMismatch")]
		audioStereoMismatch = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audioCodecMismatch")]
		audioCodecMismatch = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audioBitrateMismatch")]
		audioBitrateMismatch = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoResolutionSuboptimal")]
		videoResolutionSuboptimal = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoResolutionUnsupported")]
		videoResolutionUnsupported = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoIngestionStarved")]
		videoIngestionStarved = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoIngestionFasterThanRealtime")]
		videoIngestionFasterThanRealtime = 33,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveStreamHealthStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="good")]
		good = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ok")]
		ok = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bad")]
		bad = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="noData")]
		noData = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="revoked")]
		revoked = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LiveStreamStatusStreamStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="created")]
		created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ready")]
		ready = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inactive")]
		inactive = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error")]
		error = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LiveStreamListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of live streams that match the request criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public LiveStream[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#liveStreamListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#liveStreamListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#liveStreamListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// A *member* resource represents a member for a YouTube channel. A member provides recurring monetary support to a creator and receives special benefits.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Member
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#member".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#member")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#member";
		
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public MemberSnippet Snippet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberSnippet
	{
		
		/// <summary>
		/// The id of the channel that's offering memberships.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorChannelId")]
		public string CreatorChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberDetails")]
		public ChannelProfileDetails MemberDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipsDetails")]
		public MembershipsDetails MembershipsDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembershipsDetails
	{
		
		/// <summary>
		/// Ids of all levels that the user has access to. This includes the currently active level and all other levels that are included because of a higher purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessibleLevels")]
		public string[] AccessibleLevels { get; set; }
		
		/// <summary>
		/// Id of the highest level that the user has access to at the moment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highestAccessibleLevel")]
		public string HighestAccessibleLevel { get; set; }
		
		/// <summary>
		/// Display name for the highest level that the user has access to at the moment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highestAccessibleLevelDisplayName")]
		public string HighestAccessibleLevelDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipsDuration")]
		public MembershipsDuration MembershipsDuration { get; set; }
		
		/// <summary>
		/// Data about memberships duration on particular pricing levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipsDurationAtLevels")]
		public MembershipsDurationAtLevel[] MembershipsDurationAtLevels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembershipsDuration
	{
		
		/// <summary>
		/// The date and time when the user became a continuous member across all levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberSince")]
		public string MemberSince { get; set; }
		
		/// <summary>
		/// The cumulative time the user has been a member across all levels in complete months (the time is rounded down to the nearest integer).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberTotalDurationMonths")]
		public System.Nullable<System.Int32> MemberTotalDurationMonths { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembershipsDurationAtLevel
	{
		
		/// <summary>
		/// Pricing level ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public string Level { get; set; }
		
		/// <summary>
		/// The date and time when the user became a continuous member for the given level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberSince")]
		public string MemberSince { get; set; }
		
		/// <summary>
		/// The cumulative time the user has been a member for the given level in complete months (the time is rounded down to the nearest integer).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberTotalDurationMonths")]
		public System.Nullable<System.Int32> MemberTotalDurationMonths { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of members that match the request criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Member[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#memberListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#memberListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#memberListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// A *membershipsLevel* resource represents an offer made by YouTube creators for their fans. Users can become members of the channel by joining one of the available levels. They will provide recurring monetary support and receives special benefits.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembershipsLevel
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube assigns to uniquely identify the memberships level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#membershipsLevelListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#membershipsLevel")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#membershipsLevel";
		
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public MembershipsLevelSnippet Snippet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembershipsLevelSnippet
	{
		
		/// <summary>
		/// The id of the channel that's offering channel memberships.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorChannelId")]
		public string CreatorChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="levelDetails")]
		public LevelDetails LevelDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MembershipsLevelListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of pricing levels offered by a creator to the fans.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public MembershipsLevel[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#membershipsLevelListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#membershipsLevelListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#membershipsLevelListResponse";
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// A *playlist* resource represents a YouTube playlist. A playlist is a collection of videos that can be viewed sequentially and shared with other users. A playlist can contain up to 200 videos, and YouTube does not limit the number of playlists that each user creates. By default, playlists are publicly visible to other users, but playlists can be public or private. YouTube also uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Playlist
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentDetails")]
		public PlaylistContentDetails ContentDetails { get; set; }
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#playlist".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#playlist")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#playlist";
		
		/// <summary>
		/// Localizations for different languages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizations")]
		public System.Collections.Generic.Dictionary<string, PlaylistLocalization> Localizations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="player")]
		public PlaylistPlayer Player { get; set; }
		
		/// <summary>
		/// Basic details about a playlist, including title, description and thumbnails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public PlaylistSnippet Snippet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PlaylistStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaylistContentDetails
	{
		
		/// <summary>
		/// The number of videos in the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemCount")]
		public System.Nullable<System.UInt32> ItemCount { get; set; }
	}
	
	/// <summary>
	/// Playlist localization setting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaylistLocalization
	{
		
		/// <summary>
		/// The localized strings for playlist's description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The localized strings for playlist's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaylistPlayer
	{
		
		/// <summary>
		/// An <iframe> tag that embeds a player that will play the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embedHtml")]
		public string EmbedHtml { get; set; }
	}
	
	/// <summary>
	/// Basic details about a playlist, including title, description and thumbnails.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaylistSnippet
	{
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the channel that published the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The channel title of the channel that the video belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelTitle")]
		public string ChannelTitle { get; set; }
		
		/// <summary>
		/// The language of the playlist's default title and description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLanguage")]
		public string DefaultLanguage { get; set; }
		
		/// <summary>
		/// The playlist's description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Playlist localization setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localized")]
		public PlaylistLocalization Localized { get; set; }
		
		/// <summary>
		/// The date and time that the playlist was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedAt")]
		public System.Nullable<System.DateTimeOffset> PublishedAt { get; set; }
		
		/// <summary>
		/// Keyword tags associated with the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Note: if the playlist has a custom thumbnail, this field will not be populated. The video id selected by the user that will be used as the thumbnail of this playlist. This field defaults to the first publicly viewable video in the playlist, if: 1. The user has never selected a video to be the thumbnail of the playlist. 2. The user selects a video to be the thumbnail, and then removes that video from the playlist. 3. The user selects a non-owned video to be the thumbnail, but that video becomes private, or gets deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailVideoId")]
		public string ThumbnailVideoId { get; set; }
		
		/// <summary>
		/// Internal representation of thumbnails for a YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnails")]
		public ThumbnailDetails Thumbnails { get; set; }
		
		/// <summary>
		/// The playlist's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaylistStatus
	{
		
		/// <summary>
		/// The playlist's privacy status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacyStatus")]
		public System.Nullable<PlaylistStatusPrivacyStatus> PrivacyStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PlaylistStatusPrivacyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unlisted")]
		unlisted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaylistImage
	{
		
		/// <summary>
		/// Identifies this resource (playlist id and image type).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#playlistImages".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#playlistImage")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#playlistImage";
		
		/// <summary>
		/// A *playlistImage* resource identifies another resource, such as a image, that is associated with a playlist. In addition, the playlistImage resource contains details about the included resource that pertain specifically to how that resource is used in that playlist. YouTube uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistImages.list method to retrieve image data for any of those playlists. You can also add or remove images from those lists by calling the playlistImages.insert and playlistImages.delete methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public PlaylistImageSnippet Snippet { get; set; }
	}
	
	/// <summary>
	/// A *playlistImage* resource identifies another resource, such as a image, that is associated with a playlist. In addition, the playlistImage resource contains details about the included resource that pertain specifically to how that resource is used in that playlist. YouTube uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistImages.list method to retrieve image data for any of those playlists. You can also add or remove images from those lists by calling the playlistImages.insert and playlistImages.delete methods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaylistImageSnippet
	{
		
		/// <summary>
		/// The image height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The Playlist ID of the playlist this image is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playlistId")]
		public string PlaylistId { get; set; }
		
		/// <summary>
		/// The image type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PlaylistImageSnippetType> Type { get; set; }
		
		/// <summary>
		/// The image width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PlaylistImageSnippetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hero")]
		hero = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaylistImageListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PlaylistImage[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#playlistImageListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#PlaylistImageListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#PlaylistImageListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
	}
	
	/// <summary>
	/// A *playlistItem* resource identifies another resource, such as a video, that is included in a playlist. In addition, the playlistItem resource contains details about the included resource that pertain specifically to how that resource is used in that playlist. YouTube uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods. For example, if a user gives a positive rating to a video, you would insert that video into the liked videos playlist for that user's channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaylistItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentDetails")]
		public PlaylistItemContentDetails ContentDetails { get; set; }
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the playlist item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#playlistItem".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#playlistItem")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#playlistItem";
		
		/// <summary>
		/// Basic details about a playlist, including title, description and thumbnails. Basic details of a YouTube Playlist item provided by the author. Next ID: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public PlaylistItemSnippet Snippet { get; set; }
		
		/// <summary>
		/// Information about the playlist item's privacy status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PlaylistItemStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaylistItemContentDetails
	{
		
		/// <summary>
		/// The time, measured in seconds from the start of the video, when the video should stop playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) By default, assume that the video.endTime is the end of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endAt")]
		public string EndAt { get; set; }
		
		/// <summary>
		/// A user-generated note for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The time, measured in seconds from the start of the video, when the video should start playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) The default value is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startAt")]
		public string StartAt { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify a video. To retrieve the video resource, set the id query parameter to this value in your API request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoId")]
		public string VideoId { get; set; }
		
		/// <summary>
		/// The date and time that the video was published to YouTube.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoPublishedAt")]
		public System.Nullable<System.DateTimeOffset> VideoPublishedAt { get; set; }
	}
	
	/// <summary>
	/// Basic details about a playlist, including title, description and thumbnails. Basic details of a YouTube Playlist item provided by the author. Next ID: 15
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaylistItemSnippet
	{
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the user that added the item to the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// Channel title for the channel that the playlist item belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelTitle")]
		public string ChannelTitle { get; set; }
		
		/// <summary>
		/// The item's description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify thGe playlist that the playlist item is in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playlistId")]
		public string PlaylistId { get; set; }
		
		/// <summary>
		/// The order in which the item appears in the playlist. The value uses a zero-based index, so the first item has a position of 0, the second item has a position of 1, and so forth.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.UInt32> Position { get; set; }
		
		/// <summary>
		/// The date and time that the item was added to the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedAt")]
		public System.Nullable<System.DateTimeOffset> PublishedAt { get; set; }
		
		/// <summary>
		/// A resource id is a generic reference that points to another YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public ResourceId ResourceId { get; set; }
		
		/// <summary>
		/// Internal representation of thumbnails for a YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnails")]
		public ThumbnailDetails Thumbnails { get; set; }
		
		/// <summary>
		/// The item's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Channel id for the channel this video belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoOwnerChannelId")]
		public string VideoOwnerChannelId { get; set; }
		
		/// <summary>
		/// Channel title for the channel this video belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoOwnerChannelTitle")]
		public string VideoOwnerChannelTitle { get; set; }
	}
	
	/// <summary>
	/// Information about the playlist item's privacy status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaylistItemStatus
	{
		
		/// <summary>
		/// This resource's privacy status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacyStatus")]
		public System.Nullable<PlaylistItemStatusPrivacyStatus> PrivacyStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PlaylistItemStatusPrivacyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unlisted")]
		unlisted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaylistItemListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of playlist items that match the request criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PlaylistItem[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#playlistItemListResponse". Etag of this resource.
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#playlistItemListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#playlistItemListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaylistListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of playlists that match the request criteria
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Playlist[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#playlistListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#playlistListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#playlistListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// Pagination information for token pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SearchResult[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#searchListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#searchListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#searchListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// A search result contains information about a YouTube video, channel, or playlist that matches the search parameters specified in an API request. While a search result points to a uniquely identifiable resource, like a video, it does not have its own persistent data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResult
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// A resource id is a generic reference that points to another YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public ResourceId Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#searchResult".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#searchResult")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#searchResult";
		
		/// <summary>
		/// Basic details about a search result, including title, description and thumbnails of the item referenced by the search result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public SearchResultSnippet Snippet { get; set; }
	}
	
	/// <summary>
	/// Basic details about a search result, including title, description and thumbnails of the item referenced by the search result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResultSnippet
	{
		
		/// <summary>
		/// The value that YouTube uses to uniquely identify the channel that published the resource that the search result identifies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The title of the channel that published the resource that the search result identifies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelTitle")]
		public string ChannelTitle { get; set; }
		
		/// <summary>
		/// A description of the search result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// It indicates if the resource (video or channel) has upcoming/active live broadcast content. Or it's "none" if there is not any upcoming/active live broadcasts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveBroadcastContent")]
		public System.Nullable<SearchResultSnippetLiveBroadcastContent> LiveBroadcastContent { get; set; }
		
		/// <summary>
		/// The creation date and time of the resource that the search result identifies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedAt")]
		public System.Nullable<System.DateTimeOffset> PublishedAt { get; set; }
		
		/// <summary>
		/// Internal representation of thumbnails for a YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnails")]
		public ThumbnailDetails Thumbnails { get; set; }
		
		/// <summary>
		/// The title of the search result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SearchResultSnippetLiveBroadcastContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="upcoming")]
		upcoming = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="live")]
		live = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 3,
	}
	
	/// <summary>
	/// A *subscription* resource contains information about a YouTube user subscription. A subscription notifies a user when new videos are added to a channel or when another user takes one of several actions on YouTube, such as uploading a video, rating a video, or commenting on a video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subscription
	{
		
		/// <summary>
		/// Details about the content to witch a subscription refers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDetails")]
		public SubscriptionContentDetails ContentDetails { get; set; }
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#subscription".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#subscription")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#subscription";
		
		/// <summary>
		/// Basic details about a subscription, including title, description and thumbnails of the subscribed item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public SubscriptionSnippet Snippet { get; set; }
		
		/// <summary>
		/// Basic details about a subscription's subscriber including title, description, channel ID and thumbnails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriberSnippet")]
		public SubscriptionSubscriberSnippet SubscriberSnippet { get; set; }
	}
	
	/// <summary>
	/// Details about the content to witch a subscription refers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionContentDetails
	{
		
		/// <summary>
		/// The type of activity this subscription is for (only uploads, everything).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityType")]
		public System.Nullable<SubscriptionContentDetailsActivityType> ActivityType { get; set; }
		
		/// <summary>
		/// The number of new items in the subscription since its content was last read.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newItemCount")]
		public System.Nullable<System.UInt32> NewItemCount { get; set; }
		
		/// <summary>
		/// The approximate number of items that the subscription points to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItemCount")]
		public System.Nullable<System.UInt32> TotalItemCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SubscriptionContentDetailsActivityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subscriptionActivityTypeUnspecified")]
		subscriptionActivityTypeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uploads")]
		uploads = 2,
	}
	
	/// <summary>
	/// Basic details about a subscription, including title, description and thumbnails of the subscribed item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionSnippet
	{
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the subscriber's channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// Channel title for the channel that the subscription belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelTitle")]
		public string ChannelTitle { get; set; }
		
		/// <summary>
		/// The subscription's details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The date and time that the subscription was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedAt")]
		public System.Nullable<System.DateTimeOffset> PublishedAt { get; set; }
		
		/// <summary>
		/// A resource id is a generic reference that points to another YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public ResourceId ResourceId { get; set; }
		
		/// <summary>
		/// Internal representation of thumbnails for a YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnails")]
		public ThumbnailDetails Thumbnails { get; set; }
		
		/// <summary>
		/// The subscription's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Basic details about a subscription's subscriber including title, description, channel ID and thumbnails.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionSubscriberSnippet
	{
		
		/// <summary>
		/// The channel ID of the subscriber.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The description of the subscriber.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Internal representation of thumbnails for a YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnails")]
		public ThumbnailDetails Thumbnails { get; set; }
		
		/// <summary>
		/// The title of the subscriber.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of subscriptions that match the request criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Subscription[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#subscriptionListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#subscriptionListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#subscriptionListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// A `__superChatEvent__` resource represents a Super Chat purchase on a YouTube channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuperChatEvent
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube assigns to uniquely identify the Super Chat event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"youtube#superChatEvent"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#superChatEvent")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#superChatEvent";
		
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public SuperChatEventSnippet Snippet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuperChatEventSnippet
	{
		
		/// <summary>
		/// The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountMicros")]
		public string AmountMicros { get; set; }
		
		/// <summary>
		/// Channel id where the event occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The text contents of the comment left by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commentText")]
		public string CommentText { get; set; }
		
		/// <summary>
		/// The date and time when the event occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// The currency in which the purchase was made. ISO 4217.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// A rendered string that displays the purchase amount and currency (e.g., "$1.00"). The string is rendered for the given language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayString")]
		public string DisplayString { get; set; }
		
		/// <summary>
		/// True if this event is a Super Sticker event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSuperStickerEvent")]
		public System.Nullable<System.Boolean> IsSuperStickerEvent { get; set; }
		
		/// <summary>
		/// The tier for the paid message, which is based on the amount of money spent to purchase the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageType")]
		public System.Nullable<System.UInt32> MessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="superStickerMetadata")]
		public SuperStickerMetadata SuperStickerMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supporterDetails")]
		public ChannelProfileDetails SupporterDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuperChatEventListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of Super Chat purchases that match the request criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SuperChatEvent[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#superChatEventListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#superChatEventListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#superChatEventListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="featuredPart")]
		public System.Nullable<System.Boolean> FeaturedPart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gaia")]
		public string Gaia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public TestItemTestItemSnippet Snippet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestItemTestItemSnippet
	{
	}
	
	/// <summary>
	/// A *third party account link* resource represents a link between a YouTube account or a channel and an account on a third-party service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThirdPartyLink
	{
		
		/// <summary>
		/// Etag of this resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#thirdPartyLink".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#thirdPartyLink")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#thirdPartyLink";
		
		/// <summary>
		/// The linking_token identifies a YouTube account and channel with which the third party account is linked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkingToken")]
		public string LinkingToken { get; set; }
		
		/// <summary>
		/// Basic information about a third party account link, including its type and type-specific information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public ThirdPartyLinkSnippet Snippet { get; set; }
		
		/// <summary>
		/// The third-party link status object contains information about the status of the link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ThirdPartyLinkStatus Status { get; set; }
	}
	
	/// <summary>
	/// Basic information about a third party account link, including its type and type-specific information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThirdPartyLinkSnippet
	{
		
		/// <summary>
		/// Information specific to a store on a merchandising platform linked to a YouTube channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelToStoreLink")]
		public ChannelToStoreLinkDetails ChannelToStoreLink { get; set; }
		
		/// <summary>
		/// Type of the link named after the entities that are being linked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ThirdPartyLinkSnippetType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ThirdPartyLinkSnippetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="linkUnspecified")]
		linkUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="channelToStoreLink")]
		channelToStoreLink = 1,
	}
	
	/// <summary>
	/// The third-party link status object contains information about the status of the link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThirdPartyLinkStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="linkStatus")]
		public System.Nullable<ThirdPartyLinkStatusLinkStatus> LinkStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ThirdPartyLinkStatusLinkStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="linked")]
		linked = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThirdPartyLinkListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ThirdPartyLink[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#thirdPartyLinkListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#thirdPartyLinkListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#thirdPartyLinkListResponse";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThumbnailSetResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of thumbnails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ThumbnailDetails[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#thumbnailSetResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#thumbnailSetResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#thumbnailSetResponse";
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// A *video* resource represents a YouTube video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Video
	{
		
		[System.Runtime.Serialization.DataMember(Name="ageGating")]
		public VideoAgeGating AgeGating { get; set; }
		
		/// <summary>
		/// Details about the content of a YouTube Video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDetails")]
		public VideoContentDetails ContentDetails { get; set; }
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Describes original video file properties, including technical details about audio and video streams, but also metadata information like content length, digitization time, or geotagging information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileDetails")]
		public VideoFileDetails FileDetails { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#video".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#video")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#video";
		
		/// <summary>
		/// Details about the live streaming metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveStreamingDetails")]
		public VideoLiveStreamingDetails LiveStreamingDetails { get; set; }
		
		/// <summary>
		/// The localizations object contains localized versions of the basic details about the video, such as its title and description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizations")]
		public System.Collections.Generic.Dictionary<string, VideoLocalization> Localizations { get; set; }
		
		/// <summary>
		/// Details about monetization of a YouTube Video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monetizationDetails")]
		public VideoMonetizationDetails MonetizationDetails { get; set; }
		
		/// <summary>
		/// Player to be used for a video playback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="player")]
		public VideoPlayer Player { get; set; }
		
		/// <summary>
		/// Describes processing status and progress and availability of some other Video resource parts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingDetails")]
		public VideoProcessingDetails ProcessingDetails { get; set; }
		
		/// <summary>
		/// DEPRECATED. b/157517979: This part was never populated after it was added. However, it sees non-zero traffic because there is generated client code in the wild that refers to it [1]. We keep this field and do NOT remove it because otherwise V3 would return an error when this part gets requested [2]. [1] https://developers.google.com/resources/api-libraries/documentation/youtube/v3/csharp/latest/classGoogle_1_1Apis_1_1YouTube_1_1v3_1_1Data_1_1VideoProjectDetails.html [2] http://google3/video/youtube/src/python/servers/data_api/common.py?l=1565-1569&rcl=344141677
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectDetails")]
		public VideoProjectDetails ProjectDetails { get; set; }
		
		/// <summary>
		/// Recording information associated with the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordingDetails")]
		public VideoRecordingDetails RecordingDetails { get; set; }
		
		/// <summary>
		/// Basic details about a video, including title, description, uploader, thumbnails and category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public VideoSnippet Snippet { get; set; }
		
		/// <summary>
		/// Statistics about the video, such as the number of times the video was viewed or liked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public VideoStatistics Statistics { get; set; }
		
		/// <summary>
		/// Basic details about a video category, such as its localized title. Next Id: 18
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public VideoStatus Status { get; set; }
		
		/// <summary>
		/// Specifies suggestions on how to improve video content, including encoding hints, tag suggestions, and editor suggestions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestions")]
		public VideoSuggestions Suggestions { get; set; }
		
		/// <summary>
		/// Freebase topic information related to the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicDetails")]
		public VideoTopicDetails TopicDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoAgeGating
	{
		
		/// <summary>
		/// Indicates whether or not the video has alcoholic beverage content. Only users of legal purchasing age in a particular country, as identified by ICAP, can view the content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alcoholContent")]
		public System.Nullable<System.Boolean> AlcoholContent { get; set; }
		
		/// <summary>
		/// Age-restricted trailers. For redband trailers and adult-rated video-games. Only users aged 18+ can view the content. The the field is true the content is restricted to viewers aged 18+. Otherwise The field won't be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restricted")]
		public System.Nullable<System.Boolean> Restricted { get; set; }
		
		/// <summary>
		/// Video game rating, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoGameRating")]
		public System.Nullable<VideoAgeGatingVideoGameRating> VideoGameRating { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoAgeGatingVideoGameRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="anyone")]
		anyone = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="m15Plus")]
		m15Plus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="m16Plus")]
		m16Plus = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="m17Plus")]
		m17Plus = 3,
	}
	
	/// <summary>
	/// Details about the content of a YouTube Video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoContentDetails
	{
		
		/// <summary>
		/// The value of captions indicates whether the video has captions or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public System.Nullable<VideoContentDetailsCaption> Caption { get; set; }
		
		/// <summary>
		/// Ratings schemes. The country-specific ratings are mostly for movies and shows. LINT.IfChange
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentRating")]
		public ContentRating ContentRating { get; set; }
		
		/// <summary>
		/// Rights management policy for YouTube resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryRestriction")]
		public AccessPolicy CountryRestriction { get; set; }
		
		/// <summary>
		/// The value of definition indicates whether the video is available in high definition or only in standard definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public System.Nullable<VideoContentDetailsDefinition> Definition { get; set; }
		
		/// <summary>
		/// The value of dimension indicates whether the video is available in 3D or in 2D.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public string Dimension { get; set; }
		
		/// <summary>
		/// The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasCustomThumbnail")]
		public System.Nullable<System.Boolean> HasCustomThumbnail { get; set; }
		
		/// <summary>
		/// The value of is_license_content indicates whether the video is licensed content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licensedContent")]
		public System.Nullable<System.Boolean> LicensedContent { get; set; }
		
		/// <summary>
		/// Specifies the projection format of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projection")]
		public System.Nullable<VideoContentDetailsProjection> Projection { get; set; }
		
		/// <summary>
		/// DEPRECATED Region restriction of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionRestriction")]
		public VideoContentDetailsRegionRestriction RegionRestriction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoContentDetailsCaption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoContentDetailsDefinition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sd")]
		sd = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hd")]
		hd = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoContentDetailsProjection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rectangular")]
		rectangular = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="360")]
		_360 = 1,
	}
	
	/// <summary>
	/// DEPRECATED Region restriction of the video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoContentDetailsRegionRestriction
	{
		
		/// <summary>
		/// A list of region codes that identify countries where the video is viewable. If this property is present and a country is not listed in its value, then the video is blocked from appearing in that country. If this property is present and contains an empty list, the video is blocked in all countries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowed")]
		public string[] Allowed { get; set; }
		
		/// <summary>
		/// A list of region codes that identify countries where the video is blocked. If this property is present and a country is not listed in its value, then the video is viewable in that country. If this property is present and contains an empty list, the video is viewable in all countries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blocked")]
		public string[] Blocked { get; set; }
	}
	
	/// <summary>
	/// Describes original video file properties, including technical details about audio and video streams, but also metadata information like content length, digitization time, or geotagging information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoFileDetails
	{
		
		/// <summary>
		/// A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioStreams")]
		public VideoFileDetailsAudioStream[] AudioStreams { get; set; }
		
		/// <summary>
		/// The uploaded video file's combined (video and audio) bitrate in bits per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitrateBps")]
		public string BitrateBps { get; set; }
		
		/// <summary>
		/// The uploaded video file's container format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="container")]
		public string Container { get; set; }
		
		/// <summary>
		/// The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported: - Date only: YYYY-MM-DD - Naive time: YYYY-MM-DDTHH:MM:SS - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// The length of the uploaded video in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationMs")]
		public string DurationMs { get; set; }
		
		/// <summary>
		/// The uploaded file's name. This field is present whether a video file or another type of file was uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// The uploaded file's size in bytes. This field is present whether a video file or another type of file was uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSize")]
		public string FileSize { get; set; }
		
		/// <summary>
		/// The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public System.Nullable<VideoFileDetailsFileType> FileType { get; set; }
		
		/// <summary>
		/// A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoStreams")]
		public VideoFileDetailsVideoStream[] VideoStreams { get; set; }
	}
	
	/// <summary>
	/// Information about an audio stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoFileDetailsAudioStream
	{
		
		/// <summary>
		/// The audio stream's bitrate, in bits per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitrateBps")]
		public string BitrateBps { get; set; }
		
		/// <summary>
		/// The number of audio channels that the stream contains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelCount")]
		public System.Nullable<System.UInt32> ChannelCount { get; set; }
		
		/// <summary>
		/// The audio codec that the stream uses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codec")]
		public string Codec { get; set; }
		
		/// <summary>
		/// A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public string Vendor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoFileDetailsFileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="video")]
		video = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audio")]
		audio = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="image")]
		image = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="archive")]
		archive = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="document")]
		document = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="project")]
		project = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 6,
	}
	
	/// <summary>
	/// Information about a video stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoFileDetailsVideoStream
	{
		
		/// <summary>
		/// The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aspectRatio")]
		public System.Nullable<System.Double> AspectRatio { get; set; }
		
		/// <summary>
		/// The video stream's bitrate, in bits per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitrateBps")]
		public string BitrateBps { get; set; }
		
		/// <summary>
		/// The video codec that the stream uses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codec")]
		public string Codec { get; set; }
		
		/// <summary>
		/// The video stream's frame rate, in frames per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frameRateFps")]
		public System.Nullable<System.Double> FrameRateFps { get; set; }
		
		/// <summary>
		/// The encoded video content's height in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heightPixels")]
		public System.Nullable<System.UInt32> HeightPixels { get; set; }
		
		/// <summary>
		/// The amount that YouTube needs to rotate the original source content to properly display the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotation")]
		public System.Nullable<VideoFileDetailsVideoStreamRotation> Rotation { get; set; }
		
		/// <summary>
		/// A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public string Vendor { get; set; }
		
		/// <summary>
		/// The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels / height_pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widthPixels")]
		public System.Nullable<System.UInt32> WidthPixels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoFileDetailsVideoStreamRotation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="clockwise")]
		clockwise = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="upsideDown")]
		upsideDown = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="counterClockwise")]
		counterClockwise = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 4,
	}
	
	/// <summary>
	/// Details about the live streaming metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoLiveStreamingDetails
	{
		
		/// <summary>
		/// The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeLiveChatId")]
		public string ActiveLiveChatId { get; set; }
		
		/// <summary>
		/// The time that the broadcast actually ended. This value will not be available until the broadcast is over.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actualEndTime")]
		public System.Nullable<System.DateTimeOffset> ActualEndTime { get; set; }
		
		/// <summary>
		/// The time that the broadcast actually started. This value will not be available until the broadcast begins.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actualStartTime")]
		public System.Nullable<System.DateTimeOffset> ActualStartTime { get; set; }
		
		/// <summary>
		/// The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrentViewers")]
		public string ConcurrentViewers { get; set; }
		
		/// <summary>
		/// The time that the broadcast is scheduled to end. If the value is empty or the property is not present, then the broadcast is scheduled to contiue indefinitely.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledEndTime")]
		public System.Nullable<System.DateTimeOffset> ScheduledEndTime { get; set; }
		
		/// <summary>
		/// The time that the broadcast is scheduled to begin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledStartTime")]
		public System.Nullable<System.DateTimeOffset> ScheduledStartTime { get; set; }
	}
	
	/// <summary>
	/// Localized versions of certain video properties (e.g. title).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoLocalization
	{
		
		/// <summary>
		/// Localized version of the video's description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Localized version of the video's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Details about monetization of a YouTube Video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoMonetizationDetails
	{
		
		/// <summary>
		/// Rights management policy for YouTube resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access")]
		public AccessPolicy Access { get; set; }
	}
	
	/// <summary>
	/// Player to be used for a video playback.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoPlayer
	{
		
		[System.Runtime.Serialization.DataMember(Name="embedHeight")]
		public string EmbedHeight { get; set; }
		
		/// <summary>
		/// An <iframe> tag that embeds a player that will play the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embedHtml")]
		public string EmbedHtml { get; set; }
		
		/// <summary>
		/// The embed width
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embedWidth")]
		public string EmbedWidth { get; set; }
	}
	
	/// <summary>
	/// Describes processing status and progress and availability of some other Video resource parts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoProcessingDetails
	{
		
		/// <summary>
		/// This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editorSuggestionsAvailability")]
		public string EditorSuggestionsAvailability { get; set; }
		
		/// <summary>
		/// This value indicates whether file details are available for the uploaded video. You can retrieve a video's file details by requesting the fileDetails part in your videos.list() request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileDetailsAvailability")]
		public string FileDetailsAvailability { get; set; }
		
		/// <summary>
		/// The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property's value is failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingFailureReason")]
		public System.Nullable<VideoProcessingDetailsProcessingFailureReason> ProcessingFailureReason { get; set; }
		
		/// <summary>
		/// This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingIssuesAvailability")]
		public string ProcessingIssuesAvailability { get; set; }
		
		/// <summary>
		/// Video processing progress and completion time estimate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingProgress")]
		public VideoProcessingDetailsProcessingProgress ProcessingProgress { get; set; }
		
		/// <summary>
		/// The video's processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingStatus")]
		public System.Nullable<VideoProcessingDetailsProcessingStatus> ProcessingStatus { get; set; }
		
		/// <summary>
		/// This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video's metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagSuggestionsAvailability")]
		public string TagSuggestionsAvailability { get; set; }
		
		/// <summary>
		/// This value indicates whether thumbnail images have been generated for the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailsAvailability")]
		public string ThumbnailsAvailability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoProcessingDetailsProcessingFailureReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uploadFailed")]
		uploadFailed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transcodeFailed")]
		transcodeFailed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="streamingFailed")]
		streamingFailed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 3,
	}
	
	/// <summary>
	/// Video processing progress and completion time estimate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoProcessingDetailsProcessingProgress
	{
		
		/// <summary>
		/// The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating: 100 * parts_processed / parts_total Note that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partsProcessed")]
		public string PartsProcessed { get; set; }
		
		/// <summary>
		/// An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partsTotal")]
		public string PartsTotal { get; set; }
		
		/// <summary>
		/// An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeLeftMs")]
		public string TimeLeftMs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoProcessingDetailsProcessingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="processing")]
		processing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="succeeded")]
		succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="terminated")]
		terminated = 3,
	}
	
	/// <summary>
	/// DEPRECATED. b/157517979: This part was never populated after it was added. However, it sees non-zero traffic because there is generated client code in the wild that refers to it [1]. We keep this field and do NOT remove it because otherwise V3 would return an error when this part gets requested [2]. [1] https://developers.google.com/resources/api-libraries/documentation/youtube/v3/csharp/latest/classGoogle_1_1Apis_1_1YouTube_1_1v3_1_1Data_1_1VideoProjectDetails.html [2] http://google3/video/youtube/src/python/servers/data_api/common.py?l=1565-1569&rcl=344141677
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoProjectDetails
	{
	}
	
	/// <summary>
	/// Recording information associated with the video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoRecordingDetails
	{
		
		/// <summary>
		/// Geographical coordinates of a point, in WGS84.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public GeoPoint Location { get; set; }
		
		/// <summary>
		/// The text description of the location where the video was recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationDescription")]
		public string LocationDescription { get; set; }
		
		/// <summary>
		/// The date and time when the video was recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordingDate")]
		public System.Nullable<System.DateTimeOffset> RecordingDate { get; set; }
	}
	
	/// <summary>
	/// Basic details about a video, including title, description, uploader, thumbnails and category.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoSnippet
	{
		
		/// <summary>
		/// The YouTube video category associated with the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the channel that the video was uploaded to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// Channel title for the channel that the video belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelTitle")]
		public string ChannelTitle { get; set; }
		
		/// <summary>
		/// The default_audio_language property specifies the language spoken in the video's default audio track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultAudioLanguage")]
		public string DefaultAudioLanguage { get; set; }
		
		/// <summary>
		/// The language of the videos's default snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLanguage")]
		public string DefaultLanguage { get; set; }
		
		/// <summary>
		/// The video's description. @mutable youtube.videos.insert youtube.videos.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates if the video is an upcoming/active live broadcast. Or it's "none" if the video is not an upcoming/active live broadcast.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveBroadcastContent")]
		public SearchResultSnippetLiveBroadcastContent LiveBroadcastContent { get; set; }
		
		/// <summary>
		/// Localized versions of certain video properties (e.g. title).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localized")]
		public VideoLocalization Localized { get; set; }
		
		/// <summary>
		/// The date and time when the video was uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedAt")]
		public System.Nullable<System.DateTimeOffset> PublishedAt { get; set; }
		
		/// <summary>
		/// A list of keyword tags associated with the video. Tags may contain spaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Internal representation of thumbnails for a YouTube resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnails")]
		public ThumbnailDetails Thumbnails { get; set; }
		
		/// <summary>
		/// The video's title. @mutable youtube.videos.insert youtube.videos.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Statistics about the video, such as the number of times the video was viewed or liked.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoStatistics
	{
		
		/// <summary>
		/// The number of comments for the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commentCount")]
		public string CommentCount { get; set; }
		
		/// <summary>
		/// The number of users who have indicated that they disliked the video by giving it a negative rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dislikeCount")]
		public string DislikeCount { get; set; }
		
		/// <summary>
		/// The number of users who currently have the video marked as a favorite video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="favoriteCount")]
		public string FavoriteCount { get; set; }
		
		/// <summary>
		/// The number of users who have indicated that they liked the video by giving it a positive rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="likeCount")]
		public string LikeCount { get; set; }
		
		/// <summary>
		/// The number of times the video has been viewed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewCount")]
		public string ViewCount { get; set; }
	}
	
	/// <summary>
	/// Basic details about a video category, such as its localized title. Next Id: 18
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoStatus
	{
		
		/// <summary>
		/// This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embeddable")]
		public System.Nullable<System.Boolean> Embeddable { get; set; }
		
		/// <summary>
		/// This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public System.Nullable<VideoStatusFailureReason> FailureReason { get; set; }
		
		/// <summary>
		/// The video's license. @mutable youtube.videos.insert youtube.videos.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license")]
		public System.Nullable<VideoStatusLicense> License { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="madeForKids")]
		public System.Nullable<System.Boolean> MadeForKids { get; set; }
		
		/// <summary>
		/// The video's privacy status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacyStatus")]
		public System.Nullable<VideoStatusPrivacyStatus> PrivacyStatus { get; set; }
		
		/// <summary>
		/// This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicStatsViewable")]
		public System.Nullable<System.Boolean> PublicStatsViewable { get; set; }
		
		/// <summary>
		/// The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishAt")]
		public System.Nullable<System.DateTimeOffset> PublishAt { get; set; }
		
		/// <summary>
		/// This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectionReason")]
		public System.Nullable<VideoStatusRejectionReason> RejectionReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="selfDeclaredMadeForKids")]
		public System.Nullable<System.Boolean> SelfDeclaredMadeForKids { get; set; }
		
		/// <summary>
		/// The status of the uploaded video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadStatus")]
		public System.Nullable<VideoStatusUploadStatus> UploadStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoStatusFailureReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conversion")]
		conversion = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invalidFile")]
		invalidFile = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="emptyFile")]
		emptyFile = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tooSmall")]
		tooSmall = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="codec")]
		codec = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uploadAborted")]
		uploadAborted = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoStatusLicense
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="youtube")]
		youtube = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="creativeCommon")]
		creativeCommon = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoStatusPrivacyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unlisted")]
		unlisted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoStatusRejectionReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copyright")]
		copyright = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inappropriate")]
		inappropriate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="duplicate")]
		duplicate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="termsOfUse")]
		termsOfUse = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uploaderAccountSuspended")]
		uploaderAccountSuspended = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="length")]
		length = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="claim")]
		claim = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uploaderAccountClosed")]
		uploaderAccountClosed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trademark")]
		trademark = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="legal")]
		legal = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VideoStatusUploadStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uploaded")]
		uploaded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="processed")]
		processed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deleted")]
		deleted = 4,
	}
	
	/// <summary>
	/// Specifies suggestions on how to improve video content, including encoding hints, tag suggestions, and editor suggestions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoSuggestions
	{
		
		/// <summary>
		/// A list of video editing operations that might improve the video quality or playback experience of the uploaded video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editorSuggestions")]
		public string[] EditorSuggestions { get; set; }
		
		/// <summary>
		/// A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingErrors")]
		public string[] ProcessingErrors { get; set; }
		
		/// <summary>
		/// A list of suggestions that may improve YouTube's ability to process the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingHints")]
		public string[] ProcessingHints { get; set; }
		
		/// <summary>
		/// A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingWarnings")]
		public string[] ProcessingWarnings { get; set; }
		
		/// <summary>
		/// A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagSuggestions")]
		public VideoSuggestionsTagSuggestion[] TagSuggestions { get; set; }
	}
	
	/// <summary>
	/// A single tag suggestion with it's relevance information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoSuggestionsTagSuggestion
	{
		
		/// <summary>
		/// A set of video categories for which the tag is relevant. You can use this information to display appropriate tag suggestions based on the video category that the video uploader associates with the video. By default, tag suggestions are relevant for all categories if there are no restricts defined for the keyword.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryRestricts")]
		public string[] CategoryRestricts { get; set; }
		
		/// <summary>
		/// The keyword tag suggested for the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Freebase topic information related to the video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoTopicDetails
	{
		
		/// <summary>
		/// Similar to topic_id, except that these topics are merely relevant to the video. These are topics that may be mentioned in, or appear in the video. You can retrieve information about each topic using Freebase Topic API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relevantTopicIds")]
		public string[] RelevantTopicIds { get; set; }
		
		/// <summary>
		/// A list of Wikipedia URLs that provide a high-level description of the video's content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicCategories")]
		public string[] TopicCategories { get; set; }
		
		/// <summary>
		/// A list of Freebase topic IDs that are centrally associated with the video. These are topics that are centrally featured in the video, and it can be said that the video is mainly about each of these. You can retrieve information about each topic using the < a href="http://wiki.freebase.com/wiki/Topic_API">Freebase Topic API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicIds")]
		public string[] TopicIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoAbuseReport
	{
		
		/// <summary>
		/// Additional comments regarding the abuse report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// The language that the content was viewed in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The high-level, or primary, reason that the content is abusive. The value is an abuse report reason ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonId")]
		public string ReasonId { get; set; }
		
		/// <summary>
		/// The specific, or secondary, reason that this content is abusive (if available). The value is an abuse report reason ID that is a valid secondary reason for the primary reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryReasonId")]
		public string SecondaryReasonId { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoId")]
		public string VideoId { get; set; }
	}
	
	/// <summary>
	/// A `__videoAbuseReportReason__` resource identifies a reason that a video could be reported as abusive. Video abuse report reasons are used with `video.ReportAbuse`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoAbuseReportReason
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID of this abuse report reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"youtube#videoAbuseReportReason"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#videoAbuseReportReason")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#videoAbuseReportReason";
		
		/// <summary>
		/// Basic details about a video category, such as its localized title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public VideoAbuseReportReasonSnippet Snippet { get; set; }
	}
	
	/// <summary>
	/// Basic details about a video category, such as its localized title.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoAbuseReportReasonSnippet
	{
		
		/// <summary>
		/// The localized label belonging to this abuse report reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The secondary reasons associated with this reason, if any are available. (There might be 0 or more.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryReasons")]
		public VideoAbuseReportSecondaryReason[] SecondaryReasons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoAbuseReportSecondaryReason
	{
		
		/// <summary>
		/// The ID of this abuse report secondary reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The localized label for this abuse report secondary reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoAbuseReportReasonListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of valid abuse reasons that are used with `video.ReportAbuse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public VideoAbuseReportReason[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"youtube#videoAbuseReportReasonListResponse"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#videoAbuseReportReasonListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#videoAbuseReportReasonListResponse";
		
		/// <summary>
		/// The `visitorId` identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// A *videoCategory* resource identifies a category that has been or could be associated with uploaded videos.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoCategory
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the video category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#videoCategory".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#videoCategory")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#videoCategory";
		
		/// <summary>
		/// Basic details about a video category, such as its localized title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public VideoCategorySnippet Snippet { get; set; }
	}
	
	/// <summary>
	/// Basic details about a video category, such as its localized title.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoCategorySnippet
	{
		
		[System.Runtime.Serialization.DataMember(Name="assignable")]
		public System.Nullable<System.Boolean> Assignable { get; set; }
		
		/// <summary>
		/// The YouTube channel that created the video category.
		/// </summary>
		[System.ComponentModel.DefaultValue("UCBR8-60-B28hp2BmDPdntcQ")]
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; } = "UCBR8-60-B28hp2BmDPdntcQ";
		
		/// <summary>
		/// The video category's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoCategoryListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of video categories that can be associated with YouTube videos. In this map, the video category ID is the map key, and its value is the corresponding videoCategory resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public VideoCategory[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#videoCategoryListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#videoCategoryListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#videoCategoryListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoGetRatingResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// A list of ratings that match the request criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public VideoRating[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#videoGetRatingResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#videoGetRatingResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#videoGetRatingResponse";
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	/// <summary>
	/// Basic details about rating of a video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoRating
	{
		
		/// <summary>
		/// Rating of a video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public CommentSnippetViewerRating Rating { get; set; }
		
		/// <summary>
		/// The ID that YouTube uses to uniquely identify the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoId")]
		public string VideoId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoListResponse
	{
		
		/// <summary>
		/// Etag of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Serialized EventId of the request which produced this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Video[] Items { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "youtube#videoListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("youtube#videoListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "youtube#videoListResponse";
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
		
		/// <summary>
		/// Stub token pagination template to suppress results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		/// <summary>
		/// The visitorId identifies the visitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitorId")]
		public string VisitorId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Inserts a new resource into this collection.
		/// Youtube_abuseReports_insert youtube/v3/abuseReports
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.</param>
		/// <returns>Successful response</returns>
		public async Task<AbuseReport> Youtube_abuseReports_insertAsync(string[] part, AbuseReport requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/abuseReports?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AbuseReport>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_activities_list youtube/v3/activities
		/// </summary>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more activity resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in an activity resource, the snippet property contains other properties that identify the type of activity, a display title for the activity, and so forth. If you set *part=snippet*, the API response will also contain all of those nested properties.</param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<ActivityListResponse> Youtube_activities_listAsync(string[] part, string channelId, bool home, int maxResults, bool mine, string pageToken, string publishedAfter, string publishedBefore, string regionCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/activities?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&channelId=" + (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"&home="+home+"&maxResults="+maxResults+"&mine="+mine+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&publishedAfter=" + (publishedAfter==null? "" : System.Uri.EscapeDataString(publishedAfter))+"&publishedBefore=" + (publishedBefore==null? "" : System.Uri.EscapeDataString(publishedBefore))+"&regionCode=" + (regionCode==null? "" : System.Uri.EscapeDataString(regionCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource.
		/// Youtube_captions_delete youtube/v3/captions
		/// </summary>
		/// <param name="onBehalfOf">ID of the Google+ Page for the channel that the request is be on behalf of</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task Youtube_captions_deleteAsync(string id, string onBehalfOf, string onBehalfOfContentOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/captions?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&onBehalfOf=" + (onBehalfOf==null? "" : System.Uri.EscapeDataString(onBehalfOf))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_captions_list youtube/v3/captions
		/// </summary>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet.</param>
		/// <param name="videoId">Returns the captions for the specified video.</param>
		/// <param name="id">Returns the captions with the given IDs for Stubby or Apiary.</param>
		/// <param name="onBehalfOf">ID of the Google+ Page for the channel that the request is on behalf of.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task<CaptionListResponse> Youtube_captions_listAsync(string[] part, string videoId, string[] id, string onBehalfOf, string onBehalfOfContentOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/captions?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&videoId=" + (videoId==null? "" : System.Uri.EscapeDataString(videoId))+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOf=" + (onBehalfOf==null? "" : System.Uri.EscapeDataString(onBehalfOf))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaptionListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Downloads a caption track.
		/// Youtube_captions_download youtube/v3/captions/{id}
		/// </summary>
		/// <param name="id">The ID of the caption track to download, required for One Platform.</param>
		/// <param name="onBehalfOf">ID of the Google+ Page for the channel that the request is be on behalf of</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="tfmt">Convert the captions into this format. Supported options are sbv, srt, and vtt.</param>
		/// <param name="tlang">tlang is the language code; machine translate the captions into this language.</param>
		/// <returns>Successful response</returns>
		public async Task Youtube_captions_downloadAsync(string id, string onBehalfOf, string onBehalfOfContentOwner, string tfmt, string tlang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/captions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&onBehalfOf=" + (onBehalfOf==null? "" : System.Uri.EscapeDataString(onBehalfOf))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&tfmt=" + (tfmt==null? "" : System.Uri.EscapeDataString(tfmt))+"&tlang=" + (tlang==null? "" : System.Uri.EscapeDataString(tlang));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource.
		/// Youtube_channelSections_delete youtube/v3/channelSections
		/// </summary>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task Youtube_channelSections_deleteAsync(string id, string onBehalfOfContentOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/channelSections?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_channelSections_list youtube/v3/channelSections
		/// </summary>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more channelSection resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, and contentDetails. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channelSection resource, the snippet property contains other properties, such as a display title for the channelSection. If you set *part=snippet*, the API response will also contain all of those nested properties.</param>
		/// <param name="channelId">Return the ChannelSections owned by the specified channel ID.</param>
		/// <param name="hl">Return content in specified language</param>
		/// <param name="id">Return the ChannelSections with the given IDs for Stubby or Apiary.</param>
		/// <param name="mine">Return the ChannelSections owned by the authenticated user.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task<ChannelSectionListResponse> Youtube_channelSections_listAsync(string[] part, string channelId, string hl, string[] id, bool mine, string onBehalfOfContentOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/channelSections?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&channelId=" + (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"&hl=" + (hl==null? "" : System.Uri.EscapeDataString(hl))+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&mine="+mine+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelSectionListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new resource into this collection.
		/// Youtube_channelSections_insert youtube/v3/channelSections
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part names that you can include in the parameter value are snippet and contentDetails.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <returns>Successful response</returns>
		public async Task<ChannelSection> Youtube_channelSections_insertAsync(string[] part, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, ChannelSection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/channelSections?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelSection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing resource.
		/// Youtube_channelSections_update youtube/v3/channelSections
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part names that you can include in the parameter value are snippet and contentDetails.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task<ChannelSection> Youtube_channelSections_updateAsync(string[] part, string onBehalfOfContentOwner, ChannelSection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/channelSections?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelSection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_channels_list youtube/v3/channels
		/// </summary>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more channel resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channel resource, the contentDetails property contains other properties, such as the uploads properties. As such, if you set *part=contentDetails*, the API response will also contain all of those nested properties.</param>
		/// <param name="categoryId">Return the channels within the specified guide category ID.</param>
		/// <param name="forUsername">Return the channel associated with a YouTube username.</param>
		/// <param name="hl">Stands for "host language". Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX).</param>
		/// <param name="id">Return the channels with the specified IDs.</param>
		/// <param name="managedByMe">Return the channels managed by the authenticated user.</param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="mine">Return the ids of channels owned by the authenticated user.</param>
		/// <param name="mySubscribers">Return the channels subscribed to the authenticated user</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<ChannelListResponse> Youtube_channels_listAsync(string[] part, string categoryId, string forUsername, string hl, string[] id, bool managedByMe, int maxResults, bool mine, bool mySubscribers, string onBehalfOfContentOwner, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/channels?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&categoryId=" + (categoryId==null? "" : System.Uri.EscapeDataString(categoryId))+"&forUsername=" + (forUsername==null? "" : System.Uri.EscapeDataString(forUsername))+"&hl=" + (hl==null? "" : System.Uri.EscapeDataString(hl))+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&managedByMe="+managedByMe+"&maxResults="+maxResults+"&mine="+mine+"&mySubscribers="+mySubscribers+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing resource.
		/// Youtube_channels_update youtube/v3/channels
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The API currently only allows the parameter value to be set to either brandingSettings or invideoPromotion. (You cannot update both of those parts with a single request.) Note that this method overrides the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies.</param>
		/// <param name="onBehalfOfContentOwner">The *onBehalfOfContentOwner* parameter indicates that the authenticated user is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with needs to be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Youtube_channels_updateAsync(string[] part, string onBehalfOfContentOwner, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/channels?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_commentThreads_list youtube/v3/commentThreads
		/// </summary>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include.</param>
		/// <param name="allThreadsRelatedToChannelId">Returns the comment threads of all videos of the channel and the channel comments as well.</param>
		/// <param name="channelId">Returns the comment threads for all the channel comments (ie does not include comments left on videos).</param>
		/// <param name="id">Returns the comment threads with the given IDs for Stubby or Apiary.</param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="moderationStatus">Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam.</param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.</param>
		/// <param name="searchTerms">Limits the returned comment threads to those matching the specified key words. Not compatible with the 'id' filter.</param>
		/// <param name="textFormat">The requested text format for the returned comments.</param>
		/// <param name="videoId">Returns the comment threads of the specified video.</param>
		/// <returns>Successful response</returns>
		public async Task<CommentThreadListResponse> Youtube_commentThreads_listAsync(string[] part, string allThreadsRelatedToChannelId, string channelId, string[] id, int maxResults, CommentSnippetModerationStatus moderationStatus, Youtube_commentThreads_listOrder order, string pageToken, string searchTerms, Youtube_commentThreads_listTextFormat textFormat, string videoId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/commentThreads?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&allThreadsRelatedToChannelId=" + (allThreadsRelatedToChannelId==null? "" : System.Uri.EscapeDataString(allThreadsRelatedToChannelId))+"&channelId=" + (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&moderationStatus=" + moderationStatus+"&order=" + order+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&searchTerms=" + (searchTerms==null? "" : System.Uri.EscapeDataString(searchTerms))+"&textFormat=" + textFormat+"&videoId=" + (videoId==null? "" : System.Uri.EscapeDataString(videoId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentThreadListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new resource into this collection.
		/// Youtube_commentThreads_insert youtube/v3/commentThreads
		/// </summary>
		/// <param name="part">The *part* parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.</param>
		/// <returns>Successful response</returns>
		public async Task<CommentThread> Youtube_commentThreads_insertAsync(string[] part, CommentThread requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/commentThreads?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentThread>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing resource.
		/// Youtube_youtube_v3_updateCommentThreads youtube/v3/commentThreads
		/// </summary>
		/// <param name="part">The *part* parameter specifies a comma-separated list of commentThread resource properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.</param>
		/// <returns>Successful response</returns>
		public async Task<CommentThread> Youtube_youtube_v3_updateCommentThreadsAsync(string[] part, CommentThread requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/commentThreads?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentThread>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource.
		/// Youtube_comments_delete youtube/v3/comments
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Youtube_comments_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/comments?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_comments_list youtube/v3/comments
		/// </summary>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more comment resource properties that the API response will include.</param>
		/// <param name="id">Returns the comments with the given IDs for One Platform.</param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.</param>
		/// <param name="parentId">Returns replies to the specified comment. Note, currently YouTube features only one level of replies (ie replies to top level comments). However replies to replies may be supported in the future.</param>
		/// <param name="textFormat">The requested text format for the returned comments.</param>
		/// <returns>Successful response</returns>
		public async Task<CommentListResponse> Youtube_comments_listAsync(string[] part, string[] id, int maxResults, string pageToken, string parentId, Youtube_commentThreads_listTextFormat textFormat, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/comments?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&parentId=" + (parentId==null? "" : System.Uri.EscapeDataString(parentId))+"&textFormat=" + textFormat;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new resource into this collection.
		/// Youtube_comments_insert youtube/v3/comments
		/// </summary>
		/// <param name="part">The *part* parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.</param>
		/// <returns>Successful response</returns>
		public async Task<Comment> Youtube_comments_insertAsync(string[] part, Comment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/comments?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing resource.
		/// Youtube_comments_update youtube/v3/comments
		/// </summary>
		/// <param name="part">The *part* parameter identifies the properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.</param>
		/// <returns>Successful response</returns>
		public async Task<Comment> Youtube_comments_updateAsync(string[] part, Comment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/comments?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Expresses the caller's opinion that one or more comments should be flagged as spam.
		/// Youtube_comments_markAsSpam youtube/v3/comments/markAsSpam
		/// </summary>
		/// <param name="id">Flags the comments with the given IDs as spam in the caller's opinion.</param>
		/// <returns>Successful response</returns>
		public async Task Youtube_comments_markAsSpamAsync(string[] id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/comments/markAsSpam?"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the moderation status of one or more comments.
		/// Youtube_comments_setModerationStatus youtube/v3/comments/setModerationStatus
		/// </summary>
		/// <param name="id">Modifies the moderation status of the comments with the given IDs</param>
		/// <param name="moderationStatus">Specifies the requested moderation status. Note, comments can be in statuses, which are not available through this call. For example, this call does not allow to mark a comment as 'likely spam'. Valid values: 'heldForReview', 'published' or 'rejected'.</param>
		/// <param name="banAuthor">If set to true the author of the comment gets added to the ban list. This means all future comments of the author will autmomatically be rejected. Only valid in combination with STATUS_REJECTED.</param>
		/// <returns>Successful response</returns>
		public async Task Youtube_comments_setModerationStatusAsync(string[] id, CommentSnippetModerationStatus moderationStatus, bool banAuthor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/comments/setModerationStatus?"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&moderationStatus=" + moderationStatus+"&banAuthor="+banAuthor;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_i18nLanguages_list youtube/v3/i18nLanguages
		/// </summary>
		/// <param name="part">The *part* parameter specifies the i18nLanguage resource properties that the API response will include. Set the parameter value to snippet.</param>
		/// <returns>Successful response</returns>
		public async Task<I18nLanguageListResponse> Youtube_i18nLanguages_listAsync(string[] part, string hl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/i18nLanguages?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&hl=" + (hl==null? "" : System.Uri.EscapeDataString(hl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<I18nLanguageListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_i18nRegions_list youtube/v3/i18nRegions
		/// </summary>
		/// <param name="part">The *part* parameter specifies the i18nRegion resource properties that the API response will include. Set the parameter value to snippet.</param>
		/// <returns>Successful response</returns>
		public async Task<I18nRegionListResponse> Youtube_i18nRegions_listAsync(string[] part, string hl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/i18nRegions?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&hl=" + (hl==null? "" : System.Uri.EscapeDataString(hl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<I18nRegionListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a given broadcast.
		/// Youtube_liveBroadcasts_delete youtube/v3/liveBroadcasts
		/// </summary>
		/// <param name="id">Broadcast to delete.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <returns>Successful response</returns>
		public async Task Youtube_liveBroadcasts_deleteAsync(string id, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveBroadcasts?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the list of broadcasts associated with the given channel.
		/// Youtube_liveBroadcasts_list youtube/v3/liveBroadcasts
		/// </summary>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, status and statistics.</param>
		/// <param name="broadcastStatus">Return broadcasts with a certain status, e.g. active broadcasts.</param>
		/// <param name="broadcastType">Return only broadcasts with the selected type.</param>
		/// <param name="id">Return broadcasts with the given ids from Stubby or Apiary.</param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<LiveBroadcastListResponse> Youtube_liveBroadcasts_listAsync(string[] part, Youtube_liveBroadcasts_listBroadcastStatus broadcastStatus, Youtube_liveBroadcasts_listBroadcastType broadcastType, string[] id, int maxResults, bool mine, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveBroadcasts?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&broadcastStatus=" + broadcastStatus+"&broadcastType=" + broadcastType+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&mine="+mine+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LiveBroadcastListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new stream for the authenticated user.
		/// Youtube_liveBroadcasts_insert youtube/v3/liveBroadcasts
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, contentDetails, and status.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <returns>Successful response</returns>
		public async Task<LiveBroadcast> Youtube_liveBroadcasts_insertAsync(string[] part, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, LiveBroadcast requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveBroadcasts?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LiveBroadcast>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing broadcast for the authenticated user.
		/// Youtube_liveBroadcasts_update youtube/v3/liveBroadcasts
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, contentDetails, and status. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a broadcast's privacy status is defined in the status part. As such, if your request is updating a private or unlisted broadcast, and the request's part parameter value includes the status part, the broadcast's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the broadcast will revert to the default privacy setting.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <returns>Successful response</returns>
		public async Task<LiveBroadcast> Youtube_liveBroadcasts_updateAsync(string[] part, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, LiveBroadcast requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveBroadcasts?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LiveBroadcast>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Bind a broadcast to a stream.
		/// Youtube_liveBroadcasts_bind youtube/v3/liveBroadcasts/bind
		/// </summary>
		/// <param name="id">Broadcast to bind to the stream</param>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <param name="streamId">Stream to bind, if not set unbind the current one.</param>
		/// <returns>Successful response</returns>
		public async Task<LiveBroadcast> Youtube_liveBroadcasts_bindAsync(string id, string[] part, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, string streamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveBroadcasts/bind?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel))+"&streamId=" + (streamId==null? "" : System.Uri.EscapeDataString(streamId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LiveBroadcast>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert cuepoints in a broadcast
		/// Youtube_liveBroadcasts_insertCuepoint youtube/v3/liveBroadcasts/cuepoint
		/// </summary>
		/// <param name="id">Broadcast to insert ads to, or equivalently `external_video_id` for internal use.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.</param>
		/// <returns>Successful response</returns>
		public async Task<Cuepoint> Youtube_liveBroadcasts_insertCuepointAsync(string id, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, string[] part, Cuepoint requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveBroadcasts/cuepoint?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel))+"&"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Cuepoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Transition a broadcast to a given status.
		/// Youtube_liveBroadcasts_transition youtube/v3/liveBroadcasts/transition
		/// </summary>
		/// <param name="broadcastStatus">The status to which the broadcast is going to transition.</param>
		/// <param name="id">Broadcast to transition.</param>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <returns>Successful response</returns>
		public async Task<LiveBroadcast> Youtube_liveBroadcasts_transitionAsync(Youtube_liveBroadcasts_transitionBroadcastStatus broadcastStatus, string id, string[] part, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveBroadcasts/transition?broadcastStatus=" + broadcastStatus+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LiveBroadcast>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a chat ban.
		/// Youtube_liveChatBans_delete youtube/v3/liveChat/bans
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Youtube_liveChatBans_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveChat/bans?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new resource into this collection.
		/// Youtube_liveChatBans_insert youtube/v3/liveChat/bans
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.</param>
		/// <returns>Successful response</returns>
		public async Task<LiveChatBan> Youtube_liveChatBans_insertAsync(string[] part, LiveChatBan requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveChat/bans?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LiveChatBan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a chat message.
		/// Youtube_liveChatMessages_delete youtube/v3/liveChat/messages
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Youtube_liveChatMessages_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveChat/messages?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_liveChatMessages_list youtube/v3/liveChat/messages
		/// </summary>
		/// <param name="liveChatId">The id of the live chat for which comments should be returned.</param>
		/// <param name="part">The *part* parameter specifies the liveChatComment resource parts that the API response will include. Supported values are id and snippet.</param>
		/// <param name="hl">Specifies the localization language in which the system messages should be returned.</param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 200
		/// Maximum: 2000
		// </param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identify other pages that could be retrieved.</param>
		/// <param name="profileImageSize">Specifies the size of the profile image that should be returned for each user.
		/// Minimum: 16
		/// Maximum: 720
		// </param>
		/// <returns>Successful response</returns>
		public async Task<LiveChatMessageListResponse> Youtube_liveChatMessages_listAsync(string liveChatId, string[] part, string hl, int maxResults, string pageToken, int profileImageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveChat/messages?liveChatId=" + (liveChatId==null? "" : System.Uri.EscapeDataString(liveChatId))+"&"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&hl=" + (hl==null? "" : System.Uri.EscapeDataString(hl))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&profileImageSize="+profileImageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LiveChatMessageListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new resource into this collection.
		/// Youtube_liveChatMessages_insert youtube/v3/liveChat/messages
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the parameter value to snippet.</param>
		/// <returns>Successful response</returns>
		public async Task<LiveChatMessage> Youtube_liveChatMessages_insertAsync(string[] part, LiveChatMessage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveChat/messages?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LiveChatMessage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a chat moderator.
		/// Youtube_liveChatModerators_delete youtube/v3/liveChat/moderators
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Youtube_liveChatModerators_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveChat/moderators?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_liveChatModerators_list youtube/v3/liveChat/moderators
		/// </summary>
		/// <param name="liveChatId">The id of the live chat for which moderators should be returned.</param>
		/// <param name="part">The *part* parameter specifies the liveChatModerator resource parts that the API response will include. Supported values are id and snippet.</param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<LiveChatModeratorListResponse> Youtube_liveChatModerators_listAsync(string liveChatId, string[] part, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveChat/moderators?liveChatId=" + (liveChatId==null? "" : System.Uri.EscapeDataString(liveChatId))+"&"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LiveChatModeratorListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new resource into this collection.
		/// Youtube_liveChatModerators_insert youtube/v3/liveChat/moderators
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.</param>
		/// <returns>Successful response</returns>
		public async Task<LiveChatModerator> Youtube_liveChatModerators_insertAsync(string[] part, LiveChatModerator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveChat/moderators?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LiveChatModerator>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing stream for the authenticated user.
		/// Youtube_liveStreams_delete youtube/v3/liveStreams
		/// </summary>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <returns>Successful response</returns>
		public async Task Youtube_liveStreams_deleteAsync(string id, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveStreams?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the list of streams associated with the given channel. --
		/// Youtube_liveStreams_list youtube/v3/liveStreams
		/// </summary>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more liveStream resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, cdn, and status.</param>
		/// <param name="id">Return LiveStreams with the given ids from Stubby or Apiary.</param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<LiveStreamListResponse> Youtube_liveStreams_listAsync(string[] part, string[] id, int maxResults, bool mine, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveStreams?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&mine="+mine+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LiveStreamListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new stream for the authenticated user.
		/// Youtube_liveStreams_insert youtube/v3/liveStreams
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, cdn, content_details, and status.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <returns>Successful response</returns>
		public async Task<LiveStream> Youtube_liveStreams_insertAsync(string[] part, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, LiveStream requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveStreams?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LiveStream>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing stream for the authenticated user.
		/// Youtube_liveStreams_update youtube/v3/liveStreams
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, cdn, and status. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. If the request body does not specify a value for a mutable property, the existing value for that property will be removed.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <returns>Successful response</returns>
		public async Task<LiveStream> Youtube_liveStreams_updateAsync(string[] part, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, LiveStream requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/liveStreams?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LiveStream>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of members that match the request criteria for a channel.
		/// Youtube_members_list youtube/v3/members
		/// </summary>
		/// <param name="part">The *part* parameter specifies the member resource parts that the API response will include. Set the parameter value to snippet.</param>
		/// <param name="filterByMemberChannelId">Comma separated list of channel IDs. Only data about members that are part of this list will be included in the response.</param>
		/// <param name="hasAccessToLevel">Filter members in the results set to the ones that have access to a level.</param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 0
		/// Maximum: 1000
		// </param>
		/// <param name="mode">Parameter that specifies which channel members to return.</param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<MemberListResponse> Youtube_members_listAsync(string[] part, string filterByMemberChannelId, string hasAccessToLevel, int maxResults, Youtube_members_listMode mode, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/members?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&filterByMemberChannelId=" + (filterByMemberChannelId==null? "" : System.Uri.EscapeDataString(filterByMemberChannelId))+"&hasAccessToLevel=" + (hasAccessToLevel==null? "" : System.Uri.EscapeDataString(hasAccessToLevel))+"&maxResults="+maxResults+"&mode=" + mode+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MemberListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of all pricing levels offered by a creator to the fans.
		/// Youtube_membershipsLevels_list youtube/v3/membershipsLevels
		/// </summary>
		/// <param name="part">The *part* parameter specifies the membershipsLevel resource parts that the API response will include. Supported values are id and snippet.</param>
		/// <returns>Successful response</returns>
		public async Task<MembershipsLevelListResponse> Youtube_membershipsLevels_listAsync(string[] part, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/membershipsLevels?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MembershipsLevelListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource.
		/// Youtube_playlistImages_delete youtube/v3/playlistImages
		/// </summary>
		/// <param name="id">Id to identify this image. This is returned from by the List method.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task Youtube_playlistImages_deleteAsync(string id, string onBehalfOfContentOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/playlistImages?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_playlistImages_list youtube/v3/playlistImages
		/// </summary>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.</param>
		/// <param name="parent">Return PlaylistImages for this playlist id.</param>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more playlistImage resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response.</param>
		/// <returns>Successful response</returns>
		public async Task<PlaylistImageListResponse> Youtube_playlistImages_listAsync(int maxResults, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, string pageToken, string parent, string[] part, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/playlistImages?maxResults="+maxResults+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent))+"&"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PlaylistImageListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new resource into this collection.
		/// Youtube_playlistImages_insert youtube/v3/playlistImages
		/// </summary>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <param name="part">The *part* parameter specifies the properties that the API response will include.</param>
		/// <returns>Successful response</returns>
		public async Task<PlaylistImage> Youtube_playlistImages_insertAsync(string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, string[] part, PlaylistImage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/playlistImages?onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel))+"&"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PlaylistImage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing resource.
		/// Youtube_playlistImages_update youtube/v3/playlistImages
		/// </summary>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="part">The *part* parameter specifies the properties that the API response will include.</param>
		/// <returns>Successful response</returns>
		public async Task<PlaylistImage> Youtube_playlistImages_updateAsync(string onBehalfOfContentOwner, string[] part, PlaylistImage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/playlistImages?onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PlaylistImage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource.
		/// Youtube_playlistItems_delete youtube/v3/playlistItems
		/// </summary>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task Youtube_playlistItems_deleteAsync(string id, string onBehalfOfContentOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/playlistItems?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_playlistItems_list youtube/v3/playlistItems
		/// </summary>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more playlistItem resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlistItem resource, the snippet property contains numerous fields, including the title, description, position, and resourceId properties. As such, if you set *part=snippet*, the API response will contain all of those properties.</param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.</param>
		/// <param name="playlistId">Return the playlist items within the given playlist.</param>
		/// <param name="videoId">Return the playlist items associated with the given video ID.</param>
		/// <returns>Successful response</returns>
		public async Task<PlaylistItemListResponse> Youtube_playlistItems_listAsync(string[] part, string[] id, int maxResults, string onBehalfOfContentOwner, string pageToken, string playlistId, string videoId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/playlistItems?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&playlistId=" + (playlistId==null? "" : System.Uri.EscapeDataString(playlistId))+"&videoId=" + (videoId==null? "" : System.Uri.EscapeDataString(videoId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PlaylistItemListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new resource into this collection.
		/// Youtube_playlistItems_insert youtube/v3/playlistItems
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task<PlaylistItem> Youtube_playlistItems_insertAsync(string[] part, string onBehalfOfContentOwner, PlaylistItem requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/playlistItems?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PlaylistItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing resource.
		/// Youtube_playlistItems_update youtube/v3/playlistItems
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a playlist item can specify a start time and end time, which identify the times portion of the video that should play when users watch the video in the playlist. If your request is updating a playlist item that sets these values, and the request's part parameter value includes the contentDetails part, the playlist item's start and end times will be updated to whatever value the request body specifies. If the request body does not specify values, the existing start and end times will be removed and replaced with the default settings.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task<PlaylistItem> Youtube_playlistItems_updateAsync(string[] part, string onBehalfOfContentOwner, PlaylistItem requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/playlistItems?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PlaylistItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource.
		/// Youtube_playlists_delete youtube/v3/playlists
		/// </summary>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task Youtube_playlists_deleteAsync(string id, string onBehalfOfContentOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/playlists?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_playlists_list youtube/v3/playlists
		/// </summary>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more playlist resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlist resource, the snippet property contains properties like author, title, description, tags, and timeCreated. As such, if you set *part=snippet*, the API response will contain all of those properties.</param>
		/// <param name="channelId">Return the playlists owned by the specified channel ID.</param>
		/// <param name="hl">Return content in specified language</param>
		/// <param name="id">Return the playlists with the given IDs for Stubby or Apiary.</param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="mine">Return the playlists owned by the authenticated user.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<PlaylistListResponse> Youtube_playlists_listAsync(string[] part, string channelId, string hl, string[] id, int maxResults, bool mine, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/playlists?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&channelId=" + (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"&hl=" + (hl==null? "" : System.Uri.EscapeDataString(hl))+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&mine="+mine+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PlaylistListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new resource into this collection.
		/// Youtube_playlists_insert youtube/v3/playlists
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <returns>Successful response</returns>
		public async Task<Playlist> Youtube_playlists_insertAsync(string[] part, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, Playlist requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/playlists?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Playlist>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing resource.
		/// Youtube_playlists_update youtube/v3/playlists
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for mutable properties that are contained in any parts that the request body specifies. For example, a playlist's description is contained in the snippet part, which must be included in the request body. If the request does not specify a value for the snippet.description property, the playlist's existing description will be deleted.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task<Playlist> Youtube_playlists_updateAsync(string[] part, string onBehalfOfContentOwner, Playlist requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/playlists?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Playlist>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of search resources
		/// Youtube_search_list youtube/v3/search
		/// </summary>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet.</param>
		/// <param name="channelId">Filter on resources belonging to this channelId.</param>
		/// <param name="channelType">Add a filter on the channel search.</param>
		/// <param name="eventType">Filter on the livestream status of the videos.</param>
		/// <param name="forContentOwner">Search owned by a content owner.</param>
		/// <param name="forDeveloper">Restrict the search to only retrieve videos uploaded using the project id of the authenticated user.</param>
		/// <param name="forMine">Search for the private videos of the authenticated user.</param>
		/// <param name="location">Filter on location of the video</param>
		/// <param name="locationRadius">Filter on distance from the location (specified above).</param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="order">Sort order of the results.</param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.</param>
		/// <param name="publishedAfter">Filter on resources published after this date.</param>
		/// <param name="publishedBefore">Filter on resources published before this date.</param>
		/// <param name="q">Textual search terms to match.</param>
		/// <param name="regionCode">Display the content as seen by viewers in this country.</param>
		/// <param name="relevanceLanguage">Return results relevant to this language.</param>
		/// <param name="safeSearch">Indicates whether the search results should include restricted content as well as standard content.</param>
		/// <param name="topicId">Restrict results to a particular topic.</param>
		/// <param name="type">Restrict results to a particular set of resource types from One Platform.</param>
		/// <param name="videoCaption">Filter on the presence of captions on the videos.</param>
		/// <param name="videoCategoryId">Filter on videos in a specific category.</param>
		/// <param name="videoDefinition">Filter on the definition of the videos.</param>
		/// <param name="videoDimension">Filter on 3d videos.</param>
		/// <param name="videoDuration">Filter on the duration of the videos.</param>
		/// <param name="videoEmbeddable">Filter on embeddable videos.</param>
		/// <param name="videoLicense">Filter on the license of the videos.</param>
		/// <param name="videoSyndicated">Filter on syndicated videos.</param>
		/// <param name="videoType">Filter on videos of a specific type.</param>
		/// <returns>Successful response</returns>
		public async Task<SearchListResponse> Youtube_search_listAsync(
					string[] part, 
					string channelId, 
					Youtube_search_listChannelType channelType, 
					SearchResultSnippetLiveBroadcastContent eventType, 
					bool forContentOwner, 
					bool forDeveloper, 
					bool forMine, 
					string location, 
					string locationRadius, 
					int maxResults, 
					string onBehalfOfContentOwner, 
					Youtube_search_listOrder order, 
					string pageToken, 
					string publishedAfter, 
					string publishedBefore, 
					string q, 
					string regionCode, 
					string relevanceLanguage, 
					Youtube_search_listSafeSearch safeSearch, 
					string topicId, 
					string[] type, 
					Youtube_search_listVideoCaption videoCaption, 
					string videoCategoryId, 
					Youtube_search_listVideoDefinition videoDefinition, 
					Youtube_search_listVideoDimension videoDimension, 
					Youtube_search_listVideoDuration videoDuration, 
					Youtube_search_listVideoEmbeddable videoEmbeddable, 
					Youtube_search_listVideoLicense videoLicense, 
					Youtube_search_listVideoPaidProductPlacement videoPaidProductPlacement, 
					Youtube_search_listVideoSyndicated videoSyndicated, 
					Youtube_search_listVideoType videoType, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/search?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&channelId=" + (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"&channelType=" + channelType+"&eventType=" + eventType+"&forContentOwner="+forContentOwner+"&forDeveloper="+forDeveloper+"&forMine="+forMine+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&locationRadius=" + (locationRadius==null? "" : System.Uri.EscapeDataString(locationRadius))+"&maxResults="+maxResults+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&order=" + order+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&publishedAfter=" + (publishedAfter==null? "" : System.Uri.EscapeDataString(publishedAfter))+"&publishedBefore=" + (publishedBefore==null? "" : System.Uri.EscapeDataString(publishedBefore))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&regionCode=" + (regionCode==null? "" : System.Uri.EscapeDataString(regionCode))+"&relevanceLanguage=" + (relevanceLanguage==null? "" : System.Uri.EscapeDataString(relevanceLanguage))+"&safeSearch=" + safeSearch+"&topicId=" + (topicId==null? "" : System.Uri.EscapeDataString(topicId))+"&"+string.Join("&", type.Select(z => $"type={System.Uri.EscapeDataString(z.ToString())}"))+"&videoCaption=" + videoCaption+"&videoCategoryId=" + (videoCategoryId==null? "" : System.Uri.EscapeDataString(videoCategoryId))+"&videoDefinition=" + videoDefinition+"&videoDimension=" + videoDimension+"&videoDuration=" + videoDuration+"&videoEmbeddable=" + videoEmbeddable+"&videoLicense=" + videoLicense+"&videoPaidProductPlacement=" + videoPaidProductPlacement+"&videoSyndicated=" + videoSyndicated+"&videoType=" + videoType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource.
		/// Youtube_subscriptions_delete youtube/v3/subscriptions
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Youtube_subscriptions_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/subscriptions?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_subscriptions_list youtube/v3/subscriptions
		/// </summary>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more subscription resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a subscription resource, the snippet property contains other properties, such as a display title for the subscription. If you set *part=snippet*, the API response will also contain all of those nested properties.</param>
		/// <param name="channelId">Return the subscriptions of the given channel owner.</param>
		/// <param name="forChannelId">Return the subscriptions to the subset of these channels that the authenticated user is subscribed to.</param>
		/// <param name="id">Return the subscriptions with the given IDs for Stubby or Apiary.</param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="mine">Flag for returning the subscriptions of the authenticated user.</param>
		/// <param name="mySubscribers">Return the subscribers of the given channel owner.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="onBehalfOfContentOwnerChannel">This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.</param>
		/// <param name="order">The order of the returned subscriptions</param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<SubscriptionListResponse> Youtube_subscriptions_listAsync(string[] part, string channelId, string forChannelId, string[] id, int maxResults, bool mine, bool myRecentSubscribers, bool mySubscribers, string onBehalfOfContentOwner, string onBehalfOfContentOwnerChannel, Youtube_subscriptions_listOrder order, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/subscriptions?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&channelId=" + (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"&forChannelId=" + (forChannelId==null? "" : System.Uri.EscapeDataString(forChannelId))+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&mine="+mine+"&myRecentSubscribers="+myRecentSubscribers+"&mySubscribers="+mySubscribers+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&onBehalfOfContentOwnerChannel=" + (onBehalfOfContentOwnerChannel==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwnerChannel))+"&order=" + order+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubscriptionListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new resource into this collection.
		/// Youtube_subscriptions_insert youtube/v3/subscriptions
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.</param>
		/// <returns>Successful response</returns>
		public async Task<Subscription> Youtube_subscriptions_insertAsync(string[] part, Subscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/subscriptions?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_superChatEvents_list youtube/v3/superChatEvents
		/// </summary>
		/// <param name="part">The *part* parameter specifies the superChatEvent resource parts that the API response will include. This parameter is currently not supported.</param>
		/// <param name="hl">Return rendered funding amounts in specified language.</param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<SuperChatEventListResponse> Youtube_superChatEvents_listAsync(string[] part, string hl, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/superChatEvents?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&hl=" + (hl==null? "" : System.Uri.EscapeDataString(hl))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuperChatEventListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// POST method.
		/// Youtube_tests_insert youtube/v3/tests
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<TestItem> Youtube_tests_insertAsync(string[] part, string externalChannelId, TestItem requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/tests?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&externalChannelId=" + (externalChannelId==null? "" : System.Uri.EscapeDataString(externalChannelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource.
		/// Youtube_thirdPartyLinks_delete youtube/v3/thirdPartyLinks
		/// </summary>
		/// <param name="linkingToken">Delete the partner links with the given linking token.</param>
		/// <param name="type">Type of the link to be deleted.</param>
		/// <param name="externalChannelId">Channel ID to which changes should be applied, for delegation.</param>
		/// <param name="part">Do not use. Required for compatibility.</param>
		/// <returns>Successful response</returns>
		public async Task Youtube_thirdPartyLinks_deleteAsync(string linkingToken, ThirdPartyLinkSnippetType type, string externalChannelId, string[] part, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/thirdPartyLinks?linkingToken=" + (linkingToken==null? "" : System.Uri.EscapeDataString(linkingToken))+"&type=" + type+"&externalChannelId=" + (externalChannelId==null? "" : System.Uri.EscapeDataString(externalChannelId))+"&"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_thirdPartyLinks_list youtube/v3/thirdPartyLinks
		/// </summary>
		/// <param name="part">The *part* parameter specifies the thirdPartyLink resource parts that the API response will include. Supported values are linkingToken, status, and snippet.</param>
		/// <param name="externalChannelId">Channel ID to which changes should be applied, for delegation.</param>
		/// <param name="linkingToken">Get a third party link with the given linking token.</param>
		/// <param name="type">Get a third party link of the given type.</param>
		/// <returns>Successful response</returns>
		public async Task<ThirdPartyLinkListResponse> Youtube_thirdPartyLinks_listAsync(string[] part, string externalChannelId, string linkingToken, ThirdPartyLinkSnippetType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/thirdPartyLinks?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&externalChannelId=" + (externalChannelId==null? "" : System.Uri.EscapeDataString(externalChannelId))+"&linkingToken=" + (linkingToken==null? "" : System.Uri.EscapeDataString(linkingToken))+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ThirdPartyLinkListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new resource into this collection.
		/// Youtube_thirdPartyLinks_insert youtube/v3/thirdPartyLinks
		/// </summary>
		/// <param name="part">The *part* parameter specifies the thirdPartyLink resource parts that the API request and response will include. Supported values are linkingToken, status, and snippet.</param>
		/// <param name="externalChannelId">Channel ID to which changes should be applied, for delegation.</param>
		/// <returns>Successful response</returns>
		public async Task<ThirdPartyLink> Youtube_thirdPartyLinks_insertAsync(string[] part, string externalChannelId, ThirdPartyLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/thirdPartyLinks?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&externalChannelId=" + (externalChannelId==null? "" : System.Uri.EscapeDataString(externalChannelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ThirdPartyLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing resource.
		/// Youtube_thirdPartyLinks_update youtube/v3/thirdPartyLinks
		/// </summary>
		/// <param name="part">The *part* parameter specifies the thirdPartyLink resource parts that the API request and response will include. Supported values are linkingToken, status, and snippet.</param>
		/// <param name="externalChannelId">Channel ID to which changes should be applied, for delegation.</param>
		/// <returns>Successful response</returns>
		public async Task<ThirdPartyLink> Youtube_thirdPartyLinks_updateAsync(string[] part, string externalChannelId, ThirdPartyLink requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/thirdPartyLinks?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&externalChannelId=" + (externalChannelId==null? "" : System.Uri.EscapeDataString(externalChannelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ThirdPartyLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// As this is not an insert in a strict sense (it supports uploading/setting of a thumbnail for multiple videos, which doesn't result in creation of a single resource), I use a custom verb here.
		/// Youtube_thumbnails_set youtube/v3/thumbnails/set
		/// </summary>
		/// <param name="videoId">Returns the Thumbnail with the given video IDs for Stubby or Apiary.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task<ThumbnailSetResponse> Youtube_thumbnails_setAsync(string videoId, string onBehalfOfContentOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/thumbnails/set?videoId=" + (videoId==null? "" : System.Uri.EscapeDataString(videoId))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ThumbnailSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_videoAbuseReportReasons_list youtube/v3/videoAbuseReportReasons
		/// </summary>
		/// <param name="part">The *part* parameter specifies the videoCategory resource parts that the API response will include. Supported values are id and snippet.</param>
		/// <returns>Successful response</returns>
		public async Task<VideoAbuseReportReasonListResponse> Youtube_videoAbuseReportReasons_listAsync(string[] part, string hl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/videoAbuseReportReasons?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&hl=" + (hl==null? "" : System.Uri.EscapeDataString(hl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VideoAbuseReportReasonListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_videoCategories_list youtube/v3/videoCategories
		/// </summary>
		/// <param name="part">The *part* parameter specifies the videoCategory resource properties that the API response will include. Set the parameter value to snippet.</param>
		/// <param name="id">Returns the video categories with the given IDs for Stubby or Apiary.</param>
		/// <returns>Successful response</returns>
		public async Task<VideoCategoryListResponse> Youtube_videoCategories_listAsync(string[] part, string hl, string[] id, string regionCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/videoCategories?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&hl=" + (hl==null? "" : System.Uri.EscapeDataString(hl))+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&regionCode=" + (regionCode==null? "" : System.Uri.EscapeDataString(regionCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VideoCategoryListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource.
		/// Youtube_videos_delete youtube/v3/videos
		/// </summary>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task Youtube_videos_deleteAsync(string id, string onBehalfOfContentOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/videos?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resources, possibly filtered.
		/// Youtube_videos_list youtube/v3/videos
		/// </summary>
		/// <param name="part">The *part* parameter specifies a comma-separated list of one or more video resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set *part=snippet*, the API response will contain all of those properties.</param>
		/// <param name="chart">Return the videos that are in the specified chart.</param>
		/// <param name="hl">Stands for "host language". Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX).</param>
		/// <param name="id">Return videos with the given ids.</param>
		/// <param name="maxHeight">Minimum: 72
		/// Maximum: 8192
		// </param>
		/// <param name="maxResults">The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="maxWidth">Return the player with maximum height specified in
		/// Minimum: 72
		/// Maximum: 8192
		// </param>
		/// <param name="myRating">Return videos liked/disliked by the authenticated user. Does not support RateType.RATED_TYPE_NONE.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <param name="pageToken">The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter.</param>
		/// <param name="regionCode">Use a chart that is specific to the specified region</param>
		/// <param name="videoCategoryId">Use chart that is specific to the specified video category</param>
		/// <returns>Successful response</returns>
		public async Task<VideoListResponse> Youtube_videos_listAsync(string[] part, Youtube_videos_listChart chart, string hl, string[] id, string locale, int maxHeight, int maxResults, int maxWidth, CommentSnippetViewerRating myRating, string onBehalfOfContentOwner, string pageToken, string regionCode, string videoCategoryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/videos?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&chart=" + chart+"&hl=" + (hl==null? "" : System.Uri.EscapeDataString(hl))+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&maxHeight="+maxHeight+"&maxResults="+maxResults+"&maxWidth="+maxWidth+"&myRating=" + myRating+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&regionCode=" + (regionCode==null? "" : System.Uri.EscapeDataString(regionCode))+"&videoCategoryId=" + (videoCategoryId==null? "" : System.Uri.EscapeDataString(videoCategoryId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VideoListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing resource.
		/// Youtube_videos_update youtube/v3/videos
		/// </summary>
		/// <param name="part">The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video's privacy setting is contained in the status part. As such, if your request is updating a private video, and the request's part parameter value includes the status part, the video's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting. In addition, not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.</param>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task<Video> Youtube_videos_updateAsync(string[] part, string onBehalfOfContentOwner, Video requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/videos?"+string.Join("&", part.Select(z => $"part={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Video>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the ratings that the authorized user gave to a list of specified videos.
		/// Youtube_videos_getRating youtube/v3/videos/getRating
		/// </summary>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task<VideoGetRatingResponse> Youtube_videos_getRatingAsync(string[] id, string onBehalfOfContentOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/videos/getRating?"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VideoGetRatingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a like or dislike rating to a video or removes a rating from a video.
		/// Youtube_videos_rate youtube/v3/videos/rate
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Youtube_videos_rateAsync(string id, CommentSnippetViewerRating rating, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/videos/rate?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&rating=" + rating;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Report abuse for a video.
		/// Youtube_videos_reportAbuse youtube/v3/videos/reportAbuse
		/// </summary>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task Youtube_videos_reportAbuseAsync(string onBehalfOfContentOwner, VideoAbuseReport requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/videos/reportAbuse?onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows removal of channel watermark.
		/// Youtube_watermarks_unset youtube/v3/watermarks/unset
		/// </summary>
		/// <param name="onBehalfOfContentOwner">*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.</param>
		/// <returns>Successful response</returns>
		public async Task Youtube_watermarks_unsetAsync(string channelId, string onBehalfOfContentOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "youtube/v3/watermarks/unset?channelId=" + (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Youtube_commentThreads_listOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orderUnspecified")]
		orderUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="time")]
		time = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="relevance")]
		relevance = 2,
	}
	
	public enum Youtube_commentThreads_listTextFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="textFormatUnspecified")]
		textFormatUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="html")]
		html = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="plainText")]
		plainText = 2,
	}
	
	public enum Youtube_liveBroadcasts_listBroadcastStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="broadcastStatusFilterUnspecified")]
		broadcastStatusFilterUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="upcoming")]
		upcoming = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 4,
	}
	
	public enum Youtube_liveBroadcasts_listBroadcastType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="broadcastTypeFilterUnspecified")]
		broadcastTypeFilterUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event")]
		_event = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="persistent")]
		persistent = 3,
	}
	
	public enum Youtube_liveBroadcasts_transitionBroadcastStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="statusUnspecified")]
		statusUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="testing")]
		testing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="live")]
		live = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 3,
	}
	
	public enum Youtube_members_listMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="listMembersModeUnknown")]
		listMembersModeUnknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="updates")]
		updates = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all_current")]
		all_current = 2,
	}
	
	public enum Youtube_search_listChannelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="channelTypeUnspecified")]
		channelTypeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="any")]
		any = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="show")]
		show = 2,
	}
	
	public enum Youtube_search_listOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="searchSortUnspecified")]
		searchSortUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date")]
		date = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rating")]
		rating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="viewCount")]
		viewCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="relevance")]
		relevance = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="title")]
		title = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoCount")]
		videoCount = 6,
	}
	
	public enum Youtube_search_listSafeSearch
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="safeSearchSettingUnspecified")]
		safeSearchSettingUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moderate")]
		moderate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="strict")]
		strict = 3,
	}
	
	public enum Youtube_search_listVideoCaption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoCaptionUnspecified")]
		videoCaptionUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="any")]
		any = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closedCaption")]
		closedCaption = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 3,
	}
	
	public enum Youtube_search_listVideoDefinition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="any")]
		any = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="standard")]
		standard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high")]
		high = 2,
	}
	
	public enum Youtube_search_listVideoDimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="any")]
		any = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2d")]
		_2d = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3d")]
		_3d = 2,
	}
	
	public enum Youtube_search_listVideoDuration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoDurationUnspecified")]
		videoDurationUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="any")]
		any = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="short")]
		_short = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medium")]
		medium = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="long")]
		_long = 4,
	}
	
	public enum Youtube_search_listVideoEmbeddable
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoEmbeddableUnspecified")]
		videoEmbeddableUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="any")]
		any = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 2,
	}
	
	public enum Youtube_search_listVideoLicense
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="any")]
		any = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="youtube")]
		youtube = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="creativeCommon")]
		creativeCommon = 2,
	}
	
	public enum Youtube_search_listVideoPaidProductPlacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoPaidProductPlacementUnspecified")]
		videoPaidProductPlacementUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="any")]
		any = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 2,
	}
	
	public enum Youtube_search_listVideoSyndicated
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoSyndicatedUnspecified")]
		videoSyndicatedUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="any")]
		any = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 2,
	}
	
	public enum Youtube_search_listVideoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="videoTypeUnspecified")]
		videoTypeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="any")]
		any = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="movie")]
		movie = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="episode")]
		episode = 3,
	}
	
	public enum Youtube_subscriptions_listOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subscriptionOrderUnspecified")]
		subscriptionOrderUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="relevance")]
		relevance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unread")]
		unread = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="alphabetical")]
		alphabetical = 3,
	}
	
	public enum Youtube_videos_listChart
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chartUnspecified")]
		chartUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mostPopular")]
		mostPopular = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
