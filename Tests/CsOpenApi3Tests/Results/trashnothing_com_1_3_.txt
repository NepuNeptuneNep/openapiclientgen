//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Feedback
	{
		
		/// <summary>
		/// A comment written by the reviewer about the user (may be null).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Date when the feedback was submitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feedback_id")]
		public string Feedback_id { get; set; }
		
		/// <summary>
		/// Set to true for positive feedback and false for negative feedback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positive")]
		public System.Nullable<System.Boolean> Positive { get; set; }
		
		/// <summary>
		/// The user ID of the user that submitted the feedback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewer_user_id")]
		public string Reviewer_user_id { get; set; }
		
		/// <summary>
		/// The user ID of the user that the feedback is about.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	/// <summary>
	/// Groups are run by volunteer moderators and provide a way to group activity in a specific location. Because each group is usually run by different people, there can be variations in rules from group to group (eg. who is allowed to join, what is allowed to be posted, how often reposts are allowed).
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Group
	{
		
		/// <summary>
		/// Provides information about the country that is associated with a group.  May be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public GroupCountry Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public string Group_id { get; set; }
		
		/// <summary>
		/// When true, anyone requesting membership to this group will be required to answer a new membership questionnaire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_questions")]
		public System.Nullable<System.Boolean> Has_questions { get; set; }
		
		/// <summary>
		/// A URL to the group homepage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homepage")]
		public string Homepage { get; set; }
		
		/// <summary>
		/// A unique identifier for the group that is used in URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// The number of members who belong to the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="member_count")]
		public System.Nullable<System.Int32> Member_count { get; set; }
		
		/// <summary>
		/// Provides information about the current users' active or pending membership to this group (if any).  Will be null if there is no active or pending membership to this group.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membership")]
		public GroupMembership Membership { get; set; }
		
		/// <summary>
		/// The name of the group (not guaranteed to be unique).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// When true, the group posts are viewable by anyone.  When false, the group posts can only be viewed by members of the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="open_archives")]
		public System.Nullable<System.Boolean> Open_archives { get; set; }
		
		/// <summary>
		/// When true, the group allows anyone to join.  When false, the group moderators review and approve applicants.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="open_membership")]
		public System.Nullable<System.Boolean> Open_membership { get; set; }
		
		/// <summary>
		/// Provides information about an area within a country that a group is associated with (eg. a state in the US or a province in Canada).  May be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public GroupRegion Region { get; set; }
		
		/// <summary>
		/// The timezone that the group is in (eg. America/New_York).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	public class GroupCountry
	{
		
		/// <summary>
		/// A 2 letter country code for the country (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// The name of the country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class GroupMembership
	{
		
		/// <summary>
		/// The UTC date and time when the membership was last updated.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Membership questionnaire data.  Will be null unless the membership status is pending-questions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questionnaire")]
		public GroupMembershipQuestionnaire Questionnaire { get; set; }
		
		/// <summary>
		/// One of: subscribed, pending, pending-questions
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class GroupMembershipQuestionnaire
	{
		
		/// <summary>
		/// A message from the group moderators to be displayed above the questions (may be null).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The list of questions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questions")]
		public string[] Questions { get; set; }
	}
	
	public class GroupRegion
	{
		
		/// <summary>
		/// A 2 letter abbreviation for the region (is not guaranteed to be globally unique but is unique among all the regions in the country).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// The name of the region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Photo
	{
		
		/// <summary>
		/// A blurhash of the photo that can be used as a placeholder while the photo is loading (see: https://github.com/woltapp/blurhash). May be null if no blurhash is available and the length of the blurhash can vary based on the photo.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blurhash")]
		public string Blurhash { get; set; }
		
		/// <summary>
		/// All the versions of this photo ordered from smallest to largest.  This list is guaranteed to include the photos specified by the above thumbnail and url properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public PhotoImages[] PhotoImages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="photo_id")]
		public string Photo_id { get; set; }
		
		/// <summary>
		/// A URL to a thumbnail of this photo.  The size of the thumbnail depends on the device_pixel_ratio parameter and it is not guaranteed to be square.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public string Thumbnail { get; set; }
		
		/// <summary>
		/// A URL to a large version of this photo (but not necessarily the largest size available).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PhotoImages
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// An offer, wanted, admin, taken or received post.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Post
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The UTC date and time when the post was published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// The UTC date and time when the post will expire.   Currently only offer and wanted posts expire.  For all other posts, expiration is always null.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public System.Nullable<System.DateTimeOffset> Expiration { get; set; }
		
		/// <summary>
		/// Some groups add footers to posts that are separate and sometimes unrelated to the post itself - such as reminders about group rules or features (may be null).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footer")]
		public string Footer { get; set; }
		
		/// <summary>
		/// The group ID of the post.  For public posts, this is always null.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public string Group_id { get; set; }
		
		/// <summary>
		/// May be null if a post hasn't been mapped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// May be null if a post hasn't been mapped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// For offer and wanted posts, this indicates the outcome of the post which is null if no outcome has been set yet.   <br /><br /> Offer post outcomes will be one of: satisfied, withdrawn, promised, expired <br /><br /> Wanted post outcomes will be one of: satisfied, withdrawn, expired <br /><br /> For all other posts, outcome is always null.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outcome")]
		public string Outcome { get; set; }
		
		/// <summary>
		/// Details about the photos associated with this post (may be null if there are no photos).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public Photo[] Photos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="post_id")]
		public string Post_id { get; set; }
		
		/// <summary>
		/// The count of how many times this post has been reposted in the last 90 days. A value of zero is used to indicate that the post is not a repost. The count is specific to the source of the post (eg. the specific group the post is on). If a post is crossposted to multiple groups, the repost_count of the post on each group may be different for each group depending on how many times the post has been posted on that group in the last 90 days.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repost_count")]
		public System.Nullable<System.Int32> Repost_count { get; set; }
		
		/// <summary>
		/// For wanted posts, whether the item is being requested in order to resell it or not. Will be null for all posts that are not wanted posts and for wanted posts where the poster hasn't indicated whether or not they intend to resell the item they are requesting.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reselling")]
		public System.Nullable<System.Boolean> Reselling { get; set; }
		
		/// <summary>
		/// The source of the post.  One of: groups, trashnothing, open_archive_groups.  A value of groups or open_archive_groups indicates the post is from a group and the group_id field will contain the ID of the group. A value of trashnothing indicates the post is a public post not associated with any group.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of post.  One of: offer, taken, wanted, received, admin
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The link to use to view the post on the trash nothing site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostSearchResult : Post
	{
		
		/// <summary>
		/// A snippet of the post content as HTML with the parts of the content that matched the search query (if any) wrapped in an HTML span tags with the class 'highlight' (eg. &lt;span class="highlight"&gt;matched words&lt;/span&gt;). May be null if none of the words in the post content matched the search query. <br /><br /> NOTE: This is not the full content of the post  It is just a snippet of around 200 characters that can be used to display the parts of the post content relevant to the search query.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_content")]
		public string Search_content { get; set; }
		
		/// <summary>
		/// The post subject as HTML with the parts of the subject that matched the search query (if any) wrapped in HTML span tags with the class 'highlight'. (eg. &lt;span class="highlight"&gt;matched words&lt;/span&gt;). May be null if none of the words in the subject matched the search query.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_title")]
		public string Search_title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// A short bio a user has written about themselves to help other members get to know them better. May be null if the user has not written anything about themselves.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="about_me")]
		public string About_me { get; set; }
		
		/// <summary>
		/// A 2 letter country code for the country that has been automatically detected for the user (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ). May be null if no country has been set.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feedback")]
		public UserFeedback Feedback { get; set; }
		
		/// <summary>
		/// The first name of the user (may be null).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		/// <summary>
		/// The last name of the user (may be null).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		/// <summary>
		/// The date and time when the user first became publicly active on a group (the date may be older than when the user signed up).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="member_since")]
		public string Member_since { get; set; }
		
		/// <summary>
		/// A URL to a profile image for the user.  Profile images sizes vary based on the source (Google, Facebook, Gravatar, etc) and some can be as small as 64px by 64px.  Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile_image")]
		public string Profile_image { get; set; }
		
		/// <summary>
		/// An estimate of how many seconds it takes this user to reply to messages. May be null when there is not enough data to calculate an estimate.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reply_time")]
		public System.Nullable<System.Int32> Reply_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
		
		/// <summary>
		/// A username that can be displayed for the user (the username is NOT guaranteed to be unique). Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class UserFeedback
	{
		
		/// <summary>
		/// The percent of feedback that this user has received in the last year that was positive. May be null if a user has not received enough feedback to calculate a percentage.
		///
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percent_positive")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Percent_positive { get; set; }
		
		/// <summary>
		/// If the current user can leave positive or negative feedback on this user then restriction is null. <br /><br /> Otherwise, restriction is set to a string that explains why feedback is currently restricted and what type of feedback is restricted. The string will be one of the following:  no-recent-messages, negative-score, moderator, [days]-day-wait-for-negative <br /><br /> - **no-recent-messages**: The current user has not received any messages from this user in the last 30 days. <br /> - **negative-score**: The current user has a negative feedback and will not be able to leave feedback until their score is >= 0. <br /> - **moderator**: The user is a moderator and leaving feedback on moderators is not currently supported. <br /> - **[days]-day-wait-for-negative**: Positive feedback is not restricted but the current user must wait
		///  some number of days before they will be able to leave negative feedback on this user.  This string can 
		///  change depending on the number of days.  For example, when the current user must wait one day, the
		///  string will be '1-day-wait-for-negative'.  A wait is necessary because a lot of negative feedback results
		///  from communication issues that are resolved with more time.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restriction")]
		public string Restriction { get; set; }
		
		/// <summary>
		/// The feedback score of this user.  Higher scores are better.   Scores are calculated by substracting the total number of negative feedback from the total number of positive feedback that a user has received.  May be null if a user has not received enough feedback to calculate a score.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Int32> Score { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Search groups
		/// Search_groups groups
		/// </summary>
		/// <param name="name">Find groups that have the given text somewhere in their name (case insensitive).</param>
		/// <param name="latitude">Find groups near the given latitude and longitude.</param>
		/// <param name="longitude">Find groups near the given latitude and longitude.</param>
		/// <param name="distance">When latitude and longitude are passed, distance can optionally be passed to only return groups within a certain distance (in kilometers) from the point specified by the latitude and longitude.  The distance must be > 0 and <= 150 and will default to 100.
		///
		/// Minimum: 0
		/// Maximum: 150
		// </param>
		/// <param name="country">Find groups in the given country where country is a 2 letter country code for the country (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ).
		///</param>
		/// <param name="region">For countries with regions (AU, CA, GB, US), search groups in a specific region as specified by the region abbreviation.  The supported regions and their abbreviations are listed below. <br /><br /> NOTE: The region and postal_code parameters cannot be used at the same time and if both are passed then the postal_code will take priority. <br /><br /> --- <br /><br /> **AU**<br /> - QLD: Queensland<br /> - SA: South Australia<br /> - TAS: Tasmania<br /> - VIC: Victoria<br /> - WA: Western Australia<br /> - NT: Northern Territory<br /> - NSW: New South Wales - ACT<br /> <br /> **CA**<br /> - AB: Alberta<br /> - BC: British Columbia<br /> - MB: Manitoba<br /> - NB: New Brunswick<br /> - NL: Newfoundland and Labrador<br /> - NS: Nova Scotia<br /> - ON: Ontario<br /> - QC: Quebec<br /> - SK: Saskatchewan<br /> - PE: Prince Edward Island<br /> <br /> **GB**<br /> - E: East<br /> - EM: East Midlands<br /> - LDN: London<br /> - NE: North East<br /> - NW: North West<br /> - NI: Northern Ireland<br /> - SC: Scotland<br /> - SE: South East<br /> - SW: South West<br /> - WA: Wales<br /> - WM: West Midlands<br /> - YH: Yorkshire and the Humber<br /> <br /> **US**<br /> All 50 states and the District of Columbia are supported.  For the abbreviations, see: https://github.com/jasonong/List-of-US-States/blob/master/states.csv
		///</param>
		/// <param name="postal_code">Find groups in the given postal code.  Only a few countries support postal code searches (US, CA, AU, GB).  The country parameter must be passed when the postal_code parameter is set. <br /><br /> NOTE: The region and postal_code parameters cannot be used at the same time and if both are passed then the postal_code will take priority.
		///</param>
		/// <param name="page">The page of groups to return.
		/// Minimum: 1
		// </param>
		/// <param name="per_page">The number of groups to return per page (must be >= 1 and <= 100).
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>The groups and paging data.</returns>
		public async Task<Search_groupsReturn> Search_groupsAsync(string name, double latitude, double longitude, double distance, string country, string region, string postal_code, int page, int per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&latitude="+latitude+"&longitude="+longitude+"&distance="+distance+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&region=" + (region==null? "" : System.Uri.EscapeDataString(region))+"&postal_code=" + (postal_code==null? "" : System.Uri.EscapeDataString(postal_code))+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Search_groupsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve multiple groups
		/// Get_groups_by_ids groups/multiple
		/// </summary>
		/// <param name="group_ids">The IDs of the groups to retrieve.  If more than 20 group IDs are passed, only the first 20 groups will be returned.</param>
		/// <returns>The groups.</returns>
		public async Task<Group[]> Get_groups_by_idsAsync(string group_ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/multiple?group_ids=" + (group_ids==null? "" : System.Uri.EscapeDataString(group_ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Group[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a group
		/// Get_group groups/{group_id}
		/// </summary>
		/// <param name="group_id">The ID of the group to retrieve.</param>
		/// <returns>The group.</returns>
		public async Task<Group> Get_groupAsync(string group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+ (group_id==null? "" : System.Uri.EscapeDataString(group_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List posts
		/// NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned.
		/// NOTE: Passing the latitude, longitude and radius parameters filters all posts by their location and so these parameters will temporarily override the current users' location preferences. When latitude, longitude and radius are not specified, public posts will be filtered by the current users' location preferences.
		/// 
		/// Get_posts posts
		/// </summary>
		/// <param name="sort_by">How to sort the posts that are returned.  One of: date, active, distance <br /><br />
		///Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.
		///</param>
		/// <param name="types">A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
		///</param>
		/// <param name="sources">A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users' location if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.
		///</param>
		/// <param name="group_ids">A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response.
		///</param>
		/// <param name="per_page">The number of posts to return per page (must be >= 1 and <= 100).
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="page">The page of posts to return.
		/// Minimum: 1
		// </param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <param name="latitude">The latitude of a point around which to return posts.
		///</param>
		/// <param name="longitude">The longitude of a point around which to return posts.
		///</param>
		/// <param name="radius">The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
		///
		/// Minimum: 0
		/// Maximum: 257500
		// </param>
		/// <param name="date_min">Only posts newer than or equal to this UTC date and time will be returned.  If unset, defaults to the current date and time minus 90 days.
		///</param>
		/// <param name="date_max">Only posts older than this UTC date and time will be returned.  If unset, defaults to the current date and time.</param>
		/// <param name="outcomes">A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.
		///</param>
		/// <param name="user_state">If user_state is set, only posts matching the state specified will be returned.  Only one state may be passed and it must be one of the following: viewed, replied, bookmarked <br><br> NOTE: This option will only work with oauth requests.
		///</param>
		/// <param name="include_reposts">If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.
		///
		/// Minimum: 0
		/// Maximum: 1
		// </param>
		/// <returns>The posts and paging data.</returns>
		public async Task<Get_postsReturn> Get_postsAsync(
					string sort_by, 
					string types, 
					string sources, 
					string group_ids, 
					int per_page, 
					int page, 
					double device_pixel_ratio, 
					double latitude, 
					double longitude, 
					double radius, 
					System.DateTimeOffset date_min, 
					System.DateTimeOffset date_max, 
					string outcomes, 
					string user_state, 
					int include_reposts, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "posts?sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&sources=" + (sources==null? "" : System.Uri.EscapeDataString(sources))+"&group_ids=" + (group_ids==null? "" : System.Uri.EscapeDataString(group_ids))+"&per_page="+per_page+"&page="+page+"&device_pixel_ratio="+device_pixel_ratio+"&latitude="+latitude+"&longitude="+longitude+"&radius="+radius+"&date_min=" + date_min.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_max=" + date_max.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&outcomes=" + (outcomes==null? "" : System.Uri.EscapeDataString(outcomes))+"&user_state=" + (user_state==null? "" : System.Uri.EscapeDataString(user_state))+"&include_reposts="+include_reposts;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_postsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all posts
		/// This endpoint provides an easy way to get a feed of all the publicly published posts on trash nothing. It provides access to all publicly published offer and wanted posts from the last 30 days. The posts are sorted by date (newest first). <br /><br /> There are fewer options for filtering, sorting and searching posts with this endpoint but there is no 1,000 post limit and posts that are crossposted to multiple groups are not merged together in the response.  In most cases, crossposted posts are easy to detect because they have the same user_id, title and content.
		/// 
		/// Get_all_posts posts/all
		/// </summary>
		/// <param name="types">A comma separated list of the post types to return.  The available post types are: offer, wanted
		///</param>
		/// <param name="date_min">Only posts newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second.
		///</param>
		/// <param name="date_max">Only posts older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second.
		///</param>
		/// <param name="per_page">The number of posts to return per page (must be >= 1 and <= 50).
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="page">The page of posts to return.
		/// Minimum: 1
		// </param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <returns>The posts.</returns>
		public async Task<Get_all_postsReturn> Get_all_postsAsync(string types, System.DateTimeOffset date_min, System.DateTimeOffset date_max, int per_page, int page, double device_pixel_ratio, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "posts/all?types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&date_min=" + date_min.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_max=" + date_max.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&per_page="+per_page+"&page="+page+"&device_pixel_ratio="+device_pixel_ratio;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_all_postsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all post changes
		/// This endpoint provides an easy way to get a feed of all the changes that have been made to publicly published posts on trash nothing.  Similar to the /posts/all endpoint, only data from the last 30 days is available and the changes are sorted by date (newest first).  Every change includes the date of the change, the post_id of the post that was changed and the type of change. <br /><br /> The different types of changes that are returned are listed below. <br /><br /> - deleted<br /> - undeleted<br /> - satisfied<br /> - promised<br /> - unpromised<br /> - withdrawn<br /> - edited<br /> <br /> For edited changes, clients can use the retrieve post API endpoint to get the edits that have been made to the post.
		/// 
		/// Get_all_posts_changes posts/all/changes
		/// </summary>
		/// <param name="date_min">Only changes newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second.
		///</param>
		/// <param name="date_max">Only changes older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second.
		///</param>
		/// <param name="per_page">The number of changes to return per page (must be >= 1 and <= 50).
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="page">The page of changes to return.
		/// Minimum: 1
		// </param>
		/// <returns>The changes.</returns>
		public async Task<Get_all_posts_changesReturn> Get_all_posts_changesAsync(System.DateTimeOffset date_min, System.DateTimeOffset date_max, int per_page, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "posts/all/changes?date_min=" + date_min.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_max=" + date_max.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&per_page="+per_page+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_all_posts_changesReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve multiple posts
		/// Get_posts_by_ids posts/multiple
		/// </summary>
		/// <param name="post_ids">A comma separated list of the post IDs. If more than 10 post IDs are passed, only the first 10 posts will be returned.
		///</param>
		/// <returns>The posts.</returns>
		public async Task<Get_posts_by_idsReturn> Get_posts_by_idsAsync(string post_ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "posts/multiple?post_ids=" + (post_ids==null? "" : System.Uri.EscapeDataString(post_ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_posts_by_idsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search posts
		/// Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters.
		/// NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned.
		/// 
		/// Search_posts posts/search
		/// </summary>
		/// <param name="search">The search query used to find posts.</param>
		/// <param name="sort_by">How to sort the posts that are returned.  One of: relevance, date, active, distance <br /><br /> Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.
		///</param>
		/// <param name="types">A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
		///</param>
		/// <param name="sources">A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users' location if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.
		///</param>
		/// <param name="group_ids">A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response.
		///</param>
		/// <param name="per_page">The number of posts to return per page (must be >= 1 and <= 100).
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="page">The page of posts to return.
		/// Minimum: 1
		// </param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <param name="latitude">The latitude of a point around which to return posts.
		///</param>
		/// <param name="longitude">The longitude of a point around which to return posts.
		///</param>
		/// <param name="radius">The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
		///
		/// Minimum: 0
		/// Maximum: 257500
		// </param>
		/// <param name="date_min">Only posts newer than or equal to this UTC date and time will be returned.  If unset, defaults to the current date and time minus 90 days.
		///</param>
		/// <param name="date_max">Only posts older than this UTC date and time will be returned.  If unset, defaults to the current date and time.</param>
		/// <param name="outcomes">A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.
		///</param>
		/// <param name="user_state">If user_state is set, only posts matching the state specified will be returned.  Only one state may be passed and it must be one of the following: viewed, replied, bookmarked <br><br> NOTE: This option will only work with oauth requests.
		///</param>
		/// <param name="include_reposts">If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.
		///
		/// Minimum: 0
		/// Maximum: 1
		// </param>
		/// <returns>The posts and paging data.</returns>
		public async Task<Search_postsReturn> Search_postsAsync(
					string search, 
					string sort_by, 
					string types, 
					string sources, 
					string group_ids, 
					int per_page, 
					int page, 
					double device_pixel_ratio, 
					double latitude, 
					double longitude, 
					double radius, 
					System.DateTimeOffset date_min, 
					System.DateTimeOffset date_max, 
					string outcomes, 
					string user_state, 
					int include_reposts, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "posts/search?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&sources=" + (sources==null? "" : System.Uri.EscapeDataString(sources))+"&group_ids=" + (group_ids==null? "" : System.Uri.EscapeDataString(group_ids))+"&per_page="+per_page+"&page="+page+"&device_pixel_ratio="+device_pixel_ratio+"&latitude="+latitude+"&longitude="+longitude+"&radius="+radius+"&date_min=" + date_min.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_max=" + date_max.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&outcomes=" + (outcomes==null? "" : System.Uri.EscapeDataString(outcomes))+"&user_state=" + (user_state==null? "" : System.Uri.EscapeDataString(user_state))+"&include_reposts="+include_reposts;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Search_postsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a post
		/// Get_post posts/{post_id}
		/// </summary>
		/// <param name="post_id">The ID of the post to retrieve.</param>
		/// <returns>The post.</returns>
		public async Task<Post> Get_postAsync(string post_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "posts/"+ (post_id==null? "" : System.Uri.EscapeDataString(post_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Post>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve post display data
		/// Retrieve a post and other data related to the post that is useful for displaying the post such as data about the user who posted the post and the groups the post was posted on.
		/// 
		/// Get_post_and_related_data posts/{post_id}/display
		/// </summary>
		/// <param name="post_id">The ID of the post to retrieve.</param>
		/// <returns>The post and related data.</returns>
		public async Task<Get_post_and_related_dataReturn> Get_post_and_related_dataAsync(string post_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "posts/"+ (post_id==null? "" : System.Uri.EscapeDataString(post_id))+"/display";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_post_and_related_dataReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List posts by a user
		/// Get_user_posts users/{user_id}/posts
		/// </summary>
		/// <param name="user_id">The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user.
		///</param>
		/// <param name="sort_by">How to sort the posts that are returned.  One of: date, active, distance <br /><br />
		///Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.
		///</param>
		/// <param name="types">A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
		///</param>
		/// <param name="sources">A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.
		///</param>
		/// <param name="group_ids">A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response.
		///</param>
		/// <param name="per_page">The number of posts to return per page (must be >= 1 and <= 100).
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="page">The page of posts to return.
		/// Minimum: 1
		// </param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <param name="latitude">The latitude of a point around which to return posts.
		///</param>
		/// <param name="longitude">The longitude of a point around which to return posts.
		///</param>
		/// <param name="radius">The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
		///
		/// Minimum: 0
		/// Maximum: 257500
		// </param>
		/// <param name="date_min">Only posts newer than or equal to this UTC date and time will be returned.
		///</param>
		/// <param name="date_max">Only posts older than this UTC date and time will be returned.</param>
		/// <param name="outcomes">A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.
		///</param>
		/// <param name="include_reposts">If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.
		///
		/// Minimum: 0
		/// Maximum: 1
		// </param>
		/// <returns>The posts and paging data.</returns>
		public async Task<Get_user_postsReturn> Get_user_postsAsync(
					string user_id, 
					string sort_by, 
					string types, 
					string sources, 
					string group_ids, 
					int per_page, 
					int page, 
					double device_pixel_ratio, 
					double latitude, 
					double longitude, 
					double radius, 
					System.DateTimeOffset date_min, 
					System.DateTimeOffset date_max, 
					string outcomes, 
					int include_reposts, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/posts&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&sources=" + (sources==null? "" : System.Uri.EscapeDataString(sources))+"&group_ids=" + (group_ids==null? "" : System.Uri.EscapeDataString(group_ids))+"&per_page="+per_page+"&page="+page+"&device_pixel_ratio="+device_pixel_ratio+"&latitude="+latitude+"&longitude="+longitude+"&radius="+radius+"&date_min=" + date_min.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_max=" + date_max.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&outcomes=" + (outcomes==null? "" : System.Uri.EscapeDataString(outcomes))+"&include_reposts="+include_reposts;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_user_postsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search posts by a user
		/// Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters.
		/// 
		/// Search_user_posts users/{user_id}/posts/search
		/// </summary>
		/// <param name="user_id">The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user.
		///</param>
		/// <param name="search">The search query used to find posts.</param>
		/// <param name="sort_by">How to sort the posts that are returned.  One of: relevance, date, active, distance <br /><br /> Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.
		///</param>
		/// <param name="types">A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
		///</param>
		/// <param name="sources">A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.
		///</param>
		/// <param name="group_ids">A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response.
		///</param>
		/// <param name="per_page">The number of posts to return per page (must be >= 1 and <= 100).
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="page">The page of posts to return.
		/// Minimum: 1
		// </param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <param name="latitude">The latitude of a point around which to return posts.
		///</param>
		/// <param name="longitude">The longitude of a point around which to return posts.
		///</param>
		/// <param name="radius">The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
		///
		/// Minimum: 0
		/// Maximum: 257500
		// </param>
		/// <param name="date_min">Only posts newer than or equal to this UTC date and time will be returned.
		///</param>
		/// <param name="date_max">Only posts older than this UTC date and time will be returned.</param>
		/// <param name="outcomes">A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.
		///</param>
		/// <param name="include_reposts">If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.
		///
		/// Minimum: 0
		/// Maximum: 1
		// </param>
		/// <returns>The posts and paging data.</returns>
		public async Task<Search_user_postsReturn> Search_user_postsAsync(
					string user_id, 
					string search, 
					string sort_by, 
					string types, 
					string sources, 
					string group_ids, 
					int per_page, 
					int page, 
					double device_pixel_ratio, 
					double latitude, 
					double longitude, 
					double radius, 
					System.DateTimeOffset date_min, 
					System.DateTimeOffset date_max, 
					string outcomes, 
					int include_reposts, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/posts/search&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&sources=" + (sources==null? "" : System.Uri.EscapeDataString(sources))+"&group_ids=" + (group_ids==null? "" : System.Uri.EscapeDataString(group_ids))+"&per_page="+per_page+"&page="+page+"&device_pixel_ratio="+device_pixel_ratio+"&latitude="+latitude+"&longitude="+longitude+"&radius="+radius+"&date_min=" + date_min.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_max=" + date_max.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&outcomes=" + (outcomes==null? "" : System.Uri.EscapeDataString(outcomes))+"&include_reposts="+include_reposts;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Search_user_postsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class Search_groupsReturn
	{
		
		/// <summary>
		/// The index of the last group being returned (an integer between start_index and num_groups).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_index")]
		public System.Nullable<System.Int32> End_index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public Group[] Groups { get; set; }
		
		/// <summary>
		/// The total number of groups available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_groups")]
		public System.Nullable<System.Int32> Num_groups { get; set; }
		
		/// <summary>
		/// The total number of pages available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_pages")]
		public System.Nullable<System.Int32> Num_pages { get; set; }
		
		/// <summary>
		/// The page number of the groups being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of groups being returned per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// The index of the first group being returned (an integer between 1 and num_groups).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_index")]
		public System.Nullable<System.Int32> Start_index { get; set; }
	}
	
	public class Get_postsReturn
	{
		
		/// <summary>
		/// The index of the last post being returned (an integer between start_index and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_index")]
		public System.Nullable<System.Int32> End_index { get; set; }
		
		/// <summary>
		/// The IDs of the groups that the posts were retrieved from (will be null when no group IDs were used). These IDs may be a subset of the requested group IDs when a request includes group IDs for groups that are not open archives and that the current user is not a member of.  If the open_archive_groups source is used, these IDs may include the IDs of open archive groups that weren't present in the group_ids parameter of the request.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_ids")]
		public string[] Group_ids { get; set; }
		
		/// <summary>
		/// The UTC date and time when the current user last viewed the newest posts on the All Posts page (may be null). <br /><br /> NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page. <br /><br /> NOTE: For requests using an api key instead of oauth, this field is always null.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_listings_view")]
		public System.Nullable<System.DateTimeOffset> Last_listings_view { get; set; }
		
		/// <summary>
		/// The total number of pages available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_pages")]
		public System.Nullable<System.Int32> Num_pages { get; set; }
		
		/// <summary>
		/// The total number of posts available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_posts")]
		public System.Nullable<System.Int32> Num_posts { get; set; }
		
		/// <summary>
		/// The page number of the posts being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of posts being returned per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public Post[] Posts { get; set; }
		
		/// <summary>
		/// The index of the first post being returned (an integer between 1 and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_index")]
		public System.Nullable<System.Int32> Start_index { get; set; }
	}
	
	public class Get_all_postsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public Post[] Posts { get; set; }
	}
	
	public class Get_all_posts_changesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="changes")]
		public Get_all_posts_changesReturnChanges[] Get_all_posts_changesReturnChanges { get; set; }
	}
	
	public class Get_all_posts_changesReturnChanges
	{
		
		/// <summary>
		/// The UTC date and time when the post was changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="post_id")]
		public string Post_id { get; set; }
		
		/// <summary>
		/// The type of change.  One of: deleted, undeleted, satisfied, promised, unpromised, withdrawn, edited, expired
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class Get_posts_by_idsReturn
	{
		
		/// <summary>
		/// The IDs of posts that are forbidden for the current user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forbidden")]
		public string[] Forbidden { get; set; }
		
		/// <summary>
		/// The IDs of posts that weren't found (may have been deleted or never existed).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="not_found")]
		public string[] Not_found { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public Post[] Posts { get; set; }
	}
	
	public class Search_postsReturn
	{
		
		/// <summary>
		/// The index of the last post being returned (an integer between start_index and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_index")]
		public System.Nullable<System.Int32> End_index { get; set; }
		
		/// <summary>
		/// The IDs of the groups that the posts were retrieved from (will be null when no group IDs were used). These IDs may be a subset of the requested group IDs when a request includes group IDs for groups that are not open archives and that the current user is not a member of.  If the open_archive_groups source is used, these IDs may include the IDs of open archive groups that weren't present in the group_ids parameter of the request.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_ids")]
		public string[] Group_ids { get; set; }
		
		/// <summary>
		/// The total number of pages available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_pages")]
		public System.Nullable<System.Int32> Num_pages { get; set; }
		
		/// <summary>
		/// The total number of posts available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_posts")]
		public System.Nullable<System.Int32> Num_posts { get; set; }
		
		/// <summary>
		/// The page number of the posts being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of posts being returned per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public PostSearchResult[] Posts { get; set; }
		
		/// <summary>
		/// The index of the first post being returned (an integer between 1 and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_index")]
		public System.Nullable<System.Int32> Start_index { get; set; }
	}
	
	public class Get_post_and_related_dataReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public User Author { get; set; }
		
		/// <summary>
		/// Count of offer posts made by the post author in the last 90 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author_offer_count")]
		public System.Nullable<System.Int32> Author_offer_count { get; set; }
		
		/// <summary>
		/// Other active posts from the post author in the last 90 days. A maximum of 30 posts will be returned.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author_posts")]
		public Post[] Author_posts { get; set; }
		
		/// <summary>
		/// Count of wanted posts made by the post author in the last 90 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author_wanted_count")]
		public System.Nullable<System.Int32> Author_wanted_count { get; set; }
		
		/// <summary>
		/// Whether or not the current user has bookmarked this post.  Will be null for api key requests and for the current users' posts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookmarked")]
		public System.Nullable<System.Boolean> Bookmarked { get; set; }
		
		/// <summary>
		/// Feedback the current user has left on the post author.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedback")]
		public Feedback[] Feedback { get; set; }
		
		/// <summary>
		/// The groups the post is published on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public Group[] Groups { get; set; }
		
		/// <summary>
		/// An offer, wanted, admin, taken or received post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="post")]
		public Post Post { get; set; }
		
		/// <summary>
		/// Whether or not the current user has replied to this post.  Will be null for api key requests and for the current users' posts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replied")]
		public System.Nullable<System.Boolean> Replied { get; set; }
		
		/// <summary>
		/// Whether or not the current user (if any) can reply to this post. Unverified users cannot reply to posts until they verify their account.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_can_reply")]
		public System.Nullable<System.Boolean> User_can_reply { get; set; }
		
		/// <summary>
		/// Whether or not the current user has previously viewed this post.  Will be null for api key requests and for the current users' posts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewed")]
		public System.Nullable<System.Boolean> Viewed { get; set; }
	}
	
	public class Get_user_postsReturn
	{
		
		/// <summary>
		/// The index of the last post being returned (an integer between start_index and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_index")]
		public System.Nullable<System.Int32> End_index { get; set; }
		
		/// <summary>
		/// The IDs of the groups that the posts were retrieved from (will be null when no group IDs were used). These IDs may be a subset of the requested group IDs when a request includes group IDs for groups that are not open archives and that the current user is not a member of.  If the open_archive_groups source is used, these IDs may include the IDs of open archive groups that weren't present in the group_ids parameter of the request.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_ids")]
		public string[] Group_ids { get; set; }
		
		/// <summary>
		/// The UTC date and time when the current user last viewed the newest posts on the All Posts page (may be null). <br /><br /> NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page. <br /><br /> NOTE: For requests using an api key instead of oauth, this field is always null.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_listings_view")]
		public System.Nullable<System.DateTimeOffset> Last_listings_view { get; set; }
		
		/// <summary>
		/// The total number of pages available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_pages")]
		public System.Nullable<System.Int32> Num_pages { get; set; }
		
		/// <summary>
		/// The total number of posts available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_posts")]
		public System.Nullable<System.Int32> Num_posts { get; set; }
		
		/// <summary>
		/// The page number of the posts being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of posts being returned per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public Post[] Posts { get; set; }
		
		/// <summary>
		/// The index of the first post being returned (an integer between 1 and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_index")]
		public System.Nullable<System.Int32> Start_index { get; set; }
	}
	
	public class Search_user_postsReturn
	{
		
		/// <summary>
		/// The index of the last post being returned (an integer between start_index and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_index")]
		public System.Nullable<System.Int32> End_index { get; set; }
		
		/// <summary>
		/// The IDs of the groups that the posts were retrieved from (will be null when no group IDs were used). These IDs may be a subset of the requested group IDs when a request includes group IDs for groups that are not open archives and that the current user is not a member of.  If the open_archive_groups source is used, these IDs may include the IDs of open archive groups that weren't present in the group_ids parameter of the request.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_ids")]
		public string[] Group_ids { get; set; }
		
		/// <summary>
		/// The total number of pages available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_pages")]
		public System.Nullable<System.Int32> Num_pages { get; set; }
		
		/// <summary>
		/// The total number of posts available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_posts")]
		public System.Nullable<System.Int32> Num_posts { get; set; }
		
		/// <summary>
		/// The page number of the posts being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of posts being returned per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public PostSearchResult[] Posts { get; set; }
		
		/// <summary>
		/// The index of the first post being returned (an integer between 1 and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_index")]
		public System.Nullable<System.Int32> Start_index { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
