//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The entity analysis request message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyzeEntitiesRequest
	{
		
		/// <summary>
		/// Represents the input to API methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
		
		/// <summary>
		/// The encoding type used by the API to calculate offsets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodingType")]
		public System.Nullable<AnalyzeEntitiesRequestEncodingType> EncodingType { get; set; }
	}
	
	/// <summary>
	/// Represents the input to API methods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Document
	{
		
		/// <summary>
		/// The content of the input in string format. Cloud audit logging exempt since it is based on user data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsContentUri")]
		public string GcsContentUri { get; set; }
		
		/// <summary>
		/// The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DocumentType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DocumentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_UNSPECIFIED")]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLAIN_TEXT")]
		PLAIN_TEXT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTML")]
		HTML = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AnalyzeEntitiesRequestEncodingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTF8")]
		UTF8 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTF16")]
		UTF16 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTF32")]
		UTF32 = 3,
	}
	
	/// <summary>
	/// The entity analysis response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyzeEntitiesResponse
	{
		
		/// <summary>
		/// The recognized entities in the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public Entity[] Entities { get; set; }
		
		/// <summary>
		/// The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
	}
	
	/// <summary>
	/// Represents a phrase in the text that is a known entity, such as a person, an organization, or location. The API associates information, such as salience and mentions, with entities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Entity
	{
		
		/// <summary>
		/// The mentions of this entity in the input document. The API currently supports proper noun mentions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mentions")]
		public EntityMention[] Mentions { get; set; }
		
		/// <summary>
		/// Metadata associated with the entity. For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they are available. For the metadata associated with other entity types, see the Type table below.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// The representative name for the entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The salience score associated with the entity in the [0, 1.0] range. The salience score for an entity provides information about the importance or centrality of that entity to the entire document text. Scores closer to 0 are less salient, while scores closer to 1.0 are highly salient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salience")]
		public System.Nullable<System.Single> Salience { get; set; }
		
		/// <summary>
		/// Represents the feeling associated with the entire text or entities in the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentiment")]
		public Sentiment Sentiment { get; set; }
		
		/// <summary>
		/// The entity type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EntityType> Type { get; set; }
	}
	
	/// <summary>
	/// Represents a mention for an entity in the text. Currently, proper noun mentions are supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityMention
	{
		
		/// <summary>
		/// Represents the feeling associated with the entire text or entities in the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentiment")]
		public Sentiment Sentiment { get; set; }
		
		/// <summary>
		/// Represents a text span in the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public TextSpan Text { get; set; }
		
		/// <summary>
		/// The type of the entity mention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EntityMentionType> Type { get; set; }
	}
	
	/// <summary>
	/// Represents the feeling associated with the entire text or entities in the text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sentiment
	{
		
		/// <summary>
		/// A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="magnitude")]
		public System.Nullable<System.Single> Magnitude { get; set; }
		
		/// <summary>
		/// Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
	}
	
	/// <summary>
	/// Represents a text span in the input document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextSpan
	{
		
		/// <summary>
		/// The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beginOffset")]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		/// <summary>
		/// The content of the text span, which is a substring of the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntityMentionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_UNKNOWN")]
		TYPE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROPER")]
		PROPER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMON")]
		COMMON = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERSON")]
		PERSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATION")]
		LOCATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORGANIZATION")]
		ORGANIZATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVENT")]
		EVENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WORK_OF_ART")]
		WORK_OF_ART = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONSUMER_GOOD")]
		CONSUMER_GOOD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHONE_NUMBER")]
		PHONE_NUMBER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDRESS")]
		ADDRESS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATE")]
		DATE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NUMBER")]
		NUMBER = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRICE")]
		PRICE = 12,
	}
	
	/// <summary>
	/// The entity-level sentiment analysis request message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyzeEntitySentimentRequest
	{
		
		/// <summary>
		/// Represents the input to API methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
		
		/// <summary>
		/// The encoding type used by the API to calculate offsets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodingType")]
		public AnalyzeEntitiesRequestEncodingType EncodingType { get; set; }
	}
	
	/// <summary>
	/// The entity-level sentiment analysis response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyzeEntitySentimentResponse
	{
		
		/// <summary>
		/// The recognized entities in the input document with associated sentiments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public Entity[] Entities { get; set; }
		
		/// <summary>
		/// The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
	}
	
	/// <summary>
	/// The sentiment analysis request message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyzeSentimentRequest
	{
		
		/// <summary>
		/// Represents the input to API methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
		
		/// <summary>
		/// The encoding type used by the API to calculate sentence offsets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodingType")]
		public AnalyzeEntitiesRequestEncodingType EncodingType { get; set; }
	}
	
	/// <summary>
	/// The sentiment analysis response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyzeSentimentResponse
	{
		
		/// <summary>
		/// Represents the feeling associated with the entire text or entities in the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentSentiment")]
		public Sentiment DocumentSentiment { get; set; }
		
		/// <summary>
		/// The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The sentiment for all the sentences in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentences")]
		public Sentence[] Sentences { get; set; }
	}
	
	/// <summary>
	/// Represents a sentence in the input document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sentence
	{
		
		/// <summary>
		/// Represents the feeling associated with the entire text or entities in the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentiment")]
		public Sentiment Sentiment { get; set; }
		
		/// <summary>
		/// Represents a text span in the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public TextSpan Text { get; set; }
	}
	
	/// <summary>
	/// The syntax analysis request message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyzeSyntaxRequest
	{
		
		/// <summary>
		/// Represents the input to API methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
		
		/// <summary>
		/// The encoding type used by the API to calculate offsets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodingType")]
		public AnalyzeEntitiesRequestEncodingType EncodingType { get; set; }
	}
	
	/// <summary>
	/// The syntax analysis response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyzeSyntaxResponse
	{
		
		/// <summary>
		/// The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Sentences in the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentences")]
		public Sentence[] Sentences { get; set; }
		
		/// <summary>
		/// Tokens, along with their syntactic information, in the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokens")]
		public Token[] Tokens { get; set; }
	}
	
	/// <summary>
	/// Represents the smallest syntactic building block of the text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Token
	{
		
		/// <summary>
		/// Represents dependency parse tree information for a token. (For more information on dependency labels, see http://www.aclweb.org/anthology/P13-2017
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencyEdge")]
		public DependencyEdge DependencyEdge { get; set; }
		
		/// <summary>
		/// [Lemma](https://en.wikipedia.org/wiki/Lemma_%28morphology%29) of the token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lemma")]
		public string Lemma { get; set; }
		
		/// <summary>
		/// Represents part of speech information for a token. Parts of speech are as defined in http://www.lrec-conf.org/proceedings/lrec2012/pdf/274_Paper.pdf
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partOfSpeech")]
		public PartOfSpeech PartOfSpeech { get; set; }
		
		/// <summary>
		/// Represents a text span in the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public TextSpan Text { get; set; }
	}
	
	/// <summary>
	/// Represents dependency parse tree information for a token. (For more information on dependency labels, see http://www.aclweb.org/anthology/P13-2017
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DependencyEdge
	{
		
		/// <summary>
		/// Represents the head of this token in the dependency tree. This is the index of the token which has an arc going to this token. The index is the position of the token in the array of tokens returned by the API method. If this token is a root token, then the `head_token_index` is its own index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headTokenIndex")]
		public System.Nullable<System.Int32> HeadTokenIndex { get; set; }
		
		/// <summary>
		/// The parse label for the token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public System.Nullable<DependencyEdgeLabel> Label { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DependencyEdgeLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ABBREV")]
		ABBREV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACOMP")]
		ACOMP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADVCL")]
		ADVCL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADVMOD")]
		ADVMOD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMOD")]
		AMOD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPOS")]
		APPOS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTR")]
		ATTR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUX")]
		AUX = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUXPASS")]
		AUXPASS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CC")]
		CC = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CCOMP")]
		CCOMP = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONJ")]
		CONJ = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CSUBJ")]
		CSUBJ = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CSUBJPASS")]
		CSUBJPASS = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEP")]
		DEP = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DET")]
		DET = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCOURSE")]
		DISCOURSE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOBJ")]
		DOBJ = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPL")]
		EXPL = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GOESWITH")]
		GOESWITH = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IOBJ")]
		IOBJ = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MARK")]
		MARK = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MWE")]
		MWE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MWV")]
		MWV = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEG")]
		NEG = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NN")]
		NN = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NPADVMOD")]
		NPADVMOD = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NSUBJ")]
		NSUBJ = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NSUBJPASS")]
		NSUBJPASS = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NUM")]
		NUM = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NUMBER")]
		NUMBER = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="P")]
		P = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PARATAXIS")]
		PARATAXIS = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PARTMOD")]
		PARTMOD = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PCOMP")]
		PCOMP = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POBJ")]
		POBJ = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POSS")]
		POSS = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POSTNEG")]
		POSTNEG = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRECOMP")]
		PRECOMP = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRECONJ")]
		PRECONJ = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREDET")]
		PREDET = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREF")]
		PREF = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREP")]
		PREP = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRONL")]
		PRONL = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRT")]
		PRT = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PS")]
		PS = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QUANTMOD")]
		QUANTMOD = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RCMOD")]
		RCMOD = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RCMODREL")]
		RCMODREL = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RDROP")]
		RDROP = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REF")]
		REF = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REMNANT")]
		REMNANT = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REPARANDUM")]
		REPARANDUM = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ROOT")]
		ROOT = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SNUM")]
		SNUM = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUFF")]
		SUFF = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TMOD")]
		TMOD = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOPIC")]
		TOPIC = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VMOD")]
		VMOD = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOCATIVE")]
		VOCATIVE = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XCOMP")]
		XCOMP = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUFFIX")]
		SUFFIX = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TITLE")]
		TITLE = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADVPHMOD")]
		ADVPHMOD = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUXCAUS")]
		AUXCAUS = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUXVV")]
		AUXVV = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DTMOD")]
		DTMOD = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FOREIGN")]
		FOREIGN = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KW")]
		KW = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LIST")]
		LIST = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOMC")]
		NOMC = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOMCSUBJ")]
		NOMCSUBJ = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOMCSUBJPASS")]
		NOMCSUBJPASS = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NUMC")]
		NUMC = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COP")]
		COP = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISLOCATED")]
		DISLOCATED = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASP")]
		ASP = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GMOD")]
		GMOD = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GOBJ")]
		GOBJ = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INFMOD")]
		INFMOD = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MES")]
		MES = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NCOMP")]
		NCOMP = 82,
	}
	
	/// <summary>
	/// Represents part of speech information for a token. Parts of speech are as defined in http://www.lrec-conf.org/proceedings/lrec2012/pdf/274_Paper.pdf
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartOfSpeech
	{
		
		/// <summary>
		/// The grammatical aspect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aspect")]
		public System.Nullable<PartOfSpeechAspect> Aspect { get; set; }
		
		/// <summary>
		/// The grammatical case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="case")]
		public System.Nullable<PartOfSpeechCase> Case { get; set; }
		
		/// <summary>
		/// The grammatical form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form")]
		public System.Nullable<PartOfSpeechForm> Form { get; set; }
		
		/// <summary>
		/// The grammatical gender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public System.Nullable<PartOfSpeechGender> Gender { get; set; }
		
		/// <summary>
		/// The grammatical mood.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mood")]
		public System.Nullable<PartOfSpeechMood> Mood { get; set; }
		
		/// <summary>
		/// The grammatical number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<PartOfSpeechNumber> Number { get; set; }
		
		/// <summary>
		/// The grammatical person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="person")]
		public System.Nullable<PartOfSpeechPerson> Person { get; set; }
		
		/// <summary>
		/// The grammatical properness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proper")]
		public System.Nullable<PartOfSpeechProper> Proper { get; set; }
		
		/// <summary>
		/// The grammatical reciprocity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reciprocity")]
		public System.Nullable<PartOfSpeechReciprocity> Reciprocity { get; set; }
		
		/// <summary>
		/// The part of speech tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public System.Nullable<PartOfSpeechTag> Tag { get; set; }
		
		/// <summary>
		/// The grammatical tense.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tense")]
		public System.Nullable<PartOfSpeechTense> Tense { get; set; }
		
		/// <summary>
		/// The grammatical voice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voice")]
		public System.Nullable<PartOfSpeechVoice> Voice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartOfSpeechAspect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASPECT_UNKNOWN")]
		ASPECT_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERFECTIVE")]
		PERFECTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERFECTIVE")]
		IMPERFECTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROGRESSIVE")]
		PROGRESSIVE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartOfSpeechCase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CASE_UNKNOWN")]
		CASE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCUSATIVE")]
		ACCUSATIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADVERBIAL")]
		ADVERBIAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLEMENTIVE")]
		COMPLEMENTIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATIVE")]
		DATIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENITIVE")]
		GENITIVE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTRUMENTAL")]
		INSTRUMENTAL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATIVE")]
		LOCATIVE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOMINATIVE")]
		NOMINATIVE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OBLIQUE")]
		OBLIQUE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PARTITIVE")]
		PARTITIVE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREPOSITIONAL")]
		PREPOSITIONAL = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REFLEXIVE_CASE")]
		REFLEXIVE_CASE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RELATIVE_CASE")]
		RELATIVE_CASE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOCATIVE")]
		VOCATIVE = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartOfSpeechForm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FORM_UNKNOWN")]
		FORM_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADNOMIAL")]
		ADNOMIAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUXILIARY")]
		AUXILIARY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLEMENTIZER")]
		COMPLEMENTIZER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FINAL_ENDING")]
		FINAL_ENDING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GERUND")]
		GERUND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REALIS")]
		REALIS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IRREALIS")]
		IRREALIS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHORT")]
		SHORT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LONG")]
		LONG = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORDER")]
		ORDER = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPECIFIC")]
		SPECIFIC = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartOfSpeechGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENDER_UNKNOWN")]
		GENDER_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FEMININE")]
		FEMININE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASCULINE")]
		MASCULINE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEUTER")]
		NEUTER = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartOfSpeechMood
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOOD_UNKNOWN")]
		MOOD_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONDITIONAL_MOOD")]
		CONDITIONAL_MOOD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERATIVE")]
		IMPERATIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INDICATIVE")]
		INDICATIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERROGATIVE")]
		INTERROGATIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JUSSIVE")]
		JUSSIVE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBJUNCTIVE")]
		SUBJUNCTIVE = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartOfSpeechNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NUMBER_UNKNOWN")]
		NUMBER_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SINGULAR")]
		SINGULAR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLURAL")]
		PLURAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DUAL")]
		DUAL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartOfSpeechPerson
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERSON_UNKNOWN")]
		PERSON_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIRST")]
		FIRST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SECOND")]
		SECOND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THIRD")]
		THIRD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REFLEXIVE_PERSON")]
		REFLEXIVE_PERSON = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartOfSpeechProper
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROPER_UNKNOWN")]
		PROPER_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROPER")]
		PROPER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_PROPER")]
		NOT_PROPER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartOfSpeechReciprocity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECIPROCITY_UNKNOWN")]
		RECIPROCITY_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECIPROCAL")]
		RECIPROCAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NON_RECIPROCAL")]
		NON_RECIPROCAL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartOfSpeechTag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADJ")]
		ADJ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADP")]
		ADP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADV")]
		ADV = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONJ")]
		CONJ = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DET")]
		DET = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOUN")]
		NOUN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NUM")]
		NUM = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRON")]
		PRON = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRT")]
		PRT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUNCT")]
		PUNCT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VERB")]
		VERB = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="X")]
		X = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFFIX")]
		AFFIX = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartOfSpeechTense
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TENSE_UNKNOWN")]
		TENSE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONDITIONAL_TENSE")]
		CONDITIONAL_TENSE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FUTURE")]
		FUTURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAST")]
		PAST = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRESENT")]
		PRESENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPERFECT")]
		IMPERFECT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLUPERFECT")]
		PLUPERFECT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartOfSpeechVoice
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_UNKNOWN")]
		VOICE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAUSATIVE")]
		CAUSATIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSIVE")]
		PASSIVE = 3,
	}
	
	/// <summary>
	/// The request message for the text annotation API, which can perform multiple analysis types (sentiment, entities, and syntax) in one call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnnotateTextRequest
	{
		
		/// <summary>
		/// Represents the input to API methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
		
		/// <summary>
		/// The encoding type used by the API to calculate offsets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodingType")]
		public AnalyzeEntitiesRequestEncodingType EncodingType { get; set; }
		
		/// <summary>
		/// All available features for sentiment, syntax, and semantic analysis. Setting each one to true will enable that specific analysis for the input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public Features Features { get; set; }
	}
	
	/// <summary>
	/// All available features for sentiment, syntax, and semantic analysis. Setting each one to true will enable that specific analysis for the input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Features
	{
		
		/// <summary>
		/// Model options available for classification requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classificationModelOptions")]
		public ClassificationModelOptions ClassificationModelOptions { get; set; }
		
		/// <summary>
		/// Classify the full document into categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classifyText")]
		public System.Nullable<System.Boolean> ClassifyText { get; set; }
		
		/// <summary>
		/// Extract document-level sentiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extractDocumentSentiment")]
		public System.Nullable<System.Boolean> ExtractDocumentSentiment { get; set; }
		
		/// <summary>
		/// Extract entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extractEntities")]
		public System.Nullable<System.Boolean> ExtractEntities { get; set; }
		
		/// <summary>
		/// Extract entities and their associated sentiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extractEntitySentiment")]
		public System.Nullable<System.Boolean> ExtractEntitySentiment { get; set; }
		
		/// <summary>
		/// Extract syntax information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extractSyntax")]
		public System.Nullable<System.Boolean> ExtractSyntax { get; set; }
		
		/// <summary>
		/// Moderate the document for harmful and sensitive categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moderateText")]
		public System.Nullable<System.Boolean> ModerateText { get; set; }
	}
	
	/// <summary>
	/// Model options available for classification requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClassificationModelOptions
	{
		
		/// <summary>
		/// Options for the V1 model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="v1Model")]
		public V1Model V1Model { get; set; }
		
		/// <summary>
		/// Options for the V2 model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="v2Model")]
		public V2Model V2Model { get; set; }
	}
	
	/// <summary>
	/// Options for the V1 model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Model
	{
	}
	
	/// <summary>
	/// Options for the V2 model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V2Model
	{
		
		/// <summary>
		/// The content categories used for classification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCategoriesVersion")]
		public System.Nullable<V2ModelContentCategoriesVersion> ContentCategoriesVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V2ModelContentCategoriesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTENT_CATEGORIES_VERSION_UNSPECIFIED")]
		CONTENT_CATEGORIES_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="V1")]
		V1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="V2")]
		V2 = 2,
	}
	
	/// <summary>
	/// The text annotations response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnnotateTextResponse
	{
		
		/// <summary>
		/// Categories identified in the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public ClassificationCategory[] Categories { get; set; }
		
		/// <summary>
		/// Represents the feeling associated with the entire text or entities in the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentSentiment")]
		public Sentiment DocumentSentiment { get; set; }
		
		/// <summary>
		/// Entities, along with their semantic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public Entity[] Entities { get; set; }
		
		/// <summary>
		/// The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Harmful and sensitive categories identified in the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moderationCategories")]
		public ClassificationCategory[] ModerationCategories { get; set; }
		
		/// <summary>
		/// Sentences in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentences")]
		public Sentence[] Sentences { get; set; }
		
		/// <summary>
		/// Tokens, along with their syntactic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokens")]
		public Token[] Tokens { get; set; }
	}
	
	/// <summary>
	/// Represents a category returned from the text classifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClassificationCategory
	{
		
		/// <summary>
		/// The classifier's confidence of the category. Number represents how certain the classifier is that this category represents the given text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Single> Confidence { get; set; }
		
		/// <summary>
		/// The name of the category representing the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The document classification request message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClassifyTextRequest
	{
		
		/// <summary>
		/// Model options available for classification requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classificationModelOptions")]
		public ClassificationModelOptions ClassificationModelOptions { get; set; }
		
		/// <summary>
		/// Represents the input to API methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
	}
	
	/// <summary>
	/// The document classification response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClassifyTextResponse
	{
		
		/// <summary>
		/// Categories representing the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public ClassificationCategory[] Categories { get; set; }
	}
	
	/// <summary>
	/// The document moderation request message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModerateTextRequest
	{
		
		/// <summary>
		/// Represents the input to API methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
	}
	
	/// <summary>
	/// The document moderation response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModerateTextResponse
	{
		
		/// <summary>
		/// Harmful and sensitive categories representing the input document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moderationCategories")]
		public ClassificationCategory[] ModerationCategories { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Finds named entities (currently proper names and common nouns) in the text along with entity types, salience, mentions for each entity, and other properties.
		/// Language_documents_analyzeEntities v1/documents:analyzeEntities
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AnalyzeEntitiesResponse> Language_documents_analyzeEntitiesAsync(AnalyzeEntitiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/documents:analyzeEntities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalyzeEntitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Finds entities, similar to AnalyzeEntities in the text and analyzes sentiment associated with each entity and its mentions.
		/// Language_documents_analyzeEntitySentiment v1/documents:analyzeEntitySentiment
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AnalyzeEntitySentimentResponse> Language_documents_analyzeEntitySentimentAsync(AnalyzeEntitySentimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/documents:analyzeEntitySentiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalyzeEntitySentimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Analyzes the sentiment of the provided text.
		/// Language_documents_analyzeSentiment v1/documents:analyzeSentiment
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AnalyzeSentimentResponse> Language_documents_analyzeSentimentAsync(AnalyzeSentimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/documents:analyzeSentiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalyzeSentimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Analyzes the syntax of the text and provides sentence boundaries and tokenization along with part of speech tags, dependency trees, and other properties.
		/// Language_documents_analyzeSyntax v1/documents:analyzeSyntax
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AnalyzeSyntaxResponse> Language_documents_analyzeSyntaxAsync(AnalyzeSyntaxRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/documents:analyzeSyntax";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalyzeSyntaxResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A convenience method that provides all the features that analyzeSentiment, analyzeEntities, and analyzeSyntax provide in one call.
		/// Language_documents_annotateText v1/documents:annotateText
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AnnotateTextResponse> Language_documents_annotateTextAsync(AnnotateTextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/documents:annotateText";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnnotateTextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Classifies a document into categories.
		/// Language_documents_classifyText v1/documents:classifyText
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ClassifyTextResponse> Language_documents_classifyTextAsync(ClassifyTextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/documents:classifyText";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClassifyTextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Moderates a document for harmful and sensitive categories.
		/// Language_documents_moderateText v1/documents:moderateText
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ModerateTextResponse> Language_documents_moderateTextAsync(ModerateTextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/documents:moderateText";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ModerateTextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
