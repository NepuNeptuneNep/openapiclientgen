//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents an account passed into the Account Manager on Glass.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		[System.Runtime.Serialization.DataMember(Name="authTokens")]
		public AuthToken[] AuthTokens { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public string[] Features { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userData")]
		public UserData[] UserData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="authToken")]
		public string AuthToken1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserData
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents media content, such as a photo, that can be attached to a timeline item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attachment
	{
		
		/// <summary>
		/// The MIME type of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The URL for the content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentUrl")]
		public string ContentUrl { get; set; }
		
		/// <summary>
		/// The ID of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates that the contentUrl is not available because the attachment content is still being processed. If the caller wishes to retrieve the content, it should try again later.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isProcessingContent")]
		public System.Nullable<System.Boolean> IsProcessingContent { get; set; }
	}
	
	/// <summary>
	/// A list of Attachments. This is the response from the server to GET requests on the attachments collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachmentsListResponse
	{
		
		/// <summary>
		/// The list of attachments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Attachment[] Items { get; set; }
		
		/// <summary>
		/// The type of resource. This is always mirror#attachmentsList.
		/// </summary>
		[System.ComponentModel.DefaultValue("mirror#attachmentsList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "mirror#attachmentsList";
	}
	
	/// <summary>
	/// A single menu command that is part of a Contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Command
	{
		
		/// <summary>
		/// The type of operation this command corresponds to. Allowed values are:  
		///- TAKE_A_NOTE - Shares a timeline item with the transcription of user speech from the "Take a note" voice menu command.  
		///- POST_AN_UPDATE - Shares a timeline item with the transcription of user speech from the "Post an update" voice menu command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A person or group that can be used as a creator or a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Contact
	{
		
		/// <summary>
		/// A list of voice menu commands that a contact can handle. Glass shows up to three contacts for each voice menu command. If there are more than that, the three contacts with the highest priority are shown for that particular command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptCommands")]
		public Command[] AcceptCommands { get; set; }
		
		/// <summary>
		/// A list of MIME types that a contact supports. The contact will be shown to the user if any of its acceptTypes matches any of the types of the attachments on the item. If no acceptTypes are given, the contact will be shown for all items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptTypes")]
		public string[] AcceptTypes { get; set; }
		
		/// <summary>
		/// The name to display for this contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// An ID for this contact. This is generated by the application and is treated as an opaque token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Set of image URLs to display for a contact. Most contacts will have a single image, but a "group" contact may include up to 8 image URLs and they will be resized and cropped into a mosaic on the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrls")]
		public string[] ImageUrls { get; set; }
		
		/// <summary>
		/// The type of resource. This is always mirror#contact.
		/// </summary>
		[System.ComponentModel.DefaultValue("mirror#contact")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "mirror#contact";
		
		/// <summary>
		/// Primary phone number for the contact. This can be a fully-qualified number, with country calling code and area code, or a local number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Priority for the contact to determine ordering in a list of contacts. Contacts with higher priorities will be shown before ones with lower priorities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.UInt32> Priority { get; set; }
		
		/// <summary>
		/// A list of sharing features that a contact can handle. Allowed values are:  
		///- ADD_CAPTION
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharingFeatures")]
		public string[] SharingFeatures { get; set; }
		
		/// <summary>
		/// The ID of the application that created this contact. This is populated by the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Name of this contact as it should be pronounced. If this contact's name must be spoken as part of a voice disambiguation menu, this name is used as the expected pronunciation. This is useful for contact names with unpronounceable characters or whose display spelling is otherwise not phonetic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speakableName")]
		public string SpeakableName { get; set; }
		
		/// <summary>
		/// The type for this contact. This is used for sorting in UIs. Allowed values are:  
		///- INDIVIDUAL - Represents a single person. This is the default. 
		///- GROUP - Represents more than a single person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A list of Contacts representing contacts. This is the response from the server to GET requests on the contacts collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactsListResponse
	{
		
		/// <summary>
		/// Contact list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Contact[] Items { get; set; }
		
		/// <summary>
		/// The type of resource. This is always mirror#contacts.
		/// </summary>
		[System.ComponentModel.DefaultValue("mirror#contacts")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "mirror#contacts";
	}
	
	/// <summary>
	/// A geographic location that can be associated with a timeline item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// The accuracy of the location fix in meters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accuracy")]
		public System.Nullable<System.Double> Accuracy { get; set; }
		
		/// <summary>
		/// The full address of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// The name to be displayed. This may be a business name or a user-defined place, such as "Home".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The ID of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of resource. This is always mirror#location.
		/// </summary>
		[System.ComponentModel.DefaultValue("mirror#location")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "mirror#location";
		
		/// <summary>
		/// The latitude, in degrees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The longitude, in degrees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// The time at which this location was captured, formatted according to RFC 3339.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	/// <summary>
	/// A list of Locations. This is the response from the server to GET requests on the locations collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationsListResponse
	{
		
		/// <summary>
		/// The list of locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Location[] Items { get; set; }
		
		/// <summary>
		/// The type of resource. This is always mirror#locationsList.
		/// </summary>
		[System.ComponentModel.DefaultValue("mirror#locationsList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "mirror#locationsList";
	}
	
	/// <summary>
	/// A custom menu item that can be presented to the user by a timeline item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MenuItem
	{
		
		/// <summary>
		/// Controls the behavior when the user picks the menu option. Allowed values are:  
		///- CUSTOM - Custom action set by the service. When the user selects this menuItem, the API triggers a notification to your callbackUrl with the userActions.type set to CUSTOM and the userActions.payload set to the ID of this menu item. This is the default value. 
		///- Built-in actions:  
		///- REPLY - Initiate a reply to the timeline item using the voice recording UI. The creator attribute must be set in the timeline item for this menu to be available. 
		///- REPLY_ALL - Same behavior as REPLY. The original timeline item's recipients will be added to the reply item. 
		///- DELETE - Delete the timeline item. 
		///- SHARE - Share the timeline item with the available contacts. 
		///- READ_ALOUD - Read the timeline item's speakableText aloud; if this field is not set, read the text field; if none of those fields are set, this menu item is ignored. 
		///- GET_MEDIA_INPUT - Allow users to provide media payloads to Glassware from a menu item (currently, only transcribed text from voice input is supported). Subscribe to notifications when users invoke this menu item to receive the timeline item ID. Retrieve the media from the timeline item in the payload property. 
		///- VOICE_CALL - Initiate a phone call using the timeline item's creator.phoneNumber attribute as recipient. 
		///- NAVIGATE - Navigate to the timeline item's location. 
		///- TOGGLE_PINNED - Toggle the isPinned state of the timeline item. 
		///- OPEN_URI - Open the payload of the menu item in the browser. 
		///- PLAY_VIDEO - Open the payload of the menu item in the Glass video player. 
		///- SEND_MESSAGE - Initiate sending a message to the timeline item's creator:  
		///- If the creator.phoneNumber is set and Glass is connected to an Android phone, the message is an SMS. 
		///- Otherwise, if the creator.email is set, the message is an email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// The ContextualMenus.Command associated with this MenuItem (e.g. READ_ALOUD). The voice label for this command will be displayed in the voice menu and the touch label will be displayed in the touch menu. Note that the default menu value's display name will be overriden if you specify this property. Values that do not correspond to a ContextualMenus.Command name will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contextual_command")]
		public string Contextual_command { get; set; }
		
		/// <summary>
		/// The ID for this menu item. This is generated by the application and is treated as an opaque token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A generic payload whose meaning changes depending on this MenuItem's action.  
		///- When the action is OPEN_URI, the payload is the URL of the website to view. 
		///- When the action is PLAY_VIDEO, the payload is the streaming URL of the video 
		///- When the action is GET_MEDIA_INPUT, the payload is the text transcription of a user's speech input
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// If set to true on a CUSTOM menu item, that item will be removed from the menu after it is selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeWhenSelected")]
		public System.Nullable<System.Boolean> RemoveWhenSelected { get; set; }
		
		/// <summary>
		/// For CUSTOM items, a list of values controlling the appearance of the menu item in each of its states. A value for the DEFAULT state must be provided. If the PENDING or CONFIRMED states are missing, they will not be shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public MenuValue[] Values { get; set; }
	}
	
	/// <summary>
	/// A single value that is part of a MenuItem.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MenuValue
	{
		
		/// <summary>
		/// The name to display for the menu item. If you specify this property for a built-in menu item, the default contextual voice command for that menu item is not shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// URL of an icon to display with the menu item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUrl")]
		public string IconUrl { get; set; }
		
		/// <summary>
		/// The state that this value applies to. Allowed values are:  
		///- DEFAULT - Default value shown when displayed in the menuItems list. 
		///- PENDING - Value shown when the menuItem has been selected by the user but can still be cancelled. 
		///- CONFIRMED - Value shown when the menuItem has been selected by the user and can no longer be cancelled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	/// <summary>
	/// A notification delivered by the API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Notification
	{
		
		/// <summary>
		/// The collection that generated the notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public string Collection { get; set; }
		
		/// <summary>
		/// The ID of the item that generated the notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// The type of operation that generated the notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// A list of actions taken by the user that triggered the notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userActions")]
		public UserAction[] UserActions { get; set; }
		
		/// <summary>
		/// The user token provided by the service when it subscribed for notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userToken")]
		public string UserToken { get; set; }
		
		/// <summary>
		/// The secret verify token provided by the service when it subscribed for notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifyToken")]
		public string VerifyToken { get; set; }
	}
	
	/// <summary>
	/// Represents an action taken by the user that triggered a notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserAction
	{
		
		/// <summary>
		/// An optional payload for the action.
		///
		///For actions of type CUSTOM, this is the ID of the custom menu item that was selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// The type of action. The value of this can be:  
		///- SHARE - the user shared an item. 
		///- REPLY - the user replied to an item. 
		///- REPLY_ALL - the user replied to all recipients of an item. 
		///- CUSTOM - the user selected a custom menu item on the timeline item. 
		///- DELETE - the user deleted the item. 
		///- PIN - the user pinned the item. 
		///- UNPIN - the user unpinned the item. 
		///- LAUNCH - the user initiated a voice command.  In the future, additional types may be added. UserActions with unrecognized types should be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Controls how notifications for a timeline item are presented to the user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationConfig
	{
		
		/// <summary>
		/// The time at which the notification should be delivered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryTime")]
		public System.Nullable<System.DateTimeOffset> DeliveryTime { get; set; }
		
		/// <summary>
		/// Describes how important the notification is. Allowed values are:  
		///- DEFAULT - Notifications of default importance. A chime will be played to alert users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public string Level { get; set; }
	}
	
	/// <summary>
	/// A setting for Glass.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Setting
	{
		
		/// <summary>
		/// The setting's ID. The following IDs are valid:  
		///- locale - The key to the user’s language/locale (BCP 47 identifier) that Glassware should use to render localized content.  
		///- timezone - The key to the user’s current time zone region as defined in the tz database. Example: America/Los_Angeles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of resource. This is always mirror#setting.
		/// </summary>
		[System.ComponentModel.DefaultValue("mirror#setting")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "mirror#setting";
		
		/// <summary>
		/// The setting value, as a string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A subscription to events on a collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subscription
	{
		
		/// <summary>
		/// The URL where notifications should be delivered (must start with https://).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callbackUrl")]
		public string CallbackUrl { get; set; }
		
		/// <summary>
		/// The collection to subscribe to. Allowed values are:  
		///- timeline - Changes in the timeline including insertion, deletion, and updates. 
		///- locations - Location updates. 
		///- settings - Settings updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public string Collection { get; set; }
		
		/// <summary>
		/// The ID of the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of resource. This is always mirror#subscription.
		/// </summary>
		[System.ComponentModel.DefaultValue("mirror#subscription")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "mirror#subscription";
		
		/// <summary>
		/// A notification delivered by the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notification")]
		public Notification Notification { get; set; }
		
		/// <summary>
		/// A list of operations that should be subscribed to. An empty list indicates that all operations on the collection should be subscribed to. Allowed values are:  
		///- UPDATE - The item has been updated. 
		///- INSERT - A new item has been inserted. 
		///- DELETE - The item has been deleted. 
		///- MENU_ACTION - A custom menu item has been triggered by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string[] Operation { get; set; }
		
		/// <summary>
		/// The time at which this subscription was last modified, formatted according to RFC 3339.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// An opaque token sent to the subscriber in notifications so that it can determine the ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userToken")]
		public string UserToken { get; set; }
		
		/// <summary>
		/// A secret token sent to the subscriber in notifications so that it can verify that the notification was generated by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifyToken")]
		public string VerifyToken { get; set; }
	}
	
	/// <summary>
	/// A list of Subscriptions. This is the response from the server to GET requests on the subscription collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionsListResponse
	{
		
		/// <summary>
		/// The list of subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Subscription[] Items { get; set; }
		
		/// <summary>
		/// The type of resource. This is always mirror#subscriptionsList.
		/// </summary>
		[System.ComponentModel.DefaultValue("mirror#subscriptionsList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "mirror#subscriptionsList";
	}
	
	/// <summary>
	/// Each item in the user's timeline is represented as a TimelineItem JSON structure, described below.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimelineItem
	{
		
		/// <summary>
		/// A list of media attachments associated with this item. As a convenience, you can refer to attachments in your HTML payloads with the attachment or cid scheme. For example:  
		///- attachment: <img src="attachment:attachment_index"> where attachment_index is the 0-based index of this array. 
		///- cid: <img src="cid:attachment_id"> where attachment_id is the ID of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// The bundle ID for this item. Services can specify a bundleId to group many items together. They appear under a single top-level item on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		/// <summary>
		/// A canonical URL pointing to the canonical/high quality version of the data represented by the timeline item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canonicalUrl")]
		public string CanonicalUrl { get; set; }
		
		/// <summary>
		/// The time at which this item was created, formatted according to RFC 3339.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// A person or group that can be used as a creator or a contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public Contact Creator { get; set; }
		
		/// <summary>
		/// The time that should be displayed when this item is viewed in the timeline, formatted according to RFC 3339. This user's timeline is sorted chronologically on display time, so this will also determine where the item is displayed in the timeline. If not set by the service, the display time defaults to the updated time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayTime")]
		public System.Nullable<System.DateTimeOffset> DisplayTime { get; set; }
		
		/// <summary>
		/// ETag for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// HTML content for this item. If both text and html are provided for an item, the html will be rendered in the timeline.
		///Allowed HTML elements - You can use these elements in your timeline cards.
		/// 
		///- Headers: h1, h2, h3, h4, h5, h6 
		///- Images: img 
		///- Lists: li, ol, ul 
		///- HTML5 semantics: article, aside, details, figure, figcaption, footer, header, nav, section, summary, time 
		///- Structural: blockquote, br, div, hr, p, span 
		///- Style: b, big, center, em, i, u, s, small, strike, strong, style, sub, sup 
		///- Tables: table, tbody, td, tfoot, th, thead, tr  
		///Blocked HTML elements: These elements and their contents are removed from HTML payloads.
		/// 
		///- Document headers: head, title 
		///- Embeds: audio, embed, object, source, video 
		///- Frames: frame, frameset 
		///- Scripting: applet, script  
		///Other elements: Any elements that aren't listed are removed, but their contents are preserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html")]
		public string Html { get; set; }
		
		/// <summary>
		/// The ID of the timeline item. This is unique within a user's timeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If this item was generated as a reply to another item, this field will be set to the ID of the item being replied to. This can be used to attach a reply to the appropriate conversation or post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inReplyTo")]
		public string InReplyTo { get; set; }
		
		/// <summary>
		/// Whether this item is a bundle cover.
		///
		///If an item is marked as a bundle cover, it will be the entry point to the bundle of items that have the same bundleId as that item. It will be shown only on the main timeline — not within the opened bundle.
		///
		///On the main timeline, items that are shown are:  
		///- Items that have isBundleCover set to true  
		///- Items that do not have a bundleId  In a bundle sub-timeline, items that are shown are:  
		///- Items that have the bundleId in question AND isBundleCover set to false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isBundleCover")]
		public System.Nullable<System.Boolean> IsBundleCover { get; set; }
		
		/// <summary>
		/// When true, indicates this item is deleted, and only the ID property is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// When true, indicates this item is pinned, which means it's grouped alongside "active" items like navigation and hangouts, on the opposite side of the home screen from historical (non-pinned) timeline items. You can allow the user to toggle the value of this property with the TOGGLE_PINNED built-in menu item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPinned")]
		public System.Nullable<System.Boolean> IsPinned { get; set; }
		
		/// <summary>
		/// The type of resource. This is always mirror#timelineItem.
		/// </summary>
		[System.ComponentModel.DefaultValue("mirror#timelineItem")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "mirror#timelineItem";
		
		/// <summary>
		/// A geographic location that can be associated with a timeline item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// A list of menu items that will be presented to the user when this item is selected in the timeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="menuItems")]
		public MenuItem[] MenuItems { get; set; }
		
		/// <summary>
		/// Controls how notifications for a timeline item are presented to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notification")]
		public NotificationConfig Notification { get; set; }
		
		/// <summary>
		/// For pinned items, this determines the order in which the item is displayed in the timeline, with a higher score appearing closer to the clock. Note: setting this field is currently not supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pinScore")]
		public System.Nullable<System.Int32> PinScore { get; set; }
		
		/// <summary>
		/// A list of users or groups that this item has been shared with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public Contact[] Recipients { get; set; }
		
		/// <summary>
		/// A URL that can be used to retrieve this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Opaque string you can use to map a timeline item to data in your own service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceItemId")]
		public string SourceItemId { get; set; }
		
		/// <summary>
		/// The speakable version of the content of this item. Along with the READ_ALOUD menu item, use this field to provide text that would be clearer when read aloud, or to provide extended information to what is displayed visually on Glass.
		///
		///Glassware should also specify the speakableType field, which will be spoken before this text in cases where the additional context is useful, for example when the user requests that the item be read aloud following a notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speakableText")]
		public string SpeakableText { get; set; }
		
		/// <summary>
		/// A speakable description of the type of this item. This will be announced to the user prior to reading the content of the item in cases where the additional context is useful, for example when the user requests that the item be read aloud following a notification.
		///
		///This should be a short, simple noun phrase such as "Email", "Text message", or "Daily Planet News Update".
		///
		///Glassware are encouraged to populate this field for every timeline item, even if the item does not contain speakableText or text so that the user can learn the type of the item without looking at the screen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speakableType")]
		public string SpeakableType { get; set; }
		
		/// <summary>
		/// Text content of this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The title of this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The time at which this item was last modified, formatted according to RFC 3339.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	/// <summary>
	/// A list of timeline items. This is the response from the server to GET requests on the timeline collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimelineListResponse
	{
		
		/// <summary>
		/// Items in the timeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public TimelineItem[] Items { get; set; }
		
		/// <summary>
		/// The type of resource. This is always mirror#timeline.
		/// </summary>
		[System.ComponentModel.DefaultValue("mirror#timeline")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "mirror#timeline";
		
		/// <summary>
		/// The next page token. Provide this as the pageToken parameter in the request to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Inserts a new account for a user
		/// Mirror_accounts_insert accounts/{userToken}/{accountType}/{accountName}
		/// </summary>
		/// <param name="userToken">The ID for the user.</param>
		/// <param name="accountType">Account type to be passed to Android Account Manager.</param>
		/// <param name="accountName">The name of the account to be passed to the Android Account Manager.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_accounts_insertAsync(string userToken, string accountType, string accountName, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (userToken==null? "" : System.Uri.EscapeDataString(userToken))+"/"+ (accountType==null? "" : System.Uri.EscapeDataString(accountType))+"/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of contacts for the authenticated user.
		/// Mirror_contacts_list contacts
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Mirror_contacts_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new contact.
		/// Mirror_contacts_insert contacts
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Mirror_contacts_insertAsync(Contact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a contact.
		/// Mirror_contacts_delete contacts/{id}
		/// </summary>
		/// <param name="id">The ID of the contact.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_contacts_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a single contact by ID.
		/// Mirror_contacts_get contacts/{id}
		/// </summary>
		/// <param name="id">The ID of the contact.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_contacts_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a contact in place. This method supports patch semantics.
		/// Mirror_contacts_patch contacts/{id}
		/// </summary>
		/// <param name="id">The ID of the contact.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_contacts_patchAsync(string id, Contact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a contact in place.
		/// Mirror_contacts_update contacts/{id}
		/// </summary>
		/// <param name="id">The ID of the contact.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_contacts_updateAsync(string id, Contact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of locations for the user.
		/// Mirror_locations_list locations
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Mirror_locations_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "locations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a single location by ID.
		/// Mirror_locations_get locations/{id}
		/// </summary>
		/// <param name="id">The ID of the location or latest for the last known location.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_locations_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "locations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a single setting by ID.
		/// Mirror_settings_get settings/{id}
		/// </summary>
		/// <param name="id">The ID of the setting. The following IDs are valid: 
		///- locale - The key to the user’s language/locale (BCP 47 identifier) that Glassware should use to render localized content. 
		///- timezone - The key to the user’s current time zone region as defined in the tz database. Example: America/Los_Angeles.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_settings_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of subscriptions for the authenticated user and service.
		/// Mirror_subscriptions_list subscriptions
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Mirror_subscriptions_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new subscription.
		/// Mirror_subscriptions_insert subscriptions
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Mirror_subscriptions_insertAsync(Subscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a subscription.
		/// Mirror_subscriptions_delete subscriptions/{id}
		/// </summary>
		/// <param name="id">The ID of the subscription.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_subscriptions_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing subscription in place.
		/// Mirror_subscriptions_update subscriptions/{id}
		/// </summary>
		/// <param name="id">The ID of the subscription.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_subscriptions_updateAsync(string id, Subscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of timeline items for the authenticated user.
		/// Mirror_timeline_list timeline
		/// </summary>
		/// <param name="bundleId">If provided, only items with the given bundleId will be returned.</param>
		/// <param name="includeDeleted">If true, tombstone records for deleted items will be returned.</param>
		/// <param name="maxResults">The maximum number of items to include in the response, used for paging.</param>
		/// <param name="orderBy">Controls the order in which timeline items are returned.</param>
		/// <param name="pageToken">Token for the page of results to return.</param>
		/// <param name="pinnedOnly">If true, only pinned items will be returned.</param>
		/// <param name="sourceItemId">If provided, only items with the given sourceItemId will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_timeline_listAsync(string bundleId, bool includeDeleted, int maxResults, Mirror_timeline_listOrderBy orderBy, string pageToken, bool pinnedOnly, string sourceItemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "timeline?bundleId=" + (bundleId==null? "" : System.Uri.EscapeDataString(bundleId))+"&includeDeleted="+includeDeleted+"&maxResults="+maxResults+"&orderBy=" + orderBy+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&pinnedOnly="+pinnedOnly+"&sourceItemId=" + (sourceItemId==null? "" : System.Uri.EscapeDataString(sourceItemId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new item into the timeline.
		/// Mirror_timeline_insert timeline
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Mirror_timeline_insertAsync(TimelineItem requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "timeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a timeline item.
		/// Mirror_timeline_delete timeline/{id}
		/// </summary>
		/// <param name="id">The ID of the timeline item.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_timeline_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "timeline/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a single timeline item by ID.
		/// Mirror_timeline_get timeline/{id}
		/// </summary>
		/// <param name="id">The ID of the timeline item.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_timeline_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "timeline/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a timeline item in place. This method supports patch semantics.
		/// Mirror_timeline_patch timeline/{id}
		/// </summary>
		/// <param name="id">The ID of the timeline item.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_timeline_patchAsync(string id, TimelineItem requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "timeline/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of attachments for a timeline item.
		/// Mirror_timeline_attachments_list timeline/{itemId}/attachments
		/// </summary>
		/// <param name="itemId">The ID of the timeline item whose attachments should be listed.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_timeline_attachments_listAsync(string itemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "timeline/"+ (itemId==null? "" : System.Uri.EscapeDataString(itemId))+"/attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a new attachment to a timeline item.
		/// Mirror_timeline_attachments_insert timeline/{itemId}/attachments
		/// </summary>
		/// <param name="itemId">The ID of the timeline item the attachment belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_timeline_attachments_insertAsync(string itemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "timeline/"+ (itemId==null? "" : System.Uri.EscapeDataString(itemId))+"/attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an attachment from a timeline item.
		/// Mirror_timeline_attachments_delete timeline/{itemId}/attachments/{attachmentId}
		/// </summary>
		/// <param name="itemId">The ID of the timeline item the attachment belongs to.</param>
		/// <param name="attachmentId">The ID of the attachment.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_timeline_attachments_deleteAsync(string itemId, string attachmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "timeline/"+ (itemId==null? "" : System.Uri.EscapeDataString(itemId))+"/attachments/"+ (attachmentId==null? "" : System.Uri.EscapeDataString(attachmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an attachment on a timeline item by item ID and attachment ID.
		/// Mirror_timeline_attachments_get timeline/{itemId}/attachments/{attachmentId}
		/// </summary>
		/// <param name="itemId">The ID of the timeline item the attachment belongs to.</param>
		/// <param name="attachmentId">The ID of the attachment.</param>
		/// <returns>Successful response</returns>
		public async Task Mirror_timeline_attachments_getAsync(string itemId, string attachmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "timeline/"+ (itemId==null? "" : System.Uri.EscapeDataString(itemId))+"/attachments/"+ (attachmentId==null? "" : System.Uri.EscapeDataString(attachmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Mirror_timeline_listOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="displayTime")]
		displayTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="writeTime")]
		writeTime = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
