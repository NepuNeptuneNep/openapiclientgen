//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Address
	{
		
		/// <summary>
		/// Name of city.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Name of the contact person at the address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contact_name")]
		public string Contact_name { get; set; }
		
		/// <summary>
		/// country code according to ISO 3166-1 alpha-2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Address field that holds a sublocality, such as a county
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="county")]
		public string County { get; set; }
		
		/// <summary>
		/// Email address of the address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Fax number of the address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		/// <summary>
		/// Unique identifier for the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Latitude of the address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		/// <summary>
		/// Line 1 of the address e.g. number, street, suite, apt #, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Line 2 of the address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Line 3 of the address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line3")]
		public string Line3 { get; set; }
		
		/// <summary>
		/// Line 4 of the address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line4")]
		public string Line4 { get; set; }
		
		/// <summary>
		/// Longitude of the address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
		
		/// <summary>
		/// The name of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Additional notes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Phone number of the address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// Zip code or equivalent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="row_version")]
		public string Row_version { get; set; }
		
		/// <summary>
		/// Salutation of the contact person at the address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salutation")]
		public string Salutation { get; set; }
		
		/// <summary>
		/// Name of state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_number")]
		public string Street_number { get; set; }
		
		/// <summary>
		/// The address string. Some APIs don't provide structured address data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="string")]
		public string String { get; set; }
		
		/// <summary>
		/// The type of address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AddressType> Type { get; set; }
		
		/// <summary>
		/// Website of the address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="primary")]
		primary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="secondary")]
		secondary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="home")]
		home = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="office")]
		office = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="shipping")]
		shipping = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="billing")]
		billing = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadRequestResponse
	{
		
		/// <summary>
		/// Contains parameter or domain specific information related to the error and why it occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateItemResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnifiedId
	{
		
		/// <summary>
		/// The unique identifier of the resource
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLocationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMerchantResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModifierGroupResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModifierResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOrderResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOrderTypeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePosPaymentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTenderResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	/// <summary>
	/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Currency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_CURRENCY")]
		UNKNOWN_CURRENCY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AED")]
		AED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFN")]
		AFN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMD")]
		AMD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANG")]
		ANG = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AOA")]
		AOA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ARS")]
		ARS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUD")]
		AUD = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWG")]
		AWG = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AZN")]
		AZN = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAM")]
		BAM = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BBD")]
		BBD = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BDT")]
		BDT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BGN")]
		BGN = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BHD")]
		BHD = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BIF")]
		BIF = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BMD")]
		BMD = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BND")]
		BND = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOB")]
		BOB = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOV")]
		BOV = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BRL")]
		BRL = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BSD")]
		BSD = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BTN")]
		BTN = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BWP")]
		BWP = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BYR")]
		BYR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BZD")]
		BZD = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAD")]
		CAD = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CDF")]
		CDF = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHE")]
		CHE = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHF")]
		CHF = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHW")]
		CHW = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLF")]
		CLF = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLP")]
		CLP = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CNY")]
		CNY = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COP")]
		COP = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COU")]
		COU = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CRC")]
		CRC = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUC")]
		CUC = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUP")]
		CUP = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CVE")]
		CVE = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CZK")]
		CZK = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DJF")]
		DJF = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DKK")]
		DKK = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOP")]
		DOP = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DZD")]
		DZD = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EGP")]
		EGP = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERN")]
		ERN = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ETB")]
		ETB = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EUR")]
		EUR = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FJD")]
		FJD = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FKP")]
		FKP = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GBP")]
		GBP = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GEL")]
		GEL = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GHS")]
		GHS = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GIP")]
		GIP = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GMD")]
		GMD = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GNF")]
		GNF = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GTQ")]
		GTQ = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GYD")]
		GYD = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HKD")]
		HKD = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HNL")]
		HNL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HRK")]
		HRK = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTG")]
		HTG = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HUF")]
		HUF = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IDR")]
		IDR = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ILS")]
		ILS = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INR")]
		INR = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IQD")]
		IQD = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IRR")]
		IRR = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ISK")]
		ISK = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JMD")]
		JMD = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JOD")]
		JOD = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JPY")]
		JPY = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KES")]
		KES = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KGS")]
		KGS = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KHR")]
		KHR = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KMF")]
		KMF = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KPW")]
		KPW = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KRW")]
		KRW = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KWD")]
		KWD = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KYD")]
		KYD = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KZT")]
		KZT = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAK")]
		LAK = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LBP")]
		LBP = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LKR")]
		LKR = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LRD")]
		LRD = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LSL")]
		LSL = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LTL")]
		LTL = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LVL")]
		LVL = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LYD")]
		LYD = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAD")]
		MAD = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MDL")]
		MDL = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MGA")]
		MGA = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MKD")]
		MKD = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MMK")]
		MMK = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MNT")]
		MNT = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOP")]
		MOP = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MRO")]
		MRO = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MUR")]
		MUR = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MVR")]
		MVR = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MWK")]
		MWK = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MXN")]
		MXN = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MXV")]
		MXV = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MYR")]
		MYR = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MZN")]
		MZN = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NAD")]
		NAD = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NGN")]
		NGN = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NIO")]
		NIO = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOK")]
		NOK = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NPR")]
		NPR = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NZD")]
		NZD = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OMR")]
		OMR = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAB")]
		PAB = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PEN")]
		PEN = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PGK")]
		PGK = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHP")]
		PHP = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PKR")]
		PKR = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLN")]
		PLN = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PYG")]
		PYG = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QAR")]
		QAR = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RON")]
		RON = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSD")]
		RSD = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUB")]
		RUB = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RWF")]
		RWF = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAR")]
		SAR = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SBD")]
		SBD = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCR")]
		SCR = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SDG")]
		SDG = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEK")]
		SEK = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SGD")]
		SGD = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHP")]
		SHP = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SLL")]
		SLL = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOS")]
		SOS = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SRD")]
		SRD = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSP")]
		SSP = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STD")]
		STD = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SVC")]
		SVC = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYP")]
		SYP = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SZL")]
		SZL = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THB")]
		THB = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TJS")]
		TJS = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TMT")]
		TMT = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TND")]
		TND = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOP")]
		TOP = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRC")]
		TRC = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRY")]
		TRY = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TTD")]
		TTD = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TWD")]
		TWD = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TZS")]
		TZS = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UAH")]
		UAH = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UGX")]
		UGX = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USD")]
		USD = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USN")]
		USN = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USS")]
		USS = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UYI")]
		UYI = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UYU")]
		UYU = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UZS")]
		UZS = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VEF")]
		VEF = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VND")]
		VND = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VUV")]
		VUV = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WST")]
		WST = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XAF")]
		XAF = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XAG")]
		XAG = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XAU")]
		XAU = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XBA")]
		XBA = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XBB")]
		XBB = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XBC")]
		XBC = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XBD")]
		XBD = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XCD")]
		XCD = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XDR")]
		XDR = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XOF")]
		XOF = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XPD")]
		XPD = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XPF")]
		XPF = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XPT")]
		XPT = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XTS")]
		XTS = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XXX")]
		XXX = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YER")]
		YER = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZAR")]
		ZAR = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZMK")]
		ZMK = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ZMW")]
		ZMW = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BTC")]
		BTC = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ETH")]
		ETH = 182,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomField
	{
		
		/// <summary>
		/// More information about the custom field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Unique identifier for the custom field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the custom field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// When custom mappings are configured on the resource, the result is included here.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomMappings
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteItemResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLocationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMerchantResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteModifierGroupResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteModifierResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOrderResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOrderTypeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePosPaymentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTenderResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Email
	{
		
		/// <summary>
		/// Email address
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Email1 { get; set; }
		
		/// <summary>
		/// Unique identifier for the email address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Email type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EmailType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EmailType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="primary")]
		primary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="secondary")]
		secondary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="work")]
		work = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="personal")]
		personal = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="billing")]
		billing = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetItemResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Item Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Item
	{
		
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absent_at_location_ids")]
		public string[] Absent_at_location_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="available")]
		public System.Nullable<System.Boolean> Available { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="available_for_pickup")]
		public System.Nullable<System.Boolean> Available_for_pickup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="available_online")]
		public System.Nullable<System.Boolean> Available_online { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public ItemCategories[] ItemCategories { get; set; }
		
		/// <summary>
		/// Product code, e.g. UPC or EAN
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public System.Nullable<System.Double> Cost { get; set; }
		
		/// <summary>
		/// The date and time when the object was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// The user who created the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		/// <summary>
		/// When custom mappings are configured on the resource, the result is included here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_mappings")]
		public CustomMappings Custom_mappings { get; set; }
		
		/// <summary>
		/// Flag to indicate if the object is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A value you specify that uniquely identifies this request among requests you have sent.
		/// Max length: 45
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_revenue")]
		public System.Nullable<System.Boolean> Is_revenue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifier_groups")]
		public ItemModifier_groups[] ItemModifier_groups { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of options pertaining to this item's attribute variation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ItemOptions[] ItemOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="present_at_all_locations")]
		public System.Nullable<System.Boolean> Present_at_all_locations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price_amount")]
		public System.Nullable<System.Double> Price_amount { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price_currency")]
		public Currency Price_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricing_type")]
		public System.Nullable<ItemPricing_type> Pricing_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_type")]
		public System.Nullable<ItemProduct_type> Product_type { get; set; }
		
		/// <summary>
		/// SKU of the item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// A list of Tax IDs for the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_ids")]
		public string[] Tax_ids { get; set; }
		
		/// <summary>
		/// The date and time when the object was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		/// <summary>
		/// The user who last updated the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_by")]
		public string Updated_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="use_default_tax_rates")]
		public System.Nullable<System.Boolean> Use_default_tax_rates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variations")]
		public ItemVariations[] ItemVariations { get; set; }
		
		/// <summary>
		/// The user who last updated the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	public class ItemCategories
	{
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_ids")]
		public string[] Image_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class ItemModifier_groups
	{
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class ItemOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute_id")]
		public string Attribute_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ItemPricing_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fixed")]
		_fixed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="variable")]
		variable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="per_unit")]
		per_unit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ItemProduct_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="regular")]
		regular = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 1,
	}
	
	public class ItemVariations
	{
		
		/// <summary>
		/// The date and time when the object was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_id")]
		public string Item_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="present_at_all_locations")]
		public System.Nullable<System.Boolean> Present_at_all_locations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price_amount")]
		public System.Nullable<System.Double> Price_amount { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price_currency")]
		public Currency Price_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricing_type")]
		public System.Nullable<ItemVariationsPricing_type> Pricing_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sequence")]
		public System.Nullable<System.Double> Sequence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stockable")]
		public System.Nullable<System.Boolean> Stockable { get; set; }
		
		/// <summary>
		/// The date and time when the object was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		/// <summary>
		/// The user who last updated the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ItemVariationsPricing_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fixed")]
		_fixed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="variable")]
		variable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetItemsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Item[] Data { get; set; }
		
		/// <summary>
		/// Links to navigate to previous or next pages through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// Response metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	/// <summary>
	/// Links to navigate to previous or next pages through the API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Links
	{
		
		/// <summary>
		/// Link to navigate to the current page through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current")]
		public string Current { get; set; }
		
		/// <summary>
		/// Link to navigate to the previous page through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Link to navigate to the previous page through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
	}
	
	/// <summary>
	/// Response metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Meta
	{
		
		/// <summary>
		/// Cursors to navigate to previous or next pages through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursors")]
		public MetaCursors Cursors { get; set; }
		
		/// <summary>
		/// Number of items returned in the data property of the response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items_on_page")]
		public System.Nullable<System.Int32> Items_on_page { get; set; }
	}
	
	public class MetaCursors
	{
		
		/// <summary>
		/// Cursor to navigate to the current page of results through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current")]
		public string Current { get; set; }
		
		/// <summary>
		/// Cursor to navigate to the next page of results through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Cursor to navigate to the previous page of results through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLocationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Location Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// The business name of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="business_name")]
		public string Business_name { get; set; }
		
		/// <summary>
		/// The date and time when the object was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// The user who created the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		/// <summary>
		/// When custom mappings are configured on the resource, the result is included here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_mappings")]
		public CustomMappings Custom_mappings { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchant_id")]
		public string Merchant_id { get; set; }
		
		/// <summary>
		/// The name of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Status of this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<LocationStatus> Status { get; set; }
		
		/// <summary>
		/// The date and time when the object was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		/// <summary>
		/// The user who last updated the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_by")]
		public string Updated_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LocationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inactive")]
		inactive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLocationsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Location[] Data { get; set; }
		
		/// <summary>
		/// Links to navigate to previous or next pages through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// Response metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMerchantResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Merchant Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Merchant
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// The date and time when the object was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// The user who created the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		/// <summary>
		/// When custom mappings are configured on the resource, the result is included here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_mappings")]
		public CustomMappings Custom_mappings { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// language code according to ISO 639-1. For the United States - EN
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The main location ID of the merchant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="main_location_id")]
		public string Main_location_id { get; set; }
		
		/// <summary>
		/// The name of the merchant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner_id")]
		public string Owner_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_charges")]
		public ServiceCharge[] Service_charges { get; set; }
		
		/// <summary>
		/// Status of this merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LocationStatus Status { get; set; }
		
		/// <summary>
		/// The date and time when the object was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		/// <summary>
		/// The user who last updated the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_by")]
		public string Updated_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceCharge
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Service charge name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Service charge percentage. Use this field to calculate the amount of the service charge. Pass a percentage and amount at the same time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// The type of the service charge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ServiceChargeType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceChargeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="auto_gratuity")]
		auto_gratuity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="custom")]
		custom = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMerchantsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Merchant[] Data { get; set; }
		
		/// <summary>
		/// Links to navigate to previous or next pages through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// Response metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetModifierGroupResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ModifierGroup Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifierGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="alternate_name")]
		public string Alternate_name { get; set; }
		
		/// <summary>
		/// The date and time when the object was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// The user who created the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		/// <summary>
		/// When custom mappings are configured on the resource, the result is included here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_mappings")]
		public CustomMappings Custom_mappings { get; set; }
		
		/// <summary>
		/// Flag to indicate if the object is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximum_allowed")]
		public System.Nullable<System.Int32> Maximum_allowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimum_required")]
		public System.Nullable<System.Int32> Minimum_required { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiers")]
		public ModifierGroupModifiers[] ModifierGroupModifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="present_at_all_locations")]
		public System.Nullable<System.Boolean> Present_at_all_locations { get; set; }
		
		/// <summary>
		/// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="row_version")]
		public string Row_version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="selection_type")]
		public System.Nullable<ModifierGroupSelection_type> Selection_type { get; set; }
		
		/// <summary>
		/// The date and time when the object was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		/// <summary>
		/// The user who last updated the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_by")]
		public string Updated_by { get; set; }
	}
	
	public class ModifierGroupModifiers
	{
		
		[System.Runtime.Serialization.DataMember(Name="alternate_name")]
		public string Alternate_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="available")]
		public System.Nullable<System.Boolean> Available { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price_amount")]
		public System.Nullable<System.Double> Price_amount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ModifierGroupSelection_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="single")]
		single = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="multiple")]
		multiple = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetModifierGroupsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ModifierGroup[] Data { get; set; }
		
		/// <summary>
		/// Links to navigate to previous or next pages through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// Response metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetModifierResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Modifier Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Modifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="alternate_name")]
		public string Alternate_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="available")]
		public System.Nullable<System.Boolean> Available { get; set; }
		
		/// <summary>
		/// The date and time when the object was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// The user who created the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		/// <summary>
		/// When custom mappings are configured on the resource, the result is included here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_mappings")]
		public CustomMappings Custom_mappings { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A value you specify that uniquely identifies this request among requests you have sent.
		/// Max length: 45
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modifier_group_id")]
		public string Modifier_group_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price_amount")]
		public System.Nullable<System.Double> Price_amount { get; set; }
		
		/// <summary>
		/// The date and time when the object was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		/// <summary>
		/// The user who last updated the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_by")]
		public string Updated_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetModifiersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Modifier[] Data { get; set; }
		
		/// <summary>
		/// Links to navigate to previous or next pages through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// Response metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrderResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Order Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Order
	{
		
		[System.Runtime.Serialization.DataMember(Name="closed_date")]
		public System.Nullable<System.DateOnly> Closed_date { get; set; }
		
		/// <summary>
		/// The date and time when the object was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// The user who created the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		/// <summary>
		/// When custom mappings are configured on the resource, the result is included here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_mappings")]
		public CustomMappings Custom_mappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customers")]
		public OrderCustomers[] OrderCustomers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discounts")]
		public OrderDiscounts[] OrderDiscounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		public string Employee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillments")]
		public OrderFulfillments[] OrderFulfillments { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A value you specify that uniquely identifies this request among requests you have sent.
		/// Max length: 45
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public string Idempotency_key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line_items")]
		public OrderLine_items[] OrderLine_items { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchant_id")]
		public string Merchant_id { get; set; }
		
		/// <summary>
		/// A note with information about this order, may be printed on the order receipt and displayed in apps
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order_date")]
		public System.Nullable<System.DateOnly> Order_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order_number")]
		public string Order_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order_type_id")]
		public string Order_type_id { get; set; }
		
		/// <summary>
		/// Is this order paid or not?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_status")]
		public System.Nullable<OrderPayment_status> Payment_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public OrderPayments[] OrderPayments { get; set; }
		
		/// <summary>
		/// An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded")]
		public System.Nullable<System.Boolean> Refunded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunds")]
		public OrderRefunds[] OrderRefunds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seat")]
		public string Seat { get; set; }
		
		/// <summary>
		/// Optional service charges or gratuity tip applied to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_charges")]
		public ServiceCharge[] Service_charges { get; set; }
		
		/// <summary>
		/// Source of order. Indicates the way that the order was placed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<OrderSource> Source { get; set; }
		
		/// <summary>
		/// Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OrderStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="table")]
		public string Table { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public OrderTaxes[] OrderTaxes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tenders")]
		public OrderTenders[] OrderTenders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_amount")]
		public System.Nullable<System.Int32> Total_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_discount")]
		public System.Nullable<System.Int32> Total_discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_refund")]
		public System.Nullable<System.Int32> Total_refund { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_service_charge")]
		public System.Nullable<System.Int32> Total_service_charge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_tax")]
		public System.Nullable<System.Int32> Total_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_tip")]
		public System.Nullable<System.Int32> Total_tip { get; set; }
		
		/// <summary>
		/// The date and time when the object was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		/// <summary>
		/// The user who last updated the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_by")]
		public string Updated_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voided")]
		public System.Nullable<System.Boolean> Voided { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voided_at")]
		public System.Nullable<System.DateTimeOffset> Voided_at { get; set; }
	}
	
	public class OrderCustomers
	{
		
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public Email[] Emails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middle_name")]
		public string Middle_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone_numbers")]
		public PhoneNumber[] Phone_numbers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneNumber
	{
		
		/// <summary>
		/// The area code of the phone number, e.g. 323
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="area_code")]
		public string Area_code { get; set; }
		
		/// <summary>
		/// The country code of the phone number, e.g. +1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// The extension of the phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extension")]
		public string Extension { get; set; }
		
		/// <summary>
		/// Unique identifier of the phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The phone number
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Number { get; set; }
		
		/// <summary>
		/// The type of phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PhoneNumberType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PhoneNumberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="primary")]
		primary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="secondary")]
		secondary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="home")]
		home = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="work")]
		work = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="office")]
		office = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mobile")]
		mobile = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="assistant")]
		assistant = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fax")]
		fax = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="direct-dial-in")]
		directMinusdialMinusin = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="personal")]
		personal = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 10,
	}
	
	public class OrderDiscounts
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_id")]
		public string Product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<OrderDiscountsScope> Scope { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public OrderDiscountsType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderDiscountsScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="order")]
		order = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line_item")]
		line_item = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderDiscountsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="percentage")]
		percentage = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="flat_fee")]
		flat_fee = 1,
	}
	
	public class OrderFulfillments
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pickup_details")]
		public OrderFulfillmentsPickup_details Pickup_details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipment_details")]
		public string Shipment_details { get; set; }
		
		/// <summary>
		/// The state of the fulfillment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OrderFulfillmentsStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<OrderFulfillmentsType> Type { get; set; }
	}
	
	public class OrderFulfillmentsPickup_details
	{
		
		[System.Runtime.Serialization.DataMember(Name="accepted_at")]
		public System.Nullable<System.DateTimeOffset> Accepted_at { get; set; }
		
		/// <summary>
		/// The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D').
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_complete_duration")]
		public string Auto_complete_duration { get; set; }
		
		/// <summary>
		/// A description of why the pickup was canceled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancel_reason")]
		public string Cancel_reason { get; set; }
		
		/// <summary>
		/// Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canceled_at")]
		public System.Nullable<System.DateTimeOffset> Canceled_at { get; set; }
		
		/// <summary>
		/// Specific details for curbside pickup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="curbside_pickup_details")]
		public OrderFulfillmentsPickup_detailsCurbside_pickup_details Curbside_pickup_details { get; set; }
		
		/// <summary>
		/// Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expired_at")]
		public System.Nullable<System.DateTimeOffset> Expired_at { get; set; }
		
		/// <summary>
		/// Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
		///If `expires_at` is not set, this pickup fulfillment is automatically accepted when 
		///placed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		public System.Nullable<System.DateTimeOffset> Expires_at { get; set; }
		
		/// <summary>
		/// If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_curbside_pickup")]
		public System.Nullable<System.Boolean> Is_curbside_pickup { get; set; }
		
		/// <summary>
		/// A note meant to provide additional instructions about the pickup
		///fulfillment displayed in the Square Point of Sale application and set by the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="picked_up_at")]
		public System.Nullable<System.DateTimeOffset> Picked_up_at { get; set; }
		
		/// <summary>
		/// The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g., 
		///"2016-09-04T23:59:33.123Z".
		///
		///For fulfillments with the schedule type `ASAP`, this is automatically set
		///to the current time plus the expected duration to prepare the fulfillment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickup_at")]
		public System.Nullable<System.DateTimeOffset> Pickup_at { get; set; }
		
		/// <summary>
		/// The window of time in which the order should be picked up after the `pickup_at` timestamp.
		///Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
		///informational guideline for merchants.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickup_window_duration")]
		public string Pickup_window_duration { get; set; }
		
		/// <summary>
		/// Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placed_at")]
		public System.Nullable<System.DateTimeOffset> Placed_at { get; set; }
		
		/// <summary>
		/// The duration of time it takes to prepare this fulfillment.
		///The duration must be in RFC 3339 format (for example, "P1W3D").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prep_time_duration")]
		public string Prep_time_duration { get; set; }
		
		/// <summary>
		/// Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ready_at")]
		public System.Nullable<System.DateTimeOffset> Ready_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient")]
		public OrderFulfillmentsPickup_detailsRecipient Recipient { get; set; }
		
		/// <summary>
		/// Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejected_at")]
		public System.Nullable<System.DateTimeOffset> Rejected_at { get; set; }
		
		/// <summary>
		/// The schedule type of the pickup fulfillment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule_type")]
		public System.Nullable<OrderFulfillmentsPickup_detailsSchedule_type> Schedule_type { get; set; }
	}
	
	public class OrderFulfillmentsPickup_detailsCurbside_pickup_details
	{
		
		/// <summary>
		/// Indicating when the buyer arrived and is waiting for pickup. The timestamp must be in RFC 3339 format
		///(for example, "2016-09-04T23:59:33.123Z").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_arrived_at")]
		public System.Nullable<System.DateTimeOffset> Buyer_arrived_at { get; set; }
		
		/// <summary>
		/// Specific details for curbside pickup, such as parking number and vehicle model.
		/// Max length: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="curbside_details")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Curbside_details { get; set; }
	}
	
	public class OrderFulfillmentsPickup_detailsRecipient
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public Email Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public PhoneNumber Phone_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderFulfillmentsPickup_detailsSchedule_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scheduled")]
		scheduled = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderFulfillmentsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="proposed")]
		proposed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="reserved")]
		reserved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="prepared")]
		prepared = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cancelled")]
		cancelled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderFulfillmentsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pickup")]
		pickup = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="shipment")]
		shipment = 1,
	}
	
	public class OrderLine_items
	{
		
		[System.Runtime.Serialization.DataMember(Name="applied_discounts")]
		public OrderLine_itemsApplied_discounts[] OrderLine_itemsApplied_discounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applied_taxes")]
		public OrderLine_itemsApplied_taxes[] OrderLine_itemsApplied_taxes { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public object Item { get; set; }
		
		/// <summary>
		/// Customizable options – toppings, add-ons, or special requests – create item modifiers. Modifiers that are applied to items will display on your customers’ digital receipts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiers")]
		public OrderLine_itemsModifiers[] OrderLine_itemsModifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_amount")]
		public System.Nullable<System.Int32> Total_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_discount")]
		public System.Nullable<System.Int32> Total_discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_tax")]
		public System.Nullable<System.Int32> Total_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit_price")]
		public System.Nullable<System.Double> Unit_price { get; set; }
	}
	
	public class OrderLine_itemsApplied_discounts
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount_id")]
		public string Discount_id { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class OrderLine_itemsApplied_taxes
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tax_id")]
		public string Tax_id { get; set; }
	}
	
	public class OrderLine_itemsModifiers
	{
		
		[System.Runtime.Serialization.DataMember(Name="alternate_name")]
		public string Alternate_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifier_group_id")]
		public string Modifier_group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderPayment_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="open")]
		open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="paid")]
		paid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="refunded")]
		refunded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credited")]
		credited = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="partially_paid")]
		partially_paid = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="partially_refunded")]
		partially_refunded = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 6,
	}
	
	public class OrderPayments
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class OrderRefunds
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OrderRefundsStatus> Status { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tender_id")]
		public string Tender_id { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderRefundsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="approved")]
		approved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rejected")]
		rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-store")]
		inMinusstore = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="online")]
		online = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="opt")]
		opt = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="api")]
		api = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kiosk")]
		kiosk = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="caller-id")]
		callerMinusid = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="google")]
		google = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invoice")]
		invoice = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="open")]
		open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draft")]
		draft = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delivered")]
		delivered = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delayed")]
		delayed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="voided")]
		voided = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hidden")]
		hidden = 6,
	}
	
	public class OrderTaxes
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Square-only: Determines whether the tax was automatically applied to the order based on the catalog configuration. For an example, see Automatically Apply Taxes to an Order. [https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes]()
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_applied")]
		public System.Nullable<System.Boolean> Auto_applied { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The tax's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public OrderDiscountsScope Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<OrderTaxesType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderTaxesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="additive")]
		additive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inclusive")]
		inclusive = 2,
	}
	
	public class OrderTenders
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// The amount (in cents) of cash tendered by the buyer. Only applicable when the tender type is cash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_tendered_cash_amount")]
		public System.Nullable<System.Int32> Buyer_tendered_cash_amount { get; set; }
		
		/// <summary>
		/// A card's non-confidential details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public PaymentCard Card { get; set; }
		
		/// <summary>
		/// The entry method of the card. Only applicable when the tender type is card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_entry_method")]
		public System.Nullable<OrderTendersCard_entry_method> Card_entry_method { get; set; }
		
		/// <summary>
		/// The status of the card. Only applicable when the tender type is card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_status")]
		public System.Nullable<OrderTendersCard_status> Card_status { get; set; }
		
		/// <summary>
		/// The amount (in cents) of cash returned to the buyer. Only applicable when the tender type is cash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="change_back_cash_amount")]
		public System.Nullable<System.Int32> Change_back_cash_amount { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public string Payment_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_amount")]
		public System.Nullable<System.Int32> Total_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_discount")]
		public System.Nullable<System.Int32> Total_discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_processing_fee")]
		public System.Nullable<System.Int32> Total_processing_fee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_refund")]
		public System.Nullable<System.Int32> Total_refund { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_service_charge")]
		public System.Nullable<System.Int32> Total_service_charge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_tax")]
		public System.Nullable<System.Int32> Total_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_tip")]
		public System.Nullable<System.Int32> Total_tip { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<OrderTendersType> Type { get; set; }
	}
	
	/// <summary>
	/// A card's non-confidential details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentCard
	{
		
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		/// <summary>
		/// The first six digits of the card number, known as the Bank Identification Number (BIN).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bin")]
		public string Bin { get; set; }
		
		/// <summary>
		/// The first six digits of the card number, known as the Bank Identification Number (BIN).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_brand")]
		public System.Nullable<PaymentCardCard_brand> Card_brand { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="card_type")]
		public System.Nullable<PaymentCardCard_type> Card_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cardholder_name")]
		public string Cardholder_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// Indicates whether or not a card can be used for payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The expiration month of the associated card as an integer between 1 and 12.
		/// Minimum: 1
		/// Maximum: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exp_month")]
		[System.ComponentModel.DataAnnotations.Range(1, 12)]
		public System.Nullable<System.Int32> Exp_month { get; set; }
		
		/// <summary>
		/// The four-digit year of the card's expiration date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exp_year")]
		public System.Nullable<System.Int32> Exp_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_4")]
		public string Last_4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchant_id")]
		public string Merchant_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prepaid_type")]
		public System.Nullable<PaymentCardPrepaid_type> Prepaid_type { get; set; }
		
		/// <summary>
		/// An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PaymentCardCard_brand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="visa")]
		visa = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mastercard")]
		mastercard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="amex")]
		amex = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="discover")]
		discover = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="discover-diners")]
		discoverMinusdiners = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jcb")]
		jcb = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="china-unionpay")]
		chinaMinusunionpay = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="square-gift-card")]
		squareMinusgiftMinuscard = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="square-capital-card")]
		squareMinuscapitalMinuscard = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="interac")]
		interac = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eftpos")]
		eftpos = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="felica")]
		felica = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ebt")]
		ebt = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PaymentCardCard_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credit")]
		credit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="debit")]
		debit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="prepaid")]
		prepaid = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PaymentCardPrepaid_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="non-prepaid")]
		nonMinusprepaid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="prepaid")]
		prepaid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderTendersCard_entry_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="evm")]
		evm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="swiped")]
		swiped = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keyed")]
		keyed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="on-file")]
		onMinusfile = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contactless")]
		contactless = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderTendersCard_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authorized")]
		authorized = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="captured")]
		captured = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="voided")]
		voided = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderTendersType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cash")]
		cash = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card")]
		card = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrderTypeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public OrderType Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderType
	{
		
		/// <summary>
		/// The date and time when the object was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// The user who created the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The date and time when the object was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		/// <summary>
		/// The user who last updated the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_by")]
		public string Updated_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrderTypesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public OrderType[] Data { get; set; }
		
		/// <summary>
		/// Links to navigate to previous or next pages through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// Response metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrdersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Order[] Data { get; set; }
		
		/// <summary>
		/// Links to navigate to previous or next pages through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// Response metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPosPaymentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PosPayment Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PosPayment
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="app_fee")]
		public System.Nullable<System.Double> App_fee { get; set; }
		
		/// <summary>
		/// The initial amount of money approved for this payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approved")]
		public System.Nullable<System.Double> Approved { get; set; }
		
		/// <summary>
		/// Card details for this payment. This field is currently not available. Reach out to our team for more info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_account")]
		public PosBankAccount Bank_account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="card_details")]
		public PosPaymentCard_details Card_details { get; set; }
		
		/// <summary>
		/// Cash details for this payment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash")]
		public PosPaymentCash Cash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="change_back_cash_amount")]
		public System.Nullable<System.Double> Change_back_cash_amount { get; set; }
		
		/// <summary>
		/// The date and time when the object was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// The user who created the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		/// <summary>
		/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		/// <summary>
		/// When custom mappings are configured on the resource, the result is included here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_mappings")]
		public CustomMappings Custom_mappings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="device_id")]
		public string Device_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		public string Employee_id { get; set; }
		
		/// <summary>
		/// Details about an external payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_details")]
		public PosPaymentExternal_details External_details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_payment_id")]
		public string External_payment_id { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A value you specify that uniquely identifies this request among requests you have sent.
		/// Max length: 45
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public string Idempotency_key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchant_id")]
		public string Merchant_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processing_fees")]
		public PosPaymentProcessing_fees[] PosPaymentProcessing_fees { get; set; }
		
		/// <summary>
		/// The initial amount of money approved for this payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded")]
		public System.Nullable<System.Double> Refunded { get; set; }
		
		/// <summary>
		/// Optional service charges or gratuity tip applied to the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_charges")]
		public ServiceCharge[] Service_charges { get; set; }
		
		/// <summary>
		/// Source of this payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<PosPaymentSource> Source { get; set; }
		
		/// <summary>
		/// The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		public string Source_id { get; set; }
		
		/// <summary>
		/// Status of this payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PosPaymentStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Double> Tax { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tender_id")]
		public string Tender_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tip")]
		public System.Nullable<System.Double> Tip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// The date and time when the object was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		/// <summary>
		/// The user who last updated the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_by")]
		public string Updated_by { get; set; }
		
		/// <summary>
		/// Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wallet")]
		public PosPaymentWallet Wallet { get; set; }
	}
	
	/// <summary>
	/// Card details for this payment. This field is currently not available. Reach out to our team for more info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PosBankAccount
	{
		
		/// <summary>
		/// The ownership type of the bank account performing the transfer.
		///The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_ownership_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Account_ownership_type { get; set; }
		
		/// <summary>
		/// ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ach_details")]
		public PosBankAccountAch_details Ach_details { get; set; }
		
		/// <summary>
		/// The name of the bank associated with the bank account.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Bank_name { get; set; }
		
		/// <summary>
		/// Country code according to ISO 3166-1 alpha-2.
		/// Min length: 2
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Country { get; set; }
		
		/// <summary>
		/// Uniquely identifies the bank account for this seller and can be used
		///to determine if payments are from the same bank account.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// The statement description as sent to the bank.
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statement_description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Statement_description { get; set; }
		
		/// <summary>
		/// The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfer_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Transfer_type { get; set; }
	}
	
	public class PosBankAccountAch_details
	{
		
		/// <summary>
		/// The last few digits of the bank account number.
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_number_suffix")]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Account_number_suffix { get; set; }
		
		/// <summary>
		/// The type of the bank account performing the transfer. The account type can be `CHECKING`,
		///`SAVINGS`, or `UNKNOWN`.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Account_type { get; set; }
		
		/// <summary>
		/// The routing number for the bank account.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Routing_number { get; set; }
	}
	
	public class PosPaymentCard_details
	{
		
		/// <summary>
		/// A card's non-confidential details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public PaymentCard Card { get; set; }
	}
	
	public class PosPaymentCash
	{
		
		/// <summary>
		/// The amount of cash given by the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public object Amount { get; set; }
		
		/// <summary>
		/// The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="charge_back_amount")]
		public object Charge_back_amount { get; set; }
	}
	
	public class PosPaymentExternal_details
	{
		
		/// <summary>
		/// A description of the external payment source. For example, 
		///"Food Delivery Service".
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Source { get; set; }
		
		/// <summary>
		/// The fees paid to the source. The amount minus this field is the net amount seller receives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_fee_amount")]
		public System.Nullable<System.Double> Source_fee_amount { get; set; }
		
		/// <summary>
		/// An ID to associate the payment to its originating source.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Source_id { get; set; }
		
		/// <summary>
		/// The type of external payment the seller received. It can be one of the following:
		///- CHECK - Paid using a physical check.
		///- BANK_TRANSFER - Paid using external bank transfer.
		///- OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
		///- CRYPTO - Paid using a crypto currency.
		///- SQUARE_CASH - Paid using Square Cash App.
		///- SOCIAL - Paid using peer-to-peer payment applications.
		///- EXTERNAL - A third-party application gathered this payment outside of Square.
		///- EMONEY - Paid using an E-money provider.
		///- CARD - A credit or debit card that Square does not support.
		///- STORED_BALANCE - Use for house accounts, store credit, and so forth.
		///- FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
		///- OTHER - A type not listed here.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public PosPaymentExternal_detailsType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PosPaymentExternal_detailsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="check")]
		check = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bank_transfer")]
		bank_transfer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other_gift_card")]
		other_gift_card = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="crypto")]
		crypto = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="square_cash")]
		square_cash = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="social")]
		social = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="external")]
		external = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="emoney")]
		emoney = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card")]
		card = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stored_balance")]
		stored_balance = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="food_voucher")]
		food_voucher = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 11,
	}
	
	public class PosPaymentProcessing_fees
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effective_at")]
		public System.Nullable<System.DateTimeOffset> Effective_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processing_type")]
		public System.Nullable<PosPaymentProcessing_feesProcessing_type> Processing_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PosPaymentProcessing_feesProcessing_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="initial")]
		initial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="adjustment")]
		adjustment = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PosPaymentSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card")]
		card = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bank_account")]
		bank_account = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wallet")]
		wallet = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bnpl")]
		bnpl = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cash")]
		cash = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="external")]
		external = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PosPaymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="approved")]
		approved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 5,
	}
	
	public class PosPaymentWallet
	{
		
		/// <summary>
		/// The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public System.Nullable<PosPaymentWalletStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PosPaymentWalletStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authorized")]
		authorized = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="captured")]
		captured = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="voided")]
		voided = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPosPaymentsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PosPayment[] Data { get; set; }
		
		/// <summary>
		/// Links to navigate to previous or next pages through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// Response metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTenderResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Tender Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tender
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Allow tipping on payment from tender
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allows_tipping")]
		public System.Nullable<System.Boolean> Allows_tipping { get; set; }
		
		/// <summary>
		/// The date and time when the object was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// The user who created the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		/// <summary>
		/// When custom mappings are configured on the resource, the result is included here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_mappings")]
		public CustomMappings Custom_mappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editable")]
		public System.Nullable<System.Boolean> Editable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		/// <summary>
		/// A unique identifier for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// If this tender opens the cash drawer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opens_cash_drawer")]
		public System.Nullable<System.Boolean> Opens_cash_drawer { get; set; }
		
		/// <summary>
		/// The date and time when the object was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		/// <summary>
		/// The user who last updated the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_by")]
		public string Updated_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTendersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Tender[] Data { get; set; }
		
		/// <summary>
		/// Links to navigate to previous or next pages through the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// Response metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifierGroupFilter
	{
		
		/// <summary>
		/// Id of the job to filter on
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_group_id")]
		public string Modifier_group_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundResponse
	{
		
		/// <summary>
		/// Contains parameter or domain specific information related to the error and why it occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotImplementedResponse
	{
		
		/// <summary>
		/// Contains parameter or domain specific information related to the error and why it occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentRequiredResponse
	{
		
		/// <summary>
		/// Contains parameter or domain specific information related to the error and why it occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	public class PosWebhookEvent
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SocialLink
	{
		
		/// <summary>
		/// Unique identifier of the social link
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Type of the social link, e.g. twitter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// URL of the social link, e.g. https://www.twitter.com/apideck
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyRequestsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public TooManyRequestsResponseDetail Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	public class TooManyRequestsResponseDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="context")]
		public string Context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnauthorizedResponse
	{
		
		/// <summary>
		/// Contains parameter or domain specific information related to the error and why it occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnexpectedErrorResponse
	{
		
		/// <summary>
		/// Contains parameter or domain specific information related to the error and why it occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnprocessableResponse
	{
		
		/// <summary>
		/// Contains parameter or domain specific information related to the error and why it occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// A human-readable message providing more details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Link to documentation of error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Double> Status_code { get; set; }
		
		/// <summary>
		/// The type of error returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_name")]
		public string Type_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateItemResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLocationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateMerchantResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateModifierGroupResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateModifierResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateOrderResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateOrderTypeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePosPaymentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTenderResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UnifiedId Data { get; set; }
		
		/// <summary>
		/// Operation performed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Unified API resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Apideck ID of service provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// HTTP Response Status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// HTTP Response Status Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public int Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Website
	{
		
		/// <summary>
		/// Unique identifier for the website
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of website
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<WebsiteType> Type { get; set; }
		
		/// <summary>
		/// The website URL
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WebsiteType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="primary")]
		primary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="secondary")]
		secondary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="work")]
		work = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="personal")]
		personal = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 4,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List Items
		/// List Items
		/// ItemsAll pos/items
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.</param>
		/// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20
		/// Minimum: 1
		/// Maximum: 200
		// </param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>Items</returns>
		public async Task<GetItemsResponse> ItemsAllAsync(bool raw, string cursor, int limit, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/items?raw="+raw+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetItemsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Item
		/// Create Item
		/// ItemsAdd pos/items
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		public async Task ItemsAddAsync(bool raw, Item requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/items?raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Item
		/// Delete Item
		/// ItemsDelete pos/items/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>Items</returns>
		public async Task<DeleteItemResponse> ItemsDeleteAsync(string id, bool raw, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/items/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteItemResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Item
		/// Get Item
		/// ItemsOne pos/items/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>Items</returns>
		public async Task<GetItemResponse> ItemsOneAsync(string id, bool raw, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/items/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetItemResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Item
		/// Update Item
		/// ItemsUpdate pos/items/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>Items</returns>
		public async Task<UpdateItemResponse> ItemsUpdateAsync(string id, bool raw, Item requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/items/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateItemResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Locations
		/// List Locations
		/// LocationsAll pos/locations
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.</param>
		/// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20
		/// Minimum: 1
		/// Maximum: 200
		// </param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>Locations</returns>
		public async Task<GetLocationsResponse> LocationsAllAsync(bool raw, string cursor, int limit, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/locations?raw="+raw+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Location
		/// Create Location
		/// LocationsAdd pos/locations
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		public async Task LocationsAddAsync(bool raw, Location requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/locations?raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Location
		/// Delete Location
		/// LocationsDelete pos/locations/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>Locations</returns>
		public async Task<DeleteLocationResponse> LocationsDeleteAsync(string id, bool raw, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Location
		/// Get Location
		/// LocationsOne pos/locations/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>Locations</returns>
		public async Task<GetLocationResponse> LocationsOneAsync(string id, bool raw, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Location
		/// Update Location
		/// LocationsUpdate pos/locations/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>Locations</returns>
		public async Task<UpdateLocationResponse> LocationsUpdateAsync(string id, bool raw, Location requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Merchants
		/// List Merchants
		/// MerchantsAll pos/merchants
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.</param>
		/// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20
		/// Minimum: 1
		/// Maximum: 200
		// </param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>Merchants</returns>
		public async Task<GetMerchantsResponse> MerchantsAllAsync(bool raw, string cursor, int limit, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/merchants?raw="+raw+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMerchantsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Merchant
		/// Create Merchant
		/// MerchantsAdd pos/merchants
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		public async Task MerchantsAddAsync(bool raw, Merchant requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/merchants?raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Merchant
		/// Delete Merchant
		/// MerchantsDelete pos/merchants/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>Merchants</returns>
		public async Task<DeleteMerchantResponse> MerchantsDeleteAsync(string id, bool raw, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/merchants/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteMerchantResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Merchant
		/// Get Merchant
		/// MerchantsOne pos/merchants/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>Merchants</returns>
		public async Task<GetMerchantResponse> MerchantsOneAsync(string id, bool raw, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/merchants/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMerchantResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Merchant
		/// Update Merchant
		/// MerchantsUpdate pos/merchants/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>Merchants</returns>
		public async Task<UpdateMerchantResponse> MerchantsUpdateAsync(string id, bool raw, Merchant requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/merchants/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateMerchantResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Modifier Groups
		/// List Modifier Groups
		/// ModifierGroupsAll pos/modifier-groups
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.</param>
		/// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20
		/// Minimum: 1
		/// Maximum: 200
		// </param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>ModifierGroups</returns>
		public async Task<GetModifierGroupsResponse> ModifierGroupsAllAsync(bool raw, string cursor, int limit, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/modifier-groups?raw="+raw+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetModifierGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Modifier Group
		/// Create Modifier Group
		/// ModifierGroupsAdd pos/modifier-groups
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		public async Task ModifierGroupsAddAsync(bool raw, ModifierGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/modifier-groups?raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Modifier Group
		/// Delete Modifier Group
		/// ModifierGroupsDelete pos/modifier-groups/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>ModifierGroups</returns>
		public async Task<DeleteModifierGroupResponse> ModifierGroupsDeleteAsync(string id, bool raw, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/modifier-groups/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteModifierGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Modifier Group
		/// Get Modifier Group
		/// ModifierGroupsOne pos/modifier-groups/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>ModifierGroups</returns>
		public async Task<GetModifierGroupResponse> ModifierGroupsOneAsync(string id, bool raw, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/modifier-groups/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetModifierGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Modifier Group
		/// Update Modifier Group
		/// ModifierGroupsUpdate pos/modifier-groups/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>ModifierGroups</returns>
		public async Task<UpdateModifierGroupResponse> ModifierGroupsUpdateAsync(string id, bool raw, ModifierGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/modifier-groups/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateModifierGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Modifiers
		/// List Modifiers
		/// ModifiersAll pos/modifiers
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.</param>
		/// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20
		/// Minimum: 1
		/// Maximum: 200
		// </param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>Modifiers</returns>
		public async Task<GetModifiersResponse> ModifiersAllAsync(bool raw, string cursor, int limit, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/modifiers?raw="+raw+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetModifiersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Modifier
		/// Create Modifier
		/// ModifiersAdd pos/modifiers
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		public async Task ModifiersAddAsync(bool raw, Modifier requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/modifiers?raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Modifier
		/// Delete Modifier
		/// ModifiersDelete pos/modifiers/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="filter">Apply filters</param>
		/// <returns>Modifiers</returns>
		public async Task<DeleteModifierResponse> ModifiersDeleteAsync(string id, bool raw, ModifierGroupFilter filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/modifiers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw+"&filter=" + filter;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteModifierResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Modifier
		/// Get Modifier
		/// ModifiersOne pos/modifiers/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="filter">Apply filters</param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>Modifiers</returns>
		public async Task<GetModifierResponse> ModifiersOneAsync(string id, bool raw, ModifierGroupFilter filter, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/modifiers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw+"&filter=" + filter+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetModifierResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Modifier
		/// Update Modifier
		/// ModifiersUpdate pos/modifiers/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>Modifiers</returns>
		public async Task<UpdateModifierResponse> ModifiersUpdateAsync(string id, bool raw, Modifier requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/modifiers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateModifierResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Order Types
		/// List Order Types
		/// OrderTypesAll pos/order-types
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.</param>
		/// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20
		/// Minimum: 1
		/// Maximum: 200
		// </param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>OrderTypes</returns>
		public async Task<GetOrderTypesResponse> OrderTypesAllAsync(bool raw, string cursor, int limit, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/order-types?raw="+raw+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrderTypesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Order Type
		/// Create Order Type
		/// OrderTypesAdd pos/order-types
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		public async Task OrderTypesAddAsync(bool raw, OrderType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/order-types?raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Order Type
		/// Delete Order Type
		/// OrderTypesDelete pos/order-types/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>OrderTypes</returns>
		public async Task<DeleteOrderTypeResponse> OrderTypesDeleteAsync(string id, bool raw, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/order-types/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteOrderTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Order Type
		/// Get Order Type
		/// OrderTypesOne pos/order-types/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>OrderTypes</returns>
		public async Task<GetOrderTypeResponse> OrderTypesOneAsync(string id, bool raw, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/order-types/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrderTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Order Type
		/// Update Order Type
		/// OrderTypesUpdate pos/order-types/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>OrderTypes</returns>
		public async Task<UpdateOrderTypeResponse> OrderTypesUpdateAsync(string id, bool raw, OrderType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/order-types/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateOrderTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Orders
		/// List Orders
		/// OrdersAll pos/orders
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.</param>
		/// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20
		/// Minimum: 1
		/// Maximum: 200
		// </param>
		/// <param name="location_id">ID of the location.</param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>Orders</returns>
		public async Task<GetOrdersResponse> OrdersAllAsync(bool raw, string cursor, int limit, string location_id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/orders?raw="+raw+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&location_id=" + (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrdersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Order
		/// Create Order
		/// OrdersAdd pos/orders
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		public async Task OrdersAddAsync(bool raw, Order requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/orders?raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Order
		/// Delete Order
		/// OrdersDelete pos/orders/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>Orders</returns>
		public async Task<DeleteOrderResponse> OrdersDeleteAsync(string id, bool raw, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/orders/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteOrderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Order
		/// Get Order
		/// OrdersOne pos/orders/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>Orders</returns>
		public async Task<GetOrderResponse> OrdersOneAsync(string id, bool raw, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/orders/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Order
		/// Updates an open order by adding, replacing, or deleting fields. Square-only: Orders with a `completed` or `canceled` status cannot be updated. To pay for an order, use the [payments endpoint](#tag/Payments).
		/// 
		/// OrdersUpdate pos/orders/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>Orders</returns>
		public async Task<UpdateOrderResponse> OrdersUpdateAsync(string id, bool raw, Order requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/orders/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateOrderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Pay Order
		/// Pay Order
		/// OrdersPay pos/orders/{id}/pay
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		public async Task OrdersPayAsync(string id, bool raw, string fields, Order requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/orders/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/pay&raw="+raw+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Payments
		/// List Payments
		/// PaymentsAll pos/payments
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.</param>
		/// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20
		/// Minimum: 1
		/// Maximum: 200
		// </param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>PosPayments</returns>
		public async Task<GetPosPaymentsResponse> PaymentsAllAsync(bool raw, string cursor, int limit, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/payments?raw="+raw+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPosPaymentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Payment
		/// Create Payment
		/// PaymentsAdd pos/payments
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		public async Task PaymentsAddAsync(bool raw, PosPayment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/payments?raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Payment
		/// Delete Payment
		/// PaymentsDelete pos/payments/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>PosPayments</returns>
		public async Task<DeletePosPaymentResponse> PaymentsDeleteAsync(string id, bool raw, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/payments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePosPaymentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payment
		/// Get Payment
		/// PaymentsOne pos/payments/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>PosPayments</returns>
		public async Task<GetPosPaymentResponse> PaymentsOneAsync(string id, bool raw, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/payments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPosPaymentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Payment
		/// Update Payment
		/// PaymentsUpdate pos/payments/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>PosPayments</returns>
		public async Task<UpdatePosPaymentResponse> PaymentsUpdateAsync(string id, bool raw, PosPayment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/payments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePosPaymentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Tenders
		/// List Tenders
		/// TendersAll pos/tenders
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="cursor">Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.</param>
		/// <param name="limit">Number of results to return. Minimum 1, Maximum 200, Default 20
		/// Minimum: 1
		/// Maximum: 200
		// </param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>Tenders</returns>
		public async Task<GetTendersResponse> TendersAllAsync(bool raw, string cursor, int limit, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/tenders?raw="+raw+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&limit="+limit+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTendersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Tender
		/// Create Tender
		/// TendersAdd pos/tenders
		/// </summary>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		public async Task TendersAddAsync(bool raw, Tender requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/tenders?raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Tender
		/// Delete Tender
		/// TendersDelete pos/tenders/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>Tenders</returns>
		public async Task<DeleteTenderResponse> TendersDeleteAsync(string id, bool raw, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/tenders/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteTenderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Tender
		/// Get Tender
		/// TendersOne pos/tenders/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <param name="fields">The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.</param>
		/// <returns>Tenders</returns>
		public async Task<GetTenderResponse> TendersOneAsync(string id, bool raw, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/tenders/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTenderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Tender
		/// Update Tender
		/// TendersUpdate pos/tenders/{id}
		/// </summary>
		/// <param name="id">ID of the record you are acting upon.</param>
		/// <param name="raw">Include raw response. Mostly used for debugging purposes</param>
		/// <returns>Tenders</returns>
		public async Task<UpdateTenderResponse> TendersUpdateAsync(string id, bool raw, Tender requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pos/tenders/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&raw="+raw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateTenderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
