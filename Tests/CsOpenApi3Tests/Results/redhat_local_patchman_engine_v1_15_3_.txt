//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersAdvisoriesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ControllersAdvisoryItem[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ControllersLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ControllersListMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersAdvisoryItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public ControllersAdvisoryItemAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersAdvisoryItemAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="advisory_type")]
		public System.Nullable<System.Int32> Advisory_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicable_systems")]
		public System.Nullable<System.Int32> Applicable_systems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cve_count")]
		public System.Nullable<System.Int32> Cve_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="public_date")]
		public string Public_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<System.Int32> Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="synopsis")]
		public string Synopsis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="first")]
		public string First { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last")]
		public string Last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersListMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public System.Collections.Generic.Dictionary<string, ControllersFilterData> Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="search")]
		public string Search { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public string[] Sort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotals")]
		public System.Collections.Generic.Dictionary<string, int> Subtotals { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_items")]
		public System.Nullable<System.Int32> Total_items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersFilterData
	{
		
		[System.Runtime.Serialization.DataMember(Name="op")]
		public string Op { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersAdvisoriesSystemsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, string[]> Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersAdvisoryDetailAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="cves")]
		public string[] Cves { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fixes")]
		public string Fixes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modified_date")]
		public string Modified_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packages")]
		public System.Collections.Generic.Dictionary<string, string> Packages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="public_date")]
		public string Public_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="references")]
		public string[] References { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<System.Int32> Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="solution")]
		public string Solution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="synopsis")]
		public string Synopsis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersAdvisoryDetailItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public ControllersAdvisoryDetailAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersAdvisoryDetailResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ControllersAdvisoryDetailItem Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersAdvisoryInlineItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="advisory_type")]
		public System.Nullable<System.Int32> Advisory_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicable_systems")]
		public System.Nullable<System.Int32> Applicable_systems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cve_count")]
		public System.Nullable<System.Int32> Cve_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="public_date")]
		public string Public_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<System.Int32> Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="synopsis")]
		public string Synopsis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersAdvisorySystemsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ControllersSystemItem[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ControllersLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ControllersListMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersSystemItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public ControllersSystemItemAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersSystemItemAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="culled_timestamp")]
		public string Culled_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="insights_id")]
		public string Insights_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_evaluation")]
		public string Last_evaluation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_upload")]
		public string Last_upload { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os_major")]
		public string Os_major { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os_minor")]
		public string Os_minor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os_name")]
		public string Os_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_count")]
		public System.Nullable<System.Int32> Other_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packages_installed")]
		public System.Nullable<System.Int32> Packages_installed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packages_updatable")]
		public System.Nullable<System.Int32> Packages_updatable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rhba_count")]
		public System.Nullable<System.Int32> Rhba_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rhea_count")]
		public System.Nullable<System.Int32> Rhea_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rhsa_count")]
		public System.Nullable<System.Int32> Rhsa_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rhsm")]
		public string Rhsm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stale")]
		public System.Nullable<System.Boolean> Stale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stale_timestamp")]
		public string Stale_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stale_warning_timestamp")]
		public string Stale_warning_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="third_party")]
		public System.Nullable<System.Boolean> Third_party { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersPackageDetailAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="advisory_id")]
		public string Advisory_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersPackageDetailItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public ControllersPackageDetailAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersPackageDetailResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ControllersPackageDetailItem Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersPackageItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systems_installed")]
		public System.Nullable<System.Int32> Systems_installed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systems_updatable")]
		public System.Nullable<System.Int32> Systems_updatable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersPackageSystemItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="available_evra")]
		public string Available_evra { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="installed_evra")]
		public string Installed_evra { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatable")]
		public System.Nullable<System.Boolean> Updatable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersPackageSystemsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ControllersPackageSystemItem[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ControllersLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ControllersListMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersPackageVersionItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="evra")]
		public string Evra { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersPackageVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ControllersPackageVersionItem[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ControllersLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ControllersListMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersPackagesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ControllersPackageItem[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ControllersLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ControllersListMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersSystemAdvisoriesDBLookup
	{
		
		[System.Runtime.Serialization.DataMember(Name="advisory_type")]
		public System.Nullable<System.Int32> Advisory_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cve_count")]
		public System.Nullable<System.Int32> Cve_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="public_date")]
		public string Public_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<System.Int32> Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="synopsis")]
		public string Synopsis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersSystemAdvisoriesResponse
	{
		
		/// <summary>
		/// advisories items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ControllersSystemAdvisoryItem[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ControllersLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ControllersListMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersSystemAdvisoryItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public ControllersSystemAdvisoryItemAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersSystemAdvisoryItemAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="advisory_type")]
		public System.Nullable<System.Int32> Advisory_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cve_count")]
		public System.Nullable<System.Int32> Cve_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="public_date")]
		public string Public_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<System.Int32> Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="synopsis")]
		public string Synopsis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersSystemDetailResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ControllersSystemItem Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersSystemInlineItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="culled_timestamp")]
		public string Culled_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="insights_id")]
		public string Insights_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_evaluation")]
		public string Last_evaluation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_upload")]
		public string Last_upload { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os_major")]
		public string Os_major { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os_minor")]
		public string Os_minor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os_name")]
		public string Os_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_count")]
		public System.Nullable<System.Int32> Other_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packages_installed")]
		public System.Nullable<System.Int32> Packages_installed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packages_updatable")]
		public System.Nullable<System.Int32> Packages_updatable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rhba_count")]
		public System.Nullable<System.Int32> Rhba_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rhea_count")]
		public System.Nullable<System.Int32> Rhea_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rhsa_count")]
		public System.Nullable<System.Int32> Rhsa_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rhsm")]
		public string Rhsm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stale")]
		public System.Nullable<System.Boolean> Stale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stale_timestamp")]
		public string Stale_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stale_warning_timestamp")]
		public string Stale_warning_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="third_party")]
		public System.Nullable<System.Boolean> Third_party { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersSystemPackageData
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evra")]
		public string Evra { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatable")]
		public System.Nullable<System.Boolean> Updatable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updates")]
		public ModelsPackageUpdate[] Updates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModelsPackageUpdate
	{
		
		[System.Runtime.Serialization.DataMember(Name="advisory")]
		public string Advisory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evra")]
		public string Evra { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersSystemPackageInline
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evra")]
		public string Evra { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latest_evra")]
		public string Latest_evra { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatable")]
		public System.Nullable<System.Boolean> Updatable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersSystemPackageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ControllersSystemPackageData[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ControllersLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ControllersListMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersSystemsAdvisoriesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="advisories")]
		public string[] Advisories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systems")]
		public string[] Systems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersSystemsAdvisoriesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, string[]> Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControllersSystemsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ControllersSystemItem[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ControllersLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ControllersListMeta Meta { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Show me all applicable advisories for all my systems
		/// Show me all applicable advisories for all my systems
		/// ListAdvisories api/patch/v1/advisories
		/// </summary>
		/// <param name="limit">Limit for paging, set -1 to return all</param>
		/// <param name="offset">Offset for paging</param>
		/// <param name="sort">Sort field</param>
		/// <param name="search">Find matching text</param>
		/// <param name="filter_id">Filter </param>
		/// <param name="filter_description">Filter</param>
		/// <param name="filter_public_date">Filter</param>
		/// <param name="filter_synopsis">Filter</param>
		/// <param name="filter_advisory_type">Filter</param>
		/// <param name="filter_severity">Filter</param>
		/// <param name="filter_applicable_systems">Filter</param>
		/// <param name="tags">Tag filter</param>
		/// <param name="filter_system_profile_sap_system">Filter only SAP systems</param>
		/// <param name="filter_system_profile_sap_sids_in">Filter systems by their SAP SIDs</param>
		/// <returns>OK</returns>
		public async Task<ControllersAdvisoriesResponse> ListAdvisoriesAsync(int limit, int offset, ListAdvisoriesSort sort, string search, string filter_id, string filter_description, string filter_public_date, string filter_synopsis, string filter_advisory_type, string filter_severity, string filter_applicable_systems, string[] tags, string filter_system_profile_sap_system, string[] filter_system_profile_sap_sids_in, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/advisories?limit="+limit+"&offset="+offset+"&sort=" + sort+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&filter[id]=" + (filter_id==null? "" : System.Uri.EscapeDataString(filter_id))+"&filter[description]=" + (filter_description==null? "" : System.Uri.EscapeDataString(filter_description))+"&filter[public_date]=" + (filter_public_date==null? "" : System.Uri.EscapeDataString(filter_public_date))+"&filter[synopsis]=" + (filter_synopsis==null? "" : System.Uri.EscapeDataString(filter_synopsis))+"&filter[advisory_type]=" + (filter_advisory_type==null? "" : System.Uri.EscapeDataString(filter_advisory_type))+"&filter[severity]=" + (filter_severity==null? "" : System.Uri.EscapeDataString(filter_severity))+"&filter[applicable_systems]=" + (filter_applicable_systems==null? "" : System.Uri.EscapeDataString(filter_applicable_systems))+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&filter[system_profile][sap_system]=" + (filter_system_profile_sap_system==null? "" : System.Uri.EscapeDataString(filter_system_profile_sap_system))+"&"+string.Join("&", filter_system_profile_sap_sids_in.Select(z => $"filter[system_profile][sap_sids][in]={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersAdvisoriesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show me details an advisory by given advisory name
		/// Show me details an advisory by given advisory name
		/// DetailAdvisory api/patch/v1/advisories/{advisory_id}
		/// </summary>
		/// <param name="advisory_id">Advisory ID</param>
		/// <returns>OK</returns>
		public async Task<ControllersAdvisoryDetailResponse> DetailAdvisoryAsync(string advisory_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/advisories/"+ (advisory_id==null? "" : System.Uri.EscapeDataString(advisory_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersAdvisoryDetailResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show me systems on which the given advisory is applicable
		/// Show me systems on which the given advisory is applicable
		/// ListAdvisorySystems api/patch/v1/advisories/{advisory_id}/systems
		/// </summary>
		/// <param name="advisory_id">Advisory ID</param>
		/// <param name="limit">Limit for paging, set -1 to return all</param>
		/// <param name="offset">Offset for paging</param>
		/// <param name="sort">Sort field</param>
		/// <param name="search">Find matching text</param>
		/// <param name="filter_id">Filter</param>
		/// <param name="filter_insights_id">Filter</param>
		/// <param name="filter_display_name">Filter</param>
		/// <param name="filter_last_evaluation">Filter</param>
		/// <param name="filter_last_upload">Filter</param>
		/// <param name="filter_rhsa_count">Filter</param>
		/// <param name="filter_rhba_count">Filter</param>
		/// <param name="filter_rhea_count">Filter</param>
		/// <param name="filter_other_count">Filter</param>
		/// <param name="filter_stale">Filter</param>
		/// <param name="filter_stale_timestamp">Filter</param>
		/// <param name="filter_stale_warning_timestamp">Filter</param>
		/// <param name="filter_culled_timestamp">Filter</param>
		/// <param name="filter_created">Filter</param>
		/// <param name="tags">Tag filter</param>
		/// <param name="filter_system_profile_sap_system">Filter only SAP systems</param>
		/// <param name="filter_system_profile_sap_sids_in">Filter systems by their SAP SIDs</param>
		/// <returns>OK</returns>
		public async Task<ControllersAdvisorySystemsResponse> ListAdvisorySystemsAsync(
					string advisory_id, 
					int limit, 
					int offset, 
					ListAdvisorySystemsSort sort, 
					string search, 
					string filter_id, 
					string filter_insights_id, 
					string filter_display_name, 
					string filter_last_evaluation, 
					string filter_last_upload, 
					string filter_rhsa_count, 
					string filter_rhba_count, 
					string filter_rhea_count, 
					string filter_other_count, 
					string filter_stale, 
					string filter_stale_timestamp, 
					string filter_stale_warning_timestamp, 
					string filter_culled_timestamp, 
					string filter_created, 
					string[] tags, 
					string filter_system_profile_sap_system, 
					string[] filter_system_profile_sap_sids_in, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/advisories/"+ (advisory_id==null? "" : System.Uri.EscapeDataString(advisory_id))+"/systems&limit="+limit+"&offset="+offset+"&sort=" + sort+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&filter[id]=" + (filter_id==null? "" : System.Uri.EscapeDataString(filter_id))+"&filter[insights_id]=" + (filter_insights_id==null? "" : System.Uri.EscapeDataString(filter_insights_id))+"&filter[display_name]=" + (filter_display_name==null? "" : System.Uri.EscapeDataString(filter_display_name))+"&filter[last_evaluation]=" + (filter_last_evaluation==null? "" : System.Uri.EscapeDataString(filter_last_evaluation))+"&filter[last_upload]=" + (filter_last_upload==null? "" : System.Uri.EscapeDataString(filter_last_upload))+"&filter[rhsa_count]=" + (filter_rhsa_count==null? "" : System.Uri.EscapeDataString(filter_rhsa_count))+"&filter[rhba_count]=" + (filter_rhba_count==null? "" : System.Uri.EscapeDataString(filter_rhba_count))+"&filter[rhea_count]=" + (filter_rhea_count==null? "" : System.Uri.EscapeDataString(filter_rhea_count))+"&filter[other_count]=" + (filter_other_count==null? "" : System.Uri.EscapeDataString(filter_other_count))+"&filter[stale]=" + (filter_stale==null? "" : System.Uri.EscapeDataString(filter_stale))+"&filter[stale_timestamp]=" + (filter_stale_timestamp==null? "" : System.Uri.EscapeDataString(filter_stale_timestamp))+"&filter[stale_warning_timestamp]=" + (filter_stale_warning_timestamp==null? "" : System.Uri.EscapeDataString(filter_stale_warning_timestamp))+"&filter[culled_timestamp]=" + (filter_culled_timestamp==null? "" : System.Uri.EscapeDataString(filter_culled_timestamp))+"&filter[created]=" + (filter_created==null? "" : System.Uri.EscapeDataString(filter_created))+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&filter[system_profile][sap_system]=" + (filter_system_profile_sap_system==null? "" : System.Uri.EscapeDataString(filter_system_profile_sap_system))+"&"+string.Join("&", filter_system_profile_sap_sids_in.Select(z => $"filter[system_profile][sap_sids][in]={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersAdvisorySystemsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Export applicable advisories for all my systems
		/// Export applicable advisories for all my systems
		/// ExportAdvisories api/patch/v1/export/advisories
		/// </summary>
		/// <param name="search">Find matching text</param>
		/// <param name="filter_id">Filter</param>
		/// <param name="filter_description">Filter</param>
		/// <param name="filter_public_date">Filter</param>
		/// <param name="filter_synopsis">Filter</param>
		/// <param name="filter_advisory_type">Filter</param>
		/// <param name="filter_severity">Filter</param>
		/// <param name="filter_applicable_systems">Filter</param>
		/// <returns>OK</returns>
		public async Task<ControllersAdvisoryInlineItem[]> ExportAdvisoriesAsync(string search, string filter_id, string filter_description, string filter_public_date, string filter_synopsis, string filter_advisory_type, string filter_severity, string filter_applicable_systems, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/export/advisories?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&filter[id]=" + (filter_id==null? "" : System.Uri.EscapeDataString(filter_id))+"&filter[description]=" + (filter_description==null? "" : System.Uri.EscapeDataString(filter_description))+"&filter[public_date]=" + (filter_public_date==null? "" : System.Uri.EscapeDataString(filter_public_date))+"&filter[synopsis]=" + (filter_synopsis==null? "" : System.Uri.EscapeDataString(filter_synopsis))+"&filter[advisory_type]=" + (filter_advisory_type==null? "" : System.Uri.EscapeDataString(filter_advisory_type))+"&filter[severity]=" + (filter_severity==null? "" : System.Uri.EscapeDataString(filter_severity))+"&filter[applicable_systems]=" + (filter_applicable_systems==null? "" : System.Uri.EscapeDataString(filter_applicable_systems));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersAdvisoryInlineItem[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Export systems for my account
		/// Export systems for my account
		/// ExportAdvisorySystems api/patch/v1/export/advisories/{advisory_id}/systems
		/// </summary>
		/// <param name="advisory_id">Advisory ID</param>
		/// <param name="search">Find matching text</param>
		/// <param name="filter_id">Filter</param>
		/// <param name="filter_display_name">Filter</param>
		/// <param name="filter_last_evaluation">Filter</param>
		/// <param name="filter_last_upload">Filter</param>
		/// <param name="filter_rhsa_count">Filter</param>
		/// <param name="filter_rhba_count">Filter</param>
		/// <param name="filter_rhea_count">Filter</param>
		/// <param name="filter_other_count">Filter</param>
		/// <param name="filter_stale">Filter</param>
		/// <param name="filter_packages_installed">Filter</param>
		/// <param name="filter_packages_updatable">Filter</param>
		/// <param name="filter_system_profile_sap_system">Filter only SAP systems</param>
		/// <param name="filter_system_profile_sap_sids_in">Filter systems by their SAP SIDs</param>
		/// <param name="tags">Tag filter</param>
		/// <returns>OK</returns>
		public async Task<ControllersSystemInlineItem[]> ExportAdvisorySystemsAsync(
					string advisory_id, 
					string search, 
					string filter_id, 
					string filter_display_name, 
					string filter_last_evaluation, 
					string filter_last_upload, 
					string filter_rhsa_count, 
					string filter_rhba_count, 
					string filter_rhea_count, 
					string filter_other_count, 
					string filter_stale, 
					string filter_packages_installed, 
					string filter_packages_updatable, 
					string filter_system_profile_sap_system, 
					string[] filter_system_profile_sap_sids_in, 
					string[] tags, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/export/advisories/"+ (advisory_id==null? "" : System.Uri.EscapeDataString(advisory_id))+"/systems&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&filter[id]=" + (filter_id==null? "" : System.Uri.EscapeDataString(filter_id))+"&filter[display_name]=" + (filter_display_name==null? "" : System.Uri.EscapeDataString(filter_display_name))+"&filter[last_evaluation]=" + (filter_last_evaluation==null? "" : System.Uri.EscapeDataString(filter_last_evaluation))+"&filter[last_upload]=" + (filter_last_upload==null? "" : System.Uri.EscapeDataString(filter_last_upload))+"&filter[rhsa_count]=" + (filter_rhsa_count==null? "" : System.Uri.EscapeDataString(filter_rhsa_count))+"&filter[rhba_count]=" + (filter_rhba_count==null? "" : System.Uri.EscapeDataString(filter_rhba_count))+"&filter[rhea_count]=" + (filter_rhea_count==null? "" : System.Uri.EscapeDataString(filter_rhea_count))+"&filter[other_count]=" + (filter_other_count==null? "" : System.Uri.EscapeDataString(filter_other_count))+"&filter[stale]=" + (filter_stale==null? "" : System.Uri.EscapeDataString(filter_stale))+"&filter[packages_installed]=" + (filter_packages_installed==null? "" : System.Uri.EscapeDataString(filter_packages_installed))+"&filter[packages_updatable]=" + (filter_packages_updatable==null? "" : System.Uri.EscapeDataString(filter_packages_updatable))+"&filter[system_profile][sap_system]=" + (filter_system_profile_sap_system==null? "" : System.Uri.EscapeDataString(filter_system_profile_sap_system))+"&"+string.Join("&", filter_system_profile_sap_sids_in.Select(z => $"filter[system_profile][sap_sids][in]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersSystemInlineItem[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show me all installed packages across my systems
		/// Show me all installed packages across my systems
		/// ExportPackages api/patch/v1/export/packages
		/// </summary>
		/// <param name="sort">Sort field</param>
		/// <param name="search">Find matching text</param>
		/// <param name="filter_name">Filter</param>
		/// <param name="filter_systems_installed">Filter</param>
		/// <param name="filter_systems_updatable">Filter</param>
		/// <param name="filter_summary">Filter</param>
		/// <returns>OK</returns>
		public async Task<ControllersPackageItem[]> ExportPackagesAsync(ExportPackagesSort sort, string search, string filter_name, string filter_systems_installed, string filter_systems_updatable, string filter_summary, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/export/packages?sort=" + sort+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&filter[name]=" + (filter_name==null? "" : System.Uri.EscapeDataString(filter_name))+"&filter[systems_installed]=" + (filter_systems_installed==null? "" : System.Uri.EscapeDataString(filter_systems_installed))+"&filter[systems_updatable]=" + (filter_systems_updatable==null? "" : System.Uri.EscapeDataString(filter_systems_updatable))+"&filter[summary]=" + (filter_summary==null? "" : System.Uri.EscapeDataString(filter_summary));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersPackageItem[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show me all my systems which have a package installed
		/// Show me all my systems which have a package installed
		/// ExportPackageSystems api/patch/v1/export/packages/{package_name}/systems
		/// </summary>
		/// <param name="package_name">Package name</param>
		/// <param name="filter_system_profile_sap_system">Filter only SAP systems</param>
		/// <param name="filter_system_profile_sap_sids_in">Filter systems by their SAP SIDs</param>
		/// <param name="tags">Tag filter</param>
		/// <returns>OK</returns>
		public async Task<ControllersPackageSystemItem[]> ExportPackageSystemsAsync(string package_name, string filter_system_profile_sap_system, string[] filter_system_profile_sap_sids_in, string[] tags, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/export/packages/"+ (package_name==null? "" : System.Uri.EscapeDataString(package_name))+"/systems&filter[system_profile][sap_system]=" + (filter_system_profile_sap_system==null? "" : System.Uri.EscapeDataString(filter_system_profile_sap_system))+"&"+string.Join("&", filter_system_profile_sap_sids_in.Select(z => $"filter[system_profile][sap_sids][in]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersPackageSystemItem[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Export systems for my account
		/// Export systems for my account
		/// ExportSystems api/patch/v1/export/systems
		/// </summary>
		/// <param name="search">Find matching text</param>
		/// <param name="filter_id">Filter</param>
		/// <param name="filter_display_name">Filter</param>
		/// <param name="filter_last_evaluation">Filter</param>
		/// <param name="filter_last_upload">Filter</param>
		/// <param name="filter_rhsa_count">Filter</param>
		/// <param name="filter_rhba_count">Filter</param>
		/// <param name="filter_rhea_count">Filter</param>
		/// <param name="filter_other_count">Filter</param>
		/// <param name="filter_stale">Filter</param>
		/// <param name="filter_packages_installed">Filter</param>
		/// <param name="filter_packages_updatable">Filter</param>
		/// <param name="filter_system_profile_sap_system">Filter only SAP systems</param>
		/// <param name="filter_system_profile_sap_sids_in">Filter systems by their SAP SIDs</param>
		/// <param name="tags">Tag filter</param>
		/// <returns>OK</returns>
		public async Task<ControllersSystemInlineItem[]> ExportSystemsAsync(
					string search, 
					string filter_id, 
					string filter_display_name, 
					string filter_last_evaluation, 
					string filter_last_upload, 
					string filter_rhsa_count, 
					string filter_rhba_count, 
					string filter_rhea_count, 
					string filter_other_count, 
					string filter_stale, 
					string filter_packages_installed, 
					string filter_packages_updatable, 
					string filter_system_profile_sap_system, 
					string[] filter_system_profile_sap_sids_in, 
					string[] tags, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/export/systems?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&filter[id]=" + (filter_id==null? "" : System.Uri.EscapeDataString(filter_id))+"&filter[display_name]=" + (filter_display_name==null? "" : System.Uri.EscapeDataString(filter_display_name))+"&filter[last_evaluation]=" + (filter_last_evaluation==null? "" : System.Uri.EscapeDataString(filter_last_evaluation))+"&filter[last_upload]=" + (filter_last_upload==null? "" : System.Uri.EscapeDataString(filter_last_upload))+"&filter[rhsa_count]=" + (filter_rhsa_count==null? "" : System.Uri.EscapeDataString(filter_rhsa_count))+"&filter[rhba_count]=" + (filter_rhba_count==null? "" : System.Uri.EscapeDataString(filter_rhba_count))+"&filter[rhea_count]=" + (filter_rhea_count==null? "" : System.Uri.EscapeDataString(filter_rhea_count))+"&filter[other_count]=" + (filter_other_count==null? "" : System.Uri.EscapeDataString(filter_other_count))+"&filter[stale]=" + (filter_stale==null? "" : System.Uri.EscapeDataString(filter_stale))+"&filter[packages_installed]=" + (filter_packages_installed==null? "" : System.Uri.EscapeDataString(filter_packages_installed))+"&filter[packages_updatable]=" + (filter_packages_updatable==null? "" : System.Uri.EscapeDataString(filter_packages_updatable))+"&filter[system_profile][sap_system]=" + (filter_system_profile_sap_system==null? "" : System.Uri.EscapeDataString(filter_system_profile_sap_system))+"&"+string.Join("&", filter_system_profile_sap_sids_in.Select(z => $"filter[system_profile][sap_sids][in]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersSystemInlineItem[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Export applicable advisories for all my systems
		/// Export applicable advisories for all my systems
		/// ExportSystemAdvisories api/patch/v1/export/systems/{inventory_id}/advisories
		/// </summary>
		/// <param name="inventory_id">Inventory ID</param>
		/// <param name="search">Find matching text</param>
		/// <param name="filter_id">Filter</param>
		/// <param name="filter_description">Filter</param>
		/// <param name="filter_public_date">Filter</param>
		/// <param name="filter_synopsis">Filter</param>
		/// <param name="filter_advisory_type">Filter</param>
		/// <param name="filter_severity">Filter</param>
		/// <returns>OK</returns>
		public async Task<ControllersSystemAdvisoriesDBLookup[]> ExportSystemAdvisoriesAsync(string inventory_id, string search, string filter_id, string filter_description, string filter_public_date, string filter_synopsis, string filter_advisory_type, string filter_severity, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/export/systems/"+ (inventory_id==null? "" : System.Uri.EscapeDataString(inventory_id))+"/advisories&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&filter[id]=" + (filter_id==null? "" : System.Uri.EscapeDataString(filter_id))+"&filter[description]=" + (filter_description==null? "" : System.Uri.EscapeDataString(filter_description))+"&filter[public_date]=" + (filter_public_date==null? "" : System.Uri.EscapeDataString(filter_public_date))+"&filter[synopsis]=" + (filter_synopsis==null? "" : System.Uri.EscapeDataString(filter_synopsis))+"&filter[advisory_type]=" + (filter_advisory_type==null? "" : System.Uri.EscapeDataString(filter_advisory_type))+"&filter[severity]=" + (filter_severity==null? "" : System.Uri.EscapeDataString(filter_severity));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersSystemAdvisoriesDBLookup[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show me details about a system packages by given inventory id
		/// Show me details about a system packages by given inventory id
		/// ExportSystemPackages api/patch/v1/export/systems/{inventory_id}/packages
		/// </summary>
		/// <param name="inventory_id">Inventory ID</param>
		/// <param name="search">Find matching text</param>
		/// <param name="filter_name">Filter</param>
		/// <param name="filter_description">Filter</param>
		/// <param name="filter_evra">Filter</param>
		/// <param name="filter_summary">Filter</param>
		/// <param name="filter_updatable">Filter</param>
		/// <returns>OK</returns>
		public async Task<ControllersSystemPackageInline[]> ExportSystemPackagesAsync(string inventory_id, string search, string filter_name, string filter_description, string filter_evra, string filter_summary, bool filter_updatable, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/export/systems/"+ (inventory_id==null? "" : System.Uri.EscapeDataString(inventory_id))+"/packages&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&filter[name]=" + (filter_name==null? "" : System.Uri.EscapeDataString(filter_name))+"&filter[description]=" + (filter_description==null? "" : System.Uri.EscapeDataString(filter_description))+"&filter[evra]=" + (filter_evra==null? "" : System.Uri.EscapeDataString(filter_evra))+"&filter[summary]=" + (filter_summary==null? "" : System.Uri.EscapeDataString(filter_summary))+"&filter[updatable]="+filter_updatable;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersSystemPackageInline[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show me all installed packages across my systems
		/// Show me all installed packages across my systems
		/// ListPackages api/patch/v1/packages/
		/// </summary>
		/// <param name="limit">Limit for paging, set -1 to return all</param>
		/// <param name="offset">Offset for paging</param>
		/// <param name="sort">Sort field</param>
		/// <param name="search">Find matching text</param>
		/// <param name="filter_name">Filter</param>
		/// <param name="filter_systems_installed">Filter</param>
		/// <param name="filter_systems_updatable">Filter</param>
		/// <param name="filter_summary">Filter</param>
		/// <param name="tags">Tag filter</param>
		/// <param name="filter_system_profile_sap_system">Filter only SAP systems</param>
		/// <param name="filter_system_profile_sap_sids_in">Filter systems by their SAP SIDs</param>
		/// <returns>OK</returns>
		public async Task<ControllersPackagesResponse> ListPackagesAsync(int limit, int offset, ExportPackagesSort sort, string search, string filter_name, string filter_systems_installed, string filter_systems_updatable, string filter_summary, string[] tags, string filter_system_profile_sap_system, string[] filter_system_profile_sap_sids_in, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/packages/?limit="+limit+"&offset="+offset+"&sort=" + sort+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&filter[name]=" + (filter_name==null? "" : System.Uri.EscapeDataString(filter_name))+"&filter[systems_installed]=" + (filter_systems_installed==null? "" : System.Uri.EscapeDataString(filter_systems_installed))+"&filter[systems_updatable]=" + (filter_systems_updatable==null? "" : System.Uri.EscapeDataString(filter_systems_updatable))+"&filter[summary]=" + (filter_summary==null? "" : System.Uri.EscapeDataString(filter_summary))+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&filter[system_profile][sap_system]=" + (filter_system_profile_sap_system==null? "" : System.Uri.EscapeDataString(filter_system_profile_sap_system))+"&"+string.Join("&", filter_system_profile_sap_sids_in.Select(z => $"filter[system_profile][sap_sids][in]={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersPackagesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show me metadata of selected package
		/// Show me metadata of selected package
		/// LatestPackage api/patch/v1/packages/{package_name}
		/// </summary>
		/// <param name="package_name">package_name - latest, nevra - exact version</param>
		/// <returns>OK</returns>
		public async Task<ControllersPackageDetailResponse> LatestPackageAsync(string package_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/packages/"+ (package_name==null? "" : System.Uri.EscapeDataString(package_name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersPackageDetailResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show me all my systems which have a package installed
		/// Show me all my systems which have a package installed
		/// PackageSystems api/patch/v1/packages/{package_name}/systems
		/// </summary>
		/// <param name="limit">Limit for paging, set -1 to return all</param>
		/// <param name="offset">Offset for paging</param>
		/// <param name="package_name">Package name</param>
		/// <param name="tags">Tag filter</param>
		/// <param name="filter_system_profile_sap_system">Filter only SAP systems</param>
		/// <param name="filter_system_profile_sap_sids_in">Filter systems by their SAP SIDs</param>
		/// <returns>OK</returns>
		public async Task<ControllersPackageSystemsResponse> PackageSystemsAsync(int limit, int offset, string package_name, string[] tags, string filter_system_profile_sap_system, string[] filter_system_profile_sap_sids_in, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/packages/"+ (package_name==null? "" : System.Uri.EscapeDataString(package_name))+"/systems?limit="+limit+"&offset="+offset+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&filter[system_profile][sap_system]=" + (filter_system_profile_sap_system==null? "" : System.Uri.EscapeDataString(filter_system_profile_sap_system))+"&"+string.Join("&", filter_system_profile_sap_sids_in.Select(z => $"filter[system_profile][sap_sids][in]={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersPackageSystemsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show me all package versions installed on some system
		/// Show me all package versions installed on some system
		/// PackageVersions api/patch/v1/packages/{package_name}/versions
		/// </summary>
		/// <param name="limit">Limit for paging, set -1 to return all</param>
		/// <param name="offset">Offset for paging</param>
		/// <param name="package_name">Package name</param>
		/// <returns>OK</returns>
		public async Task<ControllersPackageVersionsResponse> PackageVersionsAsync(int limit, int offset, string package_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/packages/"+ (package_name==null? "" : System.Uri.EscapeDataString(package_name))+"/versions?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersPackageVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show me all my systems
		/// Show me all my systems
		/// ListSystems api/patch/v1/systems
		/// </summary>
		/// <param name="limit">Limit for paging, set -1 to return all</param>
		/// <param name="offset">Offset for paging</param>
		/// <param name="sort">Sort field</param>
		/// <param name="search">Find matching text</param>
		/// <param name="filter_insights_id">Filter</param>
		/// <param name="filter_id">Filter</param>
		/// <param name="filter_display_name">Filter</param>
		/// <param name="filter_last_evaluation">Filter</param>
		/// <param name="filter_last_upload">Filter</param>
		/// <param name="filter_rhsa_count">Filter</param>
		/// <param name="filter_rhba_count">Filter</param>
		/// <param name="filter_rhea_count">Filter</param>
		/// <param name="filter_other_count">Filter</param>
		/// <param name="filter_stale">Filter</param>
		/// <param name="filter_packages_installed">Filter</param>
		/// <param name="filter_packages_updatable">Filter</param>
		/// <param name="filter_stale_timestamp">Filter</param>
		/// <param name="filter_stale_warning_timestamp">Filter</param>
		/// <param name="filter_culled_timestamp">Filter</param>
		/// <param name="filter_created">Filter</param>
		/// <param name="tags">Tag filter</param>
		/// <param name="filter_system_profile_sap_system">Filter only SAP systems</param>
		/// <param name="filter_system_profile_sap_sids_in">Filter systems by their SAP SIDs</param>
		/// <returns>OK</returns>
		public async Task<ControllersSystemsResponse> ListSystemsAsync(
					int limit, 
					int offset, 
					ListSystemsSort sort, 
					string search, 
					string filter_insights_id, 
					string filter_id, 
					string filter_display_name, 
					string filter_last_evaluation, 
					string filter_last_upload, 
					string filter_rhsa_count, 
					string filter_rhba_count, 
					string filter_rhea_count, 
					string filter_other_count, 
					string filter_stale, 
					string filter_packages_installed, 
					string filter_packages_updatable, 
					string filter_stale_timestamp, 
					string filter_stale_warning_timestamp, 
					string filter_culled_timestamp, 
					string filter_created, 
					string[] tags, 
					string filter_system_profile_sap_system, 
					string[] filter_system_profile_sap_sids_in, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/systems?limit="+limit+"&offset="+offset+"&sort=" + sort+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&filter[insights_id]=" + (filter_insights_id==null? "" : System.Uri.EscapeDataString(filter_insights_id))+"&filter[id]=" + (filter_id==null? "" : System.Uri.EscapeDataString(filter_id))+"&filter[display_name]=" + (filter_display_name==null? "" : System.Uri.EscapeDataString(filter_display_name))+"&filter[last_evaluation]=" + (filter_last_evaluation==null? "" : System.Uri.EscapeDataString(filter_last_evaluation))+"&filter[last_upload]=" + (filter_last_upload==null? "" : System.Uri.EscapeDataString(filter_last_upload))+"&filter[rhsa_count]=" + (filter_rhsa_count==null? "" : System.Uri.EscapeDataString(filter_rhsa_count))+"&filter[rhba_count]=" + (filter_rhba_count==null? "" : System.Uri.EscapeDataString(filter_rhba_count))+"&filter[rhea_count]=" + (filter_rhea_count==null? "" : System.Uri.EscapeDataString(filter_rhea_count))+"&filter[other_count]=" + (filter_other_count==null? "" : System.Uri.EscapeDataString(filter_other_count))+"&filter[stale]=" + (filter_stale==null? "" : System.Uri.EscapeDataString(filter_stale))+"&filter[packages_installed]=" + (filter_packages_installed==null? "" : System.Uri.EscapeDataString(filter_packages_installed))+"&filter[packages_updatable]=" + (filter_packages_updatable==null? "" : System.Uri.EscapeDataString(filter_packages_updatable))+"&filter[stale_timestamp]=" + (filter_stale_timestamp==null? "" : System.Uri.EscapeDataString(filter_stale_timestamp))+"&filter[stale_warning_timestamp]=" + (filter_stale_warning_timestamp==null? "" : System.Uri.EscapeDataString(filter_stale_warning_timestamp))+"&filter[culled_timestamp]=" + (filter_culled_timestamp==null? "" : System.Uri.EscapeDataString(filter_culled_timestamp))+"&filter[created]=" + (filter_created==null? "" : System.Uri.EscapeDataString(filter_created))+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&filter[system_profile][sap_system]=" + (filter_system_profile_sap_system==null? "" : System.Uri.EscapeDataString(filter_system_profile_sap_system))+"&"+string.Join("&", filter_system_profile_sap_sids_in.Select(z => $"filter[system_profile][sap_sids][in]={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersSystemsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete system by inventory id
		/// Delete system by inventory id
		/// Deletesystem api/patch/v1/systems/{inventory_id}
		/// </summary>
		/// <param name="inventory_id">Inventory ID</param>
		/// <returns>Ok</returns>
		public async Task DeletesystemAsync(string inventory_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/systems/"+ (inventory_id==null? "" : System.Uri.EscapeDataString(inventory_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show me details about a system by given inventory id
		/// Show me details about a system by given inventory id
		/// DetailSystem api/patch/v1/systems/{inventory_id}
		/// </summary>
		/// <param name="inventory_id">Inventory ID</param>
		/// <returns>OK</returns>
		public async Task<ControllersSystemDetailResponse> DetailSystemAsync(string inventory_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/systems/"+ (inventory_id==null? "" : System.Uri.EscapeDataString(inventory_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersSystemDetailResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show me advisories for a system by given inventory id
		/// Show me advisories for a system by given inventory id
		/// ListSystemAdvisories api/patch/v1/systems/{inventory_id}/advisories
		/// </summary>
		/// <param name="inventory_id">Inventory ID</param>
		/// <param name="limit">Limit for paging, set -1 to return all</param>
		/// <param name="offset">Offset for paging</param>
		/// <param name="sort">Sort field</param>
		/// <param name="search">Find matching text</param>
		/// <param name="filter_id">Filter</param>
		/// <param name="filter_description">Filter</param>
		/// <param name="filter_public_date">Filter</param>
		/// <param name="filter_synopsis">Filter</param>
		/// <param name="filter_advisory_type">Filter</param>
		/// <param name="filter_severity">Filter</param>
		/// <returns>OK</returns>
		public async Task<ControllersSystemAdvisoriesResponse> ListSystemAdvisoriesAsync(string inventory_id, int limit, int offset, ListSystemAdvisoriesSort sort, string search, string filter_id, string filter_description, string filter_public_date, string filter_synopsis, string filter_advisory_type, string filter_severity, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/systems/"+ (inventory_id==null? "" : System.Uri.EscapeDataString(inventory_id))+"/advisories&limit="+limit+"&offset="+offset+"&sort=" + sort+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&filter[id]=" + (filter_id==null? "" : System.Uri.EscapeDataString(filter_id))+"&filter[description]=" + (filter_description==null? "" : System.Uri.EscapeDataString(filter_description))+"&filter[public_date]=" + (filter_public_date==null? "" : System.Uri.EscapeDataString(filter_public_date))+"&filter[synopsis]=" + (filter_synopsis==null? "" : System.Uri.EscapeDataString(filter_synopsis))+"&filter[advisory_type]=" + (filter_advisory_type==null? "" : System.Uri.EscapeDataString(filter_advisory_type))+"&filter[severity]=" + (filter_severity==null? "" : System.Uri.EscapeDataString(filter_severity));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersSystemAdvisoriesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show me details about a system packages by given inventory id
		/// Show me details about a system packages by given inventory id
		/// SystemPackages api/patch/v1/systems/{inventory_id}/packages
		/// </summary>
		/// <param name="inventory_id">Inventory ID</param>
		/// <param name="limit">Limit for paging, set -1 to return all</param>
		/// <param name="offset">Offset for paging</param>
		/// <param name="search">Find matching text</param>
		/// <param name="filter_name">Filter</param>
		/// <param name="filter_description">Filter</param>
		/// <param name="filter_evra">Filter</param>
		/// <param name="filter_summary">Filter</param>
		/// <param name="filter_updatable">Filter</param>
		/// <returns>OK</returns>
		public async Task<ControllersSystemPackageResponse> SystemPackagesAsync(string inventory_id, int limit, int offset, string search, string filter_name, string filter_description, string filter_evra, string filter_summary, bool filter_updatable, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/systems/"+ (inventory_id==null? "" : System.Uri.EscapeDataString(inventory_id))+"/packages&limit="+limit+"&offset="+offset+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&filter[name]=" + (filter_name==null? "" : System.Uri.EscapeDataString(filter_name))+"&filter[description]=" + (filter_description==null? "" : System.Uri.EscapeDataString(filter_description))+"&filter[evra]=" + (filter_evra==null? "" : System.Uri.EscapeDataString(filter_evra))+"&filter[summary]=" + (filter_summary==null? "" : System.Uri.EscapeDataString(filter_summary))+"&filter[updatable]="+filter_updatable;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersSystemPackageResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View advisory-system pairs for selected systems and advisories
		/// View advisory-system pairs for selected systems and advisories
		/// ViewAdvisoriesSystems api/patch/v1/views/advisories/systems
		/// </summary>
		/// <param name="requestBody">Request body</param>
		/// <returns>OK</returns>
		public async Task<ControllersAdvisoriesSystemsResponse> ViewAdvisoriesSystemsAsync(ControllersSystemsAdvisoriesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/views/advisories/systems";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersAdvisoriesSystemsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View system-advisory pairs for selected systems and advisories
		/// View system-advisory pairs for selected systems and advisories
		/// ViewSystemsAdvisories api/patch/v1/views/systems/advisories
		/// </summary>
		/// <param name="requestBody">Request body</param>
		/// <returns>OK</returns>
		public async Task<ControllersSystemsAdvisoriesResponse> ViewSystemsAdvisoriesAsync(ControllersSystemsAdvisoriesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/patch/v1/views/systems/advisories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ControllersSystemsAdvisoriesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ListAdvisoriesSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		advisory_type = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		synopsis = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		public_date = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		applicable_systems = 5,
	}
	
	public enum ListAdvisorySystemsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		display_name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last_evaluation = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last_upload = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rhsa_count = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rhba_count = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rhea_count = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other_count = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stale = 8,
	}
	
	public enum ExportPackagesSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		systems_installed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		systems_updatable = 3,
	}
	
	public enum ListSystemsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		display_name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last_evaluation = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last_upload = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rhsa_count = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rhba_count = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rhea_count = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other_count = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stale = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		packages_installed = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		packages_updatable = 10,
	}
	
	public enum ListSystemAdvisoriesSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		type = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		synopsis = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		public_date = 4,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
