//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NewQuote
	{
		
		/// <summary>
		/// Author name of quote.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// The Quote.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quote")]
		public string Quote { get; set; }
		
		/// <summary>
		/// Array of tags/categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QOD : Quote
	{
		
		/// <summary>
		/// Date this quote of the day belongs to
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Title of the QOD category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QODResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public object Contents { get; set; }
		
		/// <summary>
		/// Metadata about this successful call
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Quote : NewQuote
	{
		
		/// <summary>
		/// Unique identifier representing a specific quote in theysaidso.com.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL that can be used for background to display this quote.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// Length of the quote string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuoteResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public object Contents { get; set; }
		
		/// <summary>
		/// Metadata about this successful call
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuccessResponse
	{
		
		/// <summary>
		/// Contents relevant to this successful call
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string[] Contents { get; set; }
		
		/// <summary>
		/// Metadata about this successful call
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets `Quote of the Day` (QOD). Optional `category` param determines the category of returned quote of the day
		/// 
		/// QodGetByCategoryAndLanguageAndId qod
		/// </summary>
		/// <param name="category">QOD Category (Used in public QOD only)</param>
		/// <param name="language">Language of the QOD. The language must be supported in our QOD system.</param>
		/// <param name="id">QOD defition id (Used in private QOD only)</param>
		/// <returns>200  response</returns>
		public async Task<QODResponse> QodGetByCategoryAndLanguageAndIdAsync(string category, string language, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qod?category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QODResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing private `Quote of the Day` definition.
		/// 
		/// QodPatchByRepeat_afterAndAuthorsAndTitleAnd_privateAndLanguageAndSfw qod
		/// </summary>
		/// <param name="repeat_after">How many days after the quotes can repeat? If you are setting this up from your private collection make sure you have more quotes that meet the filter conditions than the days you specify here.</param>
		/// <param name="authors">Comma seperated author names. Quotes will be chosen from one of these authors.</param>
		/// <param name="title">Title of the Quote of the day category</param>
		/// <param name="_private">Should apply the filters to the private collection. Default is public quotes in the platform.</param>
		/// <param name="language">Quotes language.</param>
		/// <param name="sfw">Consider only quotes marked as "sfw" (Safe for work).</param>
		/// <returns>200  response</returns>
		public async Task<QuoteResponse> QodPatchByRepeat_afterAndAuthorsAndTitleAnd_privateAndLanguageAndSfwAsync(string repeat_after, string authors, string title, string _private, string language, string sfw, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qod?repeat_after=" + (repeat_after==null? "" : System.Uri.EscapeDataString(repeat_after))+"&authors=" + (authors==null? "" : System.Uri.EscapeDataString(authors))+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&private=" + (_private==null? "" : System.Uri.EscapeDataString(_private))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&sfw=" + (sfw==null? "" : System.Uri.EscapeDataString(sfw));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QuoteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a private `Quote of the Day` service.
		/// 
		/// QodPutByRepeat_afterAndAuthorsAndTitleAnd_privateAndLanguageAndSfw qod
		/// </summary>
		/// <param name="repeat_after">How many days after the quotes can repeat? If you are setting this up from your private collection make sure you have more quotes that meet the filter conditions than the days you specify here.</param>
		/// <param name="authors">Comma seperated author names. Quotes will be chosen from one of these authors.</param>
		/// <param name="title">Title of the Quote of the day category</param>
		/// <param name="_private">Should apply the filters to the private collection. Default is public quotes in the platform.</param>
		/// <param name="language">Quotes language.</param>
		/// <param name="sfw">Consider only quotes marked as "sfw" (Safe for work).</param>
		/// <returns>200  response</returns>
		public async Task<SuccessResponse> QodPutByRepeat_afterAndAuthorsAndTitleAnd_privateAndLanguageAndSfwAsync(string repeat_after, string authors, string title, string _private, string language, string sfw, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qod?repeat_after=" + (repeat_after==null? "" : System.Uri.EscapeDataString(repeat_after))+"&authors=" + (authors==null? "" : System.Uri.EscapeDataString(authors))+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&private=" + (_private==null? "" : System.Uri.EscapeDataString(_private))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&sfw=" + (sfw==null? "" : System.Uri.EscapeDataString(sfw));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuccessResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of `Quote of the Day` Categories.
		/// 
		/// QodCategoriesGetByLanguageAndDetailed qod/categories
		/// </summary>
		/// <param name="language">Language of the QOD category. The language must be supported in our QOD system.</param>
		/// <param name="detailed">Return detailed information of the categories. Note the data format changes between the two values of this switch.</param>
		/// <returns>200  response</returns>
		public async Task QodCategoriesGetByLanguageAndDetailedAsync(string language, string detailed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qod/categories?language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&detailed=" + (detailed==null? "" : System.Uri.EscapeDataString(detailed));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of supported languages for `Quote of the Day`.
		/// 
		/// QodLanguagesGet qod/languages
		/// </summary>
		/// <returns>200  response</returns>
		public async Task QodLanguagesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qod/languages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a qshow.
		/// 
		/// QshowDeleteById qshow
		/// </summary>
		/// <param name="id">Qshow ID</param>
		/// <returns>200  response</returns>
		public async Task QshowDeleteByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qshow?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a details about a qshow.
		/// 
		/// QshowGetById qshow
		/// </summary>
		/// <param name="id">Qshow ID</param>
		/// <returns>200  response</returns>
		public async Task QshowGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qshow?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing qshow.
		/// QshowPatchByIdAndTitleAndDescriptionAndTags qshow
		/// </summary>
		/// <param name="id">Qshow ID</param>
		/// <param name="title">Qshow title</param>
		/// <param name="description">Qshow description</param>
		/// <param name="tags">Tags for the qshow</param>
		/// <returns>200  response</returns>
		public async Task QshowPatchByIdAndTitleAndDescriptionAndTagsAsync(string id, string title, string description, string[] tags, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qshow?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create and add a new qshow to your private collection.
		/// QshowPutByTitleAndDescriptionAndTags qshow
		/// </summary>
		/// <param name="title">Qshow title</param>
		/// <param name="description">Qshow description</param>
		/// <param name="tags">Tags for the qshow</param>
		/// <returns>200  response</returns>
		public async Task QshowPutByTitleAndDescriptionAndTagsAsync(string title, string description, string[] tags, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qshow?title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of Qshows in They Said So platform.
		/// QshowListGetByStartAnd_public qshow/list
		/// </summary>
		/// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
		/// <param name="_public">Should include public qshows or not in the list</param>
		/// <returns>200  response</returns>
		public async Task QshowListGetByStartAnd_publicAsync(int start, string _public, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qshow/list?start="+start+"&public=" + (_public==null? "" : System.Uri.EscapeDataString(_public));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the quotes in a given Qshow.
		/// QshowQuotesGetById qshow/quotes
		/// </summary>
		/// <param name="id">Qshow ID</param>
		/// <returns>200  response</returns>
		public async Task QshowQuotesGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qshow/quotes?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a quote to a given Qshow.
		/// QshowQuotesAddPostByIdAndQuoteid qshow/quotes/add
		/// </summary>
		/// <param name="id">Qshow ID</param>
		/// <param name="quoteid">Quote ID to add the qshow collection</param>
		/// <returns>200  response</returns>
		public async Task QshowQuotesAddPostByIdAndQuoteidAsync(string id, string quoteid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qshow/quotes/add?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&quoteid=" + (quoteid==null? "" : System.Uri.EscapeDataString(quoteid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a quote to a given Qshow.
		/// QshowQuotesRemovePostByIdAndQuoteid qshow/quotes/remove
		/// </summary>
		/// <param name="id">Qshow ID</param>
		/// <param name="quoteid">Quote ID to remove from the qshow collection</param>
		/// <returns>200  response</returns>
		public async Task QshowQuotesRemovePostByIdAndQuoteidAsync(string id, string quoteid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qshow/quotes/remove?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&quoteid=" + (quoteid==null? "" : System.Uri.EscapeDataString(quoteid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a quote. The user needs to be the owner of the quote to be able to delete it.
		/// 
		/// QuoteDeleteById quote
		/// </summary>
		/// <param name="id">Quote ID</param>
		/// <returns>200  response</returns>
		public async Task QuoteDeleteByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a `Quote` with a given `id`.
		/// QuoteGetById quote
		/// </summary>
		/// <param name="id">Quote ID</param>
		/// <returns>200  response</returns>
		public async Task<QuoteResponse> QuoteGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QuoteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a quote
		/// QuotePatchByIdAndQuoteAndAuthorAndLanguageAndTags quote
		/// </summary>
		/// <param name="id">Quote ID</param>
		/// <param name="quote">Quote</param>
		/// <param name="author">Quote Author</param>
		/// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
		/// <param name="tags">Comma Separated tags</param>
		/// <returns>200  response</returns>
		public async Task QuotePatchByIdAndQuoteAndAuthorAndLanguageAndTagsAsync(string id, string quote, string author, string language, string tags, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&quote=" + (quote==null? "" : System.Uri.EscapeDataString(quote))+"&author=" + (author==null? "" : System.Uri.EscapeDataString(author))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new quote to your private collection. Same as 'PUT' but added since some clients don't handle PUT well.
		/// QuotePostByQuoteAndAuthorAndTagsAndLanguage quote
		/// </summary>
		/// <param name="quote">Quote</param>
		/// <param name="author">Quote Author</param>
		/// <param name="tags">Comma Separated tags</param>
		/// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
		/// <returns>200  response</returns>
		public async Task QuotePostByQuoteAndAuthorAndTagsAndLanguageAsync(string quote, string author, string tags, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote?quote=" + (quote==null? "" : System.Uri.EscapeDataString(quote))+"&author=" + (author==null? "" : System.Uri.EscapeDataString(author))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new quote to your private collection.
		/// QuotePutByQuoteAndAuthorAndTagsAndLanguage quote
		/// </summary>
		/// <param name="quote">Quote</param>
		/// <param name="author">Quote Author</param>
		/// <param name="tags">Comma Separated tags</param>
		/// <param name="language">Language. If not supplied an auto detection mechanism will be used to detect a language.</param>
		/// <returns>200  response</returns>
		public async Task QuotePutByQuoteAndAuthorAndTagsAndLanguageAsync(string quote, string author, string tags, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote?quote=" + (quote==null? "" : System.Uri.EscapeDataString(quote))+"&author=" + (author==null? "" : System.Uri.EscapeDataString(author))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of popular author names in the system.
		/// 
		/// QuoteAuthorsPopularGetByLanguageAndDetailedAndStartAndLimit quote/authors/popular
		/// </summary>
		/// <param name="language">Language. A same author may have quotes in two or more different languages. So for example 'Mahatma Gandhi' may be returned for language "en"(English), and "மஹாத்மா காந்தி" may be returned when the language is "ta" (Tamil).</param>
		/// <param name="detailed">Should return detailed author information such as `birthday`, `death date`, `occupation`, `description` etc. Only available at certain subscription levels.</param>
		/// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
		/// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
		/// <returns>200  response</returns>
		public async Task QuoteAuthorsPopularGetByLanguageAndDetailedAndStartAndLimitAsync(string language, string detailed, int start, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/authors/popular?language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&detailed=" + (detailed==null? "" : System.Uri.EscapeDataString(detailed))+"&start="+start+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of author names in the system.
		/// 
		/// QuoteAuthorsSearchGetByQueryAndLanguageAndDetailedAndStartAndLimit quote/authors/search
		/// </summary>
		/// <param name="query">Text string to search for in author names</param>
		/// <param name="language">Language. A same author may have quotes in two or more different languages. So for example 'Mahatma Gandhi' may be returned for language "en"(English), and "மஹாத்மா காந்தி" may be returned when the language is "ta" (Tamil).</param>
		/// <param name="detailed">Should return detailed author information such as `birthday`, `death date`, `occupation`, `description` etc. Only available at certain subscription levels.</param>
		/// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
		/// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
		/// <returns>200  response</returns>
		public async Task QuoteAuthorsSearchGetByQueryAndLanguageAndDetailedAndStartAndLimitAsync(string query, string language, string detailed, int start, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/authors/search?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&detailed=" + (detailed==null? "" : System.Uri.EscapeDataString(detailed))+"&start="+start+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Toggle the user bookmark of the given Quote as a user of the API Key.
		/// QuoteBookmarkToggleGetByQuote_id quote/bookmark/toggle
		/// </summary>
		/// <param name="quote_id">Quote ID</param>
		/// <returns>200  response</returns>
		public async Task QuoteBookmarkToggleGetByQuote_idAsync(string quote_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/bookmark/toggle?quote_id=" + (quote_id==null? "" : System.Uri.EscapeDataString(quote_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of popular `Quote` Categories.
		/// 
		/// QuoteCategoriesPopularGetByStartAndLimit quote/categories/popular
		/// </summary>
		/// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
		/// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
		/// <returns>200  response</returns>
		public async Task QuoteCategoriesPopularGetByStartAndLimitAsync(int start, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/categories/popular?start="+start+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of `Quote` Categories matching the query string.
		/// 
		/// QuoteCategoriesSearchGetByQueryAndStartAndLimit quote/categories/search
		/// </summary>
		/// <param name="query">Text string to search for in the categories</param>
		/// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
		/// <param name="limit">Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.</param>
		/// <returns>200  response</returns>
		public async Task QuoteCategoriesSearchGetByQueryAndStartAndLimitAsync(string query, int start, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/categories/search?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&start="+start+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a quote image. The user needs to be the owner of the quote image to be able to delete it.
		/// 
		/// QuoteImageDeleteById quote/image
		/// </summary>
		/// <param name="id">Quote Image ID</param>
		/// <returns>200  response</returns>
		public async Task QuoteImageDeleteByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/image?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Quote image for a given id. Response can be an image file as a binary or a base64 encoded contents wrapped in json. `TODO`
		/// 
		/// QuoteImageGetByIdAndBinary quote/image
		/// </summary>
		/// <param name="id">Quote Image id</param>
		/// <param name="binary">Should the response be a direct file download of the image or a base64 encoded image file wrapped in json?</param>
		/// <returns>200  response</returns>
		public async Task QuoteImageGetByIdAndBinaryAsync(string id, string binary, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/image?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&binary=" + (binary==null? "" : System.Uri.EscapeDataString(binary));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new quote image for a given quote. Choose background colors/images , choose different font styles and generate a beautiful quote image. Did you just had a feeling of being a god or what?!
		/// 
		/// QuoteImagePutByQuote_idAndBgimage_idAndBg_colorAndFont_idAndText_colorAndText_sizeAndHalignAndValignAndWidthAndHeightAndBrandingAndInclude_transparent_layer quote/image
		/// </summary>
		/// <param name="quote_id">Quote id</param>
		/// <param name="bgimage_id">Background Image id ( Will override bgcolor if supplied)</param>
		/// <param name="bg_color">Background Color(if background image id is not supplied)</param>
		/// <param name="font_id">Font id</param>
		/// <param name="text_color">Text Color</param>
		/// <param name="text_size">Text/font size</param>
		/// <param name="halign">Horizontal text Alignment Value</param>
		/// <param name="valign">Vertical text Alignment Value</param>
		/// <param name="width">Image Width(By default this takes the width of the background image)</param>
		/// <param name="height">Image Height(By default this takes the height of the background image)</param>
		/// <param name="branding">Disable They Said So branding (Only available in certain subscription levels. Ignored in other levels)</param>
		/// <param name="include_transparent_layer">Should include a transparent layer between the text and the background image? This helps when the background image is bright and obscures the text.</param>
		/// <returns>200  response</returns>
		public async Task QuoteImagePutByQuote_idAndBgimage_idAndBg_colorAndFont_idAndText_colorAndText_sizeAndHalignAndValignAndWidthAndHeightAndBrandingAndInclude_transparent_layerAsync(string quote_id, string bgimage_id, string bg_color, string font_id, string text_color, string text_size, string halign, string valign, string width, string height, string branding, string include_transparent_layer, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/image?quote_id=" + (quote_id==null? "" : System.Uri.EscapeDataString(quote_id))+"&bgimage_id=" + (bgimage_id==null? "" : System.Uri.EscapeDataString(bgimage_id))+"&bg_color=" + (bg_color==null? "" : System.Uri.EscapeDataString(bg_color))+"&font_id=" + (font_id==null? "" : System.Uri.EscapeDataString(font_id))+"&text_color=" + (text_color==null? "" : System.Uri.EscapeDataString(text_color))+"&text_size=" + (text_size==null? "" : System.Uri.EscapeDataString(text_size))+"&halign=" + (halign==null? "" : System.Uri.EscapeDataString(halign))+"&valign=" + (valign==null? "" : System.Uri.EscapeDataString(valign))+"&width=" + (width==null? "" : System.Uri.EscapeDataString(width))+"&height=" + (height==null? "" : System.Uri.EscapeDataString(height))+"&branding=" + (branding==null? "" : System.Uri.EscapeDataString(branding))+"&include_transparent_layer=" + (include_transparent_layer==null? "" : System.Uri.EscapeDataString(include_transparent_layer));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a background image file. The user needs to be the owner of the background image to be able to delete it.
		/// 
		/// QuoteImageBackgroundDeleteById quote/image/background
		/// </summary>
		/// <param name="id">Font ID</param>
		/// <returns>200  response</returns>
		public async Task QuoteImageBackgroundDeleteByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/image/background?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists background images in your private collection.
		/// 
		/// QuoteImageBackgroundListGetByStart quote/image/background/list
		/// </summary>
		/// <param name="start">Response is paged. This parameter determines where the response should start.</param>
		/// <returns>200  response</returns>
		public async Task QuoteImageBackgroundListGetByStartAsync(string start, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/image/background/list?start=" + (start==null? "" : System.Uri.EscapeDataString(start));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches for a background image with a given tag.
		/// 
		/// QuoteImageBackgroundSearchGetByQuery quote/image/background/search
		/// </summary>
		/// <param name="query">Tag string</param>
		/// <returns>200  response</returns>
		public async Task QuoteImageBackgroundSearchGetByQueryAsync(string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/image/background/search?query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a tag to a given Image.
		/// QuoteImageBackgroundTagsAddPostByIdAndTags quote/image/background/tags/add
		/// </summary>
		/// <param name="id">Image ID</param>
		/// <param name="tags">Comma Separated tags</param>
		/// <returns>200  response</returns>
		public async Task QuoteImageBackgroundTagsAddPostByIdAndTagsAsync(string id, string tags, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/image/background/tags/add?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a tag from a given Image.
		/// QuoteImageBackgroundTagsRemovePostByIdAndTags quote/image/background/tags/remove
		/// </summary>
		/// <param name="id">Image ID</param>
		/// <param name="tags">Comma Separated tags</param>
		/// <returns>200  response</returns>
		public async Task QuoteImageBackgroundTagsRemovePostByIdAndTagsAsync(string id, string tags, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/image/background/tags/remove?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a font file. The user needs to be the owner of the font to be able to delete it.
		/// 
		/// QuoteImageFontDeleteById quote/image/font
		/// </summary>
		/// <param name="id">Font ID</param>
		/// <returns>200  response</returns>
		public async Task QuoteImageFontDeleteByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/image/font?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists background images in your private collection.
		/// 
		/// QuoteImageFontListGetByStart quote/image/font/list
		/// </summary>
		/// <param name="start">Response is paged. This parameter determines where the response should start.</param>
		/// <returns>200  response</returns>
		public async Task QuoteImageFontListGetByStartAsync(string start, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/image/font/list?start=" + (start==null? "" : System.Uri.EscapeDataString(start));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches for a font with a given tag.
		/// 
		/// QuoteImageFontSearchGetByQuery quote/image/font/search
		/// </summary>
		/// <param name="query">Tag string</param>
		/// <returns>200  response</returns>
		public async Task QuoteImageFontSearchGetByQueryAsync(string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/image/font/search?query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a tag to a given font.
		/// QuoteImageFontTagsAddPostByIdAndTags quote/image/font/tags/add
		/// </summary>
		/// <param name="id">Font ID</param>
		/// <param name="tags">Comma Separated tags</param>
		/// <returns>200  response</returns>
		public async Task QuoteImageFontTagsAddPostByIdAndTagsAsync(string id, string tags, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/image/font/tags/add?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a tag from a given Font.
		/// QuoteImageFontTagsRemovePostByIdAndTags quote/image/font/tags/remove
		/// </summary>
		/// <param name="id">Font ID</param>
		/// <param name="tags">Comma Separated tags</param>
		/// <returns>200  response</returns>
		public async Task QuoteImageFontTagsRemovePostByIdAndTagsAsync(string id, string tags, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/image/font/tags/remove?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Random Quote image. Optional `category` param determines the category of quote used in the image. Optional `author` param gets the quote image of a given author.
		/// 
		/// QuoteImageSearchGetByCategoryAndAuthorAnd_private quote/image/search
		/// </summary>
		/// <param name="category">Quote Category</param>
		/// <param name="author">Quote Author</param>
		/// <param name="_private">Should search private collection. Default searches public image collection.</param>
		/// <returns>200  response</returns>
		public async Task QuoteImageSearchGetByCategoryAndAuthorAnd_privateAsync(string category, string author, string _private, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/image/search?category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&author=" + (author==null? "" : System.Uri.EscapeDataString(author))+"&private=" + (_private==null? "" : System.Uri.EscapeDataString(_private));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Toggle the user like of the given Quote as a user of the API Key.
		/// QuoteLikeToggleGetByQuote_id quote/like/toggle
		/// </summary>
		/// <param name="quote_id">Quote ID</param>
		/// <returns>200  response</returns>
		public async Task QuoteLikeToggleGetByQuote_idAsync(string quote_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/like/toggle?quote_id=" + (quote_id==null? "" : System.Uri.EscapeDataString(quote_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of quotes in your private collection.
		/// QuoteListGetByStartAndLimit quote/list
		/// </summary>
		/// <param name="start">Response is paged. This parameter controls where response starts the listing at</param>
		/// <param name="limit">Response is paged. This parameter controls how many is returned in the result.</param>
		/// <returns>200  response</returns>
		public async Task QuoteListGetByStartAndLimitAsync(int start, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/list?start="+start+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a `Random Quote`. When you are in a hurry this is what you call to get a random famous quote.
		/// QuoteRandomGetByLanguageAndLimit quote/random
		/// </summary>
		/// <param name="language">Language of the Quote. The language must be supported in our system.</param>
		/// <param name="limit">No of quotes to return. The max limit depends on the subscription level.</param>
		/// <returns>200  response</returns>
		public async Task<QuoteResponse> QuoteRandomGetByLanguageAndLimitAsync(string language, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/random?language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QuoteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for a `Quote` in They Said So platform. Optional `category` , `author`, `minlength`, `maxlength` params determines the filters applied while searching for the quote.
		/// QuoteSearchGetByCategoryAndAuthorAndMinlengthAndMaxlengthAndQueryAnd_privateAndLanguageAndLimitAndSfw quote/search
		/// </summary>
		/// <param name="category">Quote Category</param>
		/// <param name="author">Quote Author</param>
		/// <param name="minlength">Quote minimum Length</param>
		/// <param name="maxlength">Quote maximum Length</param>
		/// <param name="query">keyword to search for in the quote</param>
		/// <param name="_private">Should search private collection? Default searches public collection.</param>
		/// <param name="language">Language of the Quote. The language must be supported in our system.</param>
		/// <param name="limit">No of quotes to return. The max limit depends on the subscription level.</param>
		/// <param name="sfw">Should search only SFW (Safe For Work) quotes?</param>
		/// <returns>200  response</returns>
		public async Task<QuoteResponse> QuoteSearchGetByCategoryAndAuthorAndMinlengthAndMaxlengthAndQueryAnd_privateAndLanguageAndLimitAndSfwAsync(string category, string author, int minlength, int maxlength, string query, string _private, string language, string limit, string sfw, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/search?category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&author=" + (author==null? "" : System.Uri.EscapeDataString(author))+"&minlength="+minlength+"&maxlength="+maxlength+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&private=" + (_private==null? "" : System.Uri.EscapeDataString(_private))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&sfw=" + (sfw==null? "" : System.Uri.EscapeDataString(sfw));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QuoteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a tag to a given Quote.
		/// QuoteTagsAddPostByIdAndTags quote/tags/add
		/// </summary>
		/// <param name="id">Quote ID</param>
		/// <param name="tags">Comma Separated tags</param>
		/// <returns>200  response</returns>
		public async Task QuoteTagsAddPostByIdAndTagsAsync(string id, string tags, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/tags/add?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a tag from a given quote.
		/// QuoteTagsRemovePostByIdAndTags quote/tags/remove
		/// </summary>
		/// <param name="id">Quote ID</param>
		/// <param name="tags">Comma Separated tags</param>
		/// <returns>200  response</returns>
		public async Task QuoteTagsRemovePostByIdAndTagsAsync(string id, string tags, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "quote/tags/remove?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
