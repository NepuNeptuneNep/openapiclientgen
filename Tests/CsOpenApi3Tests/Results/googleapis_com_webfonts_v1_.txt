//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Metadata for a variable font axis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Axis
	{
		
		/// <summary>
		/// maximum value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Single> End { get; set; }
		
		/// <summary>
		/// minimum value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Single> Start { get; set; }
		
		/// <summary>
		/// tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Metadata describing a family of fonts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Webfont
	{
		
		/// <summary>
		/// Axis for variable fonts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="axes")]
		public Axis[] Axes { get; set; }
		
		/// <summary>
		/// The category of the font.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// The name of the font.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// The font files (with all supported scripts) for each one of the available variants, as a key : value map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public System.Collections.Generic.Dictionary<string, string> Files { get; set; }
		
		/// <summary>
		/// This kind represents a webfont object in the webfonts service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The date (format "yyyy-MM-dd") the font was modified for the last time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public string LastModified { get; set; }
		
		/// <summary>
		/// Font URL for menu subset, a subset of the font that is enough to display the font name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="menu")]
		public string Menu { get; set; }
		
		/// <summary>
		/// The scripts supported by the font.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subsets")]
		public string[] Subsets { get; set; }
		
		/// <summary>
		/// The available variants for the font.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public string[] Variants { get; set; }
		
		/// <summary>
		/// The font version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Response containing the list of fonts currently served by the Google Fonts API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebfontList
	{
		
		/// <summary>
		/// The list of fonts currently served by the Google Fonts API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Webfont[] Items { get; set; }
		
		/// <summary>
		/// This kind represents a list of webfont objects in the webfonts service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves the list of fonts currently served by the Google Fonts Developer API.
		/// Webfonts_webfonts_list v1/webfonts
		/// </summary>
		/// <param name="capability">Controls the font urls in `Webfont.files`, by default, static ttf fonts are sent.</param>
		/// <param name="family">Filters by Webfont.family, using literal match. If not set, returns all families</param>
		/// <param name="sort">Enables sorting of the list.</param>
		/// <param name="subset">Filters by Webfont.subset, if subset is found in Webfont.subsets. If not set, returns all families.</param>
		/// <returns>Successful response</returns>
		public async Task<WebfontList> Webfonts_webfonts_listAsync(string[] capability, string[] family, Webfonts_webfonts_listSort sort, string subset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/webfonts?"+string.Join("&", capability.Select(z => $"capability={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", family.Select(z => $"family={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + sort+"&subset=" + (subset==null? "" : System.Uri.EscapeDataString(subset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebfontList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Webfonts_webfonts_listSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SORT_UNDEFINED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALPHA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POPULARITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STYLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRENDING = 5,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
