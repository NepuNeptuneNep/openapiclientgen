//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ABNFGrammar
	{
		
		/// <summary>
		/// All declarations and rules of an ABNF grammar broken up into multiple strings that will end up concatenated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abnfStrings")]
		public string[] AbnfStrings { get; set; }
	}
	
	/// <summary>
	/// An item of the class.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClassItem
	{
		
		/// <summary>
		/// The class item's value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Message sent by the client for the `CreateCustomClass` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomClassRequest
	{
		
		/// <summary>
		/// A set of words or phrases that represents a common concept likely to appear in your audio, for example a list of passenger ship names. CustomClass items can be substituted into placeholders that you set in PhraseSet phrases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customClass")]
		public CustomClass CustomClass { get; set; }
		
		/// <summary>
		/// Required. The ID to use for the custom class, which will become the final component of the custom class' resource name. This value should restrict to letters, numbers, and hyphens, with the first character a letter, the last a letter or a number, and be 4-63 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customClassId")]
		public string CustomClassId { get; set; }
	}
	
	/// <summary>
	/// A set of words or phrases that represents a common concept likely to appear in your audio, for example a list of passenger ship names. CustomClass items can be substituted into placeholders that you set in PhraseSet phrases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomClass
	{
		
		/// <summary>
		/// Output only. Allows users to store small amounts of arbitrary data. Both the key and the value must be 63 characters or less each. At most 100 annotations. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// If this custom class is a resource, the custom_class_id is the resource id of the CustomClass. Case sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customClassId")]
		public string CustomClassId { get; set; }
		
		/// <summary>
		/// Output only. The time at which this resource was requested for deletion. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// Output only. User-settable, human-readable name for the CustomClass. Must be 63 characters or less. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. This checksum is computed by the server based on the value of other fields. This may be sent on update, undelete, and delete requests to ensure the client has an up-to-date value before proceeding. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Output only. The time at which this resource will be purged. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// A collection of class items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ClassItem[] Items { get; set; }
		
		/// <summary>
		/// Output only. The [KMS key name](https://cloud.google.com/kms/docs/resource-hierarchy#keys) with which the content of the ClassItem is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
		
		/// <summary>
		/// Output only. The [KMS key version name](https://cloud.google.com/kms/docs/resource-hierarchy#key_versions) with which content of the ClassItem is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyVersionName")]
		public string KmsKeyVersionName { get; set; }
		
		/// <summary>
		/// The resource name of the custom class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Whether or not this CustomClass is in the process of being updated. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciling")]
		public System.Nullable<System.Boolean> Reconciling { get; set; }
		
		/// <summary>
		/// Output only. The CustomClass lifecycle state. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CustomClassState> State { get; set; }
		
		/// <summary>
		/// Output only. System-assigned unique identifier for the CustomClass. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CustomClassState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATE_UNSPECIFIED")]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 2,
	}
	
	/// <summary>
	/// Message sent by the client for the `CreatePhraseSet` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePhraseSetRequest
	{
		
		/// <summary>
		/// Provides "hints" to the speech recognizer to favor specific words and phrases in the results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phraseSet")]
		public PhraseSet PhraseSet { get; set; }
		
		/// <summary>
		/// Required. The ID to use for the phrase set, which will become the final component of the phrase set's resource name. This value should restrict to letters, numbers, and hyphens, with the first character a letter, the last a letter or a number, and be 4-63 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phraseSetId")]
		public string PhraseSetId { get; set; }
	}
	
	/// <summary>
	/// Provides "hints" to the speech recognizer to favor specific words and phrases in the results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhraseSet
	{
		
		/// <summary>
		/// Output only. Allows users to store small amounts of arbitrary data. Both the key and the value must be 63 characters or less each. At most 100 annotations. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case as well as adding phrases both with and without boost to your requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boost")]
		public System.Nullable<System.Single> Boost { get; set; }
		
		/// <summary>
		/// Output only. The time at which this resource was requested for deletion. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// Output only. User-settable, human-readable name for the PhraseSet. Must be 63 characters or less. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. This checksum is computed by the server based on the value of other fields. This may be sent on update, undelete, and delete requests to ensure the client has an up-to-date value before proceeding. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Output only. The time at which this resource will be purged. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// Output only. The [KMS key name](https://cloud.google.com/kms/docs/resource-hierarchy#keys) with which the content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
		
		/// <summary>
		/// Output only. The [KMS key version name](https://cloud.google.com/kms/docs/resource-hierarchy#key_versions) with which content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyVersionName")]
		public string KmsKeyVersionName { get; set; }
		
		/// <summary>
		/// The resource name of the phrase set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of word and phrases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phrases")]
		public Phrase[] Phrases { get; set; }
		
		/// <summary>
		/// Output only. Whether or not this PhraseSet is in the process of being updated. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciling")]
		public System.Nullable<System.Boolean> Reconciling { get; set; }
		
		/// <summary>
		/// Output only. The CustomClass lifecycle state. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CustomClassState State { get; set; }
		
		/// <summary>
		/// Output only. System-assigned unique identifier for the PhraseSet. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// A phrases containing words and phrase "hints" so that the speech recognition is more likely to recognize them. This can be used to improve the accuracy for specific words and phrases, for example, if specific commands are typically spoken by the user. This can also be used to add additional words to the vocabulary of the recognizer. See [usage limits](https://cloud.google.com/speech-to-text/quotas#content). List items can also include pre-built or custom classes containing groups of words that represent common concepts that occur in natural language. For example, rather than providing a phrase hint for every month of the year (e.g. "i was born in january", "i was born in febuary", ...), use the pre-built `$MONTH` class improves the likelihood of correctly transcribing audio that includes months (e.g. "i was born in $month"). To refer to pre-built classes, use the class' symbol prepended with `$` e.g. `$MONTH`. To refer to custom classes that were defined inline in the request, set the class's `custom_class_id` to a string unique to all class resources and inline classes. Then use the class' id wrapped in $`{...}` e.g. "${my-months}". To refer to custom classes resources, use the class' id wrapped in `${}` (e.g. `${my-months}`). Speech-to-Text supports three locations: `global`, `us` (US North America), and `eu` (Europe). If you are calling the `speech.googleapis.com` endpoint, use the `global` location. To specify a region, use a [regional endpoint](https://cloud.google.com/speech-to-text/docs/endpoints) with matching `us` or `eu` location value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Phrase
	{
		
		/// <summary>
		/// Hint Boost. Overrides the boost set at the phrase set level. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 and 20. We recommend using a binary search approach to finding the optimal value for your use case as well as adding phrases both with and without boost to your requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boost")]
		public System.Nullable<System.Single> Boost { get; set; }
		
		/// <summary>
		/// The phrase itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// A single replacement configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Entry
	{
		
		/// <summary>
		/// Whether the search is case sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caseSensitive")]
		public System.Nullable<System.Boolean> CaseSensitive { get; set; }
		
		/// <summary>
		/// What to replace with. Max length is 100 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replace")]
		public string Replace { get; set; }
		
		/// <summary>
		/// What to replace. Max length is 100 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search")]
		public string Search { get; set; }
	}
	
	/// <summary>
	/// Message returned to the client by the `ListCustomClasses` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCustomClassesResponse
	{
		
		/// <summary>
		/// The custom classes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customClasses")]
		public CustomClass[] CustomClasses { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Message returned to the client by the `ListPhraseSet` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPhraseSetResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The phrase set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phraseSets")]
		public PhraseSet[] PhraseSets { get; set; }
	}
	
	/// <summary>
	/// Describes the progress of a long-running `LongRunningRecognize` call. It is included in the `metadata` field of the `Operation` returned by the `GetOperation` call of the `google::longrunning::Operations` service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LongRunningRecognizeMetadata
	{
		
		/// <summary>
		/// Time of the most recent processing update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public string LastUpdateTime { get; set; }
		
		/// <summary>
		/// Specifies an optional destination for the recognition results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputConfig")]
		public TranscriptOutputConfig OutputConfig { get; set; }
		
		/// <summary>
		/// Approximate percentage of audio processed thus far. Guaranteed to be 100 when the audio is fully processed and the results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressPercent")]
		public System.Nullable<System.Int32> ProgressPercent { get; set; }
		
		/// <summary>
		/// Time when the request was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Output only. The URI of the audio file being transcribed. Empty if the audio was sent as byte content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Specifies an optional destination for the recognition results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TranscriptOutputConfig
	{
		
		/// <summary>
		/// Specifies a Cloud Storage URI for the recognition results. Must be specified in the format: `gs://bucket_name/object_name`, and the bucket must already exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsUri")]
		public string GcsUri { get; set; }
	}
	
	/// <summary>
	/// The top-level message sent by the client for the `LongRunningRecognize` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LongRunningRecognizeRequest
	{
		
		/// <summary>
		/// Contains audio data in the encoding specified in the `RecognitionConfig`. Either `content` or `uri` must be supplied. Supplying both or neither returns google.rpc.Code.INVALID_ARGUMENT. See [content limits](https://cloud.google.com/speech-to-text/quotas#content).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audio")]
		public RecognitionAudio Audio { get; set; }
		
		/// <summary>
		/// Provides information to the recognizer that specifies how to process the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public RecognitionConfig Config { get; set; }
		
		/// <summary>
		/// Specifies an optional destination for the recognition results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputConfig")]
		public TranscriptOutputConfig OutputConfig { get; set; }
	}
	
	/// <summary>
	/// Contains audio data in the encoding specified in the `RecognitionConfig`. Either `content` or `uri` must be supplied. Supplying both or neither returns google.rpc.Code.INVALID_ARGUMENT. See [content limits](https://cloud.google.com/speech-to-text/quotas#content).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecognitionAudio
	{
		
		/// <summary>
		/// The audio data bytes encoded as specified in `RecognitionConfig`. Note: as with all bytes fields, proto buffers use a pure binary representation, whereas JSON representations use base64.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// URI that points to a file that contains audio data bytes as specified in `RecognitionConfig`. The file must not be compressed (for example, gzip). Currently, only Google Cloud Storage URIs are supported, which must be specified in the following format: `gs://bucket_name/object_name` (other URI formats return google.rpc.Code.INVALID_ARGUMENT). For more information, see [Request URIs](https://cloud.google.com/storage/docs/reference-uris).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Provides information to the recognizer that specifies how to process the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecognitionConfig
	{
		
		/// <summary>
		/// Speech adaptation configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adaptation")]
		public SpeechAdaptation Adaptation { get; set; }
		
		/// <summary>
		/// A list of up to 3 additional [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tags, listing possible alternative languages of the supplied audio. See [Language Support](https://cloud.google.com/speech-to-text/docs/languages) for a list of the currently supported language codes. If alternative languages are listed, recognition result will contain recognition in the most likely language detected including the main language_code. The recognition result will include the language tag of the language detected in the audio. Note: This feature is only supported for Voice Command and Voice Search use cases and performance may vary for other use cases (e.g., phone call transcription).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternativeLanguageCodes")]
		public string[] AlternativeLanguageCodes { get; set; }
		
		/// <summary>
		/// The number of channels in the input audio data. ONLY set this for MULTI-CHANNEL recognition. Valid values for LINEAR16, OGG_OPUS and FLAC are `1`-`8`. Valid value for MULAW, AMR, AMR_WB and SPEEX_WITH_HEADER_BYTE is only `1`. If `0` or omitted, defaults to one channel (mono). Note: We only recognize the first channel by default. To perform independent recognition on each channel set `enable_separate_recognition_per_channel` to 'true'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioChannelCount")]
		public System.Nullable<System.Int32> AudioChannelCount { get; set; }
		
		/// <summary>
		/// Config to enable speaker diarization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diarizationConfig")]
		public SpeakerDiarizationConfig DiarizationConfig { get; set; }
		
		/// <summary>
		/// If set, specifies the estimated number of speakers in the conversation. Defaults to '2'. Ignored unless enable_speaker_diarization is set to true. Note: Use diarization_config instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diarizationSpeakerCount")]
		public System.Nullable<System.Int32> DiarizationSpeakerCount { get; set; }
		
		/// <summary>
		/// If 'true', adds punctuation to recognition result hypotheses. This feature is only available in select languages. Setting this for requests in other languages has no effect at all. The default 'false' value does not add punctuation to result hypotheses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutomaticPunctuation")]
		public System.Nullable<System.Boolean> EnableAutomaticPunctuation { get; set; }
		
		/// <summary>
		/// This needs to be set to `true` explicitly and `audio_channel_count` > 1 to get each channel recognized separately. The recognition result will contain a `channel_tag` field to state which channel that result belongs to. If this is not true, we will only recognize the first channel. The request is billed cumulatively for all channels recognized: `audio_channel_count` multiplied by the length of the audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSeparateRecognitionPerChannel")]
		public System.Nullable<System.Boolean> EnableSeparateRecognitionPerChannel { get; set; }
		
		/// <summary>
		/// If 'true', enables speaker detection for each recognized word in the top alternative of the recognition result using a speaker_label provided in the WordInfo. Note: Use diarization_config instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSpeakerDiarization")]
		public System.Nullable<System.Boolean> EnableSpeakerDiarization { get; set; }
		
		/// <summary>
		/// The spoken emoji behavior for the call If not set, uses default behavior based on model of choice If 'true', adds spoken emoji formatting for the request. This will replace spoken emojis with the corresponding Unicode symbols in the final transcript. If 'false', spoken emojis are not replaced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSpokenEmojis")]
		public System.Nullable<System.Boolean> EnableSpokenEmojis { get; set; }
		
		/// <summary>
		/// The spoken punctuation behavior for the call If not set, uses default behavior based on model of choice e.g. command_and_search will enable spoken punctuation by default If 'true', replaces spoken punctuation with the corresponding symbols in the request. For example, "how are you question mark" becomes "how are you?". See https://cloud.google.com/speech-to-text/docs/spoken-punctuation for support. If 'false', spoken punctuation is not replaced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSpokenPunctuation")]
		public System.Nullable<System.Boolean> EnableSpokenPunctuation { get; set; }
		
		/// <summary>
		/// If `true`, the top result includes a list of words and the confidence for those words. If `false`, no word-level confidence information is returned. The default is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableWordConfidence")]
		public System.Nullable<System.Boolean> EnableWordConfidence { get; set; }
		
		/// <summary>
		/// If `true`, the top result includes a list of words and the start and end time offsets (timestamps) for those words. If `false`, no word-level time offset information is returned. The default is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableWordTimeOffsets")]
		public System.Nullable<System.Boolean> EnableWordTimeOffsets { get; set; }
		
		/// <summary>
		/// Encoding of audio data sent in all `RecognitionAudio` messages. This field is optional for `FLAC` and `WAV` audio files and required for all other audio formats. For details, see AudioEncoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public System.Nullable<RecognitionConfigEncoding> Encoding { get; set; }
		
		/// <summary>
		/// Required. The language of the supplied audio as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US". See [Language Support](https://cloud.google.com/speech-to-text/docs/languages) for a list of the currently supported language codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Maximum number of recognition hypotheses to be returned. Specifically, the maximum number of `SpeechRecognitionAlternative` messages within each `SpeechRecognitionResult`. The server may return fewer than `max_alternatives`. Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of one. If omitted, will return a maximum of one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAlternatives")]
		public System.Nullable<System.Int32> MaxAlternatives { get; set; }
		
		/// <summary>
		/// Description of audio data to be recognized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public RecognitionMetadata Metadata { get; set; }
		
		/// <summary>
		/// Which model to select for the given request. Select the model best suited to your domain to get best results. If a model is not explicitly specified, then we auto-select a model based on the parameters in the RecognitionConfig. *Model* *Description* latest_long Best for long form content like media or conversation. latest_short Best for short form content like commands or single shot directed speech. command_and_search Best for short queries such as voice commands or voice search. phone_call Best for audio that originated from a phone call (typically recorded at an 8khz sampling rate). video Best for audio that originated from video or includes multiple speakers. Ideally the audio is recorded at a 16khz or greater sampling rate. This is a premium model that costs more than the standard rate. default Best for audio that is not one of the specific audio models. For example, long-form audio. Ideally the audio is high-fidelity, recorded at a 16khz or greater sampling rate. medical_conversation Best for audio that originated from a conversation between a medical provider and patient. medical_dictation Best for audio that originated from dictation notes by a medical provider. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// If set to `true`, the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks, e.g. "f***". If set to `false` or omitted, profanities won't be filtered out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profanityFilter")]
		public System.Nullable<System.Boolean> ProfanityFilter { get; set; }
		
		/// <summary>
		/// Sample rate in Hertz of the audio data sent in all `RecognitionAudio` messages. Valid values are: 8000-48000. 16000 is optimal. For best results, set the sampling rate of the audio source to 16000 Hz. If that's not possible, use the native sample rate of the audio source (instead of re-sampling). This field is optional for FLAC and WAV audio files, but is required for all other audio formats. For details, see AudioEncoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleRateHertz")]
		public System.Nullable<System.Int32> SampleRateHertz { get; set; }
		
		/// <summary>
		/// Array of SpeechContext. A means to provide context to assist the speech recognition. For more information, see [speech adaptation](https://cloud.google.com/speech-to-text/docs/adaptation).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speechContexts")]
		public SpeechContext[] SpeechContexts { get; set; }
		
		/// <summary>
		/// Transcription normalization configuration. Use transcription normalization to automatically replace parts of the transcript with phrases of your choosing. For StreamingRecognize, this normalization only applies to stable partial transcripts (stability > 0.8) and final transcripts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transcriptNormalization")]
		public TranscriptNormalization TranscriptNormalization { get; set; }
		
		/// <summary>
		/// Set to true to use an enhanced model for speech recognition. If `use_enhanced` is set to true and the `model` field is not set, then an appropriate enhanced model is chosen if an enhanced model exists for the audio. If `use_enhanced` is true and an enhanced version of the specified model does not exist, then the speech is recognized using the standard version of the specified model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useEnhanced")]
		public System.Nullable<System.Boolean> UseEnhanced { get; set; }
	}
	
	/// <summary>
	/// Speech adaptation configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpeechAdaptation
	{
		
		[System.Runtime.Serialization.DataMember(Name="abnfGrammar")]
		public ABNFGrammar AbnfGrammar { get; set; }
		
		/// <summary>
		/// A collection of custom classes. To specify the classes inline, leave the class' `name` blank and fill in the rest of its fields, giving it a unique `custom_class_id`. Refer to the inline defined class in phrase hints by its `custom_class_id`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customClasses")]
		public CustomClass[] CustomClasses { get; set; }
		
		/// <summary>
		/// A collection of phrase set resource names to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phraseSetReferences")]
		public string[] PhraseSetReferences { get; set; }
		
		/// <summary>
		/// A collection of phrase sets. To specify the hints inline, leave the phrase set's `name` blank and fill in the rest of its fields. Any phrase set can use any custom class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phraseSets")]
		public PhraseSet[] PhraseSets { get; set; }
	}
	
	/// <summary>
	/// Config to enable speaker diarization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpeakerDiarizationConfig
	{
		
		/// <summary>
		/// If 'true', enables speaker detection for each recognized word in the top alternative of the recognition result using a speaker_label provided in the WordInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSpeakerDiarization")]
		public System.Nullable<System.Boolean> EnableSpeakerDiarization { get; set; }
		
		/// <summary>
		/// Maximum number of speakers in the conversation. This range gives you more flexibility by allowing the system to automatically determine the correct number of speakers. If not set, the default value is 6.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSpeakerCount")]
		public System.Nullable<System.Int32> MaxSpeakerCount { get; set; }
		
		/// <summary>
		/// Minimum number of speakers in the conversation. This range gives you more flexibility by allowing the system to automatically determine the correct number of speakers. If not set, the default value is 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minSpeakerCount")]
		public System.Nullable<System.Int32> MinSpeakerCount { get; set; }
		
		/// <summary>
		/// Output only. Unused.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speakerTag")]
		public System.Nullable<System.Int32> SpeakerTag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RecognitionConfigEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENCODING_UNSPECIFIED")]
		ENCODING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LINEAR16")]
		LINEAR16 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FLAC")]
		FLAC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULAW")]
		MULAW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMR")]
		AMR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMR_WB")]
		AMR_WB = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OGG_OPUS")]
		OGG_OPUS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPEEX_WITH_HEADER_BYTE")]
		SPEEX_WITH_HEADER_BYTE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MP3")]
		MP3 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEBM_OPUS")]
		WEBM_OPUS = 9,
	}
	
	/// <summary>
	/// Description of audio data to be recognized.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecognitionMetadata
	{
		
		/// <summary>
		/// Description of the content. Eg. "Recordings of federal supreme court hearings from 2012".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioTopic")]
		public string AudioTopic { get; set; }
		
		/// <summary>
		/// The industry vertical to which this speech recognition request most closely applies. This is most indicative of the topics contained in the audio. Use the 6-digit NAICS code to identify the industry vertical - see https://www.naics.com/search/.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="industryNaicsCodeOfAudio")]
		public System.Nullable<System.UInt32> IndustryNaicsCodeOfAudio { get; set; }
		
		/// <summary>
		/// The use case most closely describing the audio content to be recognized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interactionType")]
		public System.Nullable<RecognitionMetadataInteractionType> InteractionType { get; set; }
		
		/// <summary>
		/// The audio type that most closely describes the audio being recognized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microphoneDistance")]
		public System.Nullable<RecognitionMetadataMicrophoneDistance> MicrophoneDistance { get; set; }
		
		/// <summary>
		/// Obfuscated (privacy-protected) ID of the user, to identify number of unique users using the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obfuscatedId")]
		public string ObfuscatedId { get; set; }
		
		/// <summary>
		/// The original media the speech was recorded on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalMediaType")]
		public System.Nullable<RecognitionMetadataOriginalMediaType> OriginalMediaType { get; set; }
		
		/// <summary>
		/// Mime type of the original audio file. For example `audio/m4a`, `audio/x-alaw-basic`, `audio/mp3`, `audio/3gpp`. A list of possible audio mime types is maintained at http://www.iana.org/assignments/media-types/media-types.xhtml#audio
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalMimeType")]
		public string OriginalMimeType { get; set; }
		
		/// <summary>
		/// The device used to make the recording. Examples 'Nexus 5X' or 'Polycom SoundStation IP 6000' or 'POTS' or 'VoIP' or 'Cardioid Microphone'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordingDeviceName")]
		public string RecordingDeviceName { get; set; }
		
		/// <summary>
		/// The type of device the speech was recorded with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordingDeviceType")]
		public System.Nullable<RecognitionMetadataRecordingDeviceType> RecordingDeviceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RecognitionMetadataInteractionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERACTION_TYPE_UNSPECIFIED")]
		INTERACTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCUSSION")]
		DISCUSSION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRESENTATION")]
		PRESENTATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHONE_CALL")]
		PHONE_CALL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICEMAIL")]
		VOICEMAIL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROFESSIONALLY_PRODUCED")]
		PROFESSIONALLY_PRODUCED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_SEARCH")]
		VOICE_SEARCH = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VOICE_COMMAND")]
		VOICE_COMMAND = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DICTATION")]
		DICTATION = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RecognitionMetadataMicrophoneDistance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MICROPHONE_DISTANCE_UNSPECIFIED")]
		MICROPHONE_DISTANCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEARFIELD")]
		NEARFIELD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MIDFIELD")]
		MIDFIELD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FARFIELD")]
		FARFIELD = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RecognitionMetadataOriginalMediaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORIGINAL_MEDIA_TYPE_UNSPECIFIED")]
		ORIGINAL_MEDIA_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUDIO")]
		AUDIO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VIDEO")]
		VIDEO = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RecognitionMetadataRecordingDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECORDING_DEVICE_TYPE_UNSPECIFIED")]
		RECORDING_DEVICE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SMARTPHONE")]
		SMARTPHONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PC")]
		PC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHONE_LINE")]
		PHONE_LINE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VEHICLE")]
		VEHICLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER_OUTDOOR_DEVICE")]
		OTHER_OUTDOOR_DEVICE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER_INDOOR_DEVICE")]
		OTHER_INDOOR_DEVICE = 6,
	}
	
	/// <summary>
	/// Provides "hints" to the speech recognizer to favor specific words and phrases in the results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpeechContext
	{
		
		/// <summary>
		/// Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 and 20. We recommend using a binary search approach to finding the optimal value for your use case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boost")]
		public System.Nullable<System.Single> Boost { get; set; }
		
		/// <summary>
		/// A list of strings containing words and phrases "hints" so that the speech recognition is more likely to recognize them. This can be used to improve the accuracy for specific words and phrases, for example, if specific commands are typically spoken by the user. This can also be used to add additional words to the vocabulary of the recognizer. See [usage limits](https://cloud.google.com/speech-to-text/quotas#content). List items can also be set to classes for groups of words that represent common concepts that occur in natural language. For example, rather than providing phrase hints for every month of the year, using the $MONTH class improves the likelihood of correctly transcribing audio that includes months.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phrases")]
		public string[] Phrases { get; set; }
	}
	
	/// <summary>
	/// Transcription normalization configuration. Use transcription normalization to automatically replace parts of the transcript with phrases of your choosing. For StreamingRecognize, this normalization only applies to stable partial transcripts (stability > 0.8) and final transcripts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TranscriptNormalization
	{
		
		/// <summary>
		/// A list of replacement entries. We will perform replacement with one entry at a time. For example, the second entry in ["cat" => "dog", "mountain cat" => "mountain dog"] will never be applied because we will always process the first entry before it. At most 100 entries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public Entry[] Entries { get; set; }
	}
	
	/// <summary>
	/// The only message returned to the client by the `LongRunningRecognize` method. It contains the result as zero or more sequential `SpeechRecognitionResult` messages. It is included in the `result.response` field of the `Operation` returned by the `GetOperation` call of the `google::longrunning::Operations` service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LongRunningRecognizeResponse
	{
		
		/// <summary>
		/// Specifies an optional destination for the recognition results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputConfig")]
		public TranscriptOutputConfig OutputConfig { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputError")]
		public Status OutputError { get; set; }
		
		/// <summary>
		/// The ID associated with the request. This is a unique ID specific only to the given request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Sequential list of transcription results corresponding to sequential portions of audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public SpeechRecognitionResult[] Results { get; set; }
		
		/// <summary>
		/// Information on speech adaptation use in results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speechAdaptationInfo")]
		public SpeechAdaptationInfo SpeechAdaptationInfo { get; set; }
		
		/// <summary>
		/// When available, billed audio seconds for the corresponding request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBilledTime")]
		public string TotalBilledTime { get; set; }
	}
	
	/// <summary>
	/// A speech recognition result corresponding to a portion of the audio.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpeechRecognitionResult
	{
		
		/// <summary>
		/// May contain one or more recognition hypotheses (up to the maximum specified in `max_alternatives`). These alternatives are ordered in terms of accuracy, with the top (first) alternative being the most probable, as ranked by the recognizer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternatives")]
		public SpeechRecognitionAlternative[] Alternatives { get; set; }
		
		/// <summary>
		/// For multi-channel audio, this is the channel number corresponding to the recognized result for the audio from that channel. For audio_channel_count = N, its output values can range from '1' to 'N'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelTag")]
		public System.Nullable<System.Int32> ChannelTag { get; set; }
		
		/// <summary>
		/// Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag of the language in this result. This language code was detected to have the most likelihood of being spoken in the audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Time offset of the end of this result relative to the beginning of the audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultEndTime")]
		public string ResultEndTime { get; set; }
	}
	
	/// <summary>
	/// Alternative hypotheses (a.k.a. n-best list).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpeechRecognitionAlternative
	{
		
		/// <summary>
		/// The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative of a non-streaming result or, of a streaming result where `is_final=true`. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Single> Confidence { get; set; }
		
		/// <summary>
		/// Transcript text representing the words that the user spoke. In languages that use spaces to separate words, the transcript might have a leading space if it isn't the first result. You can concatenate each result to obtain the full transcript without using a separator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transcript")]
		public string Transcript { get; set; }
		
		/// <summary>
		/// A list of word-specific information for each recognized word. Note: When `enable_speaker_diarization` is true, you will see all the words from the beginning of the audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="words")]
		public WordInfo[] Words { get; set; }
	}
	
	/// <summary>
	/// Word-specific information for recognized words.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WordInfo
	{
		
		/// <summary>
		/// The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative of a non-streaming result or, of a streaming result where `is_final=true`. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Single> Confidence { get; set; }
		
		/// <summary>
		/// Time offset relative to the beginning of the audio, and corresponding to the end of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. A label value assigned for every unique speaker within the audio. This field specifies which speaker was detected to have spoken this word. For some models, like medical_conversation this can be actual speaker role, for example "patient" or "provider", but generally this would be a number identifying a speaker. This field is only set if enable_speaker_diarization = 'true' and only for the top alternative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speakerLabel")]
		public string SpeakerLabel { get; set; }
		
		/// <summary>
		/// Output only. A distinct integer value is assigned for every speaker within the audio. This field specifies which one of those speakers was detected to have spoken this word. Value ranges from '1' to diarization_speaker_count. speaker_tag is set if enable_speaker_diarization = 'true' and only for the top alternative. Note: Use speaker_label instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speakerTag")]
		public System.Nullable<System.Int32> SpeakerTag { get; set; }
		
		/// <summary>
		/// Time offset relative to the beginning of the audio, and corresponding to the start of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The word corresponding to this set of information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="word")]
		public string Word { get; set; }
	}
	
	/// <summary>
	/// Information on speech adaptation use in results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpeechAdaptationInfo
	{
		
		/// <summary>
		/// Whether there was a timeout when applying speech adaptation. If true, adaptation had no effect in the response transcript.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adaptationTimeout")]
		public System.Nullable<System.Boolean> AdaptationTimeout { get; set; }
		
		/// <summary>
		/// If set, returns a message specifying which part of the speech adaptation request timed out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutMessage")]
		public string TimeoutMessage { get; set; }
	}
	
	/// <summary>
	/// The top-level message sent by the client for the `Recognize` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecognizeRequest
	{
		
		/// <summary>
		/// Contains audio data in the encoding specified in the `RecognitionConfig`. Either `content` or `uri` must be supplied. Supplying both or neither returns google.rpc.Code.INVALID_ARGUMENT. See [content limits](https://cloud.google.com/speech-to-text/quotas#content).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audio")]
		public RecognitionAudio Audio { get; set; }
		
		/// <summary>
		/// Provides information to the recognizer that specifies how to process the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public RecognitionConfig Config { get; set; }
	}
	
	/// <summary>
	/// The only message returned to the client by the `Recognize` method. It contains the result as zero or more sequential `SpeechRecognitionResult` messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecognizeResponse
	{
		
		/// <summary>
		/// The ID associated with the request. This is a unique ID specific only to the given request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Sequential list of transcription results corresponding to sequential portions of audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public SpeechRecognitionResult[] Results { get; set; }
		
		/// <summary>
		/// Information on speech adaptation use in results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speechAdaptationInfo")]
		public SpeechAdaptationInfo SpeechAdaptationInfo { get; set; }
		
		/// <summary>
		/// When available, billed audio seconds for the corresponding request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBilledTime")]
		public string TotalBilledTime { get; set; }
		
		/// <summary>
		/// Whether request used legacy asr models (was not automatically migrated to use conformer models).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usingLegacyModels")]
		public System.Nullable<System.Boolean> UsingLegacyModels { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Speech_operations_list v1p1beta1/operations
		/// </summary>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Speech_operations_listAsync(string filter, string name, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1p1beta1/operations?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Speech_operations_get v1p1beta1/operations/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Speech_operations_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1p1beta1/operations/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Performs asynchronous speech recognition: receive results via the google.longrunning.Operations interface. Returns either an `Operation.error` or an `Operation.response` which contains a `LongRunningRecognizeResponse` message. For more information on asynchronous speech recognition, see the [how-to](https://cloud.google.com/speech-to-text/docs/async-recognize).
		/// Speech_speech_longrunningrecognize v1p1beta1/speech:longrunningrecognize
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Operation> Speech_speech_longrunningrecognizeAsync(LongRunningRecognizeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1p1beta1/speech:longrunningrecognize";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Performs synchronous speech recognition: receive results after all audio has been sent and processed.
		/// Speech_speech_recognize v1p1beta1/speech:recognize
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<RecognizeResponse> Speech_speech_recognizeAsync(RecognizeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1p1beta1/speech:recognize";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecognizeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a phrase set.
		/// Speech_projects_locations_phraseSets_delete v1p1beta1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the phrase set to delete. Format: `projects/{project}/locations/{location}/phraseSets/{phrase_set}`</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Speech_projects_locations_phraseSets_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1p1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a phrase set.
		/// Speech_projects_locations_phraseSets_get v1p1beta1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the phrase set to retrieve. Format: `projects/{project}/locations/{location}/phraseSets/{phrase_set}` Speech-to-Text supports three locations: `global`, `us` (US North America), and `eu` (Europe). If you are calling the `speech.googleapis.com` endpoint, use the `global` location. To specify a region, use a [regional endpoint](https://cloud.google.com/speech-to-text/docs/endpoints) with matching `us` or `eu` location value.</param>
		/// <returns>Successful response</returns>
		public async Task<PhraseSet> Speech_projects_locations_phraseSets_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1p1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PhraseSet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a phrase set.
		/// Speech_projects_locations_phraseSets_patch v1p1beta1/{name}
		/// </summary>
		/// <param name="name">The resource name of the phrase set.</param>
		/// <param name="updateMask">The list of fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<PhraseSet> Speech_projects_locations_phraseSets_patchAsync(string name, string updateMask, PhraseSet requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1p1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PhraseSet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List custom classes.
		/// Speech_projects_locations_customClasses_list v1p1beta1/{parent}/customClasses
		/// </summary>
		/// <param name="parent">Required. The parent, which owns this collection of custom classes. Format: `projects/{project}/locations/{location}/customClasses` Speech-to-Text supports three locations: `global`, `us` (US North America), and `eu` (Europe). If you are calling the `speech.googleapis.com` endpoint, use the `global` location. To specify a region, use a [regional endpoint](https://cloud.google.com/speech-to-text/docs/endpoints) with matching `us` or `eu` location value.</param>
		/// <param name="pageSize">The maximum number of custom classes to return. The service may return fewer than this value. If unspecified, at most 50 custom classes will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListCustomClass` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListCustomClass` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCustomClassesResponse> Speech_projects_locations_customClasses_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1p1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/customClasses&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCustomClassesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a custom class.
		/// Speech_projects_locations_customClasses_create v1p1beta1/{parent}/customClasses
		/// </summary>
		/// <param name="parent">Required. The parent resource where this custom class will be created. Format: `projects/{project}/locations/{location}/customClasses` Speech-to-Text supports three locations: `global`, `us` (US North America), and `eu` (Europe). If you are calling the `speech.googleapis.com` endpoint, use the `global` location. To specify a region, use a [regional endpoint](https://cloud.google.com/speech-to-text/docs/endpoints) with matching `us` or `eu` location value.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomClass> Speech_projects_locations_customClasses_createAsync(string parent, CreateCustomClassRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1p1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/customClasses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List phrase sets.
		/// Speech_projects_locations_phraseSets_list v1p1beta1/{parent}/phraseSets
		/// </summary>
		/// <param name="parent">Required. The parent, which owns this collection of phrase set. Format: `projects/{project}/locations/{location}` Speech-to-Text supports three locations: `global`, `us` (US North America), and `eu` (Europe). If you are calling the `speech.googleapis.com` endpoint, use the `global` location. To specify a region, use a [regional endpoint](https://cloud.google.com/speech-to-text/docs/endpoints) with matching `us` or `eu` location value.</param>
		/// <param name="pageSize">The maximum number of phrase sets to return. The service may return fewer than this value. If unspecified, at most 50 phrase sets will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListPhraseSet` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListPhraseSet` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPhraseSetResponse> Speech_projects_locations_phraseSets_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1p1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/phraseSets&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPhraseSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a set of phrase hints. Each item in the set can be a single word or a multi-word phrase. The items in the PhraseSet are favored by the recognition model when you send a call that includes the PhraseSet.
		/// Speech_projects_locations_phraseSets_create v1p1beta1/{parent}/phraseSets
		/// </summary>
		/// <param name="parent">Required. The parent resource where this phrase set will be created. Format: `projects/{project}/locations/{location}` Speech-to-Text supports three locations: `global`, `us` (US North America), and `eu` (Europe). If you are calling the `speech.googleapis.com` endpoint, use the `global` location. To specify a region, use a [regional endpoint](https://cloud.google.com/speech-to-text/docs/endpoints) with matching `us` or `eu` location value.</param>
		/// <returns>Successful response</returns>
		public async Task<PhraseSet> Speech_projects_locations_phraseSets_createAsync(string parent, CreatePhraseSetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1p1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/phraseSets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PhraseSet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
