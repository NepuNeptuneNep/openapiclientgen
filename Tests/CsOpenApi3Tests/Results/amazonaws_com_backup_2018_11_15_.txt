//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelLegalHoldOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidParameterValueException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidResourceStateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MissingParameterValueException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBackupPlanOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdvancedBackupSetting[] AdvancedBackupSettings { get; set; }
	}
	
	/// <summary>
	/// A list of backup options for each resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdvancedBackupSetting
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackupOptions BackupOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupOptions
	{
	}
	
	/// <summary>
	/// Specifies a scheduled task used to back up a selection of resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupRuleInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetBackupVaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartWindowMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompletionWindowMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Lifecycle Lifecycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags RecoveryPointTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CopyAction[] CopyActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableContinuousBackup { get; set; }
	}
	
	/// <summary>
	/// <p>Contains an array of <code>Transition</code> objects specifying how long in days before a recovery point transitions to cold storage or is deleted.</p> <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.</p> <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Lifecycle
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MoveToColdStorageAfterDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeleteAfterDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tags
	{
	}
	
	/// <summary>
	/// The details of the copy operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyAction
	{
		
		/// <summary>
		/// <p>Contains an array of <code>Transition</code> objects specifying how long in days before a recovery point transitions to cold storage or is deleted.</p> <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.</p> <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Lifecycle Lifecycle { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationBackupVaultArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBackupSelectionOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SelectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
	}
	
	/// <summary>
	/// Contains an array of triplets made up of a condition type (such as <code>StringEquals</code>), a key, and a value. Used to filter resources using their tags and assign them to a backup plan. Case sensitive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Condition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConditionType ConditionType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConditionKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConditionValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConditionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRINGEQUALS = 0,
	}
	
	/// <summary>
	/// Contains information about which resources to include or exclude from a backup plan using their tags. Conditions are case sensitive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Conditions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConditionParameter[] StringEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConditionParameter[] StringNotEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConditionParameter[] StringLike { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConditionParameter[] StringNotLike { get; set; }
	}
	
	/// <summary>
	/// Includes information about tags you define to assign tagged resources to a backup plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConditionParameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConditionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConditionValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBackupVaultOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFrameworkOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkArn { get; set; }
	}
	
	/// <summary>
	/// Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FrameworkControl
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ControlName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ControlInputParameter[] ControlInputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ControlScope ControlScope { get; set; }
	}
	
	/// <summary>
	/// A list of parameters for a control. A control can have zero, one, or more than one parameter. An example of a control with two parameters is: "backup plan frequency is at least <code>daily</code> and the retention period is at least <code>1 year</code>". The first parameter is <code>daily</code>. The second parameter is <code>1 year</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControlInputParameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterValue { get; set; }
	}
	
	/// <summary>
	/// <p>A framework consists of one or more controls. Each control has its own control scope. The control scope can include one or more resource types, a combination of a tag key and value, or a combination of one resource type and one resource ID. If no scope is specified, evaluations for the rule are triggered when any resource in your recording group changes in configuration.</p> <note> <p>To set a control scope that includes all of a particular resource, leave the <code>ControlScope</code> empty or do not pass it when calling <code>CreateFramework</code>.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ControlScope
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ComplianceResourceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ComplianceResourceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StringMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateLegalHoldOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LegalHoldStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LegalHoldId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LegalHoldArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecoveryPointSelection RecoveryPointSelection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LegalHoldStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 3,
	}
	
	/// <summary>
	/// This specifies criteria to assign a set of resources, such as resource types or backup vaults.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryPointSelection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VaultNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceIdentifiers { get; set; }
		
		/// <summary>
		/// <p>This is a resource filter containing FromDate: DateTime and ToDate: DateTime. Both values are required. Future DateTime values are not permitted.</p> <p>The date and time are in Unix format and Coordinated Universal Time (UTC), and it is accurate to milliseconds ((milliseconds are optional). For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DateRange DateRange { get; set; }
	}
	
	/// <summary>
	/// <p>This is a resource filter containing FromDate: DateTime and ToDate: DateTime. Both values are required. Future DateTime values are not permitted.</p> <p>The date and time are in Unix format and Coordinated Universal Time (UTC), and it is accurate to milliseconds ((milliseconds are optional). For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateRange
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset FromDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateReportPlanOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportPlanName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportPlanArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBackupPlanOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBackupJobOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackupJobState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PercentDone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecoveryPointCreator CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BytesTransferred { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExpectedCompletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackupOptions BackupOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParentJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsParent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfChildJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackupJobChildJobsInState ChildJobsInState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackupJobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABORTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABORTED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL = 8,
	}
	
	/// <summary>
	/// Contains information about the backup plan and rule that Backup used to initiate the recovery point backup.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryPointCreator
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupRuleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupJobChildJobsInState
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DependencyFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBackupVaultOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfRecoveryPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Locked { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinRetentionDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRetentionDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LockDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeCopyJobOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CopyJob CopyJob { get; set; }
	}
	
	/// <summary>
	/// Contains detailed information about a copy job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyJob
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CopyJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceBackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceRecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationBackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationRecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CopyJobState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		/// <summary>
		/// Contains information about the backup plan and rule that Backup used to initiate the recovery point backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecoveryPointCreator CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParentJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsParent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompositeMemberIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfChildJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CopyJobChildJobsInState ChildJobsInState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CopyJobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyJobChildJobsInState
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeFrameworkOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FrameworkControl[] FrameworkControls { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeGlobalSettingsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalSettings GlobalSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalSettings
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeProtectedResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastBackupTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRecoveryPointOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceBackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecoveryPointCreator CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecoveryPointStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CalculatedLifecycle CalculatedLifecycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Lifecycle Lifecycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StorageClass StorageClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastRestoreTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParentRecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompositeMemberIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsParent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecoveryPointStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 3,
	}
	
	/// <summary>
	/// <p>Contains <code>DeleteAt</code> and <code>MoveToColdStorageAt</code> timestamps, which are used to specify a lifecycle for a recovery point.</p> <p>The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. Backup transitions and expires backups automatically according to the lifecycle that you define.</p> <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.</p> <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CalculatedLifecycle
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset MoveToColdStorageAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeleteAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRegionSettingsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceTypeOptInPreference ResourceTypeOptInPreference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceTypeManagementPreference ResourceTypeManagementPreference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceTypeOptInPreference
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceTypeManagementPreference
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeReportJobOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReportJob ReportJob { get; set; }
	}
	
	/// <summary>
	/// Contains detailed information about a report job. A report job compiles a report based on a report plan and publishes it to Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportJob
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportPlanArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReportDestination ReportDestination { get; set; }
	}
	
	/// <summary>
	/// Contains information from your report job about your report destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportDestination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] S3Keys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeReportPlanOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReportPlan ReportPlan { get; set; }
	}
	
	/// <summary>
	/// Contains detailed information about a report plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportPlan
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportPlanArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportPlanName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportPlanDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReportSetting ReportSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReportDeliveryChannel ReportDeliveryChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastAttemptedExecutionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastSuccessfulExecutionTime { get; set; }
	}
	
	/// <summary>
	/// Contains detailed information about a report setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReportTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FrameworkArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfFrameworks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Accounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OrganizationUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Regions { get; set; }
	}
	
	/// <summary>
	/// Contains information from your report plan about where to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportDeliveryChannel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Formats { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRestoreJobOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RestoreJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RestoreJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PercentDone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpectedCompletionTimeMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RestoreJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABORTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportBackupPlanTemplateOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanTemplateJson { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBackupPlanOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackupPlan BackupPlan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastExecutionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdvancedBackupSetting[] AdvancedBackupSettings { get; set; }
	}
	
	/// <summary>
	/// Contains an optional backup plan display name and an array of <code>BackupRule</code> objects, each of which specifies a backup rule. Each rule in a backup plan is a separate scheduled task and can back up a different selection of Amazon Web Services resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupPlan
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackupRule[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdvancedBackupSetting[] AdvancedBackupSettings { get; set; }
	}
	
	/// <summary>
	/// Specifies a scheduled task used to back up a selection of resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetBackupVaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartWindowMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompletionWindowMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Lifecycle Lifecycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags RecoveryPointTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CopyAction[] CopyActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableContinuousBackup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBackupPlanFromJSONOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackupPlan BackupPlan { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBackupPlanFromTemplateOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackupPlan BackupPlanDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBackupSelectionOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackupSelection BackupSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SelectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
	}
	
	/// <summary>
	/// <p>Used to specify a set of resources to a backup plan.</p> <p>Specifying your desired <code>Conditions</code>, <code>ListOfTags</code>, <code>NotResources</code>, and/or <code>Resources</code> is recommended. If none of these are specified, Backup will attempt to select all supported and opted-in storage resources, which could have unintended cost implications.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupSelection
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SelectionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Condition[] ListOfTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NotResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Conditions Conditions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBackupVaultAccessPolicyOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBackupVaultNotificationsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SNSTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackupVaultEvent[] BackupVaultEvents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackupVaultEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKUP_JOB_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKUP_JOB_COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKUP_JOB_SUCCESSFUL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKUP_JOB_FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKUP_JOB_EXPIRED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTORE_JOB_STARTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTORE_JOB_COMPLETED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTORE_JOB_SUCCESSFUL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTORE_JOB_FAILED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPY_JOB_STARTED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPY_JOB_SUCCESSFUL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPY_JOB_FAILED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERY_POINT_MODIFIED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKUP_PLAN_CREATED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKUP_PLAN_MODIFIED = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_BACKUP_OBJECT_FAILED = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_RESTORE_OBJECT_FAILED = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLegalHoldOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LegalHoldStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CancelDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LegalHoldId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LegalHoldArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CancellationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RetainRecordUntil { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecoveryPointSelection RecoveryPointSelection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRecoveryPointRestoreMetadataOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Metadata RestoreMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metadata
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSupportedResourceTypesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBackupJobsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackupJob[] BackupJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains detailed information about a backup job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupJob
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackupJobState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PercentDone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecoveryPointCreator CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExpectedCompletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BytesTransferred { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackupOptions BackupOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParentJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsParent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBackupPlanTemplatesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackupPlanTemplatesListMember[] BackupPlanTemplatesList { get; set; }
	}
	
	/// <summary>
	/// An object specifying metadata associated with a backup plan template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupPlanTemplatesListMember
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanTemplateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBackupPlanVersionsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackupPlansListMember[] BackupPlanVersionsList { get; set; }
	}
	
	/// <summary>
	/// Contains metadata about a backup plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupPlansListMember
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastExecutionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdvancedBackupSetting[] AdvancedBackupSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBackupPlansOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackupPlansListMember[] BackupPlansList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBackupSelectionsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackupSelectionsListMember[] BackupSelectionsList { get; set; }
	}
	
	/// <summary>
	/// Contains metadata about a <code>BackupSelection</code> object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupSelectionsListMember
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SelectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SelectionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBackupVaultsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackupVaultListMember[] BackupVaultList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains metadata about a backup vault.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupVaultListMember
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfRecoveryPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Locked { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinRetentionDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRetentionDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LockDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCopyJobsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CopyJob[] CopyJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFrameworksOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Framework[] Frameworks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains detailed information about a framework. Frameworks contain controls, which evaluate and report on your backup events and resources. Frameworks generate daily compliance results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Framework
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfControls { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLegalHoldsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LegalHold[] LegalHolds { get; set; }
	}
	
	/// <summary>
	/// A legal hold is an administrative tool that helps prevent backups from being deleted while under a hold. While the hold is in place, backups under a hold cannot be deleted and lifecycle policies that would alter the backup status (such as transition to cold storage) are delayed until the legal hold is removed. A backup can have more than one legal hold. Legal holds are applied to one or more backups (also known as recovery points). These backups can be filtered by resource types and by resource IDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LegalHold
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LegalHoldStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LegalHoldId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LegalHoldArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CancellationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProtectedResourcesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProtectedResource[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A structure that contains information about a backed-up resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProtectedResource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastBackupTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRecoveryPointsByBackupVaultOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecoveryPointByBackupVault[] RecoveryPoints { get; set; }
	}
	
	/// <summary>
	/// Contains detailed information about the recovery points stored in a backup vault.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryPointByBackupVault
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceBackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecoveryPointCreator CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecoveryPointStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CalculatedLifecycle CalculatedLifecycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Lifecycle Lifecycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastRestoreTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParentRecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompositeMemberIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsParent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRecoveryPointsByLegalHoldOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecoveryPointMember[] RecoveryPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// This is a recovery point which is a child (nested) recovery point of a parent (composite) recovery point. These recovery points can be disassociated from their parent (composite) recovery point, in which case they will no longer be a member.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryPointMember
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRecoveryPointsByResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecoveryPointByResource[] RecoveryPoints { get; set; }
	}
	
	/// <summary>
	/// Contains detailed information about a saved recovery point.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryPointByResource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecoveryPointStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupSizeBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsParent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParentRecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReportJobsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReportJob[] ReportJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReportPlansOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReportPlan[] ReportPlans { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRestoreJobsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RestoreJobsListMember[] RestoreJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains metadata about a restore job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RestoreJobsListMember
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RestoreJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RestoreJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PercentDone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpectedCompletionTimeMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartBackupJobOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsParent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartCopyJobOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CopyJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsParent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReportJobOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportJobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartRestoreJobOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RestoreJobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBackupPlanOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdvancedBackupSetting[] AdvancedBackupSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFrameworkOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRecoveryPointLifecycleOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Lifecycle Lifecycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CalculatedLifecycle CalculatedLifecycle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateReportPlanOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportPlanName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportPlanArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	/// <summary>
	/// Contains an optional backup plan display name and an array of <code>BackupRule</code> objects, each of which specifies a backup rule. Each rule in a backup plan is a separate scheduled task. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupPlanInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackupRuleInput[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdvancedBackupSetting[] AdvancedBackupSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelLegalHoldInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBackupPlanInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackupPlanInput BackupPlan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags BackupPlanTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBackupSelectionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackupSelection BackupSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBackupVaultInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tags BackupVaultTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFrameworkInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FrameworkControl[] FrameworkControls { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringMap FrameworkTags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateLegalHoldInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecoveryPointSelection RecoveryPointSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateReportPlanInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReportPlanName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportPlanDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReportDeliveryChannel ReportDeliveryChannel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReportSetting ReportSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringMap ReportPlanTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBackupPlanInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBackupSelectionInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBackupVaultAccessPolicyInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBackupVaultInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBackupVaultLockConfigurationInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBackupVaultNotificationsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFrameworkInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRecoveryPointInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteReportPlanInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBackupJobInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBackupVaultInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeCopyJobInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeFrameworkInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeGlobalSettingsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeProtectedResourceInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRecoveryPointInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRegionSettingsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeReportJobInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeReportPlanInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRestoreJobInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateRecoveryPointFromParentInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateRecoveryPointInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportBackupPlanTemplateInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBackupPlanFromJSONInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanTemplateJson { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBackupPlanFromTemplateInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBackupPlanInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBackupSelectionInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBackupVaultAccessPolicyInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBackupVaultNotificationsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLegalHoldInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRecoveryPointRestoreMetadataInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBackupJobsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBackupPlanTemplatesInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBackupPlanVersionsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBackupPlansInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBackupSelectionsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBackupVaultsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCopyJobsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFrameworksInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLegalHoldsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProtectedResourcesInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRecoveryPointsByBackupVaultInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRecoveryPointsByLegalHoldInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRecoveryPointsByResourceInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReportJobsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReportPlansInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRestoreJobsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutBackupVaultAccessPolicyInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutBackupVaultLockConfigurationInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinRetentionDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRetentionDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ChangeableForDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutBackupVaultNotificationsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SNSTopicArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackupVaultEvent[] BackupVaultEvents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartBackupJobInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BackupVaultName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartWindowMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompleteWindowMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Lifecycle Lifecycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags RecoveryPointTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackupOptions BackupOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartCopyJobInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceBackupVaultName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationBackupVaultArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
		
		/// <summary>
		/// <p>Contains an array of <code>Transition</code> objects specifying how long in days before a recovery point transitions to cold storage or is deleted.</p> <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.</p> <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Lifecycle Lifecycle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReportJobInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartRestoreJobInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Metadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CopySourceTagsToRestoredResource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopBackupJobInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeyList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBackupPlanInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackupPlanInput BackupPlan { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFrameworkInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FrameworkControl[] FrameworkControls { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGlobalSettingsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalSettings GlobalSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRecoveryPointLifecycleInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Lifecycle Lifecycle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRegionSettingsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceTypeOptInPreference ResourceTypeOptInPreference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceTypeManagementPreference ResourceTypeManagementPreference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateReportPlanInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportPlanDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReportDeliveryChannel ReportDeliveryChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReportSetting ReportSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// This action removes the specified legal hold on a recovery point. This action can only be performed by a user with sufficient permissions.
		/// CancelLegalHold legal-holds/{legalHoldId}#cancelDescription
		/// </summary>
		/// <param name="legalHoldId">Legal hold ID required to remove the specified legal hold on a recovery point.</param>
		/// <param name="cancelDescription">String describing the reason for removing the legal hold.</param>
		/// <param name="retainRecordInDays">The integer amount in days specifying amount of days after this API operation to remove legal hold.</param>
		public async Task CancelLegalHoldAsync(string legalHoldId, string cancelDescription, int retainRecordInDays, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "legal-holds/"+ (legalHoldId==null? "" : System.Uri.EscapeDataString(legalHoldId))+"#cancelDescription&cancelDescription=" + (cancelDescription==null? "" : System.Uri.EscapeDataString(cancelDescription))+"&retainRecordInDays="+retainRecordInDays;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a backup plan using a backup plan name and backup rules. A backup plan is a document that contains information that Backup uses to schedule tasks that create recovery points for resources.</p> <p>If you call <code>CreateBackupPlan</code> with a plan that already exists, you receive an <code>AlreadyExistsException</code> exception.</p>
		/// CreateBackupPlan backup/plans/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateBackupPlanOutput> CreateBackupPlanAsync(CreateBackupPlanPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup/plans/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateBackupPlanOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all active backup plans for an authenticated account. The list contains information such as Amazon Resource Names (ARNs), plan IDs, creation and deletion dates, version IDs, plan names, and creator request IDs.
		/// ListBackupPlans backup/plans/
		/// </summary>
		/// <param name="nextToken">The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults">The maximum number of items to be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="includeDeleted">A Boolean value with a default value of <code>FALSE</code> that returns deleted backup plans when set to <code>TRUE</code>.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBackupPlansOutput> ListBackupPlansAsync(string nextToken, int maxResults, bool includeDeleted, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup/plans/?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&includeDeleted="+includeDeleted+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBackupPlansOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a JSON document that specifies a set of resources to assign to a backup plan. For examples, see <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/assigning-resources.html#assigning-resources-json">Assigning resources programmatically</a>.
		/// CreateBackupSelection backup/plans/{backupPlanId}/selections/
		/// </summary>
		/// <param name="backupPlanId">Uniquely identifies the backup plan to be associated with the selection of resources.</param>
		/// <returns>Success</returns>
		public async Task<CreateBackupSelectionOutput> CreateBackupSelectionAsync(string backupPlanId, CreateBackupSelectionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup/plans/"+ (backupPlanId==null? "" : System.Uri.EscapeDataString(backupPlanId))+"/selections/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateBackupSelectionOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an array containing metadata of the resources associated with the target backup plan.
		/// ListBackupSelections backup/plans/{backupPlanId}/selections/
		/// </summary>
		/// <param name="backupPlanId">Uniquely identifies a backup plan.</param>
		/// <param name="nextToken">The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults">The maximum number of items to be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBackupSelectionsOutput> ListBackupSelectionsAsync(string backupPlanId, string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup/plans/"+ (backupPlanId==null? "" : System.Uri.EscapeDataString(backupPlanId))+"/selections/&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBackupSelectionsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a logical container where backups are stored. A <code>CreateBackupVault</code> request includes a name, optionally one or more resource tags, an encryption key, and a request ID.</p> <note> <p>Do not include sensitive data, such as passport numbers, in the name of a backup vault.</p> </note>
		/// CreateBackupVault backup-vaults/{backupVaultName}
		/// </summary>
		/// <param name="backupVaultName">The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of letters, numbers, and hyphens.</param>
		/// <returns>Success</returns>
		public async Task<CreateBackupVaultOutput> CreateBackupVaultAsync(string backupVaultName, CreateBackupVaultPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateBackupVaultOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the backup vault identified by its name. A vault can be deleted only if it is empty.
		/// DeleteBackupVault backup-vaults/{backupVaultName}
		/// </summary>
		/// <param name="backupVaultName">The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <returns>Success</returns>
		public async Task DeleteBackupVaultAsync(string backupVaultName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns metadata about a backup vault specified by its name.
		/// DescribeBackupVault backup-vaults/{backupVaultName}
		/// </summary>
		/// <param name="backupVaultName">The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <returns>Success</returns>
		public async Task<DescribeBackupVaultOutput> DescribeBackupVaultAsync(string backupVaultName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeBackupVaultOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a framework with one or more controls. A framework is a collection of controls that you can use to evaluate your backup practices. By using pre-built customizable controls to define your policies, you can evaluate whether your backup practices comply with your policies and which resources are not yet in compliance.
		/// CreateFramework audit/frameworks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateFrameworkOutput> CreateFrameworkAsync(CreateFrameworkPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/frameworks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateFrameworkOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all frameworks for an Amazon Web Services account and Amazon Web Services Region.
		/// ListFrameworks audit/frameworks
		/// </summary>
		/// <param name="MaxResults">The number of desired results from 1 to 1000. Optional. If unspecified, the query will return 1 MB of data.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="NextToken">An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</param>
		/// <returns>Success</returns>
		public async Task<ListFrameworksOutput> ListFrameworksAsync(int MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/frameworks?MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListFrameworksOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This action creates a legal hold on a recovery point (backup). A legal hold is a restraint on altering or deleting a backup until an authorized user cancels the legal hold. Any actions to delete or disassociate a recovery point will fail with an error if one or more active legal holds are on the recovery point.
		/// CreateLegalHold legal-holds/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateLegalHoldOutput> CreateLegalHoldAsync(CreateLegalHoldPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "legal-holds/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateLegalHoldOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This action returns metadata about active and previous legal holds.
		/// ListLegalHolds legal-holds/
		/// </summary>
		/// <param name="nextToken">The next item following a partial list of returned resources. For example, if a request is made to return <code>maxResults</code> number of resources, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults">The maximum number of resource list items to be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListLegalHoldsOutput> ListLegalHoldsAsync(string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "legal-holds/?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLegalHoldsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a report plan. A report plan is a document that contains information about the contents of the report and where Backup will deliver it.</p> <p>If you call <code>CreateReportPlan</code> with a plan that already exists, you receive an <code>AlreadyExistsException</code> exception.</p>
		/// CreateReportPlan audit/report-plans
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateReportPlanOutput> CreateReportPlanAsync(CreateReportPlanPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/report-plans";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateReportPlanOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of your report plans. For detailed information about a single report plan, use <code>DescribeReportPlan</code>.
		/// ListReportPlans audit/report-plans
		/// </summary>
		/// <param name="MaxResults">The number of desired results from 1 to 1000. Optional. If unspecified, the query will return 1 MB of data.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="NextToken">An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</param>
		/// <returns>Success</returns>
		public async Task<ListReportPlansOutput> ListReportPlansAsync(int MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/report-plans?MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListReportPlansOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a backup plan. A backup plan can only be deleted after all associated selections of resources have been deleted. Deleting a backup plan deletes the current version of a backup plan. Previous versions, if any, will still exist.
		/// DeleteBackupPlan backup/plans/{backupPlanId}
		/// </summary>
		/// <param name="backupPlanId">Uniquely identifies a backup plan.</param>
		/// <returns>Success</returns>
		public async Task<DeleteBackupPlanOutput> DeleteBackupPlanAsync(string backupPlanId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup/plans/"+ (backupPlanId==null? "" : System.Uri.EscapeDataString(backupPlanId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteBackupPlanOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing backup plan identified by its <code>backupPlanId</code> with the input document in JSON format. The new version is uniquely identified by a <code>VersionId</code>.
		/// UpdateBackupPlan backup/plans/{backupPlanId}
		/// </summary>
		/// <param name="backupPlanId">Uniquely identifies a backup plan.</param>
		/// <returns>Success</returns>
		public async Task<UpdateBackupPlanOutput> UpdateBackupPlanAsync(string backupPlanId, UpdateBackupPlanPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup/plans/"+ (backupPlanId==null? "" : System.Uri.EscapeDataString(backupPlanId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateBackupPlanOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the resource selection associated with a backup plan that is specified by the <code>SelectionId</code>.
		/// DeleteBackupSelection backup/plans/{backupPlanId}/selections/{selectionId}
		/// </summary>
		/// <param name="backupPlanId">Uniquely identifies a backup plan.</param>
		/// <param name="selectionId">Uniquely identifies the body of a request to assign a set of resources to a backup plan.</param>
		/// <returns>Success</returns>
		public async Task DeleteBackupSelectionAsync(string backupPlanId, string selectionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup/plans/"+ (backupPlanId==null? "" : System.Uri.EscapeDataString(backupPlanId))+"/selections/"+ (selectionId==null? "" : System.Uri.EscapeDataString(selectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns selection metadata and a document in JSON format that specifies a list of resources that are associated with a backup plan.
		/// GetBackupSelection backup/plans/{backupPlanId}/selections/{selectionId}
		/// </summary>
		/// <param name="backupPlanId">Uniquely identifies a backup plan.</param>
		/// <param name="selectionId">Uniquely identifies the body of a request to assign a set of resources to a backup plan.</param>
		/// <returns>Success</returns>
		public async Task<GetBackupSelectionOutput> GetBackupSelectionAsync(string backupPlanId, string selectionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup/plans/"+ (backupPlanId==null? "" : System.Uri.EscapeDataString(backupPlanId))+"/selections/"+ (selectionId==null? "" : System.Uri.EscapeDataString(selectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBackupSelectionOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the policy document that manages permissions on a backup vault.
		/// DeleteBackupVaultAccessPolicy backup-vaults/{backupVaultName}/access-policy
		/// </summary>
		/// <param name="backupVaultName">The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <returns>Success</returns>
		public async Task DeleteBackupVaultAccessPolicyAsync(string backupVaultName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/access-policy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the access policy document that is associated with the named backup vault.
		/// GetBackupVaultAccessPolicy backup-vaults/{backupVaultName}/access-policy
		/// </summary>
		/// <param name="backupVaultName">The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <returns>Success</returns>
		public async Task<GetBackupVaultAccessPolicyOutput> GetBackupVaultAccessPolicyAsync(string backupVaultName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/access-policy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBackupVaultAccessPolicyOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets a resource-based policy that is used to manage access permissions on the target backup vault. Requires a backup vault name and an access policy document in JSON format.
		/// PutBackupVaultAccessPolicy backup-vaults/{backupVaultName}/access-policy
		/// </summary>
		/// <param name="backupVaultName">The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <returns>Success</returns>
		public async Task PutBackupVaultAccessPolicyAsync(string backupVaultName, PutBackupVaultAccessPolicyPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/access-policy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes Backup Vault Lock from a backup vault specified by a backup vault name.</p> <p>If the Vault Lock configuration is immutable, then you cannot delete Vault Lock using API operations, and you will receive an <code>InvalidRequestException</code> if you attempt to do so. For more information, see <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/vault-lock.html">Vault Lock</a> in the <i>Backup Developer Guide</i>.</p>
		/// DeleteBackupVaultLockConfiguration backup-vaults/{backupVaultName}/vault-lock
		/// </summary>
		/// <param name="backupVaultName">The name of the backup vault from which to delete Backup Vault Lock.</param>
		/// <returns>Success</returns>
		public async Task DeleteBackupVaultLockConfigurationAsync(string backupVaultName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/vault-lock";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Applies Backup Vault Lock to a backup vault, preventing attempts to delete any recovery point stored in or created in a backup vault. Vault Lock also prevents attempts to update the lifecycle policy that controls the retention period of any recovery point currently stored in a backup vault. If specified, Vault Lock enforces a minimum and maximum retention period for future backup and copy jobs that target a backup vault.</p> <note> <p>Backup Vault Lock has been assessed by Cohasset Associates for use in environments that are subject to SEC 17a-4, CFTC, and FINRA regulations. For more information about how Backup Vault Lock relates to these regulations, see the <a href="samples/cohassetreport.zip">Cohasset Associates Compliance Assessment.</a> </p> </note>
		/// PutBackupVaultLockConfiguration backup-vaults/{backupVaultName}/vault-lock
		/// </summary>
		/// <param name="backupVaultName">The Backup Vault Lock configuration that specifies the name of the backup vault it protects.</param>
		/// <returns>Success</returns>
		public async Task PutBackupVaultLockConfigurationAsync(string backupVaultName, PutBackupVaultLockConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/vault-lock";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes event notifications for the specified backup vault.
		/// DeleteBackupVaultNotifications backup-vaults/{backupVaultName}/notification-configuration
		/// </summary>
		/// <param name="backupVaultName">The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <returns>Success</returns>
		public async Task DeleteBackupVaultNotificationsAsync(string backupVaultName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/notification-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns event notifications for the specified backup vault.
		/// GetBackupVaultNotifications backup-vaults/{backupVaultName}/notification-configuration
		/// </summary>
		/// <param name="backupVaultName">The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <returns>Success</returns>
		public async Task<GetBackupVaultNotificationsOutput> GetBackupVaultNotificationsAsync(string backupVaultName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/notification-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBackupVaultNotificationsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Turns on notifications on a backup vault for the specified topic and events.
		/// PutBackupVaultNotifications backup-vaults/{backupVaultName}/notification-configuration
		/// </summary>
		/// <param name="backupVaultName">The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <returns>Success</returns>
		public async Task PutBackupVaultNotificationsAsync(string backupVaultName, PutBackupVaultNotificationsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/notification-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the framework specified by a framework name.
		/// DeleteFramework audit/frameworks/{frameworkName}
		/// </summary>
		/// <param name="frameworkName">The unique name of a framework.
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task DeleteFrameworkAsync(string frameworkName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/frameworks/"+ (frameworkName==null? "" : System.Uri.EscapeDataString(frameworkName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the framework details for the specified <code>FrameworkName</code>.
		/// DescribeFramework audit/frameworks/{frameworkName}
		/// </summary>
		/// <param name="frameworkName">The unique name of a framework.
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeFrameworkOutput> DescribeFrameworkAsync(string frameworkName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/frameworks/"+ (frameworkName==null? "" : System.Uri.EscapeDataString(frameworkName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeFrameworkOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing framework identified by its <code>FrameworkName</code> with the input document in JSON format.
		/// UpdateFramework audit/frameworks/{frameworkName}
		/// </summary>
		/// <param name="frameworkName">The unique name of a framework. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateFrameworkOutput> UpdateFrameworkAsync(string frameworkName, UpdateFrameworkPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/frameworks/"+ (frameworkName==null? "" : System.Uri.EscapeDataString(frameworkName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateFrameworkOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the recovery point specified by a recovery point ID.</p> <p>If the recovery point ID belongs to a continuous backup, calling this endpoint deletes the existing continuous backup and stops future continuous backup.</p> <p>When an IAM role's permissions are insufficient to call this API, the service sends back an HTTP 200 response with an empty HTTP body, but the recovery point is not deleted. Instead, it enters an <code>EXPIRED</code> state.</p> <p> <code>EXPIRED</code> recovery points can be deleted with this API once the IAM role has the <code>iam:CreateServiceLinkedRole</code> action. To learn more about adding this role, see <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/deleting-backups.html#deleting-backups-troubleshooting"> Troubleshooting manual deletions</a>.</p> <p>If the user or role is deleted or the permission within the role is removed, the deletion will not be successful and will enter an <code>EXPIRED</code> state.</p>
		/// DeleteRecoveryPoint backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}
		/// </summary>
		/// <param name="backupVaultName">The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <param name="recoveryPointArn">An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</param>
		/// <returns>Success</returns>
		public async Task DeleteRecoveryPointAsync(string backupVaultName, string recoveryPointArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/recovery-points/"+ (recoveryPointArn==null? "" : System.Uri.EscapeDataString(recoveryPointArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns metadata associated with a recovery point, including ID, status, encryption, and lifecycle.
		/// DescribeRecoveryPoint backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}
		/// </summary>
		/// <param name="backupVaultName">The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <param name="recoveryPointArn">An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</param>
		/// <returns>Success</returns>
		public async Task<DescribeRecoveryPointOutput> DescribeRecoveryPointAsync(string backupVaultName, string recoveryPointArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/recovery-points/"+ (recoveryPointArn==null? "" : System.Uri.EscapeDataString(recoveryPointArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeRecoveryPointOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the transition lifecycle of a recovery point.</p> <p>The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. Backup transitions and expires backups automatically according to the lifecycle that you define.</p> <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.</p> <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p> <p>This operation does not support continuous backups.</p>
		/// UpdateRecoveryPointLifecycle backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}
		/// </summary>
		/// <param name="backupVaultName">The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <param name="recoveryPointArn">An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</param>
		/// <returns>Success</returns>
		public async Task<UpdateRecoveryPointLifecycleOutput> UpdateRecoveryPointLifecycleAsync(string backupVaultName, string recoveryPointArn, UpdateRecoveryPointLifecyclePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/recovery-points/"+ (recoveryPointArn==null? "" : System.Uri.EscapeDataString(recoveryPointArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateRecoveryPointLifecycleOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the report plan specified by a report plan name.
		/// DeleteReportPlan audit/report-plans/{reportPlanName}
		/// </summary>
		/// <param name="reportPlanName">The unique name of a report plan.
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task DeleteReportPlanAsync(string reportPlanName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/report-plans/"+ (reportPlanName==null? "" : System.Uri.EscapeDataString(reportPlanName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all report plans for an Amazon Web Services account and Amazon Web Services Region.
		/// DescribeReportPlan audit/report-plans/{reportPlanName}
		/// </summary>
		/// <param name="reportPlanName">The unique name of a report plan.
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeReportPlanOutput> DescribeReportPlanAsync(string reportPlanName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/report-plans/"+ (reportPlanName==null? "" : System.Uri.EscapeDataString(reportPlanName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeReportPlanOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing report plan identified by its <code>ReportPlanName</code> with the input document in JSON format.
		/// UpdateReportPlan audit/report-plans/{reportPlanName}
		/// </summary>
		/// <param name="reportPlanName">The unique name of the report plan. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateReportPlanOutput> UpdateReportPlanAsync(string reportPlanName, UpdateReportPlanPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/report-plans/"+ (reportPlanName==null? "" : System.Uri.EscapeDataString(reportPlanName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateReportPlanOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns backup job details for the specified <code>BackupJobId</code>.
		/// DescribeBackupJob backup-jobs/{backupJobId}
		/// </summary>
		/// <param name="backupJobId">Uniquely identifies a request to Backup to back up a resource.</param>
		/// <returns>Success</returns>
		public async Task<DescribeBackupJobOutput> DescribeBackupJobAsync(string backupJobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-jobs/"+ (backupJobId==null? "" : System.Uri.EscapeDataString(backupJobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeBackupJobOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Attempts to cancel a job to create a one-time backup of a resource.</p> <p>This action is not supported for the following services: Amazon FSx for Windows File Server, Amazon FSx for Lustre, FSx for ONTAP , Amazon FSx for OpenZFS, Amazon DocumentDB (with MongoDB compatibility), Amazon RDS, Amazon Aurora, and Amazon Neptune.</p>
		/// StopBackupJob backup-jobs/{backupJobId}
		/// </summary>
		/// <param name="backupJobId">Uniquely identifies a request to Backup to back up a resource.</param>
		/// <returns>Success</returns>
		public async Task StopBackupJobAsync(string backupJobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-jobs/"+ (backupJobId==null? "" : System.Uri.EscapeDataString(backupJobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns metadata associated with creating a copy of a resource.
		/// DescribeCopyJob copy-jobs/{copyJobId}
		/// </summary>
		/// <param name="copyJobId">Uniquely identifies a copy job.</param>
		/// <returns>Success</returns>
		public async Task<DescribeCopyJobOutput> DescribeCopyJobAsync(string copyJobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "copy-jobs/"+ (copyJobId==null? "" : System.Uri.EscapeDataString(copyJobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeCopyJobOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes whether the Amazon Web Services account is opted in to cross-account backup. Returns an error if the account is not a member of an Organizations organization. Example: <code>describe-global-settings --region us-west-2</code>
		/// DescribeGlobalSettings global-settings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeGlobalSettingsOutput> DescribeGlobalSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeGlobalSettingsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates whether the Amazon Web Services account is opted in to cross-account backup. Returns an error if the account is not an Organizations management account. Use the <code>DescribeGlobalSettings</code> API to determine the current settings.
		/// UpdateGlobalSettings global-settings
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateGlobalSettingsAsync(UpdateGlobalSettingsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a saved resource, including the last time it was backed up, its Amazon Resource Name (ARN), and the Amazon Web Services service type of the saved resource.
		/// DescribeProtectedResource resources/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.</param>
		/// <returns>Success</returns>
		public async Task<DescribeProtectedResourceOutput> DescribeProtectedResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "resources/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeProtectedResourceOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the current service opt-in settings for the Region. If service opt-in is enabled for a service, Backup tries to protect that service's resources in this Region, when the resource is included in an on-demand backup or scheduled backup plan. Otherwise, Backup does not try to protect that service's resources in this Region.
		/// DescribeRegionSettings account-settings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeRegionSettingsOutput> DescribeRegionSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account-settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeRegionSettingsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the current service opt-in settings for the Region. If service-opt-in is enabled for a service, Backup tries to protect that service's resources in this Region, when the resource is included in an on-demand backup or scheduled backup plan. Otherwise, Backup does not try to protect that service's resources in this Region. Use the <code>DescribeRegionSettings</code> API to determine the resource types that are supported.
		/// UpdateRegionSettings account-settings
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateRegionSettingsAsync(UpdateRegionSettingsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account-settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the details associated with creating a report as specified by its <code>ReportJobId</code>.
		/// DescribeReportJob audit/report-jobs/{reportJobId}
		/// </summary>
		/// <param name="reportJobId">The identifier of the report job. A unique, randomly generated, Unicode, UTF-8 encoded string that is at most 1,024 bytes long. The report job ID cannot be edited.</param>
		/// <returns>Success</returns>
		public async Task<DescribeReportJobOutput> DescribeReportJobAsync(string reportJobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/report-jobs/"+ (reportJobId==null? "" : System.Uri.EscapeDataString(reportJobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeReportJobOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns metadata associated with a restore job that is specified by a job ID.
		/// DescribeRestoreJob restore-jobs/{restoreJobId}
		/// </summary>
		/// <param name="restoreJobId">Uniquely identifies the job that restores a recovery point.</param>
		/// <returns>Success</returns>
		public async Task<DescribeRestoreJobOutput> DescribeRestoreJobAsync(string restoreJobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restore-jobs/"+ (restoreJobId==null? "" : System.Uri.EscapeDataString(restoreJobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeRestoreJobOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified continuous backup recovery point from Backup and releases control of that continuous backup to the source service, such as Amazon RDS. The source service will continue to create and retain continuous backups using the lifecycle that you specified in your original backup plan.</p> <p>Does not support snapshot backup recovery points.</p>
		/// DisassociateRecoveryPoint backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}/disassociate
		/// </summary>
		/// <param name="backupVaultName">The unique name of an Backup vault.</param>
		/// <param name="recoveryPointArn">An Amazon Resource Name (ARN) that uniquely identifies an Backup recovery point.</param>
		/// <returns>Success</returns>
		public async Task DisassociateRecoveryPointAsync(string backupVaultName, string recoveryPointArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/recovery-points/"+ (recoveryPointArn==null? "" : System.Uri.EscapeDataString(recoveryPointArn))+"/disassociate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This action to a specific child (nested) recovery point removes the relationship between the specified recovery point and its parent (composite) recovery point.
		/// DisassociateRecoveryPointFromParent backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}/parentAssociation
		/// </summary>
		/// <param name="backupVaultName">This is the name of a logical container where the child (nested) recovery point is stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <param name="recoveryPointArn">This is the Amazon Resource Name (ARN) that uniquely identifies the child (nested) recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45.</code> </param>
		public async Task DisassociateRecoveryPointFromParentAsync(string backupVaultName, string recoveryPointArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/recovery-points/"+ (recoveryPointArn==null? "" : System.Uri.EscapeDataString(recoveryPointArn))+"/parentAssociation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the backup plan that is specified by the plan ID as a backup template.
		/// ExportBackupPlanTemplate backup/plans/{backupPlanId}/toTemplate/
		/// </summary>
		/// <param name="backupPlanId">Uniquely identifies a backup plan.</param>
		/// <returns>Success</returns>
		public async Task<ExportBackupPlanTemplateOutput> ExportBackupPlanTemplateAsync(string backupPlanId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup/plans/"+ (backupPlanId==null? "" : System.Uri.EscapeDataString(backupPlanId))+"/toTemplate/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExportBackupPlanTemplateOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns <code>BackupPlan</code> details for the specified <code>BackupPlanId</code>. The details are the body of a backup plan in JSON format, in addition to plan metadata.
		/// GetBackupPlan backup/plans/{backupPlanId}/
		/// </summary>
		/// <param name="backupPlanId">Uniquely identifies a backup plan.</param>
		/// <param name="versionId">Unique, randomly generated, Unicode, UTF-8 encoded strings that are at most 1,024 bytes long. Version IDs cannot be edited.</param>
		/// <returns>Success</returns>
		public async Task<GetBackupPlanOutput> GetBackupPlanAsync(string backupPlanId, string versionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup/plans/"+ (backupPlanId==null? "" : System.Uri.EscapeDataString(backupPlanId))+"/&versionId=" + (versionId==null? "" : System.Uri.EscapeDataString(versionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBackupPlanOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a valid JSON document specifying a backup plan or an error.
		/// GetBackupPlanFromJSON backup/template/json/toPlan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetBackupPlanFromJSONOutput> GetBackupPlanFromJSONAsync(GetBackupPlanFromJSONPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup/template/json/toPlan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBackupPlanFromJSONOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the template specified by its <code>templateId</code> as a backup plan.
		/// GetBackupPlanFromTemplate backup/template/plans/{templateId}/toPlan
		/// </summary>
		/// <param name="templateId">Uniquely identifies a stored backup plan template.</param>
		/// <returns>Success</returns>
		public async Task<GetBackupPlanFromTemplateOutput> GetBackupPlanFromTemplateAsync(string templateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup/template/plans/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId))+"/toPlan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBackupPlanFromTemplateOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This action returns details for a specified legal hold. The details are the body of a legal hold in JSON format, in addition to metadata.
		/// GetLegalHold legal-holds/{legalHoldId}/
		/// </summary>
		/// <param name="legalHoldId">This is the ID required to use <code>GetLegalHold</code>. This unique ID is associated with a specific legal hold.</param>
		/// <returns>Success</returns>
		public async Task<GetLegalHoldOutput> GetLegalHoldAsync(string legalHoldId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "legal-holds/"+ (legalHoldId==null? "" : System.Uri.EscapeDataString(legalHoldId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetLegalHoldOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a set of metadata key-value pairs that were used to create the backup.
		/// GetRecoveryPointRestoreMetadata backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}/restore-metadata
		/// </summary>
		/// <param name="backupVaultName">The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <param name="recoveryPointArn">An Amazon Resource Name (ARN) that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.</param>
		/// <returns>Success</returns>
		public async Task<GetRecoveryPointRestoreMetadataOutput> GetRecoveryPointRestoreMetadataAsync(string backupVaultName, string recoveryPointArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/recovery-points/"+ (recoveryPointArn==null? "" : System.Uri.EscapeDataString(recoveryPointArn))+"/restore-metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetRecoveryPointRestoreMetadataOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the Amazon Web Services resource types supported by Backup.
		/// GetSupportedResourceTypes supported-resource-types
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSupportedResourceTypesOutput> GetSupportedResourceTypesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "supported-resource-types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetSupportedResourceTypesOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of existing backup jobs for an authenticated account for the last 30 days. For a longer period of time, consider using these <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/monitoring.html">monitoring tools</a>.
		/// ListBackupJobs backup-jobs/
		/// </summary>
		/// <param name="nextToken">The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults">The maximum number of items to be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="resourceArn">Returns only backup jobs that match the specified resource Amazon Resource Name (ARN).</param>
		/// <param name="state">Returns only backup jobs that are in the specified state.</param>
		/// <param name="backupVaultName">Returns only backup jobs that will be stored in the specified backup vault. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</param>
		/// <param name="createdBefore">Returns only backup jobs that were created before the specified date.</param>
		/// <param name="createdAfter">Returns only backup jobs that were created after the specified date.</param>
		/// <param name="resourceType"><p>Returns only backup jobs for the specified resources:</p> <ul> <li> <p> <code>Aurora</code> for Amazon Aurora</p> </li> <li> <p> <code>DocumentDB</code> for Amazon DocumentDB (with MongoDB compatibility)</p> </li> <li> <p> <code>DynamoDB</code> for Amazon DynamoDB</p> </li> <li> <p> <code>EBS</code> for Amazon Elastic Block Store</p> </li> <li> <p> <code>EC2</code> for Amazon Elastic Compute Cloud</p> </li> <li> <p> <code>EFS</code> for Amazon Elastic File System</p> </li> <li> <p> <code>FSx</code> for Amazon FSx</p> </li> <li> <p> <code>Neptune</code> for Amazon Neptune</p> </li> <li> <p> <code>RDS</code> for Amazon Relational Database Service</p> </li> <li> <p> <code>Storage Gateway</code> for Storage Gateway</p> </li> <li> <p> <code>S3</code> for Amazon S3</p> </li> <li> <p> <code>VirtualMachine</code> for virtual machines</p> </li> </ul></param>
		/// <param name="accountId"><p>The account ID to list the jobs from. Returns only backup jobs associated with the specified account ID.</p> <p>If used from an Organizations management account, passing <code>*</code> returns all jobs across the organization.</p></param>
		/// <param name="completeAfter">Returns only backup jobs completed after a date expressed in Unix format and Coordinated Universal Time (UTC).</param>
		/// <param name="completeBefore">Returns only backup jobs completed before a date expressed in Unix format and Coordinated Universal Time (UTC).</param>
		/// <param name="parentJobId">This is a filter to list child (nested) jobs based on parent job ID.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBackupJobsOutput> ListBackupJobsAsync(string nextToken, int maxResults, string resourceArn, BackupJobState state, string backupVaultName, System.DateTimeOffset createdBefore, System.DateTimeOffset createdAfter, string resourceType, string accountId, System.DateTimeOffset completeAfter, System.DateTimeOffset completeBefore, string parentJobId, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-jobs/?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"&state=" + state+"&backupVaultName=" + (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"&createdBefore=" + createdBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAfter=" + createdAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&resourceType=" + (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"&accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&completeAfter=" + completeAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&completeBefore=" + completeBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&parentJobId=" + (parentJobId==null? "" : System.Uri.EscapeDataString(parentJobId))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBackupJobsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns metadata of your saved backup plan templates, including the template ID, name, and the creation and deletion dates.
		/// ListBackupPlanTemplates backup/template/plans
		/// </summary>
		/// <param name="nextToken">The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults">The maximum number of items to be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBackupPlanTemplatesOutput> ListBackupPlanTemplatesAsync(string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup/template/plans?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBackupPlanTemplatesOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns version metadata of your backup plans, including Amazon Resource Names (ARNs), backup plan IDs, creation and deletion dates, plan names, and version IDs.
		/// ListBackupPlanVersions backup/plans/{backupPlanId}/versions/
		/// </summary>
		/// <param name="backupPlanId">Uniquely identifies a backup plan.</param>
		/// <param name="nextToken">The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults">The maximum number of items to be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBackupPlanVersionsOutput> ListBackupPlanVersionsAsync(string backupPlanId, string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup/plans/"+ (backupPlanId==null? "" : System.Uri.EscapeDataString(backupPlanId))+"/versions/&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBackupPlanVersionsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of recovery point storage containers along with information about them.
		/// ListBackupVaults backup-vaults/
		/// </summary>
		/// <param name="nextToken">The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults">The maximum number of items to be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBackupVaultsOutput> ListBackupVaultsAsync(string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBackupVaultsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns metadata about your copy jobs.
		/// ListCopyJobs copy-jobs/
		/// </summary>
		/// <param name="nextToken">The next item following a partial list of returned items. For example, if a request is made to return maxResults number of items, NextToken allows you to return more items in your list starting at the location pointed to by the next token. </param>
		/// <param name="maxResults">The maximum number of items to be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="resourceArn">Returns only copy jobs that match the specified resource Amazon Resource Name (ARN). </param>
		/// <param name="state">Returns only copy jobs that are in the specified state.</param>
		/// <param name="createdBefore">Returns only copy jobs that were created before the specified date.</param>
		/// <param name="createdAfter">Returns only copy jobs that were created after the specified date.</param>
		/// <param name="resourceType"><p>Returns only backup jobs for the specified resources:</p> <ul> <li> <p> <code>Aurora</code> for Amazon Aurora</p> </li> <li> <p> <code>DocumentDB</code> for Amazon DocumentDB (with MongoDB compatibility)</p> </li> <li> <p> <code>DynamoDB</code> for Amazon DynamoDB</p> </li> <li> <p> <code>EBS</code> for Amazon Elastic Block Store</p> </li> <li> <p> <code>EC2</code> for Amazon Elastic Compute Cloud</p> </li> <li> <p> <code>EFS</code> for Amazon Elastic File System</p> </li> <li> <p> <code>FSx</code> for Amazon FSx</p> </li> <li> <p> <code>Neptune</code> for Amazon Neptune</p> </li> <li> <p> <code>RDS</code> for Amazon Relational Database Service</p> </li> <li> <p> <code>Storage Gateway</code> for Storage Gateway</p> </li> <li> <p> <code>S3</code> for Amazon S3</p> </li> <li> <p> <code>VirtualMachine</code> for virtual machines</p> </li> </ul></param>
		/// <param name="destinationVaultArn">An Amazon Resource Name (ARN) that uniquely identifies a source backup vault to copy from; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>. </param>
		/// <param name="accountId">The account ID to list the jobs from. Returns only copy jobs associated with the specified account ID.</param>
		/// <param name="completeBefore">Returns only copy jobs completed before a date expressed in Unix format and Coordinated Universal Time (UTC).</param>
		/// <param name="completeAfter">Returns only copy jobs completed after a date expressed in Unix format and Coordinated Universal Time (UTC).</param>
		/// <param name="parentJobId">This is a filter to list child (nested) jobs based on parent job ID.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCopyJobsOutput> ListCopyJobsAsync(string nextToken, int maxResults, string resourceArn, CopyJobState state, System.DateTimeOffset createdBefore, System.DateTimeOffset createdAfter, string resourceType, string destinationVaultArn, string accountId, System.DateTimeOffset completeBefore, System.DateTimeOffset completeAfter, string parentJobId, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "copy-jobs/?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"&state=" + state+"&createdBefore=" + createdBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAfter=" + createdAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&resourceType=" + (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"&destinationVaultArn=" + (destinationVaultArn==null? "" : System.Uri.EscapeDataString(destinationVaultArn))+"&accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&completeBefore=" + completeBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&completeAfter=" + completeAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&parentJobId=" + (parentJobId==null? "" : System.Uri.EscapeDataString(parentJobId))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCopyJobsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an array of resources successfully backed up by Backup, including the time the resource was saved, an Amazon Resource Name (ARN) of the resource, and a resource type.
		/// ListProtectedResources resources/
		/// </summary>
		/// <param name="nextToken">The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults">The maximum number of items to be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProtectedResourcesOutput> ListProtectedResourcesAsync(string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "resources/?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListProtectedResourcesOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns detailed information about the recovery points stored in a backup vault.
		/// ListRecoveryPointsByBackupVault backup-vaults/{backupVaultName}/recovery-points/
		/// </summary>
		/// <param name="backupVaultName"><p>The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.</p> <note> <p>Backup vault name might not be available when a supported service creates the backup.</p> </note></param>
		/// <param name="nextToken">The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults">The maximum number of items to be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="resourceArn">Returns only recovery points that match the specified resource Amazon Resource Name (ARN).</param>
		/// <param name="resourceType">Returns only recovery points that match the specified resource type.</param>
		/// <param name="backupPlanId">Returns only recovery points that match the specified backup plan ID.</param>
		/// <param name="createdBefore">Returns only recovery points that were created before the specified timestamp.</param>
		/// <param name="createdAfter">Returns only recovery points that were created after the specified timestamp.</param>
		/// <param name="parentRecoveryPointArn">This returns only recovery points that match the specified parent (composite) recovery point Amazon Resource Name (ARN).</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRecoveryPointsByBackupVaultOutput> ListRecoveryPointsByBackupVaultAsync(string backupVaultName, string nextToken, int maxResults, string resourceArn, string resourceType, string backupPlanId, System.DateTimeOffset createdBefore, System.DateTimeOffset createdAfter, string parentRecoveryPointArn, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-vaults/"+ (backupVaultName==null? "" : System.Uri.EscapeDataString(backupVaultName))+"/recovery-points/&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"&resourceType=" + (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"&backupPlanId=" + (backupPlanId==null? "" : System.Uri.EscapeDataString(backupPlanId))+"&createdBefore=" + createdBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAfter=" + createdAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&parentRecoveryPointArn=" + (parentRecoveryPointArn==null? "" : System.Uri.EscapeDataString(parentRecoveryPointArn))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRecoveryPointsByBackupVaultOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This action returns recovery point ARNs (Amazon Resource Names) of the specified legal hold.
		/// ListRecoveryPointsByLegalHold legal-holds/{legalHoldId}/recovery-points
		/// </summary>
		/// <param name="legalHoldId">This is the ID of the legal hold.</param>
		/// <param name="nextToken">This is the next item following a partial list of returned resources. For example, if a request is made to return <code>maxResults</code> number of resources, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults">This is the maximum number of resource list items to be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRecoveryPointsByLegalHoldOutput> ListRecoveryPointsByLegalHoldAsync(string legalHoldId, string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "legal-holds/"+ (legalHoldId==null? "" : System.Uri.EscapeDataString(legalHoldId))+"/recovery-points&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRecoveryPointsByLegalHoldOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns detailed information about all the recovery points of the type specified by a resource Amazon Resource Name (ARN).</p> <note> <p>For Amazon EFS and Amazon EC2, this action only lists recovery points created by Backup.</p> </note>
		/// ListRecoveryPointsByResource resources/{resourceArn}/recovery-points/
		/// </summary>
		/// <param name="resourceArn">An ARN that uniquely identifies a resource. The format of the ARN depends on the resource type.</param>
		/// <param name="nextToken">The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults"><p>The maximum number of items to be returned.</p> <note> <p>Amazon RDS requires a value of at least 20.</p> </note>
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRecoveryPointsByResourceOutput> ListRecoveryPointsByResourceAsync(string resourceArn, string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "resources/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"/recovery-points/&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRecoveryPointsByResourceOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns details about your report jobs.
		/// ListReportJobs audit/report-jobs
		/// </summary>
		/// <param name="ReportPlanName">Returns only report jobs with the specified report plan name.
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="CreationBefore">Returns only report jobs that were created before the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</param>
		/// <param name="CreationAfter">Returns only report jobs that were created after the date and time specified in Unix format and Coordinated Universal Time (UTC). For example, the value 1516925490 represents Friday, January 26, 2018 12:11:30 AM.</param>
		/// <param name="Status"><p>Returns only report jobs that are in the specified status. The statuses are:</p> <p> <code>CREATED | RUNNING | COMPLETED | FAILED</code> </p></param>
		/// <param name="MaxResults">The number of desired results from 1 to 1000. Optional. If unspecified, the query will return 1 MB of data.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="NextToken">An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</param>
		/// <returns>Success</returns>
		public async Task<ListReportJobsOutput> ListReportJobsAsync(string ReportPlanName, System.DateTimeOffset CreationBefore, System.DateTimeOffset CreationAfter, string Status, int MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/report-jobs?ReportPlanName=" + (ReportPlanName==null? "" : System.Uri.EscapeDataString(ReportPlanName))+"&CreationBefore=" + CreationBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&CreationAfter=" + CreationAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Status=" + (Status==null? "" : System.Uri.EscapeDataString(Status))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListReportJobsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of jobs that Backup initiated to restore a saved resource, including details about the recovery process.
		/// ListRestoreJobs restore-jobs/
		/// </summary>
		/// <param name="nextToken">The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults">The maximum number of items to be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="accountId">The account ID to list the jobs from. Returns only restore jobs associated with the specified account ID.</param>
		/// <param name="createdBefore">Returns only restore jobs that were created before the specified date.</param>
		/// <param name="createdAfter">Returns only restore jobs that were created after the specified date.</param>
		/// <param name="status">Returns only restore jobs associated with the specified job status.</param>
		/// <param name="completeBefore">Returns only copy jobs completed before a date expressed in Unix format and Coordinated Universal Time (UTC).</param>
		/// <param name="completeAfter">Returns only copy jobs completed after a date expressed in Unix format and Coordinated Universal Time (UTC).</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRestoreJobsOutput> ListRestoreJobsAsync(string nextToken, int maxResults, string accountId, System.DateTimeOffset createdBefore, System.DateTimeOffset createdAfter, RestoreJobStatus status, System.DateTimeOffset completeBefore, System.DateTimeOffset completeAfter, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restore-jobs/?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&createdBefore=" + createdBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAfter=" + createdAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&status=" + status+"&completeBefore=" + completeBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&completeAfter=" + completeAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRestoreJobsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of key-value pairs assigned to a target recovery point, backup plan, or backup vault.</p> <p> <code>ListTags</code> only works for resource types that support full Backup management of their backups. Those resource types are listed in the "Full Backup management" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table.</p>
		/// ListTags tags/{resourceArn}/
		/// </summary>
		/// <param name="resourceArn">An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the type of resource. Valid targets for <code>ListTags</code> are recovery points, backup plans, and backup vaults.</param>
		/// <param name="nextToken">The next item following a partial list of returned items. For example, if a request is made to return <code>maxResults</code> number of items, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</param>
		/// <param name="maxResults">The maximum number of items to be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTagsOutput> ListTagsAsync(string resourceArn, string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"/&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts an on-demand backup job for the specified resource.
		/// StartBackupJob backup-jobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartBackupJobOutput> StartBackupJobAsync(StartBackupJobPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-jobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartBackupJobOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Starts a job to create a one-time copy of the specified resource.</p> <p>Does not support continuous backups.</p>
		/// StartCopyJob copy-jobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartCopyJobOutput> StartCopyJobAsync(StartCopyJobPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "copy-jobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartCopyJobOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts an on-demand report job for the specified report plan.
		/// StartReportJob audit/report-jobs/{reportPlanName}
		/// </summary>
		/// <param name="reportPlanName">The unique name of a report plan.
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<StartReportJobOutput> StartReportJobAsync(string reportPlanName, StartReportJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit/report-jobs/"+ (reportPlanName==null? "" : System.Uri.EscapeDataString(reportPlanName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartReportJobOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recovers the saved resource identified by an Amazon Resource Name (ARN).
		/// StartRestoreJob restore-jobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartRestoreJobOutput> StartRestoreJobAsync(StartRestoreJobPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restore-jobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartRestoreJobOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assigns a set of key-value pairs to a recovery point, backup plan, or backup vault identified by an Amazon Resource Name (ARN).
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">An ARN that uniquely identifies a resource. The format of the ARN depends on the type of the tagged resource.</param>
		/// <returns>Success</returns>
		public async Task TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a set of key-value pairs from a recovery point, backup plan, or backup vault identified by an Amazon Resource Name (ARN)
		/// UntagResource untag/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">An ARN that uniquely identifies a resource. The format of the ARN depends on the type of the tagged resource.</param>
		/// <returns>Success</returns>
		public async Task UntagResourceAsync(string resourceArn, UntagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "untag/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CreateBackupPlanPutBody
	{
		
		/// <summary>
		/// Contains an optional backup plan display name and an array of <code>BackupRule</code> objects, each of which specifies a backup rule. Each rule in a backup plan is a separate scheduled task. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateBackupPlanPutBodyBackupPlan BackupPlan { get; set; }
		
		/// <summary>
		/// To help organize your resources, you can assign your own metadata to the resources that you create. Each tag is a key-value pair. The specified tags are assigned to all backups created with this plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> BackupPlanTags { get; set; }
		
		/// <summary>
		/// <p>Identifies the request and allows failed requests to be retried without the risk of running the operation twice. If the request includes a <code>CreatorRequestId</code> that matches an existing backup plan, that plan is returned. This parameter is optional.</p> <p>If used, this parameter must contain 1 to 50 alphanumeric or '-_.' characters.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
	}
	
	public class CreateBackupPlanPutBodyBackupPlan
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackupRuleInput[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdvancedBackupSetting[] AdvancedBackupSettings { get; set; }
	}
	
	public class CreateBackupSelectionPutBody
	{
		
		/// <summary>
		/// <p>Used to specify a set of resources to a backup plan.</p> <p>Specifying your desired <code>Conditions</code>, <code>ListOfTags</code>, <code>NotResources</code>, and/or <code>Resources</code> is recommended. If none of these are specified, Backup will attempt to select all supported and opted-in storage resources, which could have unintended cost implications.</p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateBackupSelectionPutBodyBackupSelection BackupSelection { get; set; }
		
		/// <summary>
		/// <p>A unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice. This parameter is optional.</p> <p>If used, this parameter must contain 1 to 50 alphanumeric or '-_.' characters.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
	}
	
	public class CreateBackupSelectionPutBodyBackupSelection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SelectionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Condition[] ListOfTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NotResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Conditions Conditions { get; set; }
	}
	
	public class CreateBackupVaultPutBody
	{
		
		/// <summary>
		/// Metadata that you can assign to help organize the resources that you create. Each tag is a key-value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> BackupVaultTags { get; set; }
		
		/// <summary>
		/// The server-side encryption key that is used to protect your backups; for example, <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKeyArn { get; set; }
		
		/// <summary>
		/// <p>A unique string that identifies the request and allows failed requests to be retried without the risk of running the operation twice. This parameter is optional.</p> <p>If used, this parameter must contain 1 to 50 alphanumeric or '-_.' characters.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
	}
	
	public class CreateFrameworkPostBody
	{
		
		/// <summary>
		/// The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [a-zA-Z][_a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z][_a-zA-Z0-9]*")]
		public string FrameworkName { get; set; }
		
		/// <summary>
		/// An optional description of the framework with a maximum of 1,024 characters.
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string FrameworkDescription { get; set; }
		
		/// <summary>
		/// A list of the controls that make up the framework. Each control in the list has a name, input parameters, and scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FrameworkControl[] FrameworkControls { get; set; }
		
		/// <summary>
		/// A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>CreateFrameworkInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
		
		/// <summary>
		/// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> FrameworkTags { get; set; }
	}
	
	public class CreateLegalHoldPostBody
	{
		
		/// <summary>
		/// This is the string title of the legal hold.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// This is the string description of the legal hold.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// This is a user-chosen string used to distinguish between otherwise identical calls. Retrying a successful request with the same idempotency token results in a success message with no action taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
		
		/// <summary>
		/// This specifies criteria to assign a set of resources, such as resource types or backup vaults.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateLegalHoldPostBodyRecoveryPointSelection RecoveryPointSelection { get; set; }
		
		/// <summary>
		/// Optional tags to include. A tag is a key-value pair you can use to manage, filter, and search for your resources. Allowed characters include UTF-8 letters, numbers, spaces, and the following characters: + - = . _ : /. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateLegalHoldPostBodyRecoveryPointSelection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VaultNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceIdentifiers { get; set; }
		
		/// <summary>
		/// <p>This is a resource filter containing FromDate: DateTime and ToDate: DateTime. Both values are required. Future DateTime values are not permitted.</p> <p>The date and time are in Unix format and Coordinated Universal Time (UTC), and it is accurate to milliseconds ((milliseconds are optional). For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DateRange DateRange { get; set; }
	}
	
	public class CreateReportPlanPostBody
	{
		
		/// <summary>
		/// The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [a-zA-Z][_a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z][_a-zA-Z0-9]*")]
		public string ReportPlanName { get; set; }
		
		/// <summary>
		/// An optional description of the report plan with a maximum of 1,024 characters.
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ReportPlanDescription { get; set; }
		
		/// <summary>
		/// Contains information from your report plan about where to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateReportPlanPostBodyReportDeliveryChannel ReportDeliveryChannel { get; set; }
		
		/// <summary>
		/// Contains detailed information about a report setting.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateReportPlanPostBodyReportSetting ReportSetting { get; set; }
		
		/// <summary>
		/// Metadata that you can assign to help organize the report plans that you create. Each tag is a key-value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> ReportPlanTags { get; set; }
		
		/// <summary>
		/// A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>CreateReportPlanInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	public class CreateReportPlanPostBodyReportDeliveryChannel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Formats { get; set; }
	}
	
	public class CreateReportPlanPostBodyReportSetting
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FrameworkArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfFrameworks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Accounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OrganizationUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Regions { get; set; }
	}
	
	public class UpdateBackupPlanPostBody
	{
		
		/// <summary>
		/// Contains an optional backup plan display name and an array of <code>BackupRule</code> objects, each of which specifies a backup rule. Each rule in a backup plan is a separate scheduled task. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateBackupPlanPostBodyBackupPlan BackupPlan { get; set; }
	}
	
	public class UpdateBackupPlanPostBodyBackupPlan
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackupRuleInput[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdvancedBackupSetting[] AdvancedBackupSettings { get; set; }
	}
	
	public class PutBackupVaultAccessPolicyPutBody
	{
		
		/// <summary>
		/// The backup vault access policy document in JSON format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Policy { get; set; }
	}
	
	public class PutBackupVaultLockConfigurationPutBody
	{
		
		/// <summary>
		/// <p>The Backup Vault Lock configuration that specifies the minimum retention period that the vault retains its recovery points. This setting can be useful if, for example, your organization's policies require you to retain certain data for at least seven years (2555 days).</p> <p>If this parameter is not specified, Vault Lock will not enforce a minimum retention period.</p> <p>If this parameter is specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or longer than the minimum retention period. If the job's retention period is shorter than that minimum retention period, then the vault fails that backup or copy job, and you should either modify your lifecycle settings or use a different vault. The shortest minimum retention period you can specify is 1 day. Recovery points already saved in the vault prior to Vault Lock are not affected.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinRetentionDays { get; set; }
		
		/// <summary>
		/// <p>The Backup Vault Lock configuration that specifies the maximum retention period that the vault retains its recovery points. This setting can be useful if, for example, your organization's policies require you to destroy certain data after retaining it for four years (1460 days).</p> <p>If this parameter is not included, Vault Lock does not enforce a maximum retention period on the recovery points in the vault. If this parameter is included without a value, Vault Lock will not enforce a maximum retention period.</p> <p>If this parameter is specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or shorter than the maximum retention period. If the job's retention period is longer than that maximum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. The longest maximum retention period you can specify is 36500 days (approximately 100 years). Recovery points already saved in the vault prior to Vault Lock are not affected.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRetentionDays { get; set; }
		
		/// <summary>
		/// <p>The Backup Vault Lock configuration that specifies the number of days before the lock date. For example, setting <code>ChangeableForDays</code> to 30 on Jan. 1, 2022 at 8pm UTC will set the lock date to Jan. 31, 2022 at 8pm UTC.</p> <p>Backup enforces a 72-hour cooling-off period before Vault Lock takes effect and becomes immutable. Therefore, you must set <code>ChangeableForDays</code> to 3 or greater.</p> <p>Before the lock date, you can delete Vault Lock from the vault using <code>DeleteBackupVaultLockConfiguration</code> or change the Vault Lock configuration using <code>PutBackupVaultLockConfiguration</code>. On and after the lock date, the Vault Lock becomes immutable and cannot be changed or deleted.</p> <p>If this parameter is not specified, you can delete Vault Lock from the vault using <code>DeleteBackupVaultLockConfiguration</code> or change the Vault Lock configuration using <code>PutBackupVaultLockConfiguration</code> at any time.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ChangeableForDays { get; set; }
	}
	
	public class PutBackupVaultNotificationsPutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) that specifies the topic for a backup vault’s events; for example, <code>arn:aws:sns:us-west-2:111122223333:MyVaultTopic</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SNSTopicArn { get; set; }
		
		/// <summary>
		/// <p>An array of events that indicate the status of jobs to back up resources to the backup vault.</p> <p>For common use cases and code samples, see <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/sns-notifications.html">Using Amazon SNS to track Backup events</a>.</p> <p>The following events are supported:</p> <ul> <li> <p> <code>BACKUP_JOB_STARTED</code> | <code>BACKUP_JOB_COMPLETED</code> </p> </li> <li> <p> <code>COPY_JOB_STARTED</code> | <code>COPY_JOB_SUCCESSFUL</code> | <code>COPY_JOB_FAILED</code> </p> </li> <li> <p> <code>RESTORE_JOB_STARTED</code> | <code>RESTORE_JOB_COMPLETED</code> | <code>RECOVERY_POINT_MODIFIED</code> </p> </li> <li> <p> <code>S3_BACKUP_OBJECT_FAILED</code> | <code>S3_RESTORE_OBJECT_FAILED</code> </p> </li> </ul> <note> <p>The list below shows items that are deprecated events (for reference) and are no longer in use. They are no longer supported and will not return statuses or notifications. Refer to the list above for current supported events.</p> </note>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackupVaultEvent[] BackupVaultEvents { get; set; }
	}
	
	public class UpdateFrameworkPutBody
	{
		
		/// <summary>
		/// An optional description of the framework with a maximum 1,024 characters.
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string FrameworkDescription { get; set; }
		
		/// <summary>
		/// A list of the controls that make up the framework. Each control in the list has a name, input parameters, and scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FrameworkControl[] FrameworkControls { get; set; }
		
		/// <summary>
		/// A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>UpdateFrameworkInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	public class UpdateRecoveryPointLifecyclePostBody
	{
		
		/// <summary>
		/// <p>Contains an array of <code>Transition</code> objects specifying how long in days before a recovery point transitions to cold storage or is deleted.</p> <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.</p> <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateRecoveryPointLifecyclePostBodyLifecycle Lifecycle { get; set; }
	}
	
	public class UpdateRecoveryPointLifecyclePostBodyLifecycle
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MoveToColdStorageAfterDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeleteAfterDays { get; set; }
	}
	
	public class UpdateReportPlanPutBody
	{
		
		/// <summary>
		/// An optional description of the report plan with a maximum 1,024 characters.
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ReportPlanDescription { get; set; }
		
		/// <summary>
		/// Contains information from your report plan about where to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateReportPlanPutBodyReportDeliveryChannel ReportDeliveryChannel { get; set; }
		
		/// <summary>
		/// Contains detailed information about a report setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateReportPlanPutBodyReportSetting ReportSetting { get; set; }
		
		/// <summary>
		/// A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>UpdateReportPlanInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	public class UpdateReportPlanPutBodyReportDeliveryChannel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Formats { get; set; }
	}
	
	public class UpdateReportPlanPutBodyReportSetting
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FrameworkArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfFrameworks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Accounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OrganizationUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Regions { get; set; }
	}
	
	public class UpdateGlobalSettingsPutBody
	{
		
		/// <summary>
		/// A value for <code>isCrossAccountBackupEnabled</code> and a Region. Example: <code>update-global-settings --global-settings isCrossAccountBackupEnabled=false --region us-west-2</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> GlobalSettings { get; set; }
	}
	
	public class UpdateRegionSettingsPutBody
	{
		
		/// <summary>
		/// Updates the list of services along with the opt-in preferences for the Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, bool> ResourceTypeOptInPreference { get; set; }
		
		/// <summary>
		/// Enables or disables full Backup management of backups for a resource type. To enable full Backup management for DynamoDB along with <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/advanced-ddb-backup.html"> Backup's advanced DynamoDB backup features</a>, follow the procedure to <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/advanced-ddb-backup.html#advanced-ddb-backup-enable-cli"> enable advanced DynamoDB backup programmatically</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, bool> ResourceTypeManagementPreference { get; set; }
	}
	
	public class GetBackupPlanFromJSONPostBody
	{
		
		/// <summary>
		/// A customer-supplied backup plan document in JSON format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BackupPlanTemplateJson { get; set; }
	}
	
	public class StartBackupJobPutBody
	{
		
		/// <summary>
		/// The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
		/// Required
		/// Pattern: ^[a-zA-Z0-9\-\_]{2,50}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-\_]{2,50}$")]
		public string BackupVaultName { get; set; }
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Specifies the IAM role ARN used to create the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		/// <summary>
		/// A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>StartBackupJob</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
		
		/// <summary>
		/// <p>A value in minutes after a backup is scheduled before a job will be canceled if it doesn't start successfully. This value is optional, and the default is 8 hours. If this value is included, it must be at least 60 minutes to avoid errors.</p> <p>During the start window, the backup job status remains in <code>CREATED</code> status until it has successfully begun or until the start window time has run out. If within the start window time Backup receives an error that allows the job to be retried, Backup will automatically retry to begin the job at least every 10 minutes until the backup successfully begins (the job status changes to <code>RUNNING</code>) or until the job status changes to <code>EXPIRED</code> (which is expected to occur when the start window time is over).</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartWindowMinutes { get; set; }
		
		/// <summary>
		/// A value in minutes during which a successfully started backup must complete, or else Backup will cancel the job. This value is optional. This value begins counting down from when the backup was scheduled. It does not add additional time for <code>StartWindowMinutes</code>, or if the backup started later than scheduled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompleteWindowMinutes { get; set; }
		
		/// <summary>
		/// <p>Contains an array of <code>Transition</code> objects specifying how long in days before a recovery point transitions to cold storage or is deleted.</p> <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.</p> <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartBackupJobPutBodyLifecycle Lifecycle { get; set; }
		
		/// <summary>
		/// To help organize your resources, you can assign your own metadata to the resources that you create. Each tag is a key-value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> RecoveryPointTags { get; set; }
		
		/// <summary>
		/// <p>Specifies the backup option for a selected resource. This option is only available for Windows Volume Shadow Copy Service (VSS) backup jobs.</p> <p>Valid values: Set to <code>"WindowsVSS":"enabled"</code> to enable the <code>WindowsVSS</code> backup option and create a Windows VSS backup. Set to <code>"WindowsVSS""disabled"</code> to create a regular backup. The <code>WindowsVSS</code> option is not enabled by default.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> BackupOptions { get; set; }
	}
	
	public class StartBackupJobPutBodyLifecycle
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MoveToColdStorageAfterDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeleteAfterDays { get; set; }
	}
	
	public class StartCopyJobPutBody
	{
		
		/// <summary>
		/// An ARN that uniquely identifies a recovery point to use for the copy job; for example, arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		/// <summary>
		/// The name of a logical source container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the Amazon Web Services Region where they are created. They consist of lowercase letters, numbers, and hyphens.
		/// Required
		/// Pattern: ^[a-zA-Z0-9\-\_]{2,50}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-\_]{2,50}$")]
		public string SourceBackupVaultName { get; set; }
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies a destination backup vault to copy to; for example, <code>arn:aws:backup:us-east-1:123456789012:vault:aBackupVault</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationBackupVaultArn { get; set; }
		
		/// <summary>
		/// Specifies the IAM role ARN used to copy the target recovery point; for example, <code>arn:aws:iam::123456789012:role/S3Access</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		/// <summary>
		/// A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>StartCopyJob</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
		
		/// <summary>
		/// <p>Contains an array of <code>Transition</code> objects specifying how long in days before a recovery point transitions to cold storage or is deleted.</p> <p>Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days. Therefore, on the console, the “retention” setting must be 90 days greater than the “transition to cold after days” setting. The “transition to cold after days” setting cannot be changed after a backup has been transitioned to cold.</p> <p>Resource types that are able to be transitioned to cold storage are listed in the "Lifecycle to cold storage" section of the <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html#features-by-resource"> Feature availability by resource</a> table. Backup ignores this expression for other resource types.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartCopyJobPutBodyLifecycle Lifecycle { get; set; }
	}
	
	public class StartCopyJobPutBodyLifecycle
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MoveToColdStorageAfterDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeleteAfterDays { get; set; }
	}
	
	public class StartReportJobPostBody
	{
		
		/// <summary>
		/// A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>StartReportJobInput</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	public class StartRestoreJobPutBody
	{
		
		/// <summary>
		/// An ARN that uniquely identifies a recovery point; for example, <code>arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecoveryPointArn { get; set; }
		
		/// <summary>
		/// <p>A set of metadata key-value pairs. Contains information, such as a resource name, required to restore a recovery point.</p> <p> You can get configuration metadata about a resource at the time it was backed up by calling <code>GetRecoveryPointRestoreMetadata</code>. However, values in addition to those provided by <code>GetRecoveryPointRestoreMetadata</code> might be required to restore a resource. For example, you might need to provide a new resource name if the original already exists.</p> <p>You need to specify specific metadata to restore an Amazon Elastic File System (Amazon EFS) instance:</p> <ul> <li> <p> <code>file-system-id</code>: The ID of the Amazon EFS file system that is backed up by Backup. Returned in <code>GetRecoveryPointRestoreMetadata</code>.</p> </li> <li> <p> <code>Encrypted</code>: A Boolean value that, if true, specifies that the file system is encrypted. If <code>KmsKeyId</code> is specified, <code>Encrypted</code> must be set to <code>true</code>.</p> </li> <li> <p> <code>KmsKeyId</code>: Specifies the Amazon Web Services KMS key that is used to encrypt the restored file system. You can specify a key from another Amazon Web Services account provided that key it is properly shared with your account via Amazon Web Services KMS.</p> </li> <li> <p> <code>PerformanceMode</code>: Specifies the throughput mode of the file system.</p> </li> <li> <p> <code>CreationToken</code>: A user-supplied value that ensures the uniqueness (idempotency) of the request.</p> </li> <li> <p> <code>newFileSystem</code>: A Boolean value that, if true, specifies that the recovery point is restored to a new Amazon EFS file system.</p> </li> <li> <p> <code>ItemsToRestore</code>: An array of one to five strings where each string is a file path. Use <code>ItemsToRestore</code> to restore specific files or directories rather than the entire file system. This parameter is optional. For example, <code>"itemsToRestore":"[\"/my.test\"]"</code>.</p> </li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the IAM role that Backup uses to create the target resource; for example: <code>arn:aws:iam::123456789012:role/S3Access</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		/// <summary>
		/// A customer-chosen string that you can use to distinguish between otherwise identical calls to <code>StartRestoreJob</code>. Retrying a successful request with the same idempotency token results in a success message with no action taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
		
		/// <summary>
		/// <p>Starts a job to restore a recovery point for one of the following resources:</p> <ul> <li> <p> <code>Aurora</code> for Amazon Aurora</p> </li> <li> <p> <code>DocumentDB</code> for Amazon DocumentDB (with MongoDB compatibility)</p> </li> <li> <p> <code>CloudFormation</code> for CloudFormation</p> </li> <li> <p> <code>DynamoDB</code> for Amazon DynamoDB</p> </li> <li> <p> <code>EBS</code> for Amazon Elastic Block Store</p> </li> <li> <p> <code>EC2</code> for Amazon Elastic Compute Cloud</p> </li> <li> <p> <code>EFS</code> for Amazon Elastic File System</p> </li> <li> <p> <code>FSx</code> for Amazon FSx</p> </li> <li> <p> <code>Neptune</code> for Amazon Neptune</p> </li> <li> <p> <code>RDS</code> for Amazon Relational Database Service</p> </li> <li> <p> <code>Redshift</code> for Amazon Redshift</p> </li> <li> <p> <code>Storage Gateway</code> for Storage Gateway</p> </li> <li> <p> <code>S3</code> for Amazon S3</p> </li> <li> <p> <code>Timestream</code> for Amazon Timestream</p> </li> <li> <p> <code>VirtualMachine</code> for virtual machines</p> </li> </ul>
		/// Pattern: ^[a-zA-Z0-9\-\_\.]{1,50}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\-\_\.]{1,50}$")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// <p>This is an optional parameter. If this equals <code>True</code>, tags included in the backup will be copied to the restored resource.</p> <p>This can only be applied to backups created through Backup.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CopySourceTagsToRestoredResource { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// Key-value pairs that are used to help organize your resources. You can assign your own metadata to the resources you create. For clarity, this is the structure to assign tags: <code>[{"Key":"string","Value":"string"}]</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UntagResourcePostBody
	{
		
		/// <summary>
		/// A list of keys to identify which key-value tags to remove from a resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeyList { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
