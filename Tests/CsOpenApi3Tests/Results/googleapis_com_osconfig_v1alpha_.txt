//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CVSSv3
	{
		
		/// <summary>
		/// This metric describes the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attackComplexity")]
		public System.Nullable<CVSSv3AttackComplexity> AttackComplexity { get; set; }
		
		/// <summary>
		/// This metric reflects the context by which vulnerability exploitation is possible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attackVector")]
		public System.Nullable<CVSSv3AttackVector> AttackVector { get; set; }
		
		/// <summary>
		/// This metric measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityImpact")]
		public System.Nullable<CVSSv3AvailabilityImpact> AvailabilityImpact { get; set; }
		
		/// <summary>
		/// The base score is a function of the base metric scores. https://www.first.org/cvss/specification-document#Base-Metrics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseScore")]
		public System.Nullable<System.Single> BaseScore { get; set; }
		
		/// <summary>
		/// This metric measures the impact to the confidentiality of the information resources managed by a software component due to a successfully exploited vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidentialityImpact")]
		public CVSSv3AvailabilityImpact ConfidentialityImpact { get; set; }
		
		/// <summary>
		/// The Exploitability sub-score equation is derived from the Base Exploitability metrics. https://www.first.org/cvss/specification-document#2-1-Exploitability-Metrics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exploitabilityScore")]
		public System.Nullable<System.Single> ExploitabilityScore { get; set; }
		
		/// <summary>
		/// The Impact sub-score equation is derived from the Base Impact metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impactScore")]
		public System.Nullable<System.Single> ImpactScore { get; set; }
		
		/// <summary>
		/// This metric measures the impact to integrity of a successfully exploited vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrityImpact")]
		public CVSSv3AvailabilityImpact IntegrityImpact { get; set; }
		
		/// <summary>
		/// This metric describes the level of privileges an attacker must possess before successfully exploiting the vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privilegesRequired")]
		public System.Nullable<CVSSv3PrivilegesRequired> PrivilegesRequired { get; set; }
		
		/// <summary>
		/// The Scope metric captures whether a vulnerability in one vulnerable component impacts resources in components beyond its security scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<CVSSv3Scope> Scope { get; set; }
		
		/// <summary>
		/// This metric captures the requirement for a human user, other than the attacker, to participate in the successful compromise of the vulnerable component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userInteraction")]
		public System.Nullable<CVSSv3UserInteraction> UserInteraction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CVSSv3AttackComplexity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_COMPLEXITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_COMPLEXITY_LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_COMPLEXITY_HIGH = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CVSSv3AttackVector
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_NETWORK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_ADJACENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_LOCAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_PHYSICAL = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CVSSv3AvailabilityImpact
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_NONE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CVSSv3PrivilegesRequired
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGES_REQUIRED_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGES_REQUIRED_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGES_REQUIRED_LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGES_REQUIRED_HIGH = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CVSSv3Scope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOPE_UNCHANGED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOPE_CHANGED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CVSSv3UserInteraction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_INTERACTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_INTERACTION_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_INTERACTION_REQUIRED = 2,
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FixedOrPercent
	{
		
		/// <summary>
		/// Specifies a fixed value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixed")]
		public System.Nullable<System.Int32> Fixed { get; set; }
		
		/// <summary>
		/// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percent")]
		public System.Nullable<System.Int32> Percent { get; set; }
	}
	
	/// <summary>
	/// OS policy assignment operation metadata provided by OS policy assignment API methods that return long running operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudOsconfigV1__OSPolicyAssignmentOperationMetadata
	{
		
		/// <summary>
		/// The OS policy assignment API method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiMethod")]
		public System.Nullable<GoogleCloudOsconfigV1__OSPolicyAssignmentOperationMetadataApiMethod> ApiMethod { get; set; }
		
		/// <summary>
		/// Reference to the `OSPolicyAssignment` API resource. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyAssignment")]
		public string OsPolicyAssignment { get; set; }
		
		/// <summary>
		/// Rollout start time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutStartTime")]
		public string RolloutStartTime { get; set; }
		
		/// <summary>
		/// State of the rollout
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutState")]
		public System.Nullable<GoogleCloudOsconfigV1__OSPolicyAssignmentOperationMetadataRolloutState> RolloutState { get; set; }
		
		/// <summary>
		/// Rollout update time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutUpdateTime")]
		public string RolloutUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudOsconfigV1__OSPolicyAssignmentOperationMetadataApiMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_METHOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudOsconfigV1__OSPolicyAssignmentOperationMetadataRolloutState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLLOUT_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 4,
	}
	
	/// <summary>
	/// This API resource represents the OS policies compliance data for a Compute Engine virtual machine (VM) instance at a given point in time. A Compute Engine VM can have multiple OS policy assignments, and each assignment can have multiple OS policies. As a result, multiple OS policies could be applied to a single VM. You can use this API resource to determine both the compliance state of your VM as well as the compliance state of an individual OS policy. For more information, see [View compliance](https://cloud.google.com/compute/docs/os-configuration-management/view-compliance).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceOSPoliciesCompliance
	{
		
		/// <summary>
		/// Output only. Detailed compliance state of the VM. This field is populated only when compliance state is `UNKNOWN`. It may contain one of the following values: * `no-compliance-data`: Compliance data is not available for this VM. * `no-agent-detected`: OS Config agent is not detected for this VM. * `config-not-supported-by-agent`: The version of the OS Config agent running on this VM does not support configuration management. * `inactive`: VM is not running. * `internal-service-errors`: There were internal service errors encountered while enforcing compliance. * `agent-errors`: OS config agent encountered errors while enforcing compliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailedState")]
		public string DetailedState { get; set; }
		
		/// <summary>
		/// Output only. The reason for the `detailed_state` of the VM (if any).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailedStateReason")]
		public string DetailedStateReason { get; set; }
		
		/// <summary>
		/// Output only. The Compute Engine VM instance name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Output only. Timestamp of the last compliance check for the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastComplianceCheckTime")]
		public string LastComplianceCheckTime { get; set; }
		
		/// <summary>
		/// Output only. Unique identifier for the last compliance run. This id will be logged by the OS config agent during a compliance run and can be used for debugging and tracing purpose.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastComplianceRunId")]
		public string LastComplianceRunId { get; set; }
		
		/// <summary>
		/// Output only. The `InstanceOSPoliciesCompliance` API resource name. Format: `projects/{project_number}/locations/{location}/instanceOSPoliciesCompliances/{instance_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Compliance data for each `OSPolicy` that is applied to the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyCompliances")]
		public InstanceOSPoliciesComplianceOSPolicyCompliance[] OsPolicyCompliances { get; set; }
		
		/// <summary>
		/// Output only. Compliance state of the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public OSPolicyResourceComplianceState State { get; set; }
	}
	
	/// <summary>
	/// Compliance data for an OS policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceOSPoliciesComplianceOSPolicyCompliance
	{
		
		/// <summary>
		/// Reference to the `OSPolicyAssignment` API resource that the `OSPolicy` belongs to. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyAssignment")]
		public string OsPolicyAssignment { get; set; }
		
		/// <summary>
		/// The OS policy id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyId")]
		public string OsPolicyId { get; set; }
		
		/// <summary>
		/// Compliance data for each `OSPolicyResource` that is applied to the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyResourceCompliances")]
		public OSPolicyResourceCompliance[] OsPolicyResourceCompliances { get; set; }
		
		/// <summary>
		/// Compliance state of the OS policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public OSPolicyResourceComplianceState State { get; set; }
	}
	
	/// <summary>
	/// Compliance data for an OS policy resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceCompliance
	{
		
		/// <summary>
		/// Ordered list of configuration steps taken by the agent for the OS policy resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configSteps")]
		public OSPolicyResourceConfigStep[] ConfigSteps { get; set; }
		
		/// <summary>
		/// ExecResource specific output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="execResourceOutput")]
		public OSPolicyResourceComplianceExecResourceOutput ExecResourceOutput { get; set; }
		
		/// <summary>
		/// The id of the OS policy resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyResourceId")]
		public string OsPolicyResourceId { get; set; }
		
		/// <summary>
		/// Compliance state of the OS policy resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<OSPolicyResourceComplianceState> State { get; set; }
	}
	
	/// <summary>
	/// Step performed by the OS Config agent for configuring an `OSPolicyResource` to its desired state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceConfigStep
	{
		
		/// <summary>
		/// An error message recorded during the execution of this step. Only populated when outcome is FAILED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Outcome of the configuration step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outcome")]
		public System.Nullable<OSPolicyResourceConfigStepOutcome> Outcome { get; set; }
		
		/// <summary>
		/// Configuration step type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<OSPolicyResourceConfigStepType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OSPolicyResourceConfigStepOutcome
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTCOME_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OSPolicyResourceConfigStepType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESIRED_STATE_CHECK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESIRED_STATE_ENFORCEMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESIRED_STATE_CHECK_POST_ENFORCEMENT = 4,
	}
	
	/// <summary>
	/// ExecResource specific output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceComplianceExecResourceOutput
	{
		
		/// <summary>
		/// Output from Enforcement phase output file (if run). Output size is limited to 100K bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enforcementOutput")]
		public string EnforcementOutput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OSPolicyResourceComplianceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_OS_POLICIES_APPLICABLE = 4,
	}
	
	/// <summary>
	/// This API resource represents the available inventory data for a Compute Engine virtual machine (VM) instance at a given point in time. You can use this API resource to determine the inventory data of your VM. For more information, see [Information provided by OS inventory management](https://cloud.google.com/compute/docs/instances/os-inventory-management#data-collected).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Inventory
	{
		
		/// <summary>
		/// Output only. Inventory items related to the VM keyed by an opaque unique identifier for each inventory item. The identifier is unique to each distinct and addressable inventory item and will change, when there is a new package version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public System.Collections.Generic.Dictionary<string, InventoryItem> Items { get; set; }
		
		/// <summary>
		/// Output only. The `Inventory` API resource name. Format: `projects/{project_number}/locations/{location}/instances/{instance_id}/inventory`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Operating system information for the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osInfo")]
		public InventoryOsInfo OsInfo { get; set; }
		
		/// <summary>
		/// Output only. Timestamp of the last reported inventory for the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// A single piece of inventory on a VM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoryItem
	{
		
		/// <summary>
		/// Software package information of the operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availablePackage")]
		public InventorySoftwarePackage AvailablePackage { get; set; }
		
		/// <summary>
		/// When this inventory item was first detected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Identifier for this item, unique across items for this VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Software package information of the operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installedPackage")]
		public InventorySoftwarePackage InstalledPackage { get; set; }
		
		/// <summary>
		/// The origin of this inventory item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originType")]
		public System.Nullable<InventoryItemOriginType> OriginType { get; set; }
		
		/// <summary>
		/// The specific type of inventory, correlating to its specific details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<InventoryItemType> Type { get; set; }
		
		/// <summary>
		/// When this inventory item was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Software package information of the operating system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventorySoftwarePackage
	{
		
		/// <summary>
		/// Information related to the a standard versioned package. This includes package info for APT, Yum, Zypper, and Googet package managers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aptPackage")]
		public InventoryVersionedPackage AptPackage { get; set; }
		
		/// <summary>
		/// Information related to the a standard versioned package. This includes package info for APT, Yum, Zypper, and Googet package managers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cosPackage")]
		public InventoryVersionedPackage CosPackage { get; set; }
		
		/// <summary>
		/// Information related to the a standard versioned package. This includes package info for APT, Yum, Zypper, and Googet package managers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googetPackage")]
		public InventoryVersionedPackage GoogetPackage { get; set; }
		
		/// <summary>
		/// Information related to a Quick Fix Engineering package. Fields are taken from Windows QuickFixEngineering Interface and match the source names: https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-quickfixengineering
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qfePackage")]
		public InventoryWindowsQuickFixEngineeringPackage QfePackage { get; set; }
		
		/// <summary>
		/// Contains information about a Windows application that is retrieved from the Windows Registry. For more information about these fields, see: https://docs.microsoft.com/en-us/windows/win32/msi/uninstall-registry-key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsApplication")]
		public InventoryWindowsApplication WindowsApplication { get; set; }
		
		/// <summary>
		/// Details related to a Windows Update package. Field data and names are taken from Windows Update API IUpdate Interface: https://docs.microsoft.com/en-us/windows/win32/api/_wua/ Descriptive fields like title, and description are localized based on the locale of the VM being updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wuaPackage")]
		public InventoryWindowsUpdatePackage WuaPackage { get; set; }
		
		/// <summary>
		/// Information related to the a standard versioned package. This includes package info for APT, Yum, Zypper, and Googet package managers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yumPackage")]
		public InventoryVersionedPackage YumPackage { get; set; }
		
		/// <summary>
		/// Information related to the a standard versioned package. This includes package info for APT, Yum, Zypper, and Googet package managers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zypperPackage")]
		public InventoryVersionedPackage ZypperPackage { get; set; }
		
		/// <summary>
		/// Details related to a Zypper Patch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zypperPatch")]
		public InventoryZypperPatch ZypperPatch { get; set; }
	}
	
	/// <summary>
	/// Information related to the a standard versioned package. This includes package info for APT, Yum, Zypper, and Googet package managers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoryVersionedPackage
	{
		
		/// <summary>
		/// The system architecture this package is intended for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public string Architecture { get; set; }
		
		/// <summary>
		/// The name of the package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// The version of the package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Information related to a Quick Fix Engineering package. Fields are taken from Windows QuickFixEngineering Interface and match the source names: https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-quickfixengineering
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoryWindowsQuickFixEngineeringPackage
	{
		
		/// <summary>
		/// A short textual description of the QFE update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// A textual description of the QFE update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Unique identifier associated with a particular QFE update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotFixId")]
		public string HotFixId { get; set; }
		
		/// <summary>
		/// Date that the QFE update was installed. Mapped from installed_on field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installTime")]
		public string InstallTime { get; set; }
	}
	
	/// <summary>
	/// Contains information about a Windows application that is retrieved from the Windows Registry. For more information about these fields, see: https://docs.microsoft.com/en-us/windows/win32/msi/uninstall-registry-key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoryWindowsApplication
	{
		
		/// <summary>
		/// The name of the application or product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The version of the product or application in string format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayVersion")]
		public string DisplayVersion { get; set; }
		
		/// <summary>
		/// The internet address for technical support.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpLink")]
		public string HelpLink { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installDate")]
		public Date InstallDate { get; set; }
		
		/// <summary>
		/// The name of the manufacturer for the product or application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
	}
	
	/// <summary>
	/// Details related to a Windows Update package. Field data and names are taken from Windows Update API IUpdate Interface: https://docs.microsoft.com/en-us/windows/win32/api/_wua/ Descriptive fields like title, and description are localized based on the locale of the VM being updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoryWindowsUpdatePackage
	{
		
		/// <summary>
		/// The categories that are associated with this update package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public InventoryWindowsUpdatePackageWindowsUpdateCategory[] Categories { get; set; }
		
		/// <summary>
		/// The localized description of the update package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A collection of Microsoft Knowledge Base article IDs that are associated with the update package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kbArticleIds")]
		public string[] KbArticleIds { get; set; }
		
		/// <summary>
		/// The last published date of the update, in (UTC) date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastDeploymentChangeTime")]
		public string LastDeploymentChangeTime { get; set; }
		
		/// <summary>
		/// A collection of URLs that provide more information about the update package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moreInfoUrls")]
		public string[] MoreInfoUrls { get; set; }
		
		/// <summary>
		/// The revision number of this update package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionNumber")]
		public System.Nullable<System.Int32> RevisionNumber { get; set; }
		
		/// <summary>
		/// A hyperlink to the language-specific support information for the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportUrl")]
		public string SupportUrl { get; set; }
		
		/// <summary>
		/// The localized title of the update package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Gets the identifier of an update package. Stays the same across revisions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateId")]
		public string UpdateId { get; set; }
	}
	
	/// <summary>
	/// Categories specified by the Windows Update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoryWindowsUpdatePackageWindowsUpdateCategory
	{
		
		/// <summary>
		/// The identifier of the windows update category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the windows update category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Details related to a Zypper Patch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoryZypperPatch
	{
		
		/// <summary>
		/// The category of the patch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// The name of the patch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patchName")]
		public string PatchName { get; set; }
		
		/// <summary>
		/// The severity specified for this patch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		/// <summary>
		/// Any summary information provided about this patch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InventoryItemOriginType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORIGIN_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_REPORT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InventoryItemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALLED_PACKAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE_PACKAGE = 2,
	}
	
	/// <summary>
	/// Operating system information for the VM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoryOsInfo
	{
		
		/// <summary>
		/// The system architecture of the operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public string Architecture { get; set; }
		
		/// <summary>
		/// The VM hostname.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		/// <summary>
		/// The kernel release of the operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kernelRelease")]
		public string KernelRelease { get; set; }
		
		/// <summary>
		/// The kernel version of the operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kernelVersion")]
		public string KernelVersion { get; set; }
		
		/// <summary>
		/// The operating system long name. For example 'Debian GNU/Linux 9' or 'Microsoft Window Server 2019 Datacenter'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longName")]
		public string LongName { get; set; }
		
		/// <summary>
		/// The current version of the OS Config agent running on the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osconfigAgentVersion")]
		public string OsconfigAgentVersion { get; set; }
		
		/// <summary>
		/// The operating system short name. For example, 'windows' or 'debian'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortName")]
		public string ShortName { get; set; }
		
		/// <summary>
		/// The version of the operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// A response message for listing OS policies compliance data for all Compute Engine VMs in the given location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInstanceOSPoliciesCompliancesResponse
	{
		
		/// <summary>
		/// List of instance OS policies compliance objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceOsPoliciesCompliances")]
		public InstanceOSPoliciesCompliance[] InstanceOsPoliciesCompliances { get; set; }
		
		/// <summary>
		/// The pagination token to retrieve the next page of instance OS policies compliance objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A response message for listing inventory data for all VMs in a specified location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInventoriesResponse
	{
		
		/// <summary>
		/// List of inventory objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventories")]
		public Inventory[] Inventories { get; set; }
		
		/// <summary>
		/// The pagination token to retrieve the next page of inventory objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A response message for listing OS Policy assignment reports including the page of results and page token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOSPolicyAssignmentReportsResponse
	{
		
		/// <summary>
		/// The pagination token to retrieve the next page of OS policy assignment report objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of OS policy assignment reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyAssignmentReports")]
		public OSPolicyAssignmentReport[] OsPolicyAssignmentReports { get; set; }
	}
	
	/// <summary>
	/// A report of the OS policy assignment status for a given instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyAssignmentReport
	{
		
		/// <summary>
		/// The Compute Engine VM instance name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Unique identifier of the last attempted run to apply the OS policies associated with this assignment on the VM. This ID is logged by the OS Config agent while applying the OS policies associated with this assignment on the VM. NOTE: If the service is unable to successfully connect to the agent for this run, then this id will not be available in the agent logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRunId")]
		public string LastRunId { get; set; }
		
		/// <summary>
		/// The `OSPolicyAssignmentReport` API resource name. Format: `projects/{project_number}/locations/{location}/instances/{instance_id}/osPolicyAssignments/{os_policy_assignment_id}/report`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Reference to the `OSPolicyAssignment` API resource that the `OSPolicy` belongs to. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyAssignment")]
		public string OsPolicyAssignment { get; set; }
		
		/// <summary>
		/// Compliance data for each `OSPolicy` that is applied to the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyCompliances")]
		public OSPolicyAssignmentReportOSPolicyCompliance[] OsPolicyCompliances { get; set; }
		
		/// <summary>
		/// Timestamp for when the report was last generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Compliance data for an OS policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyAssignmentReportOSPolicyCompliance
	{
		
		/// <summary>
		/// The compliance state of the OS policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complianceState")]
		public System.Nullable<OSPolicyAssignmentReportOSPolicyComplianceComplianceState> ComplianceState { get; set; }
		
		/// <summary>
		/// The reason for the OS policy to be in an unknown compliance state. This field is always populated when `compliance_state` is `UNKNOWN`. If populated, the field can contain one of the following values: * `vm-not-running`: The VM was not running. * `os-policies-not-supported-by-agent`: The version of the OS Config agent running on the VM does not support running OS policies. * `no-agent-detected`: The OS Config agent is not detected for the VM. * `resource-execution-errors`: The OS Config agent encountered errors while executing one or more resources in the policy. See `os_policy_resource_compliances` for details. * `task-timeout`: The task sent to the agent to apply the policy timed out. * `unexpected-agent-state`: The OS Config agent did not report the final status of the task that attempted to apply the policy. Instead, the agent unexpectedly started working on a different task. This mostly happens when the agent or VM unexpectedly restarts while applying OS policies. * `internal-service-errors`: Internal service errors were encountered while attempting to apply the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complianceStateReason")]
		public string ComplianceStateReason { get; set; }
		
		/// <summary>
		/// The OS policy id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyId")]
		public string OsPolicyId { get; set; }
		
		/// <summary>
		/// Compliance data for each resource within the policy that is applied to the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyResourceCompliances")]
		public OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance[] OsPolicyResourceCompliances { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OSPolicyAssignmentReportOSPolicyComplianceComplianceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 2,
	}
	
	/// <summary>
	/// Compliance data for an OS policy resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance
	{
		
		/// <summary>
		/// The compliance state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complianceState")]
		public OSPolicyAssignmentReportOSPolicyComplianceComplianceState ComplianceState { get; set; }
		
		/// <summary>
		/// A reason for the resource to be in the given compliance state. This field is always populated when `compliance_state` is `UNKNOWN`. The following values are supported when `compliance_state == UNKNOWN` * `execution-errors`: Errors were encountered by the agent while executing the resource and the compliance state couldn't be determined. * `execution-skipped-by-agent`: Resource execution was skipped by the agent because errors were encountered while executing prior resources in the OS policy. * `os-policy-execution-attempt-failed`: The execution of the OS policy containing this resource failed and the compliance state couldn't be determined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complianceStateReason")]
		public string ComplianceStateReason { get; set; }
		
		/// <summary>
		/// Ordered list of configuration completed by the agent for the OS policy resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configSteps")]
		public OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceOSPolicyResourceConfigStep[] ConfigSteps { get; set; }
		
		/// <summary>
		/// ExecResource specific output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="execResourceOutput")]
		public OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceExecResourceOutput ExecResourceOutput { get; set; }
		
		/// <summary>
		/// The ID of the OS policy resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyResourceId")]
		public string OsPolicyResourceId { get; set; }
	}
	
	/// <summary>
	/// Step performed by the OS Config agent for configuring an `OSPolicy` resource to its desired state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceOSPolicyResourceConfigStep
	{
		
		/// <summary>
		/// An error message recorded during the execution of this step. Only populated if errors were encountered during this step execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Configuration step type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public OSPolicyResourceConfigStepType Type { get; set; }
	}
	
	/// <summary>
	/// ExecResource specific output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceExecResourceOutput
	{
		
		/// <summary>
		/// Output from enforcement phase output file (if run). Output size is limited to 100K bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enforcementOutput")]
		public string EnforcementOutput { get; set; }
	}
	
	/// <summary>
	/// A response message for listing all revisions for a OS policy assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOSPolicyAssignmentRevisionsResponse
	{
		
		/// <summary>
		/// The pagination token to retrieve the next page of OS policy assignment revisions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The OS policy assignment revisions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyAssignments")]
		public OSPolicyAssignment[] OsPolicyAssignments { get; set; }
	}
	
	/// <summary>
	/// OS policy assignment is an API resource that is used to apply a set of OS policies to a dynamically targeted group of Compute Engine VM instances. An OS policy is used to define the desired state configuration for a Compute Engine VM instance through a set of configuration resources that provide capabilities such as installing or removing software packages, or executing a script. For more information, see [OS policy and OS policy assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyAssignment
	{
		
		/// <summary>
		/// Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseline")]
		public System.Nullable<System.Boolean> Baseline { get; set; }
		
		/// <summary>
		/// Output only. Indicates that this revision deletes the OS policy assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// OS policy assignment description. Length of the description is limited to 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Filters to select target VMs for an assignment. If more than one filter criteria is specified below, a VM will be selected if and only if it satisfies all of them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceFilter")]
		public OSPolicyAssignmentInstanceFilter InstanceFilter { get; set; }
		
		/// <summary>
		/// Resource name. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}` This field is ignored when you create an OS policy assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. List of OS policies to be applied to the VMs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicies")]
		public OSPolicy[] OsPolicies { get; set; }
		
		/// <summary>
		/// Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the `rollout_state` is one of: * IN_PROGRESS * CANCELLING
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciling")]
		public System.Nullable<System.Boolean> Reconciling { get; set; }
		
		/// <summary>
		/// Output only. The timestamp that the revision was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionCreateTime")]
		public string RevisionCreateTime { get; set; }
		
		/// <summary>
		/// Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Message to configure the rollout at the zonal level for the OS policy assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rollout")]
		public OSPolicyAssignmentRollout Rollout { get; set; }
		
		/// <summary>
		/// Output only. OS policy assignment rollout state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutState")]
		public GoogleCloudOsconfigV1__OSPolicyAssignmentOperationMetadataRolloutState RolloutState { get; set; }
		
		/// <summary>
		/// Output only. Server generated unique id for the OS policy assignment resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Filters to select target VMs for an assignment. If more than one filter criteria is specified below, a VM will be selected if and only if it satisfies all of them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyAssignmentInstanceFilter
	{
		
		/// <summary>
		/// Target all VMs in the project. If true, no other criteria is permitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="all")]
		public System.Nullable<System.Boolean> All { get; set; }
		
		/// <summary>
		/// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclusionLabels")]
		public OSPolicyAssignmentLabelSet[] ExclusionLabels { get; set; }
		
		/// <summary>
		/// List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inclusionLabels")]
		public OSPolicyAssignmentLabelSet[] InclusionLabels { get; set; }
		
		/// <summary>
		/// List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventories")]
		public OSPolicyAssignmentInstanceFilterInventory[] Inventories { get; set; }
		
		/// <summary>
		/// Deprecated. Use the `inventories` field instead. A VM is selected if it's OS short name matches with any of the values provided in this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osShortNames")]
		public string[] OsShortNames { get; set; }
	}
	
	/// <summary>
	/// Message representing label set. * A label is a key value pair set for a VM. * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In other words, a LabelSet is applicable for a VM only if it matches all the labels in the LabelSet. * Example: A LabelSet with 2 labels: `env=prod` and `type=webserver` will only be applicable for those VMs with both labels present.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyAssignmentLabelSet
	{
		
		/// <summary>
		/// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
	}
	
	/// <summary>
	/// VM inventory details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyAssignmentInstanceFilterInventory
	{
		
		/// <summary>
		/// Required. The OS short name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osShortName")]
		public string OsShortName { get; set; }
		
		/// <summary>
		/// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
	}
	
	/// <summary>
	/// An OS policy defines the desired state configuration for a VM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicy
	{
		
		/// <summary>
		/// This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowNoResourceGroupMatch")]
		public System.Nullable<System.Boolean> AllowNoResourceGroupMatch { get; set; }
		
		/// <summary>
		/// Policy description. Length of the description is limited to 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required. Policy mode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<OSPolicyMode> Mode { get; set; }
		
		/// <summary>
		/// Required. List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroups")]
		public OSPolicyResourceGroup[] ResourceGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OSPolicyMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENFORCEMENT = 2,
	}
	
	/// <summary>
	/// Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the `OSFilter` specified within the resource group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceGroup
	{
		
		/// <summary>
		/// List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either `RHEL` or `CentOS` operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name='rhel' and inventory_filters[1].os_short_name='centos' If the list is empty, this resource group will be applied to the target VM unconditionally.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryFilters")]
		public OSPolicyInventoryFilter[] InventoryFilters { get; set; }
		
		/// <summary>
		/// Filtering criteria to select VMs based on OS details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osFilter")]
		public OSPolicyOSFilter OsFilter { get; set; }
		
		/// <summary>
		/// Required. List of resources configured for this resource group. The resources are executed in the exact order specified here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public OSPolicyResource[] Resources { get; set; }
	}
	
	/// <summary>
	/// Filtering criteria to select VMs based on inventory details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyInventoryFilter
	{
		
		/// <summary>
		/// Required. The OS short name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osShortName")]
		public string OsShortName { get; set; }
		
		/// <summary>
		/// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
	}
	
	/// <summary>
	/// Filtering criteria to select VMs based on OS details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyOSFilter
	{
		
		/// <summary>
		/// This should match OS short name emitted by the OS inventory agent. An empty value matches any OS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osShortName")]
		public string OsShortName { get; set; }
		
		/// <summary>
		/// This value should match the version emitted by the OS inventory agent. Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
	}
	
	/// <summary>
	/// An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResource
	{
		
		/// <summary>
		/// A resource that allows executing scripts on the VM. The `ExecResource` has 2 stages: `validate` and `enforce` and both stages accept a script as an argument to execute. When the `ExecResource` is applied by the agent, it first executes the script in the `validate` stage. The `validate` stage can signal that the `ExecResource` is already in the desired state by returning an exit code of `100`. If the `ExecResource` is not in the desired state, it should return an exit code of `101`. Any other exit code returned by this stage is considered an error. If the `ExecResource` is not in the desired state based on the exit code from the `validate` stage, the agent proceeds to execute the script from the `enforce` stage. If the `ExecResource` is already in the desired state, the `enforce` stage will not be run. Similar to `validate` stage, the `enforce` stage should return an exit code of `100` to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not in desired state` and errors. Because, for example, Powershell will always return an exit code of `0` unless an `exit` statement is provided in the script. So, for reasons of consistency and being explicit, exit codes `100` and `101` were chosen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exec")]
		public OSPolicyResourceExecResource Exec { get; set; }
		
		/// <summary>
		/// A resource that manages the state of a file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public OSPolicyResourceFileResource File { get; set; }
		
		/// <summary>
		/// Required. The id of the resource with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the OS policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A resource that manages a system package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pkg")]
		public OSPolicyResourcePackageResource Pkg { get; set; }
		
		/// <summary>
		/// A resource that manages a package repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public OSPolicyResourceRepositoryResource Repository { get; set; }
	}
	
	/// <summary>
	/// A resource that allows executing scripts on the VM. The `ExecResource` has 2 stages: `validate` and `enforce` and both stages accept a script as an argument to execute. When the `ExecResource` is applied by the agent, it first executes the script in the `validate` stage. The `validate` stage can signal that the `ExecResource` is already in the desired state by returning an exit code of `100`. If the `ExecResource` is not in the desired state, it should return an exit code of `101`. Any other exit code returned by this stage is considered an error. If the `ExecResource` is not in the desired state based on the exit code from the `validate` stage, the agent proceeds to execute the script from the `enforce` stage. If the `ExecResource` is already in the desired state, the `enforce` stage will not be run. Similar to `validate` stage, the `enforce` stage should return an exit code of `100` to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not in desired state` and errors. Because, for example, Powershell will always return an exit code of `0` unless an `exit` statement is provided in the script. So, for reasons of consistency and being explicit, exit codes `100` and `101` were chosen.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceExecResource
	{
		
		/// <summary>
		/// A file or script to execute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enforce")]
		public OSPolicyResourceExecResourceExec Enforce { get; set; }
		
		/// <summary>
		/// A file or script to execute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validate")]
		public OSPolicyResourceExecResourceExec Validate { get; set; }
	}
	
	/// <summary>
	/// A file or script to execute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceExecResourceExec
	{
		
		/// <summary>
		/// Optional arguments to pass to the source during execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// A remote or local file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public OSPolicyResourceFile File { get; set; }
		
		/// <summary>
		/// Required. The script interpreter to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interpreter")]
		public System.Nullable<OSPolicyResourceExecResourceExecInterpreter> Interpreter { get; set; }
		
		/// <summary>
		/// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputFilePath")]
		public string OutputFilePath { get; set; }
		
		/// <summary>
		/// An inline script. The size of the script is limited to 32KiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	/// <summary>
	/// A remote or local file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceFile
	{
		
		/// <summary>
		/// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowInsecure")]
		public System.Nullable<System.Boolean> AllowInsecure { get; set; }
		
		/// <summary>
		/// Specifies a file available as a Cloud Storage Object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcs")]
		public OSPolicyResourceFileGcs Gcs { get; set; }
		
		/// <summary>
		/// A local path within the VM to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localPath")]
		public string LocalPath { get; set; }
		
		/// <summary>
		/// Specifies a file available via some URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remote")]
		public OSPolicyResourceFileRemote Remote { get; set; }
	}
	
	/// <summary>
	/// Specifies a file available as a Cloud Storage Object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceFileGcs
	{
		
		/// <summary>
		/// Required. Bucket of the Cloud Storage object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Generation number of the Cloud Storage object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generation")]
		public string Generation { get; set; }
		
		/// <summary>
		/// Required. Name of the Cloud Storage object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	/// Specifies a file available via some URI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceFileRemote
	{
		
		/// <summary>
		/// SHA256 checksum of the remote file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256Checksum")]
		public string Sha256Checksum { get; set; }
		
		/// <summary>
		/// Required. URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OSPolicyResourceExecResourceExecInterpreter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPRETER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHELL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POWERSHELL = 3,
	}
	
	/// <summary>
	/// A resource that manages the state of a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceFileResource
	{
		
		/// <summary>
		/// A a file with this content. The size of the content is limited to 32KiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// A remote or local file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public OSPolicyResourceFile File { get; set; }
		
		/// <summary>
		/// Required. The absolute path of the file within the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string Permissions { get; set; }
		
		/// <summary>
		/// Required. Desired state of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<OSPolicyResourceFileResourceState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OSPolicyResourceFileResourceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESIRED_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABSENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENTS_MATCH = 3,
	}
	
	/// <summary>
	/// A resource that manages a system package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourcePackageResource
	{
		
		/// <summary>
		/// A package managed by APT. - install: `apt-get update && apt-get -y install [name]` - remove: `apt-get -y remove [name]`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apt")]
		public OSPolicyResourcePackageResourceAPT Apt { get; set; }
		
		/// <summary>
		/// A deb package file. dpkg packages only support INSTALLED state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deb")]
		public OSPolicyResourcePackageResourceDeb Deb { get; set; }
		
		/// <summary>
		/// Required. The desired state the agent should maintain for this package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredState")]
		public System.Nullable<OSPolicyResourcePackageResourceDesiredState> DesiredState { get; set; }
		
		/// <summary>
		/// A package managed by GooGet. - install: `googet -noconfirm install package` - remove: `googet -noconfirm remove package`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googet")]
		public OSPolicyResourcePackageResourceGooGet Googet { get; set; }
		
		/// <summary>
		/// An MSI package. MSI packages only support INSTALLED state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msi")]
		public OSPolicyResourcePackageResourceMSI Msi { get; set; }
		
		/// <summary>
		/// An RPM package file. RPM packages only support INSTALLED state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rpm")]
		public OSPolicyResourcePackageResourceRPM Rpm { get; set; }
		
		/// <summary>
		/// A package managed by YUM. - install: `yum -y install package` - remove: `yum -y remove package`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yum")]
		public OSPolicyResourcePackageResourceYUM Yum { get; set; }
		
		/// <summary>
		/// A package managed by Zypper. - install: `zypper -y install package` - remove: `zypper -y rm package`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zypper")]
		public OSPolicyResourcePackageResourceZypper Zypper { get; set; }
	}
	
	/// <summary>
	/// A package managed by APT. - install: `apt-get update && apt-get -y install [name]` - remove: `apt-get -y remove [name]`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourcePackageResourceAPT
	{
		
		/// <summary>
		/// Required. Package name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A deb package file. dpkg packages only support INSTALLED state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourcePackageResourceDeb
	{
		
		/// <summary>
		/// Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullDeps")]
		public System.Nullable<System.Boolean> PullDeps { get; set; }
		
		/// <summary>
		/// A remote or local file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public OSPolicyResourceFile Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OSPolicyResourcePackageResourceDesiredState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESIRED_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVED = 2,
	}
	
	/// <summary>
	/// A package managed by GooGet. - install: `googet -noconfirm install package` - remove: `googet -noconfirm remove package`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourcePackageResourceGooGet
	{
		
		/// <summary>
		/// Required. Package name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An MSI package. MSI packages only support INSTALLED state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourcePackageResourceMSI
	{
		
		/// <summary>
		/// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string[] Properties { get; set; }
		
		/// <summary>
		/// A remote or local file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public OSPolicyResourceFile Source { get; set; }
	}
	
	/// <summary>
	/// An RPM package file. RPM packages only support INSTALLED state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourcePackageResourceRPM
	{
		
		/// <summary>
		/// Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullDeps")]
		public System.Nullable<System.Boolean> PullDeps { get; set; }
		
		/// <summary>
		/// A remote or local file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public OSPolicyResourceFile Source { get; set; }
	}
	
	/// <summary>
	/// A package managed by YUM. - install: `yum -y install package` - remove: `yum -y remove package`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourcePackageResourceYUM
	{
		
		/// <summary>
		/// Required. Package name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A package managed by Zypper. - install: `zypper -y install package` - remove: `zypper -y rm package`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourcePackageResourceZypper
	{
		
		/// <summary>
		/// Required. Package name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A resource that manages a package repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceRepositoryResource
	{
		
		/// <summary>
		/// Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apt")]
		public OSPolicyResourceRepositoryResourceAptRepository Apt { get; set; }
		
		/// <summary>
		/// Represents a Goo package repository. These are added to a repo file that is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goo")]
		public OSPolicyResourceRepositoryResourceGooRepository Goo { get; set; }
		
		/// <summary>
		/// Represents a single yum package repository. These are added to a repo file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yum")]
		public OSPolicyResourceRepositoryResourceYumRepository Yum { get; set; }
		
		/// <summary>
		/// Represents a single zypper package repository. These are added to a repo file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zypper")]
		public OSPolicyResourceRepositoryResourceZypperRepository Zypper { get; set; }
	}
	
	/// <summary>
	/// Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceRepositoryResourceAptRepository
	{
		
		/// <summary>
		/// Required. Type of archive files in this repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archiveType")]
		public System.Nullable<OSPolicyResourceRepositoryResourceAptRepositoryArchiveType> ArchiveType { get; set; }
		
		/// <summary>
		/// Required. List of components for this repository. Must contain at least one item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="components")]
		public string[] Components { get; set; }
		
		/// <summary>
		/// Required. Distribution of this repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distribution")]
		public string Distribution { get; set; }
		
		/// <summary>
		/// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpgKey")]
		public string GpgKey { get; set; }
		
		/// <summary>
		/// Required. URI for this repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OSPolicyResourceRepositoryResourceAptRepositoryArchiveType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEB_SRC = 2,
	}
	
	/// <summary>
	/// Represents a Goo package repository. These are added to a repo file that is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceRepositoryResourceGooRepository
	{
		
		/// <summary>
		/// Required. The name of the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The url of the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents a single yum package repository. These are added to a repo file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceRepositoryResourceYumRepository
	{
		
		/// <summary>
		/// Required. The location of the repository directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseUrl")]
		public string BaseUrl { get; set; }
		
		/// <summary>
		/// The display name of the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// URIs of GPG keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpgKeys")]
		public string[] GpgKeys { get; set; }
		
		/// <summary>
		/// Required. A one word, unique name for this repository. This is the `repo id` in the yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for resource conflicts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Represents a single zypper package repository. These are added to a repo file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyResourceRepositoryResourceZypperRepository
	{
		
		/// <summary>
		/// Required. The location of the repository directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseUrl")]
		public string BaseUrl { get; set; }
		
		/// <summary>
		/// The display name of the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// URIs of GPG keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpgKeys")]
		public string[] GpgKeys { get; set; }
		
		/// <summary>
		/// Required. A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Message to configure the rollout at the zonal level for the OS policy assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyAssignmentRollout
	{
		
		/// <summary>
		/// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disruptionBudget")]
		public FixedOrPercent DisruptionBudget { get; set; }
		
		/// <summary>
		/// Required. This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minWaitDuration")]
		public string MinWaitDuration { get; set; }
	}
	
	/// <summary>
	/// A response message for listing all assignments under given parent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOSPolicyAssignmentsResponse
	{
		
		/// <summary>
		/// The pagination token to retrieve the next page of OS policy assignments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of assignments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyAssignments")]
		public OSPolicyAssignment[] OsPolicyAssignments { get; set; }
	}
	
	/// <summary>
	/// A response message for listing vulnerability reports for all VM instances in the specified location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVulnerabilityReportsResponse
	{
		
		/// <summary>
		/// The pagination token to retrieve the next page of vulnerabilityReports object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of vulnerabilityReport objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vulnerabilityReports")]
		public VulnerabilityReport[] VulnerabilityReports { get; set; }
	}
	
	/// <summary>
	/// This API resource represents the vulnerability report for a specified Compute Engine virtual machine (VM) instance at a given point in time. For more information, see [Vulnerability reports](https://cloud.google.com/compute/docs/instances/os-inventory-management#vulnerability-reports).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VulnerabilityReport
	{
		
		/// <summary>
		/// Output only. The `vulnerabilityReport` API resource name. Format: `projects/{project_number}/locations/{location}/instances/{instance_id}/vulnerabilityReport`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The timestamp for when the last vulnerability report was generated for the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. List of vulnerabilities affecting the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vulnerabilities")]
		public VulnerabilityReportVulnerability[] Vulnerabilities { get; set; }
	}
	
	/// <summary>
	/// A vulnerability affecting the VM instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VulnerabilityReportVulnerability
	{
		
		/// <summary>
		/// Corresponds to the `AVAILABLE_PACKAGE` inventory item on the VM. If the vulnerability report was not updated after the VM inventory update, these values might not display in VM inventory. If there is no available fix, the field is empty. The `inventory_item` value specifies the latest `SoftwarePackage` available to the VM that fixes the vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableInventoryItemIds")]
		public string[] AvailableInventoryItemIds { get; set; }
		
		/// <summary>
		/// The timestamp for when the vulnerability was first detected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Contains metadata information for the vulnerability. This information is collected from the upstream feed of the operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public VulnerabilityReportVulnerabilityDetails Details { get; set; }
		
		/// <summary>
		/// Corresponds to the `INSTALLED_PACKAGE` inventory item on the VM. This field displays the inventory items affected by this vulnerability. If the vulnerability report was not updated after the VM inventory update, these values might not display in VM inventory. For some distros, this field may be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installedInventoryItemIds")]
		public string[] InstalledInventoryItemIds { get; set; }
		
		/// <summary>
		/// List of items affected by the vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public VulnerabilityReportVulnerabilityItem[] Items { get; set; }
		
		/// <summary>
		/// The timestamp for when the vulnerability was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Contains metadata information for the vulnerability. This information is collected from the upstream feed of the operating system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VulnerabilityReportVulnerabilityDetails
	{
		
		/// <summary>
		/// The CVE of the vulnerability. CVE cannot be empty and the combination of should be unique across vulnerabilities for a VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cve")]
		public string Cve { get; set; }
		
		/// <summary>
		/// The CVSS V2 score of this vulnerability. CVSS V2 score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssV2Score")]
		public System.Nullable<System.Single> CvssV2Score { get; set; }
		
		/// <summary>
		/// Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssV3")]
		public CVSSv3 CvssV3 { get; set; }
		
		/// <summary>
		/// The note or description describing the vulnerability from the distro.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Corresponds to the references attached to the `VulnerabilityDetails`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public VulnerabilityReportVulnerabilityDetailsReference[] References { get; set; }
		
		/// <summary>
		/// Assigned severity/impact ranking from the distro.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
	}
	
	/// <summary>
	/// A reference for this vulnerability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VulnerabilityReportVulnerabilityDetailsReference
	{
		
		/// <summary>
		/// The source of the reference e.g. NVD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The url of the reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// OS inventory item that is affected by a vulnerability or fixed as a result of a vulnerability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VulnerabilityReportVulnerabilityItem
	{
		
		/// <summary>
		/// Corresponds to the `AVAILABLE_PACKAGE` inventory item on the VM. If the vulnerability report was not updated after the VM inventory update, these values might not display in VM inventory. If there is no available fix, the field is empty. The `inventory_item` value specifies the latest `SoftwarePackage` available to the VM that fixes the vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableInventoryItemId")]
		public string AvailableInventoryItemId { get; set; }
		
		/// <summary>
		/// The recommended [CPE URI](https://cpe.mitre.org/specification/) update that contains a fix for this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedCpeUri")]
		public string FixedCpeUri { get; set; }
		
		/// <summary>
		/// Corresponds to the `INSTALLED_PACKAGE` inventory item on the VM. This field displays the inventory items affected by this vulnerability. If the vulnerability report was not updated after the VM inventory update, these values might not display in VM inventory. For some operating systems, this field might be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installedInventoryItemId")]
		public string InstalledInventoryItemId { get; set; }
		
		/// <summary>
		/// The upstream OS patch, packages or KB that fixes the vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upstreamFix")]
		public string UpstreamFix { get; set; }
	}
	
	/// <summary>
	/// OS policy assignment operation metadata provided by OS policy assignment API methods that return long running operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OSPolicyAssignmentOperationMetadata
	{
		
		/// <summary>
		/// The OS policy assignment API method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiMethod")]
		public GoogleCloudOsconfigV1__OSPolicyAssignmentOperationMetadataApiMethod ApiMethod { get; set; }
		
		/// <summary>
		/// Reference to the `OSPolicyAssignment` API resource. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osPolicyAssignment")]
		public string OsPolicyAssignment { get; set; }
		
		/// <summary>
		/// Rollout start time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutStartTime")]
		public string RolloutStartTime { get; set; }
		
		/// <summary>
		/// State of the rollout
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutState")]
		public GoogleCloudOsconfigV1__OSPolicyAssignmentOperationMetadataRolloutState RolloutState { get; set; }
		
		/// <summary>
		/// Rollout update time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutUpdateTime")]
		public string RolloutUpdateTime { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Delete the OS policy assignment. This method creates a new revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. If the LRO completes and is not cancelled, all revisions associated with the OS policy assignment are deleted. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1alpha/projects.locations.osPolicyAssignments.operations/cancel).
		/// Osconfig_projects_locations_osPolicyAssignments_delete v1alpha/{name}
		/// </summary>
		/// <param name="name">Required. The name of the OS policy assignment to be deleted</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Osconfig_projects_locations_osPolicyAssignments_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Osconfig_projects_locations_osPolicyAssignments_operations_get v1alpha/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <param name="view">Inventory view indicating what information should be included in the inventory resource. If unspecified, the default view is BASIC.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Osconfig_projects_locations_osPolicyAssignments_operations_getAsync(string name, Osconfig_projects_locations_osPolicyAssignments_operations_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an existing OS policy assignment. This method creates a new revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1alpha/projects.locations.osPolicyAssignments.operations/cancel).
		/// Osconfig_projects_locations_osPolicyAssignments_patch v1alpha/{name}
		/// </summary>
		/// <param name="name">Resource name. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}` This field is ignored when you create an OS policy assignment.</param>
		/// <param name="updateMask">Optional. Field mask that controls which fields of the assignment should be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Osconfig_projects_locations_osPolicyAssignments_patchAsync(string name, string updateMask, OSPolicyAssignment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Osconfig_projects_locations_osPolicyAssignments_operations_cancel v1alpha/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Osconfig_projects_locations_osPolicyAssignments_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List the OS policy assignment revisions for a given OS policy assignment.
		/// Osconfig_projects_locations_osPolicyAssignments_listRevisions v1alpha/{name}:listRevisions
		/// </summary>
		/// <param name="name">Required. The name of the OS policy assignment to list revisions for.</param>
		/// <param name="pageSize">The maximum number of revisions to return.</param>
		/// <param name="pageToken">A pagination token returned from a previous call to `ListOSPolicyAssignmentRevisions` that indicates where this listing should continue from.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOSPolicyAssignmentRevisionsResponse> Osconfig_projects_locations_osPolicyAssignments_listRevisionsAsync(string name, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":listRevisions&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListOSPolicyAssignmentRevisionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List OS policies compliance data for all Compute Engine VM instances in the specified zone.
		/// Osconfig_projects_locations_instanceOSPoliciesCompliances_list v1alpha/{parent}/instanceOSPoliciesCompliances
		/// </summary>
		/// <param name="parent">Required. The parent resource name. Format: `projects/{project}/locations/{location}` For `{project}`, either Compute Engine project-number or project-id can be provided.</param>
		/// <param name="filter">If provided, this field specifies the criteria that must be met by a `InstanceOSPoliciesCompliance` API resource to be included in the response.</param>
		/// <param name="pageSize">The maximum number of results to return.</param>
		/// <param name="pageToken">A pagination token returned from a previous call to `ListInstanceOSPoliciesCompliances` that indicates where this listing should continue from.</param>
		/// <returns>Successful response</returns>
		public async Task<ListInstanceOSPoliciesCompliancesResponse> Osconfig_projects_locations_instanceOSPoliciesCompliances_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/instanceOSPoliciesCompliances&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListInstanceOSPoliciesCompliancesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List inventory data for all VM instances in the specified zone.
		/// Osconfig_projects_locations_instances_inventories_list v1alpha/{parent}/inventories
		/// </summary>
		/// <param name="parent">Required. The parent resource name. Format: `projects/{project}/locations/{location}/instances/-` For `{project}`, either `project-number` or `project-id` can be provided.</param>
		/// <param name="filter">If provided, this field specifies the criteria that must be met by a `Inventory` API resource to be included in the response.</param>
		/// <param name="pageSize">The maximum number of results to return.</param>
		/// <param name="pageToken">A pagination token returned from a previous call to `ListInventories` that indicates where this listing should continue from.</param>
		/// <param name="view">Inventory view indicating what information should be included in the inventory resource. If unspecified, the default view is BASIC.</param>
		/// <returns>Successful response</returns>
		public async Task<ListInventoriesResponse> Osconfig_projects_locations_instances_inventories_listAsync(string parent, string filter, int pageSize, string pageToken, Osconfig_projects_locations_osPolicyAssignments_operations_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/inventories&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListInventoriesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List the OS policy assignments under the parent resource. For each OS policy assignment, the latest revision is returned.
		/// Osconfig_projects_locations_osPolicyAssignments_list v1alpha/{parent}/osPolicyAssignments
		/// </summary>
		/// <param name="parent">Required. The parent resource name.</param>
		/// <param name="pageSize">The maximum number of assignments to return.</param>
		/// <param name="pageToken">A pagination token returned from a previous call to `ListOSPolicyAssignments` that indicates where this listing should continue from.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOSPolicyAssignmentsResponse> Osconfig_projects_locations_osPolicyAssignments_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/osPolicyAssignments&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListOSPolicyAssignmentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create an OS policy assignment. This method also creates the first revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1alpha/projects.locations.osPolicyAssignments.operations/cancel).
		/// Osconfig_projects_locations_osPolicyAssignments_create v1alpha/{parent}/osPolicyAssignments
		/// </summary>
		/// <param name="parent">Required. The parent resource name in the form: projects/{project}/locations/{location}</param>
		/// <param name="osPolicyAssignmentId">Required. The logical name of the OS policy assignment in the project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the project.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Osconfig_projects_locations_osPolicyAssignments_createAsync(string parent, string osPolicyAssignmentId, OSPolicyAssignment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/osPolicyAssignments&osPolicyAssignmentId=" + (osPolicyAssignmentId==null? "" : System.Uri.EscapeDataString(osPolicyAssignmentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List OS policy assignment reports for all Compute Engine VM instances in the specified zone.
		/// Osconfig_projects_locations_instances_osPolicyAssignments_reports_list v1alpha/{parent}/reports
		/// </summary>
		/// <param name="parent">Required. The parent resource name. Format: `projects/{project}/locations/{location}/instances/{instance}/osPolicyAssignments/{assignment}/reports` For `{project}`, either `project-number` or `project-id` can be provided. For `{instance}`, either `instance-name`, `instance-id`, or `-` can be provided. If '-' is provided, the response will include OSPolicyAssignmentReports for all instances in the project/location. For `{assignment}`, either `assignment-id` or `-` can be provided. If '-' is provided, the response will include OSPolicyAssignmentReports for all OSPolicyAssignments in the project/location. Either {instance} or {assignment} must be `-`. For example: `projects/{project}/locations/{location}/instances/{instance}/osPolicyAssignments/-/reports` returns all reports for the instance `projects/{project}/locations/{location}/instances/-/osPolicyAssignments/{assignment-id}/reports` returns all the reports for the given assignment across all instances. `projects/{project}/locations/{location}/instances/-/osPolicyAssignments/-/reports` returns all the reports for all assignments across all instances.</param>
		/// <param name="filter">If provided, this field specifies the criteria that must be met by the `OSPolicyAssignmentReport` API resource that is included in the response.</param>
		/// <param name="pageSize">The maximum number of results to return.</param>
		/// <param name="pageToken">A pagination token returned from a previous call to the `ListOSPolicyAssignmentReports` method that indicates where this listing should continue from.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOSPolicyAssignmentReportsResponse> Osconfig_projects_locations_instances_osPolicyAssignments_reports_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/reports&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListOSPolicyAssignmentReportsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List vulnerability reports for all VM instances in the specified zone.
		/// Osconfig_projects_locations_instances_vulnerabilityReports_list v1alpha/{parent}/vulnerabilityReports
		/// </summary>
		/// <param name="parent">Required. The parent resource name. Format: `projects/{project}/locations/{location}/instances/-` For `{project}`, either `project-number` or `project-id` can be provided.</param>
		/// <param name="filter">This field supports filtering by the severity level for the vulnerability. For a list of severity levels, see [Severity levels for vulnerabilities](https://cloud.google.com/container-analysis/docs/container-scanning-overview#severity_levels_for_vulnerabilities). The filter field follows the rules described in the [AIP-160](https://google.aip.dev/160) guidelines as follows: + **Filter for a specific severity type**: you can list reports that contain vulnerabilities that are classified as medium by specifying `vulnerabilities.details.severity:MEDIUM`. + **Filter for a range of severities** : you can list reports that have vulnerabilities that are classified as critical or high by specifying `vulnerabilities.details.severity:HIGH OR vulnerabilities.details.severity:CRITICAL`</param>
		/// <param name="pageSize">The maximum number of results to return.</param>
		/// <param name="pageToken">A pagination token returned from a previous call to `ListVulnerabilityReports` that indicates where this listing should continue from.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVulnerabilityReportsResponse> Osconfig_projects_locations_instances_vulnerabilityReports_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/vulnerabilityReports&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListVulnerabilityReportsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Osconfig_projects_locations_osPolicyAssignments_operations_getView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
