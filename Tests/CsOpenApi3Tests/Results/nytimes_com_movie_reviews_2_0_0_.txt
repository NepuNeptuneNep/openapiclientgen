//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Critic
	{
		
		[System.Runtime.Serialization.DataMember(Name="bio")]
		public string Bio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multimedia")]
		public CriticMultimedia Multimedia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seo_name")]
		public string Seo_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sort_name")]
		public string Sort_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class CriticMultimedia
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public CriticMultimediaResource Resource { get; set; }
	}
	
	public class CriticMultimediaResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="credit")]
		public string Credit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Movie
	{
		
		[System.Runtime.Serialization.DataMember(Name="byline")]
		public string Byline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="critics_pick")]
		public System.Nullable<System.Int32> Critics_pick { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public string Date_updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="display_title")]
		public string Display_title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headline")]
		public string Headline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public MovieLink Link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mpaa_rating")]
		public string Mpaa_rating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multimedia")]
		public MovieMultimedia Multimedia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="opening_date")]
		public string Opening_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publication_date")]
		public string Publication_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary_short")]
		public string Summary_short { get; set; }
	}
	
	public class MovieLink
	{
		
		[System.Runtime.Serialization.DataMember(Name="suggested_link_text")]
		public string Suggested_link_text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class MovieMultimedia
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public MovieMultimediaResource Resource { get; set; }
	}
	
	public class MovieMultimediaResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Critics_resource_type_jsonGet critics/{resource_type}.json
		/// </summary>
		/// <param name="resource_type">all | full-time | part-time | [reviewer-name]
		///
		///Specify all to get all Times reviewers, or specify full-time or part-time to get that subset. Specify a reviewer's name to get details about a particular reviewer.
		///</param>
		/// <returns>An array of Movie Critics</returns>
		public async Task<Critics_resource_type_jsonGetReturn> Critics_resource_type_jsonGetAsync(string resource_type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "critics/{resource_type}.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Critics_resource_type_jsonGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ReviewsSearch_jsonGetByQueryAndCritics_pickAndReviewerAndPublication_dateAndOpening_dateAndOffsetAndOrder reviews/search.json
		/// </summary>
		/// <param name="query">Search keywords; matches movie title and indexed terms
		///
		///To limit your search to exact matches only, surround your search string with single quotation marks (e.g., query='28+days+later'). Otherwise, responses will include partial matches ("head words") as well as exact matches (e.g., president will match president, presidents and presidential).
		///  
		///  If you specify multiple terms without quotation marks, they will be combined in an OR search.
		///  
		///  If you omit the query parameter, your request will be equivalent to a reviews and NYT Critics' Picks request.
		///</param>
		/// <param name="critics_pick">Set this parameter to Y to limit the results to NYT Critics' Picks. To get only those movies that have not been highlighted by Times critics, specify critics-pick=N. (To get all reviews regardless of critics-pick status, simply omit this parameter.)
		///</param>
		/// <param name="reviewer">Include this parameter to limit your results to reviews by a specific critic. Reviewer names should be formatted like this: Manohla Dargis.
		///</param>
		/// <param name="publication_date">Single date: YYYY-MM-DD
		///
		///Start and end date: YYYY-MM-DD;YYYY-MM-DD
		///
		///The publication-date is the date the review was first published in The Times.
		///</param>
		/// <param name="opening_date">Single date: YYYY-MM-DD
		///
		///Start and end date: YYYY-MM-DD;YYYY-MM-DD
		///
		///The opening-date is the date the movie's opening date in the New York region.
		///</param>
		/// <param name="offset">Positive integer, multiple of 20</param>
		/// <param name="order">Sets the sort order of the results.
		///
		///Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.
		///
		///If you do not specify a sort order, the results will be ordered by publication-date.
		///</param>
		/// <returns>An array of Movies</returns>
		public async Task<ReviewsSearch_jsonGetByQueryAndCritics_pickAndReviewerAndPublication_dateAndOpening_dateAndOffsetAndOrderReturn> ReviewsSearch_jsonGetByQueryAndCritics_pickAndReviewerAndPublication_dateAndOpening_dateAndOffsetAndOrderAsync(string query, ReviewsSearch_jsonGetByQueryAndCritics_pickAndReviewerAndPublication_dateAndOpening_dateAndOffsetAndOrderCritics_pick critics_pick, string reviewer, string publication_date, string opening_date, int offset, string order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reviews/search.json?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&critics-pick=" + critics_pick+"&reviewer=" + (reviewer==null? "" : System.Uri.EscapeDataString(reviewer))+"&publication-date=" + (publication_date==null? "" : System.Uri.EscapeDataString(publication_date))+"&opening-date=" + (opening_date==null? "" : System.Uri.EscapeDataString(opening_date))+"&offset="+offset+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReviewsSearch_jsonGetByQueryAndCritics_pickAndReviewerAndPublication_dateAndOpening_dateAndOffsetAndOrderReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reviews_resource_type_jsonGetByOffsetAndOrder reviews/{resource_type}.json
		/// </summary>
		/// <param name="resource_type">Specify all to retrieve all reviews, including NYT Critics' Picks.
		///
		///Specify picks to get NYT Critics' Picks currently in theaters.
		///
		///</param>
		/// <param name="offset">Positive integer, multiple of 20</param>
		/// <param name="order">Sets the sort order of the results.
		///
		///Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.
		///
		///If you do not specify a sort order, the results will be ordered by publication-date.
		///</param>
		/// <returns>An array of Movies</returns>
		public async Task<Reviews_resource_type_jsonGetByOffsetAndOrderReturn> Reviews_resource_type_jsonGetByOffsetAndOrderAsync(Reviews_resource_type_jsonGetByOffsetAndOrderResource_type resource_type, int offset, Reviews_resource_type_jsonGetByOffsetAndOrderOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reviews/{resource_type}.json?offset="+offset+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Reviews_resource_type_jsonGetByOffsetAndOrderReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class Critics_resource_type_jsonGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string Copyright { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="num_results")]
		public System.Nullable<System.Int32> Num_results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Critic[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public enum ReviewsSearch_jsonGetByQueryAndCritics_pickAndReviewerAndPublication_dateAndOpening_dateAndOffsetAndOrderCritics_pick
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Y")]
		Y = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="N")]
		N = 1,
	}
	
	public class ReviewsSearch_jsonGetByQueryAndCritics_pickAndReviewerAndPublication_dateAndOpening_dateAndOffsetAndOrderReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string Copyright { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="num_results")]
		public System.Nullable<System.Int32> Num_results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Movie[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public enum Reviews_resource_type_jsonGetByOffsetAndOrderResource_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="picks")]
		picks = 1,
	}
	
	public enum Reviews_resource_type_jsonGetByOffsetAndOrderOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="by-title")]
		byMinustitle = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="by-publication-date")]
		byMinuspublicationMinusdate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="by-opening-date")]
		byMinusopeningMinusdate = 2,
	}
	
	public class Reviews_resource_type_jsonGetByOffsetAndOrderReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string Copyright { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="num_results")]
		public System.Nullable<System.Int32> Num_results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Movie[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
