//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Aggregate metrics for classification/classifier models. For multi-class models, the metrics are either macro-averaged or micro-averaged. When macro-averaged, the metrics are calculated for each label and then an unweighted average is taken of those values. When micro-averaged, the metric is calculated globally by counting the total number of correctly predicted rows.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AggregateClassificationMetrics
	{
		
		/// <summary>
		/// Accuracy is the fraction of predictions given the correct label. For multiclass this is a micro-averaged metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accuracy")]
		public System.Nullable<System.Double> Accuracy { get; set; }
		
		/// <summary>
		/// The F1 score is an average of recall and precision. For multiclass this is a macro-averaged metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f1Score")]
		public System.Nullable<System.Double> F1Score { get; set; }
		
		/// <summary>
		/// Logarithmic Loss. For multiclass this is a macro-averaged metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logLoss")]
		public System.Nullable<System.Double> LogLoss { get; set; }
		
		/// <summary>
		/// Precision is the fraction of actual positive predictions that had positive actual labels. For multiclass this is a macro-averaged metric treating each class as a binary classifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public System.Nullable<System.Double> Precision { get; set; }
		
		/// <summary>
		/// Recall is the fraction of actual positive labels that were given a positive prediction. For multiclass this is a macro-averaged metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recall")]
		public System.Nullable<System.Double> Recall { get; set; }
		
		/// <summary>
		/// Area Under a ROC Curve. For multiclass this is a macro-averaged metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rocAuc")]
		public System.Nullable<System.Double> RocAuc { get; set; }
		
		/// <summary>
		/// Threshold at which the metrics are computed. For binary classification models this is the positive class threshold. For multi-class classfication models this is the confidence threshold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public System.Nullable<System.Double> Threshold { get; set; }
	}
	
	/// <summary>
	/// Represents privacy policy associated with "aggregation threshold" method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AggregationThresholdPolicy
	{
		
		/// <summary>
		/// Optional. The privacy unit column(s) associated with this policy. For now, only one column per data source object (table, view) is allowed as a privacy unit column. Representing as a repeated field in metadata for extensibility to multiple columns in future. Duplicates and Repeated struct fields are not allowed. For nested fields, use dot notation ("outer.inner")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacyUnitColumns")]
		public string[] PrivacyUnitColumns { get; set; }
		
		/// <summary>
		/// Optional. The threshold for the "aggregation threshold" policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public string Threshold { get; set; }
	}
	
	/// <summary>
	/// Input/output argument of a function or a stored procedure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Argument
	{
		
		/// <summary>
		/// Optional. Defaults to FIXED_TYPE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="argumentKind")]
		public System.Nullable<ArgumentArgumentKind> ArgumentKind { get; set; }
		
		/// <summary>
		/// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public StandardSqlDataType DataType { get; set; }
		
		/// <summary>
		/// Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT AGGREGATE" clause in DDL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAggregate")]
		public System.Nullable<System.Boolean> IsAggregate { get; set; }
		
		/// <summary>
		/// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<ArgumentMode> Mode { get; set; }
		
		/// <summary>
		/// Optional. The name of this argument. Can be absent for function return argument.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ArgumentArgumentKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARGUMENT_KIND_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_TYPE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY_TYPE = 2,
	}
	
	/// <summary>
	/// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StandardSqlDataType
	{
		
		/// <summary>
		/// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrayElementType")]
		public StandardSqlDataType ArrayElementType { get; set; }
		
		/// <summary>
		/// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rangeElementType")]
		public StandardSqlDataType RangeElementType { get; set; }
		
		/// <summary>
		/// The representation of a SQL STRUCT type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structType")]
		public StandardSqlStructType StructType { get; set; }
		
		/// <summary>
		/// Required. The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeKind")]
		public System.Nullable<StandardSqlDataTypeTypeKind> TypeKind { get; set; }
	}
	
	/// <summary>
	/// The representation of a SQL STRUCT type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StandardSqlStructType
	{
		
		/// <summary>
		/// Fields within the struct.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public StandardSqlField[] Fields { get; set; }
	}
	
	/// <summary>
	/// A field or a column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StandardSqlField
	{
		
		/// <summary>
		/// Optional. The name of this field. Can be absent for struct fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StandardSqlDataType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StandardSqlDataTypeTypeKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_KIND_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INT64 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOAT64 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYTES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMESTAMP = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATETIME = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERVAL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEOGRAPHY = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIGNUMERIC = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARRAY = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRUCT = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RANGE = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ArgumentMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INOUT = 3,
	}
	
	/// <summary>
	/// Arima coefficients.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArimaCoefficients
	{
		
		/// <summary>
		/// Auto-regressive coefficients, an array of double.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRegressiveCoefficients")]
		public double[] AutoRegressiveCoefficients { get; set; }
		
		/// <summary>
		/// Intercept coefficient, just a double not an array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interceptCoefficient")]
		public System.Nullable<System.Double> InterceptCoefficient { get; set; }
		
		/// <summary>
		/// Moving-average coefficients, an array of double.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="movingAverageCoefficients")]
		public double[] MovingAverageCoefficients { get; set; }
	}
	
	/// <summary>
	/// ARIMA model fitting metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArimaFittingMetrics
	{
		
		/// <summary>
		/// AIC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aic")]
		public System.Nullable<System.Double> Aic { get; set; }
		
		/// <summary>
		/// Log-likelihood.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logLikelihood")]
		public System.Nullable<System.Double> LogLikelihood { get; set; }
		
		/// <summary>
		/// Variance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variance")]
		public System.Nullable<System.Double> Variance { get; set; }
	}
	
	/// <summary>
	/// Model evaluation metrics for ARIMA forecasting models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArimaForecastingMetrics
	{
		
		/// <summary>
		/// Arima model fitting metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arimaFittingMetrics")]
		public ArimaFittingMetrics[] ArimaFittingMetrics { get; set; }
		
		/// <summary>
		/// Repeated as there can be many metric sets (one for each model) in auto-arima and the large-scale case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arimaSingleModelForecastingMetrics")]
		public ArimaSingleModelForecastingMetrics[] ArimaSingleModelForecastingMetrics { get; set; }
		
		/// <summary>
		/// Whether Arima model fitted with drift or not. It is always false when d is not 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasDrift")]
		public bool[] HasDrift { get; set; }
		
		/// <summary>
		/// Non-seasonal order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonSeasonalOrder")]
		public ArimaOrder[] NonSeasonalOrder { get; set; }
		
		/// <summary>
		/// Seasonal periods. Repeated because multiple periods are supported for one time series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seasonalPeriods")]
		public string[] SeasonalPeriods { get; set; }
		
		/// <summary>
		/// Id to differentiate different time series for the large-scale case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeriesId")]
		public string[] TimeSeriesId { get; set; }
	}
	
	/// <summary>
	/// Model evaluation metrics for a single ARIMA forecasting model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArimaSingleModelForecastingMetrics
	{
		
		/// <summary>
		/// ARIMA model fitting metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arimaFittingMetrics")]
		public ArimaFittingMetrics ArimaFittingMetrics { get; set; }
		
		/// <summary>
		/// Is arima model fitted with drift or not. It is always false when d is not 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasDrift")]
		public System.Nullable<System.Boolean> HasDrift { get; set; }
		
		/// <summary>
		/// If true, holiday_effect is a part of time series decomposition result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasHolidayEffect")]
		public System.Nullable<System.Boolean> HasHolidayEffect { get; set; }
		
		/// <summary>
		/// If true, spikes_and_dips is a part of time series decomposition result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasSpikesAndDips")]
		public System.Nullable<System.Boolean> HasSpikesAndDips { get; set; }
		
		/// <summary>
		/// If true, step_changes is a part of time series decomposition result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasStepChanges")]
		public System.Nullable<System.Boolean> HasStepChanges { get; set; }
		
		/// <summary>
		/// Arima order, can be used for both non-seasonal and seasonal parts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonSeasonalOrder")]
		public ArimaOrder NonSeasonalOrder { get; set; }
		
		/// <summary>
		/// Seasonal periods. Repeated because multiple periods are supported for one time series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seasonalPeriods")]
		public string[] SeasonalPeriods { get; set; }
		
		/// <summary>
		/// The time_series_id value for this time series. It will be one of the unique values from the time_series_id_column specified during ARIMA model training. Only present when time_series_id_column training option was used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeriesId")]
		public string TimeSeriesId { get; set; }
		
		/// <summary>
		/// The tuple of time_series_ids identifying this time series. It will be one of the unique tuples of values present in the time_series_id_columns specified during ARIMA model training. Only present when time_series_id_columns training option was used and the order of values here are same as the order of time_series_id_columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeriesIds")]
		public string[] TimeSeriesIds { get; set; }
	}
	
	/// <summary>
	/// Arima order, can be used for both non-seasonal and seasonal parts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArimaOrder
	{
		
		/// <summary>
		/// Order of the differencing part.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="d")]
		public string D { get; set; }
		
		/// <summary>
		/// Order of the autoregressive part.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="p")]
		public string P { get; set; }
		
		/// <summary>
		/// Order of the moving-average part.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="q")]
		public string Q { get; set; }
	}
	
	/// <summary>
	/// Arima model information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArimaModelInfo
	{
		
		/// <summary>
		/// Arima coefficients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arimaCoefficients")]
		public ArimaCoefficients ArimaCoefficients { get; set; }
		
		/// <summary>
		/// ARIMA model fitting metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arimaFittingMetrics")]
		public ArimaFittingMetrics ArimaFittingMetrics { get; set; }
		
		/// <summary>
		/// Whether Arima model fitted with drift or not. It is always false when d is not 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasDrift")]
		public System.Nullable<System.Boolean> HasDrift { get; set; }
		
		/// <summary>
		/// If true, holiday_effect is a part of time series decomposition result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasHolidayEffect")]
		public System.Nullable<System.Boolean> HasHolidayEffect { get; set; }
		
		/// <summary>
		/// If true, spikes_and_dips is a part of time series decomposition result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasSpikesAndDips")]
		public System.Nullable<System.Boolean> HasSpikesAndDips { get; set; }
		
		/// <summary>
		/// If true, step_changes is a part of time series decomposition result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasStepChanges")]
		public System.Nullable<System.Boolean> HasStepChanges { get; set; }
		
		/// <summary>
		/// Arima order, can be used for both non-seasonal and seasonal parts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonSeasonalOrder")]
		public ArimaOrder NonSeasonalOrder { get; set; }
		
		/// <summary>
		/// Seasonal periods. Repeated because multiple periods are supported for one time series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seasonalPeriods")]
		public string[] SeasonalPeriods { get; set; }
		
		/// <summary>
		/// The time_series_id value for this time series. It will be one of the unique values from the time_series_id_column specified during ARIMA model training. Only present when time_series_id_column training option was used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeriesId")]
		public string TimeSeriesId { get; set; }
		
		/// <summary>
		/// The tuple of time_series_ids identifying this time series. It will be one of the unique tuples of values present in the time_series_id_columns specified during ARIMA model training. Only present when time_series_id_columns training option was used and the order of values here are same as the order of time_series_id_columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeriesIds")]
		public string[] TimeSeriesIds { get; set; }
	}
	
	/// <summary>
	/// (Auto-)arima fitting result. Wrap everything in ArimaResult for easier refactoring if we want to use model-specific iteration results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArimaResult
	{
		
		/// <summary>
		/// This message is repeated because there are multiple arima models fitted in auto-arima. For non-auto-arima model, its size is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arimaModelInfo")]
		public ArimaModelInfo[] ArimaModelInfo { get; set; }
		
		/// <summary>
		/// Seasonal periods. Repeated because multiple periods are supported for one time series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seasonalPeriods")]
		public string[] SeasonalPeriods { get; set; }
	}
	
	/// <summary>
	/// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditConfig
	{
		
		/// <summary>
		/// The configuration for logging of each type of permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditLogConfigs")]
		public AuditLogConfig[] AuditLogConfigs { get; set; }
		
		/// <summary>
		/// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditLogConfig
	{
		
		/// <summary>
		/// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptedMembers")]
		public string[] ExemptedMembers { get; set; }
		
		/// <summary>
		/// The log type that this config enables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public System.Nullable<AuditLogConfigLogType> LogType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuditLogConfigLogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_WRITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_READ = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AvroOptions
	{
		
		/// <summary>
		/// [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useAvroLogicalTypes")]
		public System.Nullable<System.Boolean> UseAvroLogicalTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BiEngineReason
	{
		
		/// <summary>
		/// [Output-only] High-level BI Engine reason for partial or disabled acceleration.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; } = "";
		
		/// <summary>
		/// [Output-only] Free form human-readable reason for partial or disabled acceleration.
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; } = "";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BiEngineStatistics
	{
		
		/// <summary>
		/// [Output-only] Specifies which mode of BI Engine acceleration was performed (if any).
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="accelerationMode")]
		public string AccelerationMode { get; set; } = "";
		
		/// <summary>
		/// [Output-only] Specifies which mode of BI Engine acceleration was performed (if any).
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="biEngineMode")]
		public string BiEngineMode { get; set; } = "";
		
		/// <summary>
		/// In case of DISABLED or PARTIAL bi_engine_mode, these contain the explanatory reasons as to why BI Engine could not accelerate. In case the full query was accelerated, this field is not populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="biEngineReasons")]
		public BiEngineReason[] BiEngineReasons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BigLakeConfiguration
	{
		
		/// <summary>
		/// [Required] Required and immutable. Credential reference for accessing external storage system. Normalized as project_id.location_id.connection_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionId")]
		public string ConnectionId { get; set; }
		
		/// <summary>
		/// [Required] Required and immutable. Open source file format that the table data is stored in. Currently only PARQUET is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileFormat")]
		public string FileFormat { get; set; }
		
		/// <summary>
		/// [Required] Required and immutable. Fully qualified location prefix of the external folder where data is stored. Normalized to standard format: "gs:////". Starts with "gs://" rather than "/bigstore/". Ends with "/". Does not contain "*". See also BigLakeStorageMetadata on how it is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageUri")]
		public string StorageUri { get; set; }
		
		/// <summary>
		/// [Required] Required and immutable. Open source file format that the table data is stored in. Currently only PARQUET is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableFormat")]
		public string TableFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BigQueryModelTraining
	{
		
		/// <summary>
		/// [Output-only, Beta] Index of current ML training iteration. Updated during create model query job to show job progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentIteration")]
		public System.Nullable<System.Int32> CurrentIteration { get; set; }
		
		/// <summary>
		/// [Output-only, Beta] Expected number of iterations for the create model query job specified as num_iterations in the input query. The actual total number of iterations may be less than this number due to early stop.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedTotalIterations")]
		public string ExpectedTotalIterations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BigtableColumn
	{
		
		/// <summary>
		/// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		/// <summary>
		/// [Optional] If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldName")]
		public string FieldName { get; set; }
		
		/// <summary>
		/// [Optional] If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onlyReadLatest")]
		public System.Nullable<System.Boolean> OnlyReadLatest { get; set; }
		
		/// <summary>
		/// [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as field_name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qualifierEncoded")]
		public string QualifierEncoded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="qualifierString")]
		public string QualifierString { get; set; }
		
		/// <summary>
		/// [Optional] The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BigtableColumnFamily
	{
		
		/// <summary>
		/// [Optional] Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public BigtableColumn[] Columns { get; set; }
		
		/// <summary>
		/// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		/// <summary>
		/// Identifier of the column family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="familyId")]
		public string FamilyId { get; set; }
		
		/// <summary>
		/// [Optional] If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onlyReadLatest")]
		public System.Nullable<System.Boolean> OnlyReadLatest { get; set; }
		
		/// <summary>
		/// [Optional] The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BigtableOptions
	{
		
		/// <summary>
		/// [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnFamilies")]
		public BigtableColumnFamily[] ColumnFamilies { get; set; }
		
		/// <summary>
		/// [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreUnspecifiedColumnFamilies")]
		public System.Nullable<System.Boolean> IgnoreUnspecifiedColumnFamilies { get; set; }
		
		/// <summary>
		/// [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readRowkeyAsString")]
		public System.Nullable<System.Boolean> ReadRowkeyAsString { get; set; }
	}
	
	/// <summary>
	/// Evaluation metrics for binary classification/classifier models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BinaryClassificationMetrics
	{
		
		/// <summary>
		/// Aggregate metrics for classification/classifier models. For multi-class models, the metrics are either macro-averaged or micro-averaged. When macro-averaged, the metrics are calculated for each label and then an unweighted average is taken of those values. When micro-averaged, the metric is calculated globally by counting the total number of correctly predicted rows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregateClassificationMetrics")]
		public AggregateClassificationMetrics AggregateClassificationMetrics { get; set; }
		
		/// <summary>
		/// Binary confusion matrix at multiple thresholds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binaryConfusionMatrixList")]
		public BinaryConfusionMatrix[] BinaryConfusionMatrixList { get; set; }
		
		/// <summary>
		/// Label representing the negative class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativeLabel")]
		public string NegativeLabel { get; set; }
		
		/// <summary>
		/// Label representing the positive class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positiveLabel")]
		public string PositiveLabel { get; set; }
	}
	
	/// <summary>
	/// Confusion matrix for binary classification models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BinaryConfusionMatrix
	{
		
		/// <summary>
		/// The fraction of predictions given the correct label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accuracy")]
		public System.Nullable<System.Double> Accuracy { get; set; }
		
		/// <summary>
		/// The equally weighted average of recall and precision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f1Score")]
		public System.Nullable<System.Double> F1Score { get; set; }
		
		/// <summary>
		/// Number of false samples predicted as false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="falseNegatives")]
		public string FalseNegatives { get; set; }
		
		/// <summary>
		/// Number of false samples predicted as true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="falsePositives")]
		public string FalsePositives { get; set; }
		
		/// <summary>
		/// Threshold value used when computing each of the following metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positiveClassThreshold")]
		public System.Nullable<System.Double> PositiveClassThreshold { get; set; }
		
		/// <summary>
		/// The fraction of actual positive predictions that had positive actual labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public System.Nullable<System.Double> Precision { get; set; }
		
		/// <summary>
		/// The fraction of actual positive labels that were given a positive prediction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recall")]
		public System.Nullable<System.Double> Recall { get; set; }
		
		/// <summary>
		/// Number of true samples predicted as false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trueNegatives")]
		public string TrueNegatives { get; set; }
		
		/// <summary>
		/// Number of true samples predicted as true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="truePositives")]
		public string TruePositives { get; set; }
	}
	
	/// <summary>
	/// Associates `members`, or principals, with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BqmlIterationResult
	{
		
		/// <summary>
		/// [Output-only, Beta] Time taken to run the training iteration in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationMs")]
		public string DurationMs { get; set; }
		
		/// <summary>
		/// [Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evalLoss")]
		public System.Nullable<System.Double> EvalLoss { get; set; }
		
		/// <summary>
		/// [Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// [Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="learnRate")]
		public System.Nullable<System.Double> LearnRate { get; set; }
		
		/// <summary>
		/// [Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainingLoss")]
		public System.Nullable<System.Double> TrainingLoss { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BqmlTrainingRun
	{
		
		/// <summary>
		/// [Output-only, Beta] List of each iteration results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iterationResults")]
		public BqmlIterationResult[] IterationResults { get; set; }
		
		/// <summary>
		/// [Output-only, Beta] Training run start time in milliseconds since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// [Output-only, Beta] Different state applicable for a training run. IN PROGRESS: Training run is in progress. FAILED: Training run ended due to a non-retryable failure. SUCCEEDED: Training run successfully completed. CANCELLED: Training run cancelled by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainingOptions")]
		public BqmlTrainingRunTrainingOptions TrainingOptions { get; set; }
	}
	
	public class BqmlTrainingRunTrainingOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="earlyStop")]
		public System.Nullable<System.Boolean> EarlyStop { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="l1Reg")]
		public System.Nullable<System.Double> L1Reg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="l2Reg")]
		public System.Nullable<System.Double> L2Reg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnRate")]
		public System.Nullable<System.Double> LearnRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="learnRateStrategy")]
		public string LearnRateStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineSearchInitLearnRate")]
		public System.Nullable<System.Double> LineSearchInitLearnRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxIteration")]
		public string MaxIteration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minRelProgress")]
		public System.Nullable<System.Double> MinRelProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warmStart")]
		public System.Nullable<System.Boolean> WarmStart { get; set; }
	}
	
	/// <summary>
	/// Representative value of a categorical feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CategoricalValue
	{
		
		/// <summary>
		/// Counts of all categories for the categorical feature. If there are more than ten categories, we return top ten (by count) and return one more CategoryCount with category "_OTHER_" and count as aggregate counts of remaining categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryCounts")]
		public CategoryCount[] CategoryCounts { get; set; }
	}
	
	/// <summary>
	/// Represents the count of a single category within the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CategoryCount
	{
		
		/// <summary>
		/// The name of category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// The count of training samples matching the category within the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloneDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseTableReference")]
		public TableReference BaseTableReference { get; set; }
		
		/// <summary>
		/// [Required] The time at which the base table was cloned. This value is reported in the JSON response using RFC3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloneTime")]
		public System.Nullable<System.DateTimeOffset> CloneTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableReference
	{
		
		/// <summary>
		/// [Required] The ID of the dataset containing this table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		/// <summary>
		/// [Required] The ID of the project containing this table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// [Required] The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
	}
	
	/// <summary>
	/// Message containing the information about one cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cluster
	{
		
		/// <summary>
		/// Centroid id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="centroidId")]
		public string CentroidId { get; set; }
		
		/// <summary>
		/// Count of training data rows that were assigned to this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// Values of highly variant features for this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureValues")]
		public FeatureValue[] FeatureValues { get; set; }
	}
	
	/// <summary>
	/// Representative value of a single feature within the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FeatureValue
	{
		
		/// <summary>
		/// Representative value of a categorical feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoricalValue")]
		public CategoricalValue CategoricalValue { get; set; }
		
		/// <summary>
		/// The feature column name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureColumn")]
		public string FeatureColumn { get; set; }
		
		/// <summary>
		/// The numerical feature value. This is the centroid value for this feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numericalValue")]
		public System.Nullable<System.Double> NumericalValue { get; set; }
	}
	
	/// <summary>
	/// Information about a single cluster for clustering model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClusterInfo
	{
		
		/// <summary>
		/// Centroid id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="centroidId")]
		public string CentroidId { get; set; }
		
		/// <summary>
		/// Cluster radius, the average distance from centroid to each point assigned to the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterRadius")]
		public System.Nullable<System.Double> ClusterRadius { get; set; }
		
		/// <summary>
		/// Cluster size, the total number of points assigned to the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterSize")]
		public string ClusterSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Clustering
	{
		
		/// <summary>
		/// [Repeated] One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. When you cluster a table using multiple columns, the order of columns you specify is important. The order of the specified columns determines the sort order of the data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string[] Fields { get; set; }
	}
	
	/// <summary>
	/// Evaluation metrics for clustering models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClusteringMetrics
	{
		
		/// <summary>
		/// Information for all clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusters")]
		public Cluster[] Clusters { get; set; }
		
		/// <summary>
		/// Davies-Bouldin index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daviesBouldinIndex")]
		public System.Nullable<System.Double> DaviesBouldinIndex { get; set; }
		
		/// <summary>
		/// Mean of squared distances between each sample to its cluster centroid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meanSquaredDistance")]
		public System.Nullable<System.Double> MeanSquaredDistance { get; set; }
	}
	
	/// <summary>
	/// Confusion matrix for multi-class classification models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfusionMatrix
	{
		
		/// <summary>
		/// Confidence threshold used when computing the entries of the confusion matrix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidenceThreshold")]
		public System.Nullable<System.Double> ConfidenceThreshold { get; set; }
		
		/// <summary>
		/// One row per actual label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public Row[] Rows { get; set; }
	}
	
	/// <summary>
	/// A single row in the confusion matrix.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Row
	{
		
		/// <summary>
		/// The original label of this row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actualLabel")]
		public string ActualLabel { get; set; }
		
		/// <summary>
		/// Info describing predicted label distribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public Entry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A single entry in the confusion matrix.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Entry
	{
		
		/// <summary>
		/// Number of items being predicted as this label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemCount")]
		public string ItemCount { get; set; }
		
		/// <summary>
		/// The predicted label. For confidence_threshold > 0, we will also add an entry indicating the number of items under the confidence threshold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedLabel")]
		public string PredictedLabel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectionProperty
	{
		
		/// <summary>
		/// [Required] Name of the connection property to set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// [Required] Value of the connection property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CsvOptions
	{
		
		/// <summary>
		/// [Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowJaggedRows")]
		public System.Nullable<System.Boolean> AllowJaggedRows { get; set; }
		
		/// <summary>
		/// [Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowQuotedNewlines")]
		public System.Nullable<System.Boolean> AllowQuotedNewlines { get; set; }
		
		/// <summary>
		/// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		/// <summary>
		/// [Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldDelimiter")]
		public string FieldDelimiter { get; set; }
		
		/// <summary>
		/// [Optional] An custom string that will represent a NULL value in CSV import data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nullMarker")]
		public string NullMarker { get; set; }
		
		/// <summary>
		/// [Optional] Preserves the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') when loading from CSV. Only applicable to CSV, ignored for other formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preserveAsciiControlCharacters")]
		public System.Nullable<System.Boolean> PreserveAsciiControlCharacters { get; set; }
		
		/// <summary>
		/// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
		/// Pattern: .?
		/// </summary>
		[System.ComponentModel.DefaultValue("\"")]
		[System.Runtime.Serialization.DataMember(Name="quote")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".?")]
		public string Quote { get; set; } = "\"";
		
		/// <summary>
		/// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipLeadingRows")]
		public string SkipLeadingRows { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataMaskingStatistics
	{
		
		/// <summary>
		/// [Output-only] [Preview] Whether any accessed data was protected by data masking. The actual evaluation is done by accessStats.masked_field_count > 0. Since this is only used for the discovery_doc generation purpose, as long as the type (boolean) matches, client library can leverage this. The actual evaluation of the variable is done else-where.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataMaskingApplied")]
		public System.Nullable<System.Boolean> DataMaskingApplied { get; set; }
	}
	
	/// <summary>
	/// Data split result. This contains references to the training and evaluation data tables that were used to train the model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSplitResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="evaluationTable")]
		public TableReference EvaluationTable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testTable")]
		public TableReference TestTable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trainingTable")]
		public TableReference TrainingTable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dataset
	{
		
		/// <summary>
		/// [Optional] An array of objects that define dataset access for one or more entities. You can set this property when inserting or updating a dataset in order to control who is allowed to access the data. If unspecified at dataset creation time, BigQuery adds default dataset access for the following entities: access.specialGroup: projectReaders; access.role: READER; access.specialGroup: projectWriters; access.role: WRITER; access.specialGroup: projectOwners; access.role: OWNER; access.userByEmail: [dataset creator email]; access.role: OWNER;
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access")]
		public DatasetAccess[] DatasetAccess { get; set; }
		
		/// <summary>
		/// [Output-only] The time when this dataset was created, in milliseconds since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetReference")]
		public DatasetReference DatasetReference { get; set; }
		
		/// <summary>
		/// [Output-only] The default collation of the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultCollation")]
		public string DefaultCollation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultEncryptionConfiguration")]
		public EncryptionConfiguration DefaultEncryptionConfiguration { get; set; }
		
		/// <summary>
		/// [Optional] The default partition expiration for all partitioned tables in the dataset, in milliseconds. Once this property is set, all newly-created partitioned tables in the dataset will have an expirationMs property in the timePartitioning settings set to this value, and changing the value will only affect new tables, not existing ones. The storage in a partition will have an expiration time of its partition time plus this value. Setting this property overrides the use of defaultTableExpirationMs for partitioned tables: only one of defaultTableExpirationMs and defaultPartitionExpirationMs will be used for any new partitioned table. If you provide an explicit timePartitioning.expirationMs when creating or updating a partitioned table, that value takes precedence over the default partition expiration time indicated by this property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultPartitionExpirationMs")]
		public string DefaultPartitionExpirationMs { get; set; }
		
		/// <summary>
		/// [Output-only] The default rounding mode of the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultRoundingMode")]
		public string DefaultRoundingMode { get; set; }
		
		/// <summary>
		/// [Optional] The default lifetime of all tables in the dataset, in milliseconds. The minimum value is 3600000 milliseconds (one hour). Once this property is set, all newly-created tables in the dataset will have an expirationTime property set to the creation time plus the value in this property, and changing the value will only affect new tables, not existing ones. When the expirationTime for a given table is reached, that table will be deleted automatically. If a table's expirationTime is modified or removed before the table expires, or if you provide an explicit expirationTime when creating a table, that value takes precedence over the default expiration time indicated by this property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultTableExpirationMs")]
		public string DefaultTableExpirationMs { get; set; }
		
		/// <summary>
		/// [Optional] A user-friendly description of the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// [Output-only] A hash of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalDatasetReference")]
		public ExternalDatasetReference ExternalDatasetReference { get; set; }
		
		/// <summary>
		/// [Optional] A descriptive name for the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// [Output-only] The fully-qualified unique name of the dataset in the format projectId:datasetId. The dataset name without the project name is given in the datasetId field. When creating a new dataset, leave this field blank, and instead specify the datasetId field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// [Optional] Indicates if table names are case insensitive in the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCaseInsensitive")]
		public System.Nullable<System.Boolean> IsCaseInsensitive { get; set; }
		
		/// <summary>
		/// [Output-only] The resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#dataset")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#dataset";
		
		/// <summary>
		/// The labels associated with this dataset. You can use these to organize and group your datasets. You can set this property when inserting or updating a dataset. See Creating and Updating Dataset Labels for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// [Output-only] The date when this dataset or any of its tables was last modified, in milliseconds since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public string LastModifiedTime { get; set; }
		
		/// <summary>
		/// The geographic location where the dataset should reside. The default value is US. See details at https://cloud.google.com/bigquery/docs/locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// [Optional] Number of hours for the max time travel for all tables in the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTimeTravelHours")]
		public string MaxTimeTravelHours { get; set; }
		
		/// <summary>
		/// [Output-only] Reserved for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="satisfiesPzs")]
		public System.Nullable<System.Boolean> SatisfiesPzs { get; set; }
		
		/// <summary>
		/// [Output-only] A URL that can be used to access the resource again. You can use this URL in Get or Update requests to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// [Optional] Storage billing model to be used for all tables in the dataset. Can be set to PHYSICAL. Default is LOGICAL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageBillingModel")]
		public string StorageBillingModel { get; set; }
		
		/// <summary>
		/// [Optional]The tags associated with this dataset. Tag keys are globally unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public DatasetTags[] DatasetTags { get; set; }
	}
	
	public class DatasetAccess
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public DatasetAccessEntry Dataset { get; set; }
		
		/// <summary>
		/// [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupByEmail")]
		public string GroupByEmail { get; set; }
		
		/// <summary>
		/// [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iamMember")]
		public string IamMember { get; set; }
		
		/// <summary>
		/// [Required] An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER  roles/bigquery.dataOwner WRITER  roles/bigquery.dataEditor READER  roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routine")]
		public RoutineReference Routine { get; set; }
		
		/// <summary>
		/// [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialGroup")]
		public string SpecialGroup { get; set; }
		
		/// <summary>
		/// [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userByEmail")]
		public string UserByEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="view")]
		public TableReference View { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetAccessEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public DatasetReference Dataset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetTypes")]
		public string[] TargetTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetReference
	{
		
		/// <summary>
		/// [Required] A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		/// <summary>
		/// [Optional] The ID of the project containing this dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoutineReference
	{
		
		/// <summary>
		/// Required. The ID of the dataset containing this routine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		/// <summary>
		/// Required. The ID of the project containing this routine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routineId")]
		public string RoutineId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptionConfiguration
	{
		
		/// <summary>
		/// Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalDatasetReference
	{
		
		/// <summary>
		/// [Required] The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connection")]
		public string Connection { get; set; }
		
		/// <summary>
		/// [Required] External source that backs this dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalSource")]
		public string ExternalSource { get; set; }
	}
	
	public class DatasetTags
	{
		
		/// <summary>
		/// [Required] The namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is org id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagKey")]
		public string TagKey { get; set; }
		
		/// <summary>
		/// [Required] Friendly short name of the tag value, e.g. "production".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagValue")]
		public string TagValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetList
	{
		
		/// <summary>
		/// An array of the dataset resources in the project. Each resource contains basic information. For full information about a particular dataset resource, use the Datasets: get method. This property is omitted when there are no datasets in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasets")]
		public DatasetListDatasets[] DatasetListDatasets { get; set; }
		
		/// <summary>
		/// A hash value of the results page. You can use this property to determine if the page has changed since the last request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The list type. This property always returns the value "bigquery#datasetList".
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#datasetList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#datasetList";
		
		/// <summary>
		/// A token that can be used to request the next results page. This property is omitted on the final results page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	public class DatasetListDatasets
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasetReference")]
		public DatasetReference DatasetReference { get; set; }
		
		/// <summary>
		/// A descriptive name for the dataset, if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// The fully-qualified, unique, opaque ID of the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource type. This property always returns the value "bigquery#dataset".
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#dataset")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#dataset";
		
		/// <summary>
		/// The labels associated with this dataset. You can use these to organize and group your datasets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The geographic location where the data resides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DestinationTableProperties
	{
		
		/// <summary>
		/// [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// [Internal] This field is for Google internal use only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
		
		/// <summary>
		/// [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
	}
	
	/// <summary>
	/// Model evaluation metrics for dimensionality reduction models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionalityReductionMetrics
	{
		
		/// <summary>
		/// Total percentage of variance explained by the selected principal components.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalExplainedVarianceRatio")]
		public System.Nullable<System.Double> TotalExplainedVarianceRatio { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DmlStatistics
	{
		
		/// <summary>
		/// Number of deleted Rows. populated by DML DELETE, MERGE and TRUNCATE statements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletedRowCount")]
		public string DeletedRowCount { get; set; }
		
		/// <summary>
		/// Number of inserted Rows. Populated by DML INSERT and MERGE statements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertedRowCount")]
		public string InsertedRowCount { get; set; }
		
		/// <summary>
		/// Number of updated Rows. Populated by DML UPDATE and MERGE statements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedRowCount")]
		public string UpdatedRowCount { get; set; }
	}
	
	/// <summary>
	/// Discrete candidates of a double hyperparameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoubleCandidates
	{
		
		/// <summary>
		/// Candidates for the double parameter in increasing order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidates")]
		public double[] Candidates { get; set; }
	}
	
	/// <summary>
	/// Search space for a double hyperparameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoubleHparamSearchSpace
	{
		
		/// <summary>
		/// Discrete candidates of a double hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidates")]
		public DoubleCandidates Candidates { get; set; }
		
		/// <summary>
		/// Range of a double hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public DoubleRange Range { get; set; }
	}
	
	/// <summary>
	/// Range of a double hyperparameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoubleRange
	{
		
		/// <summary>
		/// Max value of the double parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Double> Max { get; set; }
		
		/// <summary>
		/// Min value of the double parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Double> Min { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorProto
	{
		
		/// <summary>
		/// Debugging information. This property is internal to Google and should not be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugInfo")]
		public string DebugInfo { get; set; }
		
		/// <summary>
		/// Specifies where the error occurred, if present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// A human-readable description of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A short error code that summarizes the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Evaluation metrics of a model. These are either computed on all training data or just the eval data based on whether eval data was used during training. These are not present for imported models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvaluationMetrics
	{
		
		/// <summary>
		/// Model evaluation metrics for ARIMA forecasting models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arimaForecastingMetrics")]
		public ArimaForecastingMetrics ArimaForecastingMetrics { get; set; }
		
		/// <summary>
		/// Evaluation metrics for binary classification/classifier models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binaryClassificationMetrics")]
		public BinaryClassificationMetrics BinaryClassificationMetrics { get; set; }
		
		/// <summary>
		/// Evaluation metrics for clustering models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusteringMetrics")]
		public ClusteringMetrics ClusteringMetrics { get; set; }
		
		/// <summary>
		/// Model evaluation metrics for dimensionality reduction models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionalityReductionMetrics")]
		public DimensionalityReductionMetrics DimensionalityReductionMetrics { get; set; }
		
		/// <summary>
		/// Evaluation metrics for multi-class classification/classifier models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiClassClassificationMetrics")]
		public MultiClassClassificationMetrics MultiClassClassificationMetrics { get; set; }
		
		/// <summary>
		/// Evaluation metrics used by weighted-ALS models specified by feedback_type=implicit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rankingMetrics")]
		public RankingMetrics RankingMetrics { get; set; }
		
		/// <summary>
		/// Evaluation metrics for regression and explicit feedback type matrix factorization models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regressionMetrics")]
		public RegressionMetrics RegressionMetrics { get; set; }
	}
	
	/// <summary>
	/// Evaluation metrics for multi-class classification/classifier models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultiClassClassificationMetrics
	{
		
		/// <summary>
		/// Aggregate metrics for classification/classifier models. For multi-class models, the metrics are either macro-averaged or micro-averaged. When macro-averaged, the metrics are calculated for each label and then an unweighted average is taken of those values. When micro-averaged, the metric is calculated globally by counting the total number of correctly predicted rows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregateClassificationMetrics")]
		public AggregateClassificationMetrics AggregateClassificationMetrics { get; set; }
		
		/// <summary>
		/// Confusion matrix at different thresholds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confusionMatrixList")]
		public ConfusionMatrix[] ConfusionMatrixList { get; set; }
	}
	
	/// <summary>
	/// Evaluation metrics used by weighted-ALS models specified by feedback_type=implicit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RankingMetrics
	{
		
		/// <summary>
		/// Determines the goodness of a ranking by computing the percentile rank from the predicted confidence and dividing it by the original rank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="averageRank")]
		public System.Nullable<System.Double> AverageRank { get; set; }
		
		/// <summary>
		/// Calculates a precision per user for all the items by ranking them and then averages all the precisions across all the users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meanAveragePrecision")]
		public System.Nullable<System.Double> MeanAveragePrecision { get; set; }
		
		/// <summary>
		/// Similar to the mean squared error computed in regression and explicit recommendation models except instead of computing the rating directly, the output from evaluate is computed against a preference which is 1 or 0 depending on if the rating exists or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meanSquaredError")]
		public System.Nullable<System.Double> MeanSquaredError { get; set; }
		
		/// <summary>
		/// A metric to determine the goodness of a ranking calculated from the predicted confidence by comparing it to an ideal rank measured by the original ratings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="normalizedDiscountedCumulativeGain")]
		public System.Nullable<System.Double> NormalizedDiscountedCumulativeGain { get; set; }
	}
	
	/// <summary>
	/// Evaluation metrics for regression and explicit feedback type matrix factorization models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegressionMetrics
	{
		
		/// <summary>
		/// Mean absolute error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meanAbsoluteError")]
		public System.Nullable<System.Double> MeanAbsoluteError { get; set; }
		
		/// <summary>
		/// Mean squared error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meanSquaredError")]
		public System.Nullable<System.Double> MeanSquaredError { get; set; }
		
		/// <summary>
		/// Mean squared log error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meanSquaredLogError")]
		public System.Nullable<System.Double> MeanSquaredLogError { get; set; }
		
		/// <summary>
		/// Median absolute error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medianAbsoluteError")]
		public System.Nullable<System.Double> MedianAbsoluteError { get; set; }
		
		/// <summary>
		/// R^2 score. This corresponds to r2_score in ML.EVALUATE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rSquared")]
		public System.Nullable<System.Double> RSquared { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExplainQueryStage
	{
		
		/// <summary>
		/// Number of parallel input segments completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completedParallelInputs")]
		public string CompletedParallelInputs { get; set; }
		
		/// <summary>
		/// Milliseconds the average shard spent on CPU-bound tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeMsAvg")]
		public string ComputeMsAvg { get; set; }
		
		/// <summary>
		/// Milliseconds the slowest shard spent on CPU-bound tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeMsMax")]
		public string ComputeMsMax { get; set; }
		
		/// <summary>
		/// Relative amount of time the average shard spent on CPU-bound tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeRatioAvg")]
		public System.Nullable<System.Double> ComputeRatioAvg { get; set; }
		
		/// <summary>
		/// Relative amount of time the slowest shard spent on CPU-bound tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeRatioMax")]
		public System.Nullable<System.Double> ComputeRatioMax { get; set; }
		
		/// <summary>
		/// Stage end time represented as milliseconds since epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endMs")]
		public string EndMs { get; set; }
		
		/// <summary>
		/// Unique ID for stage within plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// IDs for stages that are inputs to this stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputStages")]
		public string[] InputStages { get; set; }
		
		/// <summary>
		/// Human-readable name for stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Number of parallel input segments to be processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parallelInputs")]
		public string ParallelInputs { get; set; }
		
		/// <summary>
		/// Milliseconds the average shard spent reading input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readMsAvg")]
		public string ReadMsAvg { get; set; }
		
		/// <summary>
		/// Milliseconds the slowest shard spent reading input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readMsMax")]
		public string ReadMsMax { get; set; }
		
		/// <summary>
		/// Relative amount of time the average shard spent reading input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readRatioAvg")]
		public System.Nullable<System.Double> ReadRatioAvg { get; set; }
		
		/// <summary>
		/// Relative amount of time the slowest shard spent reading input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readRatioMax")]
		public System.Nullable<System.Double> ReadRatioMax { get; set; }
		
		/// <summary>
		/// Number of records read into the stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordsRead")]
		public string RecordsRead { get; set; }
		
		/// <summary>
		/// Number of records written by the stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordsWritten")]
		public string RecordsWritten { get; set; }
		
		/// <summary>
		/// Total number of bytes written to shuffle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shuffleOutputBytes")]
		public string ShuffleOutputBytes { get; set; }
		
		/// <summary>
		/// Total number of bytes written to shuffle and spilled to disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shuffleOutputBytesSpilled")]
		public string ShuffleOutputBytesSpilled { get; set; }
		
		/// <summary>
		/// Slot-milliseconds used by the stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slotMs")]
		public string SlotMs { get; set; }
		
		/// <summary>
		/// Stage start time represented as milliseconds since epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startMs")]
		public string StartMs { get; set; }
		
		/// <summary>
		/// Current status for the stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// List of operations within the stage in dependency order (approximately chronological).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public ExplainQueryStep[] Steps { get; set; }
		
		/// <summary>
		/// Milliseconds the average shard spent waiting to be scheduled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitMsAvg")]
		public string WaitMsAvg { get; set; }
		
		/// <summary>
		/// Milliseconds the slowest shard spent waiting to be scheduled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitMsMax")]
		public string WaitMsMax { get; set; }
		
		/// <summary>
		/// Relative amount of time the average shard spent waiting to be scheduled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitRatioAvg")]
		public System.Nullable<System.Double> WaitRatioAvg { get; set; }
		
		/// <summary>
		/// Relative amount of time the slowest shard spent waiting to be scheduled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitRatioMax")]
		public System.Nullable<System.Double> WaitRatioMax { get; set; }
		
		/// <summary>
		/// Milliseconds the average shard spent on writing output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeMsAvg")]
		public string WriteMsAvg { get; set; }
		
		/// <summary>
		/// Milliseconds the slowest shard spent on writing output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeMsMax")]
		public string WriteMsMax { get; set; }
		
		/// <summary>
		/// Relative amount of time the average shard spent on writing output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeRatioAvg")]
		public System.Nullable<System.Double> WriteRatioAvg { get; set; }
		
		/// <summary>
		/// Relative amount of time the slowest shard spent on writing output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeRatioMax")]
		public System.Nullable<System.Double> WriteRatioMax { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExplainQueryStep
	{
		
		/// <summary>
		/// Machine-readable operation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Human-readable stage descriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="substeps")]
		public string[] Substeps { get; set; }
	}
	
	/// <summary>
	/// Explanation for a single feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Explanation
	{
		
		/// <summary>
		/// Attribution of feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribution")]
		public System.Nullable<System.Double> Attribution { get; set; }
		
		/// <summary>
		/// The full feature name. For non-numerical features, will be formatted like `.`. Overall size of feature name will always be truncated to first 120 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureName")]
		public string FeatureName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalDataConfiguration
	{
		
		/// <summary>
		/// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autodetect")]
		public System.Nullable<System.Boolean> Autodetect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avroOptions")]
		public AvroOptions AvroOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bigtableOptions")]
		public BigtableOptions BigtableOptions { get; set; }
		
		/// <summary>
		/// [Optional] The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compression")]
		public string Compression { get; set; }
		
		/// <summary>
		/// [Optional, Trusted Tester] Connection for external data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionId")]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="csvOptions")]
		public CsvOptions CsvOptions { get; set; }
		
		/// <summary>
		/// [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decimalTargetTypes")]
		public string[] DecimalTargetTypes { get; set; }
		
		/// <summary>
		/// [Optional] Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSetSpecType")]
		public string FileSetSpecType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="googleSheetsOptions")]
		public GoogleSheetsOptions GoogleSheetsOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hivePartitioningOptions")]
		public HivePartitioningOptions HivePartitioningOptions { get; set; }
		
		/// <summary>
		/// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreUnknownValues")]
		public System.Nullable<System.Boolean> IgnoreUnknownValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jsonOptions")]
		public JsonOptions JsonOptions { get; set; }
		
		/// <summary>
		/// [Optional] The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV, JSON, and Google Sheets. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxBadRecords")]
		public System.Nullable<System.Int32> MaxBadRecords { get; set; }
		
		/// <summary>
		/// [Optional] Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataCacheMode")]
		public string MetadataCacheMode { get; set; }
		
		/// <summary>
		/// ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectMetadata")]
		public string ObjectMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parquetOptions")]
		public ParquetOptions ParquetOptions { get; set; }
		
		/// <summary>
		/// [Optional] Provide a referencing file with the expected table schema. Enabled for the format: AVRO, PARQUET, ORC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceFileSchemaUri")]
		public string ReferenceFileSchemaUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public TableSchema Schema { get; set; }
		
		/// <summary>
		/// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceFormat")]
		public string SourceFormat { get; set; }
		
		/// <summary>
		/// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUris")]
		public string[] SourceUris { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleSheetsOptions
	{
		
		/// <summary>
		/// [Optional] Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public string Range { get; set; }
		
		/// <summary>
		/// [Optional] The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipLeadingRows")]
		public string SkipLeadingRows { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HivePartitioningOptions
	{
		
		/// <summary>
		/// [Output-only] For permanent external tables, this field is populated with the hive partition keys in the order they were inferred. The types of the partition keys can be deduced by checking the table schema (which will include the partition keys). Not every API will populate this field in the output. For example, Tables.Get will populate it, but Tables.List will not contain this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string[] Fields { get; set; }
		
		/// <summary>
		/// [Optional] When set, what mode of hive partitioning to use when reading data. The following modes are supported. (1) AUTO: automatically infer partition key name(s) and type(s). (2) STRINGS: automatically infer partition key name(s). All types are interpreted as strings. (3) CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported types include: AVRO, CSV, JSON, ORC and Parquet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		/// <summary>
		/// [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with requirePartitionFilter explicitly set to true will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirePartitionFilter")]
		public System.Nullable<System.Boolean> RequirePartitionFilter { get; set; }
		
		/// <summary>
		/// [Optional] When hive partition detection is requested, a common prefix for all source uris should be supplied. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout. gs://bucket/path_to_table/dt=2019-01-01/country=BR/id=7/file.avro gs://bucket/path_to_table/dt=2018-12-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/ (trailing slash does not matter).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUriPrefix")]
		public string SourceUriPrefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JsonOptions
	{
		
		/// <summary>
		/// [Optional] The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParquetOptions
	{
		
		/// <summary>
		/// [Optional] Indicates whether to use schema inference specifically for Parquet LIST logical type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableListInference")]
		public System.Nullable<System.Boolean> EnableListInference { get; set; }
		
		/// <summary>
		/// [Optional] Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enumAsString")]
		public System.Nullable<System.Boolean> EnumAsString { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableSchema
	{
		
		/// <summary>
		/// Describes the fields in a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public TableFieldSchema[] Fields { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableFieldSchema
	{
		
		/// <summary>
		/// [Optional] The categories attached to this field, used for field-level access control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public TableFieldSchemaCategories Categories { get; set; }
		
		/// <summary>
		/// Optional. Collation specification of the field. It only can be set on string type field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collation")]
		public string Collation { get; set; }
		
		/// <summary>
		/// Optional. A SQL expression to specify the default value for this field. It can only be set for top level fields (columns). You can use struct or array expression to specify default value for the entire struct or array. The valid SQL expressions are: - Literals for all data types, including STRUCT and ARRAY. - Following functions: - CURRENT_TIMESTAMP - CURRENT_TIME - CURRENT_DATE - CURRENT_DATETIME - GENERATE_UUID - RAND - SESSION_USER - ST_GEOGPOINT - Struct or array composed with the above allowed functions, for example, [CURRENT_DATE(), DATE '2020-01-01']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValueExpression")]
		public string DefaultValueExpression { get; set; }
		
		/// <summary>
		/// [Optional] The field description. The maximum length is 1,024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// [Optional] Describes the nested schema fields if the type property is set to RECORD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public TableFieldSchema[] Fields { get; set; }
		
		/// <summary>
		/// [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxLength")]
		public string MaxLength { get; set; }
		
		/// <summary>
		/// [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		/// <summary>
		/// [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyTags")]
		public TableFieldSchemaPolicyTags PolicyTags { get; set; }
		
		/// <summary>
		/// [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = "NUMERIC": 1 ≤ precision ≤ 29. - If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public string Precision { get; set; }
		
		/// <summary>
		/// Optional. The subtype of the RANGE, if the type of this field is RANGE. If the type is RANGE, this field is required. Possible values for the field element type of a RANGE include: - DATE - DATETIME - TIMESTAMP
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rangeElementType")]
		public TableFieldSchemaRangeElementType RangeElementType { get; set; }
		
		/// <summary>
		/// Optional. Rounding Mode specification of the field. It only can be set on NUMERIC or BIGNUMERIC type fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roundingMode")]
		public string RoundingMode { get; set; }
		
		/// <summary>
		/// [Optional] See documentation for precision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public string Scale { get; set; }
		
		/// <summary>
		/// [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class TableFieldSchemaCategories
	{
		
		/// <summary>
		/// A list of category resource names. For example, "projects/1/taxonomies/2/categories/3". At most 5 categories are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="names")]
		public string[] Names { get; set; }
	}
	
	public class TableFieldSchemaPolicyTags
	{
		
		/// <summary>
		/// A list of category resource names. For example, "projects/1/location/eu/taxonomies/2/policyTags/3". At most 1 policy tag is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="names")]
		public string[] Names { get; set; }
	}
	
	public class TableFieldSchemaRangeElementType
	{
		
		/// <summary>
		/// The field element type of a RANGE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Request message for `GetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIamPolicyRequest
	{
		
		/// <summary>
		/// Encapsulates settings provided to GetIamPolicy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public GetPolicyOptions Options { get; set; }
	}
	
	/// <summary>
	/// Encapsulates settings provided to GetIamPolicy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPolicyOptions
	{
		
		/// <summary>
		/// Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedPolicyVersion")]
		public System.Nullable<System.Int32> RequestedPolicyVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetQueryResultsResponse
	{
		
		/// <summary>
		/// Whether the query result was fetched from the query cache.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheHit")]
		public System.Nullable<System.Boolean> CacheHit { get; set; }
		
		/// <summary>
		/// [Output-only] The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorProto[] Errors { get; set; }
		
		/// <summary>
		/// A hash of this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobComplete")]
		public System.Nullable<System.Boolean> JobComplete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobReference")]
		public JobReference JobReference { get; set; }
		
		/// <summary>
		/// The resource type of the response.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#getQueryResultsResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#getQueryResultsResponse";
		
		/// <summary>
		/// [Output-only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numDmlAffectedRows")]
		public string NumDmlAffectedRows { get; set; }
		
		/// <summary>
		/// A token used for paging results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		/// <summary>
		/// An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above. Present only when the query completes successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public TableRow[] Rows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public TableSchema Schema { get; set; }
		
		/// <summary>
		/// The total number of bytes processed for this query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytesProcessed")]
		public string TotalBytesProcessed { get; set; }
		
		/// <summary>
		/// The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results. Present only when the query completes successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRows")]
		public string TotalRows { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobReference
	{
		
		/// <summary>
		/// [Required] The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// The geographic location of the job. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// [Required] The ID of the project containing this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableRow
	{
		
		/// <summary>
		/// Represents a single row in the result set, consisting of one or more fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f")]
		public TableCell[] F { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableCell
	{
		
		[System.Runtime.Serialization.DataMember(Name="v")]
		public object V { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceAccountResponse
	{
		
		/// <summary>
		/// The service account email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The resource type of the response.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#getServiceAccountResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#getServiceAccountResponse";
	}
	
	/// <summary>
	/// Global explanations containing the top most important features after training.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalExplanation
	{
		
		/// <summary>
		/// Class label for this set of global explanations. Will be empty/null for binary logistic and linear regression models. Sorted alphabetically in descending order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classLabel")]
		public string ClassLabel { get; set; }
		
		/// <summary>
		/// A list of the top global explanations. Sorted by absolute value of attribution in descending order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explanations")]
		public Explanation[] Explanations { get; set; }
	}
	
	/// <summary>
	/// Hyperparameter search spaces. These should be a subset of training_options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HparamSearchSpaces
	{
		
		/// <summary>
		/// Search space for string and enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationFn")]
		public StringHparamSearchSpace ActivationFn { get; set; }
		
		/// <summary>
		/// Search space for an int hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchSize")]
		public IntHparamSearchSpace BatchSize { get; set; }
		
		/// <summary>
		/// Search space for string and enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boosterType")]
		public StringHparamSearchSpace BoosterType { get; set; }
		
		/// <summary>
		/// Search space for a double hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colsampleBylevel")]
		public DoubleHparamSearchSpace ColsampleBylevel { get; set; }
		
		/// <summary>
		/// Search space for a double hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colsampleBynode")]
		public DoubleHparamSearchSpace ColsampleBynode { get; set; }
		
		/// <summary>
		/// Search space for a double hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colsampleBytree")]
		public DoubleHparamSearchSpace ColsampleBytree { get; set; }
		
		/// <summary>
		/// Search space for string and enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dartNormalizeType")]
		public StringHparamSearchSpace DartNormalizeType { get; set; }
		
		/// <summary>
		/// Search space for a double hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dropout")]
		public DoubleHparamSearchSpace Dropout { get; set; }
		
		/// <summary>
		/// Search space for int array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hiddenUnits")]
		public IntArrayHparamSearchSpace HiddenUnits { get; set; }
		
		/// <summary>
		/// Search space for a double hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="l1Reg")]
		public DoubleHparamSearchSpace L1Reg { get; set; }
		
		/// <summary>
		/// Search space for a double hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="l2Reg")]
		public DoubleHparamSearchSpace L2Reg { get; set; }
		
		/// <summary>
		/// Search space for a double hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="learnRate")]
		public DoubleHparamSearchSpace LearnRate { get; set; }
		
		/// <summary>
		/// Search space for an int hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTreeDepth")]
		public IntHparamSearchSpace MaxTreeDepth { get; set; }
		
		/// <summary>
		/// Search space for a double hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minSplitLoss")]
		public DoubleHparamSearchSpace MinSplitLoss { get; set; }
		
		/// <summary>
		/// Search space for an int hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minTreeChildWeight")]
		public IntHparamSearchSpace MinTreeChildWeight { get; set; }
		
		/// <summary>
		/// Search space for an int hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numClusters")]
		public IntHparamSearchSpace NumClusters { get; set; }
		
		/// <summary>
		/// Search space for an int hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numFactors")]
		public IntHparamSearchSpace NumFactors { get; set; }
		
		/// <summary>
		/// Search space for an int hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numParallelTree")]
		public IntHparamSearchSpace NumParallelTree { get; set; }
		
		/// <summary>
		/// Search space for string and enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optimizer")]
		public StringHparamSearchSpace Optimizer { get; set; }
		
		/// <summary>
		/// Search space for a double hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subsample")]
		public DoubleHparamSearchSpace Subsample { get; set; }
		
		/// <summary>
		/// Search space for string and enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treeMethod")]
		public StringHparamSearchSpace TreeMethod { get; set; }
		
		/// <summary>
		/// Search space for a double hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="walsAlpha")]
		public DoubleHparamSearchSpace WalsAlpha { get; set; }
	}
	
	/// <summary>
	/// Search space for string and enum.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StringHparamSearchSpace
	{
		
		/// <summary>
		/// Canididates for the string or enum parameter in lower case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidates")]
		public string[] Candidates { get; set; }
	}
	
	/// <summary>
	/// Search space for an int hyperparameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntHparamSearchSpace
	{
		
		/// <summary>
		/// Discrete candidates of an int hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidates")]
		public IntCandidates Candidates { get; set; }
		
		/// <summary>
		/// Range of an int hyperparameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public IntRange Range { get; set; }
	}
	
	/// <summary>
	/// Discrete candidates of an int hyperparameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntCandidates
	{
		
		/// <summary>
		/// Candidates for the int parameter in increasing order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidates")]
		public string[] Candidates { get; set; }
	}
	
	/// <summary>
	/// Range of an int hyperparameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntRange
	{
		
		/// <summary>
		/// Max value of the int parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max")]
		public string Max { get; set; }
		
		/// <summary>
		/// Min value of the int parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min")]
		public string Min { get; set; }
	}
	
	/// <summary>
	/// Search space for int array.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntArrayHparamSearchSpace
	{
		
		/// <summary>
		/// Candidates for the int array parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidates")]
		public IntArray[] Candidates { get; set; }
	}
	
	/// <summary>
	/// An array of int.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntArray
	{
		
		/// <summary>
		/// Elements in the int array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public string[] Elements { get; set; }
	}
	
	/// <summary>
	/// Training info of a trial in [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HparamTuningTrial
	{
		
		/// <summary>
		/// Ending time of the trial.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTimeMs")]
		public string EndTimeMs { get; set; }
		
		/// <summary>
		/// Error message for FAILED and INFEASIBLE trial.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Loss computed on the eval data at the end of trial.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evalLoss")]
		public System.Nullable<System.Double> EvalLoss { get; set; }
		
		/// <summary>
		/// Evaluation metrics of a model. These are either computed on all training data or just the eval data based on whether eval data was used during training. These are not present for imported models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaluationMetrics")]
		public EvaluationMetrics EvaluationMetrics { get; set; }
		
		/// <summary>
		/// Evaluation metrics of a model. These are either computed on all training data or just the eval data based on whether eval data was used during training. These are not present for imported models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hparamTuningEvaluationMetrics")]
		public EvaluationMetrics HparamTuningEvaluationMetrics { get; set; }
		
		/// <summary>
		/// Options used in model training.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hparams")]
		public TrainingOptions Hparams { get; set; }
		
		/// <summary>
		/// Starting time of the trial.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeMs")]
		public string StartTimeMs { get; set; }
		
		/// <summary>
		/// The status of the trial.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<HparamTuningTrialStatus> Status { get; set; }
		
		/// <summary>
		/// Loss computed on the training data at the end of trial.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainingLoss")]
		public System.Nullable<System.Double> TrainingLoss { get; set; }
		
		/// <summary>
		/// 1-based index of the trial.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trialId")]
		public string TrialId { get; set; }
	}
	
	/// <summary>
	/// Options used in model training.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrainingOptions
	{
		
		/// <summary>
		/// Activation function of the neural nets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationFn")]
		public string ActivationFn { get; set; }
		
		/// <summary>
		/// If true, detect step changes and make data adjustment in the input time series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adjustStepChanges")]
		public System.Nullable<System.Boolean> AdjustStepChanges { get; set; }
		
		/// <summary>
		/// Whether to use approximate feature contribution method in XGBoost model explanation for global explain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approxGlobalFeatureContrib")]
		public System.Nullable<System.Boolean> ApproxGlobalFeatureContrib { get; set; }
		
		/// <summary>
		/// Whether to enable auto ARIMA or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoArima")]
		public System.Nullable<System.Boolean> AutoArima { get; set; }
		
		/// <summary>
		/// The max value of the sum of non-seasonal p and q.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoArimaMaxOrder")]
		public string AutoArimaMaxOrder { get; set; }
		
		/// <summary>
		/// The min value of the sum of non-seasonal p and q.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoArimaMinOrder")]
		public string AutoArimaMinOrder { get; set; }
		
		/// <summary>
		/// Whether to calculate class weights automatically based on the popularity of each label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoClassWeights")]
		public System.Nullable<System.Boolean> AutoClassWeights { get; set; }
		
		/// <summary>
		/// Batch size for dnn models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchSize")]
		public string BatchSize { get; set; }
		
		/// <summary>
		/// Booster type for boosted tree models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boosterType")]
		public System.Nullable<TrainingOptionsBoosterType> BoosterType { get; set; }
		
		/// <summary>
		/// Budget in hours for AutoML training.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgetHours")]
		public System.Nullable<System.Double> BudgetHours { get; set; }
		
		/// <summary>
		/// Whether or not p-value test should be computed for this model. Only available for linear and logistic regression models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculatePValues")]
		public System.Nullable<System.Boolean> CalculatePValues { get; set; }
		
		/// <summary>
		/// Categorical feature encoding method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryEncodingMethod")]
		public System.Nullable<TrainingOptionsCategoryEncodingMethod> CategoryEncodingMethod { get; set; }
		
		/// <summary>
		/// If true, clean spikes and dips in the input time series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cleanSpikesAndDips")]
		public System.Nullable<System.Boolean> CleanSpikesAndDips { get; set; }
		
		/// <summary>
		/// Enums for color space, used for processing images in Object Table. See more details at https://www.tensorflow.org/io/tutorials/colorspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorSpace")]
		public System.Nullable<TrainingOptionsColorSpace> ColorSpace { get; set; }
		
		/// <summary>
		/// Subsample ratio of columns for each level for boosted tree models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colsampleBylevel")]
		public System.Nullable<System.Double> ColsampleBylevel { get; set; }
		
		/// <summary>
		/// Subsample ratio of columns for each node(split) for boosted tree models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colsampleBynode")]
		public System.Nullable<System.Double> ColsampleBynode { get; set; }
		
		/// <summary>
		/// Subsample ratio of columns when constructing each tree for boosted tree models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colsampleBytree")]
		public System.Nullable<System.Double> ColsampleBytree { get; set; }
		
		/// <summary>
		/// Type of normalization algorithm for boosted tree models using dart booster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dartNormalizeType")]
		public System.Nullable<TrainingOptionsDartNormalizeType> DartNormalizeType { get; set; }
		
		/// <summary>
		/// The data frequency of a time series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFrequency")]
		public System.Nullable<TrainingOptionsDataFrequency> DataFrequency { get; set; }
		
		/// <summary>
		/// The column to split data with. This column won't be used as a feature. 1. When data_split_method is CUSTOM, the corresponding column should be boolean. The rows with true value tag are eval data, and the false are training data. 2. When data_split_method is SEQ, the first DATA_SPLIT_EVAL_FRACTION rows (from smallest to largest) in the corresponding column are used as training data, and the rest are eval data. It respects the order in Orderable data types: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#data-type-properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSplitColumn")]
		public string DataSplitColumn { get; set; }
		
		/// <summary>
		/// The fraction of evaluation data over the whole input data. The rest of data will be used as training data. The format should be double. Accurate to two decimal places. Default value is 0.2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSplitEvalFraction")]
		public System.Nullable<System.Double> DataSplitEvalFraction { get; set; }
		
		/// <summary>
		/// The data split type for training and evaluation, e.g. RANDOM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSplitMethod")]
		public System.Nullable<TrainingOptionsDataSplitMethod> DataSplitMethod { get; set; }
		
		/// <summary>
		/// If true, perform decompose time series and save the results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decomposeTimeSeries")]
		public System.Nullable<System.Boolean> DecomposeTimeSeries { get; set; }
		
		/// <summary>
		/// Distance type for clustering models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distanceType")]
		public System.Nullable<TrainingOptionsDistanceType> DistanceType { get; set; }
		
		/// <summary>
		/// Dropout probability for dnn models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dropout")]
		public System.Nullable<System.Double> Dropout { get; set; }
		
		/// <summary>
		/// Whether to stop early when the loss doesn't improve significantly any more (compared to min_relative_progress). Used only for iterative training algorithms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earlyStop")]
		public System.Nullable<System.Boolean> EarlyStop { get; set; }
		
		/// <summary>
		/// If true, enable global explanation during training.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableGlobalExplain")]
		public System.Nullable<System.Boolean> EnableGlobalExplain { get; set; }
		
		/// <summary>
		/// Feedback type that specifies which algorithm to run for matrix factorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedbackType")]
		public System.Nullable<TrainingOptionsFeedbackType> FeedbackType { get; set; }
		
		/// <summary>
		/// Whether the model should include intercept during model training.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fitIntercept")]
		public System.Nullable<System.Boolean> FitIntercept { get; set; }
		
		/// <summary>
		/// Hidden units for dnn models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hiddenUnits")]
		public string[] HiddenUnits { get; set; }
		
		/// <summary>
		/// The geographical region based on which the holidays are considered in time series modeling. If a valid value is specified, then holiday effects modeling is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holidayRegion")]
		public System.Nullable<TrainingOptionsHolidayRegion> HolidayRegion { get; set; }
		
		/// <summary>
		/// A list of geographical regions that are used for time series modeling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holidayRegions")]
		public TrainingOptionsHolidayRegion[] HolidayRegions { get; set; }
		
		/// <summary>
		/// The number of periods ahead that need to be forecasted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizon")]
		public string Horizon { get; set; }
		
		/// <summary>
		/// The target evaluation metrics to optimize the hyperparameters for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hparamTuningObjectives")]
		public string[] HparamTuningObjectives { get; set; }
		
		/// <summary>
		/// Include drift when fitting an ARIMA model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeDrift")]
		public System.Nullable<System.Boolean> IncludeDrift { get; set; }
		
		/// <summary>
		/// Specifies the initial learning rate for the line search learn rate strategy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialLearnRate")]
		public System.Nullable<System.Double> InitialLearnRate { get; set; }
		
		/// <summary>
		/// Name of input label columns in training data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputLabelColumns")]
		public string[] InputLabelColumns { get; set; }
		
		/// <summary>
		/// Name of the instance weight column for training data. This column isn't be used as a feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceWeightColumn")]
		public string InstanceWeightColumn { get; set; }
		
		/// <summary>
		/// Number of integral steps for the integrated gradients explain method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integratedGradientsNumSteps")]
		public string IntegratedGradientsNumSteps { get; set; }
		
		/// <summary>
		/// Item column specified for matrix factorization models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemColumn")]
		public string ItemColumn { get; set; }
		
		/// <summary>
		/// The column used to provide the initial centroids for kmeans algorithm when kmeans_initialization_method is CUSTOM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmeansInitializationColumn")]
		public string KmeansInitializationColumn { get; set; }
		
		/// <summary>
		/// The method used to initialize the centroids for kmeans algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmeansInitializationMethod")]
		public System.Nullable<TrainingOptionsKmeansInitializationMethod> KmeansInitializationMethod { get; set; }
		
		/// <summary>
		/// L1 regularization coefficient to activations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="l1RegActivation")]
		public System.Nullable<System.Double> L1RegActivation { get; set; }
		
		/// <summary>
		/// L1 regularization coefficient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="l1Regularization")]
		public System.Nullable<System.Double> L1Regularization { get; set; }
		
		/// <summary>
		/// L2 regularization coefficient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="l2Regularization")]
		public System.Nullable<System.Double> L2Regularization { get; set; }
		
		/// <summary>
		/// Weights associated with each label class, for rebalancing the training data. Only applicable for classification models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelClassWeights")]
		public System.Collections.Generic.Dictionary<string, double> LabelClassWeights { get; set; }
		
		/// <summary>
		/// Learning rate in training. Used only for iterative training algorithms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="learnRate")]
		public System.Nullable<System.Double> LearnRate { get; set; }
		
		/// <summary>
		/// The strategy to determine learn rate for the current iteration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="learnRateStrategy")]
		public System.Nullable<TrainingOptionsLearnRateStrategy> LearnRateStrategy { get; set; }
		
		/// <summary>
		/// Type of loss function used during training run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lossType")]
		public System.Nullable<TrainingOptionsLossType> LossType { get; set; }
		
		/// <summary>
		/// The maximum number of iterations in training. Used only for iterative training algorithms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxIterations")]
		public string MaxIterations { get; set; }
		
		/// <summary>
		/// Maximum number of trials to run in parallel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxParallelTrials")]
		public string MaxParallelTrials { get; set; }
		
		/// <summary>
		/// The maximum number of time points in a time series that can be used in modeling the trend component of the time series. Don't use this option with the `timeSeriesLengthFraction` or `minTimeSeriesLength` options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTimeSeriesLength")]
		public string MaxTimeSeriesLength { get; set; }
		
		/// <summary>
		/// Maximum depth of a tree for boosted tree models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTreeDepth")]
		public string MaxTreeDepth { get; set; }
		
		/// <summary>
		/// When early_stop is true, stops training when accuracy improvement is less than 'min_relative_progress'. Used only for iterative training algorithms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minRelativeProgress")]
		public System.Nullable<System.Double> MinRelativeProgress { get; set; }
		
		/// <summary>
		/// Minimum split loss for boosted tree models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minSplitLoss")]
		public System.Nullable<System.Double> MinSplitLoss { get; set; }
		
		/// <summary>
		/// The minimum number of time points in a time series that are used in modeling the trend component of the time series. If you use this option you must also set the `timeSeriesLengthFraction` option. This training option ensures that enough time points are available when you use `timeSeriesLengthFraction` in trend modeling. This is particularly important when forecasting multiple time series in a single query using `timeSeriesIdColumn`. If the total number of time points is less than the `minTimeSeriesLength` value, then the query uses all available time points.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minTimeSeriesLength")]
		public string MinTimeSeriesLength { get; set; }
		
		/// <summary>
		/// Minimum sum of instance weight needed in a child for boosted tree models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minTreeChildWeight")]
		public string MinTreeChildWeight { get; set; }
		
		/// <summary>
		/// The model registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelRegistry")]
		public System.Nullable<TrainingOptionsModelRegistry> ModelRegistry { get; set; }
		
		/// <summary>
		/// Google Cloud Storage URI from which the model was imported. Only applicable for imported models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelUri")]
		public string ModelUri { get; set; }
		
		/// <summary>
		/// Arima order, can be used for both non-seasonal and seasonal parts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonSeasonalOrder")]
		public ArimaOrder NonSeasonalOrder { get; set; }
		
		/// <summary>
		/// Number of clusters for clustering models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numClusters")]
		public string NumClusters { get; set; }
		
		/// <summary>
		/// Num factors specified for matrix factorization models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numFactors")]
		public string NumFactors { get; set; }
		
		/// <summary>
		/// Number of parallel trees constructed during each iteration for boosted tree models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numParallelTree")]
		public string NumParallelTree { get; set; }
		
		/// <summary>
		/// Number of principal components to keep in the PCA model. Must be <= the number of features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numPrincipalComponents")]
		public string NumPrincipalComponents { get; set; }
		
		/// <summary>
		/// Number of trials to run this hyperparameter tuning job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numTrials")]
		public string NumTrials { get; set; }
		
		/// <summary>
		/// Optimization strategy for training linear regression models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optimizationStrategy")]
		public System.Nullable<TrainingOptionsOptimizationStrategy> OptimizationStrategy { get; set; }
		
		/// <summary>
		/// Optimizer used for training the neural nets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optimizer")]
		public string Optimizer { get; set; }
		
		/// <summary>
		/// The minimum ratio of cumulative explained variance that needs to be given by the PCA model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pcaExplainedVarianceRatio")]
		public System.Nullable<System.Double> PcaExplainedVarianceRatio { get; set; }
		
		/// <summary>
		/// The solver for PCA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pcaSolver")]
		public System.Nullable<TrainingOptionsPcaSolver> PcaSolver { get; set; }
		
		/// <summary>
		/// Number of paths for the sampled Shapley explain method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampledShapleyNumPaths")]
		public string SampledShapleyNumPaths { get; set; }
		
		/// <summary>
		/// If true, scale the feature values by dividing the feature standard deviation. Currently only apply to PCA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleFeatures")]
		public System.Nullable<System.Boolean> ScaleFeatures { get; set; }
		
		/// <summary>
		/// Whether to standardize numerical features. Default to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standardizeFeatures")]
		public System.Nullable<System.Boolean> StandardizeFeatures { get; set; }
		
		/// <summary>
		/// Subsample fraction of the training data to grow tree to prevent overfitting for boosted tree models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subsample")]
		public System.Nullable<System.Double> Subsample { get; set; }
		
		/// <summary>
		/// Based on the selected TF version, the corresponding docker image is used to train external models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tfVersion")]
		public string TfVersion { get; set; }
		
		/// <summary>
		/// Column to be designated as time series data for ARIMA model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeriesDataColumn")]
		public string TimeSeriesDataColumn { get; set; }
		
		/// <summary>
		/// The time series id column that was used during ARIMA model training.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeriesIdColumn")]
		public string TimeSeriesIdColumn { get; set; }
		
		/// <summary>
		/// The time series id columns that were used during ARIMA model training.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeriesIdColumns")]
		public string[] TimeSeriesIdColumns { get; set; }
		
		/// <summary>
		/// The fraction of the interpolated length of the time series that's used to model the time series trend component. All of the time points of the time series are used to model the non-trend component. This training option accelerates modeling training without sacrificing much forecasting accuracy. You can use this option with `minTimeSeriesLength` but not with `maxTimeSeriesLength`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeriesLengthFraction")]
		public System.Nullable<System.Double> TimeSeriesLengthFraction { get; set; }
		
		/// <summary>
		/// Column to be designated as time series timestamp for ARIMA model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeriesTimestampColumn")]
		public string TimeSeriesTimestampColumn { get; set; }
		
		/// <summary>
		/// Tree construction algorithm for boosted tree models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treeMethod")]
		public System.Nullable<TrainingOptionsTreeMethod> TreeMethod { get; set; }
		
		/// <summary>
		/// Smoothing window size for the trend component. When a positive value is specified, a center moving average smoothing is applied on the history trend. When the smoothing window is out of the boundary at the beginning or the end of the trend, the first element or the last element is padded to fill the smoothing window before the average is applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trendSmoothingWindowSize")]
		public string TrendSmoothingWindowSize { get; set; }
		
		/// <summary>
		/// User column specified for matrix factorization models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userColumn")]
		public string UserColumn { get; set; }
		
		/// <summary>
		/// The version aliases to apply in Vertex AI model registry. Always overwrite if the version aliases exists in a existing model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vertexAiModelVersionAliases")]
		public string[] VertexAiModelVersionAliases { get; set; }
		
		/// <summary>
		/// Hyperparameter for matrix factoration when implicit feedback type is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="walsAlpha")]
		public System.Nullable<System.Double> WalsAlpha { get; set; }
		
		/// <summary>
		/// Whether to train a model from the last checkpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warmStart")]
		public System.Nullable<System.Boolean> WarmStart { get; set; }
		
		/// <summary>
		/// User-selected XGBoost versions for training of XGBoost models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xgboostVersion")]
		public string XgboostVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsBoosterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOSTER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GBTREE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DART = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsCategoryEncodingMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCODING_METHOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_HOT_ENCODING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LABEL_ENCODING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUMMY_ENCODING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsColorSpace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLOR_SPACE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RGB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YIQ = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YUV = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRAYSCALE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsDartNormalizeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DART_NORMALIZE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TREE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOREST = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsDataFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_FREQUENCY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_FREQUENCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEARLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUARTERLY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURLY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PER_MINUTE = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsDataSplitMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SPLIT_METHOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RANDOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEQUENTIAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SPLIT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_SPLIT = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsDistanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISTANCE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUCLIDEAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COSINE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsFeedbackType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEEDBACK_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPLICIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLICIT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsHolidayRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOLIDAY_REGION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLOBAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAPAC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMEA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BR = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CH = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CS = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CZ = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DK = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZ = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EG = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FR = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GB = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GR = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HK = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HU = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IE = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IL = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IR = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JP = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LV = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MA = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MX = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MY = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NG = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NL = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NZ = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PE = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PH = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PK = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PL = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PT = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RO = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RS = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SA = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SE = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SG = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SI = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SK = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TH = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TR = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TW = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UA = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VE = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VN = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZA = 68,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsKmeansInitializationMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMEANS_INITIALIZATION_METHOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RANDOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMEANS_PLUS_PLUS = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsLearnRateStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEARN_RATE_STRATEGY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_SEARCH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSTANT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsLossType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOSS_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEAN_SQUARED_LOSS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEAN_LOG_LOSS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsModelRegistry
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODEL_REGISTRY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERTEX_AI = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsOptimizationStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIMIZATION_STRATEGY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATCH_GRADIENT_DESCENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL_EQUATION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsPcaSolver
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RANDOMIZED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrainingOptionsTreeMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TREE_METHOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXACT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIST = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HparamTuningTrialStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIAL_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFEASIBLE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED_EARLY = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexUnusedReason
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseTable")]
		public TableReference BaseTable { get; set; }
		
		/// <summary>
		/// [Output-only] Specifies the high-level reason for the scenario when no search index was used.
		/// </summary>
		[System.ComponentModel.DefaultValue("$(reason.code)")]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; } = "$(reason.code)";
		
		/// <summary>
		/// [Output-only] Specifies the name of the unused search index, if available.
		/// </summary>
		[System.ComponentModel.DefaultValue("$(reason.index_name)")]
		[System.Runtime.Serialization.DataMember(Name="indexName")]
		public string IndexName { get; set; } = "$(reason.index_name)";
		
		/// <summary>
		/// [Output-only] Free form human-readable reason for the scenario when no search index was used.
		/// </summary>
		[System.ComponentModel.DefaultValue("$(reason.message)")]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; } = "$(reason.message)";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IterationResult
	{
		
		/// <summary>
		/// Time taken to run the iteration in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationMs")]
		public string DurationMs { get; set; }
		
		/// <summary>
		/// Loss computed on the eval data at the end of iteration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evalLoss")]
		public System.Nullable<System.Double> EvalLoss { get; set; }
		
		/// <summary>
		/// Index of the iteration, 0 based.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Learn rate used for this iteration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="learnRate")]
		public System.Nullable<System.Double> LearnRate { get; set; }
		
		/// <summary>
		/// Loss computed on the training data at the end of iteration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainingLoss")]
		public System.Nullable<System.Double> TrainingLoss { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Job
	{
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public JobConfiguration Configuration { get; set; }
		
		/// <summary>
		/// [Output-only] A hash of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// [Output-only] Opaque ID field of the job
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// [Output-only] If set, it provides the reason why a Job was created. If not set, it should be treated as the default: REQUESTED. This feature is not yet available. Jobs will always be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobCreationReason")]
		public object JobCreationReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobReference")]
		public JobReference JobReference { get; set; }
		
		/// <summary>
		/// [Output-only] The type of the resource.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#job")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#job";
		
		/// <summary>
		/// [Output-only] A URL that can be used to access this resource again.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public JobStatistics Statistics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		/// <summary>
		/// [Output-only] Email address of the user who ran the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_email")]
		public string User_email { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="copy")]
		public JobConfigurationTableCopy Copy { get; set; }
		
		/// <summary>
		/// [Optional] If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dryRun")]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extract")]
		public JobConfigurationExtract Extract { get; set; }
		
		/// <summary>
		/// [Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobTimeoutMs")]
		public string JobTimeoutMs { get; set; }
		
		/// <summary>
		/// [Output-only] The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobType")]
		public string JobType { get; set; }
		
		/// <summary>
		/// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="load")]
		public JobConfigurationLoad Load { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public JobConfigurationQuery Query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobConfigurationTableCopy
	{
		
		/// <summary>
		/// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createDisposition")]
		public string CreateDisposition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationEncryptionConfiguration")]
		public EncryptionConfiguration DestinationEncryptionConfiguration { get; set; }
		
		/// <summary>
		/// [Optional] The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationExpirationTime")]
		public object DestinationExpirationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationTable")]
		public TableReference DestinationTable { get; set; }
		
		/// <summary>
		/// [Optional] Supported operation types in table copy job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public string OperationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceTable")]
		public TableReference SourceTable { get; set; }
		
		/// <summary>
		/// [Pick one] Source tables to copy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceTables")]
		public TableReference[] SourceTables { get; set; }
		
		/// <summary>
		/// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeDisposition")]
		public string WriteDisposition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobConfigurationExtract
	{
		
		/// <summary>
		/// [Optional] The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE and SNAPPY are only supported for Avro. Not applicable when extracting models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compression")]
		public string Compression { get; set; }
		
		/// <summary>
		/// [Optional] The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationFormat")]
		public string DestinationFormat { get; set; }
		
		/// <summary>
		/// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationUri")]
		public string DestinationUri { get; set; }
		
		/// <summary>
		/// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationUris")]
		public string[] DestinationUris { get; set; }
		
		/// <summary>
		/// [Optional] Delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldDelimiter")]
		public string FieldDelimiter { get; set; }
		
		/// <summary>
		/// [Optional] Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printHeader")]
		public System.Nullable<System.Boolean> PrintHeader { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceModel")]
		public ModelReference SourceModel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceTable")]
		public TableReference SourceTable { get; set; }
		
		/// <summary>
		/// [Optional] If destinationFormat is set to "AVRO", this flag indicates whether to enable extracting applicable column types (such as TIMESTAMP) to their corresponding AVRO logical types (timestamp-micros), instead of only using their raw types (avro-long). Not applicable when extracting models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useAvroLogicalTypes")]
		public System.Nullable<System.Boolean> UseAvroLogicalTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModelReference
	{
		
		/// <summary>
		/// Required. The ID of the dataset containing this model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		/// <summary>
		/// Required. The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelId")]
		public string ModelId { get; set; }
		
		/// <summary>
		/// Required. The ID of the project containing this model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobConfigurationLoad
	{
		
		/// <summary>
		/// [Optional] Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowJaggedRows")]
		public System.Nullable<System.Boolean> AllowJaggedRows { get; set; }
		
		/// <summary>
		/// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowQuotedNewlines")]
		public System.Nullable<System.Boolean> AllowQuotedNewlines { get; set; }
		
		/// <summary>
		/// [Optional] Indicates if we should automatically infer the options and schema for CSV and JSON sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autodetect")]
		public System.Nullable<System.Boolean> Autodetect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clustering")]
		public Clustering Clustering { get; set; }
		
		/// <summary>
		/// Connection properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionProperties")]
		public ConnectionProperty[] ConnectionProperties { get; set; }
		
		/// <summary>
		/// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createDisposition")]
		public string CreateDisposition { get; set; }
		
		/// <summary>
		/// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs the load job in non-session mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createSession")]
		public System.Nullable<System.Boolean> CreateSession { get; set; }
		
		/// <summary>
		/// [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decimalTargetTypes")]
		public string[] DecimalTargetTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationEncryptionConfiguration")]
		public EncryptionConfiguration DestinationEncryptionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationTable")]
		public TableReference DestinationTable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationTableProperties")]
		public DestinationTableProperties DestinationTableProperties { get; set; }
		
		/// <summary>
		/// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		/// <summary>
		/// [Optional] The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldDelimiter")]
		public string FieldDelimiter { get; set; }
		
		/// <summary>
		/// [Optional] Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSetSpecType")]
		public string FileSetSpecType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hivePartitioningOptions")]
		public HivePartitioningOptions HivePartitioningOptions { get; set; }
		
		/// <summary>
		/// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreUnknownValues")]
		public System.Nullable<System.Boolean> IgnoreUnknownValues { get; set; }
		
		/// <summary>
		/// [Optional] If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON. For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited GeoJSON: set to GEOJSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonExtension")]
		public string JsonExtension { get; set; }
		
		/// <summary>
		/// [Optional] The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV and JSON. The default value is 0, which requires that all records are valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxBadRecords")]
		public System.Nullable<System.Int32> MaxBadRecords { get; set; }
		
		/// <summary>
		/// [Optional] Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nullMarker")]
		public string NullMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parquetOptions")]
		public ParquetOptions ParquetOptions { get; set; }
		
		/// <summary>
		/// [Optional] Preserves the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') when loading from CSV. Only applicable to CSV, ignored for other formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preserveAsciiControlCharacters")]
		public System.Nullable<System.Boolean> PreserveAsciiControlCharacters { get; set; }
		
		/// <summary>
		/// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectionFields")]
		public string[] ProjectionFields { get; set; }
		
		/// <summary>
		/// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
		/// Pattern: .?
		/// </summary>
		[System.ComponentModel.DefaultValue("\"")]
		[System.Runtime.Serialization.DataMember(Name="quote")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".?")]
		public string Quote { get; set; } = "\"";
		
		[System.Runtime.Serialization.DataMember(Name="rangePartitioning")]
		public RangePartitioning RangePartitioning { get; set; }
		
		/// <summary>
		/// User provided referencing file with the expected reader schema, Available for the format: AVRO, PARQUET, ORC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceFileSchemaUri")]
		public string ReferenceFileSchemaUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public TableSchema Schema { get; set; }
		
		/// <summary>
		/// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaInline")]
		public string SchemaInline { get; set; }
		
		/// <summary>
		/// [Deprecated] The format of the schemaInline property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaInlineFormat")]
		public string SchemaInlineFormat { get; set; }
		
		/// <summary>
		/// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaUpdateOptions")]
		public string[] SchemaUpdateOptions { get; set; }
		
		/// <summary>
		/// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipLeadingRows")]
		public System.Nullable<System.Int32> SkipLeadingRows { get; set; }
		
		/// <summary>
		/// [Optional] The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceFormat")]
		public string SourceFormat { get; set; }
		
		/// <summary>
		/// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUris")]
		public string[] SourceUris { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timePartitioning")]
		public TimePartitioning TimePartitioning { get; set; }
		
		/// <summary>
		/// [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useAvroLogicalTypes")]
		public System.Nullable<System.Boolean> UseAvroLogicalTypes { get; set; }
		
		/// <summary>
		/// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeDisposition")]
		public string WriteDisposition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RangePartitioning
	{
		
		/// <summary>
		/// [TrustedTester] [Required] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// [TrustedTester] [Required] Defines the ranges for range partitioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public RangePartitioningRange Range { get; set; }
	}
	
	public class RangePartitioningRange
	{
		
		/// <summary>
		/// [TrustedTester] [Required] The end of range partitioning, exclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public string End { get; set; }
		
		/// <summary>
		/// [TrustedTester] [Required] The width of each interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public string Interval { get; set; }
		
		/// <summary>
		/// [TrustedTester] [Required] The start of range partitioning, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public string Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimePartitioning
	{
		
		/// <summary>
		/// [Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationMs")]
		public string ExpirationMs { get; set; }
		
		/// <summary>
		/// [Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either '_PARTITIONTIME' as TIMESTAMP type, or '_PARTITIONDATE' as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requirePartitionFilter")]
		public System.Nullable<System.Boolean> RequirePartitionFilter { get; set; }
		
		/// <summary>
		/// [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively. When the type is not specified, the default behavior is DAY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobConfigurationQuery
	{
		
		/// <summary>
		/// [Optional] If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowLargeResults")]
		public System.Nullable<System.Boolean> AllowLargeResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clustering")]
		public Clustering Clustering { get; set; }
		
		/// <summary>
		/// Connection properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionProperties")]
		public ConnectionProperty[] ConnectionProperties { get; set; }
		
		/// <summary>
		/// [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuous")]
		public System.Nullable<System.Boolean> Continuous { get; set; }
		
		/// <summary>
		/// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createDisposition")]
		public string CreateDisposition { get; set; }
		
		/// <summary>
		/// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createSession")]
		public System.Nullable<System.Boolean> CreateSession { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultDataset")]
		public DatasetReference DefaultDataset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationEncryptionConfiguration")]
		public EncryptionConfiguration DestinationEncryptionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationTable")]
		public TableReference DestinationTable { get; set; }
		
		/// <summary>
		/// [Optional] If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flattenResults")]
		public System.Nullable<System.Boolean> FlattenResults { get; set; }
		
		/// <summary>
		/// [Optional] Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge). If unspecified, this will be set to your project default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumBillingTier")]
		public System.Nullable<System.Int32> MaximumBillingTier { get; set; }
		
		/// <summary>
		/// [Optional] Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumBytesBilled")]
		public string MaximumBytesBilled { get; set; }
		
		/// <summary>
		/// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameterMode")]
		public string ParameterMode { get; set; }
		
		/// <summary>
		/// [Deprecated] This property is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preserveNulls")]
		public System.Nullable<System.Boolean> PreserveNulls { get; set; }
		
		/// <summary>
		/// [Optional] Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public string Priority { get; set; }
		
		/// <summary>
		/// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// Query parameters for standard SQL queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public QueryParameter[] QueryParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rangePartitioning")]
		public RangePartitioning RangePartitioning { get; set; }
		
		/// <summary>
		/// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaUpdateOptions")]
		public string[] SchemaUpdateOptions { get; set; }
		
		/// <summary>
		/// [Optional] If querying an external data source outside of BigQuery, describes the data format, location and other properties of the data source. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableDefinitions")]
		public System.Collections.Generic.Dictionary<string, ExternalDataConfiguration> TableDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timePartitioning")]
		public TimePartitioning TimePartitioning { get; set; }
		
		/// <summary>
		/// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useLegacySql")]
		public System.Nullable<System.Boolean> UseLegacySql { get; set; }
		
		/// <summary>
		/// [Optional] Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useQueryCache")]
		public System.Nullable<System.Boolean> UseQueryCache { get; set; }
		
		/// <summary>
		/// Describes user-defined function resources used in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userDefinedFunctionResources")]
		public UserDefinedFunctionResource[] UserDefinedFunctionResources { get; set; }
		
		/// <summary>
		/// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeDisposition")]
		public string WriteDisposition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryParameter
	{
		
		/// <summary>
		/// [Optional] If unset, this is a positional parameter. Otherwise, should be unique within a query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterType")]
		public QueryParameterType ParameterType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterValue")]
		public QueryParameterValue ParameterValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryParameterType
	{
		
		[System.Runtime.Serialization.DataMember(Name="arrayType")]
		public QueryParameterType ArrayType { get; set; }
		
		/// <summary>
		/// [Optional] The types of the fields of this struct, in order, if this is a struct.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structTypes")]
		public QueryParameterTypeStructTypes[] QueryParameterTypeStructTypes { get; set; }
		
		/// <summary>
		/// [Required] The top level type of this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class QueryParameterTypeStructTypes
	{
		
		/// <summary>
		/// [Optional] Human-oriented description of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// [Optional] The name of this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public QueryParameterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryParameterValue
	{
		
		/// <summary>
		/// [Optional] The array values, if this is an array type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrayValues")]
		public QueryParameterValue[] ArrayValues { get; set; }
		
		/// <summary>
		/// [Optional] The struct field values, in order of the struct type's declaration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structValues")]
		public System.Collections.Generic.Dictionary<string, QueryParameterValue> StructValues { get; set; }
		
		/// <summary>
		/// [Optional] The value of this value, if a simple scalar type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of Standard SQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserDefinedFunctionResource
	{
		
		/// <summary>
		/// [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inlineCode")]
		public string InlineCode { get; set; }
		
		/// <summary>
		/// [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobStatistics
	{
		
		/// <summary>
		/// [TrustedTester] [Output-only] Job progress (0.0 -> 1.0) for LOAD and EXTRACT jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionRatio")]
		public System.Nullable<System.Double> CompletionRatio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copy")]
		public JobStatistics5 Copy { get; set; }
		
		/// <summary>
		/// [Output-only] Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataMaskingStatistics")]
		public DataMaskingStatistics DataMaskingStatistics { get; set; }
		
		/// <summary>
		/// [Output-only] End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extract")]
		public JobStatistics4 Extract { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="load")]
		public JobStatistics3 Load { get; set; }
		
		/// <summary>
		/// [Output-only] Number of child jobs executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numChildJobs")]
		public string NumChildJobs { get; set; }
		
		/// <summary>
		/// [Output-only] If this is a child job, the id of the parent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentJobId")]
		public string ParentJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public JobStatistics2 Query { get; set; }
		
		/// <summary>
		/// [Output-only] Quotas which delayed this job's start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaDeferments")]
		public string[] QuotaDeferments { get; set; }
		
		/// <summary>
		/// [Output-only] Job resource usage breakdown by reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservationUsage")]
		public JobStatisticsReservationUsage[] JobStatisticsReservationUsage { get; set; }
		
		/// <summary>
		/// [Output-only] Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservation_id")]
		public string Reservation_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowLevelSecurityStatistics")]
		public RowLevelSecurityStatistics RowLevelSecurityStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptStatistics")]
		public ScriptStatistics ScriptStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionInfo")]
		public SessionInfo SessionInfo { get; set; }
		
		/// <summary>
		/// [Output-only] Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// [Output-only] [Deprecated] Use the bytes processed in the query statistics instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytesProcessed")]
		public string TotalBytesProcessed { get; set; }
		
		/// <summary>
		/// [Output-only] Slot-milliseconds for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSlotMs")]
		public string TotalSlotMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionInfo")]
		public TransactionInfo TransactionInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobStatistics5
	{
		
		/// <summary>
		/// [Output-only] Number of logical bytes copied to the destination table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copiedLogicalBytes")]
		public string CopiedLogicalBytes { get; set; }
		
		/// <summary>
		/// [Output-only] Number of rows copied to the destination table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copiedRows")]
		public string CopiedRows { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobStatistics4
	{
		
		/// <summary>
		/// [Output-only] Number of files per destination URI or URI pattern specified in the extract configuration. These values will be in the same order as the URIs specified in the 'destinationUris' field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationUriFileCounts")]
		public string[] DestinationUriFileCounts { get; set; }
		
		/// <summary>
		/// [Output-only] Number of user bytes extracted into the result. This is the byte count as computed by BigQuery for billing purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputBytes")]
		public string InputBytes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobStatistics3
	{
		
		/// <summary>
		/// [Output-only] The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="badRecords")]
		public string BadRecords { get; set; }
		
		/// <summary>
		/// [Output-only] Number of bytes of source data in a load job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputFileBytes")]
		public string InputFileBytes { get; set; }
		
		/// <summary>
		/// [Output-only] Number of source files in a load job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputFiles")]
		public string InputFiles { get; set; }
		
		/// <summary>
		/// [Output-only] Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputBytes")]
		public string OutputBytes { get; set; }
		
		/// <summary>
		/// [Output-only] Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputRows")]
		public string OutputRows { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobStatistics2
	{
		
		[System.Runtime.Serialization.DataMember(Name="biEngineStatistics")]
		public BiEngineStatistics BiEngineStatistics { get; set; }
		
		/// <summary>
		/// [Output only] Billing tier for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingTier")]
		public System.Nullable<System.Int32> BillingTier { get; set; }
		
		/// <summary>
		/// [Output only] Whether the query result was fetched from the query cache.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheHit")]
		public System.Nullable<System.Boolean> CacheHit { get; set; }
		
		/// <summary>
		/// [Output only] [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ddlAffectedRowAccessPolicyCount")]
		public string DdlAffectedRowAccessPolicyCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ddlDestinationTable")]
		public TableReference DdlDestinationTable { get; set; }
		
		/// <summary>
		/// The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): "CREATE": The query created the DDL target. "SKIP": No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. "REPLACE": The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. "DROP": The query deleted the DDL target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ddlOperationPerformed")]
		public string DdlOperationPerformed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ddlTargetDataset")]
		public DatasetReference DdlTargetDataset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ddlTargetRoutine")]
		public RoutineReference DdlTargetRoutine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ddlTargetRowAccessPolicy")]
		public RowAccessPolicyReference DdlTargetRowAccessPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ddlTargetTable")]
		public TableReference DdlTargetTable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dmlStats")]
		public DmlStatistics DmlStats { get; set; }
		
		/// <summary>
		/// [Output only] The original estimate of bytes processed for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedBytesProcessed")]
		public string EstimatedBytesProcessed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mlStatistics")]
		public MlStatistics MlStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelTraining")]
		public BigQueryModelTraining ModelTraining { get; set; }
		
		/// <summary>
		/// [Output only, Beta] Deprecated; do not use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelTrainingCurrentIteration")]
		public System.Nullable<System.Int32> ModelTrainingCurrentIteration { get; set; }
		
		/// <summary>
		/// [Output only, Beta] Deprecated; do not use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelTrainingExpectedTotalIteration")]
		public string ModelTrainingExpectedTotalIteration { get; set; }
		
		/// <summary>
		/// [Output only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numDmlAffectedRows")]
		public string NumDmlAffectedRows { get; set; }
		
		/// <summary>
		/// [Output only] Describes execution plan for the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryPlan")]
		public ExplainQueryStage[] QueryPlan { get; set; }
		
		/// <summary>
		/// [Output only] Referenced routines (persistent user-defined functions and stored procedures) for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referencedRoutines")]
		public RoutineReference[] ReferencedRoutines { get; set; }
		
		/// <summary>
		/// [Output only] Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referencedTables")]
		public TableReference[] ReferencedTables { get; set; }
		
		/// <summary>
		/// [Output only] Job resource usage breakdown by reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservationUsage")]
		public JobStatistics2ReservationUsage[] JobStatistics2ReservationUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public TableSchema Schema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchStatistics")]
		public SearchStatistics SearchStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sparkStatistics")]
		public SparkStatistics SparkStatistics { get; set; }
		
		/// <summary>
		/// The type of query statement, if valid. Possible values (new values might be added in the future): "SELECT": SELECT query. "INSERT": INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "UPDATE": UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "DELETE": DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "MERGE": MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "ALTER_TABLE": ALTER TABLE query. "ALTER_VIEW": ALTER VIEW query. "ASSERT": ASSERT condition AS 'description'. "CREATE_FUNCTION": CREATE FUNCTION query. "CREATE_MODEL": CREATE [OR REPLACE] MODEL ... AS SELECT ... . "CREATE_PROCEDURE": CREATE PROCEDURE query. "CREATE_TABLE": CREATE [OR REPLACE] TABLE without AS SELECT. "CREATE_TABLE_AS_SELECT": CREATE [OR REPLACE] TABLE ... AS SELECT ... . "CREATE_VIEW": CREATE [OR REPLACE] VIEW ... AS SELECT ... . "DROP_FUNCTION" : DROP FUNCTION query. "DROP_PROCEDURE": DROP PROCEDURE query. "DROP_TABLE": DROP TABLE query. "DROP_VIEW": DROP VIEW query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statementType")]
		public string StatementType { get; set; }
		
		/// <summary>
		/// [Output only] [Beta] Describes a timeline of job execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeline")]
		public QueryTimelineSample[] Timeline { get; set; }
		
		/// <summary>
		/// [Output only] Total bytes billed for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytesBilled")]
		public string TotalBytesBilled { get; set; }
		
		/// <summary>
		/// [Output only] Total bytes processed for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytesProcessed")]
		public string TotalBytesProcessed { get; set; }
		
		/// <summary>
		/// [Output only] For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytesProcessedAccuracy")]
		public string TotalBytesProcessedAccuracy { get; set; }
		
		/// <summary>
		/// [Output only] Total number of partitions processed from all partitioned tables referenced in the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPartitionsProcessed")]
		public string TotalPartitionsProcessed { get; set; }
		
		/// <summary>
		/// [Output only] Slot-milliseconds for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSlotMs")]
		public string TotalSlotMs { get; set; }
		
		/// <summary>
		/// [Output-only] Total bytes transferred for cross-cloud queries such as Cross Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferredBytes")]
		public string TransferredBytes { get; set; }
		
		/// <summary>
		/// Standard SQL only: list of undeclared query parameters detected during a dry run validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="undeclaredQueryParameters")]
		public QueryParameter[] UndeclaredQueryParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RowAccessPolicyReference
	{
		
		/// <summary>
		/// Required. The ID of the dataset containing this row access policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		/// <summary>
		/// Required. The ID of the row access policy. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyId")]
		public string PolicyId { get; set; }
		
		/// <summary>
		/// Required. The ID of the project containing this row access policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Required. The ID of the table containing this row access policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MlStatistics
	{
		
		/// <summary>
		/// Results for all completed iterations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iterationResults")]
		public IterationResult[] IterationResults { get; set; }
		
		/// <summary>
		/// Maximum number of iterations specified as max_iterations in the 'CREATE MODEL' query. The actual number of iterations may be less than this number due to early stop.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxIterations")]
		public string MaxIterations { get; set; }
	}
	
	public class JobStatistics2ReservationUsage
	{
		
		/// <summary>
		/// [Output only] Reservation name or "unreserved" for on-demand resources usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// [Output only] Slot-milliseconds the job spent in the given reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slotMs")]
		public string SlotMs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchStatistics
	{
		
		/// <summary>
		/// When index_usage_mode is UNUSED or PARTIALLY_USED, this field explains why index was not used in all or part of the search query. If index_usage_mode is FULLLY_USED, this field is not populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexUnusedReasons")]
		public IndexUnusedReason[] IndexUnusedReasons { get; set; }
		
		/// <summary>
		/// Specifies index usage mode for the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexUsageMode")]
		public string IndexUsageMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SparkStatistics
	{
		
		/// <summary>
		/// [Output-only] Endpoints generated for the Spark job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoints")]
		public System.Collections.Generic.Dictionary<string, string> Endpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loggingInfo")]
		public SparkLoggingInfo LoggingInfo { get; set; }
		
		/// <summary>
		/// [Output-only] Spark job id if a Spark job is created successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkJobId")]
		public string SparkJobId { get; set; }
		
		/// <summary>
		/// [Output-only] Location where the Spark job is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkJobLocation")]
		public string SparkJobLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SparkLoggingInfo
	{
		
		/// <summary>
		/// [Output-only] Project ID used for logging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// [Output-only] Resource type used for logging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryTimelineSample
	{
		
		/// <summary>
		/// Total number of units currently being processed by workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeUnits")]
		public string ActiveUnits { get; set; }
		
		/// <summary>
		/// Total parallel units of work completed by this query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completedUnits")]
		public string CompletedUnits { get; set; }
		
		/// <summary>
		/// Milliseconds elapsed since the start of query execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elapsedMs")]
		public string ElapsedMs { get; set; }
		
		/// <summary>
		/// Units of work that can be scheduled immediately. Providing additional slots for these units of work will speed up the query, provided no other query in the reservation needs additional slots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedRunnableUnits")]
		public string EstimatedRunnableUnits { get; set; }
		
		/// <summary>
		/// Total units of work remaining for the query. This number can be revised (increased or decreased) while the query is running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingUnits")]
		public string PendingUnits { get; set; }
		
		/// <summary>
		/// Cumulative slot-ms consumed by the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSlotMs")]
		public string TotalSlotMs { get; set; }
	}
	
	public class JobStatisticsReservationUsage
	{
		
		/// <summary>
		/// [Output-only] Reservation name or "unreserved" for on-demand resources usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// [Output-only] Slot-milliseconds the job spent in the given reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slotMs")]
		public string SlotMs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RowLevelSecurityStatistics
	{
		
		/// <summary>
		/// [Output-only] [Preview] Whether any accessed data was protected by row access policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowLevelSecurityApplied")]
		public System.Nullable<System.Boolean> RowLevelSecurityApplied { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScriptStatistics
	{
		
		/// <summary>
		/// [Output-only] Whether this child job was a statement or expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaluationKind")]
		public string EvaluationKind { get; set; }
		
		/// <summary>
		/// Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackFrames")]
		public ScriptStackFrame[] StackFrames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScriptStackFrame
	{
		
		/// <summary>
		/// [Output-only] One-based end column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endColumn")]
		public System.Nullable<System.Int32> EndColumn { get; set; }
		
		/// <summary>
		/// [Output-only] One-based end line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endLine")]
		public System.Nullable<System.Int32> EndLine { get; set; }
		
		/// <summary>
		/// [Output-only] Name of the active procedure, empty if in a top-level script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="procedureId")]
		public string ProcedureId { get; set; }
		
		/// <summary>
		/// [Output-only] One-based start column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startColumn")]
		public System.Nullable<System.Int32> StartColumn { get; set; }
		
		/// <summary>
		/// [Output-only] One-based start line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startLine")]
		public System.Nullable<System.Int32> StartLine { get; set; }
		
		/// <summary>
		/// [Output-only] Text of the current statement/expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SessionInfo
	{
		
		/// <summary>
		/// [Output-only] // [Preview] Id of the session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionInfo
	{
		
		/// <summary>
		/// [Output-only] // [Alpha] Id of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorResult")]
		public ErrorProto ErrorResult { get; set; }
		
		/// <summary>
		/// [Output-only] The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorProto[] Errors { get; set; }
		
		/// <summary>
		/// [Output-only] Running state of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobCancelResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
		
		/// <summary>
		/// The resource type of the response.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#jobCancelResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#jobCancelResponse";
	}
	
	/// <summary>
	/// Reason about why a Job was created from a [`jobs.query`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query) method when used with `JOB_CREATION_OPTIONAL` Job creation mode. For [`jobs.insert`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/insert) method calls it will always be `REQUESTED`. This feature is not yet available. Jobs will always be created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobCreationReason
	{
		
		/// <summary>
		/// Output only. Specifies the high level reason why a Job was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<JobCreationReasonCode> Code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobCreationReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUESTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONG_RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LARGE_RESULTS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobList
	{
		
		/// <summary>
		/// A hash of this page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// List of jobs that were requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public JobListJobs[] JobListJobs { get; set; }
		
		/// <summary>
		/// The resource type of the response.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#jobList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#jobList";
		
		/// <summary>
		/// A token to request the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	public class JobListJobs
	{
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public JobConfiguration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorResult")]
		public ErrorProto ErrorResult { get; set; }
		
		/// <summary>
		/// Unique opaque ID of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobReference")]
		public JobReference JobReference { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#job")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#job";
		
		/// <summary>
		/// Running state of the job. When the state is DONE, errorResult can be checked to determine whether the job succeeded or failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public JobStatistics Statistics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		/// <summary>
		/// [Full-projection-only] Email address of the user who ran the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_email")]
		public string User_email { get; set; }
	}
	
	/// <summary>
	/// Represents a single JSON object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JsonObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JsonValue
	{
	}
	
	/// <summary>
	/// Response format for a single page when listing BigQuery ML models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListModelsResponse
	{
		
		/// <summary>
		/// Models in the requested dataset. Only the following fields are populated: model_reference, model_type, creation_time, last_modified_time and labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="models")]
		public Model[] Models { get; set; }
		
		/// <summary>
		/// A token to request the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Model
	{
		
		/// <summary>
		/// The best trial_id across all training runs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bestTrialId")]
		public string BestTrialId { get; set; }
		
		/// <summary>
		/// Output only. The time when this model was created, in millisecs since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Output only. The default trial_id to use in TVFs when the trial_id is not passed in. For single-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the best trial ID. For multi-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the smallest trial ID among all Pareto optimal trials.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultTrialId")]
		public string DefaultTrialId { get; set; }
		
		/// <summary>
		/// Optional. A user-friendly description of this model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionConfiguration")]
		public EncryptionConfiguration EncryptionConfiguration { get; set; }
		
		/// <summary>
		/// Output only. A hash of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Optional. The time when this model expires, in milliseconds since the epoch. If not present, the model will persist indefinitely. Expired models will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public string ExpirationTime { get; set; }
		
		/// <summary>
		/// Output only. Input feature columns for the model inference. If the model is trained with TRANSFORM clause, these are the input of the TRANSFORM clause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureColumns")]
		public StandardSqlField[] FeatureColumns { get; set; }
		
		/// <summary>
		/// Optional. A descriptive name for this model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Hyperparameter search spaces. These should be a subset of training_options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hparamSearchSpaces")]
		public HparamSearchSpaces HparamSearchSpaces { get; set; }
		
		/// <summary>
		/// Output only. Trials of a [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) model sorted by trial_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hparamTrials")]
		public HparamTuningTrial[] HparamTrials { get; set; }
		
		/// <summary>
		/// Output only. Label columns that were used to train this model. The output of the model will have a "predicted_" prefix to these columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelColumns")]
		public StandardSqlField[] LabelColumns { get; set; }
		
		/// <summary>
		/// The labels associated with this model. You can use these to organize and group your models. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. The time when this model was last modified, in millisecs since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public string LastModifiedTime { get; set; }
		
		/// <summary>
		/// Output only. The geographic location where the model resides. This value is inherited from the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelReference")]
		public ModelReference ModelReference { get; set; }
		
		/// <summary>
		/// Output only. Type of the model resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelType")]
		public System.Nullable<ModelModelType> ModelType { get; set; }
		
		/// <summary>
		/// Output only. For single-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it only contains the best trial. For multi-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it contains all Pareto optimal trials sorted by trial_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optimalTrialIds")]
		public string[] OptimalTrialIds { get; set; }
		
		/// <summary>
		/// Remote Model Info
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteModelInfo")]
		public RemoteModelInfo RemoteModelInfo { get; set; }
		
		/// <summary>
		/// Information for all training runs in increasing order of start_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainingRuns")]
		public TrainingRun[] TrainingRuns { get; set; }
		
		/// <summary>
		/// Output only. This field will be populated if a TRANSFORM clause was used to train a model. TRANSFORM clause (if used) takes feature_columns as input and outputs transform_columns. transform_columns then are used to train the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformColumns")]
		public TransformColumn[] TransformColumns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ModelModelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODEL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINEAR_REGRESSION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGISTIC_REGRESSION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMEANS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATRIX_FACTORIZATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNN_CLASSIFIER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TENSORFLOW = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNN_REGRESSOR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XGBOOST = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOSTED_TREE_REGRESSOR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOSTED_TREE_CLASSIFIER = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARIMA = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOML_REGRESSOR = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOML_CLASSIFIER = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNN_LINEAR_COMBINED_CLASSIFIER = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNN_LINEAR_COMBINED_REGRESSOR = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOENCODER = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARIMA_PLUS = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARIMA_PLUS_XREG = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RANDOM_FOREST_REGRESSOR = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RANDOM_FOREST_CLASSIFIER = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TENSORFLOW_LITE = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONNX = 23,
	}
	
	/// <summary>
	/// Remote Model Info
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoteModelInfo
	{
		
		/// <summary>
		/// Output only. Fully qualified name of the user-provided connection object of the remote model. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connection")]
		public string Connection { get; set; }
		
		/// <summary>
		/// Output only. The endpoint for remote model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// Output only. Max number of rows in each batch sent to the remote service. If unset, the number of rows in each batch is set dynamically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxBatchingRows")]
		public string MaxBatchingRows { get; set; }
		
		/// <summary>
		/// Output only. The model version for LLM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteModelVersion")]
		public string RemoteModelVersion { get; set; }
		
		/// <summary>
		/// Output only. The remote service type for remote model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteServiceType")]
		public System.Nullable<RemoteModelInfoRemoteServiceType> RemoteServiceType { get; set; }
		
		/// <summary>
		/// Output only. The name of the speech recognizer to use for speech recognition. The expected format is `projects/{project}/locations/{location}/recognizers/{recognizer}`. Customers can specify this field at model creation. If not specified, a default recognizer `projects/{model project}/locations/global/recognizers/_` will be used. See more details at [recognizers](https://cloud.google.com/speech-to-text/v2/docs/reference/rest/v2/projects.locations.recognizers)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speechRecognizer")]
		public string SpeechRecognizer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RemoteModelInfoRemoteServiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_SERVICE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_AI_TRANSLATE_V3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_AI_VISION_V1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_AI_NATURAL_LANGUAGE_V1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_AI_SPEECH_TO_TEXT_V2 = 4,
	}
	
	/// <summary>
	/// Information about a single training query run for the model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrainingRun
	{
		
		/// <summary>
		/// Output only. Global explanation contains the explanation of top features on the class level. Applies to classification models only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classLevelGlobalExplanations")]
		public GlobalExplanation[] ClassLevelGlobalExplanations { get; set; }
		
		/// <summary>
		/// Data split result. This contains references to the training and evaluation data tables that were used to train the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSplitResult")]
		public DataSplitResult DataSplitResult { get; set; }
		
		/// <summary>
		/// Evaluation metrics of a model. These are either computed on all training data or just the eval data based on whether eval data was used during training. These are not present for imported models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaluationMetrics")]
		public EvaluationMetrics EvaluationMetrics { get; set; }
		
		/// <summary>
		/// Global explanations containing the top most important features after training.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelLevelGlobalExplanation")]
		public GlobalExplanation ModelLevelGlobalExplanation { get; set; }
		
		/// <summary>
		/// Output only. Output of each iteration run, results.size() <= max_iterations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public IterationResult[] Results { get; set; }
		
		/// <summary>
		/// Output only. The start time of this training run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Options used in model training.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainingOptions")]
		public TrainingOptions TrainingOptions { get; set; }
		
		/// <summary>
		/// Output only. The start time of this training run, in milliseconds since epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainingStartTime")]
		public string TrainingStartTime { get; set; }
		
		/// <summary>
		/// The model id in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vertexAiModelId")]
		public string VertexAiModelId { get; set; }
		
		/// <summary>
		/// Output only. The model version in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vertexAiModelVersion")]
		public string VertexAiModelVersion { get; set; }
	}
	
	/// <summary>
	/// Information about a single transform column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransformColumn
	{
		
		/// <summary>
		/// Output only. Name of the column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The SQL expression used in the column transform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformSql")]
		public string TransformSql { get; set; }
		
		/// <summary>
		/// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StandardSqlDataType Type { get; set; }
	}
	
	/// <summary>
	/// Describes the format of a single result page when listing routines.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRoutinesResponse
	{
		
		/// <summary>
		/// A token to request the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Routines in the requested dataset. Unless read_mask is set in the request, only the following fields are populated: etag, project_id, dataset_id, routine_id, routine_type, creation_time, last_modified_time, language, and remote_function_options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routines")]
		public Routine[] Routines { get; set; }
	}
	
	/// <summary>
	/// A user-defined function or a stored procedure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Routine
	{
		
		/// <summary>
		/// Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public Argument[] Arguments { get; set; }
		
		/// <summary>
		/// Output only. The time when this routine was created, in milliseconds since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Optional. If set to `DATA_MASKING`, the function is validated and made available as a masking function. For more information, see [Create custom masking routines](https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataGovernanceType")]
		public System.Nullable<RoutineDataGovernanceType> DataGovernanceType { get; set; }
		
		/// <summary>
		/// Required. The body of the routine. For functions, this is the expression in the AS clause. If language=SQL, it is the substring inside (but excluding) the parentheses. For example, for the function created with the following statement: `CREATE FUNCTION JoinLines(x string, y string) as (concat(x, "\n", y))` The definition_body is `concat(x, "\n", y)` (\n is not replaced with linebreak). If language=JAVASCRIPT, it is the evaluated string in the AS clause. For example, for the function created with the following statement: `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return "\n";\n'` The definition_body is `return "\n";\n` Note that both \n are replaced with linebreaks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definitionBody")]
		public string DefinitionBody { get; set; }
		
		/// <summary>
		/// Optional. The description of the routine, if defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. The determinism level of the JavaScript UDF, if defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="determinismLevel")]
		public System.Nullable<RoutineDeterminismLevel> DeterminismLevel { get; set; }
		
		/// <summary>
		/// Output only. A hash of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Optional. If language = "JAVASCRIPT", this field stores the path of the imported JAVASCRIPT libraries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importedLibraries")]
		public string[] ImportedLibraries { get; set; }
		
		/// <summary>
		/// Optional. Defaults to "SQL" if remote_function_options field is absent, not set otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public System.Nullable<RoutineLanguage> Language { get; set; }
		
		/// <summary>
		/// Output only. The time when this routine was last modified, in milliseconds since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public string LastModifiedTime { get; set; }
		
		/// <summary>
		/// Options for a remote user-defined function.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteFunctionOptions")]
		public RemoteFunctionOptions RemoteFunctionOptions { get; set; }
		
		/// <summary>
		/// A table type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnTableType")]
		public StandardSqlTableType ReturnTableType { get; set; }
		
		/// <summary>
		/// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnType")]
		public StandardSqlDataType ReturnType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routineReference")]
		public RoutineReference RoutineReference { get; set; }
		
		/// <summary>
		/// Required. The type of routine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routineType")]
		public System.Nullable<RoutineRoutineType> RoutineType { get; set; }
		
		/// <summary>
		/// Optional. The security mode of the routine, if defined. If not defined, the security mode is automatically determined from the routine's configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityMode")]
		public System.Nullable<RoutineSecurityMode> SecurityMode { get; set; }
		
		/// <summary>
		/// Options for a user-defined Spark routine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparkOptions")]
		public SparkOptions SparkOptions { get; set; }
		
		/// <summary>
		/// Optional. Can be set for procedures only. If true (default), the definition body will be validated in the creation and the updates of the procedure. For procedures with an argument of ANY TYPE, the definition body validtion is not supported at creation/update time, and thus this field must be set to false explicitly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strictMode")]
		public System.Nullable<System.Boolean> StrictMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RoutineDataGovernanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_GOVERNANCE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_MASKING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RoutineDeterminismLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETERMINISM_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETERMINISTIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_DETERMINISTIC = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RoutineLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANGUAGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAVASCRIPT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PYTHON = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAVA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCALA = 5,
	}
	
	/// <summary>
	/// Options for a remote user-defined function.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoteFunctionOptions
	{
		
		/// <summary>
		/// Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connection")]
		public string Connection { get; set; }
		
		/// <summary>
		/// Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxBatchingRows")]
		public string MaxBatchingRows { get; set; }
		
		/// <summary>
		/// User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userDefinedContext")]
		public System.Collections.Generic.Dictionary<string, string> UserDefinedContext { get; set; }
	}
	
	/// <summary>
	/// A table type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StandardSqlTableType
	{
		
		/// <summary>
		/// The columns in this table type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public StandardSqlField[] Columns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RoutineRoutineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTINE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCALAR_FUNCTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCEDURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLE_VALUED_FUNCTION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGGREGATE_FUNCTION = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RoutineSecurityMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFINER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVOKER = 2,
	}
	
	/// <summary>
	/// Options for a user-defined Spark routine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SparkOptions
	{
		
		/// <summary>
		/// Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archiveUris")]
		public string[] ArchiveUris { get; set; }
		
		/// <summary>
		/// Fully qualified name of the user-provided Spark connection object. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connection")]
		public string Connection { get; set; }
		
		/// <summary>
		/// Custom container image for the runtime environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerImage")]
		public string ContainerImage { get; set; }
		
		/// <summary>
		/// Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUris")]
		public string[] FileUris { get; set; }
		
		/// <summary>
		/// JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jarUris")]
		public string[] JarUris { get; set; }
		
		/// <summary>
		/// The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainClass")]
		public string MainClass { get; set; }
		
		/// <summary>
		/// The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainFileUri")]
		public string MainFileUri { get; set; }
		
		/// <summary>
		/// Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pyFileUris")]
		public string[] PyFileUris { get; set; }
		
		/// <summary>
		/// Runtime version. If not specified, the default runtime version is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeVersion")]
		public string RuntimeVersion { get; set; }
	}
	
	/// <summary>
	/// Response message for the ListRowAccessPolicies method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRowAccessPoliciesResponse
	{
		
		/// <summary>
		/// A token to request the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Row access policies on the requested table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowAccessPolicies")]
		public RowAccessPolicy[] RowAccessPolicies { get; set; }
	}
	
	/// <summary>
	/// Represents access on a subset of rows on the specified table, defined by its filter predicate. Access to the subset of rows is controlled by its IAM policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RowAccessPolicy
	{
		
		/// <summary>
		/// Output only. The time when this row access policy was created, in milliseconds since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Output only. A hash of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Required. A SQL boolean expression that represents the rows defined by this row access policy, similar to the boolean expression in a WHERE clause of a SELECT query on a table. References to other tables, routines, and temporary functions are not supported. Examples: region="EU" date_field = CAST('2019-9-27' as DATE) nullable_field is not NULL numeric_field BETWEEN 1.0 AND 5.0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterPredicate")]
		public string FilterPredicate { get; set; }
		
		/// <summary>
		/// Output only. The time when this row access policy was last modified, in milliseconds since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public string LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowAccessPolicyReference")]
		public RowAccessPolicyReference RowAccessPolicyReference { get; set; }
	}
	
	/// <summary>
	/// BigQuery-specific metadata about a location. This will be set on google.cloud.location.Location.metadata in Cloud Location API responses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocationMetadata
	{
		
		/// <summary>
		/// The legacy BigQuery location ID, e.g. “EU” for the “europe” location. This is for any API consumers that need the legacy “US” and “EU” locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legacyLocationId")]
		public string LegacyLocationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaterializedViewDefinition
	{
		
		/// <summary>
		/// [Optional] Allow non incremental materialized view definition. The default value is "false".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowNonIncrementalDefinition")]
		public System.Nullable<System.Boolean> AllowNonIncrementalDefinition { get; set; }
		
		/// <summary>
		/// [Optional] [TrustedTester] Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableRefresh")]
		public System.Nullable<System.Boolean> EnableRefresh { get; set; }
		
		/// <summary>
		/// [Output-only] [TrustedTester] The time when this materialized view was last modified, in milliseconds since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRefreshTime")]
		public string LastRefreshTime { get; set; }
		
		/// <summary>
		/// [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxStaleness")]
		public string MaxStaleness { get; set; }
		
		/// <summary>
		/// [Required] A query whose result is persisted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// [Optional] [TrustedTester] The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshIntervalMs")]
		public string RefreshIntervalMs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModelDefinition
	{
		
		/// <summary>
		/// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelOptions")]
		public ModelDefinitionModelOptions ModelOptions { get; set; }
		
		/// <summary>
		/// [Output-only, Beta] Information about ml training runs, each training run comprises of multiple iterations and there may be multiple training runs for the model if warm start is used or if a user decides to continue a previously cancelled query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainingRuns")]
		public BqmlTrainingRun[] TrainingRuns { get; set; }
	}
	
	public class ModelDefinitionModelOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lossType")]
		public string LossType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelType")]
		public string ModelType { get; set; }
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Policy
	{
		
		/// <summary>
		/// Specifies cloud audit logging configuration for this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditConfigs")]
		public AuditConfig[] AuditConfigs { get; set; }
		
		/// <summary>
		/// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Principal component infos, used only for eigen decomposition based models, e.g., PCA. Ordered by explained_variance in the descending order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrincipalComponentInfo
	{
		
		/// <summary>
		/// The explained_variance is pre-ordered in the descending order to compute the cumulative explained variance ratio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulativeExplainedVarianceRatio")]
		public System.Nullable<System.Double> CumulativeExplainedVarianceRatio { get; set; }
		
		/// <summary>
		/// Explained variance by this principal component, which is simply the eigenvalue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explainedVariance")]
		public System.Nullable<System.Double> ExplainedVariance { get; set; }
		
		/// <summary>
		/// Explained_variance over the total explained variance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explainedVarianceRatio")]
		public System.Nullable<System.Double> ExplainedVarianceRatio { get; set; }
		
		/// <summary>
		/// Id of the principal component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalComponentId")]
		public string PrincipalComponentId { get; set; }
	}
	
	/// <summary>
	/// Represents privacy policy that contains the privacy requirements specified by the data owner. Currently, this is only supported on views.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrivacyPolicy
	{
		
		/// <summary>
		/// Represents privacy policy associated with "aggregation threshold" method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationThresholdPolicy")]
		public AggregationThresholdPolicy AggregationThresholdPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectList
	{
		
		/// <summary>
		/// A hash of the page of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The type of list.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#projectList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#projectList";
		
		/// <summary>
		/// A token to request the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Projects to which you have at least READ access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public ProjectListProjects[] ProjectListProjects { get; set; }
		
		/// <summary>
		/// The total number of projects in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public System.Nullable<System.Int32> TotalItems { get; set; }
	}
	
	public class ProjectListProjects
	{
		
		/// <summary>
		/// A descriptive name for this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// An opaque ID of this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#project")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#project";
		
		/// <summary>
		/// The numeric ID of this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numericId")]
		public string NumericId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectReference")]
		public ProjectReference ProjectReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectReference
	{
		
		/// <summary>
		/// [Required] ID of the project. Can be either the numeric ID or the assigned ID of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryRequest
	{
		
		/// <summary>
		/// Connection properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionProperties")]
		public ConnectionProperty[] ConnectionProperties { get; set; }
		
		/// <summary>
		/// [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuous")]
		public System.Nullable<System.Boolean> Continuous { get; set; }
		
		/// <summary>
		/// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createSession")]
		public System.Nullable<System.Boolean> CreateSession { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultDataset")]
		public DatasetReference DefaultDataset { get; set; }
		
		/// <summary>
		/// [Optional] If set to true, BigQuery doesn't run the job. Instead, if the query is valid, BigQuery returns statistics about the job such as how many bytes would be processed. If the query is invalid, an error returns. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dryRun")]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Optional. If not set, jobs are always required. If set, the query request will follow the behavior described JobCreationMode. This feature is not yet available. Jobs will always be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobCreationMode")]
		public string JobCreationMode { get; set; }
		
		/// <summary>
		/// The resource type of the request.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#queryRequest")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#queryRequest";
		
		/// <summary>
		/// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The geographic location where the job should run. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// [Optional] The maximum number of rows of data to return per page of results. Setting this flag to a small value such as 1000 and then paging through results might improve reliability when the query result set is large. In addition to this limit, responses are also limited to 10 MB. By default, there is no maximum row count, and only the byte limit applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.UInt32> MaxResults { get; set; }
		
		/// <summary>
		/// [Optional] Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumBytesBilled")]
		public string MaximumBytesBilled { get; set; }
		
		/// <summary>
		/// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameterMode")]
		public string ParameterMode { get; set; }
		
		/// <summary>
		/// [Deprecated] This property is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preserveNulls")]
		public System.Nullable<System.Boolean> PreserveNulls { get; set; }
		
		/// <summary>
		/// [Required] A query string, following the BigQuery query syntax, of the query to execute. Example: "SELECT count(f1) FROM [myProjectId:myDatasetId.myTableId]".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// Query parameters for Standard SQL queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public QueryParameter[] QueryParameters { get; set; }
		
		/// <summary>
		/// A unique user provided identifier to ensure idempotent behavior for queries. Note that this is different from the job_id. It has the following properties: 1. It is case-sensitive, limited to up to 36 ASCII characters. A UUID is recommended. 2. Read only queries can ignore this token since they are nullipotent by definition. 3. For the purposes of idempotency ensured by the request_id, a request is considered duplicate of another only if they have the same request_id and are actually duplicates. When determining whether a request is a duplicate of the previous request, all parameters in the request that may affect the behavior are considered. For example, query, connection_properties, query_parameters, use_legacy_sql are parameters that affect the result and are considered when determining whether a request is a duplicate, but properties like timeout_ms don't affect the result and are thus not considered. Dry run query requests are never considered duplicate of another request. 4. When a duplicate mutating query request is detected, it returns: a. the results of the mutation if it completes successfully within the timeout. b. the running operation if it is still in progress at the end of the timeout. 5. Its lifetime is limited to 15 minutes. In other words, if two requests are sent with the same request_id, but more than 15 minutes apart, idempotency is not guaranteed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// [Optional] How long to wait for the query to complete, in milliseconds, before the request times out and returns. Note that this is only a timeout for the request, not the query. If the query takes longer to run than the timeout value, the call returns without any results and with the 'jobComplete' flag set to false. You can call GetQueryResults() to wait for the query to complete and read the results. The default value is 10000 milliseconds (10 seconds).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutMs")]
		public System.Nullable<System.UInt32> TimeoutMs { get; set; }
		
		/// <summary>
		/// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useLegacySql")]
		public System.Nullable<System.Boolean> UseLegacySql { get; set; }
		
		/// <summary>
		/// [Optional] Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. The default value is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useQueryCache")]
		public System.Nullable<System.Boolean> UseQueryCache { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryResponse
	{
		
		/// <summary>
		/// Whether the query result was fetched from the query cache.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheHit")]
		public System.Nullable<System.Boolean> CacheHit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dmlStats")]
		public DmlStatistics DmlStats { get; set; }
		
		/// <summary>
		/// [Output-only] The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorProto[] Errors { get; set; }
		
		/// <summary>
		/// Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobComplete")]
		public System.Nullable<System.Boolean> JobComplete { get; set; }
		
		/// <summary>
		/// Optional. Only relevant when a job_reference is present in the response. If job_reference is not present it will always be unset. When job_reference is present, this field should be interpreted as follows: If set, it will provide the reason of why a Job was created. If not set, it should be treated as the default: REQUESTED. This feature is not yet available. Jobs will always be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobCreationReason")]
		public object JobCreationReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobReference")]
		public JobReference JobReference { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#queryResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#queryResponse";
		
		/// <summary>
		/// [Output-only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numDmlAffectedRows")]
		public string NumDmlAffectedRows { get; set; }
		
		/// <summary>
		/// A token used for paging results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		/// <summary>
		/// Query ID for the completed query. This ID will be auto-generated. This field is not yet available and it is currently not guaranteed to be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryId")]
		public string QueryId { get; set; }
		
		/// <summary>
		/// An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public TableRow[] Rows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public TableSchema Schema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionInfo")]
		public SessionInfo SessionInfo { get; set; }
		
		/// <summary>
		/// The total number of bytes processed for this query. If this query was a dry run, this is the number of bytes that would be processed if the query were run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytesProcessed")]
		public string TotalBytesProcessed { get; set; }
		
		/// <summary>
		/// The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRows")]
		public string TotalRows { get; set; }
	}
	
	/// <summary>
	/// Request message for `SetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
		
		/// <summary>
		/// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SnapshotDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseTableReference")]
		public TableReference BaseTableReference { get; set; }
		
		/// <summary>
		/// [Required] The time at which the base table was snapshot. This value is reported in the JSON response using RFC3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotTime")]
		public System.Nullable<System.DateTimeOffset> SnapshotTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Streamingbuffer
	{
		
		/// <summary>
		/// [Output-only] A lower-bound estimate of the number of bytes currently in the streaming buffer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedBytes")]
		public string EstimatedBytes { get; set; }
		
		/// <summary>
		/// [Output-only] A lower-bound estimate of the number of rows currently in the streaming buffer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedRows")]
		public string EstimatedRows { get; set; }
		
		/// <summary>
		/// [Output-only] Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldestEntryTime")]
		public string OldestEntryTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Table
	{
		
		[System.Runtime.Serialization.DataMember(Name="biglakeConfiguration")]
		public BigLakeConfiguration BiglakeConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cloneDefinition")]
		public CloneDefinition CloneDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clustering")]
		public Clustering Clustering { get; set; }
		
		/// <summary>
		/// [Output-only] The time when this table was created, in milliseconds since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// [Output-only] The default collation of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultCollation")]
		public string DefaultCollation { get; set; }
		
		/// <summary>
		/// [Output-only] The default rounding mode of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultRoundingMode")]
		public string DefaultRoundingMode { get; set; }
		
		/// <summary>
		/// [Optional] A user-friendly description of this table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionConfiguration")]
		public EncryptionConfiguration EncryptionConfiguration { get; set; }
		
		/// <summary>
		/// [Output-only] A hash of the table metadata. Used to ensure there were no concurrent modifications to the resource when attempting an update. Not guaranteed to change when the table contents or the fields numRows, numBytes, numLongTermBytes or lastModifiedTime change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// [Optional] The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public string ExpirationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalDataConfiguration")]
		public ExternalDataConfiguration ExternalDataConfiguration { get; set; }
		
		/// <summary>
		/// [Optional] A descriptive name for this table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// [Output-only] An opaque ID uniquely identifying the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// [Output-only] The type of the resource.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#table")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#table";
		
		/// <summary>
		/// The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// [Output-only] The time when this table was last modified, in milliseconds since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public string LastModifiedTime { get; set; }
		
		/// <summary>
		/// [Output-only] The geographic location where the table resides. This value is inherited from the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="materializedView")]
		public MaterializedViewDefinition MaterializedView { get; set; }
		
		/// <summary>
		/// [Optional] Max staleness of data that could be returned when table or materialized view is queried (formatted as Google SQL Interval type).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxStaleness")]
		public string MaxStaleness { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public ModelDefinition Model { get; set; }
		
		/// <summary>
		/// [Output-only] Number of logical bytes that are less than 90 days old.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numActiveLogicalBytes")]
		public string NumActiveLogicalBytes { get; set; }
		
		/// <summary>
		/// [Output-only] Number of physical bytes less than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numActivePhysicalBytes")]
		public string NumActivePhysicalBytes { get; set; }
		
		/// <summary>
		/// [Output-only] The size of this table in bytes, excluding any data in the streaming buffer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numBytes")]
		public string NumBytes { get; set; }
		
		/// <summary>
		/// [Output-only] The number of bytes in the table that are considered "long-term storage".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numLongTermBytes")]
		public string NumLongTermBytes { get; set; }
		
		/// <summary>
		/// [Output-only] Number of logical bytes that are more than 90 days old.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numLongTermLogicalBytes")]
		public string NumLongTermLogicalBytes { get; set; }
		
		/// <summary>
		/// [Output-only] Number of physical bytes more than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numLongTermPhysicalBytes")]
		public string NumLongTermPhysicalBytes { get; set; }
		
		/// <summary>
		/// [Output-only] The number of partitions present in the table or materialized view. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numPartitions")]
		public string NumPartitions { get; set; }
		
		/// <summary>
		/// [Output-only] [TrustedTester] The physical size of this table in bytes, excluding any data in the streaming buffer. This includes compression and storage used for time travel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numPhysicalBytes")]
		public string NumPhysicalBytes { get; set; }
		
		/// <summary>
		/// [Output-only] The number of rows of data in this table, excluding any data in the streaming buffer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numRows")]
		public string NumRows { get; set; }
		
		/// <summary>
		/// [Output-only] Number of physical bytes used by time travel storage (deleted or changed data). This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numTimeTravelPhysicalBytes")]
		public string NumTimeTravelPhysicalBytes { get; set; }
		
		/// <summary>
		/// [Output-only] Total number of logical bytes in the table or materialized view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numTotalLogicalBytes")]
		public string NumTotalLogicalBytes { get; set; }
		
		/// <summary>
		/// [Output-only] The physical size of this table in bytes. This also includes storage used for time travel. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numTotalPhysicalBytes")]
		public string NumTotalPhysicalBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rangePartitioning")]
		public RangePartitioning RangePartitioning { get; set; }
		
		/// <summary>
		/// [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirePartitionFilter")]
		public System.Nullable<System.Boolean> RequirePartitionFilter { get; set; }
		
		/// <summary>
		/// [Optional] The tags associated with this table. Tag keys are globally unique. See additional information on [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions). An object containing a list of "key": value pairs. The key is the namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is parent id. The value is the friendly short name of the tag value, e.g. "production".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceTags")]
		public System.Collections.Generic.Dictionary<string, string> ResourceTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public TableSchema Schema { get; set; }
		
		/// <summary>
		/// [Output-only] A URL that can be used to access this resource again.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snapshotDefinition")]
		public SnapshotDefinition SnapshotDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamingBuffer")]
		public Streamingbuffer StreamingBuffer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableConstraints")]
		public TableConstraints TableConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableReference")]
		public TableReference TableReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timePartitioning")]
		public TimePartitioning TimePartitioning { get; set; }
		
		/// <summary>
		/// [Output-only] Describes the table type. The following values are supported: TABLE: A normal BigQuery table. VIEW: A virtual table defined by a SQL query. SNAPSHOT: An immutable, read-only table that is a copy of another table. [TrustedTester] MATERIALIZED_VIEW: SQL query whose result is persisted. EXTERNAL: A table that references data stored in an external storage system, such as Google Cloud Storage. The default value is TABLE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="view")]
		public ViewDefinition View { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableConstraints
	{
		
		/// <summary>
		/// [Optional] The foreign keys of the tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foreignKeys")]
		public TableConstraintsForeignKeys[] TableConstraintsForeignKeys { get; set; }
		
		/// <summary>
		/// [Optional] The primary key of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryKey")]
		public TableConstraintsPrimaryKey PrimaryKey { get; set; }
	}
	
	public class TableConstraintsForeignKeys
	{
		
		[System.Runtime.Serialization.DataMember(Name="columnReferences")]
		public TableConstraintsForeignKeysColumnReferences[] TableConstraintsForeignKeysColumnReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referencedTable")]
		public TableConstraintsForeignKeysReferencedTable ReferencedTable { get; set; }
	}
	
	public class TableConstraintsForeignKeysColumnReferences
	{
		
		[System.Runtime.Serialization.DataMember(Name="referencedColumn")]
		public string ReferencedColumn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referencingColumn")]
		public string ReferencingColumn { get; set; }
	}
	
	public class TableConstraintsForeignKeysReferencedTable
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
	}
	
	public class TableConstraintsPrimaryKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public string[] Columns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ViewDefinition
	{
		
		/// <summary>
		/// [Required] A query that BigQuery executes when the view is referenced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set using BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useExplicitColumnNames")]
		public System.Nullable<System.Boolean> UseExplicitColumnNames { get; set; }
		
		/// <summary>
		/// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useLegacySql")]
		public System.Nullable<System.Boolean> UseLegacySql { get; set; }
		
		/// <summary>
		/// Describes user-defined function resources used in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userDefinedFunctionResources")]
		public UserDefinedFunctionResource[] UserDefinedFunctionResources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableDataInsertAllRequest
	{
		
		/// <summary>
		/// [Optional] Accept rows that contain values that do not match the schema. The unknown values are ignored. Default is false, which treats unknown values as errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreUnknownValues")]
		public System.Nullable<System.Boolean> IgnoreUnknownValues { get; set; }
		
		/// <summary>
		/// The resource type of the response.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#tableDataInsertAllRequest")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#tableDataInsertAllRequest";
		
		/// <summary>
		/// The rows to insert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public TableDataInsertAllRequestRows[] TableDataInsertAllRequestRows { get; set; }
		
		/// <summary>
		/// [Optional] Insert all valid rows of a request, even if invalid rows exist. The default value is false, which causes the entire request to fail if any invalid rows exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipInvalidRows")]
		public System.Nullable<System.Boolean> SkipInvalidRows { get; set; }
		
		/// <summary>
		/// If specified, treats the destination table as a base template, and inserts the rows into an instance table named "{destination}{templateSuffix}". BigQuery will manage creation of the instance table, using the schema of the base template table. See https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables for considerations when working with templates tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateSuffix")]
		public string TemplateSuffix { get; set; }
	}
	
	public class TableDataInsertAllRequestRows
	{
		
		/// <summary>
		/// [Optional] A unique ID for each row. BigQuery uses this property to detect duplicate insertion requests on a best-effort basis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertId")]
		public string InsertId { get; set; }
		
		/// <summary>
		/// Represents a single JSON object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="json")]
		public JsonObject Json { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableDataInsertAllResponse
	{
		
		/// <summary>
		/// An array of errors for rows that were not inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertErrors")]
		public TableDataInsertAllResponseInsertErrors[] TableDataInsertAllResponseInsertErrors { get; set; }
		
		/// <summary>
		/// The resource type of the response.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#tableDataInsertAllResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#tableDataInsertAllResponse";
	}
	
	public class TableDataInsertAllResponseInsertErrors
	{
		
		/// <summary>
		/// Error information for the row indicated by the index property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorProto[] Errors { get; set; }
		
		/// <summary>
		/// The index of the row that error applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.UInt32> Index { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableDataList
	{
		
		/// <summary>
		/// A hash of this page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The resource type of the response.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#tableDataList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#tableDataList";
		
		/// <summary>
		/// A token used for paging results. Providing this token instead of the startIndex parameter can help you retrieve stable results when an underlying table is changing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		/// <summary>
		/// Rows of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public TableRow[] Rows { get; set; }
		
		/// <summary>
		/// The total number of rows in the complete table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRows")]
		public string TotalRows { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableList
	{
		
		/// <summary>
		/// A hash of this page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The type of list.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#tableList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#tableList";
		
		/// <summary>
		/// A token to request the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Tables in the requested dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tables")]
		public TableListTables[] TableListTables { get; set; }
		
		/// <summary>
		/// The total number of tables in the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public System.Nullable<System.Int32> TotalItems { get; set; }
	}
	
	public class TableListTables
	{
		
		[System.Runtime.Serialization.DataMember(Name="clustering")]
		public Clustering Clustering { get; set; }
		
		/// <summary>
		/// The time when this table was created, in milliseconds since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// [Optional] The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public string ExpirationTime { get; set; }
		
		/// <summary>
		/// The user-friendly name for this table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// An opaque ID of the table
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("bigquery#table")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "bigquery#table";
		
		/// <summary>
		/// The labels associated with this table. You can use these to organize and group your tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rangePartitioning")]
		public RangePartitioning RangePartitioning { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableReference")]
		public TableReference TableReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timePartitioning")]
		public TimePartitioning TimePartitioning { get; set; }
		
		/// <summary>
		/// The type of table. Possible values are: TABLE, VIEW.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Additional details for a view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="view")]
		public TableListTablesView View { get; set; }
	}
	
	public class TableListTablesView
	{
		
		/// <summary>
		/// True if view is defined in legacy SQL dialect, false if in standard SQL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useLegacySql")]
		public System.Nullable<System.Boolean> UseLegacySql { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Statistics for a vector search query. Populated as part of JobStatistics2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VectorSearchStatistics
	{
		
		/// <summary>
		/// When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains why indexes were not used in all or part of the vector search query. If `indexUsageMode` is `FULLY_USED`, this field is not populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexUnusedReasons")]
		public IndexUnusedReason[] IndexUnusedReasons { get; set; }
		
		/// <summary>
		/// Specifies the index usage mode for the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexUsageMode")]
		public System.Nullable<VectorSearchStatisticsIndexUsageMode> IndexUsageMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VectorSearchStatisticsIndexUsageMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INDEX_USAGE_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNUSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIALLY_USED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULLY_USED = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all projects to which you have been granted any project role.
		/// Bigquery_projects_list projects
		/// </summary>
		/// <param name="maxResults">Maximum number of results to return</param>
		/// <param name="pageToken">Page token, returned by a previous call, to request the next page of results</param>
		/// <returns>Successful response</returns>
		public async Task<ProjectList> Bigquery_projects_listAsync(int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects?maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProjectList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all datasets in the specified project to which you have been granted the READER dataset role.
		/// Bigquery_datasets_list projects/{projectId}/datasets
		/// </summary>
		/// <param name="projectId">Project ID of the datasets to be listed</param>
		/// <param name="all">Whether to list all datasets, including hidden ones</param>
		/// <param name="filter">An expression for filtering the results of the request by label. The syntax is "labels.<name>[:<value>]". Multiple filters can be ANDed together by connecting with a space. Example: "labels.department:receiving labels.active". See Filtering datasets using labels for details.</param>
		/// <param name="maxResults">The maximum number of results to return</param>
		/// <param name="pageToken">Page token, returned by a previous call, to request the next page of results</param>
		/// <returns>Successful response</returns>
		public async Task<DatasetList> Bigquery_datasets_listAsync(string projectId, bool all, string filter, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets&all="+all+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatasetList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new empty dataset.
		/// Bigquery_datasets_insert projects/{projectId}/datasets
		/// </summary>
		/// <param name="projectId">Project ID of the new dataset</param>
		/// <returns>Successful response</returns>
		public async Task<Dataset> Bigquery_datasets_insertAsync(string projectId, Dataset requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Dataset>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the dataset specified by the datasetId value. Before you can delete a dataset, you must delete all its tables, either manually or by specifying deleteContents. Immediately after deletion, you can create another dataset with the same name.
		/// Bigquery_datasets_delete projects/{projectId}/datasets/{datasetId}
		/// </summary>
		/// <param name="projectId">Project ID of the dataset being deleted</param>
		/// <param name="datasetId">Dataset ID of dataset being deleted</param>
		/// <param name="deleteContents">If True, delete all the tables in the dataset. If False and the dataset contains tables, the request will fail. Default is False</param>
		/// <returns>Successful response</returns>
		public async Task Bigquery_datasets_deleteAsync(string projectId, string datasetId, bool deleteContents, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"&deleteContents="+deleteContents;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the dataset specified by datasetID.
		/// Bigquery_datasets_get projects/{projectId}/datasets/{datasetId}
		/// </summary>
		/// <param name="projectId">Project ID of the requested dataset</param>
		/// <param name="datasetId">Dataset ID of the requested dataset</param>
		/// <param name="datasetView">Specifies the view that determines which dataset information is returned. By default, metadata and ACL information are returned. Allowed values: METADATA, ACL, FULL.</param>
		/// <returns>Successful response</returns>
		public async Task<Dataset> Bigquery_datasets_getAsync(string projectId, string datasetId, string datasetView, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"&datasetView=" + (datasetView==null? "" : System.Uri.EscapeDataString(datasetView));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Dataset>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource. This method supports patch semantics.
		/// Bigquery_datasets_patch projects/{projectId}/datasets/{datasetId}
		/// </summary>
		/// <param name="projectId">Project ID of the dataset being updated</param>
		/// <param name="datasetId">Dataset ID of the dataset being updated</param>
		/// <returns>Successful response</returns>
		public async Task<Dataset> Bigquery_datasets_patchAsync(string projectId, string datasetId, Dataset requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Dataset>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource.
		/// Bigquery_datasets_update projects/{projectId}/datasets/{datasetId}
		/// </summary>
		/// <param name="projectId">Project ID of the dataset being updated</param>
		/// <param name="datasetId">Dataset ID of the dataset being updated</param>
		/// <returns>Successful response</returns>
		public async Task<Dataset> Bigquery_datasets_updateAsync(string projectId, string datasetId, Dataset requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Dataset>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all models in the specified dataset. Requires the READER dataset role. After retrieving the list of models, you can get information about a particular model by calling the models.get method.
		/// Bigquery_models_list projects/{projectId}/datasets/{datasetId}/models
		/// </summary>
		/// <param name="projectId">Required. Project ID of the models to list.</param>
		/// <param name="datasetId">Required. Dataset ID of the models to list.</param>
		/// <param name="maxResults">The maximum number of results to return in a single response page. Leverage the page tokens to iterate through the entire collection.</param>
		/// <param name="pageToken">Page token, returned by a previous call to request the next page of results</param>
		/// <returns>Successful response</returns>
		public async Task<ListModelsResponse> Bigquery_models_listAsync(string projectId, string datasetId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/models&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListModelsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the model specified by modelId from the dataset.
		/// Bigquery_models_delete projects/{projectId}/datasets/{datasetId}/models/{modelId}
		/// </summary>
		/// <param name="projectId">Required. Project ID of the model to delete.</param>
		/// <param name="datasetId">Required. Dataset ID of the model to delete.</param>
		/// <param name="modelId">Required. Model ID of the model to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Bigquery_models_deleteAsync(string projectId, string datasetId, string modelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/models/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the specified model resource by model ID.
		/// Bigquery_models_get projects/{projectId}/datasets/{datasetId}/models/{modelId}
		/// </summary>
		/// <param name="projectId">Required. Project ID of the requested model.</param>
		/// <param name="datasetId">Required. Dataset ID of the requested model.</param>
		/// <param name="modelId">Required. Model ID of the requested model.</param>
		/// <returns>Successful response</returns>
		public async Task<Model> Bigquery_models_getAsync(string projectId, string datasetId, string modelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/models/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Model>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Patch specific fields in the specified model.
		/// Bigquery_models_patch projects/{projectId}/datasets/{datasetId}/models/{modelId}
		/// </summary>
		/// <param name="projectId">Required. Project ID of the model to patch.</param>
		/// <param name="datasetId">Required. Dataset ID of the model to patch.</param>
		/// <param name="modelId">Required. Model ID of the model to patch.</param>
		/// <returns>Successful response</returns>
		public async Task<Model> Bigquery_models_patchAsync(string projectId, string datasetId, string modelId, Model requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/models/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Model>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all routines in the specified dataset. Requires the READER dataset role.
		/// Bigquery_routines_list projects/{projectId}/datasets/{datasetId}/routines
		/// </summary>
		/// <param name="projectId">Required. Project ID of the routines to list</param>
		/// <param name="datasetId">Required. Dataset ID of the routines to list</param>
		/// <param name="filter">If set, then only the Routines matching this filter are returned. The supported format is `routineType:{RoutineType}`, where `{RoutineType}` is a RoutineType enum. For example: `routineType:SCALAR_FUNCTION`.</param>
		/// <param name="maxResults">The maximum number of results to return in a single response page. Leverage the page tokens to iterate through the entire collection.</param>
		/// <param name="pageToken">Page token, returned by a previous call, to request the next page of results</param>
		/// <param name="readMask">If set, then only the Routine fields in the field mask, as well as project_id, dataset_id and routine_id, are returned in the response. If unset, then the following Routine fields are returned: etag, project_id, dataset_id, routine_id, routine_type, creation_time, last_modified_time, and language.</param>
		/// <returns>Successful response</returns>
		public async Task<ListRoutinesResponse> Bigquery_routines_listAsync(string projectId, string datasetId, string filter, int maxResults, string pageToken, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/routines&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListRoutinesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new routine in the dataset.
		/// Bigquery_routines_insert projects/{projectId}/datasets/{datasetId}/routines
		/// </summary>
		/// <param name="projectId">Required. Project ID of the new routine</param>
		/// <param name="datasetId">Required. Dataset ID of the new routine</param>
		/// <returns>Successful response</returns>
		public async Task<Routine> Bigquery_routines_insertAsync(string projectId, string datasetId, Routine requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/routines";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Routine>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the routine specified by routineId from the dataset.
		/// Bigquery_routines_delete projects/{projectId}/datasets/{datasetId}/routines/{routineId}
		/// </summary>
		/// <param name="projectId">Required. Project ID of the routine to delete</param>
		/// <param name="datasetId">Required. Dataset ID of the routine to delete</param>
		/// <param name="routineId">Required. Routine ID of the routine to delete</param>
		/// <returns>Successful response</returns>
		public async Task Bigquery_routines_deleteAsync(string projectId, string datasetId, string routineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/routines/"+ (routineId==null? "" : System.Uri.EscapeDataString(routineId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the specified routine resource by routine ID.
		/// Bigquery_routines_get projects/{projectId}/datasets/{datasetId}/routines/{routineId}
		/// </summary>
		/// <param name="projectId">Required. Project ID of the requested routine</param>
		/// <param name="datasetId">Required. Dataset ID of the requested routine</param>
		/// <param name="routineId">Required. Routine ID of the requested routine</param>
		/// <param name="readMask">If set, only the Routine fields in the field mask are returned in the response. If unset, all Routine fields are returned.</param>
		/// <returns>Successful response</returns>
		public async Task<Routine> Bigquery_routines_getAsync(string projectId, string datasetId, string routineId, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/routines/"+ (routineId==null? "" : System.Uri.EscapeDataString(routineId))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Routine>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates information in an existing routine. The update method replaces the entire Routine resource.
		/// Bigquery_routines_update projects/{projectId}/datasets/{datasetId}/routines/{routineId}
		/// </summary>
		/// <param name="projectId">Required. Project ID of the routine to update</param>
		/// <param name="datasetId">Required. Dataset ID of the routine to update</param>
		/// <param name="routineId">Required. Routine ID of the routine to update</param>
		/// <returns>Successful response</returns>
		public async Task<Routine> Bigquery_routines_updateAsync(string projectId, string datasetId, string routineId, Routine requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/routines/"+ (routineId==null? "" : System.Uri.EscapeDataString(routineId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Routine>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all tables in the specified dataset. Requires the READER dataset role.
		/// Bigquery_tables_list projects/{projectId}/datasets/{datasetId}/tables
		/// </summary>
		/// <param name="projectId">Project ID of the tables to list</param>
		/// <param name="datasetId">Dataset ID of the tables to list</param>
		/// <param name="maxResults">Maximum number of results to return</param>
		/// <param name="pageToken">Page token, returned by a previous call, to request the next page of results</param>
		/// <returns>Successful response</returns>
		public async Task<TableList> Bigquery_tables_listAsync(string projectId, string datasetId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/tables&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TableList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new, empty table in the dataset.
		/// Bigquery_tables_insert projects/{projectId}/datasets/{datasetId}/tables
		/// </summary>
		/// <param name="projectId">Project ID of the new table</param>
		/// <param name="datasetId">Dataset ID of the new table</param>
		/// <returns>Successful response</returns>
		public async Task<Table> Bigquery_tables_insertAsync(string projectId, string datasetId, Table requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/tables";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Table>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the table specified by tableId from the dataset. If the table contains data, all the data will be deleted.
		/// Bigquery_tables_delete projects/{projectId}/datasets/{datasetId}/tables/{tableId}
		/// </summary>
		/// <param name="projectId">Project ID of the table to delete</param>
		/// <param name="datasetId">Dataset ID of the table to delete</param>
		/// <param name="tableId">Table ID of the table to delete</param>
		/// <returns>Successful response</returns>
		public async Task Bigquery_tables_deleteAsync(string projectId, string datasetId, string tableId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the specified table resource by table ID. This method does not return the data in the table, it only returns the table resource, which describes the structure of this table.
		/// Bigquery_tables_get projects/{projectId}/datasets/{datasetId}/tables/{tableId}
		/// </summary>
		/// <param name="projectId">Project ID of the requested table</param>
		/// <param name="datasetId">Dataset ID of the requested table</param>
		/// <param name="tableId">Table ID of the requested table</param>
		/// <param name="selectedFields">List of fields to return (comma-separated). If unspecified, all fields are returned</param>
		/// <param name="view">Specifies the view that determines which table information is returned. By default, basic table information and storage statistics (STORAGE_STATS) are returned.</param>
		/// <returns>Successful response</returns>
		public async Task<Table> Bigquery_tables_getAsync(string projectId, string datasetId, string tableId, string selectedFields, Bigquery_tables_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"&selectedFields=" + (selectedFields==null? "" : System.Uri.EscapeDataString(selectedFields))+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Table>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table resource. This method supports patch semantics.
		/// Bigquery_tables_patch projects/{projectId}/datasets/{datasetId}/tables/{tableId}
		/// </summary>
		/// <param name="projectId">Project ID of the table to update</param>
		/// <param name="datasetId">Dataset ID of the table to update</param>
		/// <param name="tableId">Table ID of the table to update</param>
		/// <param name="autodetect_schema">When true will autodetect schema, else will keep original schema</param>
		/// <returns>Successful response</returns>
		public async Task<Table> Bigquery_tables_patchAsync(string projectId, string datasetId, string tableId, bool autodetect_schema, Table requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"&autodetect_schema="+autodetect_schema;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Table>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table resource.
		/// Bigquery_tables_update projects/{projectId}/datasets/{datasetId}/tables/{tableId}
		/// </summary>
		/// <param name="projectId">Project ID of the table to update</param>
		/// <param name="datasetId">Dataset ID of the table to update</param>
		/// <param name="tableId">Table ID of the table to update</param>
		/// <param name="autodetect_schema">When true will autodetect schema, else will keep original schema</param>
		/// <returns>Successful response</returns>
		public async Task<Table> Bigquery_tables_updateAsync(string projectId, string datasetId, string tableId, bool autodetect_schema, Table requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"&autodetect_schema="+autodetect_schema;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Table>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves table data from a specified set of rows. Requires the READER dataset role.
		/// Bigquery_tabledata_list projects/{projectId}/datasets/{datasetId}/tables/{tableId}/data
		/// </summary>
		/// <param name="projectId">Project ID of the table to read</param>
		/// <param name="datasetId">Dataset ID of the table to read</param>
		/// <param name="tableId">Table ID of the table to read</param>
		/// <param name="maxResults">Maximum number of results to return</param>
		/// <param name="pageToken">Page token, returned by a previous call, identifying the result set</param>
		/// <param name="selectedFields">List of fields to return (comma-separated). If unspecified, all fields are returned</param>
		/// <param name="startIndex">Zero-based index of the starting row to read</param>
		/// <returns>Successful response</returns>
		public async Task<TableDataList> Bigquery_tabledata_listAsync(string projectId, string datasetId, string tableId, int maxResults, string pageToken, string selectedFields, string startIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"/data&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&selectedFields=" + (selectedFields==null? "" : System.Uri.EscapeDataString(selectedFields))+"&startIndex=" + (startIndex==null? "" : System.Uri.EscapeDataString(startIndex));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TableDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Streams data into BigQuery one record at a time without needing to run a load job. Requires the WRITER dataset role.
		/// Bigquery_tabledata_insertAll projects/{projectId}/datasets/{datasetId}/tables/{tableId}/insertAll
		/// </summary>
		/// <param name="projectId">Project ID of the destination table.</param>
		/// <param name="datasetId">Dataset ID of the destination table.</param>
		/// <param name="tableId">Table ID of the destination table.</param>
		/// <returns>Successful response</returns>
		public async Task<TableDataInsertAllResponse> Bigquery_tabledata_insertAllAsync(string projectId, string datasetId, string tableId, TableDataInsertAllRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"/insertAll";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TableDataInsertAllResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all row access policies on the specified table.
		/// Bigquery_rowAccessPolicies_list projects/{projectId}/datasets/{datasetId}/tables/{tableId}/rowAccessPolicies
		/// </summary>
		/// <param name="projectId">Required. Project ID of the row access policies to list.</param>
		/// <param name="datasetId">Required. Dataset ID of row access policies to list.</param>
		/// <param name="tableId">Required. Table ID of the table to list row access policies.</param>
		/// <param name="pageSize">The maximum number of results to return in a single response page. Leverage the page tokens to iterate through the entire collection.</param>
		/// <param name="pageToken">Page token, returned by a previous call, to request the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListRowAccessPoliciesResponse> Bigquery_rowAccessPolicies_listAsync(string projectId, string datasetId, string tableId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/tables/"+ (tableId==null? "" : System.Uri.EscapeDataString(tableId))+"/rowAccessPolicies&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListRowAccessPoliciesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all jobs that you started in the specified project. Job information is available for a six month period after creation. The job list is sorted in reverse chronological order, by job creation time. Requires the Can View project role, or the Is Owner project role if you set the allUsers property.
		/// Bigquery_jobs_list projects/{projectId}/jobs
		/// </summary>
		/// <param name="projectId">Project ID of the jobs to list</param>
		/// <param name="allUsers">Whether to display jobs owned by all users in the project. Default false</param>
		/// <param name="maxCreationTime">Max value for job creation time, in milliseconds since the POSIX epoch. If set, only jobs created before or at this timestamp are returned</param>
		/// <param name="maxResults">Maximum number of results to return</param>
		/// <param name="minCreationTime">Min value for job creation time, in milliseconds since the POSIX epoch. If set, only jobs created after or at this timestamp are returned</param>
		/// <param name="pageToken">Page token, returned by a previous call, to request the next page of results</param>
		/// <param name="parentJobId">If set, retrieves only jobs whose parent is this job. Otherwise, retrieves only jobs which have no parent</param>
		/// <param name="projection">Restrict information returned to a set of selected fields</param>
		/// <param name="stateFilter">Filter for job state</param>
		/// <returns>Successful response</returns>
		public async Task<JobList> Bigquery_jobs_listAsync(string projectId, bool allUsers, string maxCreationTime, int maxResults, string minCreationTime, string pageToken, string parentJobId, Bigquery_jobs_listProjection projection, string[] stateFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs&allUsers="+allUsers+"&maxCreationTime=" + (maxCreationTime==null? "" : System.Uri.EscapeDataString(maxCreationTime))+"&maxResults="+maxResults+"&minCreationTime=" + (minCreationTime==null? "" : System.Uri.EscapeDataString(minCreationTime))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&parentJobId=" + (parentJobId==null? "" : System.Uri.EscapeDataString(parentJobId))+"&projection=" + projection+"&"+string.Join("&", stateFilter.Select(z => $"stateFilter={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<JobList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns information about a specific job. Job information is available for a six month period after creation. Requires that you're the person who ran the job, or have the Is Owner project role.
		/// Bigquery_jobs_get projects/{projectId}/jobs/{jobId}
		/// </summary>
		/// <param name="projectId">[Required] Project ID of the requested job</param>
		/// <param name="jobId">[Required] Job ID of the requested job</param>
		/// <param name="location">The geographic location of the job. Required except for US and EU. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Bigquery_jobs_getAsync(string projectId, string jobId, string location, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Job>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Requests that a job be cancelled. This call will return immediately, and the client will need to poll for the job status to see if the cancel completed successfully. Cancelled jobs may still incur costs.
		/// Bigquery_jobs_cancel projects/{projectId}/jobs/{jobId}/cancel
		/// </summary>
		/// <param name="projectId">[Required] Project ID of the job to cancel</param>
		/// <param name="jobId">[Required] Job ID of the job to cancel</param>
		/// <param name="location">The geographic location of the job. Required except for US and EU. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.</param>
		/// <returns>Successful response</returns>
		public async Task<JobCancelResponse> Bigquery_jobs_cancelAsync(string projectId, string jobId, string location, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/cancel&location=" + (location==null? "" : System.Uri.EscapeDataString(location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<JobCancelResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Requests the deletion of the metadata of a job. This call returns when the job's metadata is deleted.
		/// Bigquery_jobs_delete projects/{projectId}/jobs/{jobId}/delete
		/// </summary>
		/// <param name="projectId">Required. Project ID of the job for which metadata is to be deleted.</param>
		/// <param name="jobId">Required. Job ID of the job for which metadata is to be deleted. If this is a parent job which has child jobs, the metadata from all child jobs will be deleted as well. Direct deletion of the metadata of child jobs is not allowed.</param>
		/// <param name="location">The geographic location of the job. Required. See details at: https://cloud.google.com/bigquery/docs/locations#specifying_your_location.</param>
		/// <returns>Successful response</returns>
		public async Task Bigquery_jobs_deleteAsync(string projectId, string jobId, string location, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/delete&location=" + (location==null? "" : System.Uri.EscapeDataString(location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Runs a BigQuery SQL query synchronously and returns query results if the query completes within a specified timeout.
		/// Bigquery_jobs_query projects/{projectId}/queries
		/// </summary>
		/// <param name="projectId">Project ID of the project billed for the query</param>
		/// <returns>Successful response</returns>
		public async Task<QueryResponse> Bigquery_jobs_queryAsync(string projectId, QueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/queries";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<QueryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the results of a query job.
		/// Bigquery_jobs_getQueryResults projects/{projectId}/queries/{jobId}
		/// </summary>
		/// <param name="projectId">[Required] Project ID of the query job</param>
		/// <param name="jobId">[Required] Job ID of the query job</param>
		/// <param name="location">The geographic location where the job should run. Required except for US and EU. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.</param>
		/// <param name="maxResults">Maximum number of results to read</param>
		/// <param name="pageToken">Page token, returned by a previous call, to request the next page of results</param>
		/// <param name="startIndex">Zero-based index of the starting row</param>
		/// <param name="timeoutMs">How long to wait for the query to complete, in milliseconds, before returning. Default is 10 seconds. If the timeout passes before the job completes, the 'jobComplete' field in the response will be false</param>
		/// <returns>Successful response</returns>
		public async Task<GetQueryResultsResponse> Bigquery_jobs_getQueryResultsAsync(string projectId, string jobId, string location, int maxResults, string pageToken, string startIndex, int timeoutMs, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/queries/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&startIndex=" + (startIndex==null? "" : System.Uri.EscapeDataString(startIndex))+"&timeoutMs="+timeoutMs;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetQueryResultsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the email address of the service account for your project used for interactions with Google Cloud KMS.
		/// Bigquery_projects_getServiceAccount projects/{projectId}/serviceAccount
		/// </summary>
		/// <param name="projectId">Project ID for which the service account is requested.</param>
		/// <returns>Successful response</returns>
		public async Task<GetServiceAccountResponse> Bigquery_projects_getServiceAccountAsync(string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/serviceAccount";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetServiceAccountResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
		/// Bigquery_tables_getIamPolicy {resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Bigquery_tables_getIamPolicyAsync(string resource, GetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Policy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
		/// Bigquery_tables_setIamPolicy {resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Bigquery_tables_setIamPolicyAsync(string resource, SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Policy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
		/// Bigquery_tables_testIamPermissions {resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Bigquery_tables_testIamPermissionsAsync(string resource, TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TestIamPermissionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Bigquery_tables_getView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STORAGE_STATS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLE_METADATA_VIEW_UNSPECIFIED = 3,
	}
	
	public enum Bigquery_jobs_listProjection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		full = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		minimal = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
