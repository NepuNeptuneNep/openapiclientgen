//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Tracking parameters supported by Dynamic Link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyticsInfo
	{
		
		/// <summary>
		/// Parameters for Google Play Campaign Measurements. [Learn more](https://developers.google.com/analytics/devguides/collection/android/v4/campaigns#campaign-params)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googlePlayAnalytics")]
		public GooglePlayAnalytics GooglePlayAnalytics { get; set; }
		
		/// <summary>
		/// Parameters for iTunes Connect App Analytics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itunesConnectAnalytics")]
		public ITunesConnectAnalytics ItunesConnectAnalytics { get; set; }
	}
	
	/// <summary>
	/// Parameters for Google Play Campaign Measurements. [Learn more](https://developers.google.com/analytics/devguides/collection/android/v4/campaigns#campaign-params)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GooglePlayAnalytics
	{
		
		/// <summary>
		/// Deprecated; FDL SDK does not process nor log it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gclid")]
		public string Gclid { get; set; }
		
		/// <summary>
		/// Campaign name; used for keyword analysis to identify a specific product promotion or strategic campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmCampaign")]
		public string UtmCampaign { get; set; }
		
		/// <summary>
		/// Campaign content; used for A/B testing and content-targeted ads to differentiate ads or links that point to the same URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmContent")]
		public string UtmContent { get; set; }
		
		/// <summary>
		/// Campaign medium; used to identify a medium such as email or cost-per-click.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmMedium")]
		public string UtmMedium { get; set; }
		
		/// <summary>
		/// Campaign source; used to identify a search engine, newsletter, or other source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmSource")]
		public string UtmSource { get; set; }
		
		/// <summary>
		/// Campaign term; used with paid search to supply the keywords for ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmTerm")]
		public string UtmTerm { get; set; }
	}
	
	/// <summary>
	/// Parameters for iTunes Connect App Analytics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ITunesConnectAnalytics
	{
		
		/// <summary>
		/// Affiliate token used to create affiliate-coded links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="at")]
		public string At { get; set; }
		
		/// <summary>
		/// Campaign text that developers can optionally add to any link in order to track sales from a specific marketing campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ct")]
		public string Ct { get; set; }
		
		/// <summary>
		/// iTune media types, including music, podcasts, audiobooks and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mt")]
		public string Mt { get; set; }
		
		/// <summary>
		/// Provider token that enables analytics for Dynamic Links from within iTunes Connect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pt")]
		public string Pt { get; set; }
	}
	
	/// <summary>
	/// Android related attributes to the Dynamic Link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AndroidInfo
	{
		
		/// <summary>
		/// Link to open on Android if the app is not installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidFallbackLink")]
		public string AndroidFallbackLink { get; set; }
		
		/// <summary>
		/// If specified, this overrides the ‘link’ parameter on Android.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidLink")]
		public string AndroidLink { get; set; }
		
		/// <summary>
		/// Minimum version code for the Android app. If the installed app’s version code is lower, then the user is taken to the Play Store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidMinPackageVersionCode")]
		public string AndroidMinPackageVersionCode { get; set; }
		
		/// <summary>
		/// Android package name of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidPackageName")]
		public string AndroidPackageName { get; set; }
	}
	
	/// <summary>
	/// Request to create a managed Short Dynamic Link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateManagedShortLinkRequest
	{
		
		/// <summary>
		/// Information about a Dynamic Link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicLinkInfo")]
		public DynamicLinkInfo DynamicLinkInfo { get; set; }
		
		/// <summary>
		/// Full long Dynamic Link URL with desired query parameters specified. For example, "https://sample.app.goo.gl/?link=http://www.google.com&apn=com.sample", [Learn more](https://firebase.google.com/docs/reference/dynamic-links/link-shortener).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longDynamicLink")]
		public string LongDynamicLink { get; set; }
		
		/// <summary>
		/// Link name to associate with the link. It's used for marketer to identify manually-created links in the Firebase console (https://console.firebase.google.com/). Links must be named to be tracked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Google SDK version. Version takes the form "$major.$minor.$patch"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkVersion")]
		public string SdkVersion { get; set; }
		
		/// <summary>
		/// Short Dynamic Link suffix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public Suffix Suffix { get; set; }
	}
	
	/// <summary>
	/// Information about a Dynamic Link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DynamicLinkInfo
	{
		
		/// <summary>
		/// Tracking parameters supported by Dynamic Link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analyticsInfo")]
		public AnalyticsInfo AnalyticsInfo { get; set; }
		
		/// <summary>
		/// Android related attributes to the Dynamic Link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidInfo")]
		public AndroidInfo AndroidInfo { get; set; }
		
		/// <summary>
		/// Desktop related attributes to the Dynamic Link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desktopInfo")]
		public DesktopInfo DesktopInfo { get; set; }
		
		/// <summary>
		/// E.g. https://maps.app.goo.gl, https://maps.page.link, https://g.co/maps More examples can be found in description of getNormalizedUriPrefix in j/c/g/firebase/dynamiclinks/uri/DdlDomain.java Will fallback to dynamic_link_domain is this field is missing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainUriPrefix")]
		public string DomainUriPrefix { get; set; }
		
		/// <summary>
		/// Dynamic Links domain that the project owns, e.g. abcd.app.goo.gl [Learn more](https://firebase.google.com/docs/dynamic-links/android/receive) on how to set up Dynamic Link domain associated with your Firebase project. Required if missing domain_uri_prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicLinkDomain")]
		public string DynamicLinkDomain { get; set; }
		
		/// <summary>
		/// iOS related attributes to the Dynamic Link..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosInfo")]
		public IosInfo IosInfo { get; set; }
		
		/// <summary>
		/// The link your app will open, You can specify any URL your app can handle. This link must be a well-formatted URL, be properly URL-encoded, and use the HTTP or HTTPS scheme. See 'link' parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually). Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Information of navigation behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="navigationInfo")]
		public NavigationInfo NavigationInfo { get; set; }
		
		/// <summary>
		/// Parameters for social meta tag params. Used to set meta tag data for link previews on social sites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socialMetaTagInfo")]
		public SocialMetaTagInfo SocialMetaTagInfo { get; set; }
	}
	
	/// <summary>
	/// Desktop related attributes to the Dynamic Link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DesktopInfo
	{
		
		/// <summary>
		/// Link to open on desktop.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desktopFallbackLink")]
		public string DesktopFallbackLink { get; set; }
	}
	
	/// <summary>
	/// iOS related attributes to the Dynamic Link..
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IosInfo
	{
		
		/// <summary>
		/// iOS App Store ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosAppStoreId")]
		public string IosAppStoreId { get; set; }
		
		/// <summary>
		/// iOS bundle ID of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosBundleId")]
		public string IosBundleId { get; set; }
		
		/// <summary>
		/// Custom (destination) scheme to use for iOS. By default, we’ll use the bundle ID as the custom scheme. Developer can override this behavior using this param.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosCustomScheme")]
		public string IosCustomScheme { get; set; }
		
		/// <summary>
		/// Link to open on iOS if the app is not installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosFallbackLink")]
		public string IosFallbackLink { get; set; }
		
		/// <summary>
		/// iPad bundle ID of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosIpadBundleId")]
		public string IosIpadBundleId { get; set; }
		
		/// <summary>
		/// If specified, this overrides the ios_fallback_link value on iPads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosIpadFallbackLink")]
		public string IosIpadFallbackLink { get; set; }
		
		/// <summary>
		/// iOS minimum version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosMinimumVersion")]
		public string IosMinimumVersion { get; set; }
	}
	
	/// <summary>
	/// Information of navigation behavior.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NavigationInfo
	{
		
		/// <summary>
		/// If this option is on, FDL click will be forced to redirect rather than show an interstitial page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableForcedRedirect")]
		public System.Nullable<System.Boolean> EnableForcedRedirect { get; set; }
	}
	
	/// <summary>
	/// Parameters for social meta tag params. Used to set meta tag data for link previews on social sites.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SocialMetaTagInfo
	{
		
		/// <summary>
		/// A short description of the link. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socialDescription")]
		public string SocialDescription { get; set; }
		
		/// <summary>
		/// An image url string. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socialImageLink")]
		public string SocialImageLink { get; set; }
		
		/// <summary>
		/// Title to be displayed. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socialTitle")]
		public string SocialTitle { get; set; }
	}
	
	/// <summary>
	/// Short Dynamic Link suffix.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Suffix
	{
		
		/// <summary>
		/// Only applies to Option.CUSTOM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customSuffix")]
		public string CustomSuffix { get; set; }
		
		/// <summary>
		/// Suffix option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="option")]
		public System.Nullable<SuffixOption> Option { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SuffixOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTION_UNSPECIFIED")]
		OPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNGUESSABLE")]
		UNGUESSABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHORT")]
		SHORT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM")]
		CUSTOM = 3,
	}
	
	/// <summary>
	/// Response to create a short Dynamic Link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateManagedShortLinkResponse
	{
		
		/// <summary>
		/// Managed Short Link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedShortLink")]
		public ManagedShortLink ManagedShortLink { get; set; }
		
		/// <summary>
		/// Preview link to show the link flow chart. (debug info.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previewLink")]
		public string PreviewLink { get; set; }
		
		/// <summary>
		/// Information about potential warnings on link creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warning")]
		public DynamicLinkWarning[] Warning { get; set; }
	}
	
	/// <summary>
	/// Managed Short Link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedShortLink
	{
		
		/// <summary>
		/// Creation timestamp of the short link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Attributes that have been flagged about this short url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flaggedAttribute")]
		public string[] FlaggedAttribute { get; set; }
		
		/// <summary>
		/// Information about a Dynamic Link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="info")]
		public DynamicLinkInfo Info { get; set; }
		
		/// <summary>
		/// Short durable link url, for example, "https://sample.app.goo.gl/xyz123". Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Link name defined by the creator. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkName")]
		public string LinkName { get; set; }
		
		/// <summary>
		/// Visibility status of link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<ManagedShortLinkVisibility> Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ManagedShortLinkVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSPECIFIED_VISIBILITY")]
		UNSPECIFIED_VISIBILITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNARCHIVED")]
		UNARCHIVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ARCHIVED")]
		ARCHIVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEVER_SHOWN")]
		NEVER_SHOWN = 3,
	}
	
	/// <summary>
	/// Dynamic Links warning messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DynamicLinkWarning
	{
		
		/// <summary>
		/// The warning code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warningCode")]
		public System.Nullable<DynamicLinkWarningWarningCode> WarningCode { get; set; }
		
		/// <summary>
		/// The document describing the warning, and helps resolve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warningDocumentLink")]
		public string WarningDocumentLink { get; set; }
		
		/// <summary>
		/// The warning message to help developers improve their requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warningMessage")]
		public string WarningMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DynamicLinkWarningWarningCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODE_UNSPECIFIED")]
		CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_IN_PROJECT_ANDROID_PACKAGE_NAME")]
		NOT_IN_PROJECT_ANDROID_PACKAGE_NAME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_INTEGER_ANDROID_PACKAGE_MIN_VERSION")]
		NOT_INTEGER_ANDROID_PACKAGE_MIN_VERSION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNNECESSARY_ANDROID_PACKAGE_MIN_VERSION")]
		UNNECESSARY_ANDROID_PACKAGE_MIN_VERSION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_URI_ANDROID_LINK")]
		NOT_URI_ANDROID_LINK = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNNECESSARY_ANDROID_LINK")]
		UNNECESSARY_ANDROID_LINK = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_URI_ANDROID_FALLBACK_LINK")]
		NOT_URI_ANDROID_FALLBACK_LINK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAD_URI_SCHEME_ANDROID_FALLBACK_LINK")]
		BAD_URI_SCHEME_ANDROID_FALLBACK_LINK = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_IN_PROJECT_IOS_BUNDLE_ID")]
		NOT_IN_PROJECT_IOS_BUNDLE_ID = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_IN_PROJECT_IPAD_BUNDLE_ID")]
		NOT_IN_PROJECT_IPAD_BUNDLE_ID = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNNECESSARY_IOS_URL_SCHEME")]
		UNNECESSARY_IOS_URL_SCHEME = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_NUMERIC_IOS_APP_STORE_ID")]
		NOT_NUMERIC_IOS_APP_STORE_ID = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNNECESSARY_IOS_APP_STORE_ID")]
		UNNECESSARY_IOS_APP_STORE_ID = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_URI_IOS_FALLBACK_LINK")]
		NOT_URI_IOS_FALLBACK_LINK = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAD_URI_SCHEME_IOS_FALLBACK_LINK")]
		BAD_URI_SCHEME_IOS_FALLBACK_LINK = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_URI_IPAD_FALLBACK_LINK")]
		NOT_URI_IPAD_FALLBACK_LINK = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAD_URI_SCHEME_IPAD_FALLBACK_LINK")]
		BAD_URI_SCHEME_IPAD_FALLBACK_LINK = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAD_DEBUG_PARAM")]
		BAD_DEBUG_PARAM = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAD_AD_PARAM")]
		BAD_AD_PARAM = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPRECATED_PARAM")]
		DEPRECATED_PARAM = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNRECOGNIZED_PARAM")]
		UNRECOGNIZED_PARAM = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOO_LONG_PARAM")]
		TOO_LONG_PARAM = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_URI_SOCIAL_IMAGE_LINK")]
		NOT_URI_SOCIAL_IMAGE_LINK = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAD_URI_SCHEME_SOCIAL_IMAGE_LINK")]
		BAD_URI_SCHEME_SOCIAL_IMAGE_LINK = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_URI_SOCIAL_URL")]
		NOT_URI_SOCIAL_URL = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAD_URI_SCHEME_SOCIAL_URL")]
		BAD_URI_SCHEME_SOCIAL_URL = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LINK_LENGTH_TOO_LONG")]
		LINK_LENGTH_TOO_LONG = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LINK_WITH_FRAGMENTS")]
		LINK_WITH_FRAGMENTS = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_MATCHING_IOS_BUNDLE_ID_AND_STORE_ID")]
		NOT_MATCHING_IOS_BUNDLE_ID_AND_STORE_ID = 28,
	}
	
	/// <summary>
	/// Request to create a short Dynamic Link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateShortDynamicLinkRequest
	{
		
		/// <summary>
		/// Information about a Dynamic Link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicLinkInfo")]
		public DynamicLinkInfo DynamicLinkInfo { get; set; }
		
		/// <summary>
		/// Full long Dynamic Link URL with desired query parameters specified. For example, "https://sample.app.goo.gl/?link=http://www.google.com&apn=com.sample", [Learn more](https://firebase.google.com/docs/reference/dynamic-links/link-shortener).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longDynamicLink")]
		public string LongDynamicLink { get; set; }
		
		/// <summary>
		/// Google SDK version. Version takes the form "$major.$minor.$patch"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkVersion")]
		public string SdkVersion { get; set; }
		
		/// <summary>
		/// Short Dynamic Link suffix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public Suffix Suffix { get; set; }
	}
	
	/// <summary>
	/// Response to create a short Dynamic Link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateShortDynamicLinkResponse
	{
		
		/// <summary>
		/// Preview link to show the link flow chart. (debug info.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previewLink")]
		public string PreviewLink { get; set; }
		
		/// <summary>
		/// Short Dynamic Link value. e.g. https://abcd.app.goo.gl/wxyz
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortLink")]
		public string ShortLink { get; set; }
		
		/// <summary>
		/// Information about potential warnings on link creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warning")]
		public DynamicLinkWarning[] Warning { get; set; }
	}
	
	/// <summary>
	/// Signals associated with the device making the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceInfo
	{
		
		/// <summary>
		/// Device model name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceModelName")]
		public string DeviceModelName { get; set; }
		
		/// <summary>
		/// Device language code setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Device language code setting obtained by executing JavaScript code in WebView.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCodeFromWebview")]
		public string LanguageCodeFromWebview { get; set; }
		
		/// <summary>
		/// Device language code raw setting. iOS does returns language code in different format than iOS WebView. For example WebView returns en_US, but iOS returns en-US. Field below will return raw value returned by iOS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCodeRaw")]
		public string LanguageCodeRaw { get; set; }
		
		/// <summary>
		/// Device display resolution height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenResolutionHeight")]
		public string ScreenResolutionHeight { get; set; }
		
		/// <summary>
		/// Device display resolution width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenResolutionWidth")]
		public string ScreenResolutionWidth { get; set; }
		
		/// <summary>
		/// Device timezone setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	/// <summary>
	/// Dynamic Link event stat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DynamicLinkEventStat
	{
		
		/// <summary>
		/// The number of times this event occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// Link event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public System.Nullable<DynamicLinkEventStatEvent> Event { get; set; }
		
		/// <summary>
		/// Requested platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public System.Nullable<DynamicLinkEventStatPlatform> Platform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DynamicLinkEventStatEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DYNAMIC_LINK_EVENT_UNSPECIFIED")]
		DYNAMIC_LINK_EVENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLICK")]
		CLICK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REDIRECT")]
		REDIRECT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_INSTALL")]
		APP_INSTALL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_FIRST_OPEN")]
		APP_FIRST_OPEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_RE_OPEN")]
		APP_RE_OPEN = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DynamicLinkEventStatPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DYNAMIC_LINK_PLATFORM_UNSPECIFIED")]
		DYNAMIC_LINK_PLATFORM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANDROID")]
		ANDROID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IOS")]
		IOS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESKTOP")]
		DESKTOP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 4,
	}
	
	/// <summary>
	/// Analytics stats of a Dynamic Link for a given timeframe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DynamicLinkStats
	{
		
		/// <summary>
		/// Dynamic Link event stats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkEventStats")]
		public DynamicLinkEventStat[] LinkEventStats { get; set; }
	}
	
	/// <summary>
	/// Request for iSDK to execute strong match flow for post-install attribution. This is meant for iOS requests only. Requests from other platforms will not be honored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIosPostInstallAttributionRequest
	{
		
		/// <summary>
		/// App installation epoch time (https://en.wikipedia.org/wiki/Unix_time). This is a client signal for a more accurate weak match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appInstallationTime")]
		public string AppInstallationTime { get; set; }
		
		/// <summary>
		/// APP bundle ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		/// <summary>
		/// Signals associated with the device making the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device")]
		public DeviceInfo Device { get; set; }
		
		/// <summary>
		/// iOS version, ie: 9.3.5. Consider adding "build".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosVersion")]
		public string IosVersion { get; set; }
		
		/// <summary>
		/// App post install attribution retrieval information. Disambiguates mechanism (iSDK or developer invoked) to retrieve payload from clicked link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retrievalMethod")]
		public System.Nullable<GetIosPostInstallAttributionRequestRetrievalMethod> RetrievalMethod { get; set; }
		
		/// <summary>
		/// Google SDK version. Version takes the form "$major.$minor.$patch"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkVersion")]
		public string SdkVersion { get; set; }
		
		/// <summary>
		/// Possible unique matched link that server need to check before performing device heuristics match. If passed link is short server need to expand the link. If link is long server need to vslidate the link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueMatchLinkToCheck")]
		public string UniqueMatchLinkToCheck { get; set; }
		
		/// <summary>
		/// Strong match page information. Disambiguates between default UI and custom page to present when strong match succeeds/fails to find cookie.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visualStyle")]
		public System.Nullable<GetIosPostInstallAttributionRequestVisualStyle> VisualStyle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GetIosPostInstallAttributionRequestRetrievalMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_PAYLOAD_RETRIEVAL_METHOD")]
		UNKNOWN_PAYLOAD_RETRIEVAL_METHOD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPLICIT_WEAK_MATCH")]
		IMPLICIT_WEAK_MATCH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPLICIT_WEAK_MATCH")]
		EXPLICIT_WEAK_MATCH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPLICIT_STRONG_AFTER_WEAK_MATCH")]
		EXPLICIT_STRONG_AFTER_WEAK_MATCH = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GetIosPostInstallAttributionRequestVisualStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_VISUAL_STYLE")]
		UNKNOWN_VISUAL_STYLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT_STYLE")]
		DEFAULT_STYLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM_STYLE")]
		CUSTOM_STYLE = 2,
	}
	
	/// <summary>
	/// Response for iSDK to execute strong match flow for post-install attribution. Information of the resolved FDL link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIosPostInstallAttributionResponse
	{
		
		/// <summary>
		/// The minimum version for app, specified by dev through ?imv= parameter. Return to iSDK to allow app to evaluate if current version meets this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appMinimumVersion")]
		public string AppMinimumVersion { get; set; }
		
		/// <summary>
		/// The confidence of the returned attribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributionConfidence")]
		public System.Nullable<GetIosPostInstallAttributionResponseAttributionConfidence> AttributionConfidence { get; set; }
		
		/// <summary>
		/// The deep-link attributed post-install via one of several techniques (device heuristics, copy unique).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deepLink")]
		public string DeepLink { get; set; }
		
		/// <summary>
		/// User-agent specific custom-scheme URIs for iSDK to open. This will be set according to the user-agent tha the click was originally made in. There is no Safari-equivalent custom-scheme open URLs. ie: googlechrome://www.example.com ie: firefox://open-url?url=http://www.example.com ie: opera-http://example.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalBrowserDestinationLink")]
		public string ExternalBrowserDestinationLink { get; set; }
		
		/// <summary>
		/// The link to navigate to update the app if min version is not met. This is either (in order): 1) fallback link (from ?ifl= parameter, if specified by developer) or 2) AppStore URL (from ?isi= parameter, if specified), or 3) the payload link (from required link= parameter).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fallbackLink")]
		public string FallbackLink { get; set; }
		
		/// <summary>
		/// Invitation ID attributed post-install via one of several techniques (device heuristics, copy unique).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitationId")]
		public string InvitationId { get; set; }
		
		/// <summary>
		/// Instruction for iSDK to attemmpt to perform strong match. For instance, if browser does not support/allow cookie or outside of support browsers, this will be false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isStrongMatchExecutable")]
		public System.Nullable<System.Boolean> IsStrongMatchExecutable { get; set; }
		
		/// <summary>
		/// Describes why match failed, ie: "discarded due to low confidence". This message will be publicly visible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchMessage")]
		public string MatchMessage { get; set; }
		
		/// <summary>
		/// Which IP version the request was made from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestIpVersion")]
		public System.Nullable<GetIosPostInstallAttributionResponseRequestIpVersion> RequestIpVersion { get; set; }
		
		/// <summary>
		/// Entire FDL (short or long) attributed post-install via one of several techniques (device heuristics, copy unique).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedLink")]
		public string RequestedLink { get; set; }
		
		/// <summary>
		/// The entire FDL, expanded from a short link. It is the same as the requested_link, if it is long. Parameters from this should not be used directly (ie: server can default utm_[campaign|medium|source] to a value when requested_link lack them, server determine the best fallback_link when requested_link specifies >1 fallback links).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedLink")]
		public string ResolvedLink { get; set; }
		
		/// <summary>
		/// Scion campaign value to be propagated by iSDK to Scion at post-install.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmCampaign")]
		public string UtmCampaign { get; set; }
		
		/// <summary>
		/// Scion content value to be propagated by iSDK to Scion at app-reopen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmContent")]
		public string UtmContent { get; set; }
		
		/// <summary>
		/// Scion medium value to be propagated by iSDK to Scion at post-install.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmMedium")]
		public string UtmMedium { get; set; }
		
		/// <summary>
		/// Scion source value to be propagated by iSDK to Scion at post-install.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmSource")]
		public string UtmSource { get; set; }
		
		/// <summary>
		/// Scion term value to be propagated by iSDK to Scion at app-reopen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmTerm")]
		public string UtmTerm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GetIosPostInstallAttributionResponseAttributionConfidence
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_ATTRIBUTION_CONFIDENCE")]
		UNKNOWN_ATTRIBUTION_CONFIDENCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEAK")]
		WEAK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT")]
		DEFAULT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNIQUE")]
		UNIQUE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GetIosPostInstallAttributionResponseRequestIpVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_IP_VERSION")]
		UNKNOWN_IP_VERSION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IP_V4")]
		IP_V4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IP_V6")]
		IP_V6 = 2,
	}
	
	/// <summary>
	/// Request for iSDK to get reopen attribution for app universal link open deeplinking. This endpoint is meant for only iOS requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIosReopenAttributionRequest
	{
		
		/// <summary>
		/// APP bundle ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		/// <summary>
		/// FDL link to be verified from an app universal link open. The FDL link can be one of: 1) short FDL. e.g. .page.link/, or 2) long FDL. e.g. .page.link/?{query params}, or 3) Invite FDL. e.g. .page.link/i/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedLink")]
		public string RequestedLink { get; set; }
		
		/// <summary>
		/// Google SDK version. Version takes the form "$major.$minor.$patch"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkVersion")]
		public string SdkVersion { get; set; }
	}
	
	/// <summary>
	/// Response for iSDK to get reopen attribution for app universal link open deeplinking. This endpoint is meant for only iOS requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIosReopenAttributionResponse
	{
		
		/// <summary>
		/// The deep-link attributed the app universal link open. For both regular FDL links and invite FDL links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deepLink")]
		public string DeepLink { get; set; }
		
		/// <summary>
		/// Optional invitation ID, for only invite typed requested FDL links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitationId")]
		public string InvitationId { get; set; }
		
		/// <summary>
		/// FDL input value of the "&imv=" parameter, minimum app version to be returned to Google Firebase SDK running on iOS-9.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosMinAppVersion")]
		public string IosMinAppVersion { get; set; }
		
		/// <summary>
		/// The entire FDL, expanded from a short link. It is the same as the requested_link, if it is long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedLink")]
		public string ResolvedLink { get; set; }
		
		/// <summary>
		/// Scion campaign value to be propagated by iSDK to Scion at app-reopen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmCampaign")]
		public string UtmCampaign { get; set; }
		
		/// <summary>
		/// Scion content value to be propagated by iSDK to Scion at app-reopen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmContent")]
		public string UtmContent { get; set; }
		
		/// <summary>
		/// Scion medium value to be propagated by iSDK to Scion at app-reopen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmMedium")]
		public string UtmMedium { get; set; }
		
		/// <summary>
		/// Scion source value to be propagated by iSDK to Scion at app-reopen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmSource")]
		public string UtmSource { get; set; }
		
		/// <summary>
		/// Scion term value to be propagated by iSDK to Scion at app-reopen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utmTerm")]
		public string UtmTerm { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get iOS strong/weak-match info for post-install attribution.
		/// Firebasedynamiclinks_installAttribution v1/installAttribution
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GetIosPostInstallAttributionResponse> Firebasedynamiclinks_installAttributionAsync(GetIosPostInstallAttributionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/installAttribution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetIosPostInstallAttributionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a managed short Dynamic Link given either a valid long Dynamic Link or details such as Dynamic Link domain, Android and iOS app information. The created short Dynamic Link will not expire. This differs from CreateShortDynamicLink in the following ways: - The request will also contain a name for the link (non unique name for the front end). - The response must be authenticated with an auth token (generated with the admin service account). - The link will appear in the FDL list of links in the console front end. The Dynamic Link domain in the request must be owned by requester's Firebase project.
		/// Firebasedynamiclinks_managedShortLinks_create v1/managedShortLinks:create
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<CreateManagedShortLinkResponse> Firebasedynamiclinks_managedShortLinks_createAsync(CreateManagedShortLinkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/managedShortLinks:create";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateManagedShortLinkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get iOS reopen attribution for app universal link open deeplinking.
		/// Firebasedynamiclinks_reopenAttribution v1/reopenAttribution
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GetIosReopenAttributionResponse> Firebasedynamiclinks_reopenAttributionAsync(GetIosReopenAttributionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/reopenAttribution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetIosReopenAttributionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a short Dynamic Link given either a valid long Dynamic Link or details such as Dynamic Link domain, Android and iOS app information. The created short Dynamic Link will not expire. Repeated calls with the same long Dynamic Link or Dynamic Link information will produce the same short Dynamic Link. The Dynamic Link domain in the request must be owned by requester's Firebase project.
		/// Firebasedynamiclinks_shortLinks_create v1/shortLinks
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<CreateShortDynamicLinkResponse> Firebasedynamiclinks_shortLinks_createAsync(CreateShortDynamicLinkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/shortLinks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateShortDynamicLinkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Fetches analytics stats of a short Dynamic Link for a given duration. Metrics include number of clicks, redirects, installs, app first opens, and app reopens.
		/// Firebasedynamiclinks_getLinkStats v1/{dynamicLink}/linkStats
		/// </summary>
		/// <param name="dynamicLink">Dynamic Link URL. e.g. https://abcd.app.goo.gl/wxyz</param>
		/// <param name="durationDays">The span of time requested in days.</param>
		/// <param name="sdkVersion">Google SDK version. Version takes the form "$major.$minor.$patch"</param>
		/// <returns>Successful response</returns>
		public async Task<DynamicLinkStats> Firebasedynamiclinks_getLinkStatsAsync(string dynamicLink, string durationDays, string sdkVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (dynamicLink==null? "" : System.Uri.EscapeDataString(dynamicLink))+"/linkStats&durationDays=" + (durationDays==null? "" : System.Uri.EscapeDataString(durationDays))+"&sdkVersion=" + (sdkVersion==null? "" : System.Uri.EscapeDataString(sdkVersion));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DynamicLinkStats>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
