//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Country model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Country
	{
		
		[System.Runtime.Serialization.DataMember(Name="iso")]
		public string Iso { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iso3")]
		public string Iso3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Language model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Language
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Podcast model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Podcast
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="block")]
		public System.Nullable<System.Boolean> Block { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string Copyright { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="explicit")]
		public System.Nullable<System.Boolean> Explicit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerEmail")]
		public string OwnerEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerName")]
		public string OwnerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showType")]
		public string ShowType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// PodcastCategory model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PodcastCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// PodcastEpisode model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PodcastEpisode
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="block")]
		public System.Nullable<System.Boolean> Block { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int64> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="episode")]
		public System.Nullable<System.Int64> Episode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="episodeType")]
		public string EpisodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="explicit")]
		public System.Nullable<System.Boolean> Explicit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileUrl")]
		public string FileUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publishDate")]
		public System.DateTimeOffset PublishDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="season")]
		public System.Nullable<System.Int64> Season { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// List of PodcastEpisode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PodcastEpisodeList
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PodcastEpisode[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
	}
	
	/// <summary>
	/// Filters for podcast search
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PodcastFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string[] Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string[] Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string[] Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="podcastType")]
		public System.Nullable<PodcastFiltersPodcastType> PodcastType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PodcastFiltersPodcastType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		podcasts = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shows = 1,
	}
	
	/// <summary>
	/// Podcast search params
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PodcastSearchParams
	{
		
		/// <summary>
		/// Filters for podcast search
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public PodcastFilters Filters { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hitsPerPage")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> HitsPerPage { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
	}
	
	/// <summary>
	/// Podcast search results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PodcastSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="hits")]
		public Podcast[] Hits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
	}
	
	/// <summary>
	/// Station model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Station
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genre")]
		public string Genre { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stream")]
		public string Stream { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	/// <summary>
	/// Filters for station search
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StationFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string[] Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genre")]
		public string[] Genre { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string[] Language { get; set; }
	}
	
	/// <summary>
	/// StationGenre model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StationGenre
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// List of Station
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StationList
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Station[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
	}
	
	/// <summary>
	/// Station search params
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StationSearchParams
	{
		
		/// <summary>
		/// Filters for station search
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public StationFilters Filters { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hitsPerPage")]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> HitsPerPage { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
	}
	
	/// <summary>
	/// Station search results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StationSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="hits")]
		public Station[] Hits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get the list of Categories that can be used to filter podcasts in the search podcasts request
		/// GetPodcastCategories api/v2/podcasts/categories
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetPodcastCategoriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/podcasts/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of Countries that can be used to filter podcasts in the search podcasts request
		/// GetPodcastCountries api/v2/podcasts/countries
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetPodcastCountriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/podcasts/countries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of Languages that can be used to filter podcasts in the search podcasts request
		/// GetPodcastLanguages api/v2/podcasts/languages
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetPodcastLanguagesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/podcasts/languages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search podcasts
		/// SearchPodcasts api/v2/podcasts/search
		/// </summary>
		/// <returns>OK</returns>
		public async Task SearchPodcastsAsync(PodcastSearchParams requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/podcasts/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete podcast
		/// DeletePodcast api/v2/podcasts/{podcastKey}
		/// </summary>
		/// <returns>OK</returns>
		public async Task DeletePodcastAsync(string podcastKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/podcasts/"+ (podcastKey==null? "" : System.Uri.EscapeDataString(podcastKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get podcast
		/// GetPodcast api/v2/podcasts/{podcastKey}
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetPodcastAsync(string podcastKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/podcasts/"+ (podcastKey==null? "" : System.Uri.EscapeDataString(podcastKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get podcast episodes
		/// GetPodcastEpisodes api/v2/podcasts/{podcastKey}/episodes
		/// </summary>
		/// <param name="limit">Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="offset">Minimum: 0</param>
		/// <returns>OK</returns>
		public async Task GetPodcastEpisodesAsync(string podcastKey, string limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/podcasts/"+ (podcastKey==null? "" : System.Uri.EscapeDataString(podcastKey))+"/episodes&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete podcast episode
		/// DeletePodcast_1 api/v2/podcasts/{podcastKey}/episodes/{episodeKey}
		/// </summary>
		/// <returns>OK</returns>
		public async Task DeletePodcast_1Async(string podcastKey, string episodeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/podcasts/"+ (podcastKey==null? "" : System.Uri.EscapeDataString(podcastKey))+"/episodes/"+ (episodeKey==null? "" : System.Uri.EscapeDataString(episodeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get podcast episode
		/// GetPodcastEpisode api/v2/podcasts/{podcastKey}/episodes/{episodeKey}
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetPodcastEpisodeAsync(string podcastKey, string episodeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/podcasts/"+ (podcastKey==null? "" : System.Uri.EscapeDataString(podcastKey))+"/episodes/"+ (episodeKey==null? "" : System.Uri.EscapeDataString(episodeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of Countries that can be used to filter stations in the search stations request
		/// GetStationCountries api/v2/stations/countries
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetStationCountriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/stations/countries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of Genres that can be used to filter stations in the search stations request
		/// GetStationGenres api/v2/stations/genres
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetStationGenresAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/stations/genres";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of Languages that can be used to filter stations in the search stations request
		/// GetStationLanguages api/v2/stations/languages
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetStationLanguagesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/stations/languages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List stations
		/// GetPartnerAggregatorStations api/v2/stations/list
		/// </summary>
		/// <param name="page">Minimum: 1</param>
		/// <param name="hitsPerPage">Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>OK</returns>
		public async Task GetPartnerAggregatorStationsAsync(string page, string hitsPerPage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/stations/list?page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&hitsPerPage=" + (hitsPerPage==null? "" : System.Uri.EscapeDataString(hitsPerPage));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search stations
		/// SearchStations api/v2/stations/search
		/// </summary>
		/// <returns>OK</returns>
		public async Task SearchStationsAsync(StationSearchParams requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/stations/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
