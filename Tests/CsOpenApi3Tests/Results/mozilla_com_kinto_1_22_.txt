//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Server_info 
		/// </summary>
		/// <returns>Return information about the running Instance.</returns>
		public async Task<System.Collections.Generic.Dictionary<string, object>> Server_infoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get_openapi_spec __api__
		/// </summary>
		/// <returns>Return an OpenAPI description of the running instance.</returns>
		public async Task<System.Collections.Generic.Dictionary<string, object>> Get_openapi_specAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__api__";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// __heartbeat__ __heartbeat__
		/// </summary>
		/// <returns>Server is working properly.</returns>
		public async Task<System.Collections.Generic.Dictionary<string, object>> @__heartbeat__Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__heartbeat__";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// __lbheartbeat__ __lbheartbeat__
		/// </summary>
		/// <returns>Returned if server is reachable.</returns>
		public async Task<string> @__lbheartbeat__Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__lbheartbeat__";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// __version__ __version__
		/// </summary>
		/// <returns>Return the running Instance version information.</returns>
		public async Task<System.Collections.Generic.Dictionary<string, object>> @__version__Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "__version__";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Batch batch
		/// </summary>
		/// <returns>Return a list of operation responses.</returns>
		public async Task<BatchReturn> BatchAsync(BatchPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get_buckets buckets
		/// </summary>
		/// <param name="_limit">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_since">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_to">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_before">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="last_modified">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <returns>Return a list of matching objects.</returns>
		public async Task<Get_bucketsReturn> Get_bucketsAsync(int _limit, string[] _sort, string _token, int _since, int _to, int _before, string id, int last_modified, string[] _fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets?_limit="+_limit+"&"+string.Join("&", _sort.Select(z => $"_sort={System.Uri.EscapeDataString(z.ToString())}"))+"&_token=" + (_token==null? "" : System.Uri.EscapeDataString(_token))+"&_since="+_since+"&_to="+_to+"&_before="+_before+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&last_modified="+last_modified+"&"+string.Join("&", _fields.Select(z => $"_fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_bucketsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get_changess buckets/monitor/collections/changes/records
		/// </summary>
		/// <param name="_limit">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_since">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_to">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_before">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="last_modified">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <returns>Return a list of matching objects.</returns>
		public async Task<Get_changessReturn> Get_changessAsync(int _limit, string[] _sort, string _token, int _since, int _to, int _before, string id, int last_modified, string[] _fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/monitor/collections/changes/records?_limit="+_limit+"&"+string.Join("&", _sort.Select(z => $"_sort={System.Uri.EscapeDataString(z.ToString())}"))+"&_token=" + (_token==null? "" : System.Uri.EscapeDataString(_token))+"&_since="+_since+"&_to="+_to+"&_before="+_before+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&last_modified="+last_modified+"&"+string.Join("&", _fields.Select(z => $"_fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_changessReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get_collection_changeset buckets/{bid}/collections/{cid}/changeset
		/// </summary>
		public async Task Get_collection_changesetAsync(string _since, string _expected, int _limit, string bucket, string collection, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/{bid}/collections/{cid}/changeset?_since=" + (_since==null? "" : System.Uri.EscapeDataString(_since))+"&_expected=" + (_expected==null? "" : System.Uri.EscapeDataString(_expected))+"&_limit="+_limit+"&bucket=" + (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"&collection=" + (collection==null? "" : System.Uri.EscapeDataString(collection));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get_collections buckets/{bucket_id}/collections
		/// </summary>
		/// <param name="_limit">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_since">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_to">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_before">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="last_modified">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <returns>Return a list of matching objects.</returns>
		public async Task<Get_collectionsReturn> Get_collectionsAsync(int _limit, string[] _sort, string _token, int _since, int _to, int _before, string id, int last_modified, string[] _fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/{bucket_id}/collections?_limit="+_limit+"&"+string.Join("&", _sort.Select(z => $"_sort={System.Uri.EscapeDataString(z.ToString())}"))+"&_token=" + (_token==null? "" : System.Uri.EscapeDataString(_token))+"&_since="+_since+"&_to="+_to+"&_before="+_before+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&last_modified="+last_modified+"&"+string.Join("&", _fields.Select(z => $"_fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_collectionsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get_records buckets/{bucket_id}/collections/{collection_id}/records
		/// </summary>
		/// <param name="_limit">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_since">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_to">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_before">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="last_modified">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <returns>Return a list of matching objects.</returns>
		public async Task<Get_recordsReturn> Get_recordsAsync(int _limit, string[] _sort, string _token, int _since, int _to, int _before, string id, int last_modified, string[] _fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/{bucket_id}/collections/{collection_id}/records?_limit="+_limit+"&"+string.Join("&", _sort.Select(z => $"_sort={System.Uri.EscapeDataString(z.ToString())}"))+"&_token=" + (_token==null? "" : System.Uri.EscapeDataString(_token))+"&_since="+_since+"&_to="+_to+"&_before="+_before+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&last_modified="+last_modified+"&"+string.Join("&", _fields.Select(z => $"_fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_recordsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get_record buckets/{bucket_id}/collections/{collection_id}/records/{id}
		/// </summary>
		/// <returns>Return the target object.</returns>
		public async Task<Get_recordReturn> Get_recordAsync(string[] _fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/{bucket_id}/collections/{collection_id}/records/{id}?"+string.Join("&", _fields.Select(z => $"_fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_recordReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete_attachment buckets/{bucket_id}/collections/{collection_id}/records/{id}/attachment
		/// </summary>
		public async Task Delete_attachmentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/{bucket_id}/collections/{collection_id}/records/{id}/attachment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create_attachment buckets/{bucket_id}/collections/{collection_id}/records/{id}/attachment
		/// </summary>
		public async Task Create_attachmentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/{bucket_id}/collections/{collection_id}/records/{id}/attachment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get_collection buckets/{bucket_id}/collections/{id}
		/// </summary>
		/// <returns>Return the target object.</returns>
		public async Task<Get_collectionReturn> Get_collectionAsync(string[] _fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/{bucket_id}/collections/{id}?"+string.Join("&", _fields.Select(z => $"_fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_collectionReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get_groups buckets/{bucket_id}/groups
		/// </summary>
		/// <param name="_limit">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_since">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_to">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="_before">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <param name="last_modified">Minimum: 0
		/// Maximum: 9223372036854776000
		// </param>
		/// <returns>Return a list of matching objects.</returns>
		public async Task<Get_groupsReturn> Get_groupsAsync(int _limit, string[] _sort, string _token, int _since, int _to, int _before, string id, int last_modified, string[] _fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/{bucket_id}/groups?_limit="+_limit+"&"+string.Join("&", _sort.Select(z => $"_sort={System.Uri.EscapeDataString(z.ToString())}"))+"&_token=" + (_token==null? "" : System.Uri.EscapeDataString(_token))+"&_since="+_since+"&_to="+_to+"&_before="+_before+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&last_modified="+last_modified+"&"+string.Join("&", _fields.Select(z => $"_fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_groupsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get_group buckets/{bucket_id}/groups/{id}
		/// </summary>
		/// <returns>Return the target object.</returns>
		public async Task<Get_groupReturn> Get_groupAsync(string[] _fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/{bucket_id}/groups/{id}?"+string.Join("&", _fields.Select(z => $"_fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_groupReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get_bucket buckets/{id}
		/// </summary>
		/// <returns>Return the target object.</returns>
		public async Task<Get_bucketReturn> Get_bucketAsync(string[] _fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/{id}?"+string.Join("&", _fields.Select(z => $"_fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_bucketReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Contribute contribute.json
		/// </summary>
		/// <returns>Return open source contributing information.</returns>
		public async Task<System.Collections.Generic.Dictionary<string, object>> ContributeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contribute.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class BatchPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaults")]
		public BatchPostBodyDefaults Defaults { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public BatchPostBodyRequests[] BatchPostBodyRequests { get; set; }
	}
	
	public class BatchPostBodyDefaults
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public System.Collections.Generic.Dictionary<string, object> Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, object> Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public System.Nullable<BatchPostBodyDefaultsMethod> Method { get; set; }
		
		/// <summary>
		/// Pattern: ^/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^/")]
		public string Path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BatchPostBodyDefaultsMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GET")]
		GET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEAD")]
		HEAD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE")]
		DELETE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRACE")]
		TRACE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POST")]
		POST = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUT")]
		PUT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PATCH")]
		PATCH = 6,
	}
	
	public class BatchPostBodyRequests
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public System.Collections.Generic.Dictionary<string, object> Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, object> Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public BatchPostBodyDefaultsMethod Method { get; set; }
		
		/// <summary>
		/// Required
		/// Pattern: ^/
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^/")]
		public string Path { get; set; }
	}
	
	public class BatchReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="responses")]
		public BatchReturnResponses[] BatchReturnResponses { get; set; }
	}
	
	public class BatchReturnResponses
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public System.Collections.Generic.Dictionary<string, object> Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, object> Headers { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public int Status { get; set; }
	}
	
	public class Get_bucketsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_bucketsReturnData[] Get_bucketsReturnData { get; set; }
	}
	
	public class Get_bucketsReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection:schema")]
		public System.Collections.Generic.Dictionary<string, object> Collection_schema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group:schema")]
		public System.Collections.Generic.Dictionary<string, object> Group_schema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="record:schema")]
		public System.Collections.Generic.Dictionary<string, object> Record_schema { get; set; }
	}
	
	public class Get_changessReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_changessReturnData[] Get_changessReturnData { get; set; }
	}
	
	public class Get_changessReturnData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public string Collection { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
	}
	
	public class Get_collectionsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_collectionsReturnData[] Get_collectionsReturnData { get; set; }
	}
	
	public class Get_collectionsReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="cache_expires")]
		public System.Nullable<System.Int32> Cache_expires { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public System.Collections.Generic.Dictionary<string, object> Schema { get; set; }
	}
	
	public class Get_recordsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	public class Get_recordReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, object> Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public Get_recordReturnPermissions Permissions { get; set; }
	}
	
	public class Get_recordReturnPermissions
	{
		
		[System.Runtime.Serialization.DataMember(Name="read")]
		public string[] Read { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="write")]
		public string[] Write { get; set; }
	}
	
	public class Get_collectionReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_collectionReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public Get_collectionReturnPermissions Permissions { get; set; }
	}
	
	public class Get_collectionReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="cache_expires")]
		public System.Nullable<System.Int32> Cache_expires { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public System.Collections.Generic.Dictionary<string, object> Schema { get; set; }
	}
	
	public class Get_collectionReturnPermissions
	{
		
		[System.Runtime.Serialization.DataMember(Name="read")]
		public string[] Read { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="record:create")]
		public string[] Record_create { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="write")]
		public string[] Write { get; set; }
	}
	
	public class Get_groupsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_groupsReturnData[] Get_groupsReturnData { get; set; }
	}
	
	public class Get_groupsReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
	}
	
	public class Get_groupReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_groupReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public Get_groupReturnPermissions Permissions { get; set; }
	}
	
	public class Get_groupReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
	}
	
	public class Get_groupReturnPermissions
	{
		
		[System.Runtime.Serialization.DataMember(Name="read")]
		public string[] Read { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="write")]
		public string[] Write { get; set; }
	}
	
	public class Get_bucketReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_bucketReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public Get_bucketReturnPermissions Permissions { get; set; }
	}
	
	public class Get_bucketReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection:schema")]
		public System.Collections.Generic.Dictionary<string, object> Collection_schema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group:schema")]
		public System.Collections.Generic.Dictionary<string, object> Group_schema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="record:schema")]
		public System.Collections.Generic.Dictionary<string, object> Record_schema { get; set; }
	}
	
	public class Get_bucketReturnPermissions
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection:create")]
		public string[] Collection_create { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group:create")]
		public string[] Group_create { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="read")]
		public string[] Read { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="write")]
		public string[] Write { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
