//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A set of errors
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error_400
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error_400Errors[] Error_400Errors { get; set; }
	}
	
	public class Error_400Errors
	{
		
		/// <summary>
		/// A machine-readable error code from the Amadeus Canned Messages table, that will enable the API Consumers code to handle this type of error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field’s value can be localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Error_400ErrorsSource Source { get; set; }
		
		/// <summary>
		/// The [HTTP status code](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) of this response. This is present only in terminal errors which cause an unsuccessful response. In the case of multiple errors, they must all have the same status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// An error title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class Error_400ErrorsSource
	{
		
		/// <summary>
		/// A sample input to guide the user when resolving this issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="example")]
		public string Example { get; set; }
		
		/// <summary>
		/// The key of the URI path or query parameter that caused the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		/// <summary>
		/// A JSON Pointer [RFC6901] to the associated entity in the request body that caused this error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointer")]
		public string Pointer { get; set; }
	}
	
	/// <summary>
	/// A set of errors
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error_500
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error_500Errors[] Error_500Errors { get; set; }
	}
	
	public class Error_500Errors
	{
		
		/// <summary>
		/// A machine-readable error code from the Amadeus Canned Messages table, that will enable the API Consumers code to handle this type of error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field’s value can be localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Error_500ErrorsSource Source { get; set; }
		
		/// <summary>
		/// The [HTTP status code](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) of this response. This is present only in terminal errors which cause an unsuccessful response. In the case of multiple errors, they must all have the same status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// An error title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class Error_500ErrorsSource
	{
		
		/// <summary>
		/// A sample input to guide the user when resolving this issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="example")]
		public string Example { get; set; }
		
		/// <summary>
		/// The key of the URI path or query parameter that caused the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		/// <summary>
		/// A JSON Pointer [RFC6901] to the associated entity in the request body that caused this error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointer")]
		public string Pointer { get; set; }
	}
	
	/// <summary>
	/// The Warning Definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Warning
	{
		
		/// <summary>
		/// A machine-readable error code from the Canned Messages table, that will enable the API Consumers code to handle this type of error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public int Code { get; set; }
		
		/// <summary>
		/// An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field’s value can be localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The Warning Source Definition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public WarningSource Source { get; set; }
		
		/// <summary>
		/// An error title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class WarningSource
	{
		
		/// <summary>
		/// A sample input to guide the user when resolving this issu
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="example")]
		public string Example { get; set; }
		
		/// <summary>
		/// The key of the URI path or query parameter that caused the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		/// <summary>
		/// A JSON Pointer [RFC6901] to the associated entity in the request body that caused this error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointer")]
		public string Pointer { get; set; }
	}
	
	/// <summary>
	/// price metric
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Itinerary_price_metric
	{
		
		/// <summary>
		/// currency of the prices.
		///
		///Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The date on which the traveler will depart from the origin to go to the destination. 
		///
		///Dates are specified in the[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departureDate")]
		public string DepartureDate { get; set; }
		
		/// <summary>
		/// Description of a particular point or place in physical space
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public Itinerary_price_metricDestination Destination { get; set; }
		
		/// <summary>
		/// true for a one way trip,
		///false for a round trip
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneWay")]
		public System.Nullable<System.Boolean> OneWay { get; set; }
		
		/// <summary>
		/// Description of a particular point or place in physical space
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public Itinerary_price_metricOrigin Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceMetrics")]
		public Itinerary_price_metricPriceMetrics[] Itinerary_price_metricPriceMetrics { get; set; }
		
		/// <summary>
		/// transportation type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transportType")]
		public System.Nullable<Itinerary_price_metricTransportType> TransportType { get; set; }
		
		/// <summary>
		/// ressource type - always price-metrics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class Itinerary_price_metricDestination
	{
		
		/// <summary>
		/// IATA location code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iataCode")]
		public string IataCode { get; set; }
	}
	
	public class Itinerary_price_metricOrigin
	{
		
		/// <summary>
		/// IATA location code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iataCode")]
		public string IataCode { get; set; }
	}
	
	public class Itinerary_price_metricPriceMetrics
	{
		
		/// <summary>
		/// Defines the monetary value with decimal position. It can be in cash or miles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quartileRanking")]
		public System.Nullable<Itinerary_price_metricPriceMetricsQuartileRanking> QuartileRanking { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Itinerary_price_metricPriceMetricsQuartileRanking
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MINIMUM")]
		MINIMUM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIRST")]
		FIRST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM")]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THIRD")]
		THIRD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAXIMUM")]
		MAXIMUM = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Itinerary_price_metricTransportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FLIGHT")]
		FLIGHT = 0,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// GET itinerary price metric
		/// Get_itinerary_price_metrics analytics/itinerary-price-metrics
		/// </summary>
		/// <param name="originIataCode">airport code, following [IATA standard](http://www.iata.org/publications/Pages/code-search.aspx), from which the traveler will depart
		///</param>
		/// <param name="destinationIataCode">airport code, following [IATA standard](http://www.iata.org/publications/Pages/code-search.aspx), to which the traveler is going.</param>
		/// <param name="departureDate">The date on which the traveler will depart from the origin to go to the destination. 
		///
		///Dates are specified in the[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format.</param>
		/// <param name="currencyCode">the preferred currency for display. Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro</param>
		/// <param name="oneWay">true to get price metrics for a one way trip,
		///false to get price metrics for a round trip</param>
		/// <returns>Successful reply</returns>
		public async Task Get_itinerary_price_metricsAsync(string originIataCode, string destinationIataCode, string departureDate, string currencyCode, bool oneWay, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "analytics/itinerary-price-metrics?originIataCode=" + (originIataCode==null? "" : System.Uri.EscapeDataString(originIataCode))+"&destinationIataCode=" + (destinationIataCode==null? "" : System.Uri.EscapeDataString(destinationIataCode))+"&departureDate=" + (departureDate==null? "" : System.Uri.EscapeDataString(departureDate))+"&currencyCode=" + (currencyCode==null? "" : System.Uri.EscapeDataString(currencyCode))+"&oneWay="+oneWay;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
