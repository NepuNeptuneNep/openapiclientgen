//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A metric actively restricted in creating the report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActiveMetricRestriction
	{
		
		/// <summary>
		/// The name of the restricted metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		/// <summary>
		/// The reason for this metric's restriction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictedMetricTypes")]
		public string[] RestrictedMetricTypes { get; set; }
	}
	
	/// <summary>
	/// An audience export is a list of users in an audience at the time of the list's creation. One audience may have multiple audience exports created for different days.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudienceExport
	{
		
		/// <summary>
		/// Required. The audience resource name. This resource name identifies the audience being listed and is shared between the Analytics Data & Admin APIs. Format: `properties/{property}/audiences/{audience}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audience")]
		public string Audience { get; set; }
		
		/// <summary>
		/// Output only. The descriptive display name for this audience. For example, "Purchasers".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceDisplayName")]
		public string AudienceDisplayName { get; set; }
		
		/// <summary>
		/// Output only. The time when CreateAudienceExport was called and the AudienceExport began the `CREATING` state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beginCreatingTime")]
		public string BeginCreatingTime { get; set; }
		
		/// <summary>
		/// Output only. The total quota tokens charged during creation of the AudienceExport. Because this token count is based on activity from the `CREATING` state, this tokens charged will be fixed once an AudienceExport enters the `ACTIVE` or `FAILED` states.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationQuotaTokensCharged")]
		public System.Nullable<System.Int32> CreationQuotaTokensCharged { get; set; }
		
		/// <summary>
		/// Required. The dimensions requested and displayed in the query response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public V1betaAudienceDimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Output only. Error message is populated when an audience export fails during creation. A common reason for such a failure is quota exhaustion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Output only. Identifier. The audience export resource name assigned during creation. This resource name identifies this `AudienceExport`. Format: `properties/{property}/audienceExports/{audience_export}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The percentage completed for this audience export ranging between 0 to 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentageCompleted")]
		public System.Nullable<System.Double> PercentageCompleted { get; set; }
		
		/// <summary>
		/// Output only. The total number of rows in the AudienceExport result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowCount")]
		public System.Nullable<System.Int32> RowCount { get; set; }
		
		/// <summary>
		/// Output only. The current state for this AudienceExport.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AudienceExportState> State { get; set; }
	}
	
	/// <summary>
	/// An audience dimension is a user attribute. Specific user attributed are requested and then later returned in the `QueryAudienceExportResponse`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class V1betaAudienceDimension
	{
		
		/// <summary>
		/// Optional. The API name of the dimension. See the [API Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-api-schema#dimensions) for the list of dimension names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionName")]
		public string DimensionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudienceExportState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// This metadata is currently blank.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudienceListMetadata
	{
	}
	
	/// <summary>
	/// The batch request containing multiple pivot report requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchRunPivotReportsRequest
	{
		
		/// <summary>
		/// Individual requests. Each request has a separate pivot report response. Each batch request is allowed up to 5 requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public RunPivotReportRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// The request to generate a pivot report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunPivotReportRequest
	{
		
		/// <summary>
		/// The specification of cohorts for a cohort report. Cohort reports create a time series of user retention for the cohort. For example, you could select the cohort of users that were acquired in the first week of September and follow that cohort for the next six weeks. Selecting the users acquired in the first week of September cohort is specified in the `cohort` object. Following that cohort for the next six weeks is specified in the `cohortsRange` object. For examples, see [Cohort Report Examples](https://developers.google.com/analytics/devguides/reporting/data/v1/advanced#cohort_report_examples). The report response could show a weekly time series where say your app has retained 60% of this cohort after three weeks and 25% of this cohort after six weeks. These two percentages can be calculated by the metric `cohortActiveUsers/cohortTotalUsers` and will be separate rows in the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cohortSpec")]
		public CohortSpec CohortSpec { get; set; }
		
		/// <summary>
		/// A currency code in ISO4217 format, such as "AED", "USD", "JPY". If the field is empty, the report uses the property's default currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The date range to retrieve event data for the report. If multiple date ranges are specified, event data from each date range is used in the report. A special dimension with field name "dateRange" can be included in a Pivot's field names; if included, the report compares between date ranges. In a cohort request, this `dateRanges` must be unspecified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRanges")]
		public DateRange[] DateRanges { get; set; }
		
		/// <summary>
		/// To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilter")]
		public FilterExpression DimensionFilter { get; set; }
		
		/// <summary>
		/// The dimensions requested. All defined dimensions must be used by one of the following: dimension_expression, dimension_filter, pivots, order_bys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// If false or unspecified, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. Regardless of this `keep_empty_rows` setting, only data recorded by the Google Analytics (GA4) property can be displayed in a report. For example if a property never logs a `purchase` event, then a query for the `eventName` dimension and `eventCount` metric will not have a row eventName: "purchase" and eventCount: 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepEmptyRows")]
		public System.Nullable<System.Boolean> KeepEmptyRows { get; set; }
		
		/// <summary>
		/// To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricFilter")]
		public FilterExpression MetricFilter { get; set; }
		
		/// <summary>
		/// The metrics requested, at least one metric needs to be specified. All defined metrics must be used by one of the following: metric_expression, metric_filter, order_bys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
		
		/// <summary>
		/// Describes the visual format of the report's dimensions in columns or rows. The union of the fieldNames (dimension names) in all pivots must be a subset of dimension names defined in Dimensions. No two pivots can share a dimension. A dimension is only visible if it appears in a pivot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivots")]
		public Pivot[] Pivots { get; set; }
		
		/// <summary>
		/// A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Within a batch request, this property should either be unspecified or consistent with the batch-level property. Example: properties/1234
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="property")]
		public string Property { get; set; }
		
		/// <summary>
		/// Toggles whether to return the current state of this Analytics Property's quota. Quota is returned in [PropertyQuota](#PropertyQuota).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnPropertyQuota")]
		public System.Nullable<System.Boolean> ReturnPropertyQuota { get; set; }
	}
	
	/// <summary>
	/// The specification of cohorts for a cohort report. Cohort reports create a time series of user retention for the cohort. For example, you could select the cohort of users that were acquired in the first week of September and follow that cohort for the next six weeks. Selecting the users acquired in the first week of September cohort is specified in the `cohort` object. Following that cohort for the next six weeks is specified in the `cohortsRange` object. For examples, see [Cohort Report Examples](https://developers.google.com/analytics/devguides/reporting/data/v1/advanced#cohort_report_examples). The report response could show a weekly time series where say your app has retained 60% of this cohort after three weeks and 25% of this cohort after six weeks. These two percentages can be calculated by the metric `cohortActiveUsers/cohortTotalUsers` and will be separate rows in the report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CohortSpec
	{
		
		/// <summary>
		/// Optional settings of a cohort report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cohortReportSettings")]
		public CohortReportSettings CohortReportSettings { get; set; }
		
		/// <summary>
		/// Defines the selection criteria to group users into cohorts. Most cohort reports define only a single cohort. If multiple cohorts are specified, each cohort can be recognized in the report by their name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cohorts")]
		public Cohort[] Cohorts { get; set; }
		
		/// <summary>
		/// Configures the extended reporting date range for a cohort report. Specifies an offset duration to follow the cohorts over.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cohortsRange")]
		public CohortsRange CohortsRange { get; set; }
	}
	
	/// <summary>
	/// Optional settings of a cohort report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CohortReportSettings
	{
		
		/// <summary>
		/// If true, accumulates the result from first touch day to the end day. Not supported in `RunReportRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accumulate")]
		public System.Nullable<System.Boolean> Accumulate { get; set; }
	}
	
	/// <summary>
	/// Defines a cohort selection criteria. A cohort is a group of users who share a common characteristic. For example, users with the same `firstSessionDate` belong to the same cohort.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cohort
	{
		
		/// <summary>
		/// A contiguous set of days: `startDate`, `startDate + 1`, ..., `endDate`. Requests are allowed up to 4 date ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// Dimension used by the cohort. Required and only supports `firstSessionDate`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public string Dimension { get; set; }
		
		/// <summary>
		/// Assigns a name to this cohort. The dimension `cohort` is valued to this name in a report response. If set, cannot begin with `cohort_` or `RESERVED_`. If not set, cohorts are named by their zero based index `cohort_0`, `cohort_1`, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A contiguous set of days: `startDate`, `startDate + 1`, ..., `endDate`. Requests are allowed up to 4 date ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateRange
	{
		
		/// <summary>
		/// The inclusive end date for the query in the format `YYYY-MM-DD`. Cannot be before `start_date`. The format `NdaysAgo`, `yesterday`, or `today` is also accepted, and in that case, the date is inferred based on the property's reporting time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// Assigns a name to this date range. The dimension `dateRange` is valued to this name in a report response. If set, cannot begin with `date_range_` or `RESERVED_`. If not set, date ranges are named by their zero based index in the request: `date_range_0`, `date_range_1`, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The inclusive start date for the query in the format `YYYY-MM-DD`. Cannot be after `end_date`. The format `NdaysAgo`, `yesterday`, or `today` is also accepted, and in that case, the date is inferred based on the property's reporting time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
	}
	
	/// <summary>
	/// Configures the extended reporting date range for a cohort report. Specifies an offset duration to follow the cohorts over.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CohortsRange
	{
		
		/// <summary>
		/// Required. `endOffset` specifies the end date of the extended reporting date range for a cohort report. `endOffset` can be any positive integer but is commonly set to 5 to 10 so that reports contain data on the cohort for the next several granularity time periods. If `granularity` is `DAILY`, the `endDate` of the extended reporting date range is `endDate` of the cohort plus `endOffset` days. If `granularity` is `WEEKLY`, the `endDate` of the extended reporting date range is `endDate` of the cohort plus `endOffset * 7` days. If `granularity` is `MONTHLY`, the `endDate` of the extended reporting date range is `endDate` of the cohort plus `endOffset * 30` days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endOffset")]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		/// <summary>
		/// Required. The granularity used to interpret the `startOffset` and `endOffset` for the extended reporting date range for a cohort report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public System.Nullable<CohortsRangeGranularity> Granularity { get; set; }
		
		/// <summary>
		/// `startOffset` specifies the start date of the extended reporting date range for a cohort report. `startOffset` is commonly set to 0 so that reports contain data from the acquisition of the cohort forward. If `granularity` is `DAILY`, the `startDate` of the extended reporting date range is `startDate` of the cohort plus `startOffset` days. If `granularity` is `WEEKLY`, the `startDate` of the extended reporting date range is `startDate` of the cohort plus `startOffset * 7` days. If `granularity` is `MONTHLY`, the `startDate` of the extended reporting date range is `startDate` of the cohort plus `startOffset * 30` days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startOffset")]
		public System.Nullable<System.Int32> StartOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CohortsRangeGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRANULARITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 3,
	}
	
	/// <summary>
	/// To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterExpression
	{
		
		/// <summary>
		/// A list of filter expressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="andGroup")]
		public FilterExpressionList AndGroup { get; set; }
		
		/// <summary>
		/// An expression to filter dimension or metric values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public Filter Filter { get; set; }
		
		/// <summary>
		/// To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notExpression")]
		public FilterExpression NotExpression { get; set; }
		
		/// <summary>
		/// A list of filter expressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orGroup")]
		public FilterExpressionList OrGroup { get; set; }
	}
	
	/// <summary>
	/// A list of filter expressions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterExpressionList
	{
		
		/// <summary>
		/// A list of filter expressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expressions")]
		public FilterExpression[] Expressions { get; set; }
	}
	
	/// <summary>
	/// An expression to filter dimension or metric values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Filter
	{
		
		/// <summary>
		/// To express that the result needs to be between two numbers (inclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="betweenFilter")]
		public BetweenFilter BetweenFilter { get; set; }
		
		/// <summary>
		/// The dimension name or metric name. In most methods, dimensions & metrics can be used for the first time in this field. However in a RunPivotReportRequest, this field must be additionally specified by name in the RunPivotReportRequest's dimensions or metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldName")]
		public string FieldName { get; set; }
		
		/// <summary>
		/// The result needs to be in a list of string values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inListFilter")]
		public InListFilter InListFilter { get; set; }
		
		/// <summary>
		/// Filters for numeric or date values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numericFilter")]
		public NumericFilter NumericFilter { get; set; }
		
		/// <summary>
		/// The filter for string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringFilter")]
		public StringFilter StringFilter { get; set; }
	}
	
	/// <summary>
	/// To express that the result needs to be between two numbers (inclusive).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BetweenFilter
	{
		
		/// <summary>
		/// To represent a number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromValue")]
		public NumericValue FromValue { get; set; }
		
		/// <summary>
		/// To represent a number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toValue")]
		public NumericValue ToValue { get; set; }
	}
	
	/// <summary>
	/// To represent a number.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NumericValue
	{
		
		/// <summary>
		/// Double value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleValue")]
		public System.Nullable<System.Double> DoubleValue { get; set; }
		
		/// <summary>
		/// Integer value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="int64Value")]
		public string Int64Value { get; set; }
	}
	
	/// <summary>
	/// The result needs to be in a list of string values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InListFilter
	{
		
		/// <summary>
		/// If true, the string value is case sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caseSensitive")]
		public System.Nullable<System.Boolean> CaseSensitive { get; set; }
		
		/// <summary>
		/// The list of string values. Must be non-empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// Filters for numeric or date values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NumericFilter
	{
		
		/// <summary>
		/// The operation type for this filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public System.Nullable<NumericFilterOperation> Operation { get; set; }
		
		/// <summary>
		/// To represent a number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public NumericValue Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NumericFilterOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN_OR_EQUAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUAL = 5,
	}
	
	/// <summary>
	/// The filter for string
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StringFilter
	{
		
		/// <summary>
		/// If true, the string value is case sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caseSensitive")]
		public System.Nullable<System.Boolean> CaseSensitive { get; set; }
		
		/// <summary>
		/// The match type for this filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchType")]
		public System.Nullable<StringFilterMatchType> MatchType { get; set; }
		
		/// <summary>
		/// The string value used for the matching.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StringFilterMatchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATCH_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXACT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEGINS_WITH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDS_WITH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_REGEXP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_REGEXP = 6,
	}
	
	/// <summary>
	/// Dimensions are attributes of your data. For example, the dimension city indicates the city from which an event originates. Dimension values in report responses are strings; for example, the city could be "Paris" or "New York". Requests are allowed up to 9 dimensions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dimension
	{
		
		/// <summary>
		/// Used to express a dimension which is the result of a formula of multiple dimensions. Example usages: 1) lower_case(dimension) 2) concatenate(dimension1, symbol, dimension2).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionExpression")]
		public DimensionExpression DimensionExpression { get; set; }
		
		/// <summary>
		/// The name of the dimension. See the [API Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#dimensions) for the list of dimension names supported by core reporting methods such as `runReport` and `batchRunReports`. See [Realtime Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/realtime-api-schema#dimensions) for the list of dimension names supported by the `runRealtimeReport` method. See [Funnel Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/exploration-api-schema#dimensions) for the list of dimension names supported by the `runFunnelReport` method. If `dimensionExpression` is specified, `name` can be any string that you would like within the allowed character set. For example if a `dimensionExpression` concatenates `country` and `city`, you could call that dimension `countryAndCity`. Dimension names that you choose must match the regular expression `^[a-zA-Z0-9_]$`. Dimensions are referenced by `name` in `dimensionFilter`, `orderBys`, `dimensionExpression`, and `pivots`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Used to express a dimension which is the result of a formula of multiple dimensions. Example usages: 1) lower_case(dimension) 2) concatenate(dimension1, symbol, dimension2).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionExpression
	{
		
		/// <summary>
		/// Used to combine dimension values to a single dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concatenate")]
		public ConcatenateExpression Concatenate { get; set; }
		
		/// <summary>
		/// Used to convert a dimension value to a single case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lowerCase")]
		public CaseExpression LowerCase { get; set; }
		
		/// <summary>
		/// Used to convert a dimension value to a single case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upperCase")]
		public CaseExpression UpperCase { get; set; }
	}
	
	/// <summary>
	/// Used to combine dimension values to a single dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConcatenateExpression
	{
		
		/// <summary>
		/// The delimiter placed between dimension names. Delimiters are often single characters such as "|" or "," but can be longer strings. If a dimension value contains the delimiter, both will be present in response with no distinction. For example if dimension 1 value = "US,FR", dimension 2 value = "JP", and delimiter = ",", then the response will contain "US,FR,JP".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delimiter")]
		public string Delimiter { get; set; }
		
		/// <summary>
		/// Names of dimensions. The names must refer back to names in the dimensions field of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionNames")]
		public string[] DimensionNames { get; set; }
	}
	
	/// <summary>
	/// Used to convert a dimension value to a single case.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseExpression
	{
		
		/// <summary>
		/// Name of a dimension. The name must refer back to a name in dimensions field of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionName")]
		public string DimensionName { get; set; }
	}
	
	/// <summary>
	/// The quantitative measurements of a report. For example, the metric `eventCount` is the total number of events. Requests are allowed up to 10 metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metric
	{
		
		/// <summary>
		/// A mathematical expression for derived metrics. For example, the metric Event count per user is `eventCount/totalUsers`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Indicates if a metric is invisible in the report response. If a metric is invisible, the metric will not produce a column in the response, but can be used in `metricFilter`, `orderBys`, or a metric `expression`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invisible")]
		public System.Nullable<System.Boolean> Invisible { get; set; }
		
		/// <summary>
		/// The name of the metric. See the [API Metrics](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#metrics) for the list of metric names supported by core reporting methods such as `runReport` and `batchRunReports`. See [Realtime Metrics](https://developers.google.com/analytics/devguides/reporting/data/v1/realtime-api-schema#metrics) for the list of metric names supported by the `runRealtimeReport` method. See [Funnel Metrics](https://developers.google.com/analytics/devguides/reporting/data/v1/exploration-api-schema#metrics) for the list of metric names supported by the `runFunnelReport` method. If `expression` is specified, `name` can be any string that you would like within the allowed character set. For example if `expression` is `screenPageViews/sessions`, you could call that metric's name = `viewsPerSession`. Metric names that you choose must match the regular expression `^[a-zA-Z0-9_]$`. Metrics are referenced by `name` in `metricFilter`, `orderBys`, and metric `expression`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Describes the visible dimension columns and rows in the report response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pivot
	{
		
		/// <summary>
		/// Dimension names for visible columns in the report response. Including "dateRange" produces a date range column; for each row in the response, dimension values in the date range column will indicate the corresponding date range from the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldNames")]
		public string[] FieldNames { get; set; }
		
		/// <summary>
		/// The number of unique combinations of dimension values to return in this pivot. The `limit` parameter is required. A `limit` of 10,000 is common for single pivot requests. The product of the `limit` for each `pivot` in a `RunPivotReportRequest` must not exceed 250,000. For example, a two pivot request with `limit: 1000` in each pivot will fail because the product is `1,000,000`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public string Limit { get; set; }
		
		/// <summary>
		/// Aggregate the metrics by dimensions in this pivot using the specified metric_aggregations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricAggregations")]
		public string[] MetricAggregations { get; set; }
		
		/// <summary>
		/// The row count of the start row. The first row is counted as row 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		/// <summary>
		/// Specifies how dimensions are ordered in the pivot. In the first Pivot, the OrderBys determine Row and PivotDimensionHeader ordering; in subsequent Pivots, the OrderBys determine only PivotDimensionHeader ordering. Dimensions specified in these OrderBys must be a subset of Pivot.field_names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderBys")]
		public OrderBy[] OrderBys { get; set; }
	}
	
	/// <summary>
	/// Order bys define how rows will be sorted in the response. For example, ordering rows by descending event count is one ordering, and ordering rows by the event name string is a different ordering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderBy
	{
		
		/// <summary>
		/// If true, sorts by descending order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public System.Nullable<System.Boolean> Desc { get; set; }
		
		/// <summary>
		/// Sorts by dimension values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public DimensionOrderBy Dimension { get; set; }
		
		/// <summary>
		/// Sorts by metric values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public MetricOrderBy Metric { get; set; }
		
		/// <summary>
		/// Sorts by a pivot column group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivot")]
		public PivotOrderBy Pivot { get; set; }
	}
	
	/// <summary>
	/// Sorts by dimension values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionOrderBy
	{
		
		/// <summary>
		/// A dimension name in the request to order by.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionName")]
		public string DimensionName { get; set; }
		
		/// <summary>
		/// Controls the rule for dimension value ordering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderType")]
		public System.Nullable<DimensionOrderByOrderType> OrderType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DimensionOrderByOrderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORDER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALPHANUMERIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASE_INSENSITIVE_ALPHANUMERIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC = 3,
	}
	
	/// <summary>
	/// Sorts by metric values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricOrderBy
	{
		
		/// <summary>
		/// A metric name in the request to order by.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
	}
	
	/// <summary>
	/// Sorts by a pivot column group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotOrderBy
	{
		
		/// <summary>
		/// In the response to order by, order rows by this column. Must be a metric name from the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		/// <summary>
		/// Used to select a dimension name and value pivot. If multiple pivot selections are given, the sort occurs on rows where all pivot selection dimension name and value pairs match the row's dimension name and value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivotSelections")]
		public PivotSelection[] PivotSelections { get; set; }
	}
	
	/// <summary>
	/// A pair of dimension names and values. Rows with this dimension pivot pair are ordered by the metric's value. For example if pivots = {{"browser", "Chrome"}} and metric_name = "Sessions", then the rows will be sorted based on Sessions in Chrome. ---------|----------|----------------|----------|---------------- | Chrome | Chrome | Safari | Safari ---------|----------|----------------|----------|---------------- Country | Sessions | Pages/Sessions | Sessions | Pages/Sessions ---------|----------|----------------|----------|---------------- US | 2 | 2 | 3 | 1 ---------|----------|----------------|----------|---------------- Canada | 3 | 1 | 4 | 1 ---------|----------|----------------|----------|----------------
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotSelection
	{
		
		/// <summary>
		/// Must be a dimension name from the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionName")]
		public string DimensionName { get; set; }
		
		/// <summary>
		/// Order by only when the named dimension is this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionValue")]
		public string DimensionValue { get; set; }
	}
	
	/// <summary>
	/// The batch response containing multiple pivot reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchRunPivotReportsResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this message is. This `kind` is always the fixed string "analyticsData#batchRunPivotReports". Useful to distinguish between response types in JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Individual responses. Each response has a separate pivot report request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivotReports")]
		public RunPivotReportResponse[] PivotReports { get; set; }
	}
	
	/// <summary>
	/// The response pivot report table corresponding to a pivot request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunPivotReportResponse
	{
		
		/// <summary>
		/// Aggregation of metric values. Can be totals, minimums, or maximums. The returned aggregations are controlled by the metric_aggregations in the pivot. The type of aggregation returned in each row is shown by the dimension_values which are set to "RESERVED_".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregates")]
		public Row[] Aggregates { get; set; }
		
		/// <summary>
		/// Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionHeaders")]
		public DimensionHeader[] DimensionHeaders { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this message is. This `kind` is always the fixed string "analyticsData#runPivotReport". Useful to distinguish between response types in JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Response's metadata carrying additional information about the report content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ResponseMetaData Metadata { get; set; }
		
		/// <summary>
		/// Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricHeaders")]
		public MetricHeader[] MetricHeaders { get; set; }
		
		/// <summary>
		/// Summarizes the columns and rows created by a pivot. Each pivot in the request produces one header in the response. If we have a request like this: "pivots": [{ "fieldNames": ["country", "city"] }, { "fieldNames": "eventName" }] We will have the following `pivotHeaders` in the response: "pivotHeaders" : [{ "dimensionHeaders": [{ "dimensionValues": [ { "value": "United Kingdom" }, { "value": "London" } ] }, { "dimensionValues": [ { "value": "Japan" }, { "value": "Osaka" } ] }] }, { "dimensionHeaders": [{ "dimensionValues": [{ "value": "session_start" }] }, { "dimensionValues": [{ "value": "scroll" }] }] }]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivotHeaders")]
		public PivotHeader[] PivotHeaders { get; set; }
		
		/// <summary>
		/// Current state of all quotas for this Analytics Property. If any quota for a property is exhausted, all requests to that property will return Resource Exhausted errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyQuota")]
		public PropertyQuota PropertyQuota { get; set; }
		
		/// <summary>
		/// Rows of dimension value combinations and metric values in the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public Row[] Rows { get; set; }
	}
	
	/// <summary>
	/// Report data for each row. For example if RunReportRequest contains: ```none "dimensions": [ { "name": "eventName" }, { "name": "countryId" } ], "metrics": [ { "name": "eventCount" } ] ``` One row with 'in_app_purchase' as the eventName, 'JP' as the countryId, and 15 as the eventCount, would be: ```none "dimensionValues": [ { "value": "in_app_purchase" }, { "value": "JP" } ], "metricValues": [ { "value": "15" } ] ```
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Row
	{
		
		/// <summary>
		/// List of requested dimension values. In a PivotReport, dimension_values are only listed for dimensions included in a pivot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionValues")]
		public DimensionValue[] DimensionValues { get; set; }
		
		/// <summary>
		/// List of requested visible metric values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricValues")]
		public MetricValue[] MetricValues { get; set; }
	}
	
	/// <summary>
	/// The value of a dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionValue
	{
		
		/// <summary>
		/// Value as a string if the dimension type is a string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The value of a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricValue
	{
		
		/// <summary>
		/// Measurement value. See MetricHeader for type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes a dimension column in the report. Dimensions requested in a report produce column entries within rows and DimensionHeaders. However, dimensions used exclusively within filters or expressions do not produce columns in a report; correspondingly, those dimensions do not produce headers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionHeader
	{
		
		/// <summary>
		/// The dimension's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Response's metadata carrying additional information about the report content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponseMetaData
	{
		
		/// <summary>
		/// The currency code used in this report. Intended to be used in formatting currency metrics like `purchaseRevenue` for visualization. If currency_code was specified in the request, this response parameter will echo the request parameter; otherwise, this response parameter is the property's current currency_code. Currency codes are string encodings of currency types from the ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217); for example "USD", "EUR", "JPY". To learn more, see https://support.google.com/analytics/answer/9796179.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// If true, indicates some buckets of dimension combinations are rolled into "(other)" row. This can happen for high cardinality reports. The metadata parameter dataLossFromOtherRow is populated based on the aggregated data table used in the report. The parameter will be accurately populated regardless of the filters and limits in the report. For example, the (other) row could be dropped from the report because the request contains a filter on sessionSource = google. This parameter will still be populated if data loss from other row was present in the input aggregate data used to generate this report. To learn more, see [About the (other) row and data sampling](https://support.google.com/analytics/answer/13208658#reports).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataLossFromOtherRow")]
		public System.Nullable<System.Boolean> DataLossFromOtherRow { get; set; }
		
		/// <summary>
		/// If empty reason is specified, the report is empty for this reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emptyReason")]
		public string EmptyReason { get; set; }
		
		/// <summary>
		/// If this report results is [sampled](https://support.google.com/analytics/answer/13331292), this describes the percentage of events used in this report. One `samplingMetadatas` is populated for each date range. Each `samplingMetadatas` corresponds to a date range in order that date ranges were specified in the request. However if the results are not sampled, this field will not be defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplingMetadatas")]
		public SamplingMetadata[] SamplingMetadatas { get; set; }
		
		/// <summary>
		/// The schema restrictions actively enforced in creating this report. To learn more, see [Access and data-restriction management](https://support.google.com/analytics/answer/10851388).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaRestrictionResponse")]
		public SchemaRestrictionResponse SchemaRestrictionResponse { get; set; }
		
		/// <summary>
		/// If `subjectToThresholding` is true, this report is subject to thresholding and only returns data that meets the minimum aggregation thresholds. It is possible for a request to be subject to thresholding thresholding and no data is absent from the report, and this happens when all data is above the thresholds. To learn more, see [Data thresholds](https://support.google.com/analytics/answer/9383630).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectToThresholding")]
		public System.Nullable<System.Boolean> SubjectToThresholding { get; set; }
		
		/// <summary>
		/// The property's current timezone. Intended to be used to interpret time-based dimensions like `hour` and `minute`. Formatted as strings from the IANA Time Zone database (https://www.iana.org/time-zones); for example "America/New_York" or "Asia/Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// If this report results is [sampled](https://support.google.com/analytics/answer/13331292), this describes the percentage of events used in this report. Sampling is the practice of analyzing a subset of all data in order to uncover the meaningful information in the larger data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SamplingMetadata
	{
		
		/// <summary>
		/// The total number of events read in this sampled report for a date range. This is the size of the subset this property's data that was analyzed in this report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplesReadCount")]
		public string SamplesReadCount { get; set; }
		
		/// <summary>
		/// The total number of events present in this property's data that could have been analyzed in this report for a date range. Sampling uncovers the meaningful information about the larger data set, and this is the size of the larger data set. To calculate the percentage of available data that was used in this report, compute `samplesReadCount/samplingSpaceSize`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplingSpaceSize")]
		public string SamplingSpaceSize { get; set; }
	}
	
	/// <summary>
	/// The schema restrictions actively enforced in creating this report. To learn more, see [Access and data-restriction management](https://support.google.com/analytics/answer/10851388).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchemaRestrictionResponse
	{
		
		/// <summary>
		/// All restrictions actively enforced in creating the report. For example, `purchaseRevenue` always has the restriction type `REVENUE_DATA`. However, this active response restriction is only populated if the user's custom role disallows access to `REVENUE_DATA`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeMetricRestrictions")]
		public ActiveMetricRestriction[] ActiveMetricRestrictions { get; set; }
	}
	
	/// <summary>
	/// Describes a metric column in the report. Visible metrics requested in a report produce column entries within rows and MetricHeaders. However, metrics used exclusively within filters or expressions do not produce columns in a report; correspondingly, those metrics do not produce headers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricHeader
	{
		
		/// <summary>
		/// The metric's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The metric's data type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<MetricHeaderType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetricHeaderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_INTEGER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_FLOAT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_SECONDS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_MILLISECONDS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_MINUTES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_HOURS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_STANDARD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_CURRENCY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_FEET = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_MILES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_METERS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_KILOMETERS = 12,
	}
	
	/// <summary>
	/// Dimensions' values in a single pivot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotHeader
	{
		
		/// <summary>
		/// The size is the same as the cardinality of the corresponding dimension combinations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivotDimensionHeaders")]
		public PivotDimensionHeader[] PivotDimensionHeaders { get; set; }
		
		/// <summary>
		/// The cardinality of the pivot. The total number of rows for this pivot's fields regardless of how the parameters `offset` and `limit` are specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowCount")]
		public System.Nullable<System.Int32> RowCount { get; set; }
	}
	
	/// <summary>
	/// Summarizes dimension values from a row for this pivot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotDimensionHeader
	{
		
		/// <summary>
		/// Values of multiple dimensions in a pivot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionValues")]
		public DimensionValue[] DimensionValues { get; set; }
	}
	
	/// <summary>
	/// Current state of all quotas for this Analytics Property. If any quota for a property is exhausted, all requests to that property will return Resource Exhausted errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyQuota
	{
		
		/// <summary>
		/// Current state for a particular quota group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrentRequests")]
		public QuotaStatus ConcurrentRequests { get; set; }
		
		/// <summary>
		/// Current state for a particular quota group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="potentiallyThresholdedRequestsPerHour")]
		public QuotaStatus PotentiallyThresholdedRequestsPerHour { get; set; }
		
		/// <summary>
		/// Current state for a particular quota group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverErrorsPerProjectPerHour")]
		public QuotaStatus ServerErrorsPerProjectPerHour { get; set; }
		
		/// <summary>
		/// Current state for a particular quota group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokensPerDay")]
		public QuotaStatus TokensPerDay { get; set; }
		
		/// <summary>
		/// Current state for a particular quota group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokensPerHour")]
		public QuotaStatus TokensPerHour { get; set; }
		
		/// <summary>
		/// Current state for a particular quota group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokensPerProjectPerHour")]
		public QuotaStatus TokensPerProjectPerHour { get; set; }
	}
	
	/// <summary>
	/// Current state for a particular quota group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QuotaStatus
	{
		
		/// <summary>
		/// Quota consumed by this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumed")]
		public System.Nullable<System.Int32> Consumed { get; set; }
		
		/// <summary>
		/// Quota remaining after this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remaining")]
		public System.Nullable<System.Int32> Remaining { get; set; }
	}
	
	/// <summary>
	/// The batch request containing multiple report requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchRunReportsRequest
	{
		
		/// <summary>
		/// Individual requests. Each request has a separate report response. Each batch request is allowed up to 5 requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public RunReportRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// The request to generate a report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunReportRequest
	{
		
		/// <summary>
		/// The specification of cohorts for a cohort report. Cohort reports create a time series of user retention for the cohort. For example, you could select the cohort of users that were acquired in the first week of September and follow that cohort for the next six weeks. Selecting the users acquired in the first week of September cohort is specified in the `cohort` object. Following that cohort for the next six weeks is specified in the `cohortsRange` object. For examples, see [Cohort Report Examples](https://developers.google.com/analytics/devguides/reporting/data/v1/advanced#cohort_report_examples). The report response could show a weekly time series where say your app has retained 60% of this cohort after three weeks and 25% of this cohort after six weeks. These two percentages can be calculated by the metric `cohortActiveUsers/cohortTotalUsers` and will be separate rows in the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cohortSpec")]
		public CohortSpec CohortSpec { get; set; }
		
		/// <summary>
		/// A currency code in ISO4217 format, such as "AED", "USD", "JPY". If the field is empty, the report uses the property's default currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Date ranges of data to read. If multiple date ranges are requested, each response row will contain a zero based date range index. If two date ranges overlap, the event data for the overlapping days is included in the response rows for both date ranges. In a cohort request, this `dateRanges` must be unspecified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRanges")]
		public DateRange[] DateRanges { get; set; }
		
		/// <summary>
		/// To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilter")]
		public FilterExpression DimensionFilter { get; set; }
		
		/// <summary>
		/// The dimensions requested and displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// If false or unspecified, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. Regardless of this `keep_empty_rows` setting, only data recorded by the Google Analytics (GA4) property can be displayed in a report. For example if a property never logs a `purchase` event, then a query for the `eventName` dimension and `eventCount` metric will not have a row eventName: "purchase" and eventCount: 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepEmptyRows")]
		public System.Nullable<System.Boolean> KeepEmptyRows { get; set; }
		
		/// <summary>
		/// The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be positive. The API can also return fewer rows than the requested `limit`, if there aren't as many dimension values as the `limit`. For instance, there are fewer than 300 possible values for the dimension `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you set `limit` to a higher value. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public string Limit { get; set; }
		
		/// <summary>
		/// Aggregation of metrics. Aggregated metric values will be shown in rows where the dimension_values are set to "RESERVED_(MetricAggregation)".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricAggregations")]
		public string[] MetricAggregations { get; set; }
		
		/// <summary>
		/// To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricFilter")]
		public FilterExpression MetricFilter { get; set; }
		
		/// <summary>
		/// The metrics requested and displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
		
		/// <summary>
		/// The row count of the start row. The first row is counted as row 0. When paging, the first request does not specify offset; or equivalently, sets offset to 0; the first request returns the first `limit` of rows. The second request sets offset to the `limit` of the first request; the second request returns the second `limit` of rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		/// <summary>
		/// Specifies how rows are ordered in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderBys")]
		public OrderBy[] OrderBys { get; set; }
		
		/// <summary>
		/// A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Within a batch request, this property should either be unspecified or consistent with the batch-level property. Example: properties/1234
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="property")]
		public string Property { get; set; }
		
		/// <summary>
		/// Toggles whether to return the current state of this Analytics Property's quota. Quota is returned in [PropertyQuota](#PropertyQuota).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnPropertyQuota")]
		public System.Nullable<System.Boolean> ReturnPropertyQuota { get; set; }
	}
	
	/// <summary>
	/// The batch response containing multiple reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchRunReportsResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this message is. This `kind` is always the fixed string "analyticsData#batchRunReports". Useful to distinguish between response types in JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Individual responses. Each response has a separate report request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reports")]
		public RunReportResponse[] Reports { get; set; }
	}
	
	/// <summary>
	/// The response report table corresponding to a request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunReportResponse
	{
		
		/// <summary>
		/// Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionHeaders")]
		public DimensionHeader[] DimensionHeaders { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this message is. This `kind` is always the fixed string "analyticsData#runReport". Useful to distinguish between response types in JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// If requested, the maximum values of metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximums")]
		public Row[] Maximums { get; set; }
		
		/// <summary>
		/// Response's metadata carrying additional information about the report content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ResponseMetaData Metadata { get; set; }
		
		/// <summary>
		/// Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricHeaders")]
		public MetricHeader[] MetricHeaders { get; set; }
		
		/// <summary>
		/// If requested, the minimum values of metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimums")]
		public Row[] Minimums { get; set; }
		
		/// <summary>
		/// Current state of all quotas for this Analytics Property. If any quota for a property is exhausted, all requests to that property will return Resource Exhausted errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyQuota")]
		public PropertyQuota PropertyQuota { get; set; }
		
		/// <summary>
		/// The total number of rows in the query result. `rowCount` is independent of the number of rows returned in the response, the `limit` request parameter, and the `offset` request parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API request, the response will contain `rowCount` of 175 but only 50 rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowCount")]
		public System.Nullable<System.Int32> RowCount { get; set; }
		
		/// <summary>
		/// Rows of dimension value combinations and metric values in the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public Row[] Rows { get; set; }
		
		/// <summary>
		/// If requested, the totaled values of metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totals")]
		public Row[] Totals { get; set; }
	}
	
	/// <summary>
	/// The request for compatibility information for a report's dimensions and metrics. Check compatibility provides a preview of the compatibility of a report; fields shared with the `runReport` request should be the same values as in your `runReport` request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckCompatibilityRequest
	{
		
		/// <summary>
		/// Filters the dimensions and metrics in the response to just this compatibility. Commonly used as `”compatibilityFilter”: “COMPATIBLE”` to only return compatible dimensions & metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibilityFilter")]
		public System.Nullable<CheckCompatibilityRequestCompatibilityFilter> CompatibilityFilter { get; set; }
		
		/// <summary>
		/// To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilter")]
		public FilterExpression DimensionFilter { get; set; }
		
		/// <summary>
		/// The dimensions in this report. `dimensions` should be the same value as in your `runReport` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricFilter")]
		public FilterExpression MetricFilter { get; set; }
		
		/// <summary>
		/// The metrics in this report. `metrics` should be the same value as in your `runReport` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CheckCompatibilityRequestCompatibilityFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPATIBILITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPATIBLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPATIBLE = 2,
	}
	
	/// <summary>
	/// The compatibility response with the compatibility of each dimension & metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckCompatibilityResponse
	{
		
		/// <summary>
		/// The compatibility of each dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionCompatibilities")]
		public DimensionCompatibility[] DimensionCompatibilities { get; set; }
		
		/// <summary>
		/// The compatibility of each metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricCompatibilities")]
		public MetricCompatibility[] MetricCompatibilities { get; set; }
	}
	
	/// <summary>
	/// The compatibility for a single dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionCompatibility
	{
		
		/// <summary>
		/// The compatibility of this dimension. If the compatibility is COMPATIBLE, this dimension can be successfully added to the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibility")]
		public CheckCompatibilityRequestCompatibilityFilter Compatibility { get; set; }
		
		/// <summary>
		/// Explains a dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionMetadata")]
		public DimensionMetadata DimensionMetadata { get; set; }
	}
	
	/// <summary>
	/// Explains a dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionMetadata
	{
		
		/// <summary>
		/// This dimension's name. Useable in [Dimension](#Dimension)'s `name`. For example, `eventName`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiName")]
		public string ApiName { get; set; }
		
		/// <summary>
		/// The display name of the category that this dimension belongs to. Similar dimensions and metrics are categorized together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// True if the dimension is a custom dimension for this property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDefinition")]
		public System.Nullable<System.Boolean> CustomDefinition { get; set; }
		
		/// <summary>
		/// Still usable but deprecated names for this dimension. If populated, this dimension is available by either `apiName` or one of `deprecatedApiNames` for a period of time. After the deprecation period, the dimension will be available only by `apiName`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecatedApiNames")]
		public string[] DeprecatedApiNames { get; set; }
		
		/// <summary>
		/// Description of how this dimension is used and calculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// This dimension's name within the Google Analytics user interface. For example, `Event name`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uiName")]
		public string UiName { get; set; }
	}
	
	/// <summary>
	/// The compatibility for a single metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricCompatibility
	{
		
		/// <summary>
		/// The compatibility of this metric. If the compatibility is COMPATIBLE, this metric can be successfully added to the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibility")]
		public CheckCompatibilityRequestCompatibilityFilter Compatibility { get; set; }
		
		/// <summary>
		/// Explains a metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricMetadata")]
		public MetricMetadata MetricMetadata { get; set; }
	}
	
	/// <summary>
	/// Explains a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricMetadata
	{
		
		/// <summary>
		/// A metric name. Useable in [Metric](#Metric)'s `name`. For example, `eventCount`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiName")]
		public string ApiName { get; set; }
		
		/// <summary>
		/// If reasons are specified, your access is blocked to this metric for this property. API requests from you to this property for this metric will succeed; however, the report will contain only zeros for this metric. API requests with metric filters on blocked metrics will fail. If reasons are empty, you have access to this metric. To learn more, see [Access and data-restriction management](https://support.google.com/analytics/answer/10851388).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockedReasons")]
		public string[] BlockedReasons { get; set; }
		
		/// <summary>
		/// The display name of the category that this metrics belongs to. Similar dimensions and metrics are categorized together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// True if the metric is a custom metric for this property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDefinition")]
		public System.Nullable<System.Boolean> CustomDefinition { get; set; }
		
		/// <summary>
		/// Still usable but deprecated names for this metric. If populated, this metric is available by either `apiName` or one of `deprecatedApiNames` for a period of time. After the deprecation period, the metric will be available only by `apiName`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecatedApiNames")]
		public string[] DeprecatedApiNames { get; set; }
		
		/// <summary>
		/// Description of how this metric is used and calculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The mathematical expression for this derived metric. Can be used in [Metric](#Metric)'s `expression` field for equivalent reports. Most metrics are not expressions, and for non-expressions, this field is empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// The type of this metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public MetricHeaderType Type { get; set; }
		
		/// <summary>
		/// This metric's name within the Google Analytics user interface. For example, `Event count`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uiName")]
		public string UiName { get; set; }
	}
	
	/// <summary>
	/// A list of all audience exports for a property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAudienceExportsResponse
	{
		
		/// <summary>
		/// Each audience export for a property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceExports")]
		public AudienceExport[] AudienceExports { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The dimensions, metrics and comparisons currently accepted in reporting methods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metadata
	{
		
		/// <summary>
		/// The dimension descriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public DimensionMetadata[] Dimensions { get; set; }
		
		/// <summary>
		/// The metric descriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public MetricMetadata[] Metrics { get; set; }
		
		/// <summary>
		/// Resource name of this metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A contiguous set of minutes: `startMinutesAgo`, `startMinutesAgo + 1`, ..., `endMinutesAgo`. Requests are allowed up to 2 minute ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MinuteRange
	{
		
		/// <summary>
		/// The inclusive end minute for the query as a number of minutes before now. Cannot be before `startMinutesAgo`. For example, `"endMinutesAgo": 15` specifies the report should include event data from prior to 15 minutes ago. If unspecified, `endMinutesAgo` is defaulted to 0. Standard Analytics properties can request any minute in the last 30 minutes of event data (`endMinutesAgo <= 29`), and 360 Analytics properties can request any minute in the last 60 minutes of event data (`endMinutesAgo <= 59`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endMinutesAgo")]
		public System.Nullable<System.Int32> EndMinutesAgo { get; set; }
		
		/// <summary>
		/// Assigns a name to this minute range. The dimension `dateRange` is valued to this name in a report response. If set, cannot begin with `date_range_` or `RESERVED_`. If not set, minute ranges are named by their zero based index in the request: `date_range_0`, `date_range_1`, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The inclusive start minute for the query as a number of minutes before now. For example, `"startMinutesAgo": 29` specifies the report should include event data from 29 minutes ago and after. Cannot be after `endMinutesAgo`. If unspecified, `startMinutesAgo` is defaulted to 29. Standard Analytics properties can request up to the last 30 minutes of event data (`startMinutesAgo <= 29`), and 360 Analytics properties can request up to the last 60 minutes of event data (`startMinutesAgo <= 59`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startMinutesAgo")]
		public System.Nullable<System.Int32> StartMinutesAgo { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A request to list users in an audience export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryAudienceExportRequest
	{
		
		/// <summary>
		/// Optional. The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be positive. The API can also return fewer rows than the requested `limit`, if there aren't as many dimension values as the `limit`. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public string Limit { get; set; }
		
		/// <summary>
		/// Optional. The row count of the start row. The first row is counted as row 0. When paging, the first request does not specify offset; or equivalently, sets offset to 0; the first request returns the first `limit` of rows. The second request sets offset to the `limit` of the first request; the second request returns the second `limit` of rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
	}
	
	/// <summary>
	/// A list of users in an audience export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryAudienceExportResponse
	{
		
		/// <summary>
		/// An audience export is a list of users in an audience at the time of the list's creation. One audience may have multiple audience exports created for different days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceExport")]
		public AudienceExport AudienceExport { get; set; }
		
		/// <summary>
		/// Rows for each user in an audience export. The number of rows in this response will be less than or equal to request's page size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceRows")]
		public V1betaAudienceRow[] AudienceRows { get; set; }
		
		/// <summary>
		/// The total number of rows in the AudienceExport result. `rowCount` is independent of the number of rows returned in the response, the `limit` request parameter, and the `offset` request parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API request, the response will contain `rowCount` of 175 but only 50 rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowCount")]
		public System.Nullable<System.Int32> RowCount { get; set; }
	}
	
	/// <summary>
	/// Dimension value attributes for the audience user row.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class V1betaAudienceRow
	{
		
		/// <summary>
		/// Each dimension value attribute for an audience user. One dimension value will be added for each dimension column requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionValues")]
		public V1betaAudienceDimensionValue[] DimensionValues { get; set; }
	}
	
	/// <summary>
	/// The value of a dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class V1betaAudienceDimensionValue
	{
		
		/// <summary>
		/// Value as a string if the dimension type is a string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The request to generate a realtime report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunRealtimeReportRequest
	{
		
		/// <summary>
		/// To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilter")]
		public FilterExpression DimensionFilter { get; set; }
		
		/// <summary>
		/// The dimensions requested and displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be positive. The API can also return fewer rows than the requested `limit`, if there aren't as many dimension values as the `limit`. For instance, there are fewer than 300 possible values for the dimension `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you set `limit` to a higher value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public string Limit { get; set; }
		
		/// <summary>
		/// Aggregation of metrics. Aggregated metric values will be shown in rows where the dimension_values are set to "RESERVED_(MetricAggregation)".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricAggregations")]
		public string[] MetricAggregations { get; set; }
		
		/// <summary>
		/// To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricFilter")]
		public FilterExpression MetricFilter { get; set; }
		
		/// <summary>
		/// The metrics requested and displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
		
		/// <summary>
		/// The minute ranges of event data to read. If unspecified, one minute range for the last 30 minutes will be used. If multiple minute ranges are requested, each response row will contain a zero based minute range index. If two minute ranges overlap, the event data for the overlapping minutes is included in the response rows for both minute ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minuteRanges")]
		public MinuteRange[] MinuteRanges { get; set; }
		
		/// <summary>
		/// Specifies how rows are ordered in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderBys")]
		public OrderBy[] OrderBys { get; set; }
		
		/// <summary>
		/// Toggles whether to return the current state of this Analytics Property's Realtime quota. Quota is returned in [PropertyQuota](#PropertyQuota).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnPropertyQuota")]
		public System.Nullable<System.Boolean> ReturnPropertyQuota { get; set; }
	}
	
	/// <summary>
	/// The response realtime report table corresponding to a request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunRealtimeReportResponse
	{
		
		/// <summary>
		/// Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionHeaders")]
		public DimensionHeader[] DimensionHeaders { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this message is. This `kind` is always the fixed string "analyticsData#runRealtimeReport". Useful to distinguish between response types in JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// If requested, the maximum values of metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximums")]
		public Row[] Maximums { get; set; }
		
		/// <summary>
		/// Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricHeaders")]
		public MetricHeader[] MetricHeaders { get; set; }
		
		/// <summary>
		/// If requested, the minimum values of metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimums")]
		public Row[] Minimums { get; set; }
		
		/// <summary>
		/// Current state of all quotas for this Analytics Property. If any quota for a property is exhausted, all requests to that property will return Resource Exhausted errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyQuota")]
		public PropertyQuota PropertyQuota { get; set; }
		
		/// <summary>
		/// The total number of rows in the query result. `rowCount` is independent of the number of rows returned in the response and the `limit` request parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API request, the response will contain `rowCount` of 175 but only 50 rows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowCount")]
		public System.Nullable<System.Int32> RowCount { get; set; }
		
		/// <summary>
		/// Rows of dimension value combinations and metric values in the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public Row[] Rows { get; set; }
		
		/// <summary>
		/// If requested, the totaled values of metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totals")]
		public Row[] Totals { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets configuration metadata about a specific audience export. This method can be used to understand an audience export after it has been created. See [Creating an Audience Export](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics) for an introduction to Audience Exports with examples. Audience Export APIs have some methods at alpha and other methods at beta stability. The intention is to advance methods to beta stability after some feedback and adoption. To give your feedback on this API, complete the [Google Analytics Audience Export API Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
		/// Analyticsdata_properties_audienceExports_get v1beta/{name}
		/// </summary>
		/// <param name="name">Required. The audience export resource name. Format: `properties/{property}/audienceExports/{audience_export}`</param>
		/// <returns>Successful response</returns>
		public async Task<AudienceExport> Analyticsdata_properties_audienceExports_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AudienceExport>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an audience export of users. After creating an audience, the users are not immediately available for exporting. First, a request to `CreateAudienceExport` is necessary to create an audience export of users, and then second, this method is used to retrieve the users in the audience export. See [Creating an Audience Export](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics) for an introduction to Audience Exports with examples. Audiences in Google Analytics 4 allow you to segment your users in the ways that are important to your business. To learn more, see https://support.google.com/analytics/answer/9267572. Audience Export APIs have some methods at alpha and other methods at beta stability. The intention is to advance methods to beta stability after some feedback and adoption. To give your feedback on this API, complete the [Google Analytics Audience Export API Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
		/// Analyticsdata_properties_audienceExports_query v1beta/{name}:query
		/// </summary>
		/// <param name="name">Required. The name of the audience export to retrieve users from. Format: `properties/{property}/audienceExports/{audience_export}`</param>
		/// <returns>Successful response</returns>
		public async Task<QueryAudienceExportResponse> Analyticsdata_properties_audienceExports_queryAsync(string name, QueryAudienceExportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":query";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<QueryAudienceExportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all audience exports for a property. This method can be used for you to find and reuse existing audience exports rather than creating unnecessary new audience exports. The same audience can have multiple audience exports that represent the export of users that were in an audience on different days. See [Creating an Audience Export](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics) for an introduction to Audience Exports with examples. Audience Export APIs have some methods at alpha and other methods at beta stability. The intention is to advance methods to beta stability after some feedback and adoption. To give your feedback on this API, complete the [Google Analytics Audience Export API Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
		/// Analyticsdata_properties_audienceExports_list v1beta/{parent}/audienceExports
		/// </summary>
		/// <param name="parent">Required. All audience exports for this property will be listed in the response. Format: `properties/{property}`</param>
		/// <param name="pageSize">Optional. The maximum number of audience exports to return. The service may return fewer than this value. If unspecified, at most 200 audience exports will be returned. The maximum value is 1000 (higher values will be coerced to the maximum).</param>
		/// <param name="pageToken">Optional. A page token, received from a previous `ListAudienceExports` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAudienceExports` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAudienceExportsResponse> Analyticsdata_properties_audienceExports_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/audienceExports&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAudienceExportsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an audience export for later retrieval. This method quickly returns the audience export's resource name and initiates a long running asynchronous request to form an audience export. To export the users in an audience export, first create the audience export through this method and then send the audience resource name to the `QueryAudienceExport` method. See [Creating an Audience Export](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics) for an introduction to Audience Exports with examples. An audience export is a snapshot of the users currently in the audience at the time of audience export creation. Creating audience exports for one audience on different days will return different results as users enter and exit the audience. Audiences in Google Analytics 4 allow you to segment your users in the ways that are important to your business. To learn more, see https://support.google.com/analytics/answer/9267572. Audience exports contain the users in each audience. Audience Export APIs have some methods at alpha and other methods at beta stability. The intention is to advance methods to beta stability after some feedback and adoption. To give your feedback on this API, complete the [Google Analytics Audience Export API Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
		/// Analyticsdata_properties_audienceExports_create v1beta/{parent}/audienceExports
		/// </summary>
		/// <param name="parent">Required. The parent resource where this audience export will be created. Format: `properties/{property}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Analyticsdata_properties_audienceExports_createAsync(string parent, AudienceExport requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/audienceExports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns multiple pivot reports in a batch. All reports must be for the same GA4 Property.
		/// Analyticsdata_properties_batchRunPivotReports v1beta/{property}:batchRunPivotReports
		/// </summary>
		/// <param name="property">A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). This property must be specified for the batch. The property within RunPivotReportRequest may either be unspecified or consistent with this property. Example: properties/1234</param>
		/// <returns>Successful response</returns>
		public async Task<BatchRunPivotReportsResponse> Analyticsdata_properties_batchRunPivotReportsAsync(string property, BatchRunPivotReportsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (property==null? "" : System.Uri.EscapeDataString(property))+":batchRunPivotReports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchRunPivotReportsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns multiple reports in a batch. All reports must be for the same GA4 Property.
		/// Analyticsdata_properties_batchRunReports v1beta/{property}:batchRunReports
		/// </summary>
		/// <param name="property">A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). This property must be specified for the batch. The property within RunReportRequest may either be unspecified or consistent with this property. Example: properties/1234</param>
		/// <returns>Successful response</returns>
		public async Task<BatchRunReportsResponse> Analyticsdata_properties_batchRunReportsAsync(string property, BatchRunReportsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (property==null? "" : System.Uri.EscapeDataString(property))+":batchRunReports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchRunReportsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This compatibility method lists dimensions and metrics that can be added to a report request and maintain compatibility. This method fails if the request's dimensions and metrics are incompatible. In Google Analytics, reports fail if they request incompatible dimensions and/or metrics; in that case, you will need to remove dimensions and/or metrics from the incompatible report until the report is compatible. The Realtime and Core reports have different compatibility rules. This method checks compatibility for Core reports.
		/// Analyticsdata_properties_checkCompatibility v1beta/{property}:checkCompatibility
		/// </summary>
		/// <param name="property">A Google Analytics GA4 property identifier whose events are tracked. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). `property` should be the same value as in your `runReport` request. Example: properties/1234</param>
		/// <returns>Successful response</returns>
		public async Task<CheckCompatibilityResponse> Analyticsdata_properties_checkCompatibilityAsync(string property, CheckCompatibilityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (property==null? "" : System.Uri.EscapeDataString(property))+":checkCompatibility";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckCompatibilityResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a customized pivot report of your Google Analytics event data. Pivot reports are more advanced and expressive formats than regular reports. In a pivot report, dimensions are only visible if they are included in a pivot. Multiple pivots can be specified to further dissect your data.
		/// Analyticsdata_properties_runPivotReport v1beta/{property}:runPivotReport
		/// </summary>
		/// <param name="property">A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Within a batch request, this property should either be unspecified or consistent with the batch-level property. Example: properties/1234</param>
		/// <returns>Successful response</returns>
		public async Task<RunPivotReportResponse> Analyticsdata_properties_runPivotReportAsync(string property, RunPivotReportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (property==null? "" : System.Uri.EscapeDataString(property))+":runPivotReport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RunPivotReportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a customized report of realtime event data for your property. Events appear in realtime reports seconds after they have been sent to the Google Analytics. Realtime reports show events and usage data for the periods of time ranging from the present moment to 30 minutes ago (up to 60 minutes for Google Analytics 360 properties). For a guide to constructing realtime requests & understanding responses, see [Creating a Realtime Report](https://developers.google.com/analytics/devguides/reporting/data/v1/realtime-basics).
		/// Analyticsdata_properties_runRealtimeReport v1beta/{property}:runRealtimeReport
		/// </summary>
		/// <param name="property">A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Example: properties/1234</param>
		/// <returns>Successful response</returns>
		public async Task<RunRealtimeReportResponse> Analyticsdata_properties_runRealtimeReportAsync(string property, RunRealtimeReportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (property==null? "" : System.Uri.EscapeDataString(property))+":runRealtimeReport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RunRealtimeReportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a customized report of your Google Analytics event data. Reports contain statistics derived from data collected by the Google Analytics tracking code. The data returned from the API is as a table with columns for the requested dimensions and metrics. Metrics are individual measurements of user activity on your property, such as active users or event count. Dimensions break down metrics across some common criteria, such as country or event name. For a guide to constructing requests & understanding responses, see [Creating a Report](https://developers.google.com/analytics/devguides/reporting/data/v1/basics).
		/// Analyticsdata_properties_runReport v1beta/{property}:runReport
		/// </summary>
		/// <param name="property">A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Within a batch request, this property should either be unspecified or consistent with the batch-level property. Example: properties/1234</param>
		/// <returns>Successful response</returns>
		public async Task<RunReportResponse> Analyticsdata_properties_runReportAsync(string property, RunReportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (property==null? "" : System.Uri.EscapeDataString(property))+":runReport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RunReportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
