//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// required subset of collaborator data to get a permission
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Add_new_collaborator_request
	{
		
		[System.Runtime.Serialization.DataMember(Name="collaborator_type")]
		public string Collaborator_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_email")]
		public string User_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	/// <summary>
	/// Base model for all types
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Base_model
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_by")]
		public string Updated_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cache_post_request
	{
		
		[System.Runtime.Serialization.DataMember(Name="current_user_id")]
		public string Current_user_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonce")]
		public string Nonce { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subdocument")]
		public string Subdocument { get; set; }
	}
	
	/// <summary>
	/// allows for bulk updating of user_ids and active status based on a lead id or user_id
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Collaborator_bulk_update_request
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lead_id")]
		public System.Nullable<System.Int32> Lead_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	/// <summary>
	/// Request body for creating a session
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Create_session_request
	{
		
		[System.Runtime.Serialization.DataMember(Name="collaboratorUserId")]
		public string CollaboratorUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
	}
	
	/// <summary>
	/// An Story Event object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class event_ : Base_model
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chat_prompt")]
		public string Chat_prompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversation_id")]
		public string Conversation_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dom_selectors")]
		public string Dom_selectors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_chat_hidden")]
		public System.Nullable<System.Boolean> Is_chat_hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_notify_enabled")]
		public System.Nullable<System.Boolean> Is_notify_enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A Base64 encoded file object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class File_upload
	{
		
		[System.Runtime.Serialization.DataMember(Name="content_length")]
		public System.Nullable<System.Int32> Content_length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_name")]
		public string File_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mimetype")]
		public string Mimetype { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Manage_event
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<Manage_eventAction> Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="action_params")]
		public string Action_params { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Manage_eventAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		create = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fire = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		change = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delete = 3,
	}
	
	/// <summary>
	/// A conversation message
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Message
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remote")]
		public System.Nullable<System.Boolean> Remote { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// Action can be either "delete" or "activate".  Either lead_id or user_id is required.  user_id takes precedence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Modify_inactive_collaborator
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lead_id")]
		public System.Nullable<System.Int32> Lead_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	/// <summary>
	/// A reference to an Ooxml Automation Document from the Presalytics Ooxml Automation API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Ooxml_document : Base_model
	{
		
		[System.Runtime.Serialization.DataMember(Name="delete_target_on_story_delete")]
		public System.Nullable<System.Boolean> Delete_target_on_story_delete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxml_automation_id")]
		public string Ooxml_automation_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="story_id")]
		public string Story_id { get; set; }
	}
	
	/// <summary>
	/// story_outline (json object)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Outline
	{
		
		[System.Runtime.Serialization.DataMember(Name="outline")]
		public string Outline1 { get; set; }
	}
	
	/// <summary>
	/// A permission type that can be applied to story collaborator
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Permission_type : Base_model
	{
		
		[System.Runtime.Serialization.DataMember(Name="can_add_collaborators")]
		public System.Nullable<System.Boolean> Can_add_collaborators { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="can_delete")]
		public System.Nullable<System.Boolean> Can_delete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="can_edit")]
		public System.Nullable<System.Boolean> Can_edit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="can_view")]
		public System.Nullable<System.Boolean> Can_view { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Error reponse model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Problem_detail
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A user session with an open story
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Session : Base_model
	{
		
		/// <summary>
		/// Description of a user that can collaborate on a story
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collaborator")]
		public Story_collaborator Collaborator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collaborator_id")]
		public string Collaborator_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outline_revision")]
		public System.Nullable<System.Int32> Outline_revision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="views")]
		public View[] Views { get; set; }
	}
	
	/// <summary>
	/// A Page view within a session-create
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class View : Base_model
	{
		
		[System.Runtime.Serialization.DataMember(Name="active_msecs")]
		public System.Nullable<System.Int32> Active_msecs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additional")]
		public string Additional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.DateTimeOffset> End_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_number")]
		public System.Nullable<System.Int32> Page_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="session_id")]
		public string Session_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.DateTimeOffset> Start_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_msecs")]
		public System.Nullable<System.Int32> Total_msecs { get; set; }
	}
	
	/// <summary>
	/// Status response when returning 202s
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status1 { get; set; }
	}
	
	/// <summary>
	/// Model for story objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Story : Base_model
	{
		
		[System.Runtime.Serialization.DataMember(Name="collaborators")]
		public Story_collaborator[] Collaborators { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_public")]
		public System.Nullable<System.Boolean> Is_public { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxml_documents")]
		public Ooxml_document[] Ooxml_documents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outline")]
		public string Outline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outline_history")]
		public Story_outline_history[] Outline_history { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Description of a user that can collaborate on a story
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Story_collaborator : Base_model
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lead_id")]
		public System.Nullable<System.Int32> Lead_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A permission type that can be applied to story collaborator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permission_type")]
		public Permission_type Permission_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission_type_id")]
		public string Permission_type_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="story_id")]
		public string Story_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	/// <summary>
	/// A revision repository for story outlines
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Story_outline_history : Base_model
	{
		
		[System.Runtime.Serialization.DataMember(Name="collaborator_user_id")]
		public string Collaborator_user_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outline")]
		public string Outline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revision_number")]
		public string Revision_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="story_id")]
		public string Story_id { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Story: Get List of User Stories
		/// Returns a list of stories for this user identifie via the access token presentated to the api
		/// Story_get 
		/// </summary>
		/// <param name="include_relationships">Indicate whether the returned object should include child relationships</param>
		/// <param name="include_outline">Determines whether a repsonse including story objects should include the story outline.  Defaults to true. Useful for speeding up processing times.</param>
		/// <returns>List of stories for this user</returns>
		public async Task<Story[]> Story_getAsync(bool include_relationships, bool include_outline, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "?include_relationships="+include_relationships+"&include_outline="+include_outline;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Story[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Story: Upload
		/// Upload new story to presalytics api
		/// Story_post 
		/// </summary>
		/// <param name="include_outline">Determines whether a repsonse including story objects should include the story outline.  Defaults to true. Useful for speeding up processing times.</param>
		/// <param name="requestBody">A story outline json object</param>
		/// <returns>Success responses with story object</returns>
		public async Task<Story> Story_postAsync(bool include_outline, Outline requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "?include_outline="+include_outline;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Story>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cache: Store Subdocument
		/// An endpoint for Presalytics Renderers to cache html subdocuments for subsequent retrieval by the browser.  Documents Are retrieved via token expire after 1 minute.
		/// Cache_post cache
		/// </summary>
		/// <param name="requestBody">parameters to identify an update a collaborator across multiple stories</param>
		public async Task Cache_postAsync(Cache_post_request requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cache";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cache: Get Subdocument
		/// An endpoint for broswer retreive html documents that were cached durin the rendering process via a nonce (token)
		/// Cache_nonce_get cache/{nonce}
		/// </summary>
		/// <param name="nonce">A one-time use token for retieving items in the users cache</param>
		/// <returns>A cached html subdocument (typically loaded via iframe)</returns>
		public async Task Cache_nonce_getAsync(string nonce, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cache/"+ (nonce==null? "" : System.Uri.EscapeDataString(nonce));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Collborators: Bulk Update (Admin Only)
		/// Allows for bulk updates on collaborator metadata.  Restricted to internal admins
		/// Collaborators_post collaborators
		/// </summary>
		/// <param name="requestBody">parameters to identify an update a collaborator across multiple stories</param>
		/// <returns>Array of all possible permission types</returns>
		public async Task<Permission_type[]> Collaborators_postAsync(Collaborator_bulk_update_request requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collaborators";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Permission_type[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Environment: Get
		/// pass rendering metadata to the client-side scripts
		/// Get_environment environment/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string> Get_environmentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environment/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Story: Upload a File (base64)
		/// Upload new story to presalytics api via an Open Office Xml file
		/// Story_post_file_json file/json
		/// </summary>
		/// <param name="include_outline">Determines whether a repsonse including story objects should include the story outline.  Defaults to true. Useful for speeding up processing times.</param>
		/// <param name="requestBody">A json-formatted object that includes a base64 encoded file (file encoded utf-8)</param>
		/// <returns>Success responses with story object</returns>
		public async Task<Story> Story_post_file_jsonAsync(bool include_outline, File_upload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "file/json?include_outline="+include_outline;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Story>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Specification: No tags
		/// json-formatted version of this spec with the tags removed to help with codegen processes
		/// Spec_no_tags no_tags_spec
		/// </summary>
		/// <returns>Success</returns>
		public async Task Spec_no_tagsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "no_tags_spec";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Story Outline Schema
		/// Json Schema for validating Story Outline objects
		/// Story_outline_schema outline-schema/{schema_version}/story-outline.json
		/// </summary>
		/// <param name="schema_version">The semanitic version of a schema (e.g. '0.3.1')</param>
		/// <returns>Success</returns>
		public async Task Story_outline_schemaAsync(string schema_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "outline-schema/"+ (schema_version==null? "" : System.Uri.EscapeDataString(schema_version))+"/story-outline.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permissions: List Permission Types
		/// Returns a list of possible user permission types
		/// Story_permission_types_get permission_types
		/// </summary>
		/// <returns>Array of all possible permission types</returns>
		public async Task<Permission_type[]> Story_permission_types_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permission_types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Permission_type[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sessions: Delete by Id
		/// Remove a session and dependant data.
		/// Session_id_delete sessions/{session_id}
		/// </summary>
		/// <param name="session_id">The primary key for a view session</param>
		public async Task Session_id_deleteAsync(string session_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sessions/"+ (session_id==null? "" : System.Uri.EscapeDataString(session_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sessions: Get
		/// Get session metadata
		/// Session_id_get sessions/{session_id}
		/// </summary>
		/// <param name="session_id">The primary key for a view session</param>
		/// <param name="include_relationships">Indicate whether the returned object should include child relationships</param>
		/// <returns>A session object</returns>
		public async Task<Session> Session_id_getAsync(string session_id, bool include_relationships, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sessions/"+ (session_id==null? "" : System.Uri.EscapeDataString(session_id))+"&include_relationships="+include_relationships;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Session>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Views: List Session Views
		/// Get data for all views in a session
		/// Sessions_id_views_get sessions/{session_id}/views
		/// </summary>
		/// <param name="session_id">The primary key for a view session</param>
		/// <returns>A List of session views</returns>
		public async Task<View[]> Sessions_id_views_getAsync(string session_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sessions/"+ (session_id==null? "" : System.Uri.EscapeDataString(session_id))+"/views";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<View[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Views: Create A Session View
		/// Create a page view object for a viewing session
		/// Sessions_id_views_post sessions/{session_id}/views
		/// </summary>
		/// <param name="session_id">The primary key for a view session</param>
		/// <param name="requestBody">Collaborator user id and permission type</param>
		/// <returns>A new view object</returns>
		public async Task<View> Sessions_id_views_postAsync(string session_id, Sessions_id_views_postPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sessions/"+ (session_id==null? "" : System.Uri.EscapeDataString(session_id))+"/views";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<View>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Views: Delete by Id
		/// Remove a view and dependant data.
		/// Views_id_delete views/{view_id}
		/// </summary>
		/// <param name="view_id">The primary key for a page view within a session</param>
		public async Task Views_id_deleteAsync(string view_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "views/"+ (view_id==null? "" : System.Uri.EscapeDataString(view_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Views: Get View
		/// Get view meta data
		/// Views_id_get views/{view_id}
		/// </summary>
		/// <param name="view_id">The primary key for a page view within a session</param>
		/// <returns>A List of session views</returns>
		public async Task<View> Views_id_getAsync(string view_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "views/"+ (view_id==null? "" : System.Uri.EscapeDataString(view_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<View>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Story: Delete by Id
		/// Remove a story and dependant data.
		/// Story_id_delete {id}
		/// </summary>
		/// <param name="id">the id from the story object</param>
		public async Task Story_id_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Story: Get by Id
		/// Returns story metadata, inlcuding json object with story outline
		/// Story_id_get {id}
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="include_relationships">Indicate whether the returned object should include child relationships</param>
		/// <param name="include_outline">Determines whether a repsonse including story objects should include the story outline.  Defaults to true. Useful for speeding up processing times.</param>
		/// <param name="full">Pull a story object with associated collaborator user, permission, and session data(faster if cached from prior api call)</param>
		/// <param name="refresh_cache">Force the api reload the `Story full` object</param>
		/// <returns>Success responses with story object</returns>
		public async Task<Story> Story_id_getAsync(string id, bool include_relationships, bool include_outline, bool full, bool refresh_cache, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include_relationships="+include_relationships+"&include_outline="+include_outline+"&full="+full+"&refresh_cache="+refresh_cache;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Story>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Story: Modify
		/// Update story metadata, including story outline
		/// Story_id_put {id}
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="include_outline">Determines whether a repsonse including story objects should include the story outline.  Defaults to true. Useful for speeding up processing times.</param>
		/// <param name="requestBody">The updated story object</param>
		/// <returns>Success responses with story object</returns>
		public async Task<Story> Story_id_putAsync(string id, bool include_outline, Story requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include_outline="+include_outline;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Story>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Story: View Analytics
		/// returns an html document containing session and event metrics for the story
		/// Story_id_analytics {id}/analytics
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <returns>An html document containing session analytics for the story</returns>
		public async Task<string> Story_id_analyticsAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/analytics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Story Collaborators: List
		/// Gets a list users that can read or edit this story
		/// Story_id_collaborators_get {id}/collaborators
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <returns>List of collaborators on the story</returns>
		public async Task<Story_collaborator[]> Story_id_collaborators_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/collaborators";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Story_collaborator[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Story Collaborators: Add New User
		/// Add a colloborator to this story
		/// Story_id_collaborators_post {id}/collaborators
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="requestBody">Collaborator user id and permission type</param>
		/// <returns>Collaborator data</returns>
		public async Task<Story_collaborator> Story_id_collaborators_postAsync(string id, Add_new_collaborator_request requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/collaborators";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Story_collaborator>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Permissions: Story Authorization for a User
		/// Check whether user have certain types of permissions.  Use http status codes to understand if permission is granted - 204 = Granted, 403 = Forbidden
		/// Story_id_collaborators_userid_permissiontype_get {id}/collaborators/authorize/{story_collaborator_userid}/{permissiontype}
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="story_collaborator_userid">The presalytics userid (NOT the Id of the story_collaborator object)</param>
		/// <param name="permissiontype">the type of permission requested.  can be a permission_type object name (e.g., owner, editor, create, viewer, admin) or a permission type field (e.g., can_edit, can_view, can_add_collaborators, can_delete)</param>
		public async Task Story_id_collaborators_userid_permissiontype_getAsync(string id, string story_collaborator_userid, string permissiontype, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/collaborators/authorize/"+ (story_collaborator_userid==null? "" : System.Uri.EscapeDataString(story_collaborator_userid))+"/"+ (permissiontype==null? "" : System.Uri.EscapeDataString(permissiontype));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Story Collaborators: Edit Inactive User Permission
		/// Edit story permissions for inactive users.  Requires admin rights.
		/// Story_id_collaborators_inactive_post {id}/collaborators/inactive
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="requestBody">Collaborator user id and permission type</param>
		/// <returns>Collaborator data</returns>
		public async Task<Story_collaborator> Story_id_collaborators_inactive_postAsync(string id, Modify_inactive_collaborator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/collaborators/inactive";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Story_collaborator>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Story Collaborators: Remove User
		/// Remove a collaborator from this story
		/// Story_id_collaborators_userid_delete {id}/collaborators/{story_collaborator_userid}
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="story_collaborator_userid">The presalytics userid (NOT the Id of the story_collaborator object)</param>
		public async Task Story_id_collaborators_userid_deleteAsync(string id, string story_collaborator_userid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/collaborators/"+ (story_collaborator_userid==null? "" : System.Uri.EscapeDataString(story_collaborator_userid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Story Collaborators: Access Permissions
		/// Data to help you understand the access rights of a particular collaborator on this story
		/// Story_id_collaborators_userid_get {id}/collaborators/{story_collaborator_userid}
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="story_collaborator_userid">The presalytics userid (NOT the Id of the story_collaborator object)</param>
		/// <returns>Collaborator data</returns>
		public async Task<Story_collaborator> Story_id_collaborators_userid_getAsync(string id, string story_collaborator_userid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/collaborators/"+ (story_collaborator_userid==null? "" : System.Uri.EscapeDataString(story_collaborator_userid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Story_collaborator>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Story Collaborators: Edit Access Rights
		/// Modify a user's access right to this story (e.g., grant edit permissions)
		/// Story_id_collaborators_userid_put {id}/collaborators/{story_collaborator_userid}
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="story_collaborator_userid">The presalytics userid (NOT the Id of the story_collaborator object)</param>
		/// <param name="requestBody">Collaborator user id (presalytics userid) and permission type</param>
		/// <returns>Collaborator data</returns>
		public async Task<Story_collaborator> Story_id_collaborators_userid_putAsync(string id, string story_collaborator_userid, Story_collaborator requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/collaborators/"+ (story_collaborator_userid==null? "" : System.Uri.EscapeDataString(story_collaborator_userid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Story_collaborator>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Events: List Events
		/// Get a list of Events available to users of this story
		/// Story_id_events_get {id}/events
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <returns>An Array of events</returns>
		public async Task<event_[]> Story_id_events_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<event_[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Events: Manage Events
		/// Add a message to the Story's conversation
		/// Story_id_events_post {id}/events
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="requestBody">Collaborator user id and permission type</param>
		/// <returns>A repsonse to the requested action</returns>
		public async Task<string> Story_id_events_postAsync(string id, Manage_event requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Story: Delete Subdocument
		/// Deletes a subdcoument of this story (e.g., .pptx, .docx, .xlsx)
		/// Story_id_file_ooxmlautomationid_delete {id}/file/{ooxml_automation_id}
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="ooxml_automation_id">the id of the ooxml_automation object</param>
		public async Task Story_id_file_ooxmlautomationid_deleteAsync(string id, string ooxml_automation_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/file/"+ (ooxml_automation_id==null? "" : System.Uri.EscapeDataString(ooxml_automation_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Story: Download Updated File
		/// Redtreives updated story as open office xml file (e.g., .pptx, .docx, .xlsx)
		/// Story_id_file_ooxmlautomationid_get {id}/file/{ooxml_automation_id}
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="ooxml_automation_id">the id of the ooxml_automation object</param>
		/// <returns>The latest versiono of the story, in its orginal file format</returns>
		public async Task Story_id_file_ooxmlautomationid_getAsync(string id, string ooxml_automation_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/file/"+ (ooxml_automation_id==null? "" : System.Uri.EscapeDataString(ooxml_automation_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Conversation: List Conversation Messages
		/// Get a list of messages that have been send in this story
		/// Story_id_messages_get {id}/messages
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <returns>An Array of conversation messages</returns>
		public async Task<Message[]> Story_id_messages_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/messages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Message[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Conversation: Send a Message
		/// Add a message to the Story's conversation
		/// Story_id_messages_post {id}/messages
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="requestBody">The message text</param>
		public async Task Story_id_messages_postAsync(string id, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/messages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Story: Get Story Outline
		/// Returns Story's outline
		/// Story_id_outline_get {id}/outline
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <returns>Stringified Story outline</returns>
		public async Task<string> Story_id_outline_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/outline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Story: Post Story Outline
		/// Update a story outline.
		/// Story_id_outline_post {id}/outline
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="requestBody">A story outline object</param>
		public async Task Story_id_outline_postAsync(string id, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/outline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Story: Public Link to Story Reveal.js Document
		/// returns an html document containing a reveal.js epresentation of the story, if the story if set to is_public = True
		/// Story_id_public {id}/public/
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <returns>An html document containing a reveal.js represenation of the story</returns>
		public async Task<string> Story_id_publicAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/public/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Story: Get Story at Reveal.js Document
		/// returns an html document containing a reveal.js epresentation of the story
		/// Story_id_reveal {id}/reveal
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <returns>An html document containing a reveal.js represenation of the story</returns>
		public async Task<string> Story_id_revealAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/reveal";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sessions: List Story Sessions
		/// Get a list of sessions asscoaited with this story
		/// Story_id_sessions_get {id}/sessions
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="include_relationships">Indicate whether the returned object should include child relationships</param>
		/// <returns>An array of session objects</returns>
		public async Task<Session[]> Story_id_sessions_getAsync(string id, bool include_relationships, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/sessions&include_relationships="+include_relationships;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Session[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sessions: Create a Session
		/// Create a new session
		/// Story_id_session_post {id}/sessions
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <param name="requestBody">Collaborator user id and permission type</param>
		/// <returns>A new session object</returns>
		public async Task<Session> Story_id_session_postAsync(string id, Create_session_request requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/sessions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Session>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Story: Get Story Status
		/// Returns code indicating whether story has active running background and is healthy (e.g., the latest outline is valid)
		/// Story_id_status_get {id}/status
		/// </summary>
		/// <param name="id">the id from the story object</param>
		/// <returns>Accepted</returns>
		public async Task<Status> Story_id_status_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id))+"/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Status>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class Sessions_id_views_postPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeMSecs")]
		public System.Nullable<System.Int32> ActiveMSecs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additional")]
		public string Additional { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
